-----------------------------------------------------------------------------------
  -- START: DDL for Objects/Types
-----------------------------------------------------------------------------------
CREATE OR REPLACE TYPE "ACAVEAT_OBJ"                                                                          AS OBJECT (
   o_caveatid       NUMBER,
   o_desc           VARCHAR2 (2000),
   o_caveatedon     DATE,
   o_updatedon      DATE,
   o_accesscaveat   VARCHAR2 (20)
);
/


CREATE OR REPLACE TYPE "ACAVEAT_TAB"                                                                          as table of acaveat_obj;
/


CREATE OR REPLACE TYPE aqref_obj AS OBJECT (
   o_siteid                         NUMBER,
   o_aqref                          VARCHAR2 (50),
   o_pricingstatus                  VARCHAR2 (30),
   o_accspeed                       VARCHAR2 (20),
   o_supplier                       VARCHAR2 (100),
   o_leadtime                       VARCHAR2 (10),
   o_portspeed                      VARCHAR2 (20),
   o_onetimechrg                    NUMBER (10, 2),
   o_recchrg                        NUMBER (10, 2),
   o_portspeedval                   NUMBER,
   o_portuom                        VARCHAR2 (10),
   o_accspeedval                    NUMBER,
   o_accuom                         VARCHAR2 (10),
   o_accprodtyp                     VARCHAR2 (50),
   o_acctech                        VARCHAR2 (50),
   o_supprodname                    VARCHAR2 (100),
   o_gpopnode                       VARCHAR2 (150),
   o_distgpop                       VARCHAR2 (20),
   o_apopnode                       VARCHAR2 (150),
   o_distapop                       VARCHAR2 (20),
   o_term                           NUMBER,
   o_legid                          VARCHAR2 (10),
   o_pairid                         NUMBER,
   o_expdttimezone                  VARCHAR2 (10),
   o_tariffzone                     VARCHAR2 (255),
   o_nocopperpairs                  NUMBER,
   o_circuitintf                    VARCHAR2 (50),
   o_autopricedflag                 CHAR (1),
   o_budgtpricedflag                CHAR (1),
   o_intftyp                        VARCHAR2 (50),
   o_framingdet                     VARCHAR2 (100),
   o_connector                      VARCHAR2 (50),
   o_installcost                    NUMBER (10, 2),
   o_suppcost                       NUMBER (10, 2),
   o_backhaulcost                   NUMBER (10, 2),
   o_lcltailcost                    NUMBER (10, 2),
   o_costacccur                     VARCHAR2 (10),
   o_resflag                        CHAR (1),
   o_comments                       VARCHAR2 (255),
   o_nniflag                        VARCHAR2 (3),
   o_support                        VARCHAR2 (20),
   o_senttoape                      CHAR (1),
   o_mnthlycost                     NUMBER (10, 2),
   o_acctype                        VARCHAR2 (50),
   o_expdate                        DATE,
   o_apopflag                       VARCHAR2 (3),
   o_portstatus                     VARCHAR2 (25),
   o_gpopid                         VARCHAR2 (100),
   o_apopid                         VARCHAR2 (100),
   o_portspdavailst                 VARCHAR2 (15),
   o_method                         VARCHAR2 (60),
   o_aggqtlineid                    NUMBER,
   o_encap                          VARCHAR2 (100),
   o_guaranteedspeed                VARCHAR2 (50),
   o_timetodel                      VARCHAR2 (10),
   o_ispaddr                        VARCHAR2 (15),
   o_mnthlyrecchrg                  NUMBER (10, 2),
   o_nonrecchrg                     NUMBER (10, 2),
   o_accavail                       VARCHAR2 (20),
   o_servicecat                     VARCHAR2 (20),
   o_othersernotes                  VARCHAR2 (255),
   o_addchrg                        NUMBER (10, 2),
   o_transactiontyp                 VARCHAR2 (10),
   o_hvpnacctech                    VARCHAR2 (20),
   o_pricingid                      VARCHAR2 (20),
   o_serviceid                      VARCHAR2 (20),
   o_copperdet                      VARCHAR2 (20),
   o_copperserid                    VARCHAR2 (30),
   o_rfanotes                       VARCHAR2 (150),
   o_mrc                            NUMBER (10, 2),
   o_nrc                            NUMBER (10, 2),
   o_tarrifzone                     VARCHAR2 (255),
   o_rfonotes                       VARCHAR2 (500),
   o_caveat                         acaveat_tab,
   o_copper_pair                    NUMBER (15),
   o_ethernet_phase_attribute       VARCHAR2 (20),
   o_non_std_qref_flag              VARCHAR2 (1),
   o_ape_comments                   VARCHAR2 (100),
   o_apop_code                      VARCHAR2 (150),
   o_cease_charges                  VARCHAR2 (16),
   o_gpop                           VARCHAR2 (255),
   o_gpop_code                      VARCHAR2 (150),
   o_network_type                   VARCHAR2 (50),
   o_partner_name                   VARCHAR2 (50),
   o_ptp_mrc                        NUMBER (10, 2),
   o_ptp_nrc                        NUMBER (10, 2),
   o_qref_type                      VARCHAR2 (10),
   o_rbpurl                         VARCHAR2 (250),
   o_resiliency                     VARCHAR2 (50),
   o_staff_member_email             VARCHAR2 (50),
   o_staff_member_name              VARCHAR2 (50),
   o_support_24_7                   VARCHAR2 (255),
   o_workflow_status                VARCHAR2 (50),
   o_service_variant                VARCHAR2 (300),
   o_optm_qref                      VARCHAR2 (50),
   o_optm_rentl_cost_y1             NUMBER (10, 2),
   o_optm_rentl_cost_y2             NUMBER (10, 2),
   o_optm_rentl_cost_y3             NUMBER (10, 2),
   o_optm_rentl_cost_y4             NUMBER (10, 2),
   o_optm_rentl_cost_y5             NUMBER (10, 2),
   o_optm_rentl_price_y1            NUMBER (10, 2),
   o_optm_rentl_price_y2            NUMBER (10, 2),
   o_optm_rentl_price_y3            NUMBER (10, 2),
   o_optm_rentl_price_y4            NUMBER (10, 2),
   o_optm_rentl_price_y5            NUMBER (10, 2),
   o_optm_install_y1                NUMBER (10, 2),
   o_install_percent_reduction_y1   NUMBER (10, 2),
   o_percent_reduction_cost_y1      NUMBER (10, 2),
   o_percent_reduction_cost_y2      NUMBER (10, 2),
   o_percent_reduction_cost_y3      NUMBER (10, 2),
   o_percent_reduction_cost_y4      NUMBER (10, 2),
   o_percent_reduction_cost_y5      NUMBER (10, 2),
   o_tpe_ref_id                     VARCHAR2 (100),
   o_supplier_ref_id                VARCHAR2 (100)
);
/


CREATE OR REPLACE TYPE aqref_tab AS TABLE OF aqref_obj;
/


CREATE OR REPLACE TYPE "ATTACHMENT_OBJ"                                                                          is object
(
site_id number(10),
URL      varchar2(250),
downloaded_to_classic   varchar2(1),
attachment_type varchar2(50),
source varchar2(250),
Attachment_applies_to   VARCHAR2(50)
);
/


CREATE OR REPLACE TYPE "ATTACHMENT_TBL"                                                                          AS  TABLE OF attachment_obj;
/


CREATE OR REPLACE TYPE "BFG_INVENTORY_DETAIL_OBJ"                                                                          as object
(
bfg_id_1 varchar2(32),
bfg_id_2 varchar2(32),
bfg_id_3 varchar2(32),
bfg_id_4 varchar2(32),
product_id NUMBER (10),
FALLBACK_TYPE VARCHAR2 (20 Byte)
);
/


CREATE OR REPLACE TYPE "BFG_INVENTORY_DETAIL_TBL"                                                                           as table of bfg_inventory_detail_obj;
/


CREATE OR REPLACE TYPE "BID_DETAIL_OBJ"                                                                          AS OBJECT
(
PRODUCT_ID          NUMBER,
PRODUCT_NAME        VARCHAR2(100),
REQUEST_NAME        VARCHAR2(100),
NON_STANDARD_FLAG   CHAR (1),
ACTIVE              CHAR (1)
);
/


CREATE OR REPLACE TYPE "BID_DETAIL_TAB"                                                                          as table of BID_DETAIL_OBJ;
/


CREATE OR REPLACE TYPE "BID_REQUEST_STATUS_OBJ"                                                                          AS OBJECT
(
PRODUCT_ID          NUMBER,
PRODUCT_NAME        VARCHAR2(100),
SPECIAL_BID_NUMBER  VARCHAR2(10),
ACTIVE              CHAR (1),
NON_STD_BID_ITEMS   VARCHAR2(100),
TPP_URL             VARCHAR2(500),
ROW_ID              NUMBER,
NON_STD_COMP        VARCHAR2(100),
FALLBACK_TYPE       VARCHAR2(20)
);
/


CREATE OR REPLACE TYPE "BID_REQUEST_STATUS_TAB"                                                                          as table of BID_REQUEST_STATUS_OBJ;
/


CREATE OR REPLACE TYPE "BILLING_OBJ" as object
(
  o_bfg_bill_account_id                 VARCHAR2(255),
  o_account_name 	                VARCHAR2(40),
  o_currency                            VARCHAR2(10)
 );
/


CREATE OR REPLACE type BILLING_TAB as table of BILLING_OBJ ;
/


CREATE OR REPLACE TYPE "BUCKET_OBJ"                                                                          as object
(o_sitename varchar2(100),
o_configlevel varchar2(50),
o_prodname      varchar2(100)
);
/


CREATE OR REPLACE TYPE "BUCKET_TAB"                                                                          as table of bucket_obj;
/


CREATE OR REPLACE TYPE "BULKUPLOAD_BID_REQ_STAT_OBJ"                                                                                       AS OBJECT
(
    SITE_ID                      NUMBER,
    PRODUCT_ID                   NUMBER,
    PRODUCT_NAME                 VARCHAR2(100),
    SPECIAL_BID_NUMBER           VARCHAR2(10),
    BID_STATUS                   VARCHAR2 (20),
    PRI_ONE_TIME_INSTALL_COST    VARCHAR2 (20),
    SEC_ONE_TIME_INSTALL_COST    VARCHAR2 (20),
    PRI_MONTHLY_RECURRING_COST   VARCHAR2 (20),
    SEC_MONTHLY_RECURRING_COST   VARCHAR2 (20),
    DATA_BUILD_DONE              VARCHAR2 (5),
    ACTIVATION_DUE_DATE          DATE,
    BID_EXPIRY_DATE              DATE,
    NON_STD_BID_ITEMS            VARCHAR2(100),
    TPP_URL                      VARCHAR2(500),
    ROW_ID                       NUMBER,
    NON_STD_COMP                 VARCHAR2(100),
    FALLBACK_TYPE_PRI            VARCHAR2(20),
    FALLBACK_TYPE_SEC            VARCHAR2(20)
);
/


CREATE OR REPLACE TYPE "BULKUPLOAD_BID_REQ_STAT_TAB"                                                                          as table of BULKUPLOAD_BID_REQ_STAT_OBJ;
/


CREATE OR REPLACE TYPE BULKUPLOAD_OBJ AS OBJECT (
   o_sitename        VARCHAR2 (100),
   o_country         VARCHAR2 (50),
   o_city            VARCHAR2 (50),
   o_bldgno          VARCHAR2 (15),
   o_addrline1       VARCHAR2 (50),
   o_addrline2       VARCHAR2 (50),
   o_postcode        VARCHAR2 (10),
   o_state           VARCHAR2 (50),
   o_telareacode     VARCHAR2 (10),
   o_room            VARCHAR2 (20),
   o_floor           VARCHAR2 (20),
   o_prilname        VARCHAR2 (50),
   o_prifname        VARCHAR2 (50),
   o_prijob          VARCHAR2 (30),
   o_priemail        VARCHAR2 (50),
   o_priphone        VARCHAR2 (20),
   o_primobile       VARCHAR2 (20),
   o_prifax          VARCHAR2 (20),
   o_seclname        VARCHAR2 (50),
   o_secfname        VARCHAR2 (50),
   o_secjob          VARCHAR2 (30),
   o_secemail        VARCHAR2 (50),
   o_secphone        VARCHAR2 (20),
   o_secmobile       VARCHAR2 (20),
   o_secfax          VARCHAR2 (20),
   o_customername    VARCHAR2 (255),
   o_phonenumber     VARCHAR2 (255),
   o_bfgsiteid       VARCHAR2 (30),
   o_expediositeid   VARCHAR2 (255),
   o_pstn_number     VARCHAR2 (255)
);
/


CREATE OR REPLACE TYPE BULKUPLOAD_TAB as table of BULKUPLOAD_OBJ;
/


CREATE OR REPLACE TYPE "CONFIG_ATTR_OBJ"                                                                          as object
(
o_aid number,
o_aconfig varchar2(50),
o_aval varchar2(50),
o_qty   number,
o_Row_id  NUMBER,
o_non_std_flag   VARCHAR2(1)
)
 alter type CONFIG_ATTR_OBJ modify ATTRIBUTE  o_aconfig varchar2(200) cascade
 alter type CONFIG_ATTR_OBJ modify ATTRIBUTE  o_aval varchar2(200) cascade
/


CREATE OR REPLACE TYPE "CONFIG_ATTR_TAB"                                                                          as table of config_attr_obj;
/


CREATE OR REPLACE TYPE "CONFIG_OBJ"                                                                          AS OBJECT
(
o_siteid number,
o_pid number,
o_pname varchar2(50),
o_fallback varchar2(50),
o_parttype varchar2(50),
o_config_attr_tab config_attr_tab);
/


CREATE OR REPLACE TYPE "CONFIG_TAB"                                                                          as table of config_obj;
/


CREATE OR REPLACE TYPE "CPECAVEAT_OBJ"                                                                          AS OBJECT (
   o_cpecaveatid   NUMBER,
   o_cpecaveat     VARCHAR2 (100),
   o_desc          VARCHAR2 (255)
);
/


CREATE OR REPLACE TYPE "GENERIC_CAVEAT_OBJ"                                                                          as object (
        CAVEAT_ID        NUMBER                ,
        DESCRIPTION      VARCHAR2(2000 BYTE)   ,
        CAVEATED_ON DATE                       ,
        ACTIVE        CHAR(1 BYTE)                    ,
        ACCESS_CAVEAT VARCHAR2(20 BYTE)               );
/


CREATE OR REPLACE TYPE "GENERIC_CAVEAT_TBL"                                                                          as table of generic_caveat_obj;
/


CREATE OR REPLACE TYPE line_item_details_obj AS OBJECT (
   o_aid                NUMBER (10),
   o_config_level       VARCHAR2 (60),
   o_value              VARCHAR2 (255),
   o_qty                NUMBER (10),
   o_rowid              NUMBER,
   o_description        VARCHAR2 (120),
   o_bfg_inventory_id   NUMBER (10),
   o_action_code        VARCHAR2 (10),
   o_classic_element_id varchar2(255),
   o_classic_element_name VARCHAR2(255),
   o_no_voice_channel    NUMBER(7),
   o_max_qty            NUMBER (9)
   );
/


CREATE OR REPLACE type line_item_detail_tbl as table of line_item_details_obj ;
/


CREATE OR REPLACE TYPE "LINE_ITEM_OBJ"  AS
  OBJECT
  (
    o_pid          NUMBER (10),
    o_product_name VARCHAR2 (60),
    o_fallback     VARCHAR2 (60),
    o_part_type    VARCHAR2 (60),
    o_rowid        NUMBER,
    o_non_std_flag VARCHAR2 (2),
    o_line_item_detail_tbl line_item_detail_tbl,
    o_scode                VARCHAR2 (10),
    o_pkg_instance_id      NUMBER (10),
    o_site_id              NUMBER(10),
    o_classic_element_id   VARCHAR2(255),
    o_classic_element_name VARCHAR2(255)
    );
/


CREATE OR REPLACE type line_item_tbl as table of line_item_obj ;
/


CREATE OR REPLACE TYPE "MYTABLETYPE"                                                                                          is table of varchar(4000);
/


CREATE OR REPLACE TYPE "MYTABLETYPE2"                                                                                          is table of varchar(30);
/


CREATE OR REPLACE TYPE "ORDERSITE_OBJ"                                                                                 AS OBJECT (
   expedio_site_id       VARCHAR2 (255),
   sqe_site_id           NUMBER,
   bfg_site_id           NUMBER,
   bfg_address_id        VARCHAR2 (20 BYTE),
   bfg_subloc_id         VARCHAR2 (20 BYTE),
   prop_site_id          NUMBER (10, 0),
   prop_address_id       VARCHAR2 (20 BYTE),
   prop_subloc_id        VARCHAR2 (20 BYTE),
   bfg_site_contact_id   NUMBER (10, 0),
   flag                  CHAR (1),
   CHILD_EXPEDIO_REF_ID  VARCHAR2(20),
   CR_PROP_ID  VARCHAR2(255 BYTE)
);
/


CREATE OR REPLACE TYPE "ORDERSITE_TAB"                                                                          AS TABLE OF ORDERSITE_OBJ;
/


CREATE OR REPLACE TYPE "ORDER_LINE_ITEM_DETAILS_OBJ"                                                                          as object(
    o_aid number(10),
    o_config_level varchar2(60),
    o_value varchar2(255),
    o_qty   number(10),
    o_rowid number(10,0),
    o_classic_element_id VARCHAR2(255),o_classic_element_name VARCHAR2(255)
  ) ;
/


CREATE OR REPLACE TYPE "ORDER_LINE_ITEM_DETAIL_TBL"                                                                          as table of order_line_item_details_obj ;
/


CREATE OR REPLACE TYPE "ORDER_LINE_ITEM_OBJ"                                                                          AS
  object
  (
    o_pid  number(10),
    o_product_name varchar2(60),
    o_fallback  varchar2(60),
    o_part_type  varchar2(60),
    o_rowid number,
    o_non_std_flag varchar2(2),
    o_order_line_item_detail_tbl order_line_item_detail_tbl,
    O_SITE_ID  NUMBER (10),
    o_scode  VARCHAR2(20),
    o_classic_element_id VARCHAR2(255),o_classic_element_name VARCHAR2(255)
    );
/


CREATE OR REPLACE TYPE "ORDER_LINE_ITEM_TBL"                                                                          is table of order_line_item_obj ;
/


CREATE OR REPLACE TYPE "PORT_IP_ROUTES_OBJ"                                                                          as object(
row_id  number(10,0),
product_name varchar2(100),
fallback varchar2(30),
serial_number number(10,0),
subnet_address varchar2(16),
subnet_mask varchar2(16),
next_hop_ip_address varchar2(16));
/


CREATE OR REPLACE TYPE "PORT_IP_ROUTES_TBL"                                                                          as table of PORT_IP_ROUTES_obj;
/


CREATE OR REPLACE TYPE "PRICING_ACTION_CODE_OBJ"                                                                          AS OBJECT (
   o_siteid                   NUMBER (10),
   o_product_name             VARCHAR2 (100),
   o_fallback                 VARCHAR2 (20 BYTE),
   o_row_id                   NUMBER (10),
   o_ptp_eup                  VARCHAR2 (5 BYTE),
   o_price_line_description   VARCHAR2 (255 BYTE),
   o_action_code              VARCHAR2 (20 BYTE),
   o_line_item_detail_id      NUMBER (10)
);
/


CREATE OR REPLACE TYPE "PRICING_ACTION_CODE_TBL"                                                                          IS TABLE OF pricing_action_code_obj;
/


CREATE OR REPLACE TYPE "PRICING_OBJ" AS OBJECT (
   o_siteid              NUMBER,
   o_prodname            VARCHAR2 (100),
   o_pricelineitem       VARCHAR2 (255),
   o_price               NUMBER (10, 2),
   o_currency            VARCHAR2 (10),
   o_chargetype          VARCHAR2 (30),
   o_discount            NUMBER (10, 2),
   o_disctype            VARCHAR2 (20),
   o_fallback            VARCHAR2 (20),
   o_cost                NUMBER (10, 2),
   o_costtype            VARCHAR2 (50),
   o_costcur             VARCHAR2 (10),
   o_extqref             VARCHAR2 (50),
   o_reqstatus           varchar2(50),
   o_errdesc             varchar2(100),
   o_pripricingstatus      varchar2(50),
   o_secpricingstatus      varchar2(50),
   o_quanty             NUMBER,
   o_rent_price     NUMBER (10, 2),
  o_line_item_detail_id  NUMBER,
  o_Row_id           NUMBER,
  o_product_id       NUMBER,
  o_netprice          number,
  o_pln_inventory_id      number(10),
  o_ptp_eup          varchar2(5),
  o_ptp_eup_id               NUMBER(10),
  o_discount_requested    NUMBER(10,5),
  o_discount_proposed     NUMBER(10,5),
  o_classic_element_id      varchar2(255),
  o_classic_element_name  varchar2(255),
  ppsr_price_line_id    varchar2(255),
  ppsr_price_line_description varchar2(255),
  o_billing_id          NUMBER(9),
  o_billing_reference_name varchar2(255),
  o_billing_start_date    Date,
  o_billing_end_date      Date
);
/


CREATE OR REPLACE type pricing_tab as table of pricing_obj ;
/


CREATE OR REPLACE TYPE "QUOTE_SITE_OBJ" as object
(
  o_site_id  NUMBER(15),
  o_crd      Date,
  o_cad      Date
 )
/


CREATE OR REPLACE type QUOTE_SITE_tab as table of QUOTE_SITE_OBJ ;
/


CREATE OR REPLACE TYPE "SITE_BFGEXPEDIO_OBJ"                                                                          AS OBJECT (
   site_id                   NUMBER (10),
   expedio_site_id           VARCHAR2 (255),
   bfg_site_id               NUMBER (15),
   cust_repsitename          VARCHAR2 (255),
   building_no               VARCHAR2 (255),
   site_name                 VARCHAR2 (255),
   address_line1             VARCHAR2 (255),
   address_line2             VARCHAR2 (255),
   city                      VARCHAR2 (255),
   county                    VARCHAR2 (255),
   state                     VARCHAR2 (50),
   post_zip_code             VARCHAR2 (20),
   country                   VARCHAR2 (255),
   tele_area_code            VARCHAR2 (50),
   local_business_custname   VARCHAR2 (255),
   room                      VARCHAR2 (255),
   FLOOR                     VARCHAR2 (255),
Site_Type  VARCHAR2(50),
BFG_Address_ID  NUMBER,
BFG_SUBLOC_ID NUMBER,
PHONE_NUMBER   VARCHAR2 (255)
);
/


CREATE OR REPLACE TYPE "SITE_BFGEXPEDIO_TAB"                                                                          as table of site_bfgexpedio_obj;
/


CREATE OR REPLACE TYPE "SITE_DETIALS_OBJ"                                                                          as object
(
  site_id  NUMBER(15),
  site_name VARCHAR2(255),
  site_country VARCHAR2(255),
  site_City    varchar2(22),
  First_Name  VARCHAR2(50),
  Surname VARCHAR2(50),
  Job_Title  VARCHAR2(50),
  State_Province VARCHAR2(50),
  Post_Zip_code  VARCHAR2(255),
  Phone_Number   VARCHAR2(255),
  Address_Line_1 VARCHAR2(50),
  Address_Line_2 VARCHAR2(50),
  EMAIL varchar2(255),
  O_billing_id VARCHAR2(10),
  O_ORG_NAME  varchar2(100),
  O_ORG_ID   varchar2(100)
);
/


CREATE OR REPLACE TYPE "SITE_DETIALS_OBJ_ASIS"                                                                          as object
(
  o_site_id  NUMBER(15),
  o_product_name varchar2(100),
  o_in_bfg_contact_id number(15)
);
/


CREATE OR REPLACE TYPE "SITE_DETIALS_TAB"                                                                          as table of site_detials_obj;
/


CREATE OR REPLACE TYPE "SITE_DETIALS_TAB_ASIS"                                                                          AS TABLE OF SITE_DETIALS_OBJ_ASIS;
/


CREATE OR REPLACE TYPE "SITE_OBJ"                                                                          AS
  object
  (
    o_site_id  NUMBER
  );
/


CREATE OR REPLACE TYPE USAGE_PRICE_DETAIL_OBJ AS OBJECT (
        O_PRODUCT_NAME VARCHAR2(100),
        O_TYPE_USAGE_CHARGE VARCHAR2 (100),
        O_FIX_PRICE   NUMBER(15,2),
        O_STD_PRICE  NUMBER(15,2),
        O_MIN_PRICE   NUMBER(15,2),
        O_MAX_PRICE   NUMBER(15,2),
        O_FIX_PRICE_NET   NUMBER(15,2),
        O_STD_PRICE_NET  NUMBER(15,2),
        O_MIN_PRICE_NET  NUMBER(15,2),
        O_MAX_PRICE_NET   NUMBER(15,2)
   );
/


CREATE OR REPLACE TYPE USAGE_PRICE_DETAIL_TAB AS TABLE OF USAGE_PRICE_DETAIL_OBJ;
/


CREATE OR REPLACE TYPE USAGE_PRICE_OBJ AS OBJECT (
   O_SITEID          NUMBER(15),
   O_PRODNAME        VARCHAR2 (100),
   O_SQE_PRICEITEMDESC VARCHAR2 (255),    --SQE DESC PRI_LINE_ITEM
   O_FALLBACK        VARCHAR2 (20),
   O_PPSR_PRICE_LINE_ID  VARCHAR2(255),
   O_PPSR_PRICE_LINE_DESC  VARCHAR2(255),
   O_PTP_EUP          VARCHAR2(20),
   O_CURRENCY        VARCHAR2 (10),
   O_CHARGETYPE      VARCHAR2 (30),      --EUP/PTP
   O_PRICE_POINT_ID VARCHAR2 (80),      --#123232 (PRICE_L_I_D)
   O_PRICE_POINT_VERSION VARCHAR2 (80),      --1.0 (PRICE_L_I_D)
   O_DISCOUNT        NUMBER (15,2),
   O_PRICE           NUMBER (15,2),
   O_QUANTY              NUMBER(15,2),
   O_RENT_PRICE           NUMBER (15,2),
   O_LINE_ITEM_DETAIL_ID  NUMBER(15,2),
   O_ROW_ID  NUMBER(15),
   O_PRODUCT_ID  NUMBER(15),
   O_NETPRICE NUMBER(15,2),
   O_PLN_INVENTORY_ID NUMBER(15),
   O_PTP_EUP_ID NUMBER(15),
   O_DISCOUNT_REQUESTED NUMBER(15),
   O_DISCOUNT_PROPOSED     NUMBER(15),
   O_PRICE_POINT_NAME     VARCHAR2(255),
   O_TARIFF_NAME          varchar2(255),
   O_REGION               varchar2(255),
   O_COUNTRY              varchar2(255),
   O_PRICE_USAGE_PRICE_CALL  USAGE_PRICE_DETAIL_TAB
);
/


CREATE OR REPLACE TYPE USAGE_PRICE_TAB AS TABLE OF USAGE_PRICE_OBJ;
/


CREATE OR REPLACE TYPE "VARCHAR2_CLOB"                                                                                  IS TABLE OF clob;
/


CREATE OR REPLACE TYPE "VARCHAR2_NTT"                                                                           IS TABLE OF VARCHAR2(16000)
/


CREATE OR REPLACE TYPE "VPN_ADD_DETAILS_OBJ"                                                                          AS OBJECT (
   row_id          NUMBER   (10, 0),
   product_name    VARCHAR2 (100),
   fallback        VARCHAR2 (30),
   lan_ip          VARCHAR2 (16),
   subnet_mask     VARCHAR2 (16),
   virtual_ip      VARCHAR2 (16)
);
/


CREATE OR REPLACE TYPE "VPN_ADD_DETAILS_TBL"                                                                          AS TABLE OF vpn_add_details_obj;
/


CREATE OR REPLACE TYPE "VPN_NEWCUSTOMERS_OBJ"                                                                          AS OBJECT
(vpnid VARCHAR2(100 BYTE),
vpncustid VARCHAR2(20),
vpncustname VARCHAR2(100),
system VARCHAR2(10),
classiccustomerid VARCHAR2(20)
);
/


CREATE OR REPLACE TYPE "VPN_NEWCUSTOMERS_TBL"                                                                          AS TABLE OF vpn_newcustomers_obj;
/


CREATE OR REPLACE TYPE "ALLIST"                                                                          as table of site_obj;
/


CREATE OR REPLACE TYPE aqref_obj_hash AS OBJECT (
   o_site_id   NUMBER (15),
   o_aqref     aqref_tab
);
/


CREATE OR REPLACE TYPE aqref_obj_hash_tab IS TABLE OF aqref_obj_hash;
/


CREATE OR REPLACE TYPE "CPECAVEAT_COLS"                                                                          IS TABLE OF cpecaveat_obj;
/


CREATE OR REPLACE TYPE cpeqref_obj AS OBJECT (
   o_siteid                       NUMBER,
   o_cpeqref                      VARCHAR2 (100),
   o_prisuppliername              VARCHAR2 (100),
   o_pristatus                    VARCHAR2 (30),
   o_prionetimechrg               NUMBER (10, 2),
   o_prirecrchrg                  NUMBER (10, 2),
   o_expirydt                     DATE,
   o_cpeleadtime                  VARCHAR2 (20),
   o_cpeleadtimestatus            VARCHAR2 (30),
   o_comments                     VARCHAR2 (255),
   o_secsuppliername              VARCHAR2 (100),
   o_secstatus                    VARCHAR2 (100),
   o_seconetimechrg               NUMBER (10, 2),
   o_secrecrchrg                  NUMBER (10, 2),
   o_seccpeqref                   VARCHAR2 (100),
   o_prisspbidrefno               VARCHAR2 (50),
   o_secsspbidrefno               VARCHAR2 (50),
   o_prioffervaliddt              DATE,
   o_secoffervaliddt              DATE,
   o_cpecaveat                    cpecaveat_cols,
   o_request_status               VARCHAR2 (50),
   o_site_error                   VARCHAR2 (255),
   o_pri_pricing_error            VARCHAR2 (255),
   o_pri_one_time_override_cost   NUMBER (10, 2),
   o_pri_maint_override_cost      NUMBER (10, 2),
   o_pri_kit_override_cost        NUMBER (10, 2),
   o_sec_pricing_error            VARCHAR2 (255),
   o_sec_one_time_override_cost   NUMBER (10, 2),
   o_sec_maint_override_cost      NUMBER (10, 2),
   o_sec_kit_override_cost        NUMBER (10, 2),
   o_kit_override_flag              VARCHAR2(3)
);
/


CREATE OR REPLACE TYPE cpeqref_tab AS TABLE OF cpeqref_obj;
/
-----------------------------------------------------------------------------------
  -- END: DDL for Objects/Types
-----------------------------------------------------------------------------------

-----------------------------------------------------------------------------------
  -- START: DDL for Tables
-----------------------------------------------------------------------------------
CREATE TABLE ACCESS_QREF_AS_IS
(
  ACCESS_QREF_ID                NUMBER          NOT NULL,
  QUOTE_SITE_ID                 NUMBER,
  ACCESS_QREF                   VARCHAR2(50 BYTE),
  PRICING_STATUS                VARCHAR2(30 BYTE),
  ACCESS_SPEED                  VARCHAR2(20 BYTE),
  SUPPLIER                      VARCHAR2(100 BYTE),
  LEAD_TIME                     VARCHAR2(10 BYTE),
  PORT_SPEED                    VARCHAR2(20 BYTE),
  ONE_TIME_CHARGE               NUMBER(10,2),
  RECURRING_CHARGE              NUMBER(10,2),
  CREATED_BY                    NUMBER,
  CREATED_DATE                  DATE,
  MODIFIED_BY                   NUMBER,
  MODIFIED_DATE                 DATE,
  ACTIVE                        CHAR(1 BYTE),
  PORT_SPEED_VALUE              NUMBER,
  PORT_UOM                      VARCHAR2(10 BYTE),
  ACCESS_SPEED_VALUE            NUMBER,
  ACCESS_UOM                    VARCHAR2(10 BYTE),
  ACCESS_PRODUCT_TYPE           VARCHAR2(50 BYTE),
  ACCESS_TECHNOLOGY             VARCHAR2(50 BYTE),
  SUPPLIER_PRODUCT_NAME         VARCHAR2(100 BYTE),
  GPOP_NODE                     VARCHAR2(150 BYTE),
  DISTANCE_GPOP                 VARCHAR2(20 BYTE),
  APOP_NODE                     VARCHAR2(150 BYTE),
  DISTANCE_APOP                 VARCHAR2(20 BYTE),
  TERM                          NUMBER,
  LEG_ID                        VARCHAR2(10 BYTE),
  PAIR_ID                       NUMBER,
  EXPIRY_DATE_TIME_ZONE         VARCHAR2(10 BYTE),
  TARIFF_ZONE_NAME              VARCHAR2(50 BYTE),
  NO_OF_COPPER_PAIRS            NUMBER,
  CIRCUIT_INTERFACE             VARCHAR2(50 BYTE),
  AUTO_PRICED_FLAG              CHAR(1 BYTE),
  BUDGETARY_PRICED_FLAG         CHAR(1 BYTE),
  INTERFACE_TYPE                VARCHAR2(50 BYTE),
  FRAMING_DETAILS               VARCHAR2(100 BYTE),
  CONNECTOR                     VARCHAR2(50 BYTE),
  INSTALL_COST                  NUMBER(10,2),
  SUPPLIER_COST                 NUMBER(10,2),
  BACKHAUL_COST                 NUMBER(10,2),
  LOCAL_TAIL_COST               NUMBER(10,2),
  COST_ACCESS_CURRENCY          VARCHAR2(10 BYTE),
  RESILIENCY_FLAG               CHAR(1 BYTE),
  COMMENTS                      VARCHAR2(255 BYTE),
  NNI_FLAG                      VARCHAR2(3 BYTE),
  SUPPORT_24X7                  VARCHAR2(255 BYTE),
  SENT_TO_APE                   CHAR(1 BYTE),
  MONTHLY_COST                  NUMBER(10,2),
  ACCESS_TYPE                   VARCHAR2(50 BYTE),
  EXPIRY_DATE                   DATE,
  APOP_FLAG                     VARCHAR2(3 BYTE),
  PORT_STATUS                   VARCHAR2(25 BYTE),
  GPOP_ID                       VARCHAR2(100 BYTE),
  APOP_ID                       VARCHAR2(100 BYTE),
  PORT_SPEED_AVAIL_STATUS       VARCHAR2(15 BYTE),
  METHOD                        VARCHAR2(60 BYTE),
  AGGREGATOR_QUOTE_LINE_ID      NUMBER(10),
  GPOP                          VARCHAR2(32 BYTE),
  ENCAPSULATION                 VARCHAR2(100 BYTE),
  GUARANTEED_SPEED              VARCHAR2(50 BYTE),
  TIME_TO_DELIVER               VARCHAR2(10 BYTE),
  ISP_ADDRESSING                VARCHAR2(15 BYTE),
  MONTHLY_RECURRING_CHARGE      NUMBER(10,2),
  NON_RECURRING_CHARGE          NUMBER(10,2),
  ACCESS_AVAILABILITY           VARCHAR2(20 BYTE),
  SERVICE_CATAGORY              VARCHAR2(20 BYTE),
  OTHER_SERVICE_NOTES           VARCHAR2(255 BYTE),
  ADDITIONAL_CHARGES            NUMBER(10,2),
  TRANACTION_TYPE               VARCHAR2(10 BYTE),
  HVPN_ACCESS_TECHNOLOGY        VARCHAR2(20 BYTE),
  PRICING_ID                    VARCHAR2(20 BYTE),
  SERVICE_ID                    VARCHAR2(20 BYTE),
  COPPER_DETAILS                VARCHAR2(20 BYTE),
  COPPER_SERVICE_ID             VARCHAR2(30 BYTE),
  RFA_NOTES                     VARCHAR2(150 BYTE),
  MRC                           NUMBER(10,2),
  NRC                           NUMBER(10,2),
  TARRIF_ZONE                   VARCHAR2(50 BYTE),
  SUPPORT_24_7                  VARCHAR2(255 BYTE),
  RFO_NOTES                     VARCHAR2(500 BYTE),
  COPPER_PAIR                   NUMBER(15),
  ETHERNET_PHASE_ATTRIBUTE      VARCHAR2(20 BYTE),
  NON_STD_QREF_FLAG             VARCHAR2(1 BYTE),
  NETWORK_TYPE                  VARCHAR2(50 BYTE),
  PARTNER_NAME                  VARCHAR2(50 BYTE),
  QREF_TYPE                     VARCHAR2(10 BYTE),
  CEASE_CHARGES                 VARCHAR2(16 BYTE),
  WORKFLOW_STATUS               VARCHAR2(50 BYTE),
  APE_COMMENTS                  VARCHAR2(100 BYTE),
  STAFF_MEMBER_NAME             VARCHAR2(50 BYTE),
  STAFF_MEMBER_EMAIL            VARCHAR2(50 BYTE),
  SERVICE_VARIANT               VARCHAR2(300 BYTE),
  ACTION_CODE                   VARCHAR2(20 BYTE),
  RESILIENCY                    VARCHAR2(50 BYTE),
  GPOP_CODE                     VARCHAR2(150 BYTE),
  APOP_CODE                     VARCHAR2(150 BYTE),
  PTP_MRC                       NUMBER(10,2),
  PTP_NRC                       NUMBER(10,2),
  RBPURL                        VARCHAR2(250 BYTE),
  OPTM_QREF                     VARCHAR2(50 BYTE),
  OPTM_RENTAL_COST_Y1           NUMBER(10,2),
  OPTM_RENTAL_COST_Y2           NUMBER(10,2),
  OPTM_RENTAL_COST_Y3           NUMBER(10,2),
  OPTM_RENTAL_COST_Y4           NUMBER(10,2),
  OPTM_RENTAL_COST_Y5           NUMBER(10,2),
  OPTM_RENTAL_PRICE_Y1          NUMBER(10,2),
  OPTM_RENTAL_PRICE_Y2          NUMBER(10,2),
  OPTM_RENTAL_PRICE_Y3          NUMBER(10,2),
  OPTM_RENTAL_PRICE_Y4          NUMBER(10,2),
  OPTM_RENTAL_PRICE_Y5          NUMBER(10,2),
  OPTM_INSTALL_Y1               NUMBER(10,2),
  INSTALL_PERCENT_REDUCTION_Y1  NUMBER(10,2),
  PERCENT_REDUCTION_COST_Y1     NUMBER(10,2),
  PERCENT_REDUCTION_COST_Y2     NUMBER(10,2),
  PERCENT_REDUCTION_COST_Y3     NUMBER(10,2),
  PERCENT_REDUCTION_COST_Y4     NUMBER(10,2),
  PERCENT_REDUCTION_COST_Y5     NUMBER(10,2),
  TPE_REF_ID                    NUMBER(10),
  SUPPLIER_REF_ID               NUMBER(10)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          832K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE ACCOUNT
(
  ACCOUNT_ID      NUMBER                        NOT NULL,
  ACCOUNT_NUMBER  VARCHAR2(255 BYTE),
  BANK_CODE       VARCHAR2(255 BYTE),
  BRANCH_CODE     VARCHAR2(255 BYTE),
  CONTROL_CODE    VARCHAR2(255 BYTE),
  CREATED_BY      NUMBER(12),
  CREATED_DATE    DATE,
  MODIFIED_BY     NUMBER(12),
  MODIFIED_DATE   DATE
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          320K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE ATTRIBUTE
(
  ATTRIBUTE_ID   NUMBER(6)                      NOT NULL,
  NAME           VARCHAR2(200 BYTE),
  DESCRIPTION    VARCHAR2(100 BYTE),
  CREATED_BY     VARCHAR2(50 BYTE),
  MODIFIED_BY    VARCHAR2(50 BYTE),
  CREATED_DATE   DATE,
  MODIFIED_DATE  DATE,
  PPSR_SQE       VARCHAR2(10 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE ATTRIBUTE_VALUE
(
  ATTRIBUTE_VALUE_ID  NUMBER(6)                 NOT NULL,
  VALUE               VARCHAR2(70 BYTE),
  UNIT_OF_MEASURE     VARCHAR2(10 BYTE),
  CREATED_BY          NUMBER(12),
  MODIFIED_BY         NUMBER(12),
  CREATED_DATE        DATE,
  MODIFIED_DATE       DATE,
  ATTRIBUTE_ID        NUMBER(6)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE BAD_RECORDS
(
  EROR_MSG   VARCHAR2(500 BYTE),
  STATUS     VARCHAR2(5 BYTE),
  DATE_TIME  DATE
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE BILLING_BFG_CLASSIC
(
  BFG_CLASSIC_BILLING_ID  NUMBER(10),
  CUSTOMER_ID             NUMBER(10),
  CLASSIC_BILLING_ID      VARCHAR2(30 BYTE),
  BFG_BILLING_ID          VARCHAR2(30 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE BT_SUBSIDIARY
(
  BT_SUBSIDIARY_ID  NUMBER(6)                   NOT NULL,
  NAME              VARCHAR2(255 BYTE),
  CREATED_BY        NUMBER(12),
  CREATED_DATE      DATE,
  MODIFIED_BY       NUMBER(12),
  MODIFIED_DATE     DATE
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE BUNDLE_SELECTION
(
  BUNDLE_SELECTION_ID  NUMBER(10),
  QUOTE_HEADER_ID      NUMBER(10),
  PRODUCT_ID           NUMBER(15),
  ORDER_TYPE           VARCHAR2(255 BYTE),
  CREATED_BY           VARCHAR2(50 BYTE),
  CREATED_DATE         DATE,
  MODIFIED_BY          VARCHAR2(50 BYTE),
  MODIFIED_DATE        DATE,
  PRODUCT_NAME         VARCHAR2(60 BYTE),
  ACTIVE               CHAR(1 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          2M
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE CITY
(
  CITY_ID        NUMBER(6)                      NOT NULL,
  NAME           VARCHAR2(255 BYTE),
  CREATED_BY     NUMBER(12),
  CREATED_DATE   DATE,
  MODIFIED_BY    NUMBER(12),
  MODIFIED_DATE  DATE
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE CLASSIC_ITEM
(
  LINEITEM           VARCHAR2(255 BYTE),
  ITEM_ATTRIBUTE     VARCHAR2(255 BYTE),
  VALUE              VARCHAR2(255 BYTE),
  RULE               VARCHAR2(255 BYTE),
  CLASSIC_NAME       VARCHAR2(255 BYTE),
  ACCESS_TECHNOLOGY  VARCHAR2(255 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE CONTACT
(
  CONTACT_ID     NUMBER(10)                     NOT NULL,
  FIRST_NAME     VARCHAR2(255 BYTE),
  LAST_NAME      VARCHAR2(255 BYTE),
  PHONE_NUMBER   VARCHAR2(255 BYTE),
  MOBILE_NUMBER  VARCHAR2(255 BYTE),
  FAX            VARCHAR2(255 BYTE),
  JOB_TITLE      VARCHAR2(255 BYTE),
  CREATED_BY     NUMBER(12),
  CREATED_DATE   DATE,
  MODIFIED_BY    NUMBER(12),
  MODIFIED_DATE  DATE,
  EMAIL          VARCHAR2(255 BYTE),
  CONTACT_TYPE   VARCHAR2(255 BYTE),
  USER_ID        VARCHAR2(255 BYTE),
  EIN            NUMBER(10),
  MIDDLE_NAME    VARCHAR2(255 BYTE),
  TITLE          VARCHAR2(255 BYTE),
  PSTN_NUMBER    VARCHAR2(255 BYTE),
  PRIMARY_NOTES  VARCHAR2(255 BYTE),
  PAGER          VARCHAR2(255 BYTE),
  ACCOUNT_NAME   VARCHAR2(255 BYTE),
  EDI_ADDRESS    VARCHAR2(255 BYTE),
  ORGA_NAME      VARCHAR2(255 BYTE),
  ORG_ID         VARCHAR2(255 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          3M
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE COST_DETAIL_AS_IS
(
  COST_DETAIL_ID             NUMBER(15),
  PRICE_LINE_ITEM_DETAIL_ID  NUMBER(10),
  COST                       NUMBER(10,2),
  COST_TYPE                  VARCHAR2(50 BYTE),
  CURRENCY                   VARCHAR2(10 BYTE),
  CREATED_BY                 NUMBER(12),
  CREATED_DATE               DATE,
  MODIFIED_BY                NUMBER(12),
  MODIFIED_DATE              DATE
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          4M
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE COUNTRY
(
  COUNTRY_ID       NUMBER(6)                    NOT NULL,
  NAME             VARCHAR2(255 BYTE),
  SHORT_NAME       VARCHAR2(255 BYTE),
  ORT_FLAG         CHAR(1 BYTE),
  CREATED_BY       NUMBER(12),
  CREATED_DATE     DATE,
  MODIFIED_BY      NUMBER(12),
  MODIFIED_DATE    DATE,
  CNT_ISO_2_CODE   CHAR(2 BYTE),
  PPSR_COUNTRY_ID  NUMBER
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE CUSTOMER_BILLING_INFO
(
  CUSTOMER_BILLING_INFO_ID  NUMBER(10),
  CUSTOMER_ID               NUMBER(10),
  ORDER_HEADER_ID           NUMBER(10),
  BILLING_ID                VARCHAR2(15 BYTE),
  SYSTEM                    VARCHAR2(10 BYTE),
  IS_DEFAULT                CHAR(1 BYTE),
  CREATED_BY                NUMBER(12),
  CREATED_DATE              DATE,
  MODIFIED_BY               NUMBER(12),
  MODIFIED_DATE             DATE,
  CURRENCY                  VARCHAR2(20 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE CUSTOMER_PRODUCT
(
  QUOTE_HEADER_ID               NUMBER(10),
  PRODUCT_NAME                  VARCHAR2(255 BYTE),
  CUSTOMER_ID                   VARCHAR2(255 BYTE),
  MONTHLY_REVENUE_COMMITMENT    VARCHAR2(255 BYTE),
  PROPOSED_MNTH_REV_COMMITMENT  VARCHAR2(255 BYTE),
  TRIGGER_PERIOD                VARCHAR2(255 BYTE),
  CREATED_BY                    VARCHAR2(255 BYTE),
  CREATED_DATE                  DATE,
  MODIFIED_BY                   VARCHAR2(255 BYTE),
  MODIFIED_DATE                 DATE,
  SITE_ID                       NUMBER(10),
  BFG_BILL_ACCOUNT_ID           VARCHAR2(255 BYTE),
  S_CODES                       VARCHAR2(255 BYTE),
  PTP_PRICE_BOOK_VERSION        VARCHAR2(255 BYTE),
  EUP_PRICE_BOOK_VERSION        VARCHAR2(255 BYTE),
  ORDER_SUBMITTED_FLAG          VARCHAR2(255 BYTE),
  PRODUCT_ID                    NUMBER(10),
  COMMENTS                      VARCHAR2(255 BYTE),
  CUSTOMER_PRODUCT_ID           NUMBER(10),
  PRODUCT_SELECTION_ID          NUMBER(10),
  TRADELEVEL                    VARCHAR2(255 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          448K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE DEBUG_TABLE
(
  VALUE_NAME  VARCHAR2(200 BYTE),
  VALUE       VARCHAR2(200 BYTE),
  USERS        VARCHAR2(3000 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE EDCA_RESPONSE
(
  EDCA_ORDER_ID         VARCHAR2(50 BYTE),
  QUOTE_HEADER_ID       VARCHAR2(50 BYTE),
  CLASSIC_CUSTOMER_ID   VARCHAR2(50 BYTE),
  FIRST_NAME            VARCHAR2(50 BYTE),
  LAST_NAME             VARCHAR2(50 BYTE),
  EMAIL                 VARCHAR2(50 BYTE),
  PHONE                 VARCHAR2(50 BYTE),
  FAX                   VARCHAR2(50 BYTE),
  MOBILE                VARCHAR2(50 BYTE),
  TITLE                 VARCHAR2(50 BYTE),
  USER_ID               VARCHAR2(50 BYTE),
  EIN                   VARCHAR2(50 BYTE),
  ROLE                  VARCHAR2(50 BYTE),
  EDCA_PARENT_SITE_ID   VARCHAR2(50 BYTE),
  EDCA_CHILD_ORDER_ID   VARCHAR2(50 BYTE),
  EDCA_CHILD_SITE_ID    VARCHAR2(50 BYTE),
  SITE_ID               VARCHAR2(50 BYTE),
  CLASSIC_SITE_ID       VARCHAR2(50 BYTE),
  CUSTOMER_SIGNED_DATE  VARCHAR2(50 BYTE),
  LAST_ASSIGNED_USER    VARCHAR2(50 BYTE),
  LAST_ASSIGNED_TEAM    VARCHAR2(50 BYTE),
  ORDER_STATUS          VARCHAR2(60 BYTE),
  REJECTION_TYPE        VARCHAR2(50 BYTE),
  REASON                VARCHAR2(50 BYTE),
  TEAM_WROTE_REASON     VARCHAR2(50 BYTE),
  SITE_STATUS           VARCHAR2(60 BYTE),
  MODIFIED_BY           NUMBER(6),
  MODIFIED_DATE         DATE
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE ERROR_LOG
(
  ERROR_LOG_ID      NUMBER,
  QUOTE_ID          NUMBER,
  QUOTE_HEADER_ID   NUMBER,
  SITE_ID           NUMBER,
  ATTRIBUTE_STRING  VARCHAR2(4000 BYTE),
  PACKAGE_NAME      VARCHAR2(100 BYTE),
  PROC_NAME         VARCHAR2(100 BYTE),
  ERROR_CODE        NUMBER,
  ERROR_MESSAGE     VARCHAR2(1000 BYTE),
  ERROR_LOG_DATE    TIMESTAMP(6)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          9M
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE EXTERNAL_SYSTEM_DETAIL
(
  ID               NUMBER(10),
  QUOTE_HEADER_ID  NUMBER(10),
  SITE_ID          NUMBER(10),
  ORDER_HEADER_ID  NUMBER(10),
  CUSTOMER_ID      NUMBER(10),
  SYSTEM_NAME      VARCHAR2(30 BYTE),
  TYPE             NUMBER(10),
  VALUE            VARCHAR2(30 BYTE),
  CREATED_BY       NUMBER(12),
  CREATED_DATE     DATE,
  MODIFIED_BY      NUMBER(12),
  MODIFIED_DATE    DATE
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE GENERAL_PRODUCT_SELECTION
(
  GENERAL_PRODUCT_SELECTION_ID  NUMBER,
  PROPOSITION                   VARCHAR2(32 BYTE),
  SUB_PROPOSITION               VARCHAR2(32 BYTE),
  PRODUCT_NAME                  VARCHAR2(255 BYTE),
  PRODUCT_ID                    NUMBER,
  MANAGEMENT_TYPE               NUMBER(1),
  COS_MODEL                     NUMBER(1),
  CHANGE_MANAGEMENT             NUMBER(1),
  PROACTIVE_FAULT_MANAGEMENT    NUMBER(1),
  PRICE_LIST                    NUMBER(1),
  SITE_BASED                    NUMBER(1),
  PROPOSITION_ID                NUMBER(10),
  SUB_PROPOSITION_ID            NUMBER(10),
  URL                           VARCHAR2(200 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;


CREATE GLOBAL TEMPORARY TABLE GTT_SQE_IVPN_EXP_QUOTE
(
  QUOTEREFID            VARCHAR2(765 BYTE),
  CUSTOMERNAME          VARCHAR2(765 BYTE),
  CUSTOMERID            VARCHAR2(765 BYTE),
  SALESORGANIZATION     VARCHAR2(765 BYTE),
  SALESREPNAME          VARCHAR2(765 BYTE),
  ORDERTYPE             VARCHAR2(765 BYTE),
  QUOTEVERSION          VARCHAR2(765 BYTE),
  QUOTESTATUS           VARCHAR2(765 BYTE),
  QUOTENAME             VARCHAR2(765 BYTE),
  CONTRACTTERM          NUMBER,
  BIDNUMBER             VARCHAR2(765 BYTE),
  SIEBELID              VARCHAR2(765 BYTE),
  CURRENCY              VARCHAR2(765 BYTE),
  COMMENTS              VARCHAR2(765 BYTE),
  EXPREFNO              VARCHAR2(36 BYTE),
  QUOTE_VERSION_STATUS  VARCHAR2(765 BYTE),
  CREATEDDATE           TIMESTAMP(6),
  CREATED_DATE          DATE,
  MODIFIED_BY           VARCHAR2(90 BYTE),
  MODIFIED_DATE         DATE,
  PRODUCT_TYPE          VARCHAR2(60 BYTE),
  CURRENCY_ID           NUMBER
)
ON COMMIT PRESERVE ROWS
NOCACHE;


CREATE TABLE ORDER_ATTACHMENT
(
  ATTACHMENT_ID         NUMBER(10),
  ORDER_HEADER_ID       NUMBER(10),
  SITE_ID               NUMBER(10),
  ATTACHMENT_TYPE       VARCHAR2(1 BYTE),
  CREATE_DATE           DATE,
  CREATED_BY            NUMBER(12),
  QUOTE_HEADER_ID       NUMBER(12),
  PRODUCT_SELECTION_ID  NUMBER(10)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE ORDER_ATTACHMENT_DETAIL
(
  ATTACHMENT_ID               NUMBER(10),
  URL                         VARCHAR2(250 BYTE),
  DOWNLOADED_TO_CLASSIC       VARCHAR2(1 BYTE),
  SOURCE                      VARCHAR2(250 BYTE),
  ATTACHMENT_TYPE             VARCHAR2(50 BYTE),
  ORDER_ATTACHMENT_DETAIL_ID  NUMBER(10),
  ACTIVE                      VARCHAR2(1 BYTE),
  ATTACHMENT_APPLIES_TO       VARCHAR2(50 BYTE),
  DOCUMENT_ID                 VARCHAR2(100 BYTE),
  ATTACHMENT_NAME             VARCHAR2(100 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          192K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE ORDER_LINE_ITEM_AS_IS
(
  ORDER_LINE_ITEM_ID     NUMBER(10)             NOT NULL,
  QUOTE_HEADER_ID        NUMBER(10),
  CURRENCY               VARCHAR2(10 BYTE),
  PRODUCT_ID             NUMBER(10),
  PRODUCT_NAME           VARCHAR2(100 BYTE),
  SITE_ID                NUMBER(10),
  ACTIVE                 CHAR(1 BYTE),
  CREATED_BY             NUMBER(12),
  CREATED_DATE           DATE,
  MODIFIED_BY            NUMBER(12),
  MODIFIED_DATE          DATE,
  FALLBACK_TYPE          VARCHAR2(20 BYTE),
  QUANTITY               NUMBER(3),
  ROW_ID                 NUMBER,
  QUOTE_SITE_SERVICE_ID  NUMBER(16,2),
  SCODE                  VARCHAR2(20 BYTE),
  CLASSIC_ELEMENT_ID     VARCHAR2(255 BYTE),
  CLASSIC_ELEMENT_NAME   VARCHAR2(255 BYTE),
  ACTION_CODE            VARCHAR2(20 BYTE),
  TOBE_MODIFIED          VARCHAR2(5 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          11M
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE ORDER_LINE_ITEM_DETAIL_AS_IS
(
  ORDER_LINE_ITEM_DET_ID  NUMBER(10)            NOT NULL,
  ORDER_LINE_ITEM_ID      NUMBER(10),
  ATTRIBUTE_MAPPING_ID    NUMBER(6),
  VALUE                   VARCHAR2(100 BYTE),
  ACTIVE                  CHAR(1 BYTE),
  CREATED_BY              NUMBER(12),
  CREATED_DATE            DATE,
  MODIFIED_BY             NUMBER(12),
  MODIFIED_DATE           DATE,
  QUANTITY                NUMBER(5),
  ROW_ID                  NUMBER(20),
  ACTION_CODE             VARCHAR2(20 BYTE),
  CLASSIC_ELEMENT_ID      VARCHAR2(255 BYTE),
  CLASSIC_ELEMENT_NAME    VARCHAR2(255 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          23M
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE PAYMENT_METHODS
(
  ID                   NUMBER,
  BT_GS_SALES_CHANNEL  VARCHAR2(50 BYTE),
  PAYMENT_METHOD_NAME  VARCHAR2(30 BYTE),
  BT_SUBSIDIARY_ID     NUMBER(6)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE PRICE_LINE_ITEM_DETAIL_AS_IS
(
  PRICE_LINE_ITEM_ID           NUMBER(6)        NOT NULL,
  LINE_ITEM_ID                 NUMBER(10),
  PRICE                        NUMBER(10,2),
  CURRENCY                     VARCHAR2(10 BYTE),
  ACTIVE                       CHAR(1 BYTE),
  CREATED_BY                   NUMBER(12),
  CREATED_DATE                 DATE,
  MODIFIED_BY                  NUMBER(12),
  MODIFIED_DATE                DATE,
  ATTRIBUTE_MAPPING_ID         NUMBER(6),
  CHARGE_TYPE                  VARCHAR2(30 BYTE),
  EXTERNAL_QREF                VARCHAR2(50 BYTE),
  DISCOUNT                     NUMBER(10,2),
  DISCOUNT_TYPE                VARCHAR2(20 BYTE),
  PRICE_LINE_ITEM_DETAIL_ID    NUMBER(10),
  RENT_PRICE                   NUMBER(10,2),
  ROW_ID                       NUMBER,
  ONETIME_PORT_DISCOUNT        NUMBER(10,2),
  RECURRING_PORT_DISCOUNT      NUMBER(10,2),
  REQUEST_STATUS               VARCHAR2(50 BYTE),
  ERROR_DESCRIPTION            VARCHAR2(100 BYTE),
  PRIMARY_PRICING_STATUS       VARCHAR2(50 BYTE),
  SECONDARY_PRICING_STATUS     VARCHAR2(50 BYTE),
  ACTION_CODE                  VARCHAR2(20 BYTE),
  PLN_INVENTORY_ID             NUMBER(10),
  NET_PRICE                    NUMBER(10,2),
  QUANTITY                     NUMBER,
  LINE_ITEM_DETAIL_ID          NUMBER(10),
  PTP_EUP                      VARCHAR2(5 BYTE),
  PTP_EUP_ID                   NUMBER(10),
  CLASSIC_ELEMENT_ID           VARCHAR2(255 BYTE),
  CLASSIC_ELEMENT_NAME         VARCHAR2(255 BYTE),
  PPSR_PRICE_LINE_ID           VARCHAR2(60 BYTE),
  PPSR_PRICE_LINE_DESCRIPTION  VARCHAR2(255 BYTE),
  DISCOUNT_REQUESTED           NUMBER(10,5),
  DISCOUNT_PROPOSED            NUMBER(10,5),
  BILLING_START_DATE           DATE,
  BILLING_END_DATE             DATE,
  BILLING_ID                   NUMBER(9),
  BILLING_REFERENCE_NAME       VARCHAR2(255 BYTE),
  APPROVED_DISC                NUMBER(10,2),
  PRICE_TYPE_ID                NUMBER(5),
  RECURRING_FLAG               VARCHAR2(1 BYTE),
  BASIS_FOR_CHARGE             VARCHAR2(50 BYTE),
  TARIFF_NAME                  VARCHAR2(255 BYTE),
  PRICE_POINT_ID               VARCHAR2(255 BYTE),
  PRICE_POINT_NAME             VARCHAR2(255 BYTE),
  PRICE_POINT_VERSION          VARCHAR2(50 BYTE),
  REGION                       VARCHAR2(55 BYTE),
  COUNTRY                      VARCHAR2(55 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          17M
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE PRICE_LIST
(
  PRICE_LIST_ID  NUMBER(6),
  PRICE_LIST     VARCHAR2(50 BYTE),
  VERSION        NUMBER(4,2),
  PRODUCT_NAME   VARCHAR2(100 BYTE),
  CREATED_BY     NUMBER(12),
  CREATED_DATE   DATE,
  MODIFIED_BY    NUMBER(12),
  MODIFIED_DATE  DATE
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE PRODUCT_MASTER
(
  PRODUCT_ID       NUMBER(15)                   NOT NULL,
  PRODUCT_NAME     VARCHAR2(60 BYTE),
  PARENT_SCODE     VARCHAR2(20 BYTE),
  PARENT_GROUP_ID  NUMBER(15),
  IS_WIRED         NUMBER(1)                    DEFAULT 0
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE PRODUCT_MASTER_DETAILS
(
  PRODUCT_ID            NUMBER(15)              NOT NULL,
  PRODUCT_NAME          VARCHAR2(60 BYTE)       NOT NULL,
  PRODUCT_PARENT_IMDTE  VARCHAR2(60 BYTE)       NOT NULL,
  CHILD_SCODE           VARCHAR2(20 BYTE),
  PARENT_GROUP_ID       NUMBER(15),
  ACTIVE                VARCHAR2(1 BYTE),
  PROD_FRIENDLY_ID      NUMBER(10),
  PROD_TYPE             NUMBER(5),
  PROD_LINK_TYPE        NUMBER(10),
  PROD_SUB_LINK_TYPE    NUMBER(10),
  PPSR_PROD_KEY         VARCHAR2(20 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE QUOTE_LINE_ITEM_AS_IS
(
  LINE_ITEM_ID              NUMBER(10)          NOT NULL,
  QUOTE_HEADER_ID           NUMBER(10),
  VALUE                     VARCHAR2(100 BYTE),
  CURRENCY                  VARCHAR2(10 BYTE),
  AGGREGATE_PRICE           NUMBER(10,2),
  SITE_ID                   NUMBER(10),
  CREATED_BY                NUMBER(12),
  CREATED_DATE              DATE,
  MODIFIED_BY               NUMBER(12),
  MODIFIED_DATE             DATE,
  PRODUCT_ID                NUMBER(10),
  PRODUCT_NAME              VARCHAR2(100 BYTE),
  QUANTITY                  NUMBER(3),
  ACTIVE                    CHAR(1 BYTE),
  FALLBACK_TYPE             VARCHAR2(20 BYTE),
  PART_TYPE                 VARCHAR2(30 BYTE),
  PRICED                    CHAR(1 BYTE),
  PORT_AVAILABILITY_STATUS  VARCHAR2(30 BYTE),
  NON_STD_FLAG              VARCHAR2(1 BYTE),
  ROW_ID                    NUMBER,
  QUOTE_SITE_SERVICE_ID     NUMBER(10),
  PKG_INSTANCE_ID           NUMBER(10),
  ACTION_CODE               VARCHAR2(20 BYTE),
  CLASSIC_ELEMENT_ID        VARCHAR2(255 BYTE),
  CLASSIC_ELEMENT_NAME      VARCHAR2(255 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          17M
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE QUOTE_LINE_ITEM_DETAIL_AS_IS
(
  LINE_ITEM_DETAIL_ID    NUMBER(10)             NOT NULL,
  LINE_ITEM_ID           NUMBER(10),
  VALUE                  VARCHAR2(255 BYTE),
  ACTIVE                 CHAR(1 BYTE),
  CREATED_BY             NUMBER(12),
  CREATED_DATE           DATE,
  MODIFIED_BY            NUMBER(12),
  MODIFIED_DATE          DATE,
  ATTRIBUTE_MAPPING_ID   NUMBER(6),
  QUANTITY               NUMBER(7),
  LINE_ITEM_DESCRIPTION  VARCHAR2(100 BYTE),
  NON_STD_FLAG           VARCHAR2(1 BYTE),
  ROW_ID                 NUMBER,
  AS_IS_FLAG             VARCHAR2(1 BYTE),
  ACTION_CODE            VARCHAR2(20 BYTE),
  BFG_INVENTORY_ID       NUMBER(10),
  CLASSIC_ELEMENT_ID     VARCHAR2(255 BYTE),
  CLASSIC_ELEMENT_NAME   VARCHAR2(255 BYTE),
  NO_VOICE_CHANNEL       NUMBER(7),
  MAX_QTY                NUMBER(9)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          72M
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE SALES_CHANNEL
(
  SALES_CHANNEL_ID  NUMBER(6)                   NOT NULL,
  NAME              VARCHAR2(255 BYTE),
  CREATED_BY        NUMBER(12),
  CREATED_DATE      DATE,
  MODIFIED_BY       NUMBER(12),
  MODIFIED_DATE     DATE
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE SITE_BULK_UPLOAD
(
  BATCH_ID       NUMBER(10)                     NOT NULL,
  FILE_NAME      VARCHAR2(50 BYTE),
  CREATED_BY     NUMBER(12),
  CREATED_DATE   DATE,
  MODIFIED_BY    NUMBER(12),
  MODIFIED_DATE  DATE
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          640K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE SITE_INFONET
(
  SITE_ID              VARCHAR2(15 BYTE),
  SITE_TYPE            VARCHAR2(20 BYTE),
  IVS_MIGRATION_ORDER  VARCHAR2(50 BYTE),
  IVS_MIGRATION_TEAM   VARCHAR2(50 BYTE),
  IVS_PHASE2GATEWAY    VARCHAR2(1 BYTE),
  TPE_ID               VARCHAR2(100 BYTE),
  URL_DETAILS          VARCHAR2(500 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE SITE_LOG
(
  SITE_LOG_ID    NUMBER(10)                     NOT NULL,
  BATCH_ID       NUMBER(10),
  SITE_NAME      VARCHAR2(100 BYTE),
  STATUS         CHAR(1 BYTE),
  REASON         VARCHAR2(255 BYTE),
  CREATED_BY     NUMBER(12),
  CREATED_DATE   DATE,
  MODIFIED_BY    NUMBER(12),
  MODIFIED_DATE  DATE
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          3M
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE TEMP_QUOTEVERSION
(
  COLUMN_NAME  VARCHAR2(50 BYTE),
  OLD_VALUE    NUMBER,
  NEW_VALUE    NUMBER
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE UM_ROLE
(
  UM_ROLE_ID         NUMBER(6)                  NOT NULL,
  NAME               VARCHAR2(100 BYTE),
  LOCAL_GLOBAL_FLAG  CHAR(1 BYTE),
  CREATED_BY         NUMBER(12),
  CREATED_DATE       DATE,
  MODIFIED_BY        NUMBER(12),
  MODIFIED_DATE      DATE
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE UM_USER
(
  UM_USER_ID        NUMBER(6)                   NOT NULL,
  NAME              VARCHAR2(100 BYTE),
  EIN               VARCHAR2(100 BYTE),
  BOAT_ID           VARCHAR2(20 BYTE),
  EMAIL_ID          VARCHAR2(50 BYTE),
  UM_TEAM_ID        NUMBER(6),
  CREATED_BY        NUMBER(12),
  CREATED_DATE      DATE,
  MODIFIED_BY       NUMBER(12),
  MODIFIED_DATE     DATE,
  PASSWORD          VARCHAR2(30 BYTE),
  BT_SUBSIDIARY_ID  NUMBER(6),
  SALES_CHANNEL_ID  NUMBER(6),
  UM_ROLE_ID        NUMBER(6),
  PHONE             VARCHAR2(20 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE VPN_ADD_DETAILS
(
  VPN_ADD_DET_ID      NUMBER(16),
  ORDER_LINE_ITEM_ID  NUMBER(10),
  ROW_ID              NUMBER(10),
  LAN_IP              VARCHAR2(16 BYTE),
  SUBNET_MASK         VARCHAR2(16 BYTE),
  VIRTUAL_IP          VARCHAR2(16 BYTE),
  FALLBACK_TYPE       VARCHAR2(10 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE BID_ACTIVITY
(
  BID_ACTIVITY_ID       NUMBER,
  QUOTE_HEADER_ID       NUMBER(10),
  ACTIVITY_ID           VARCHAR2(100 BYTE),
  BID_MANAGER_EMAIL_ID  VARCHAR2(100 BYTE),
  SUB_STATUS            VARCHAR2(100 BYTE),
  CREATED_DATE          DATE                    DEFAULT sysdate,
  SALES_USER_COMMENTS   VARCHAR2(2000 BYTE),
  BID_MANAGER_COMMENTS  VARCHAR2(2000 BYTE),
  SALES_USER_NAME       VARCHAR2(100 BYTE),
  BID_MANAGER_NAME      VARCHAR2(100 BYTE),
  APPROVE_REJECT_TIME   DATE
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;

CREATE TABLE ADDRESS
(
  ADDRESS_ID       NUMBER                       NOT NULL,
  COUNTRY_ID       NUMBER(10),
  BUILDING_NUMBER  VARCHAR2(255 BYTE),
  STREET_NAME      VARCHAR2(255 BYTE),
  CITY             VARCHAR2(255 BYTE),
  STATE            VARCHAR2(255 BYTE),
  POST_ZIP_CODE    VARCHAR2(255 BYTE),
  ROOM             VARCHAR2(255 BYTE),
  FLOOR            VARCHAR2(255 BYTE),
  CREATED_BY       NUMBER(12),
  CREATED_DATE     DATE,
  MODIFIED_BY      NUMBER(12),
  MODIFIED_DATE    DATE,
  ADDRESS_LINE2    VARCHAR2(255 BYTE),
  STREET_NUMBER    VARCHAR2(10 BYTE),
  ADDRESS_LINE1    VARCHAR2(255 BYTE),
  STATE_CODE       VARCHAR2(255 BYTE),
  COUNTY           VARCHAR2(255 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          80M
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE ATTRIBUTE_MAPPING
(
  ATTRIBUTE_MAPPING_ID  NUMBER(6)               NOT NULL,
  SQE_ATTRIBUTE_ID      NUMBER(6),
  SQE_ATTRIBUTE         VARCHAR2(200 BYTE),
  PPSR_ATTRIBUTE_ID     NUMBER(10),
  PPSR_ATTRIBUTE        VARCHAR2(100 BYTE),
  EDCA_ATTRIBUTE        VARCHAR2(100 BYTE),
  ATTRIBUTE_LEVEL       VARCHAR2(15 BYTE),
  ACTIVE                CHAR(1 BYTE),
  CREATED_BY            VARCHAR2(50 BYTE),
  CREATED_DATE          DATE,
  MODIFIED_BY           VARCHAR2(50 BYTE),
  MODIFIED_DATE         DATE,
  CONFIG_LEVEL          VARCHAR2(50 BYTE),
  SQE_DISPLAY_TEXT      VARCHAR2(100 BYTE),
  PROD_FRIENDLY_NAME    VARCHAR2(100 BYTE),
  PROD_FRIENDLY_ID      NUMBER(10),
  INCLUDE_BOM           VARCHAR2(1 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          320K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE CUSTOMER
(
  CUSTOMER_ID            NUMBER(10)             NOT NULL,
  NAME                   VARCHAR2(255 BYTE),
  COMPANY_NAME           VARCHAR2(255 BYTE),
  VAT_NUMBER             VARCHAR2(255 BYTE),
  SALES_CHANNEL_ID       NUMBER(6),
  BT_SUBSIDIARY_ID       NUMBER(6),
  CREATED_BY             VARCHAR2(255 BYTE),
  CREATED_DATE           DATE,
  MODIFIED_BY            VARCHAR2(255 BYTE),
  MODIFIED_DATE          DATE,
  CLASSIC_CUSTOMER_ID    VARCHAR2(255 BYTE),
  CLASSIC_CUSTOMER_NAME  VARCHAR2(255 BYTE),
  CLASSIC_CUSTOMER       CHAR(1 BYTE),
  RFO_VALIDATED          CHAR(1 BYTE),
  TAX_EXEMPTED           VARCHAR2(255 BYTE),
  TAX_EXEMPT_REF_NUM     VARCHAR2(255 BYTE),
  LINE_OF_SITE_BILLING   VARCHAR2(255 BYTE),
  BFG_CUSTOMER_ID        VARCHAR2(255 BYTE),
  BFG_CUSTOMER_NAME      VARCHAR2(255 BYTE),
  USER_FIRST_NAME        VARCHAR2(255 BYTE),
  USER_LAST_NAME         VARCHAR2(255 BYTE),
  USER_EMAIL             VARCHAR2(50 BYTE),
  USER_EIN               VARCHAR2(255 BYTE),
  SALES_CHANNEL          VARCHAR2(255 BYTE),
  ROLE_OF_USER           VARCHAR2(255 BYTE),
  CHANNEL_TYPE           VARCHAR2(255 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          640K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE CUSTOMER_CONTACT
(
  CUSTOMER_CONTACT_ID  NUMBER(10),
  CUSTOMER_ID          NUMBER(10),
  CONTACT_ID           NUMBER(10),
  CREATED_BY           NUMBER(12),
  CREATED_DATE         DATE,
  MODIFIED_BY          NUMBER(12),
  MODIFIED_DATE        DATE
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE CUSTOMER_PRICE_LIST
(
  CUSTOMER_PRICE_LIST_ID  NUMBER(6)             NOT NULL,
  CUSTOMER_ID             NUMBER(10),
  PRICE_LIST_ID           NUMBER(6),
  CREATED_BY              NUMBER(12),
  CREATED_DATE            DATE,
  MODIFIED_BY             NUMBER(12),
  MODIFIED_DATE           DATE,
  PRICE_LIST_NAME         VARCHAR2(50 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE EDCA_INTERFACE_MAPPING
(
  EDCA_INTERFACE_MAPPING_ID  NUMBER(6)          NOT NULL,
  ATTRIBUTE_MAPPING_ID       NUMBER(6),
  SERVICE_ELEMENT            VARCHAR2(50 BYTE),
  ATTRIBUTE_TYPE             VARCHAR2(50 BYTE),
  INTERFACE_FIELD            VARCHAR2(50 BYTE),
  CREATED_BY                 VARCHAR2(50 BYTE),
  CREATED_DATE               DATE,
  MODIFIED_BY                VARCHAR2(50 BYTE),
  MODIFIED_DATE              DATE,
  GENERIC_FLAG               CHAR(1 BYTE),
  PRICE_LINKED               CHAR(1 BYTE),
  ATTRIBUTE_VALUE            VARCHAR2(50 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE PRICE_LINE_ITEM
(
  PRICE_LINE_ITEM_ID      NUMBER(6)             NOT NULL,
  PRICE_LINE_DESCRIPTION  VARCHAR2(255 BYTE),
  PRODUCT_ID              NUMBER(10),
  CREATED_BY              NUMBER(12),
  CREATED_DATE            DATE,
  MODIFIED_BY             NUMBER(12),
  MODIFIED_DATE           DATE,
  PRODUCT_NAME            VARCHAR2(100 BYTE),
  PPSR_DESCRIPTION        VARCHAR2(200 BYTE),
  PPSR_ID                 NUMBER(6),
  SCODE                   VARCHAR2(20 BYTE),
  PROD_FRIENDLY_ID        NUMBER(10),
  PRICE_TYPE              VARCHAR2(20 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          576K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE QUOTE
(
  QUOTE_ID                 NUMBER(10)           NOT NULL,
  CUSTOMER_ID              NUMBER(10),
  CUSTOMER_NAME            VARCHAR2(100 BYTE),
  REFERENCE_NUMBER         VARCHAR2(50 BYTE),
  DISTRIBUTOR_LEGAL_NAME   VARCHAR2(100 BYTE),
  CUSTOMER_SERVICE_CENTER  VARCHAR2(50 BYTE),
  DISCOUNT_SCHEME          VARCHAR2(30 BYTE),
  CREATED_BY               VARCHAR2(50 BYTE),
  CREATED_DATE             DATE,
  MODIFIED_BY              VARCHAR2(50 BYTE),
  MODIFIED_DATE            DATE,
  ANNUAL_SPEND             NUMBER(12,2),
  ORDER_TYPE               VARCHAR2(255 BYTE),
  SALES_CHANNEL            VARCHAR2(50 BYTE),
  BT_SUBSIDIARY_ID         NUMBER(6)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          2M
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE QUOTE_HEADER
(
  QUOTE_HEADER_ID         NUMBER(10)            NOT NULL,
  QUOTE_ID                NUMBER(10),
  CURRENCY_ID             NUMBER(6),
  VERSION                 VARCHAR2(10 BYTE),
  CREATED_BY              VARCHAR2(50 BYTE),
  CREATED_DATE            DATE,
  MODIFIED_BY             VARCHAR2(50 BYTE),
  MODIFIED_DATE           DATE,
  QUOTE_NAME              VARCHAR2(255 BYTE),
  CONTRACT_TERM           NUMBER,
  OPPORTUNITY_ID          VARCHAR2(255 BYTE),
  BID_NUMBER              VARCHAR2(255 BYTE),
  COMMENTS                VARCHAR2(255 BYTE),
  STATUS                  VARCHAR2(255 BYTE),
  TYPE                    VARCHAR2(30 BYTE),
  CURRENCY                VARCHAR2(255 BYTE),
  CUSTOMER_SIGNED_DATE    DATE,
  CAPCHECK_REFNO          VARCHAR2(50 BYTE),
  CONTRACT_ID             VARCHAR2(20 BYTE),
  EXPEDIO_REF_ID          VARCHAR2(12 BYTE),
  CR_PROP_ID              VARCHAR2(255 BYTE),
  EXPEDIO_QUOTEID         VARCHAR2(255 BYTE),
  EXPEDIO_QUOTEVERSION    VARCHAR2(255 BYTE),
  EXPEDIO_PARENT_VERSION  VARCHAR2(10 BYTE),
  BUNDLE_STATUS           VARCHAR2(255 BYTE),
  VALIDATION_IN_PROGRESS  VARCHAR2(1 BYTE)      DEFAULT 'N',
  SUB_ORDER_TYPE          VARCHAR2(255 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          4M
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE QUOTE_SITE_SERVICE
(
  QUOTE_SITE_SERVICE_ID  NUMBER(16),
  QUOTE_HEADER_ID        NUMBER(16),
  SITE_ID                NUMBER(16),
  PRODUCT_ID             NUMBER(16),
  PRODUCT_NAME           VARCHAR2(30 BYTE),
  CREATED_BY             NUMBER(12),
  CREATED_DATE           DATE,
  MODIFIED_BY            NUMBER(12),
  MODIFIED_DATE          DATE,
  SERVICE_NAME           VARCHAR2(60 BYTE),
  PRIMARY                VARCHAR2(100 BYTE),
  SECONDARY              VARCHAR2(100 BYTE),
  STATUS                 VARCHAR2(10 BYTE),
  PRIMARY_CHILD_1        VARCHAR2(100 BYTE),
  PRIMARY_CHILD_2        VARCHAR2(100 BYTE),
  PRIMARY_CHILD_3        VARCHAR2(100 BYTE),
  SECONDARY_CHILD_1      VARCHAR2(100 BYTE),
  SECONDARY_CHILD_2      VARCHAR2(100 BYTE),
  SECONDARY_CHILD_3      VARCHAR2(100 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          320K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE QUOTE_STATUS
(
  QUOTE_ID              NUMBER(10),
  QUOTE_HEADER_ID       NUMBER(10),
  PRODUCT_NAME          VARCHAR2(60 BYTE),
  STATUS                VARCHAR2(255 BYTE),
  QUOTE_STATUS_ID       NUMBER(10),
  CUSTOMER_SIGNED_DATE  DATE
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          832K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE VPN
(
  VPN_ID             NUMBER(10),
  VPN_FRIENDLY_NAME  VARCHAR2(100 BYTE),
  ROUTING_TYPE       VARCHAR2(20 BYTE),
  CONNECTION_TYPE    VARCHAR2(50 BYTE),
  CONNECTIVITY_MODE  VARCHAR2(50 BYTE),
  BGP_PREFIX_RANGE   VARCHAR2(20 BYTE),
  CREATED_BY         NUMBER(12),
  CREATED_DATE       DATE,
  MODIFIED_BY        NUMBER(12),
  MODIFIED_DATE      DATE,
  CUSTOMER_ID        NUMBER(10),
  VPN_INDEX          NUMBER(10),
  MSS_ID             VARCHAR2(80 BYTE),
  EXTRANET_NAME      VARCHAR2(100 BYTE),
  SOURCE             VARCHAR2(10 BYTE),
  SHARED_ACCESS_VAL  VARCHAR2(5 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          384K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE VPN_CUSTOMERS
(
  ALLOWED_CUSTOMER_ID    VARCHAR2(20 BYTE),
  ALLOWED_CUSTOMER_NAME  VARCHAR2(100 BYTE),
  CUSTOMER_ID            NUMBER(10),
  VPN_ID                 VARCHAR2(100 BYTE),
  SYSTEM                 VARCHAR2(10 BYTE),
  CLASSIC_CUSTOMER_ID    VARCHAR2(20 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;

CREATE TABLE BILLING
(
  BILLING_ID            NUMBER(10)              NOT NULL,
  ADDRESS_ID            NUMBER(10),
  CUSTOMER_ID           NUMBER(10),
  ACCOUNT_ID            NUMBER(10),
  CONTACT_ID            NUMBER(10),
  CURRENCY_ID           NUMBER(6),
  ACTIVATION_DATE       DATE,
  INVOICE_PERIOD        VARCHAR2(20 BYTE),
  CREATED_BY            NUMBER(12),
  CREATED_DATE          DATE,
  MODIFIED_BY           NUMBER(12),
  MODIFIED_DATE         DATE,
  SIEBEL_ID             VARCHAR2(30 BYTE),
  BILLING_CODE          VARCHAR2(9 BYTE),
  CURRENCY              VARCHAR2(10 BYTE),
  INFORMATION_CURRENCY  VARCHAR2(50 BYTE),
  BILL_PERIOD           VARCHAR2(5 BYTE),
  PAYMENT_METHOD        VARCHAR2(255 BYTE),
  PAYMENT_DAYS          NUMBER(3),
  US_TOUCHING_SCENARIO  VARCHAR2(80 BYTE),
  ACCOUNT_NAME          VARCHAR2(40 BYTE),
  EDI_ADDRESS           VARCHAR2(80 BYTE),
  INV_LANG              VARCHAR2(50 BYTE),
  BFG_BILL_ACCOUNT_ID   VARCHAR2(255 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          256K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE DISCOUNT_APPROVAL
(
  DISCOUNT_APPROVAL_ID  NUMBER(10)              NOT NULL,
  QUOTE_HEADER_ID       NUMBER(10),
  SUBMITTED_BY          VARCHAR2(30 BYTE),
  APPROVAL_STATUS       VARCHAR2(30 BYTE),
  REASON                VARCHAR2(100 BYTE),
  CREATED_BY            NUMBER(12),
  CREATED_DATE          DATE,
  MODIFIED_BY           NUMBER(12),
  MODIFIED_DATE         DATE,
  ACTIVE                CHAR(1 BYTE),
  ACTIVITY_ID           VARCHAR2(50 BYTE),
  BID_MANAGERS_EMAIL    VARCHAR2(100 BYTE),
  SUB_STATUS            VARCHAR2(100 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          2M
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE EXCHANGE_RATE_DETAIL
(
  EXCHANGE_RATE_DETAIL_ID  NUMBER(10),
  QUOTE_HEADER_ID          NUMBER(10),
  SOURCE_CURRENCY          VARCHAR2(10 BYTE),
  TARGET_CURRENCY          VARCHAR2(10 BYTE),
  EXCHANGE_RATE            NUMBER(10,2),
  EXCHANGE_RATE_DATE       DATE,
  ACTIVE                   CHAR(1 BYTE),
  CREATED_BY               NUMBER(12),
  CREATED_DATE             DATE,
  MODIFIED_BY              NUMBER(12),
  MODIFIED_DATE            DATE
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE ORDER_HEADER
(
  ORDER_HEADER_ID               NUMBER(10),
  QUOTE_HEADER_ID               NUMBER(10),
  CURRENCY                      VARCHAR2(10 BYTE),
  CREATED_BY                    VARCHAR2(50 BYTE),
  CREATED_DATE                  DATE,
  MODIFIED_BY                   VARCHAR2(50 BYTE),
  MODIFIED_DATE                 DATE,
  ORDER_STATUS                  VARCHAR2(30 BYTE),
  ORDER_TYPE                    VARCHAR2(20 BYTE),
  CONTRACT_ID                   VARCHAR2(20 BYTE),
  COMMENTS                      VARCHAR2(2000 BYTE),
  ORDER_FORM_SIGN_DATE          DATE,
  IS_ORDER_REJECTED             VARCHAR2(3 BYTE),
  IS_ORDER_IPCLEARREACHOUTSITE  VARCHAR2(3 BYTE),
  FTIP_NUMBER                   VARCHAR2(20 BYTE),
  EMAILID                       VARCHAR2(50 BYTE),
  VPN_CONNECTIVITY_MODE         VARCHAR2(20 BYTE),
  EXPEDIO_PARENT_ORDERID        NUMBER(10),
  PRODUCT_NAME                  VARCHAR2(60 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          2M
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE ORDER_VALIDATION
(
  ORDER_VALIDATION_ID  NUMBER,
  ORDER_HEADER_ID      NUMBER,
  RFO_VALIDATED        CHAR(1 BYTE),
  CREATED_BY           NUMBER(12),
  CREATED_DATE         DATE,
  MODIFIED_BY          NUMBER(12),
  MODIFIED_DATE        DATE
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE PRICING_BUCKET
(
  PRICING_BUCKET_ID  NUMBER,
  BUCKET_ID          NUMBER,
  REQUEST_ID         VARCHAR2(20 BYTE),
  QUOTE_HEADER_ID    NUMBER,
  SITE_NAME          VARCHAR2(100 BYTE),
  CONFIG_LEVEL       VARCHAR2(50 BYTE),
  PRODUCT_NAME       VARCHAR2(100 BYTE),
  ACTIVE             CHAR(1 BYTE),
  CREATED_BY         NUMBER(12),
  CREATED_DATE       DATE,
  MODIFIED_BY        NUMBER(12),
  MODIFIED_DATE      DATE
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          960K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE SITE
(
  SITE_ID                       NUMBER(10)      NOT NULL,
  CLASSIC_SITE_ID               VARCHAR2(255 BYTE),
  NAME                          VARCHAR2(255 BYTE),
  ADDRESS_ID                    NUMBER(10),
  CUSTOMER_ID                   NUMBER(10),
  PRIMARY_CONTACT_ID            NUMBER(10),
  SECONDARY_CONTACT_ID          NUMBER(10),
  NOTES                         VARCHAR2(500 BYTE),
  MAIN_SITE_FLAG                CHAR(1 BYTE),
  RESILIENCE                    VARCHAR2(255 BYTE),
  CUSTOMISATION_LEVEL           VARCHAR2(255 BYTE),
  PRICING                       VARCHAR2(255 BYTE),
  MINIMUM_PERIOD_OF_SERVICE     NUMBER(3),
  CREATED_BY                    NUMBER(12),
  CREATED_DATE                  DATE,
  MODIFIED_BY                   NUMBER(12),
  MODIFIED_DATE                 DATE,
  CUSTOMER_REPORT_SITE_NAME     VARCHAR2(255 BYTE),
  BILLING_ID                    NUMBER(10),
  ORION_ORDER_REFERENCE         VARCHAR2(255 BYTE),
  SPECIAL_BILLING_TERMS         VARCHAR2(255 BYTE),
  BILLING_START_DATE            DATE,
  BATCH_ID                      NUMBER(10),
  TELEPHONE_AREA_CODE           VARCHAR2(255 BYTE),
  CLASSIC_SITE_NAME             VARCHAR2(255 BYTE),
  CLASSIC_SITE                  CHAR(1 BYTE),
  RFO_VALIDATED                 CHAR(1 BYTE),
  LOCAL_BUSINESS_CUSTOMER_NAME  VARCHAR2(255 BYTE),
  PPSR_NOTE                     VARCHAR2(500 BYTE),
  CNTRY_SPEC_NOTES_REQ          VARCHAR2(3 BYTE),
  URL                           VARCHAR2(255 BYTE),
  BFG_SITE_ID                   NUMBER(15),
  BFG_SITE_NAME                 VARCHAR2(255 BYTE),
  LINE_OF_SITE_BILLING          VARCHAR2(255 BYTE),
  EXPEDIO_SITE_ID               VARCHAR2(255 BYTE),
  PROP_SITE_ID                  NUMBER(10),
  BFG_SITE_CONTACT_ID           NUMBER(10),
  BFG_ADDRESS_ID                VARCHAR2(255 BYTE),
  BFG_SUBLOC_ID                 VARCHAR2(255 BYTE),
  PROP_ADDRESS_ID               VARCHAR2(255 BYTE),
  PROP_SUBLOC_ID                VARCHAR2(255 BYTE),
  CHILD_EXPEDIO_REF_ID          VARCHAR2(255 BYTE),
  CR_PROP_ID                    VARCHAR2(255 BYTE),
  MX_BFG_BILL_ACCOUNT_ID        VARCHAR2(255 BYTE),
  ORDER_TITLE                   VARCHAR2(255 BYTE),
  PLACE_ACC_PRICE_REV_ORDER     VARCHAR2(255 BYTE),
  PHONE_NUMBER                  VARCHAR2(255 BYTE),
  LOCAL_COMPANY_NAME            VARCHAR2(255 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          4M
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE SITE_CONTACT_DETAIL
(
  SITE_CONTACT_DETAIL_ID  NUMBER(10),
  SITE_ID                 NUMBER(10),
  CONTACT_ID              NUMBER(10),
  CREATED_BY              NUMBER(12),
  CREATED_DATE            DATE,
  MODIFIED_BY             NUMBER(12),
  MODIFIED_DATE           DATE
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          832K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;

CREATE TABLE BCM_EXPORT
(
  BCMEXPORT_ID                    NUMBER(10),
  QUOTE_HEADER_ID                 NUMBER(10),
  SITE_STATUS                     VARCHAR2(20 BYTE),
  SITE_ID                         NUMBER(10),
  SITE                            VARCHAR2(100 BYTE),
  COUNTRY                         VARCHAR2(50 BYTE),
  CITY                            VARCHAR2(50 BYTE),
  RESILIENCE_TYPE                 VARCHAR2(100 BYTE),
  PRIMARY_CONNECTION_STATUS       VARCHAR2(100 BYTE),
  PRIMARY_REACH_IN_NNI_PORT       VARCHAR2(10 BYTE),
  PRIMARY_REACH_IN_NNI_PART_NAME  VARCHAR2(100 BYTE),
  PRIMARY_TARRIF_ZONE             VARCHAR2(100 BYTE),
  PRIMARY_GPOP                    VARCHAR2(100 BYTE),
  PRIMARY_APOP                    VARCHAR2(100 BYTE),
  PRIMARY_TRAFFIC_TYPE            VARCHAR2(100 BYTE),
  PRIMARY_ACCESS_TECHNOLOGY       VARCHAR2(100 BYTE),
  PRIMARY_N_E1_T1                 VARCHAR2(100 BYTE),
  PRIMARY_ACCESS_SPEED            VARCHAR2(100 BYTE),
  PRIMARY_PORT_SPEED              VARCHAR2(100 BYTE),
  PRIMARY_DSL_SUPPLIER_ID         VARCHAR2(100 BYTE),
  PRIMARY_DSL_SUPP_OFFER_NAME     VARCHAR2(100 BYTE),
  PRIMARY_DSL_TYPE                VARCHAR2(100 BYTE),
  PRIMARY_DSL_CONTENTION          VARCHAR2(100 BYTE),
  PRIMARY_DSL_ACCESS_UPSTREAM     VARCHAR2(100 BYTE),
  PRIMARY_DSL_ACCESS_DOWNSTREAM   VARCHAR2(100 BYTE),
  PRIMARY_DSL_PORT_SPEED          VARCHAR2(100 BYTE),
  PRIMARY_DSL_LOCAL_LOOP_ACCESS   VARCHAR2(100 BYTE),
  PRIMARY_HVPN_ACCESS_PROD_TYPE   VARCHAR2(100 BYTE),
  PRIMARY_HVPN_ACCESS_SERVICE_ID  VARCHAR2(100 BYTE),
  PRIMRY_HVPN_PORT_DWNSTRM_SPEED  VARCHAR2(100 BYTE),
  PRIMARY_HVPN_PORT_UPSTRM_SPEED  VARCHAR2(100 BYTE),
  PRIMARY_HVPN_LOCAL_LOOP_ACCESS  VARCHAR2(100 BYTE),
  PRIMARY_TOTAL_AF                VARCHAR2(100 BYTE),
  PRIMARY_AF_MULTIMEDIA           VARCHAR2(100 BYTE),
  PRIMARY_EF_SPEED                VARCHAR2(100 BYTE),
  PRIMARY_DE_SPEED                VARCHAR2(100 BYTE),
  NO_OF_ADDI_VPN_PRMRY_PORT       VARCHAR2(100 BYTE),
  NO_OF_BGP_PREFIXES_PRMRY_PORT   VARCHAR2(100 BYTE),
  PRIMARY_CPE_PROGRAM_NAME        VARCHAR2(100 BYTE),
  PRIMARY_CPE_INSTALL_EUP         VARCHAR2(100 BYTE),
  PRIMARY_CPE_INST_EUP_DISCT      VARCHAR2(100 BYTE),
  PRIMARY_CPE_MONTHLY_RENTAL_EUP  VARCHAR2(100 BYTE),
  PRIMARY_CPE_MTHLY_RNT_EUP_DISC  VARCHAR2(100 BYTE),
  PRIMARY_CPE_MONT_MAINT_EUP      VARCHAR2(100 BYTE),
  PRIMARY_CPE_INSTALL_COST        VARCHAR2(100 BYTE),
  PRIMARY_CPE_MONTH_RECURR_COST   VARCHAR2(100 BYTE),
  PRIMARY_CPE_COST_CURRENCY       VARCHAR2(100 BYTE),
  PRIMARY_CPE_PRICING_STATUS      VARCHAR2(100 BYTE),
  PRIMARY_ACCESS_INSTALL_EUP      VARCHAR2(100 BYTE),
  PRIMARY_ACCESS_INSTALL_EUP_DIS  VARCHAR2(100 BYTE),
  PRIMARY_ACCESS_MNTHLY_RNT_EUP   VARCHAR2(100 BYTE),
  PRIM_ACCESS_MNTH_RNT_EUP_DISC   VARCHAR2(100 BYTE),
  PRIMARY_ACCESS_INSTALL_COST     VARCHAR2(100 BYTE),
  PRIMARY_ACCESS_MONTHLY_COST     VARCHAR2(100 BYTE),
  PRIMARY_ACCESS_COST_CURRENCY    VARCHAR2(100 BYTE),
  PRIMARY_ACCESS_PRICING_STATUS   VARCHAR2(100 BYTE),
  PRIMARY_PORT_INSTALL_EUP        VARCHAR2(100 BYTE),
  PRIMARY_PORT_INSTALL_EUP_DISC   VARCHAR2(100 BYTE),
  PRIMARY_PORT_RECONFIG_ONE_TIME  VARCHAR2(100 BYTE),
  PRIMARY_PORT_RECONFIG_OT_DISC   VARCHAR2(100 BYTE),
  PRIMARY_DSL_UPGRD_DWNGRD_OT     VARCHAR2(100 BYTE),
  PRIMARY_DSL_UP_DWN_GRD_OT_DISC  VARCHAR2(100 BYTE),
  PRIMARY_PORT_MNTHLY_RNTL_EUP    VARCHAR2(100 BYTE),
  PRMRY_PORT_MNTH_RNTL_EUP_DISC   VARCHAR2(100 BYTE),
  PRIMARY_LLA_INSTALL_EUP         VARCHAR2(100 BYTE),
  PRIMARY_LLA_INSTALL_EUP_DISC    VARCHAR2(100 BYTE),
  PRIMARY_LLA_MNTHL_RENTAL_EUP    VARCHAR2(100 BYTE),
  PRIMARY_LLA_MNTH_RNT_EUP_DISC   VARCHAR2(100 BYTE),
  PRIMARY_LLA_INSTALL_COST        VARCHAR2(100 BYTE),
  PRIMARY_LLA_MONTHLY_COST        VARCHAR2(100 BYTE),
  PRIMARY_LLA_COST_CURRENCY       VARCHAR2(100 BYTE),
  PRIMARY_MVPN_ONE_TIME_EUP       VARCHAR2(100 BYTE),
  PRIM_MVPN_MNT_RNT_EUP_PERPORT   VARCHAR2(100 BYTE),
  PRI_MVPN_MNTRNT_EUP_PERPRT_DIS  VARCHAR2(100 BYTE),
  PRI_MVP_MNT_RNT_EUP_TOTADD_VPN  VARCHAR2(100 BYTE),
  PRI_MVPN_MNTRNT_NET_EUP_ADDVPN  VARCHAR2(100 BYTE),
  PRIMARY_BGP_PRFIX_ONETIME_EUP   VARCHAR2(100 BYTE),
  PPRIMARY_BGP_PRFIX_OT_EUP_DISC  VARCHAR2(100 BYTE),
  PRIMARY_BGP_PRFX_MNT_RNTL_EUP   VARCHAR2(100 BYTE),
  PRIM_BGP_PRFX_MNT_RNTL_EUP_DIS  VARCHAR2(100 BYTE),
  SECONDRY_CONNECTION_STATUS      VARCHAR2(100 BYTE),
  SECONDRY_NNI_PORT               VARCHAR2(10 BYTE),
  SCNDRY_REACH_IN_NNI_PRT_NAME    VARCHAR2(100 BYTE),
  SECONDRY_TARRIF_ZONE            VARCHAR2(100 BYTE),
  SECONDRY_GPOP                   VARCHAR2(100 BYTE),
  SECONDRY_APOP                   VARCHAR2(100 BYTE),
  SECONDRY_TRAFFIC_TYPE           VARCHAR2(100 BYTE),
  SECONDRY_ACCESS_TYPE            VARCHAR2(100 BYTE),
  SECONDRY_N_E1_T1                VARCHAR2(100 BYTE),
  SECONDRY_ACCESS_SPEED           VARCHAR2(100 BYTE),
  SECONDRY_PORT_SPEED             VARCHAR2(100 BYTE),
  SECONDRY_DSL_SUPPLIER_ID        VARCHAR2(100 BYTE),
  SECONDRY_DSL_SUPP_OFFR_NAME     VARCHAR2(100 BYTE),
  SECONDRY_DSL_TYPE               VARCHAR2(100 BYTE),
  SECONDRY_DSL_CONTENTION         VARCHAR2(100 BYTE),
  SECONDRY_DSL_ACCESS_UPSTREAM    VARCHAR2(100 BYTE),
  SECONDRY_DSL_ACCESS_DOWNSTREAM  VARCHAR2(100 BYTE),
  SECONDRY_DSL_PORT_SPEED         VARCHAR2(100 BYTE),
  SECONDRY_DSL_LOCAL_LOOP_ACCESS  VARCHAR2(100 BYTE),
  SECONDRY_HVPN_ACCESS_PROD_TYPE  VARCHAR2(100 BYTE),
  SECND_HVPN_ACCESS_SERVICE_ID    VARCHAR2(100 BYTE),
  SECND_HVPN_PRT_DWNSTRM_SPEED    VARCHAR2(100 BYTE),
  SECONDRY_HVPN_PRT_UPSTRM_SPEED  VARCHAR2(100 BYTE),
  SECND_HVPN_LOCAL_LOOP_ACCESS    VARCHAR2(100 BYTE),
  SECONDRY_TOTAL_AF               VARCHAR2(100 BYTE),
  SECONDRY_AF_MULTIMEDIA          VARCHAR2(100 BYTE),
  SECONDRY_EF_SPEED               VARCHAR2(100 BYTE),
  SECONDRY_DE_SPEED               VARCHAR2(100 BYTE),
  NO_OF_ADDI_VPN_SCNDRY_PORT      VARCHAR2(100 BYTE),
  NO_OF_BGP_PREFXES_SCNDRY_PORT   VARCHAR2(100 BYTE),
  SECONDRY_CPE_PROGRAM_NAME       VARCHAR2(100 BYTE),
  SECONDRY_CPE_INSTALL_EUP        VARCHAR2(100 BYTE),
  SECONDRY_CPE_INST_EUP_DISCT     VARCHAR2(100 BYTE),
  SECND_CPE_MONTHLY_RENTAL_EUP    VARCHAR2(100 BYTE),
  SECND_CPE_MTHLY_RNT_EUP_DISC    VARCHAR2(100 BYTE),
  SECONDRY_CPE_MONT_MAINT_EUP     VARCHAR2(100 BYTE),
  SECONDRY_CPE_INSTALL_COST       VARCHAR2(100 BYTE),
  SECND_CPE_MONTH_RECURR_COST     VARCHAR2(100 BYTE),
  SECONDRY_CPE_COST_CURRENCY      VARCHAR2(100 BYTE),
  SECONDRY_CPE_PRICING_STATUS     VARCHAR2(100 BYTE),
  SECONDRY_ACCESS_INSTALL_EUP     VARCHAR2(100 BYTE),
  SECND_ACCESS_INSTALL_EUP_DISC   VARCHAR2(100 BYTE),
  SECND_ACCESS_MNTHLY_RENT_EUP    VARCHAR2(100 BYTE),
  SECN_ACCESS_MNTH_RNT_EUP_DISC   VARCHAR2(100 BYTE),
  SECONDRY_ACCESS_INSTALL_COST    VARCHAR2(100 BYTE),
  SECONDRY_ACCESS_MONTHLY_COST    VARCHAR2(100 BYTE),
  SECONDRY_ACCESS_COST_CURRENCY   VARCHAR2(100 BYTE),
  SECONDRY_ACCESS_PRICING_STATUS  VARCHAR2(100 BYTE),
  SECONDRY_PORT_INSTALL_EUP       VARCHAR2(100 BYTE),
  SECONDRY_PORT_INSTALL_EUP_DISC  VARCHAR2(100 BYTE),
  SECNDRY_PORT_RECONFIG_ONE_TIME  VARCHAR2(100 BYTE),
  SECNDRY_PORT_RECONFIG_OT_DISC   VARCHAR2(100 BYTE),
  SECONDRY_DSL_UPGRD_DWNGRD_OT    VARCHAR2(100 BYTE),
  SECND_DSL_UP_DWN_GRD_OT_DISC    VARCHAR2(100 BYTE),
  SECONDRY_PORT_MNTHLY_RNTL_EUP   VARCHAR2(100 BYTE),
  SECND_PORT_MNTH_RNTL_EUP_DIS    VARCHAR2(100 BYTE),
  SECONDRY_LLA_INSTALL_EUP        VARCHAR2(100 BYTE),
  SECONDRY_LLA_INSTALL_EUP_DISC   VARCHAR2(100 BYTE),
  SECONDRY_LLA_MNTHL_RENTAL_EUP   VARCHAR2(100 BYTE),
  SECONDRY_LLA_MNTH_RNT_EUP_DISC  VARCHAR2(100 BYTE),
  SECONDRY_LLA_INSTALL_COST       VARCHAR2(100 BYTE),
  SECONDRY_LLA_MONTHLY_COST       VARCHAR2(100 BYTE),
  SECONDRY_LLA_COST_CURRENCY      VARCHAR2(100 BYTE),
  SECONDRY_MVPN_ONE_TIME_EUP      VARCHAR2(100 BYTE),
  SECONDRY_MVPN_ONE_TIME_NET_EUP  VARCHAR2(100 BYTE),
  SECD_MVPN_MNT_RNT_EUP_PERPORT   VARCHAR2(100 BYTE),
  SEC_MVPN_MNTRNT_EUP_PERPRT_DIS  VARCHAR2(100 BYTE),
  SEC_MVP_MNTRNT_EUP_TOT_ADD_VPN  VARCHAR2(100 BYTE),
  SEC_MVPN_MNTRNT_NET_EUP_ADDVPN  VARCHAR2(100 BYTE),
  SECONDRY_BGP_PRFIX_ONETIME_EUP  VARCHAR2(100 BYTE),
  SECONDRY_BGP_PRFIX_OT_EUP_DISC  VARCHAR2(100 BYTE),
  SECONDRY_BGP_PRFX_MNT_RNTL_EUP  VARCHAR2(100 BYTE),
  SECD_BGP_PRFX_MNT_RNTL_EUP_DIS  VARCHAR2(100 BYTE),
  CHANGE_MANAGEMENT               VARCHAR2(100 BYTE),
  CHANGE_MANAGEMENT_DISCOUNT      VARCHAR2(100 BYTE),
  CHANGE_MANAGEMENT_LIGHT_EUP     VARCHAR2(100 BYTE),
  CHANGE_MNGMENT_LIGHT_EUP_DISC   VARCHAR2(100 BYTE),
  PROACTIVE_CE_MONITORINGS_EUP    VARCHAR2(100 BYTE),
  PROACTVE_CE_MONITRINGS_EUP_DIS  VARCHAR2(100 BYTE),
  SNMP_RDON_ACES_PRMY_CPEOT_EUP   VARCHAR2(100 BYTE),
  SNMP_RD_ACES_PRM_CPEOT_EUP_DIS  VARCHAR2(100 BYTE),
  OOH_TRNUP_MN_CPE_OT_EUP         VARCHAR2(100 BYTE),
  OOH_TRNUP_MN_CPE_OT_EUP_DIS     VARCHAR2(100 BYTE),
  SNMP_RDON_ACES_SECD_CPEOT_EUP   VARCHAR2(100 BYTE),
  SNMP_RD_ACES_SEC_CPEOT_EUP_DIS  VARCHAR2(100 BYTE),
  OOH_TRNUP_SEC_CPE_OT_EUP        VARCHAR2(100 BYTE),
  OOH_TRNUP_SEC_CPE_OT_EUP_DIS    VARCHAR2(100 BYTE),
  BGP_PRIM_ONETME_COST            VARCHAR2(100 BYTE),
  BGP_PRIM_RECURRING_COST         VARCHAR2(100 BYTE),
  BGP_SEC_ONETIME_COST            VARCHAR2(100 BYTE),
  BGP_SEC_RECURRING_COST          VARCHAR2(100 BYTE),
  PRIMARY_MVPN_NET_EUP            VARCHAR2(100 BYTE),
  HELPDESK_TYPE                   VARCHAR2(100 BYTE),
  HELPDESK_ONETIME_EUP            VARCHAR2(100 BYTE),
  HELPDESK_ONE_TIME_DIS           VARCHAR2(100 BYTE),
  HELPDESK_MON_RECUR_EUP          VARCHAR2(100 BYTE),
  HELPDESK_MON_RECUR_DIS          VARCHAR2(100 BYTE),
  SEC_CPE_CHG_MGMT_MNTH_EUP       VARCHAR2(100 BYTE),
  SEC_CPE_CHG_MGMT_MNTH_DIS       VARCHAR2(100 BYTE),
  SEC_CPE_PRO_CE_MNTR_MNTH_EUP    VARCHAR2(100 BYTE),
  SEC_CPE_PRO_CE_MNTR_MNTH_DIS    VARCHAR2(100 BYTE),
  PRIM_CPE_INS_PTP                VARCHAR2(100 BYTE),
  PRIM_CPE_MON_RNTAL_PTP          VARCHAR2(100 BYTE),
  PRIM_ACCSS_INS_PTP              VARCHAR2(100 BYTE),
  PRIM_ACCSS_MON_RNTAL_PTP        VARCHAR2(100 BYTE),
  PRIM_PORT_INS_PTP               VARCHAR2(100 BYTE),
  PRIM_PORT_RECONFIG_ONE_TIME     VARCHAR2(100 BYTE),
  PRIM_DSL_UP_DOWN_ONE_TIME       VARCHAR2(100 BYTE),
  PRIM_PORT_MON_RNTAL_PTP         VARCHAR2(100 BYTE),
  PRIM_LLA_INS_PTP                VARCHAR2(100 BYTE),
  PRIM_LLA_MON_RNTAL_PTP          VARCHAR2(100 BYTE),
  PRIM_MVPN_ONE_TIME_PTP          VARCHAR2(100 BYTE),
  PRIM_MVPN_ONE_TIME_NET_PTP      VARCHAR2(100 BYTE),
  PRIM_MVPN_MON_RNTAL_PTP_PORT    VARCHAR2(100 BYTE),
  PR_MVPN_MON_RNTL_PTP_TADD_VPN   VARCHAR2(100 BYTE),
  PR_MVPN_MN_RNT_NT_PTP_TADD_VPN  VARCHAR2(100 BYTE),
  PR_BGP_PREFX_ONE_TIME_PTP       VARCHAR2(100 BYTE),
  PRIM_BGP_PREFX_MON_RNTAL_PTP    VARCHAR2(100 BYTE),
  SEC_CPE_INS_PTP                 VARCHAR2(100 BYTE),
  SEC_CPE_MON_RNTAL_PTP           VARCHAR2(100 BYTE),
  SEC_ACCSS_INS_PTP               VARCHAR2(100 BYTE),
  SEC_ACCSS_MON_RNTAL_PTP         VARCHAR2(100 BYTE),
  SEC_PORT_INS_PTP                VARCHAR2(100 BYTE),
  SEC_PORT_RECONFIG_ONE_TIME      VARCHAR2(100 BYTE),
  SEC_DSL_UP_DOWN_ONE_TIME        VARCHAR2(100 BYTE),
  SEC_PORT_MON_RNTAL_PTP          VARCHAR2(100 BYTE),
  SEC_LLA_INS_PTP                 VARCHAR2(100 BYTE),
  SEC_LLA_MON_RNTAL_PTP           VARCHAR2(100 BYTE),
  SEC_MVPN_ONE_TIME_PTP           VARCHAR2(100 BYTE),
  SEC_MVPN_ONE_TIME_NET_PTP       VARCHAR2(100 BYTE),
  SEC_MVPN_MON_RNTAL_PTP_PORT     VARCHAR2(100 BYTE),
  SEC_MVPN_MON_RNT_PTP_TADD_VPN   VARCHAR2(100 BYTE),
  SE_MVPN_MN_RNT_NT_PTP_TAD_VPN   VARCHAR2(100 BYTE),
  SEC_BGP_PREFX_ONE_TIME_PTP      VARCHAR2(100 BYTE),
  SEC_BGP_PREFX_MON_RNTAL_PTP     VARCHAR2(100 BYTE),
  CHNGE_MGMT_PTP                  VARCHAR2(100 BYTE),
  PROACTIVE_CE_MONITORINGS_PTP    VARCHAR2(100 BYTE),
  SNMP_RD_ACS_PR_CPE_ONE_TM_PTP   VARCHAR2(100 BYTE),
  OOH_TRN_UP_MN_CPE_ONE_TME_PTP   VARCHAR2(100 BYTE),
  SNMP_RD_ACS_SE_CPE_ONE_TM_PTP   VARCHAR2(100 BYTE),
  OOH_TRN_UP_SE_CPE_ONE_TM_PTP    VARCHAR2(100 BYTE),
  HELPDESK_ONE_TIME_PTP           VARCHAR2(100 BYTE),
  HELPDESK_MON_RECURRING_PTP      VARCHAR2(100 BYTE),
  SEC_CPE_CHNGE_MGMT_PTP          VARCHAR2(100 BYTE),
  SEC_CPE_PROACTV_CE_MNTRNG_PTP   VARCHAR2(100 BYTE),
  PRI_ACCESS_OPTM_RENTAL_COST_Y2  VARCHAR2(100 BYTE),
  PRI_ACCESS_OPTM_RENTAL_COST_Y3  VARCHAR2(100 BYTE),
  PRI_ACCESS_OPTM_RENTAL_COST_Y4  VARCHAR2(100 BYTE),
  PRI_ACCESS_OPTM_RENTAL_COST_Y5  VARCHAR2(100 BYTE),
  SEC_ACCESS_OPTM_RENTAL_COST_Y2  VARCHAR2(100 BYTE),
  SEC_ACCESS_OPTM_RENTAL_COST_Y3  VARCHAR2(100 BYTE),
  SEC_ACCESS_OPTM_RENTAL_COST_Y4  VARCHAR2(100 BYTE),
  SEC_ACCESS_OPTM_RENTAL_COST_Y5  VARCHAR2(100 BYTE),
  WORKFLOW_STATUS                 VARCHAR2(100 BYTE),
  PRIM_CPE_INS_PTP_DIS            VARCHAR2(100 BYTE),
  PRIM_CPE_MON_RNTAL_PTP_DIS      VARCHAR2(100 BYTE),
  PRIM_ACCSS_INS_PTP_DIS          VARCHAR2(100 BYTE),
  PRIM_ACCSS_MON_RNTAL_PTP_DIS    VARCHAR2(100 BYTE),
  PRIM_PORT_INS_PTP_DIS           VARCHAR2(100 BYTE),
  PRIM_PORT_RECONFIG_ONETIME_DIS  VARCHAR2(100 BYTE),
  PRIM_DSL_UP_DOWN_ONE_TIME_DIS   VARCHAR2(100 BYTE),
  PRIM_PORT_MON_RNTAL_PTP_DIS     VARCHAR2(100 BYTE),
  PRIM_LLA_INS_PTP_DIS            VARCHAR2(100 BYTE),
  PRIM_LLA_MON_RNTAL_PTP_DIS      VARCHAR2(100 BYTE),
  PRIM_MVPN_MON_RNT_PTP_PORT_DIS  VARCHAR2(100 BYTE),
  PR_BGP_PREFX_ONE_TIME_PTP_DIS   VARCHAR2(100 BYTE),
  PRIM_BGP_PREFX_MON_RNT_PTP_DIS  VARCHAR2(100 BYTE),
  SEC_CPE_INS_PTP_DIS             VARCHAR2(100 BYTE),
  SEC_CPE_MON_RNTAL_PTP_DIS       VARCHAR2(100 BYTE),
  SEC_ACCSS_INS_PTP_DIS           VARCHAR2(100 BYTE),
  SEC_ACCSS_MON_RNTAL_PTP_DIS     VARCHAR2(100 BYTE),
  SEC_PORT_INS_PTP_DIS            VARCHAR2(100 BYTE),
  SEC_PORT_RECONFIG_ONE_TIME_DIS  VARCHAR2(100 BYTE),
  SEC_DSL_UP_DOWN_ONE_TIME_DIS    VARCHAR2(100 BYTE),
  SEC_PORT_MON_RNTAL_PTP_DIS      VARCHAR2(100 BYTE),
  SEC_LLA_INS_PTP_DIS             VARCHAR2(100 BYTE),
  SEC_LLA_MON_RNTAL_PTP_DIS       VARCHAR2(100 BYTE),
  SEC_MVPN_MON_RNT_PTP_PORT_DIS   VARCHAR2(100 BYTE),
  SEC_BGP_PREFX_ONETIME_PTP_DIS   VARCHAR2(100 BYTE),
  SEC_BGP_PREFX_MON_RNT_PTP_DIS   VARCHAR2(100 BYTE),
  CHNGE_MGMT_PTP_DIS              VARCHAR2(100 BYTE),
  PROACTIVE_CE_MONITOR_PTP_DIS    VARCHAR2(100 BYTE),
  SNMP_RDACSPR_CPE_ONETM_PTP_DIS  VARCHAR2(100 BYTE),
  OOH_TRNUPMN_CPE_ONETM_PTP_DIS   VARCHAR2(100 BYTE),
  SNMP_RDACSSE_CPE_ONETM_PTP_DIS  VARCHAR2(100 BYTE),
  OOH_TRNUPSE_CPE_ONETM_PTP_DIS   VARCHAR2(100 BYTE),
  HELPDESK_ONE_TIME_PTP_DIS       VARCHAR2(100 BYTE),
  HELPDESK_MON_RECURRING_PTP_DIS  VARCHAR2(100 BYTE),
  SEC_CPE_CHNGE_MGMT_PTP_DIS      VARCHAR2(100 BYTE),
  SEC_CPE_PROACT_CEMNTRG_PTP_DIS  VARCHAR2(100 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          512K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE ORDER_CONTACT_DETAIL
(
  ORDER_HEADER_ID          NUMBER(10),
  CONTACT_ID               NUMBER(10),
  CREATED_BY               NUMBER(12),
  CREATED_DATE             DATE,
  MODIFIED_BY              NUMBER(12),
  MODIFIED_DATE            DATE,
  ORDER_CONTACT_DETAIL_ID  NUMBER(10),
  ADDRESS_ID               NUMBER,
  BFG_CNT_ID               NUMBER,
  BFG_CNR_ID               NUMBER,
  SITE_ID                  NUMBER(10)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          256K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE ORDER_CONTACT_DETAIL_AS_IS
(
  ORDER_HEADER_ID          NUMBER(10),
  CONTACT_ID               NUMBER(10),
  CREATED_BY               NUMBER(12),
  CREATED_DATE             DATE,
  MODIFIED_BY              NUMBER(12),
  MODIFIED_DATE            DATE,
  ORDER_CONTACT_DETAIL_ID  NUMBER(10),
  ADDRESS_ID               NUMBER,
  BFG_CNT_ID               NUMBER,
  BFG_CNR_ID               NUMBER,
  QUOTE_HEADER_ID          NUMBER(10),
  SITE_ID                  NUMBER(10)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE ORDER_SITE_DETAIL
(
  ORDER_SITE_DETAIL_ID    NUMBER(10),
  ORDER_HEADER_ID         NUMBER(10),
  SITE_ID                 NUMBER(10),
  BILLING_ID              VARCHAR2(15 BYTE),
  SYSTEM                  VARCHAR2(10 BYTE),
  CUSTOMER_REQUIRED_DATE  DATE,
  ACTIVE                  CHAR(1 BYTE),
  CREATED_BY              NUMBER(12),
  CREATED_DATE            DATE,
  MODIFIED_BY             NUMBER(12),
  MODIFIED_DATE           DATE
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          512K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE QUOTE_SITE
(
  QUOTE_SITE_ID           NUMBER(10)            NOT NULL,
  SITE_ID                 NUMBER(10),
  QUOTE_HEADER_ID         NUMBER(10),
  ACTIVE                  CHAR(1 BYTE),
  CREATED_BY              VARCHAR2(50 BYTE),
  CREATED_DATE            DATE,
  MODIFIED_BY             VARCHAR2(50 BYTE),
  MODIFIED_DATE           DATE,
  RFO_VALIDATED           CHAR(1 BYTE),
  MODIFIED_FLAG           VARCHAR2(1 BYTE)      DEFAULT 'N',
  NOTES                   VARCHAR2(1024 BYTE),
  CUSTOMER_REQUIRED_DATE  DATE,
  CUSTOMER_AGREED_DATE    DATE
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          3M
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;

CREATE TABLE ACCESS_QREF
(
  ACCESS_QREF_ID                NUMBER          NOT NULL,
  QUOTE_SITE_ID                 NUMBER,
  ACCESS_QREF                   VARCHAR2(255 BYTE),
  PRICING_STATUS                VARCHAR2(255 BYTE),
  ACCESS_SPEED                  VARCHAR2(255 BYTE),
  SUPPLIER                      VARCHAR2(255 BYTE),
  LEAD_TIME                     VARCHAR2(255 BYTE),
  PORT_SPEED                    VARCHAR2(255 BYTE),
  ONE_TIME_CHARGE               NUMBER(10,2),
  RECURRING_CHARGE              NUMBER(10,2),
  CREATED_BY                    NUMBER(12),
  CREATED_DATE                  DATE,
  MODIFIED_BY                   NUMBER(12),
  MODIFIED_DATE                 DATE,
  ACTIVE                        CHAR(1 BYTE),
  PORT_SPEED_VALUE              NUMBER,
  PORT_UOM                      VARCHAR2(255 BYTE),
  ACCESS_SPEED_VALUE            NUMBER,
  ACCESS_UOM                    VARCHAR2(255 BYTE),
  ACCESS_PRODUCT_TYPE           VARCHAR2(255 BYTE),
  ACCESS_TECHNOLOGY             VARCHAR2(255 BYTE),
  SUPPLIER_PRODUCT_NAME         VARCHAR2(255 BYTE),
  GPOP_NODE                     VARCHAR2(255 BYTE),
  DISTANCE_GPOP                 VARCHAR2(255 BYTE),
  APOP_NODE                     VARCHAR2(255 BYTE),
  DISTANCE_APOP                 VARCHAR2(255 BYTE),
  TERM                          NUMBER,
  LEG_ID                        VARCHAR2(255 BYTE),
  PAIR_ID                       NUMBER,
  EXPIRY_DATE_TIME_ZONE         VARCHAR2(255 BYTE),
  TARIFF_ZONE_NAME              VARCHAR2(255 BYTE),
  NO_OF_COPPER_PAIRS            NUMBER,
  CIRCUIT_INTERFACE             VARCHAR2(255 BYTE),
  AUTO_PRICED_FLAG              CHAR(1 BYTE),
  BUDGETARY_PRICED_FLAG         CHAR(1 BYTE),
  INTERFACE_TYPE                VARCHAR2(255 BYTE),
  FRAMING_DETAILS               VARCHAR2(255 BYTE),
  CONNECTOR                     VARCHAR2(255 BYTE),
  INSTALL_COST                  NUMBER(10,2),
  SUPPLIER_COST                 NUMBER(10,2),
  BACKHAUL_COST                 NUMBER(10,2),
  LOCAL_TAIL_COST               NUMBER(10,2),
  COST_ACCESS_CURRENCY          VARCHAR2(255 BYTE),
  RESILIENCY_FLAG               CHAR(1 BYTE),
  COMMENTS                      VARCHAR2(255 BYTE),
  NNI_FLAG                      VARCHAR2(255 BYTE),
  SUPPORT_24X7                  VARCHAR2(255 BYTE),
  SENT_TO_APE                   CHAR(1 BYTE),
  MONTHLY_COST                  NUMBER(10,2),
  ACCESS_TYPE                   VARCHAR2(255 BYTE),
  EXPIRY_DATE                   DATE,
  APOP_FLAG                     VARCHAR2(255 BYTE),
  PORT_STATUS                   VARCHAR2(255 BYTE),
  GPOP_ID                       VARCHAR2(255 BYTE),
  APOP_ID                       VARCHAR2(255 BYTE),
  PORT_SPEED_AVAIL_STATUS       VARCHAR2(255 BYTE),
  METHOD                        VARCHAR2(255 BYTE),
  AGGREGATOR_QUOTE_LINE_ID      NUMBER(10),
  GPOP                          VARCHAR2(255 BYTE),
  ENCAPSULATION                 VARCHAR2(255 BYTE),
  GUARANTEED_SPEED              VARCHAR2(255 BYTE),
  TIME_TO_DELIVER               VARCHAR2(255 BYTE),
  ISP_ADDRESSING                VARCHAR2(255 BYTE),
  MONTHLY_RECURRING_CHARGE      NUMBER(10,2),
  NON_RECURRING_CHARGE          NUMBER(10,2),
  ACCESS_AVAILABILITY           VARCHAR2(255 BYTE),
  SERVICE_CATAGORY              VARCHAR2(255 BYTE),
  OTHER_SERVICE_NOTES           VARCHAR2(255 BYTE),
  ADDITIONAL_CHARGES            NUMBER(10,2),
  TRANACTION_TYPE               VARCHAR2(255 BYTE),
  HVPN_ACCESS_TECHNOLOGY        VARCHAR2(255 BYTE),
  PRICING_ID                    VARCHAR2(255 BYTE),
  SERVICE_ID                    VARCHAR2(255 BYTE),
  COPPER_DETAILS                VARCHAR2(255 BYTE),
  COPPER_SERVICE_ID             VARCHAR2(255 BYTE),
  RFA_NOTES                     VARCHAR2(255 BYTE),
  MRC                           NUMBER(10,2),
  NRC                           NUMBER(10,2),
  TARRIF_ZONE                   VARCHAR2(255 BYTE),
  SUPPORT_24_7                  VARCHAR2(255 BYTE),
  RFO_NOTES                     VARCHAR2(500 BYTE),
  COPPER_PAIR                   NUMBER(15),
  ETHERNET_PHASE_ATTRIBUTE      VARCHAR2(255 BYTE),
  NON_STD_QREF_FLAG             VARCHAR2(255 BYTE),
  NETWORK_TYPE                  VARCHAR2(255 BYTE),
  PARTNER_NAME                  VARCHAR2(255 BYTE),
  WORKFLOW_STATUS               VARCHAR2(255 BYTE),
  APE_COMMENTS                  VARCHAR2(255 BYTE),
  STAFF_MEMBER_NAME             VARCHAR2(255 BYTE),
  STAFF_MEMBER_EMAIL            VARCHAR2(255 BYTE),
  RESILIENCY                    VARCHAR2(255 BYTE),
  QREF_TYPE                     VARCHAR2(255 BYTE),
  CEASE_CHARGES                 VARCHAR2(255 BYTE),
  GPOP_CODE                     VARCHAR2(255 BYTE),
  APOP_CODE                     VARCHAR2(255 BYTE),
  PTP_MRC                       NUMBER(10,2),
  PTP_NRC                       NUMBER(10,2),
  RBPURL                        VARCHAR2(255 BYTE),
  SERVICE_VARIANT               VARCHAR2(300 BYTE),
  ACTION_CODE                   VARCHAR2(255 BYTE),
  OPTM_QREF                     VARCHAR2(50 BYTE),
  OPTM_RENTAL_COST_Y1           NUMBER(10,2),
  OPTM_RENTAL_COST_Y2           NUMBER(10,2),
  OPTM_RENTAL_COST_Y3           NUMBER(10,2),
  OPTM_RENTAL_COST_Y4           NUMBER(10,2),
  OPTM_RENTAL_COST_Y5           NUMBER(10,2),
  OPTM_RENTAL_PRICE_Y1          NUMBER(10,2),
  OPTM_RENTAL_PRICE_Y2          NUMBER(10,2),
  OPTM_RENTAL_PRICE_Y3          NUMBER(10,2),
  OPTM_RENTAL_PRICE_Y4          NUMBER(10,2),
  OPTM_RENTAL_PRICE_Y5          NUMBER(10,2),
  OPTM_INSTALL_Y1               NUMBER(10,2),
  INSTALL_PERCENT_REDUCTION_Y1  NUMBER(10,2),
  PERCENT_REDUCTION_COST_Y1     NUMBER(10,2),
  PERCENT_REDUCTION_COST_Y2     NUMBER(10,2),
  PERCENT_REDUCTION_COST_Y3     NUMBER(10,2),
  PERCENT_REDUCTION_COST_Y4     NUMBER(10,2),
  PERCENT_REDUCTION_COST_Y5     NUMBER(10,2),
  TPE_REF_ID                    VARCHAR2(100 BYTE),
  SUPPLIER_REF_ID               VARCHAR2(100 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          72M
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE CPE_QREF
(
  CPE_QREF_ID                 NUMBER(10)        NOT NULL,
  QUOTE_SITE_ID               NUMBER(10),
  CREATED_BY                  NUMBER(12),
  CREATED_DATE                DATE,
  MODIFIED_BY                 NUMBER(12),
  MODIFIED_DATE               DATE,
  CPE_QREF                    VARCHAR2(100 BYTE),
  PRI_SUPPLIER_NAME           VARCHAR2(100 BYTE),
  PRI_STATUS                  VARCHAR2(30 BYTE),
  PRI_ONE_TIME_CHARGE         NUMBER(10,2),
  PRI_RECURRING_CHARGE        NUMBER(10,2),
  EXPIRY_DATE                 DATE,
  CPE_LEAD_TIME               VARCHAR2(20 BYTE),
  CPE_LEAD_TIME_STATUS        VARCHAR2(30 BYTE),
  COMMENTS                    VARCHAR2(255 BYTE),
  SEC_SUPPLIER_NAME           VARCHAR2(100 BYTE),
  SEC_STATUS                  VARCHAR2(100 BYTE),
  SEC_ONE_TIME_CHARGE         NUMBER(10,2),
  SEC_RECURRING_CHARGE        NUMBER(10,2),
  SECONDARY_CPE_QREF          VARCHAR2(100 BYTE),
  PRI_SSP_BID_REF_NO          VARCHAR2(50 BYTE),
  SEC_SSP_BID_REF_NO          VARCHAR2(50 BYTE),
  PRI_OFFER_VALID_DATE        DATE,
  SEC_OFFER_VALID_DATE        DATE,
  PRI_ADDITIONAL_CHARGES      NUMBER(15,2),
  PRI_CEASE_CHARGES           NUMBER(15,2),
  PRI_CEASE_QREF_ID           VARCHAR2(20 BYTE),
  PRI_CEASE_SUPPLIER_NAME     VARCHAR2(100 BYTE),
  SEC_CEASE_CHARGES           NUMBER(15,2),
  SEC_ADDITIONAL_CHARGES      NUMBER(15,2),
  SEC_CEASE_QREF_ID           VARCHAR2(20 BYTE),
  SEC_CEASE_SUPPLIER_NAME     VARCHAR2(100 BYTE),
  REQUEST_STATUS              VARCHAR2(50 BYTE),
  SITE_ERROR                  VARCHAR2(255 BYTE),
  PRI_PRICING_ERROR           VARCHAR2(255 BYTE),
  PRI_ONE_TIME_OVERRIDE_COST  NUMBER(10,2),
  PRI_MAINT_OVERRIDE_COST     NUMBER(10,2),
  PRI_KIT_OVERRIDE_COST       NUMBER(10,2),
  SEC_PRICING_ERROR           VARCHAR2(255 BYTE),
  SEC_ONE_TIME_OVERRIDE_COST  NUMBER(10,2),
  SEC_MAINT_OVERRIDE_COST     NUMBER(10,2),
  SEC_KIT_OVERRIDE_COST       NUMBER(10,2),
  KIT_OVERRIDE_FLAG           VARCHAR2(3 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          832K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE GENERIC_CAVEAT
(
  GENERIC_CAVEAT_ID  NUMBER                     NOT NULL,
  QUOTE_SITE_ID      NUMBER,
  CAVEAT_ID          NUMBER,
  DESCRIPTION        VARCHAR2(2000 BYTE),
  CAVEATED_ON        DATE,
  CREATED_BY         NUMBER,
  CREATED_DATE       DATE,
  MODIFIED_BY        NUMBER,
  MODIFIED_DATE      DATE,
  UPDATED_ON         DATE,
  ACTIVE             CHAR(1 BYTE),
  ACCESS_CAVEAT      VARCHAR2(20 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          21M
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE PRODUCT_SELECTION
(
  PRODUCT_SELECTION_ID  NUMBER(10)              NOT NULL,
  QUOTE_ID              NUMBER(10),
  PROPOSITION_ID        NUMBER(10),
  SUB_PROPOSITION_ID    NUMBER(10),
  PRODUCT_ID            NUMBER(10),
  CREATED_BY            VARCHAR2(50 BYTE),
  CREATED_DATE          DATE,
  MODIFIED_BY           VARCHAR2(50 BYTE),
  MODIFIED_DATE         DATE,
  PROPOSITION_NAME      VARCHAR2(100 BYTE),
  SUB_PROPOSITION_NAME  VARCHAR2(100 BYTE),
  PRODUCT_NAME          VARCHAR2(100 BYTE),
  QUOTE_HEADER_ID       NUMBER(10),
  SITE_ID               NUMBER(10),
  ACTIVE                CHAR(1 BYTE),
  QUOTE_SITE_ID         NUMBER(10),
  ORDER_TYPE            VARCHAR2(255 BYTE),
  STATUS                VARCHAR2(255 BYTE),
  ORDER_SITE_DETAIL_ID  NUMBER(10),
  QUOTE_STATUS          VARCHAR2(255 BYTE),
  ORDER_STATUS          VARCHAR2(255 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          3M
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE PRODUCT_VALIDATION_RESULTS
(
  PROD_VALIDAT_RESULTS_ID  NUMBER(10)           NOT NULL,
  QUOTE_SITE_ID            NUMBER(10),
  ACTIVE                   VARCHAR2(1 BYTE)     DEFAULT 'Y'
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE QUOTE_PRICE_LIST
(
  QUOTE_PRICE_LIST_ID   NUMBER(10)              NOT NULL,
  QUOTE_HEADER_ID       NUMBER(10),
  PRICE_LIST_ID         NUMBER(6),
  CREATED_BY            VARCHAR2(50 BYTE),
  CREATED_DATE          DATE,
  MODIFIED_BY           VARCHAR2(50 BYTE),
  MODIFIED_DATE         DATE,
  PRICE_LIST_NAME       VARCHAR2(50 BYTE),
  SITE_ID               NUMBER(10),
  PRODUCT_ID            NUMBER(10),
  PRODUCT_NAME          VARCHAR2(100 BYTE),
  PRODUCT_SELECTION_ID  NUMBER(10)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          2M
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;

CREATE TABLE ACCESS_CAVEAT
(
  ACCESS_CAVEAT_ID  NUMBER                      NOT NULL,
  ACCESS_QREF_ID    NUMBER,
  CAVEAT_ID         NUMBER,
  DESCRIPTION       VARCHAR2(2000 BYTE),
  CAVEATED_ON       DATE,
  CREATED_BY        NUMBER(12),
  CREATED_DATE      DATE,
  MODIFIED_BY       NUMBER(12),
  MODIFIED_DATE     DATE,
  UPDATED_ON        DATE,
  ACTIVE            CHAR(1 BYTE),
  ACCESS_CAVEAT     VARCHAR2(255 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          480M
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE BID_DETAIL
(
  BID_DETAIL_ID                  NUMBER         NOT NULL,
  QUOTE_HEADER_ID                NUMBER,
  SITE_ID                        NUMBER,
  PRODUCT_ID                     NUMBER,
  PRODUCT_NAME                   VARCHAR2(100 BYTE),
  REQUEST_NAME                   VARCHAR2(100 BYTE),
  CUSTOMER_COMMITTED             DATE,
  CUSTOMER_REQUESTED             DATE,
  VOLUME_FOR_FEATURES            VARCHAR2(100 BYTE),
  TIER                           VARCHAR2(50 BYTE),
  BID_MANAGER_NAME               VARCHAR2(100 BYTE),
  WIN_CHANCE                     VARCHAR2(100 BYTE),
  CUSTOMER_VALUE                 VARCHAR2(100 BYTE),
  NSOC                           VARCHAR2(100 BYTE),
  SIEBEL_ID                      VARCHAR2(30 BYTE),
  IPN_SPOC_NAME                  VARCHAR2(100 BYTE),
  COMMENTS                       VARCHAR2(255 BYTE),
  NON_STANDARD_FLAG              CHAR(1 BYTE),
  ACTIVE                         CHAR(1 BYTE),
  CREATED_BY                     NUMBER(12),
  CREATED_DATE                   DATE,
  MODIFIED_BY                    NUMBER(12),
  MODIFIED_DATE                  DATE,
  NO_OF_ISDN_CHANNELS            NUMBER(3),
  DISCOUNT_APPROVED_REJECTED_BY  VARCHAR2(25 BYTE),
  BID_MANAGER_EMAIL_ID           VARCHAR2(50 BYTE),
  SALES_USER_REASON              VARCHAR2(100 BYTE),
  BID_MANAGER_REASON             VARCHAR2(100 BYTE),
  PRODUCT_SELECTION_ID           NUMBER(10),
  APPROVAL_REF_NUMBER            VARCHAR2(100 BYTE),
  ORDER_CREATED                  VARCHAR2(50 BYTE),
  CURRENCY                       VARCHAR2(50 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          2M
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE BID_DETAIL_AS_IS
(
  BID_DETAIL_ID                  NUMBER         NOT NULL,
  QUOTE_HEADER_ID                NUMBER,
  SITE_ID                        NUMBER,
  PRODUCT_ID                     NUMBER,
  PRODUCT_NAME                   VARCHAR2(100 BYTE),
  REQUEST_NAME                   VARCHAR2(100 BYTE),
  CUSTOMER_COMMITTED             DATE,
  CUSTOMER_REQUESTED             DATE,
  VOLUME_FOR_FEATURES            VARCHAR2(100 BYTE),
  TIER                           VARCHAR2(50 BYTE),
  BID_MANAGER_NAME               VARCHAR2(100 BYTE),
  WIN_CHANCE                     VARCHAR2(100 BYTE),
  CUSTOMER_VALUE                 VARCHAR2(100 BYTE),
  NSOC                           VARCHAR2(100 BYTE),
  SIEBEL_ID                      VARCHAR2(30 BYTE),
  IPN_SPOC_NAME                  VARCHAR2(100 BYTE),
  COMMENTS                       VARCHAR2(255 BYTE),
  NON_STANDARD_FLAG              CHAR(1 BYTE),
  ACTIVE                         CHAR(1 BYTE),
  CREATED_BY                     NUMBER(12),
  CREATED_DATE                   DATE,
  MODIFIED_BY                    NUMBER(12),
  MODIFIED_DATE                  DATE,
  NO_OF_ISDN_CHANNELS            NUMBER(3),
  DISCOUNT_APPROVED_REJECTED_BY  VARCHAR2(25 BYTE),
  BID_MANAGER_EMAIL_ID           VARCHAR2(50 BYTE),
  SALES_USER_REASON              VARCHAR2(100 BYTE),
  BID_MANAGER_REASON             VARCHAR2(100 BYTE),
  PRODUCT_SELECTION_ID           NUMBER(10),
  APPROVAL_REF_NUMBER            VARCHAR2(100 BYTE),
  ORDER_CREATED                  VARCHAR2(50 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE BID_REQUEST_STATUS
(
  BID_REQUEST_STATUS_ID   NUMBER,
  QUOTE_HEADER_ID         NUMBER,
  SITE_ID                 NUMBER,
  PRODUCT_ID              NUMBER,
  PRODUCT_NAME            VARCHAR2(100 BYTE),
  SPECIAL_BID_NUMBER      VARCHAR2(10 BYTE),
  BID_STATUS              VARCHAR2(20 BYTE),
  ONE_TIME_INSTALL_COST   VARCHAR2(20 BYTE),
  DATA_BUILD_DONE         VARCHAR2(5 BYTE),
  BID_EXPIRY_DATE         DATE,
  MONTHLY_RECURRING_COST  VARCHAR2(20 BYTE),
  CREATED_BY              NUMBER(12),
  CREATED_DATE            DATE,
  MODIFIED_BY             NUMBER(12),
  MODIFIED_DATE           DATE,
  ACTIVE                  CHAR(1 BYTE),
  NON_STD_BID_ITEMS       VARCHAR2(100 BYTE),
  TPP_URL                 VARCHAR2(500 BYTE),
  ROW_ID                  NUMBER,
  ACTIVATION_DUE_DATE     DATE,
  NON_STD_COMP            VARCHAR2(100 BYTE),
  INSTRUCTIONS            VARCHAR2(200 BYTE),
  PRODUCT_SELECTION_ID    NUMBER(10),
  PROD_FRIENDLY_ID        NUMBER(10),
  FALLBACK_TYPE           VARCHAR2(20 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          2M
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE BID_REQUEST_STATUS_AS_IS
(
  BID_REQUEST_STATUS_ID   NUMBER,
  QUOTE_HEADER_ID         NUMBER,
  SITE_ID                 NUMBER,
  PRODUCT_ID              NUMBER,
  PRODUCT_NAME            VARCHAR2(100 BYTE),
  SPECIAL_BID_NUMBER      VARCHAR2(10 BYTE),
  BID_STATUS              VARCHAR2(20 BYTE),
  ONE_TIME_INSTALL_COST   VARCHAR2(20 BYTE),
  USERS_BUILD_DONE         VARCHAR2(5 BYTE),
  BID_EXPIRY_DATE         DATE,
  MONTHLY_RECURRING_COST  VARCHAR2(20 BYTE),
  CREATED_BY              NUMBER(12),
  CREATED_DATE            DATE,
  MODIFIED_BY             NUMBER(12),
  MODIFIED_DATE           DATE,
  ACTIVE                  CHAR(1 BYTE),
  NON_STD_BID_ITEMS       VARCHAR2(100 BYTE),
  TPP_URL                 VARCHAR2(500 BYTE),
  ROW_ID                  NUMBER,
  ACTIVATION_DUE_DATE     DATE,
  NON_STD_COMP            VARCHAR2(100 BYTE),
  INSTRUCTIONS            VARCHAR2(200 BYTE),
  PRODUCT_SELECTION_ID    NUMBER(10),
  PROD_FRIENDLY_ID        NUMBER(10),
  FALLBACK_TYPE           VARCHAR2(20 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE CPE_CAVEAT
(
  CPE_CAVEAT_ID  NUMBER(10)                     NOT NULL,
  CPE_CAVEAT     VARCHAR2(150 BYTE),
  DESCRIPTION    VARCHAR2(255 BYTE),
  CPE_QREF_ID    NUMBER(10),
  ACTIVE         CHAR(1 BYTE),
  CREATED_BY     NUMBER(12),
  CREATED_DATE   DATE,
  MODIFIED_BY    NUMBER(12),
  MODIFIED_DATE  DATE
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          256K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE EXPEDIO_RESPONSE
(
  EXP_ORDER_ID                NUMBER(10),
  EXPEDIO_REF_ID              VARCHAR2(12 BYTE),
  EXPEDIO_QUOTEVERSION        VARCHAR2(10 BYTE),
  SITE_ID                     NUMBER(10),
  PRODUCT_ID                  NUMBER(15),
  PRODUCT_NAME                VARCHAR2(60 BYTE),
  QUOTE_ID                    NUMBER(10),
  QUOTE_HEADER_ID             NUMBER(10),
  VERSION                     VARCHAR2(10 BYTE),
  MODIFIED_BY                 NUMBER(12),
  MODIFIED_DATE               DATE,
  REASON                      VARCHAR2(300 BYTE),
  STATUS                      VARCHAR2(60 BYTE),
  SUB_STATUS                  VARCHAR2(60 BYTE),
  COMPLETION_DATE             DATE,
  EXP_QUOTE_ID                VARCHAR2(30 BYTE),
  IFC_FLAG                    VARCHAR2(3 BYTE),
  ORDER_LINE_ITEM_ID          NUMBER,
  ORDER_LINE_ITEM_STATUS_KSU  VARCHAR2(15 BYTE),
  PRODUCT_SELECTION_ID        NUMBER(10),
  EXPEDIO_RESPONSE_ID         NUMBER
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          5M
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE LINE_ITEM
(
  LINE_ITEM_ID              NUMBER(10)          NOT NULL,
  QUOTE_HEADER_ID           NUMBER(10),
  VALUE                     VARCHAR2(255 BYTE),
  CURRENCY                  VARCHAR2(255 BYTE),
  AGGREGATE_PRICE           NUMBER(10,2),
  SITE_ID                   NUMBER(10),
  CREATED_BY                VARCHAR2(255 BYTE),
  CREATED_DATE              DATE,
  MODIFIED_BY               VARCHAR2(255 BYTE),
  MODIFIED_DATE             DATE,
  PRODUCT_ID                NUMBER(10),
  PRODUCT_NAME              VARCHAR2(255 BYTE),
  QUANTITY                  NUMBER(3)           DEFAULT 1,
  ACTIVE                    CHAR(1 BYTE),
  FALLBACK_TYPE             VARCHAR2(255 BYTE),
  PART_TYPE                 VARCHAR2(255 BYTE),
  PRICED                    CHAR(1 BYTE),
  NON_STD_FLAG              VARCHAR2(255 BYTE),
  ROW_ID                    NUMBER,
  QUOTE_SITE_SERVICE_ID     NUMBER(10),
  SCODE                     VARCHAR2(255 BYTE),
  PORT_AVAILABILITY_STATUS  VARCHAR2(255 BYTE),
  PKG_INSTANCE_ID           NUMBER(10),
  PRODUCT_SELECTION_ID      NUMBER(10),
  ACTION_CODE               VARCHAR2(255 BYTE),
  PROD_FRIENDLY_ID          NUMBER(10),
  CLASSIC_ELEMENT_ID        VARCHAR2(255 BYTE),
  CLASSIC_ELEMENT_NAME      VARCHAR2(255 BYTE),
  PARENT_LINE_ITEM_ID       NUMBER(10),
  PROD_RULE_ID              NUMBER(10),
  PROD_RULE_NAME            VARCHAR2(255 BYTE),
  MAJOR_ACTION              VARCHAR2(255 BYTE),
  MINOR_ACTION              VARCHAR2(255 BYTE),
  CATEGORY_ID               NUMBER(10),
  CPE_PROD_KEY              NUMBER(10)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          80M
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE LINE_ITEM_DETAIL
(
  LINE_ITEM_DETAIL_ID    NUMBER(10)             NOT NULL,
  LINE_ITEM_ID           NUMBER(10),
  VALUE                  VARCHAR2(255 BYTE),
  ACTIVE                 CHAR(1 BYTE),
  CREATED_BY             VARCHAR2(50 BYTE),
  CREATED_DATE           DATE,
  MODIFIED_BY            VARCHAR2(50 BYTE),
  MODIFIED_DATE          DATE,
  ATTRIBUTE_MAPPING_ID   NUMBER(6),
  QUANTITY               NUMBER(7),
  NON_STD_FLAG           VARCHAR2(1 BYTE),
  LINE_ITEM_DESCRIPTION  VARCHAR2(100 BYTE),
  ROW_ID                 NUMBER(10),
  ACTION_CODE            VARCHAR2(20 BYTE),
  PRICED_FLAG            CHAR(1 BYTE),
  BFG_INVENTORY_ID       NUMBER(10),
  CLASSIC_ELEMENT_ID     VARCHAR2(255 BYTE),
  CLASSIC_ELEMENT_NAME   VARCHAR2(255 BYTE),
  NO_VOICE_CHANNEL       NUMBER(7),
  MAX_QTY                NUMBER(9)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          504M
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE ORDER_LINE_ITEM
(
  ORDER_LINE_ITEM_ID     NUMBER(10),
  ORDER_HEADER_ID        NUMBER(10),
  CURRENCY               VARCHAR2(10 BYTE),
  PRODUCT_ID             NUMBER(10),
  PRODUCT_NAME           VARCHAR2(100 BYTE),
  SITE_ID                NUMBER(10),
  ACTIVE                 CHAR(1 BYTE),
  CREATED_BY             NUMBER(12),
  CREATED_DATE           DATE,
  MODIFIED_BY            NUMBER(12),
  MODIFIED_DATE          DATE,
  FALLBACK_TYPE          VARCHAR2(20 BYTE),
  QUANTITY               NUMBER(3)              DEFAULT 1,
  ROW_ID                 NUMBER,
  QUOTE_SITE_SERVICE_ID  NUMBER(16,2),
  ACTION_CODE            VARCHAR2(20 BYTE),
  PRODUCT_SELECTION_ID   NUMBER(10),
  SCODE                  VARCHAR2(20 BYTE),
  PROD_FRIENDLY_ID       NUMBER(10),
  CLASSIC_ELEMENT_ID     VARCHAR2(255 BYTE),
  CLASSIC_ELEMENT_NAME   VARCHAR2(255 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          6M
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE ORDER_LINE_ITEM_DETAIL
(
  ORDER_LINE_ITEM_DET_ID  NUMBER(10),
  ORDER_LINE_ITEM_ID      NUMBER(10),
  ATTRIBUTE_MAPPING_ID    NUMBER(6),
  VALUE                   VARCHAR2(100 BYTE),
  ACTIVE                  CHAR(1 BYTE),
  CREATED_BY              NUMBER(12),
  CREATED_DATE            DATE,
  MODIFIED_BY             NUMBER(12),
  MODIFIED_DATE           DATE,
  QUANTITY                NUMBER(5),
  ROW_ID                  NUMBER(10),
  ACTION_CODE             VARCHAR2(20 BYTE),
  CLASSIC_ELEMENT_ID      VARCHAR2(255 BYTE),
  CLASSIC_ELEMENT_NAME    VARCHAR2(255 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          29M
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE PORT_IP_ROUTES
(
  PORT_IP_ROUTE_ID     NUMBER(16),
  ORDER_LINE_ITEM_ID   NUMBER(10),
  ROW_ID               NUMBER(10),
  SERIAL_NUMBER        NUMBER(10),
  SUBNET_ADDRESS       VARCHAR2(16 BYTE),
  SUBNET_MASK          VARCHAR2(16 BYTE),
  NEXT_HOP_IP_ADDRESS  VARCHAR2(16 BYTE),
  FALLBACK_TYPE        VARCHAR2(10 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE PRICE_LINE_ITEM_DETAIL
(
  PRICE_LINE_ITEM_ID           NUMBER(6)        NOT NULL,
  LINE_ITEM_ID                 NUMBER(10),
  PRICE                        NUMBER(15,2),
  CURRENCY                     VARCHAR2(10 BYTE),
  ACTIVE                       CHAR(1 BYTE),
  CREATED_BY                   NUMBER(12),
  CREATED_DATE                 DATE,
  MODIFIED_BY                  NUMBER(12),
  MODIFIED_DATE                DATE,
  ATTRIBUTE_MAPPING_ID         NUMBER(6),
  CHARGE_TYPE                  VARCHAR2(30 BYTE),
  EXTERNAL_QREF                VARCHAR2(50 BYTE),
  DISCOUNT                     NUMBER(10,2),
  DISCOUNT_TYPE                VARCHAR2(20 BYTE),
  PRICE_LINE_ITEM_DETAIL_ID    NUMBER(10),
  PPSR_ID                      NUMBER,
  ONETIME_PORT_DISCOUNT        NUMBER(10,2),
  RECURRING_PORT_DISCOUNT      NUMBER(10,2),
  ROW_ID                       NUMBER,
  RENT_PRICE                   NUMBER(10,2),
  REQUEST_STATUS               VARCHAR2(50 BYTE),
  ERROR_DESCRIPTION            VARCHAR2(100 BYTE),
  PRIMARY_PRICING_STATUS       VARCHAR2(50 BYTE),
  SECONDARY_PRICING_STATUS     VARCHAR2(50 BYTE),
  QUANTITY                     NUMBER,
  LINE_ITEM_DETAIL_ID          NUMBER(10),
  NET_PRICE                    NUMBER(10,2),
  PTP_EUP                      VARCHAR2(5 BYTE),
  APPROVED_DISC                NUMBER(10,2),
  PTP_EUP_ID                   NUMBER(10),
  ACTION_CODE                  VARCHAR2(20 BYTE),
  PLN_INVENTORY_ID             NUMBER(10),
  DISCOUNT_REQUESTED           NUMBER(10,5),
  DISCOUNT_PROPOSED            NUMBER(10,5),
  PRICE_TYPE_ID                NUMBER(5),
  RECURRING_FLAG               VARCHAR2(1 BYTE),
  CLASSIC_ELEMENT_ID           VARCHAR2(255 BYTE),
  CLASSIC_ELEMENT_NAME         VARCHAR2(255 BYTE),
  PPSR_PRICE_LINE_ID           VARCHAR2(60 BYTE),
  PPSR_PRICE_LINE_DESCRIPTION  VARCHAR2(255 BYTE),
  BASIS_FOR_CHARGE             VARCHAR2(50 BYTE),
  BILLING_START_DATE           DATE,
  BILLING_END_DATE             DATE,
  BILLING_ID                   NUMBER(9),
  BILLING_REFERENCE_NAME       VARCHAR2(255 BYTE),
  TARIFF_NAME                  VARCHAR2(255 BYTE),
  PRICE_POINT_ID               VARCHAR2(255 BYTE),
  PRICE_POINT_NAME             VARCHAR2(255 BYTE),
  PRICE_POINT_VERSION          VARCHAR2(50 BYTE),
  REGION                       VARCHAR2(55 BYTE),
  COUNTRY                      VARCHAR2(55 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          88M
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE PRODUCT_VALIDATION_RESPONSE
(
  PROD_VALIDAT_RESPONSE_ID  NUMBER(10)          NOT NULL,
  PROD_VALIDAT_RESULTS_ID   NUMBER(10),
  STATUS                    VARCHAR2(20 BYTE),
  REMARKS                   VARCHAR2(255 BYTE),
  BEAN_PROPERTY_PATH        VARCHAR2(1000 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          128K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE PRICE_LN_USG_CHRG_DETAILS
(
  PLN_USG_CHARGE_ID               NUMBER,
  LINE_ITEM_ID                    NUMBER(10),
  FIXED_USAGE_CHARGE              NUMBER(10,5),
  STANDARD_USAGE_CHARGE           NUMBER(10,5),
  MIN_USAGE_CHARGE                NUMBER(10,5),
  MAX_USAGE_CHARGE                NUMBER(10,5),
  FIXED_USAGE_CHARGE_NETPRICE     NUMBER(10,5),
  STANDARD_USAGE_CHARGE_NETPRICE  NUMBER(10,5),
  MIN_USAGE_CHARGE_NETPRICE       NUMBER(10,5),
  MAX_USAGE_CHARGE_NETPRICE       NUMBER(10,5),
  PRICE_LINE_ITEM_DETAIL_ID       NUMBER(10),
  CREATED_BY                      VARCHAR2(50 BYTE) NOT NULL,
  CREATED_DATE                    DATE          NOT NULL
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE PRICE_LN_USG_CHRG_DETAILS_ASIS
(
  PLN_USG_CHARGE_ID               NUMBER,
  LINE_ITEM_ID                    NUMBER(10),
  FIXED_USAGE_CHARGE              NUMBER(10,5),
  STANDARD_USAGE_CHARGE           NUMBER(10,5),
  MIN_USAGE_CHARGE                NUMBER(10,5),
  MAX_USAGE_CHARGE                NUMBER(10,5),
  FIXED_USAGE_CHARGE_NETPRICE     NUMBER(10,5),
  STANDARD_USAGE_CHARGE_NETPRICE  NUMBER(10,5),
  MIN_USAGE_CHARGE_NETPRICE       NUMBER(10,5),
  MAX_USAGE_CHARGE_NETPRICE       NUMBER(10,5),
  PRICE_LINE_ITEM_DETAIL_ID       NUMBER(10),
  CREATED_BY                      VARCHAR2(50 BYTE) NOT NULL,
  CREATED_DATE                    DATE          NOT NULL
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;

CREATE TABLE BFG_INVENTORY_DETAIL
(
  BFG_INVENTORY_DETAIL_ID  NUMBER,
  LINE_ITEM_ID             NUMBER(16),
  BFG_ID_1                 VARCHAR2(32 BYTE),
  BFG_ID_2                 VARCHAR2(32 BYTE),
  BFG_ID_3                 VARCHAR2(32 BYTE),
  BFG_ID_4                 VARCHAR2(32 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          1M
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE COST_DETAIL
(
  COST_DETAIL_ID             NUMBER(15),
  PRICE_LINE_ITEM_DETAIL_ID  NUMBER(10),
  COST                       NUMBER(10,2),
  COST_TYPE                  VARCHAR2(50 BYTE),
  CURRENCY                   VARCHAR2(10 BYTE),
  CREATED_BY                 NUMBER(12),
  CREATED_DATE               DATE,
  MODIFIED_BY                NUMBER(12),
  MODIFIED_DATE              DATE
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          62M
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;

-----------------------------------------------------------------------
  -- END: DDL for Tables
-----------------------------------------------------------------------

-----------------------------------------------------------------------
  -- START: DDL for Indexes
-----------------------------------------------------------------------

CREATE INDEX IDX_UMUSER_UMTEAMID_FK ON UM_USER
(UM_TEAM_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX IDX_SITELOG_BATCHID_FK ON SITE_LOG
(BATCH_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          768K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX IDX_LIITEMDET_LIITEMIDASIS_FK ON QUOTE_LINE_ITEM_DETAIL_AS_IS
(LINE_ITEM_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          16M
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX IDX_LIITEMDETASIS_ATTRMAPID_FK ON QUOTE_LINE_ITEM_DETAIL_AS_IS
(ATTRIBUTE_MAPPING_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          27M
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;

CREATE INDEX IDX_LINEITEM_AS_IS_QUOTHEADER ON QUOTE_LINE_ITEM_AS_IS
(QUOTE_HEADER_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          4M
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX IDX_LINEITEM_AS_IS_SITEID_FK ON QUOTE_LINE_ITEM_AS_IS
(SITE_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          4M
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX INDX_PRODUCT_MASTER_DETAILS ON PRODUCT_MASTER_DETAILS
(PARENT_GROUP_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;



CREATE INDEX FUNIDX_PRODUCT_MASTER_DETAILS ON PRODUCT_MASTER_DETAILS
(UPPER("PRODUCT_NAME"))
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX INDX_PRODUCT_MASTER ON PRODUCT_MASTER
(PARENT_GROUP_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;



CREATE INDEX FUNIDX_PRODUCT_MASTER ON PRODUCT_MASTER
(UPPER("PRODUCT_NAME"))
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;




CREATE INDEX IDX_PRLITEMDET_ATTRMAPID_AS_IS ON PRICE_LINE_ITEM_DETAIL_AS_IS
(ATTRIBUTE_MAPPING_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX IDX_PRLITMDET_ASIS_LINITMID ON PRICE_LINE_ITEM_DETAIL_AS_IS
(LINE_ITEM_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          4M
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX IDX_PRLINITMDET_PRLNITMID_ASIS ON PRICE_LINE_ITEM_DETAIL_AS_IS
(PRICE_LINE_ITEM_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          3M
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;




CREATE INDEX IDX_PYMHDS_BTSUBDRYID_FK ON PAYMENT_METHODS
(BT_SUBSIDIARY_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX IDX_OLID_ATTMAPID_ASIS ON ORDER_LINE_ITEM_DETAIL_AS_IS
(ATTRIBUTE_MAPPING_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          9M
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX IDX_OLID_OLIID_ASIS ON ORDER_LINE_ITEM_DETAIL_AS_IS
(ORDER_LINE_ITEM_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          7M
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;



CREATE INDEX IDX_OLINEITEM_SITEID_ASIS ON ORDER_LINE_ITEM_AS_IS
(SITE_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          3M
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX IDX_OLNITM_QTHDRID_ASIS ON ORDER_LINE_ITEM_AS_IS
(QUOTE_HEADER_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          3M
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX IDX_FK_ATTACHMENT_ID_FK ON ORDER_ATTACHMENT_DETAIL
(ATTACHMENT_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX IDX_CTPRD_QUOTEHDRID ON CUSTOMER_PRODUCT
(QUOTE_HEADER_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;




CREATE INDEX IDX_COSTDET_PLID_ASIS ON COST_DETAIL_AS_IS
(PRICE_LINE_ITEM_DETAIL_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          2M
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX IDX_C_CONTACTTYPE_FK ON CONTACT
(CONTACT_TYPE)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX IDX_CLASSIC_ITEM_ATTR ON CLASSIC_ITEM
(LINEITEM, ITEM_ATTRIBUTE)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;



CREATE INDEX IDX_QHID_BUNDLE_SELECTION ON BUNDLE_SELECTION
(QUOTE_HEADER_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          384K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX IDX_ATTRVALUE_ATTR_FK ON ATTRIBUTE_VALUE
(ATTRIBUTE_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;



CREATE INDEX IDX_ACCQRF_QSITEID_ASIS ON ACCESS_QREF_AS_IS
(QUOTE_SITE_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          128K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;

CREATE INDEX IDX_VPNCUST_CUSTID_FK ON VPN_CUSTOMERS
(CUSTOMER_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX IDX_VPN_CUSTOMERID_FK ON VPN
(CUSTOMER_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          128K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX IDX_QS_QUOTEHDRID_FK ON QUOTE_STATUS
(QUOTE_HEADER_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          384K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX IDX_QS_QUOTEID_FK ON QUOTE_STATUS
(QUOTE_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX IDX_QUOTE_SITE_SERVICE ON QUOTE_SITE_SERVICE
(QUOTE_HEADER_ID, SITE_ID, SERVICE_NAME)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          192K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;



CREATE INDEX IDX_QUOTEHEADER_QUOTEID_FK ON QUOTE_HEADER
(QUOTE_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          576K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX IDX_QUOTE_CUSTOMERID_FK ON QUOTE
(CUSTOMER_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          576K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX IDX_PLI_PRD_FRNDLY_ID_FK ON PRICE_LINE_ITEM
(PROD_FRIENDLY_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;



CREATE INDEX IDX_ATTRIBUTE_MAPPINID_FK ON EDCA_INTERFACE_MAPPING
(ATTRIBUTE_MAPPING_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX IDX_CUSTOMERPRICELST_PRLTID_FK ON CUSTOMER_PRICE_LIST
(PRICE_LIST_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;



CREATE INDEX IDX_CUSTOMERPRICELST_CUSTID_FK ON CUSTOMER_PRICE_LIST
(CUSTOMER_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX IDX_CUSTOMERCNCT_CONTACTID_FK ON CUSTOMER_CONTACT
(CONTACT_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX IDX_CUSTOMERCNCT_CUSTOMERID_FK ON CUSTOMER_CONTACT
(CUSTOMER_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;




CREATE INDEX IDX_CUSTOMER_SALESCHANNELID_FK ON CUSTOMER
(SALES_CHANNEL_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;




CREATE INDEX IDX_CUSTOMER_BTSUBSIDIARYID_FK ON CUSTOMER
(BT_SUBSIDIARY_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          128K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;



CREATE INDEX IDX_AM_PROD_FRIENDLY_ID_FK ON ATTRIBUTE_MAPPING
(PROD_FRIENDLY_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX FUNIDX_ATTR_MAP ON ATTRIBUTE_MAPPING
(UPPER("ATTRIBUTE_LEVEL"), UPPER("CONFIG_LEVEL"))
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          192K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX IDX_ADDRESS_COUNTRYID_FK ON ADDRESS
(COUNTRY_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          18M
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX IDX_SITECTDETAIL_CONTACTID_FK ON SITE_CONTACT_DETAIL
(CONTACT_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          384K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX IDX_SITECTDETAIL_SITE_ID_FK ON SITE_CONTACT_DETAIL
(SITE_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          512K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX IDX_SITE_BATCHID_FK ON SITE
(BATCH_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX IDX_SITE_SECCONTACTID_FK ON SITE
(SECONDARY_CONTACT_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX IDX_SITE_PRICONTACTID_FK ON SITE
(PRIMARY_CONTACT_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX IDX_SITE_CUSTOMERID_FK ON SITE
(CUSTOMER_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          704K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX IDX_SITE_ADDRESSID_FK ON SITE
(ADDRESS_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          4M
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX IDX_SITE_BILLINGID_FK ON SITE
(BILLING_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          128K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;

CREATE INDEX IDX_PRCNGBKT_QTHDR_FK ON PRICING_BUCKET
(QUOTE_HEADER_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX FUNIDX_PRIC_BUCKT ON PRICING_BUCKET
(UPPER("SITE_NAME"), UPPER("CONFIG_LEVEL"), UPPER("PRODUCT_NAME"))
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          768K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX IDX_ORD_VAL_ORDRHDRID_FK ON ORDER_VALIDATION
(ORDER_HEADER_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX IDX_ORDHDR_QTEHDRID_FK ON ORDER_HEADER
(QUOTE_HEADER_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          256K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX IDX_EXCHANGERATEDTL_QTHRID_FK ON EXCHANGE_RATE_DETAIL
(QUOTE_HEADER_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;




CREATE INDEX IDX_DISCOUNTAPRVL_QUOTEID_FK ON DISCOUNT_APPROVAL
(QUOTE_HEADER_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          384K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;




CREATE INDEX IDX_BILLING_CUSTOMERID_FK ON BILLING
(CUSTOMER_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX IDX_BILLING_CONTACTID_FK ON BILLING
(CONTACT_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX IDX_BILLING_ACCOUNTID_FK ON BILLING
(ACCOUNT_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX IDX_BILLING_ADDRESSID_FK ON BILLING
(ADDRESS_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;



CREATE INDEX IDX_QUOTESITE_SITEID_FK ON QUOTE_SITE
(SITE_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          2M
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX IDX_QUOTESITE_QUOTEHEADERID_FK ON QUOTE_SITE
(QUOTE_HEADER_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          2M
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX IDX_ORDERSITEDTL_SITEID_FK ON ORDER_SITE_DETAIL
(SITE_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          256K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX IDX_ORDERSITEDTL_ORDERHDRID_FK ON ORDER_SITE_DETAIL
(ORDER_HEADER_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          256K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX IDX_ORDCNTDT_CNTID_ASIS_FK ON ORDER_CONTACT_DETAIL_AS_IS
(CONTACT_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX IDX_ODRCNTDT_ODRHDRID_ASIS_FK ON ORDER_CONTACT_DETAIL_AS_IS
(ORDER_HEADER_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;



CREATE INDEX IDX_ORDERCTACTDT_ORDERHDRID_FK ON ORDER_CONTACT_DETAIL
(ORDER_HEADER_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          128K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX IDX_ORDERCTACTDT_CONTACTID_FK ON ORDER_CONTACT_DETAIL
(CONTACT_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          128K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX IDX_BCMEXP_SITEID_FK ON BCM_EXPORT
(SITE_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX IDX_BCMEXP_QTHDR_ID_FK ON BCM_EXPORT
(QUOTE_HEADER_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;





CREATE INDEX IDX_QTPRELIST_PRICELISTID_FK ON QUOTE_PRICE_LIST
(PRICE_LIST_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX IDX_QTPRELIST_QUOTEHDRID_FK ON QUOTE_PRICE_LIST
(QUOTE_HEADER_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          640K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;



CREATE INDEX IDX_QTPRICELIST_SITEID_FK ON QUOTE_PRICE_LIST
(SITE_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX IDX_QT_PRC_LST_PRDSEL_FK ON QUOTE_PRICE_LIST
(PRODUCT_SELECTION_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;



CREATE INDEX IDX_PVALRESLTS_QTEST_FK ON PRODUCT_VALIDATION_RESULTS
(QUOTE_SITE_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;




CREATE INDEX IDX_PRODSELECTION_QUOTEID_FK ON PRODUCT_SELECTION
(QUOTE_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          704K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX IDX_PRDSEL_QTSITE_FK ON PRODUCT_SELECTION
(QUOTE_SITE_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX IDX_PRD_SEL_ORDRST_FK ON PRODUCT_SELECTION
(ORDER_SITE_DETAIL_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX IDX_PRD_SELSTID_FK ON PRODUCT_SELECTION
(SITE_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX IDX_PROSEL_QUOTEHEDID_FK ON PRODUCT_SELECTION
(QUOTE_HEADER_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;




CREATE INDEX IDX_GENCAV_QUOTSITID_FK ON GENERIC_CAVEAT
(QUOTE_SITE_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;



CREATE INDEX IDX_CPEQREF_QUOTESITEID_FK ON CPE_QREF
(QUOTE_SITE_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          256K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;



CREATE INDEX IDX_ACCQRF_QUOTESITEID_FK ON ACCESS_QREF
(QUOTE_SITE_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          5M
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX IDX_ACCQRF_ACCESSQREF_FK ON ACCESS_QREF
(ACCESS_QREF)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX FUNIDX_ACCES_QREF ON ACCESS_QREF
(UPPER("ACCESS_QREF"))
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          8M
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;



CREATE INDEX IND_HRGDETAILSASIS_LINRITRMID ON PRICE_LN_USG_CHRG_DETAILS_ASIS
(LINE_ITEM_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX IND_HRGDETAILSASIS_PRCLNTRMID ON PRICE_LN_USG_CHRG_DETAILS_ASIS
(PRICE_LINE_ITEM_DETAIL_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX IND_CHRGDETAILS_PRCLINRITRMID ON PRICE_LN_USG_CHRG_DETAILS
(PRICE_LINE_ITEM_DETAIL_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX IND_LNGCHRGDETAILS_LINRITRMID ON PRICE_LN_USG_CHRG_DETAILS
(LINE_ITEM_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX ORD_LN_ITM_ID_IX ON EXPEDIO_RESPONSE
(NVL("ORDER_LINE_ITEM_ID",NULL))
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;

ALTER INDEX ORD_LN_ITM_ID_IX
  MONITORING USAGE;


CREATE INDEX IDX_PVALRESPNS_PVALRES_FK ON PRODUCT_VALIDATION_RESPONSE
(PROD_VALIDAT_RESULTS_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;




CREATE INDEX IDX_PRLEITEMDET_LINEITEMID_FK ON PRICE_LINE_ITEM_DETAIL
(LINE_ITEM_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          21M
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX IDX_PRLINEITEMDET_PRLNITMID_FK ON PRICE_LINE_ITEM_DETAIL
(PRICE_LINE_ITEM_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          19M
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX IDX_PRLEITEMDET_EXTERNQREF_FK ON PRICE_LINE_ITEM_DETAIL
(EXTERNAL_QREF)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX IDX_PTIPRTES_ORDERLNITMID_FK ON PORT_IP_ROUTES
(ORDER_LINE_ITEM_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX IDX_OLID_OLIID_FK ON ORDER_LINE_ITEM_DETAIL
(ORDER_LINE_ITEM_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          12M
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX IDX_OLID_ATTMAPID_FK ON ORDER_LINE_ITEM_DETAIL
(ATTRIBUTE_MAPPING_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          14M
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX INDX_ORDERLINEITEM_SERVICEID ON ORDER_LINE_ITEM
(QUOTE_SITE_SERVICE_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          192K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;



CREATE INDEX IDX_ORDLNITM_ORDHDRID_FK ON ORDER_LINE_ITEM
(ORDER_HEADER_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          2M
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX IDX_ORDERLINEITEM_SITEID_FK ON ORDER_LINE_ITEM
(SITE_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          2M
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX IDX_OLI_PROD_FRIENDLY_ID_FK ON ORDER_LINE_ITEM
(PROD_FRIENDLY_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX IDX_ORDR_LNITM_PRDSEL_FK ON ORDER_LINE_ITEM
(PRODUCT_SELECTION_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX FUNIDX_ORDERLINEITM ON ORDER_LINE_ITEM
(UPPER("PRODUCT_NAME"), UPPER("FALLBACK_TYPE"))
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          4M
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;



CREATE INDEX IDX_LINEITEMDET_ATTRMAPID_FK ON LINE_ITEM_DETAIL
(ATTRIBUTE_MAPPING_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          184M
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX IDX_LINEITEMDET_LINEITEMID_FK ON LINE_ITEM_DETAIL
(LINE_ITEM_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          184M
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;



CREATE INDEX IDX_LINEITEM_SITEID_FK ON LINE_ITEM
(SITE_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          16M
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX IDX_LINEITEM_QUOTEHEADER_FK ON LINE_ITEM
(QUOTE_HEADER_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          16M
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX IDX_LNITM_PRDSEL_FK ON LINE_ITEM
(PRODUCT_SELECTION_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX IDX_LINE_ITEM_ID_FK ON LINE_ITEM
(PARENT_LINE_ITEM_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX FUNIDX_LINE_ITM ON LINE_ITEM
(UPPER("PRODUCT_NAME"), UPPER("FALLBACK_TYPE"), UPPER("PART_TYPE"))
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          35M
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX IDX_EXPRESPE_QTHRDID_FK ON EXPEDIO_RESPONSE
(QUOTE_HEADER_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          640K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;

ALTER INDEX IDX_EXPRESPE_QTHRDID_FK
  MONITORING USAGE;


CREATE INDEX IDX_EXPRESPE_QTID_FK ON EXPEDIO_RESPONSE
(QUOTE_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          640K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;

ALTER INDEX IDX_EXPRESPE_QTID_FK
  MONITORING USAGE;


CREATE INDEX IDX_EXP_RES_PRDSEL_FK ON EXPEDIO_RESPONSE
(PRODUCT_SELECTION_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;

ALTER INDEX IDX_EXP_RES_PRDSEL_FK
  MONITORING USAGE;



CREATE INDEX IDX_CPECAVEAT_CPEQREFID_FK ON CPE_CAVEAT
(CPE_QREF_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          128K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX BIDREQSTATUS_AS_IS_COMP_IDX ON BID_REQUEST_STATUS_AS_IS
(QUOTE_HEADER_ID, SITE_ID, PRODUCT_ID, PRODUCT_NAME)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX IDX_BRS_AS_IS_PRD_FRNDLY_ID_FK ON BID_REQUEST_STATUS_AS_IS
(PROD_FRIENDLY_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX IDX_BD_RQ_STS_AS_IS_PRDSL_FK ON BID_REQUEST_STATUS_AS_IS
(PRODUCT_SELECTION_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX IDX_BDRQST_AS_IS_STID_FK ON BID_REQUEST_STATUS_AS_IS
(SITE_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX BIDREQSTATUS_COMP_IDX ON BID_REQUEST_STATUS
(QUOTE_HEADER_ID, SITE_ID, PRODUCT_ID, PRODUCT_NAME)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          768K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX IDX_BDRQSTSTS_STID_FK ON BID_REQUEST_STATUS
(SITE_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX IDX_BD_RQST_STS_PRDSEL_FK ON BID_REQUEST_STATUS
(PRODUCT_SELECTION_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;




CREATE INDEX BIDDETAIL_AS_IS_COMP_IDX ON BID_DETAIL_AS_IS
(SITE_ID, PRODUCT_ID, PRODUCT_NAME)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX IDX_BIDETL_QTEHDR_AS_IS_FK ON BID_DETAIL_AS_IS
(QUOTE_HEADER_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX IDX_BIDDETIL_PRDSEL_AS_IS_FK ON BID_DETAIL_AS_IS
(PRODUCT_SELECTION_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX BIDDETAIL_COMP_IDX ON BID_DETAIL
(SITE_ID, PRODUCT_ID, PRODUCT_NAME)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          1M
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;




CREATE INDEX IDX_BIDDETAIL_QUOTEHDR_FK ON BID_DETAIL
(QUOTE_HEADER_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX IDX_BIDDETAIL_PRDSEL_FK ON BID_DETAIL
(PRODUCT_SELECTION_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;




CREATE INDEX IDX_ACCCVT_ACCESSQREFID_FK ON ACCESS_CAVEAT
(ACCESS_QREF_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          23M
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX FUNIDX_ACCES_CAVEAT ON ACCESS_CAVEAT
(UPPER("ACCESS_CAVEAT"))
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          4M
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX IDX_COSTDET_PRILNITMDETID_FK ON COST_DETAIL
(PRICE_LINE_ITEM_DETAIL_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          25M
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;




CREATE INDEX IDX_FK_LINE_ITEM_BFG_INV ON BFG_INVENTORY_DETAIL
(LINE_ITEM_ID)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       2147483645
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;

-----------------------------------------------------------------------------
  -- END: DDL for Indexes
-----------------------------------------------------------------------------

-----------------------------------------------------------------------------
  -- START: DDL for SEQUENCES
-----------------------------------------------------------------------------

DROP SEQUENCE ACCESS_CAVEAT_ID;

CREATE SEQUENCE ACCESS_CAVEAT_ID
  START WITH 5286618
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 500
  NOORDER;


DROP SEQUENCE ACCESS_QREF_ID;

CREATE SEQUENCE ACCESS_QREF_ID
  START WITH 913500
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 500
  NOORDER;


DROP SEQUENCE ACCOUNT_ID;

CREATE SEQUENCE ACCOUNT_ID
  START WITH 15277
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


DROP SEQUENCE ADDRESS_ID;

CREATE SEQUENCE ADDRESS_ID
  START WITH 2282990
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 200
  NOORDER;


DROP SEQUENCE ATTRIBUTE_ID;

CREATE SEQUENCE ATTRIBUTE_ID
  START WITH 1
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


DROP SEQUENCE ATTRIBUTE_MAPPING_ID;

CREATE SEQUENCE ATTRIBUTE_MAPPING_ID
  START WITH 1
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


DROP SEQUENCE ATTRIBUTE_VALUE_ID;

CREATE SEQUENCE ATTRIBUTE_VALUE_ID
  START WITH 1
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


DROP SEQUENCE BATCH_ID;

CREATE SEQUENCE BATCH_ID
  START WITH 34441
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


DROP SEQUENCE BCMEXPORT_ID;

CREATE SEQUENCE BCMEXPORT_ID
  START WITH 4408
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 100
  NOORDER;


DROP SEQUENCE BFG_INVENTORY_DETAIL_ID;

CREATE SEQUENCE BFG_INVENTORY_DETAIL_ID
  START WITH 47338
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


DROP SEQUENCE BID_ACTIVITY_ID;

CREATE SEQUENCE BID_ACTIVITY_ID
  START WITH 121
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


DROP SEQUENCE BID_DETAIL_ID;

CREATE SEQUENCE BID_DETAIL_ID
  START WITH 24914
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


DROP SEQUENCE BID_REQUEST_STATUS_ID;

CREATE SEQUENCE BID_REQUEST_STATUS_ID
  START WITH 16998
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


DROP SEQUENCE BILLING_BFG_CLASSIC_ID;

CREATE SEQUENCE BILLING_BFG_CLASSIC_ID
  START WITH 1
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


DROP SEQUENCE BILLING_ID;

CREATE SEQUENCE BILLING_ID
  START WITH 22899
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 200
  NOORDER;


DROP SEQUENCE BT_SUBSIDIARY_ID;

CREATE SEQUENCE BT_SUBSIDIARY_ID
  START WITH 1
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


DROP SEQUENCE BUNDLE_SELECTION_ID;

CREATE SEQUENCE BUNDLE_SELECTION_ID
  START WITH 19518
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


DROP SEQUENCE CAVEATS_ID;

CREATE SEQUENCE CAVEATS_ID
  START WITH 1
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 200
  NOORDER;


DROP SEQUENCE CONTACT_ID;

CREATE SEQUENCE CONTACT_ID
  START WITH 123573
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 200
  NOORDER;


DROP SEQUENCE COST_DETAIL_ID;

CREATE SEQUENCE COST_DETAIL_ID
  START WITH 576297016
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 900
  NOORDER;


DROP SEQUENCE COUNTRY_ID;

CREATE SEQUENCE COUNTRY_ID
  START WITH 900
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


DROP SEQUENCE CPE_CAVEAT_ID;

CREATE SEQUENCE CPE_CAVEAT_ID
  START WITH 27144
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 200
  NOORDER;


DROP SEQUENCE CPE_QREF_ID;

CREATE SEQUENCE CPE_QREF_ID
  START WITH 21711
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


DROP SEQUENCE CUSTOMER_BILLING_INFO_ID;

CREATE SEQUENCE CUSTOMER_BILLING_INFO_ID
  START WITH 1
  MAXVALUE 99999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 200
  NOORDER;


DROP SEQUENCE CUSTOMER_CONTACT_ID;

CREATE SEQUENCE CUSTOMER_CONTACT_ID
  START WITH 18937
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 200
  NOORDER;


DROP SEQUENCE CUSTOMER_ID;

CREATE SEQUENCE CUSTOMER_ID
  START WITH 58098
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 500
  NOORDER;


DROP SEQUENCE CUSTOMER_PRICE_LIST_ID;

CREATE SEQUENCE CUSTOMER_PRICE_LIST_ID
  START WITH 1
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


DROP SEQUENCE CUSTOMER_PRODUCT_ID;

CREATE SEQUENCE CUSTOMER_PRODUCT_ID
  START WITH 6275
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


DROP SEQUENCE DISCOUNT_APPROVAL_ID;

CREATE SEQUENCE DISCOUNT_APPROVAL_ID
  START WITH 18696
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


DROP SEQUENCE ERROR_LOG_ID;

CREATE SEQUENCE ERROR_LOG_ID
  START WITH 122643
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 500
  NOORDER;


DROP SEQUENCE EXCHANGE_RATE_DETAIL_ID;

CREATE SEQUENCE EXCHANGE_RATE_DETAIL_ID
  START WITH 392
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


DROP SEQUENCE EXPEDIO_RESPONSE_ID;

CREATE SEQUENCE EXPEDIO_RESPONSE_ID
  START WITH 83656
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 600
  NOORDER;


DROP SEQUENCE EXTERNAL_ID;

CREATE SEQUENCE EXTERNAL_ID
  START WITH 1
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


DROP SEQUENCE GENERIC_CAVEAT_ID;

CREATE SEQUENCE GENERIC_CAVEAT_ID
  START WITH 275609
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 200
  NOORDER;


DROP SEQUENCE LINE_ITEM_DETAIL_ID;

CREATE SEQUENCE LINE_ITEM_DETAIL_ID
  START WITH 14784591
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 800
  ORDER;


DROP SEQUENCE LINE_ITEM_ID;

CREATE SEQUENCE LINE_ITEM_ID
  START WITH 1077618
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 800
  ORDER;


DROP SEQUENCE ORDER_ATTACHMENT_DETAIL_ID;

CREATE SEQUENCE ORDER_ATTACHMENT_DETAIL_ID
  START WITH 28802
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 500
  NOORDER;


DROP SEQUENCE ORDER_ATTACHMENT_ID;

CREATE SEQUENCE ORDER_ATTACHMENT_ID
  START WITH 12790
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 200
  NOORDER;


DROP SEQUENCE ORDER_CONTACT_DETAIL_ID;

CREATE SEQUENCE ORDER_CONTACT_DETAIL_ID
  START WITH 26330
  MAXVALUE 9999999999
  MINVALUE 1
  NOCYCLE
  CACHE 200
  NOORDER;


DROP SEQUENCE ORDER_HEADER_ID;

CREATE SEQUENCE ORDER_HEADER_ID
  START WITH 63183
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 500
  NOORDER;


DROP SEQUENCE ORDER_LINE_ITEM_DET_ID;

CREATE SEQUENCE ORDER_LINE_ITEM_DET_ID
  START WITH 1301032
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 500
  NOORDER;


DROP SEQUENCE ORDER_LINE_ITEM_ID;

CREATE SEQUENCE ORDER_LINE_ITEM_ID
  START WITH 235237
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 500
  NOORDER;


DROP SEQUENCE ORDER_SITE_DETAIL_ID;

CREATE SEQUENCE ORDER_SITE_DETAIL_ID
  START WITH 63268
  MAXVALUE 99999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 500
  NOORDER;


DROP SEQUENCE ORDER_VALIDATION_ID;

CREATE SEQUENCE ORDER_VALIDATION_ID
  START WITH 1
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 200
  NOORDER;


DROP SEQUENCE PLN_USG_CHRG_DETAILS;

CREATE SEQUENCE PLN_USG_CHRG_DETAILS
  START WITH 6061
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


DROP SEQUENCE PLN_USG_CHRG_DETAILS_ASIS;

CREATE SEQUENCE PLN_USG_CHRG_DETAILS_ASIS
  START WITH 6600
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 800
  NOORDER;


DROP SEQUENCE PLSQL_PROFILER_RUNNUMBER;

CREATE SEQUENCE PLSQL_PROFILER_RUNNUMBER
  START WITH 1
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


DROP SEQUENCE PM_ID;

CREATE SEQUENCE PM_ID
  START WITH 1
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


DROP SEQUENCE PORT_IP_ROUTE_ID;

CREATE SEQUENCE PORT_IP_ROUTE_ID
  START WITH 1
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


DROP SEQUENCE PRICE_LINE_ITEM_DETAIL_ID;

CREATE SEQUENCE PRICE_LINE_ITEM_DETAIL_ID
  START WITH 2506895
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 800
  NOORDER;


DROP SEQUENCE PRICE_LINE_ITEM_ID;

CREATE SEQUENCE PRICE_LINE_ITEM_ID
  START WITH 1
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 800
  NOORDER;


DROP SEQUENCE PRICE_LIST_ID;

CREATE SEQUENCE PRICE_LIST_ID
  START WITH 1
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


DROP SEQUENCE PRICING_BUCKET_ID;

CREATE SEQUENCE PRICING_BUCKET_ID
  START WITH 24866
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 100
  NOORDER;


DROP SEQUENCE PRODUCT_SELECTION_ID;

CREATE SEQUENCE PRODUCT_SELECTION_ID
  START WITH 56107
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 200
  NOORDER;


DROP SEQUENCE PRODUCT_VALIDATION_RESPONSE_ID;

CREATE SEQUENCE PRODUCT_VALIDATION_RESPONSE_ID
  START WITH 175661
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 200
  NOORDER;


DROP SEQUENCE PRODUCT_VALIDATION_RESULTS_ID;

CREATE SEQUENCE PRODUCT_VALIDATION_RESULTS_ID
  START WITH 23784
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 200
  NOORDER;


DROP SEQUENCE QUOTE_HEADER_ID;

CREATE SEQUENCE QUOTE_HEADER_ID
  START WITH 83007
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 500
  NOORDER;


DROP SEQUENCE QUOTE_ID;

CREATE SEQUENCE QUOTE_ID
  START WITH 80826
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 500
  NOORDER;


DROP SEQUENCE QUOTE_PRICE_LIST_ID;

CREATE SEQUENCE QUOTE_PRICE_LIST_ID
  START WITH 51040
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 200
  NOORDER;


DROP SEQUENCE QUOTE_SITE_ID;

CREATE SEQUENCE QUOTE_SITE_ID
  START WITH 159740
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 700
  NOORDER;


DROP SEQUENCE QUOTE_SITE_SERVICE_ID;

CREATE SEQUENCE QUOTE_SITE_SERVICE_ID
  START WITH 44625
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 500
  NOORDER;


DROP SEQUENCE QUOTE_STATUS_ID;

CREATE SEQUENCE QUOTE_STATUS_ID
  START WITH 41068
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 200
  NOORDER;


DROP SEQUENCE SALES_CHANNEL_ID;

CREATE SEQUENCE SALES_CHANNEL_ID
  START WITH 1
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


DROP SEQUENCE SITE_CONTACT_DETAIL_ID;

CREATE SEQUENCE SITE_CONTACT_DETAIL_ID
  START WITH 116898
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 200
  NOORDER;


DROP SEQUENCE SITE_ID;

CREATE SEQUENCE SITE_ID
  START WITH 95217
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 500
  NOORDER;


DROP SEQUENCE SITE_LOG_ID;

CREATE SEQUENCE SITE_LOG_ID
  START WITH 101538
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 500
  NOORDER;


DROP SEQUENCE UM_ACCESS_CONTROL_ID;

CREATE SEQUENCE UM_ACCESS_CONTROL_ID
  START WITH 1
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


DROP SEQUENCE UM_MENU_ID;

CREATE SEQUENCE UM_MENU_ID
  START WITH 1
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


DROP SEQUENCE UM_PROFILE_ID;

CREATE SEQUENCE UM_PROFILE_ID
  START WITH 1
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


DROP SEQUENCE UM_ROLE_ACCESS_CONTROL_MAP_ID;

CREATE SEQUENCE UM_ROLE_ACCESS_CONTROL_MAP_ID
  START WITH 1
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


DROP SEQUENCE UM_ROLE_ID;

CREATE SEQUENCE UM_ROLE_ID
  START WITH 1
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


DROP SEQUENCE UM_ROLE_MENU_ID;

CREATE SEQUENCE UM_ROLE_MENU_ID
  START WITH 1
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


DROP SEQUENCE UM_ROLE_PROFILE_MAP_ID;

CREATE SEQUENCE UM_ROLE_PROFILE_MAP_ID
  START WITH 1
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


DROP SEQUENCE UM_TEAM_CATEGORY_ID;

CREATE SEQUENCE UM_TEAM_CATEGORY_ID
  START WITH 1
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


DROP SEQUENCE UM_TEAM_COUNTRY_MAP_ID;

CREATE SEQUENCE UM_TEAM_COUNTRY_MAP_ID
  START WITH 1
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


DROP SEQUENCE UM_TEAM_ID;

CREATE SEQUENCE UM_TEAM_ID
  START WITH 1
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


DROP SEQUENCE UM_TEAM_PRODUCT_MAP_ID;

CREATE SEQUENCE UM_TEAM_PRODUCT_MAP_ID
  START WITH 1
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


DROP SEQUENCE UM_USER_ID;

CREATE SEQUENCE UM_USER_ID
  START WITH 1
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


DROP SEQUENCE UM_USER_PROFILE_ID;

CREATE SEQUENCE UM_USER_PROFILE_ID
  START WITH 1
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


DROP SEQUENCE VPN_ADD_DET_ID;

CREATE SEQUENCE VPN_ADD_DET_ID
  START WITH 127
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


DROP SEQUENCE VPN_ID;

CREATE SEQUENCE VPN_ID
  START WITH 4059
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;

----------------------------------------------------------------------
  -- END: DDL for SEQUENCES
----------------------------------------------------------------------

----------------------------------------------------------------------
  -- START: DDL for Procedures
----------------------------------------------------------------------
CREATE OR REPLACE PROCEDURE        CREATE_CONTACT_BFG_SP (
            PIV_UNIQUEID      IN  VARCHAR2,
            PIV_CNT_POSITION  IN VARCHAR2,
            PIV_CNT_FORENAME  IN VARCHAR2,
            PIV_CNT_SURNAME   IN VARCHAR2,
            PIV_CNT_PHONE_NUMBER  IN VARCHAR2,
            PIV_CNT_FAX_NUMBER    IN VARCHAR2,
            PIV_CNT_EMAIL_ADDRESS IN VARCHAR2,
            PIV_CNT_MOBILE_NUMBER IN VARCHAR2,
            PIV_CNT_PAGER_NUMBER  IN  VARCHAR2,
            PIV_USERNAME          IN VARCHAR2,
            PIN_CNR_CTP_TYPE      IN VARCHAR2,
            PIN_CNR_SIT_ID        IN NUMBER,
            PIN_CNR_CUS_ID        IN NUMBER ,
            PIV_ADR_POST_ZIP_CODE IN VARCHAR2, --NEW
            PIV_ADR_COUNTY        IN VARCHAR2,--NEW
            PIV_CNT_EIN           IN VARCHAR2,
            PIV_CNT_ADR_ID        IN NUMBER,
            PIN_CNR_CNP_ID        IN NUMBER,
            POV_BFG_CNT_ID        OUT NUMBER,
            POV_BFG_CNR_ID        OUT NUMBER,
            POV_ERROR_CODE        OUT VARCHAR2,
            POV_ERROR_MESSAGE     OUT VARCHAR2
)
AS
------------SQE_CREATE_CONTACT_IN_BFG_SP fist   SP PARAMATER... START
/******************************************************************************
   NAME:       create_contact_bfg_sp .
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        04/06/2011  Suman             This to update the contact information in BFG SP
   2.0        08/07/2011  Suman             Add other paramater name called piv_cnt_adr_id
   3.0        25/07/2011  Suman             New IN Paramater(pin_cnr_cnp_id) is  add  requestd by In swapna.nagarajan@bt.com

   ******************************************************************************/


  PIV_CNT_SALES_SECTOR           VARCHAR2(200);
  PIV_CNT_TITLE                  VARCHAR2(200);
  PIV_CNT_INITIALS               VARCHAR2(200);
  PIV_CNT_PHONE_NUMBER_EXTENSION VARCHAR2(200);
  PIV_CNT_WWW                    VARCHAR2(200);
  PIV_CNT_INT_EXT                VARCHAR2(200)  :='Customer';
  PIV_CNT_INT_ADDRESS            VARCHAR2(200);
  PIV_CNT_DEPT                   VARCHAR2(200);
  PIV_CNT_OUC_CODE               VARCHAR2(200);
  PIV_CNT_CREATED_DATE DATE :=SYSDATE();
  PIV_CNT_ACTIVE        VARCHAR2(200);
  PIV_SOURCE_SYSTEM     VARCHAR2(200)  :='SQE';
  PIV_ADR_STREET_NUMBER VARCHAR2(200);
  PIV_ADR_STREET_NAME   VARCHAR2(200);
  PIV_ADR_SITE_PREMISES VARCHAR2(200);
  PIV_ADR_LOCALITY      VARCHAR2(200);
  PIV_ADR_TOWN          VARCHAR2(200);
  PIV_ADR_COUNTRY       VARCHAR2(200);
  PIV_ADR_NORTHING      NUMBER;
  PIV_ADR_EASTING       NUMBER;
  PIV_ADR_PO_BOX_NUMBER VARCHAR2(200);
  PIV_CNT_EDI_ADDRESS   VARCHAR2(200);
  ------------FIST SP PARAMATER... END

  ------------SECOND  SP PARAMATER... START

  PIN_CNR_CNT_ID NUMBER;
  PID_CNR_REVIEW_DATE DATE :=SYSDATE;
  PIV_CNR_DISTRIBUTION_LIST_FLAG VARCHAR2(200) :='Y';
  PIN_CNR_CON_ID NUMBER;
  PIV_CNR_COT_ORDER_ID VARCHAR2(200);
--  PIN_CNR_CNP_ID NUMBER;
  PIN_CNR_VNW_ID NUMBER;
  PIV_CNR_ORDER_REFERENCE VARCHAR2(200);
  PIV_CNR_ORDER_TYPE VARCHAR2(200);
  ------------SECOND  SP PARAMATER... END
  V_SQL_CODE   VARCHAR2(2000);

BEGIN
  /*Start fist SP call SQE_CREATE_CONTACT_ROLE_IN_BFG*/
  SQE_CREATE_CONTACT_IN_BFG_SP (
                PIV_UNIQUEID,
                PIV_CNT_POSITION          => PIV_CNT_POSITION,
                PIV_CNT_SALES_SECTOR      => PIV_CNT_SALES_SECTOR,
                PIV_CNT_TITLE             => PIV_CNT_TITLE,
                PIV_CNT_FORENAME          => PIV_CNT_FORENAME,
                PIV_CNT_SURNAME           => PIV_CNT_SURNAME,
                PIV_CNT_INITIALS          => PIV_CNT_INITIALS,
                PIV_CNT_PHONE_NUMBER      => PIV_CNT_PHONE_NUMBER,
                PIV_CNT_PHONE_NUMBER_EXTENSION => PIV_CNT_PHONE_NUMBER_EXTENSION,
                PIV_CNT_FAX_NUMBER      => PIV_CNT_FAX_NUMBER,
                PIV_CNT_EMAIL_ADDRESS   => PIV_CNT_EMAIL_ADDRESS,
                PIV_CNT_MOBILE_NUMBER   => PIV_CNT_MOBILE_NUMBER,
                PIV_CNT_PAGER_NUMBER    => PIV_CNT_PAGER_NUMBER,
                PIV_CNT_WWW             => PIV_CNT_WWW,
                PIV_CNT_INT_EXT         => PIV_CNT_INT_EXT,
                PIV_CNT_INT_ADDRESS     => PIV_CNT_INT_ADDRESS,
                PIV_CNT_DEPT            => PIV_CNT_DEPT,
                PIV_CNT_OUC_CODE        => PIV_CNT_OUC_CODE,
                PIV_CNT_EIN             => PIV_CNT_EIN,
                PIV_CNT_CREATED_DATE    => PIV_CNT_CREATED_DATE,
                PIV_CNT_ACTIVE          => PIV_CNT_ACTIVE,
                PIV_CNT_ADR_ID          => PIV_CNT_ADR_ID,
                PIV_USERNAME            => PIV_USERNAME,
                PIV_SOURCE_SYSTEM       => PIV_SOURCE_SYSTEM,
                POV_BFG_CNT_ID          =>POV_BFG_CNT_ID,
                POV_ERROR_CODE          => POV_ERROR_CODE,
                POV_ERROR_MESSAGE       => POV_ERROR_MESSAGE,
                PIV_ADR_STREET_NUMBER   => PIV_ADR_STREET_NUMBER,
                PIV_ADR_STREET_NAME     => PIV_ADR_STREET_NAME,
                PIV_ADR_SITE_PREMISES   => PIV_ADR_SITE_PREMISES,
                PIV_ADR_LOCALITY        => PIV_ADR_LOCALITY,
                PIV_ADR_TOWN            => PIV_ADR_TOWN,
                PIV_ADR_COUNTY          => PIV_ADR_COUNTY,
                PIV_ADR_COUNTRY         => PIV_ADR_COUNTRY,
                PIV_ADR_POST_ZIP_CODE   => PIV_ADR_POST_ZIP_CODE,
                PIV_ADR_NORTHING        => PIV_ADR_NORTHING,
                PIV_ADR_EASTING         => PIV_ADR_EASTING,
                PIV_ADR_PO_BOX_NUMBER   => PIV_ADR_PO_BOX_NUMBER,
                PIV_CNT_EDI_ADDRESS     => PIV_CNT_EDI_ADDRESS );
/*end SQE_CREATE_CONTACT_ROLE_IN_BFG*/

/*Start Second SP call SQE_CREATE_CONTACT_ROLE_IN_BFG*/

 BEGIN
     SQE_CREATE_CONTACT_ROLE_IN_BFG(
            PIN_CNR_CTP_TYPE            => PIN_CNR_CTP_TYPE,
            PIN_CNR_CNT_ID              =>  POV_BFG_CNT_ID,
            PIN_CNR_CUS_ID              => PIN_CNR_CUS_ID,
            PIN_CNR_SIT_ID              => PIN_CNR_SIT_ID,
            PID_CNR_REVIEW_DATE         => PID_CNR_REVIEW_DATE,
            PIV_CNR_DISTRIBUTION_LIST_FLAG => PIV_CNR_DISTRIBUTION_LIST_FLAG,
            PIV_USERNAME                => PIV_USERNAME,
            PIV_SOURCE_SYSTEM           => PIV_SOURCE_SYSTEM,
            PIN_CNR_CON_ID              => PIN_CNR_CON_ID,
            PIV_CNR_COT_ORDER_ID        => PIV_CNR_COT_ORDER_ID,
            PIN_CNR_CNP_ID              => PIN_CNR_CNP_ID,
            POV_BFG_CNR_ID              => POV_BFG_CNR_ID,         ---output
            POV_ERROR_CODE              => POV_ERROR_CODE,         ---output
            POV_ERROR_MESSAGE           => POV_ERROR_MESSAGE,   ---output
            PIN_CNR_VNW_ID              => PIN_CNR_VNW_ID,
            PIV_CNR_ORDER_REFERENCE     => PIV_CNR_ORDER_REFERENCE,
            PIV_CNR_ORDER_TYPE          => PIV_CNR_ORDER_TYPE
          );
EXCEPTION
      WHEN OTHERS THEN
            V_SQL_CODE := SQLCODE;
            PKG_COMMON.SPI_ERROR_LOG(
                                  PIN_CNR_SIT_ID,
                                  POV_BFG_CNT_ID,
                                  PIN_CNR_SIT_ID||'pin_cnr_sit_id',
                                  NULL,
                                  NULL,
                                  'create_contact_bfg_sp',
                                  POV_ERROR_CODE,
                                  POV_ERROR_MESSAGE
                                 );
END;
END CREATE_CONTACT_BFG_SP;
/


CREATE OR REPLACE PROCEDURE jay_debug
  (
    in_value_name IN VARCHAR2,
    in_value      IN VARCHAR2,
    in_varchar    IN VARCHAR2)
AS
  PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
  INSERT INTO debug_table VALUES
    (in_value_name,in_value,in_varchar
    );
  COMMIT;
EXCEPTION
WHEN OTHERS THEN
  ROLLBACK;
END JAY_DEBUG;
/


CREATE OR REPLACE PROCEDURE m_j1(id1  number,name1 long)
AS
  PRAGMA AUTONOMOUS_TRANSACTION;
begin

INSERT into log_error values(id1,name1);
commit;
end;
/


CREATE OR REPLACE PROCEDURE spi_generic_caveat_details (
   in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
   in_siteid          IN       site.site_id%TYPE,
   in_param           IN       generic_caveat_tbl,
   in_createdby       IN       NUMBER,
   out_errmsg         OUT      VARCHAR2
)
AS
   v_quotesiteid   quote_site.quote_site_id%TYPE;
   v_sys_date      DATE                            := NULL;
BEGIN
   v_sys_date := SYSDATE;

   BEGIN
      SELECT quote_site_id
        INTO v_quotesiteid
        FROM quote_site
       WHERE site_id = in_siteid
         AND quote_header_id = in_quoteheaderid
         AND active = 'Y';
   EXCEPTION
      WHEN NO_DATA_FOUND
      THEN
         out_errmsg :=
            'There is no quote site id for this quote_header_id and site_id combination.';
         RETURN;
   END;

   IF in_param.EXISTS (1)
   THEN
      DELETE FROM generic_caveat
            WHERE quote_site_id = v_quotesiteid;
   END IF;

   FOR i IN in_param.FIRST .. in_param.LAST
   LOOP
      INSERT INTO generic_caveat
                  (generic_caveat_id, quote_site_id,
                   caveat_id, description,
                   caveated_on, created_by, created_date,
                   active, access_caveat
                  )
           VALUES (generic_caveat_id.NEXTVAL, v_quotesiteid,
                   in_param (i).caveat_id, in_param (i).description,
                   in_param (i).caveated_on, in_createdby, v_sys_date,
                   in_param (i).active, in_param (i).access_caveat
                  );
   END LOOP;
EXCEPTION
   WHEN OTHERS
   THEN
      out_errmsg := SQLERRM;
END;
/


CREATE OR REPLACE PROCEDURE           spi_pricing_tobe_pri_to_sec ( in_quote_header_id     IN       quote_header.quote_header_id%TYPE,
                                                          in_site_id             IN       site.site_id%TYPE,
                                                          out_status             OUT      NUMBER,
                                                          out_errmsg             OUT      VARCHAR2
                                                         )
AS
v_pricing_tab    pricing_tab                := pricing_tab();
v_service_name   quote_site_service.service_name%TYPE;

BEGIN

   SELECT PRICING_OBJ(
                       li.site_id,
                       li.product_name,
                       pli.price_line_description||'-Delete',
                       plid.price,
                       plid.currency,
                       plid.CHARGE_TYPE,
                       plid.DISCOUNT,
                       DISCOUNT_TYPE,
                       'Secondary',--'li.fallback_type,
                       null,--cd.cost,
                       null,--cd.cost_type,
                       null,--cd.CURRENCY,
                       plid.EXTERNAL_QREF,
                       plid.REQUEST_STATUS,
                       plid.ERROR_DESCRIPTION,
                       plid.PRIMARY_PRICING_STATUS,
                       plid.SECONDARY_PRICING_STATUS,
                       plid.quantity,
                       plid.RENT_PRICE,
                       li.line_item_id,
                       plid.row_id,
                       li.product_id,
                       plid.NET_PRICE,
                       plid.PLN_INVENTORY_ID,
                       plid.PTP_EUP,
                       plid.PTP_EUP_ID,
                       plid.DISCOUNT_REQUESTED,
                       plid.DISCOUNT_PROPOSED,
                       plid.CLASSIC_ELEMENT_ID,
                       plid.CLASSIC_ELEMENT_NAME,
                       plid.PPSR_PRICE_LINE_ID,
                       plid.PPSR_PRICE_LINE_DESCRIPTION,
                       billing_id,
                       billing_reference_name,
                       billing_start_date,
                       billing_end_date
                      ) bulk collect into v_pricing_tab
   FROM quote_line_item_as_is li, price_line_item pli, price_line_item_detail_as_is plid--, cost_detail_as_is cd
   WHERE li.quote_headeR_id =in_quote_header_id
   AND li.site_id =in_site_id
   AND plid.line_item_id = li.line_item_id
   AND pli.price_line_item_id = plid.price_line_item_id
   AND li.active = 'Y'
   AND plid.active = 'Y'
   --AND cd.price_line_item_detail_id = plid.price_line_item_detail_id
   AND UPPER(li.fallback_type) = 'PRIMARY' AND UPPER(li.product_name) <>'BT IVPN2 GLOBAL'
   AND EXISTS(SELECT 1 FROM price_line_item WHERE price_line_description =pli.price_line_description||'-Delete');

  SELECT DISTINCT service_name into v_service_name
  FROM quote_site_service qss, line_item li
  WHERE li.quote_header_id = in_quote_header_id
  AND li.site_id = in_site_id
  AND qss.quote_site_service_id = li.quote_site_service_id
  AND UPPER(li.fallback_type) = 'PRIMARY';



      pkg_lineitem.spi_pricing_modify (
                          in_quote_header_id,
                          v_pricing_tab,
                          in_site_id,
                          v_service_name,
                          null,
                          out_status,
                          out_errmsg
                       );

    IF   out_status <>1  THEN
        out_errmsg :=out_errmsg||'-spi_pricing_modify failed';
        RETURN;
    END IF;

  /*
    FOR i IN v_pricing_tab.FIRST .. v_pricing_tab.LAST
      LOOP
        dbms_output.put_line(v_pricing_tab (i).o_fallback);
      END LOOP;
   */
      out_status := pkg_constants.con_status_success;
EXCEPTION
   WHEN OTHERS
   THEN
      out_status := pkg_constants.con_status_failure;
      out_errmsg := SQLERRM;

END;
/


CREATE OR REPLACE PROCEDURE SPI_QUOTEVERSION_ALL
   (
      in_expquoteid          IN       quote_header.expedio_quoteid%TYPE,
      in_expquoteversion     IN       quote_header.expedio_parent_version%TYPE,
      in_createdby           IN       quote_header.created_by%TYPE,
      out_newquoteheaderid   OUT      quote_header.quote_header_id%TYPE,
      out_expquoteid         OUT      quote_header.expedio_quoteid%TYPE,
      out_newexpversion      OUT      quote_header.expedio_quoteversion%TYPE,
      out_status             OUT      NUMBER,
      out_errmsg             OUT      VARCHAR2
   )
   AS
      v_quoteheaderid     quote_header.quote_header_id%TYPE;
      v_quoteid           quote_header.quote_id%TYPE;
      v_version           quote_header.VERSION%TYPE;
      v_expversion        quote_header.expedio_quoteversion%TYPE;
      v_newqthdrid        quote_header.quote_header_id%TYPE;
      v_sql_code          NUMBER;
      v_customername      VARCHAR2(255);
      v_customerid        VARCHAR2(255);
      v_salesorganization VARCHAR2(255);
      v_salesrepname      VARCHAR2(255);
      v_ordertype         VARCHAR2(255);
      v_quotestatus       VARCHAR2(255);
      v_quotename         VARCHAR2(255);
      v_contractterm      NUMBER;
      v_bidnumber         VARCHAR2(255);
      v_siebelid          VARCHAR2(255);
      v_currency          VARCHAR2(255);
      v_comments          VARCHAR2(255);
      v_exprefno          VARCHAR2(255);
      v_status            VARCHAR2(100);


   BEGIN
      DELETE FROM temp_quoteversion;

      COMMIT;

      --select existing quote_header_id to copy
      SELECT DISTINCT quote_header_id, quote_id
                 INTO v_quoteheaderid, v_quoteid
                 FROM quote_header
                WHERE expedio_quoteid = in_expquoteid
                  AND expedio_quoteversion = in_expquoteversion;

      --get max of version to create new version
      SELECT CAST (( TO_NUMBER (VERSION) + 1) AS VARCHAR2 (10)) || '.0',
                CAST (( TO_NUMBER (expedio_quoteversion) + 1) AS VARCHAR2 (10)
                     )
             || '.0'
        INTO v_version,
             v_expversion
        FROM quote_header
       WHERE quote_header_id = v_quoteheaderid;

      SELECT quote_header_id.NEXTVAL
        INTO v_newqthdrid
        FROM DUAL;

      --create new version of the quote generating new quote_header
      INSERT INTO quote_header
                  (quote_header_id, quote_id, currency_id, VERSION,
                   quote_name, contract_term, opportunity_id, bid_number,
                   comments, status, TYPE, currency, customer_signed_date,
                   contract_id, capcheck_refno, expedio_ref_id, cr_prop_id,
                   expedio_quoteid, expedio_quoteversion,
                   expedio_parent_version, created_by, created_date,
                   bundle_status)
         (SELECT v_newqthdrid, v_quoteid, currency_id, v_version, quote_name,
                 contract_term, opportunity_id, bid_number, comments, 'Draft',
                 TYPE, currency, customer_signed_date, contract_id,
                 capcheck_refno, expedio_ref_id, cr_prop_id, in_expquoteid,
                 v_expversion, in_expquoteversion, in_createdby, SYSDATE,
                 'Draft'
            FROM quote_header
           WHERE quote_header_id = v_quoteheaderid);


      -- Added on 17/12/2010
      --copy into quote_status with new quote_header_id
      INSERT INTO quote_status
                  (quote_id, quote_header_id, product_name, status, quote_status_id)
         (SELECT v_quoteid, v_newqthdrid, product_name, status, quote_status_id.NEXTVAL
            FROM quote_status
           WHERE quote_header_id = v_quoteheaderid);


      --copy into bundle_selection with new quote_header_id
      INSERT INTO bundle_selection
                  (bundle_selection_id, quote_header_id, product_id, order_type,
                   created_by, created_date, product_name,
                   active)
          (SELECT  bundle_selection_id.NEXTVAL, v_newqthdrid, product_id, order_type,
                   in_createdby, SYSDATE, product_name,
                   pkg_constants.con_activeflag_yes
              FROM bundle_selection
             WHERE quote_header_id = v_quoteheaderid);


      --map old quote_site to new quote_site
      INSERT INTO temp_quoteversion
                  (column_name, old_value, new_value)
         (SELECT 'Quote_Site', quote_site_id, quote_site_id.NEXTVAL
            FROM quote_site
           WHERE quote_header_id = v_quoteheaderid
             AND active = pkg_constants.con_activeflag_yes);

      --copy into quote_site with new header_id
      INSERT INTO quote_site
                  (quote_site_id, site_id, quote_header_id, active,
                   created_by, created_date, rfo_validated)
         (SELECT new_value, site_id, v_newqthdrid,
                 pkg_constants.con_activeflag_yes, in_createdby, SYSDATE,
                 rfo_validated
            FROM quote_site INNER JOIN temp_quoteversion
                 ON quote_site_id = old_value AND column_name = 'Quote_Site'
           WHERE quote_header_id = v_quoteheaderid
             AND active = pkg_constants.con_activeflag_yes);


      --copy into quote_price_list with new header_id
      INSERT INTO quote_price_list
                  (quote_price_list_id, quote_header_id, price_list_id,
                   created_by, created_date, price_list_name, site_id,
                   product_id, product_name, product_selection_id)
         (SELECT quote_price_list_id.NEXTVAL, v_newqthdrid, price_list_id,
                 in_createdby, SYSDATE, price_list_name, site_id, product_id,
                 product_name, product_selection_id
            FROM quote_price_list
           WHERE quote_header_id = v_quoteheaderid);


      --map old product_selection to new product_selection (Hibernate)
      INSERT INTO temp_quoteversion
                  (column_name, old_value, new_value)
         (SELECT 'Product_Selection', product_selection_id,
                 product_selection_id.NEXTVAL
            FROM product_selection
           WHERE quote_header_id = v_quoteheaderid
             AND quote_site_id IN (SELECT old_value
                                     FROM temp_quoteversion
                                    WHERE column_name = 'Quote_Site')
             AND active = pkg_constants.con_activeflag_yes);

      --copy into product_selection with new quote_header_id (Hibernate)
     INSERT INTO product_selection
                 (product_selection_id, quote_id, proposition_id,
                  sub_proposition_id, product_id, created_by, created_date,
                  proposition_name, sub_proposition_name, product_name,
                  site_id, quote_header_id, active,
                  quote_site_id, order_type, order_site_detail_id,
                  quote_status, order_status)
          (SELECT new_value, v_quoteid, proposition_id,
                  sub_proposition_id, product_id, in_createdby, SYSDATE,
                  proposition_name, sub_proposition_name, product_name,
                  site_id, v_newqthdrid, pkg_constants.con_activeflag_yes,
                  quote_site_id, order_type, order_site_detail_id,
                  quote_status, order_status
             FROM product_selection
                  INNER JOIN temp_quoteversion
                ON product_selection_id = old_value
                AND column_name = 'Product_Selection'
           WHERE quote_header_id = v_quoteheaderid
             AND quote_id = v_quoteid
             AND active = pkg_constants.con_activeflag_yes);


      --map old line_item to new line_item
      INSERT INTO temp_quoteversion
                  (column_name, old_value, new_value)
         (SELECT 'Line_Item', line_item_id, line_item_id.NEXTVAL
            FROM line_item li INNER JOIN temp_quoteversion tqv
                ON li.product_selection_id = tqv.old_value
                AND column_name = 'Product_Selection'
           WHERE active = pkg_constants.con_activeflag_yes);

      --copy line_item with new header_id
      INSERT INTO line_item
                  (line_item_id, quote_header_id, VALUE, currency,
                   aggregate_price, site_id, created_by, created_date,
                   product_id, product_name, quantity, active, fallback_type,
                   part_type, priced,non_std_flag, row_id,
                   quote_site_service_id, scode,product_selection_id)
         (SELECT tqv.new_value, v_newqthdrid, VALUE, currency,
                 aggregate_price, site_id, in_createdby, SYSDATE, product_id,
                 product_name, quantity, pkg_constants.con_activeflag_yes,
                 fallback_type, part_type, priced,non_std_flag, row_id,
                 ps.new_value, scode, ps.new_value
            FROM line_item INNER JOIN temp_quoteversion tqv
                 ON line_item_id = tqv.old_value
               AND tqv.column_name = 'Line_Item'
                INNER JOIN  (SELECT column_name,old_value, new_value
                             FROM temp_quoteversion
                             WHERE column_name = 'Product_Selection') ps
                 ON product_selection_id = ps.old_value
           WHERE active = pkg_constants.con_activeflag_yes);


      -- copy line_item_details for new line_item_id
      INSERT INTO line_item_detail
                  (line_item_detail_id, line_item_id, VALUE, active,
                   created_by, created_date, attribute_mapping_id, quantity,
                   line_item_description, non_std_flag, row_id, action_code)
         (SELECT line_item_detail_id.NEXTVAL, new_value, VALUE,
                 pkg_constants.con_activeflag_yes, in_createdby, SYSDATE,
                 attribute_mapping_id, quantity, line_item_description,
                 non_std_flag, row_id, action_code
            FROM line_item_detail INNER JOIN temp_quoteversion
                 ON line_item_id = old_value AND column_name = 'Line_Item'
                 );


      --map old price_line_item_detail  to new price_line_item_detail
      INSERT INTO temp_quoteversion
                  (column_name, old_value, new_value)
         (SELECT 'Price_Line_Item_Detail', price_line_item_detail_id,
                 price_line_item_detail_id.NEXTVAL
            FROM price_line_item_detail
           WHERE line_item_id IN (SELECT old_value
                                    FROM temp_quoteversion
                                   WHERE column_name = 'Line_Item')
             AND active = pkg_constants.con_activeflag_yes);

      --copy price_line_item_details for new line_item_id
      INSERT INTO price_line_item_detail
                  (price_line_item_detail_id, price_line_item_id,
                   line_item_id, price, currency, active, created_by,
                   created_date, attribute_mapping_id, charge_type,
                   external_qref, discount, discount_type, rent_price, row_id,
                   onetime_port_discount, recurring_port_discount,
                   request_status, error_description, primary_pricing_status,
                   secondary_pricing_status
                                           --, quantity
                  )
         (SELECT tqv.new_value, price_line_item_id, li.new_value, price,
                 currency, pkg_constants.con_activeflag_yes, in_createdby,
                 SYSDATE, attribute_mapping_id, charge_type, external_qref,
                 discount, discount_type, rent_price, row_id,
                 onetime_port_discount, recurring_port_discount,
                 request_status, error_description, primary_pricing_status,
                 secondary_pricing_status
            --, quantity
          FROM   price_line_item_detail INNER JOIN temp_quoteversion tqv
                 ON price_line_item_detail_id = tqv.old_value
               AND tqv.column_name = 'Price_Line_Item_Detail'
                 INNER JOIN
                 (SELECT old_value, new_value
                    FROM temp_quoteversion
                   WHERE column_name = 'Line_Item') li
                 ON line_item_id = li.old_value
                 );


      --copy bid_detail with new quote_header id
      INSERT INTO bid_detail
                  (bid_detail_id, quote_header_id, site_id, product_id,
                   product_name, request_name, customer_committed,
                   customer_requested, volume_for_features, tier,
                   bid_manager_name, win_chance, customer_value, nsoc,
                   siebel_id, ipn_spoc_name, comments, non_standard_flag,
                   created_by, created_date, active, no_of_isdn_channels,
                   discount_approved_rejected_by, bid_manager_email_id,
                   sales_user_reason, bid_manager_reason)
          (SELECT  bid_detail_id.NEXTVAL, v_newqthdrid, site_id, product_id,
                   product_name, request_name, customer_committed,
                   customer_requested, volume_for_features, tier,
                   bid_manager_name, win_chance, customer_value, nsoc,
                   siebel_id, ipn_spoc_name, comments, non_standard_flag,
                   in_createdby, SYSDATE, pkg_constants.con_activeflag_yes,
                   no_of_isdn_channels, discount_approved_rejected_by,
                   bid_manager_email_id, sales_user_reason, bid_manager_reason
              FROM bid_detail
             WHERE quote_header_id = v_quoteheaderid);


      --copy bid_request_status for new quote_header_id
      INSERT INTO bid_request_status
                  (bid_request_status_id, quote_header_id, site_id,
                   product_id, product_name, special_bid_number, bid_status,
                   one_time_install_cost, data_build_done, bid_expiry_date,
                   monthly_recurring_cost, created_by, created_date, active,
                   non_std_bid_items, row_id, activation_due_date, tpp_url,
                   non_std_comp, instructions)
         (SELECT bid_request_status_id.NEXTVAL, v_newqthdrid, site_id,
                 product_id, product_name, special_bid_number, bid_status,
                 one_time_install_cost, data_build_done, bid_expiry_date,
                 monthly_recurring_cost, in_createdby, SYSDATE,
                 pkg_constants.con_activeflag_yes, non_std_bid_items, row_id,
                 activation_due_date, tpp_url, non_std_comp, instructions
            FROM bid_request_status
           WHERE quote_header_id = v_quoteheaderid
             AND active = pkg_constants.con_activeflag_yes);


      --map old order_header to new order_header
      INSERT INTO temp_quoteversion
                  (column_name, old_value, new_value)
         (SELECT 'Order_Header', order_header_id, order_header_id.NEXTVAL
            FROM order_header
           WHERE quote_header_id = v_quoteheaderid);

      --copy order_header with new quote_header_id
      INSERT INTO order_header
                  (order_header_id, quote_header_id, currency, created_by,
                   created_date, order_status, order_type, contract_id,
                   comments, order_form_sign_date, is_order_rejected,
                   is_order_ipclearreachoutsite, ftip_number, emailid,
                   vpn_connectivity_mode,product_name)
         (SELECT new_value, v_newqthdrid, currency, in_createdby, SYSDATE,
                 order_status, order_type, contract_id, comments,
                 order_form_sign_date, is_order_rejected,
                 is_order_ipclearreachoutsite, ftip_number, emailid,
                 vpn_connectivity_mode,product_name
            FROM order_header INNER JOIN temp_quoteversion
                 ON order_header_id = old_value
               AND column_name = 'Order_Header'
           WHERE quote_header_id = v_quoteheaderid);


      --map old order_line_item to new order_line_item
      INSERT INTO temp_quoteversion
                  (column_name, old_value, new_value)
         (SELECT 'Order_Line_Item', order_line_item_id,
                 order_line_item_id.NEXTVAL
            FROM order_line_item INNER JOIN temp_quoteversion
                 ON order_header_id = old_value
               AND column_name = 'Order_Header'
           WHERE active = pkg_constants.con_activeflag_yes);

      --copy order_line_item with new order_header_id
      INSERT INTO order_line_item
                  (order_line_item_id, order_header_id, currency, product_id,
                   product_name, site_id, active, created_by, created_date,
                   fallback_type, quantity, row_id, quote_site_service_id)
         (SELECT tqv.new_value, ohd.new_value, currency, product_id,
                 product_name, site_id, pkg_constants.con_activeflag_yes,
                 in_createdby, SYSDATE, fallback_type, quantity, row_id,
                 ps.new_value
            FROM order_line_item INNER JOIN temp_quoteversion tqv
                 ON order_line_item_id = tqv.old_value
               AND column_name = 'Order_Line_Item'
                 INNER JOIN
                 (SELECT old_value, new_value
                    FROM temp_quoteversion
                   WHERE column_name = 'Order_Header') ohd
                 ON order_header_id = ohd.old_value
                 LEFT OUTER JOIN
                 (SELECT old_value, new_value
                    FROM temp_quoteversion
                   WHERE column_name = 'Product_Selection') ps
                 ON product_selection_id = ps.old_value
           WHERE active = pkg_constants.con_activeflag_yes);


      --copy order_line_item_detail for new order_line_item_id
      INSERT INTO order_line_item_detail
                  (order_line_item_det_id, order_line_item_id,
                   attribute_mapping_id, VALUE, active, created_by,
                   created_date, quantity, row_id)
         (SELECT order_line_item_det_id.NEXTVAL, new_value,
                 attribute_mapping_id, VALUE,
                 pkg_constants.con_activeflag_yes, in_createdby, SYSDATE,
                 quantity, row_id
            FROM order_line_item_detail INNER JOIN temp_quoteversion
                 ON order_line_item_id = old_value
               AND column_name = 'Order_Line_Item'
           WHERE active = pkg_constants.con_activeflag_yes);

      COMMIT;

        SELECT  distinct customername,
                customerid,
                salesorganization,
                salesrepname,
                ordertype,
                quotestatus,
                quotename,
                contractterm,
                bidnumber,
                siebelid,
                currency,
                comments,
                exprefno
        INTO v_customername,
             v_customerid,
             v_salesorganization,
             v_salesrepname,
             v_ordertype,
             v_quotestatus,
             v_quotename,
             v_contractterm,
             v_bidnumber,
             v_siebelid,
             v_currency,
             v_comments,
             v_exprefno
        FROM ivpn_exp_quote
        WHERE quoterefid = in_expquoteid
        AND QUOTEVERSION= in_expquoteversion;

        -- Create next version of quote id in Exepdio db
        SP_IVPN_CREATE_EXP_QUOTE   ('INSERT',
                                     in_expquoteid,
                                     v_customername,
                                     v_customerid,
                                     v_salesorganization,
                                     v_salesrepname,
                                     v_ordertype,
                                     v_expversion,
                                     v_quotestatus,
                                     v_quotename,
                                     v_contractterm,
                                     v_bidnumber,
                                     v_siebelid,
                                     v_currency,
                                     v_comments,
                                     v_exprefno,
                                     SYSDATE,
                                     in_createdby,
                                     NULL,
                                     v_status);

       IF v_status = 'SUCCESS'
       THEN
           COMMIT;
            out_status := pkg_constants.con_status_success;
            out_errmsg := 'SUCCESS';
       ELSE
            ROLLBACK;
            out_status := pkg_constants.con_status_failure;
            out_errmsg := 'Insert/Update in Expedio Failed';
       END IF;


      out_newquoteheaderid := v_newqthdrid;
      out_status := pkg_constants.con_status_success;
      out_expquoteid := in_expquoteid;
      out_newexpversion := v_expversion;

   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         out_errmsg := substr(SQLERRM,1,150);
         v_sql_code := SQLCODE;
         PKG_COMMON.spi_error_log(
                                  v_quoteid,
                                  v_quoteheaderid,
                                  NULL,
                                  NULL,
                                  NULL,
                                  'SPI_QUOTEVERSION_ALL',
                                  v_sql_code,
                                  out_errmsg
                                 );
   END;
/


CREATE OR REPLACE PROCEDURE SPI_QUOTEVERSION_IFC
-- SP for quote versioning during Order Rejection / IFC
 (
      in_expquoteid          IN       quote_header.expedio_quoteid%TYPE,
      in_expquoteversion     IN       quote_header.expedio_parent_version%TYPE,
      in_exporderid          IN       expedio_response.exp_order_id%TYPE,
      in_createdby           IN       quote_header.created_by%TYPE,
      out_newquoteheaderid   OUT      quote_header.quote_header_id%TYPE,
      out_expquoteid         OUT      quote_header.expedio_quoteid%TYPE,
      out_newexpversion      OUT      quote_header.expedio_quoteversion%TYPE,
      out_status             OUT      NUMBER,
      out_errmsg             OUT      VARCHAR2
 )
   AS

      v_quoteheaderid   quote_header.quote_header_id%TYPE;
      v_quoteid         quote_header.quote_id%TYPE;
      v_version         quote_header.VERSION%TYPE;
      v_expversion      quote_header.expedio_quoteversion%TYPE;
      v_newqthdrid      quote_header.quote_header_id%TYPE;
      v_siteid          site.site_id%TYPE;
      v_neworderhdrid   order_header.order_header_id%TYPE;
      v_i               NUMBER;
      v_product_id      expedio_response.product_id%TYPE;
      v_customername    VARCHAR2(255);
      v_customerid      VARCHAR2(255);
      v_salesorganization VARCHAR2(255);
      v_salesrepname    VARCHAR2(255);
      v_ordertype       VARCHAR2(255);
      v_quotestatus     VARCHAR2(255);
      v_quotename       VARCHAR2(255);
      v_contractterm    NUMBER;
      v_bidnumber       VARCHAR2(255);
      v_siebelid        VARCHAR2(255);
      v_currency        VARCHAR2(255);
      v_comments        VARCHAR2(255);
      v_exprefno        VARCHAR2(255);
      v_status          VARCHAR2(100);
      v_product_name    VARCHAR2(60);
      v_sql_code        VARCHAR2(2000);
   BEGIN
      DELETE FROM temp_quoteversion;

      COMMIT;

      --select existing quote_header_id to copy
      SELECT DISTINCT quote_header_id, quote_id
                 INTO v_quoteheaderid, v_quoteid
                 FROM quote_header
                WHERE expedio_quoteid = in_expquoteid
                  AND expedio_quoteversion = in_expquoteversion;

      --get max of version to create new version
      SELECT CAST ((MAX (TO_NUMBER (VERSION)) + 1) AS VARCHAR2 (10)) || '.0',
                CAST ((MAX (TO_NUMBER (expedio_quoteversion)) + 1) AS VARCHAR2 (10)
                     )
             || '.0'
        INTO v_version,
             v_expversion
        FROM quote_header
       WHERE quote_id = v_quoteid;

      SELECT quote_header_id.NEXTVAL
        INTO v_newqthdrid
        FROM DUAL;

      --create new version of the quote generating new quote_header
      INSERT INTO quote_header
                  (quote_header_id, quote_id, currency_id, VERSION,
                   quote_name, contract_term, opportunity_id, bid_number,
                   comments, status, TYPE, currency, customer_signed_date,
                   contract_id, capcheck_refno, expedio_ref_id, cr_prop_id,
                   expedio_quoteid, expedio_quoteversion,
                   expedio_parent_version, created_by, created_date,bundle_status)
         (SELECT v_newqthdrid, v_quoteid, currency_id, v_version, quote_name,
                 contract_term, opportunity_id, bid_number, comments, 'Draft',
                 TYPE, currency, customer_signed_date, contract_id,
                 capcheck_refno, expedio_ref_id, cr_prop_id, in_expquoteid,
                 v_expversion, in_expquoteversion, in_createdby, SYSDATE,'Draft'
            FROM quote_header
           WHERE quote_header_id = v_quoteheaderid);

      --select the single site_id for that expedio_order_id, quote_id and quote_header_id
      SELECT site_id,product_id, product_name
        INTO v_siteid,v_product_id, v_product_name  -- Added product_name on 17/12/2010
        FROM expedio_response
       WHERE exp_order_id = in_exporderid
         AND quote_id = v_quoteid
         AND quote_header_id = v_quoteheaderid;

      -- Added on 17/12/2010
      --copy into quote_status with new quote_header_id
      INSERT INTO quote_status
                  (quote_id, quote_header_id, product_name, status, quote_status_id)
         (SELECT v_quoteid, v_newqthdrid, product_name, status, quote_status_id.NEXTVAL
            FROM quote_status
           WHERE quote_header_id = v_quoteheaderid
             AND product_name = v_product_name);

      --copy into bundle_selection with new quote_header_id
      INSERT INTO bundle_selection
                  (bundle_selection_id, quote_header_id, product_id, order_type,
                   created_by, created_date, product_name,
                   active)
          (SELECT  bundle_selection_id.NEXTVAL, v_newqthdrid, product_id, order_type,
                   in_createdby, SYSDATE, product_name,
                   pkg_constants.con_activeflag_yes
              FROM bundle_selection
             WHERE quote_header_id = v_quoteheaderid
               AND product_id = v_product_id);

      -- Added by Sujana on 18/1/2011 -- Start
      --map old quote_site_service to new quote_site_service
      /* INSERT INTO temp_quoteversion
                  (column_name, old_value, new_value)
          (SELECT 'Quote_Site_Service', quote_site_service_id,
                  quote_site_service_id.NEXTVAL
             FROM quote_site_service
            WHERE quote_header_id = v_quoteheaderid
              AND site_id = v_siteid);

      --copy into quote_site_service with new quote_header_id
      INSERT INTO quote_site_service
                  (quote_site_service_id, quote_header_id, site_id,
                   product_id, product_name, created_by, created_date,
                   service_name, PRIMARY, secondary, status)
           (SELECT new_value, v_newqthdrid, site_id,
                   product_id, product_name, in_createdby, SYSDATE,
                   service_name, PRIMARY, secondary, status
              FROM quote_site_service INNER JOIN temp_quoteversion
                ON quote_site_service_id = old_value
               AND column_name = 'Quote_Site_Service'
             WHERE quote_header_id = v_quoteheaderid); */
      -- Added by Sujana on 18/1/2011 -- End

      --map old quote_site to new quote_site for only that site which has been rejected
      INSERT INTO temp_quoteversion
                  (column_name, old_value, new_value)
         (SELECT 'Quote_Site', quote_site_id, quote_site_id.NEXTVAL
            FROM quote_site
           WHERE quote_header_id = v_quoteheaderid
             AND active = pkg_constants.con_activeflag_yes
             AND site_id = v_siteid);

      --copy into quote_site with new header_id
      INSERT INTO quote_site
                  (quote_site_id, site_id, quote_header_id, active,
                   created_by, created_date, rfo_validated)
         (SELECT new_value, site_id, v_newqthdrid,
                 pkg_constants.con_activeflag_yes, in_createdby, SYSDATE,
                 rfo_validated
            FROM quote_site INNER JOIN temp_quoteversion
                 ON quote_site_id = old_value AND column_name = 'Quote_Site'
           WHERE quote_header_id = v_quoteheaderid
             AND active = pkg_constants.con_activeflag_yes
             AND site_id = v_siteid);

      --map old product_selection to new product_selection (Hibernate)
      INSERT INTO temp_quoteversion
                  (column_name, old_value, new_value)
         (SELECT 'Product_Selection', product_selection_id,
                 product_selection_id.NEXTVAL
            FROM product_selection
           WHERE quote_header_id = v_quoteheaderid
           AND product_id=v_product_id
           AND quote_site_id IN (SELECT old_value
                                     FROM temp_quoteversion
                                    WHERE column_name = 'Quote_Site'));

      --copy into product_selection with new quote_header_id (Hibernate)
      INSERT INTO product_selection
                  (product_selection_id, quote_id, proposition_id,
                   sub_proposition_id, product_id, created_by, created_date,
                   proposition_name, sub_proposition_name, product_name,
                   site_id, quote_header_id, active,
                   quote_site_id, order_type, order_site_detail_id,
                   quote_status, order_status
                  )
         (SELECT new_value, v_quoteid, proposition_id,
                 sub_proposition_id, product_id, in_createdby, SYSDATE,
                 proposition_name, sub_proposition_name, product_name,
                 site_id, v_newqthdrid, pkg_constants.con_activeflag_yes,
                 quote_site_id, order_type, order_site_detail_id,
                 quote_status, order_status
            FROM product_selection
                INNER JOIN temp_quoteversion
                ON product_selection_id = old_value
                AND column_name = 'Product_Selection'
           WHERE quote_header_id = v_quoteheaderid
             AND quote_id = v_quoteid
             AND active = pkg_constants.con_activeflag_yes
             AND (site_id = v_siteid OR site_id IS NULL));


      --copy into quote_price_list with new quote_header_id -- Added on 10/2/2011
      INSERT INTO quote_price_list
                  (quote_price_list_id, quote_header_id, price_list_id,
                   price_list_name, site_id, product_id, product_name,
                   product_selection_id
                  )
          (SELECT quote_price_list_id.NEXTVAL, v_newqthdrid, price_list_id,
                  price_list_name, site_id, product_id, product_name,
                  ps.new_value
             FROM quote_price_list
                  INNER JOIN  (SELECT column_name,old_value, new_value
                              FROM temp_quoteversion
                              WHERE column_name = 'Product_Selection') ps
                  ON product_selection_id = ps.old_value
            WHERE quote_header_id = v_quoteheaderid
              AND site_id = v_siteid);


      --map old line_item to new line_item
      INSERT INTO temp_quoteversion
                  (column_name, old_value, new_value)
         (SELECT 'Line_Item', line_item_id, line_item_id.NEXTVAL
            FROM line_item li INNER JOIN temp_quoteversion tqv
                ON li.product_selection_id = tqv.old_value
                AND column_name = 'Product_Selection'
           WHERE active = pkg_constants.con_activeflag_yes);

      --copy line_item with new header_id
      INSERT INTO line_item
                  (line_item_id, quote_header_id, VALUE, currency,
                   aggregate_price, site_id, created_by, created_date,
                   product_id, product_name, quantity, active,
                   fallback_type, part_type, priced,non_std_flag, row_id,
                   --quote_site_service_id,
                   scode,product_selection_id,
                   prod_friendly_id) -- Added on 28/1/2011
         (SELECT tqv.new_value, v_newqthdrid, VALUE, currency,
                 aggregate_price, site_id, in_createdby, SYSDATE, product_id,
                 product_name, quantity, pkg_constants.con_activeflag_yes,
                 fallback_type, part_type, priced,non_std_flag, row_id,
                 --qss.new_value,
                 scode, ps.new_value,
                 prod_friendly_id -- Added on 28/1/2011
            FROM line_item
                 INNER JOIN temp_quoteversion tqv
                 ON line_item_id = tqv.old_value
                 AND tqv.column_name = 'Line_Item'
                 INNER JOIN  (SELECT column_name,old_value, new_value
                              FROM temp_quoteversion
                              WHERE column_name = 'Product_Selection') ps
                 ON product_selection_id = ps.old_value
                 AND ps.column_name = 'Product_Selection'
           WHERE quote_header_id = v_quoteheaderid
             AND active = pkg_constants.con_activeflag_yes);


      -- copy line_item_details for new line_item_id
      INSERT INTO line_item_detail
                  (line_item_detail_id, line_item_id, VALUE, active,
                   created_by, created_date, attribute_mapping_id, quantity,
                   line_item_description, non_std_flag, row_id, action_code)
         (SELECT line_item_detail_id.NEXTVAL, new_value, VALUE,
                 pkg_constants.con_activeflag_yes, in_createdby, SYSDATE,
                 attribute_mapping_id, quantity, line_item_description,
                 non_std_flag, row_id, action_code
            FROM line_item_detail INNER JOIN temp_quoteversion
                 ON line_item_id = old_value AND column_name = 'Line_Item'
                 );

      -- Copy bid_detail based on product_selection_id (Hibernate)
      INSERT INTO bid_detail
                  (bid_detail_id, quote_header_id, site_id, product_id,
                   product_name, request_name, customer_committed,
                   customer_requested, volume_for_features, tier,
                   bid_manager_name, win_chance, customer_value, nsoc,
                   siebel_id, ipn_spoc_name, comments, non_standard_flag,
                   created_by, created_date, active, no_of_isdn_channels,
                   discount_approved_rejected_by, bid_manager_email_id,
                   sales_user_reason, bid_manager_reason,
                   product_selection_id)
         (SELECT bid_detail_id.NEXTVAL, v_newqthdrid, site_id, product_id,
                 product_name, request_name, customer_committed,
                 customer_requested, volume_for_features, tier,
                 bid_manager_name, win_chance, customer_value, nsoc,
                 siebel_id, ipn_spoc_name, comments, non_standard_flag,
                 in_createdby, SYSDATE, pkg_constants.con_activeflag_yes,
                 no_of_isdn_channels, discount_approved_rejected_by,
                 bid_manager_email_id, sales_user_reason, bid_manager_reason,
                 ps.new_value
            FROM bid_detail
                 INNER JOIN (SELECT column_name, old_value, new_value
                             FROM temp_quoteversion
                             WHERE column_name = 'Product_Selection') ps
                 ON product_selection_id = ps.old_value
            WHERE active = pkg_constants.con_activeflag_yes);

      -- Copy bid_request_status based on product_selection_id (Hibernate)
      INSERT INTO bid_request_status
                  (bid_request_status_id, quote_header_id, site_id,
                   product_id, product_name, special_bid_number, bid_status,
                   one_time_install_cost, data_build_done, bid_expiry_date,
                   monthly_recurring_cost, created_by, created_date,
                   active, non_std_bid_items, row_id,
                   activation_due_date, tpp_url, non_std_comp, instructions,
                   product_selection_id)
         (SELECT bid_request_status_id.NEXTVAL, v_newqthdrid, site_id,
                 product_id, product_name, special_bid_number, bid_status,
                 one_time_install_cost, data_build_done, bid_expiry_date,
                 monthly_recurring_cost, in_createdby, SYSDATE,
                 pkg_constants.con_activeflag_yes, non_std_bid_items, row_id,
                 activation_due_date, tpp_url, non_std_comp, instructions,
                 ps.new_value
            FROM bid_request_status
                 INNER JOIN (SELECT column_name, old_value, new_value
                             FROM temp_quoteversion
                             WHERE column_name = 'Product_Selection') ps
                 ON product_selection_id = ps.old_value
            WHERE active = pkg_constants.con_activeflag_yes);


      --map old order_header to new order_header
      INSERT INTO temp_quoteversion
                  (column_name, old_value, new_value)
         (SELECT 'Order_Header', order_header_id, order_header_id.NEXTVAL
            FROM order_header
           WHERE quote_header_id = v_quoteheaderid);

      --copy order_header with new quote_header_id
      INSERT INTO order_header
                  (order_header_id, quote_header_id, currency, created_by,
                   created_date, order_status, order_type, contract_id,
                   comments, order_form_sign_date, is_order_rejected,
                   is_order_ipclearreachoutsite, ftip_number, emailid,
                   vpn_connectivity_mode, expedio_parent_orderid, product_name)
         (SELECT new_value, v_newqthdrid, currency, in_createdby, SYSDATE,
                 'Draft', order_type, contract_id, comments,
                 order_form_sign_date, is_order_rejected,
                 is_order_ipclearreachoutsite, ftip_number, emailid,
                 vpn_connectivity_mode, in_exporderid, product_name
            FROM order_header INNER JOIN temp_quoteversion
                 ON order_header_id = old_value
               AND column_name = 'Order_Header'
           WHERE quote_header_id = v_quoteheaderid);


      --map old order_line_item to new order_line_item
      INSERT INTO temp_quoteversion
                  (column_name, old_value, new_value)
         (SELECT 'Order_Line_Item', order_line_item_id,
                 order_line_item_id.NEXTVAL
            FROM order_line_item INNER JOIN temp_quoteversion
                 ON order_header_id = old_value
               AND column_name = 'Order_Header'
           WHERE active = pkg_constants.con_activeflag_yes
             AND site_id = v_siteid);

      --copy order_line_item with new order_header_id
      INSERT INTO order_line_item
                  (order_line_item_id, order_header_id, currency, product_id,
                   product_name, site_id, active, created_by, created_date,
                   fallback_type, quantity, row_id, product_selection_id,
                   prod_friendly_id) -- Added on 28/1/2011
         (SELECT tqv.new_value, ohd.new_value, currency, product_id,
                 product_name, site_id, pkg_constants.con_activeflag_yes,
                 in_createdby, SYSDATE, fallback_type, quantity, row_id,
                 ps.new_value,
                 prod_friendly_id -- Added on 28/1/2011
            FROM order_line_item INNER JOIN temp_quoteversion tqv
                 ON order_line_item_id = tqv.old_value
               AND column_name = 'Order_Line_Item'
                 INNER JOIN
                 (SELECT old_value, new_value
                    FROM temp_quoteversion
                   WHERE column_name = 'Order_Header') ohd
                 ON order_header_id = ohd.old_value
                 LEFT OUTER JOIN
                 (SELECT old_value, new_value
                    FROM temp_quoteversion
                   WHERE column_name = 'Product_Selection') ps
                 ON product_selection_id = ps.old_value
           WHERE active = pkg_constants.con_activeflag_yes);

      --copy order_line_item_detail for new order_line_item_id
      INSERT INTO order_line_item_detail
                  (order_line_item_det_id, order_line_item_id,
                   attribute_mapping_id, VALUE, active, created_by,
                   created_date, quantity, row_id)
         (SELECT order_line_item_det_id.NEXTVAL, new_value,
                 attribute_mapping_id, VALUE,
                 pkg_constants.con_activeflag_yes, in_createdby, SYSDATE,
                 quantity, row_id
            FROM order_line_item_detail INNER JOIN temp_quoteversion
                 ON order_line_item_id = old_value
               AND column_name = 'Order_Line_Item'
           WHERE active = pkg_constants.con_activeflag_yes);

        SELECT  distinct customername,
                customerid,
                salesorganization,
                salesrepname,
                ordertype,
                quotestatus,
                quotename,
                contractterm,
                bidnumber,
                siebelid,
                currency,
                comments,
                exprefno
        INTO v_customername,
             v_customerid,
             v_salesorganization,
             v_salesrepname,
             v_ordertype,
             v_quotestatus,
             v_quotename,
             v_contractterm,
             v_bidnumber,
             v_siebelid,
             v_currency,
             v_comments,
             v_exprefno
        FROM ivpn_exp_quote
        WHERE quoterefid = in_expquoteid
        AND QUOTEVERSION= in_expquoteversion;

        SP_IVPN_CREATE_EXP_QUOTE   ('INSERT',
                                     in_expquoteid,
                                     v_customername,
                                     v_customerid,
                                     v_salesorganization,
                                     v_salesrepname,
                                     v_ordertype,
                                     v_expversion,
                                     v_quotestatus,
                                     v_quotename,
                                     v_contractterm,
                                     v_bidnumber,
                                     v_siebelid,
                                     v_currency,
                                     v_comments,
                                     v_exprefno,
                                     SYSDATE,
                                     in_createdby,
                                     NULL,
                                     v_status);
       IF v_status = 'SUCCESS'
       THEN
       COMMIT;
            out_status := pkg_constants.con_status_success;
            out_errmsg := 'SUCCESS';
       ELSE
            ROLLBACK;
            out_status := pkg_constants.con_status_failure;
            out_errmsg := 'Insert/Update in Expedio Failed';
       END IF;
      out_newquoteheaderid := v_newqthdrid;
      out_status := pkg_constants.con_status_success;
      out_expquoteid := in_expquoteid;
      out_newexpversion := v_expversion;

   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         out_errmsg := substr(SQLERRM,1,150);
         v_sql_code := SQLCODE;
         PKG_COMMON.spi_error_log(
                                  v_quoteid,
                                  v_quoteheaderid,
                                  NULL,
                                  NULL,
                                  NULL,
                                  'SPI_QUOTEVERSION_IFC',
                                  v_sql_code,
                                  out_errmsg
                                 );
   END;
/


CREATE OR REPLACE PROCEDURE SPI_QUOTEVERSION_ORDER_V1
 (
-- For order Rejection / IFC quote_versioning
      in_expquoteid          IN       quote_header.expedio_quoteid%TYPE,
      in_expquoteversion     IN       quote_header.expedio_parent_version%TYPE,
      in_exporderid          IN       expedio_response.exp_order_id%TYPE,
      in_createdby           IN       quote_header.created_by%TYPE,
      out_newquoteheaderid   OUT      quote_header.quote_header_id%TYPE,
      out_expquoteid         OUT      quote_header.expedio_quoteid%TYPE,
      out_newexpversion      OUT      quote_header.expedio_quoteversion%TYPE,
      out_status             OUT      NUMBER,
      out_errmsg             OUT      VARCHAR2
   )
   AS
      v_quoteheaderid   quote_header.quote_header_id%TYPE;
      v_quoteid         quote_header.quote_id%TYPE;
      v_version         quote_header.VERSION%TYPE;
      v_expversion      quote_header.expedio_quoteversion%TYPE;
      v_newqthdrid      quote_header.quote_header_id%TYPE;
      v_siteid          site.site_id%TYPE;
      v_neworderhdrid   order_header.order_header_id%TYPE;
      v_i               NUMBER;
      v_product_id      expedio_response.product_id%TYPE;
      v_customername    VARCHAR2(255);
      v_customerid      VARCHAR2(255);
      v_salesorganization VARCHAR2(255);
      v_salesrepname    VARCHAR2(255);
      v_ordertype       VARCHAR2(255);
      v_quotestatus     VARCHAR2(255);
      v_quotename       VARCHAR2(255);
      v_contractterm    NUMBER;
      v_bidnumber       VARCHAR2(255);
      v_siebelid        VARCHAR2(255);
      v_currency        VARCHAR2(255);
      v_comments        VARCHAR2(255);
      v_exprefno        VARCHAR2(255);
      v_status          VARCHAR2(100);
      v_product_name    VARCHAR2(60);
   BEGIN
      DELETE FROM temp_quoteversion;

      COMMIT;

      --select existing quote_header_id to copy
      SELECT DISTINCT quote_header_id, quote_id
                 INTO v_quoteheaderid, v_quoteid
                 FROM quote_header
                WHERE expedio_quoteid = in_expquoteid
                  AND expedio_quoteversion = in_expquoteversion;

      --get max of version to create new version
      SELECT CAST ((MAX (TO_NUMBER (VERSION)) + 1) AS VARCHAR2 (10)) || '.0',
                CAST ((MAX (TO_NUMBER (expedio_quoteversion)) + 1) AS VARCHAR2 (10)
                     )
             || '.0'
        INTO v_version,
             v_expversion
        FROM quote_header
       WHERE quote_id = v_quoteid;

      SELECT quote_header_id.NEXTVAL
        INTO v_newqthdrid
        FROM DUAL;

      --create new version of the quote generating new quote_header
      INSERT INTO quote_header
                  (quote_header_id, quote_id, currency_id, VERSION,
                   quote_name, contract_term, opportunity_id, bid_number,
                   comments, status, TYPE, currency, customer_signed_date,
                   contract_id, capcheck_refno, expedio_ref_id, cr_prop_id,
                   expedio_quoteid, expedio_quoteversion,
                   expedio_parent_version, created_by, created_date,bundle_status)
         (SELECT v_newqthdrid, v_quoteid, currency_id, v_version, quote_name,
                 contract_term, opportunity_id, bid_number, comments, 'Draft',
                 TYPE, currency, customer_signed_date, contract_id,
                 capcheck_refno, expedio_ref_id, cr_prop_id, in_expquoteid,
                 v_expversion, in_expquoteversion, in_createdby, SYSDATE,'Draft'
            FROM quote_header
           WHERE quote_header_id = v_quoteheaderid);

      --select the single site_id for that expedio_order_id, quote_id and quote_header_id
      SELECT site_id,product_id, product_name
        INTO v_siteid,v_product_id, v_product_name  -- Added product_name on 17/12/2010
        FROM expedio_response
       WHERE exp_order_id = in_exporderid
         AND quote_id = v_quoteid
         AND quote_header_id = v_quoteheaderid;

      -- Added on 17/12/2010
      --copy into quote_status with new quote_header_id
      INSERT INTO quote_status
                  (quote_id, quote_header_id, product_name, status, quote_status_id)
         (SELECT v_quoteid, v_newqthdrid, product_name, status, quote_status_id.NEXTVAL
            FROM quote_status
           WHERE quote_header_id = v_quoteheaderid
             AND product_name = v_product_name);

      --copy into bundle_selection with new quote_header_id
      INSERT INTO bundle_selection
                  (bundle_selection_id, quote_header_id, product_id, order_type,
                   created_by, created_date, product_name,
                   active)
          (SELECT  bundle_selection_id.NEXTVAL, v_newqthdrid, product_id, order_type,
                   in_createdby, SYSDATE, product_name,
                   pkg_constants.con_activeflag_yes
              FROM bundle_selection
             WHERE quote_header_id = v_quoteheaderid
               AND product_id = v_product_id);

      -- Added by Sujana on 18/1/2011 -- Start
      --map old quote_site_service to new quote_site_service
      INSERT INTO temp_quoteversion
                  (column_name, old_value, new_value)
          (SELECT 'Quote_Site_Service', quote_site_service_id,
                  quote_site_service_id.NEXTVAL
             FROM quote_site_service
            WHERE quote_header_id = v_quoteheaderid
              AND site_id = v_siteid);

      --copy into quote_site_service with new quote_header_id
      INSERT INTO quote_site_service
                  (quote_site_service_id, quote_header_id, site_id,
                   product_id, product_name, created_by, created_date,
                   service_name, PRIMARY, secondary, status)
           (SELECT new_value, v_newqthdrid, site_id,
                   product_id, product_name, in_createdby, SYSDATE,
                   service_name, PRIMARY, secondary, status
              FROM quote_site_service INNER JOIN temp_quoteversion
                ON quote_site_service_id = old_value
               AND column_name = 'Quote_Site_Service'
             WHERE quote_header_id = v_quoteheaderid);
      -- Added by Sujana on 18/1/2011 -- End

      --map old quote_site to new quote_site for only that site which has been rejected
      INSERT INTO temp_quoteversion
                  (column_name, old_value, new_value)
         (SELECT 'Quote_Site', quote_site_id, quote_site_id.NEXTVAL
            FROM quote_site
           WHERE quote_header_id = v_quoteheaderid
             AND active = pkg_constants.con_activeflag_yes
             AND site_id = v_siteid);

      --copy into quote_site with new header_id
      INSERT INTO quote_site
                  (quote_site_id, site_id, quote_header_id, active,
                   created_by, created_date, rfo_validated)
         (SELECT new_value, site_id, v_newqthdrid,
                 pkg_constants.con_activeflag_yes, in_createdby, SYSDATE,
                 rfo_validated
            FROM quote_site INNER JOIN temp_quoteversion
                 ON quote_site_id = old_value AND column_name = 'Quote_Site'
           WHERE quote_header_id = v_quoteheaderid
             AND active = pkg_constants.con_activeflag_yes
             AND site_id = v_siteid);

--map old product_selection to new product_selection (Hibernate)
      INSERT INTO temp_quoteversion
                  (column_name, old_value, new_value)
         (SELECT 'Product_Selection', product_selection_id,
                 product_selection_id.NEXTVAL
            FROM product_selection
           WHERE quote_header_id = v_quoteheaderid
           AND product_id=v_product_id
           AND quote_site_id IN (SELECT old_value
                                     FROM temp_quoteversion
                                    WHERE column_name = 'Quote_Site'));

      --copy into product_selection with new quote_header_id (Hibernate)
      INSERT INTO product_selection
                  (product_selection_id, quote_id, proposition_id,
                   sub_proposition_id, product_id, created_by, created_date,
                   proposition_name, sub_proposition_name, product_name,
                   site_id, quote_header_id, active,
                   quote_site_id, order_type, order_site_detail_id,
                   quote_status, order_status
                  )
         (SELECT new_value, v_quoteid, proposition_id,
                 sub_proposition_id, product_id, in_createdby, SYSDATE,
                 proposition_name, sub_proposition_name, product_name,
                 site_id, v_newqthdrid, pkg_constants.con_activeflag_yes,
                 quote_site_id, order_type, order_site_detail_id,
                 quote_status, order_status
            FROM product_selection
                INNER JOIN temp_quoteversion
                ON product_selection_id = old_value
                AND column_name = 'Product_Selection'
           WHERE quote_header_id = v_quoteheaderid
             AND quote_id = v_quoteid
             AND active = pkg_constants.con_activeflag_yes
             AND (site_id = v_siteid OR site_id IS NULL));

      --map old line_item to new line_item
      INSERT INTO temp_quoteversion
                  (column_name, old_value, new_value)
         (SELECT 'Line_Item', line_item_id, line_item_id.NEXTVAL
            FROM line_item li INNER JOIN temp_quoteversion tqv
                ON li.product_selection_id = tqv.old_value
                AND column_name = 'Product_Selection'
           WHERE active = pkg_constants.con_activeflag_yes);

      --copy line_item with new header_id
      INSERT INTO line_item
                  (line_item_id, quote_header_id, VALUE, currency,
                   aggregate_price, site_id, created_by, created_date,
                   product_id, product_name, quantity, active,
                   fallback_type, part_type, priced,non_std_flag, row_id,
                   quote_site_service_id, scode,product_selection_id)
         (SELECT tqv.new_value, v_newqthdrid, VALUE, currency,
                 aggregate_price, site_id, in_createdby, SYSDATE, product_id,
                 product_name, quantity, pkg_constants.con_activeflag_yes,
                 fallback_type, part_type, priced,non_std_flag, row_id,
                 qss.new_value, scode, ps.new_value
            FROM line_item
                 INNER JOIN temp_quoteversion tqv
                 ON line_item_id = tqv.old_value
                 AND tqv.column_name = 'Line_Item'
                 INNER JOIN  (SELECT column_name,old_value, new_value
                              FROM temp_quoteversion
                              WHERE column_name = 'Product_Selection') ps
                 ON product_selection_id = ps.old_value
                 AND ps.column_name = 'Product_Selection'
                 -- Added by Sujana on 18/1/2011 - Start
                 INNER JOIN  (SELECT column_name,old_value, new_value
                              FROM temp_quoteversion
                              WHERE column_name = 'Quote_Site_Service') qss
                 ON quote_site_service_id = qss.old_value
                 AND qss.column_name = 'Quote_Site_Service'
           WHERE quote_header_id = v_quoteheaderid
                 -- Added by Sujana on 18/1/2011 - End
             AND active = pkg_constants.con_activeflag_yes);

--Add an extra condition on quote header id

      -- copy line_item_details for new line_item_id
      INSERT INTO line_item_detail
                  (line_item_detail_id, line_item_id, VALUE, active,
                   created_by, created_date, attribute_mapping_id, quantity,
                   line_item_description, non_std_flag, row_id, action_code)
         (SELECT line_item_detail_id.NEXTVAL, new_value, VALUE,
                 pkg_constants.con_activeflag_yes, in_createdby, SYSDATE,
                 attribute_mapping_id, quantity, line_item_description,
                 non_std_flag, row_id, action_code
            FROM line_item_detail INNER JOIN temp_quoteversion
                 ON line_item_id = old_value AND column_name = 'Line_Item'
                 );

      --copy bid_detail with new quote_header id
      INSERT INTO bid_detail
                  (bid_detail_id, quote_header_id, site_id, product_id,
                   product_name, request_name, customer_committed,
                   customer_requested, volume_for_features, tier,
                   bid_manager_name, win_chance, customer_value, nsoc,
                   siebel_id, ipn_spoc_name, comments, non_standard_flag,
                   created_by, created_date, active, no_of_isdn_channels,
                   discount_approved_rejected_by, bid_manager_email_id,
                   sales_user_reason, bid_manager_reason)
         (SELECT bid_detail_id.NEXTVAL, v_newqthdrid, site_id, product_id,
                 product_name, request_name, customer_committed,
                 customer_requested, volume_for_features, tier,
                 bid_manager_name, win_chance, customer_value, nsoc,
                 siebel_id, ipn_spoc_name, comments, non_standard_flag,
                 in_createdby, SYSDATE, pkg_constants.con_activeflag_yes,
                 no_of_isdn_channels, discount_approved_rejected_by,
                 bid_manager_email_id, sales_user_reason, bid_manager_reason
            FROM bid_detail
           WHERE quote_header_id = v_quoteheaderid
             AND active = pkg_constants.con_activeflag_yes
             AND site_id = v_siteid);

      --copy bid_request_status for new quote_header_id
      INSERT INTO bid_request_status
                  (bid_request_status_id, quote_header_id, site_id,
                   product_id, product_name, special_bid_number, bid_status,
                   one_time_install_cost, data_build_done, bid_expiry_date,
                   monthly_recurring_cost, created_by, created_date, active,
                   non_std_bid_items, row_id, activation_due_date, tpp_url,
                   non_std_comp, instructions)
         (SELECT bid_request_status_id.NEXTVAL, v_newqthdrid, site_id,
                 product_id, product_name, special_bid_number, bid_status,
                 one_time_install_cost, data_build_done, bid_expiry_date,
                 monthly_recurring_cost, in_createdby, SYSDATE,
                 pkg_constants.con_activeflag_yes, non_std_bid_items, row_id,
                 activation_due_date, tpp_url, non_std_comp, instructions
            FROM bid_request_status
           WHERE quote_header_id = v_quoteheaderid
             AND active = pkg_constants.con_activeflag_yes
             AND site_id = v_siteid);


--map old order_header to new order_header
      INSERT INTO temp_quoteversion
                  (column_name, old_value, new_value)
         (SELECT 'Order_Header', order_header_id, order_header_id.NEXTVAL
            FROM order_header
           WHERE quote_header_id = v_quoteheaderid);

      --copy order_header with new quote_header_id
      INSERT INTO order_header
                  (order_header_id, quote_header_id, currency, created_by,
                   created_date, order_status, order_type, contract_id,
                   comments, order_form_sign_date, is_order_rejected,
                   is_order_ipclearreachoutsite, ftip_number, emailid,
                   vpn_connectivity_mode, expedio_parent_orderid)
         (SELECT new_value, v_newqthdrid, currency, in_createdby, SYSDATE,
                 'Draft', order_type, contract_id, comments,
                 order_form_sign_date, is_order_rejected,
                 is_order_ipclearreachoutsite, ftip_number, emailid,
                 vpn_connectivity_mode, in_exporderid
            FROM order_header INNER JOIN temp_quoteversion
                 ON order_header_id = old_value
               AND column_name = 'Order_Header'
           WHERE quote_header_id = v_quoteheaderid);


--map old order_line_item to new order_line_item
      INSERT INTO temp_quoteversion
                  (column_name, old_value, new_value)
         (SELECT 'Order_Line_Item', order_line_item_id,
                 order_line_item_id.NEXTVAL
            FROM order_line_item INNER JOIN temp_quoteversion
                 ON order_header_id = old_value
               AND column_name = 'Order_Header'
           WHERE active = pkg_constants.con_activeflag_yes
             AND site_id = v_siteid);

      --copy order_line_item with new order_header_id
      INSERT INTO order_line_item
                  (order_line_item_id, order_header_id, currency, product_id,
                   product_name, site_id, active, created_by, created_date,
                   fallback_type, quantity, row_id, quote_site_service_id)
         (SELECT tqv.new_value, ohd.new_value, currency, product_id,
                 product_name, site_id, pkg_constants.con_activeflag_yes,
                 in_createdby, SYSDATE, fallback_type, quantity, row_id,
                 ps.new_value
            FROM order_line_item INNER JOIN temp_quoteversion tqv
                 ON order_line_item_id = tqv.old_value
               AND column_name = 'Order_Line_Item'
                 INNER JOIN
                 (SELECT old_value, new_value
                    FROM temp_quoteversion
                   WHERE column_name = 'Order_Header') ohd
                 ON order_header_id = ohd.old_value
                 LEFT OUTER JOIN
                 (SELECT old_value, new_value
                    FROM temp_quoteversion
                   WHERE column_name = 'Product_Selection') ps
                 ON product_selection_id = ps.old_value
           WHERE active = pkg_constants.con_activeflag_yes);

      --copy order_line_item_detail for new order_line_item_id
      INSERT INTO order_line_item_detail
                  (order_line_item_det_id, order_line_item_id,
                   attribute_mapping_id, VALUE, active, created_by,
                   created_date, quantity, row_id)
         (SELECT order_line_item_det_id.NEXTVAL, new_value,
                 attribute_mapping_id, VALUE,
                 pkg_constants.con_activeflag_yes, in_createdby, SYSDATE,
                 quantity, row_id
            FROM order_line_item_detail INNER JOIN temp_quoteversion
                 ON order_line_item_id = old_value
               AND column_name = 'Order_Line_Item'
           WHERE active = pkg_constants.con_activeflag_yes);

        SELECT  distinct customername,
                customerid,
                salesorganization,
                salesrepname,
                ordertype,
                quotestatus,
                quotename,
                contractterm,
                bidnumber,
                siebelid,
                currency,
                comments,
                exprefno
        INTO v_customername,
             v_customerid,
             v_salesorganization,
             v_salesrepname,
             v_ordertype,
             v_quotestatus,
             v_quotename,
             v_contractterm,
             v_bidnumber,
             v_siebelid,
             v_currency,
             v_comments,
             v_exprefno
        FROM ivpn_exp_quote
        WHERE quoterefid = in_expquoteid
        AND QUOTEVERSION= in_expquoteversion;

        SP_IVPN_CREATE_EXP_QUOTE   ('INSERT',
                                     in_expquoteid,
                                     v_customername,
                                     v_customerid,
                                     v_salesorganization,
                                     v_salesrepname,
                                     v_ordertype,
                                     v_expversion,
                                     v_quotestatus,
                                     v_quotename,
                                     v_contractterm,
                                     v_bidnumber,
                                     v_siebelid,
                                     v_currency,
                                     v_comments,
                                     v_exprefno,
                                     SYSDATE,
                                     in_createdby,
                                     NULL,
                                     v_status);
       IF v_status = 'SUCCESS'
       THEN
       COMMIT;
            out_status := pkg_constants.con_status_success;
            out_errmsg := 'SUCCESS';
       ELSE
            ROLLBACK;
            out_status := pkg_constants.con_status_failure;
            out_errmsg := 'Insert/Update in Expedio Failed';
       END IF;
      out_newquoteheaderid := v_newqthdrid;
      out_status := pkg_constants.con_status_success;
      out_expquoteid := in_expquoteid;
      out_newexpversion := v_expversion;

   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         out_errmsg := SQLERRM;
   END;
/


CREATE OR REPLACE PROCEDURE SPI_QUOTE_CONF_OBJ_R9_subj (
   in_quoteid           IN     quote_header.quote_id%TYPE,
   in_quoteheaderid     IN     quote_header.quote_header_id%TYPE,
   in_siteid            IN     site_detials_tab,
   in_line_item         IN     line_item_tbl,
   in_attributelevel    IN     VARCHAR2,
   in_createdby         IN     quote_site_service.created_by%TYPE,
   in_bfg_customer_id   in     customer.bfg_customer_id%type,
   in_modifyflag        in     VARCHAR2,
   out_status           out    NUMBER ,
   out_errmsg           out    VARCHAR2)
AS
/******************************************************************************
   NAME:       SQE MX Quote Confi.
   PURPOSE:    This SP is used to save the detils for the Quote Configuration Detials for
               IPSEC and SSL for MX -R9
   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        08/12/2010    Archana        1. part of exception handling
   2.0        13/12/2010    Suman          2. Modification of the SP to save the Expedio site.
   3.0        21/12/2010    Suman          3. Modification of the SP to deactive the data.
 ******************************************************************************/
   v_site_id                NUMBER (15);
   v_site_name              VARCHAR2 (255);
   v_site_country           VARCHAR2 (255);
   v_site_city              VARCHAR2 (22);
   v_count_site_id          NUMBER ;
   /*--SITE PARAMTER*/
   in_customerid            NUMBER;
   in_countryid             NUMBER;
   in_county                VARCHAR2 (255);
   in_additionalsite        VARCHAR2 (200);
   in_pricontact            VARCHAR2 (200);
   in_bfgsiteid             NUMBER;
   in_bfgsitename           VARCHAR2 (100);
   in_mainsiteflag          char (1);
   out_siteid               NUMBER;
   in_modifiedby            NUMBER;
   /*contact information vairable*/
   v_local_central_site     site.site_id%TYPE;
   v_sqe_customer_id        customer.customer_id%TYPE;
   v_bfg_site_id            site.bfg_site_id%TYPE;
   v_site_name_sqe          site.NAME%TYPE;
   v_bfg_location_id        site.bfg_subloc_id%TYPE;
   v_bfg_address_id         site.bfg_address_id%TYPE;
   v_address_line1          address.address_line1%TYPE;
   v_address_line2          address.address_line2%TYPE;
   v_floor                  address.floor%TYPE;
   v_room                   address.room%TYPE;
   v_city                   address.city%TYPE;
   v_state                  address.state%TYPE;
   v_country                country.NAME%TYPE;
   v_post                   address.post_zip_code%TYPE;
   v_phone                  contact.phone_number%TYPE;
   v_email                  contact.email%TYPE;
   v_expedio_site_id        site.expedio_site_id%TYPE;
   v_bfg_contact_id         site.bfg_site_contact_id%TYPE;
   v_first_name             contact.first_name%TYPE;
   v_last_name              contact.last_name%TYPE;
   v_phone_number           contact.phone_number%TYPE;
   v_job_title              contact.job_title%TYPE;
   v_fax                    contact.fax%TYPE;
   v_contact_type           contact.contact_type%TYPE;
   v_country_id             country.country_id%TYPE;
   v_mobile_number          contact.mobile_number%TYPE;
   v_primary_contacts       VARCHAR2 (2000) := '';
   v_quote_site_id          quote_site.site_id%TYPE;
   /* Site Updat Variables */
   v_sqe_site_id            site.site_id%TYPE;
   v_line_item              line_item_tbl := line_item_tbl ();
   v_site_type             VARCHAR2(20);
   j                        NUMBER := 0;
   v_attribute_mapping_id   NUMBER := 0;
   v_product_name           line_item.product_name%TYPE;
   v_line_item_id           line_item.line_item_id%TYPE;
   v_line_item_id1          NUMBER;
   v_line_item_count        NUMBER;
   v_sql_code     NUMBER;
   v_sql_errm     VARCHAR2(150);
   V_EXPE_SITE_ID VARCHAR2(100);
   V_MAINSITEFLAG NUMBER;
   V_PRODUCTNAME  NUMBER;
   v_error_location         NUMBER(10) ;
BEGIN
    BEGIN
      FOR j IN in_siteid.FIRST .. in_siteid.LAST
      loop
         FOR lineitem IN in_line_item.FIRST .. in_line_item.LAST
         loop
            FOR checklineitemid
               IN (
                   SELECT DISTINCT line_item_id, li.site_id
                                   FROM line_item li
                                  WHERE     li.quote_header_id = in_quoteheaderid
                                        AND li.product_id = in_line_item (lineitem).o_pid
                                        AND li.active = pkg_constants.con_activeflag_yes
                                        AND upper (li.product_name) = upper (in_line_item (lineitem).o_product_name)
                  )
          loop
               UPDATE price_line_item_detail plid
                  SET plid.active = pkg_constants.con_activeflag_no,
                      modified_by = in_modifiedby,
                      modified_date = SYSDATE ()
                WHERE plid.line_item_id = checklineitemid.line_item_id
                      AND active = pkg_constants.con_activeflag_yes;
               UPDATE line_item_detail lid
                  SET active = pkg_constants.con_activeflag_no,
                      modified_by = in_modifiedby,
                      modified_date = SYSDATE ()
                WHERE lid.line_item_id = checklineitemid.line_item_id
                      AND active = pkg_constants.con_activeflag_yes;
               UPDATE line_item
                  SET active = pkg_constants.con_activeflag_no,
                      modified_by = in_modifiedby,
                      modified_date = SYSDATE ()
                WHERE     quote_header_id = in_quoteheaderid
                      AND line_item_id = checklineitemid.line_item_id
                      AND active = pkg_constants.con_activeflag_yes;
             for checklineitemid2
                     IN (  SELECT distinct li.site_id
                           FROM line_item li
                           WHERE    li.quote_header_id = in_quoteheaderid
                                AND li.product_id = in_line_item (lineitem).o_pid
                                and li.active = pkg_constants.con_activeflag_yes
                        )
                loop
                  IF checklineitemid2.SITE_ID IS NULL THEN
                     update quote_site
                        set      active =  pkg_constants.con_activeflag_no
                        where     site_id = checklineitemid2.site_id
                            AND quote_header_id =in_quoteheaderid
                            AND active = pkg_constants.con_activeflag_yes;
                 END IF;
              end loop;
            END loop;
         END loop;
      END loop;
   exception
      WHEN no_data_found
      THEN
         out_status := pkg_constants.con_status_success;
         out_errmsg := 'no line item';
      WHEN others
      THEN
         out_errmsg := sqlerrm;
   END;
   v_error_location := 10;
   /*getting Customer_id */
   SELECT DISTINCT quote.customer_id
     INTO in_customerid
     FROM    quote_header
    INNER JOIN quote
          ON quote.quote_id = quote_header.quote_id
    WHERE quote_header_id = in_quoteheaderid AND quote.quote_id = in_quoteid;
   /*checking the site object for loop*/
   FOR site_cusr IN in_siteid.FIRST .. in_siteid.LAST
   loop
      IF (in_siteid (site_cusr).site_id IS NOT NULL)
      THEN
         v_site_id := in_siteid (site_cusr).site_id;
         v_site_name := in_siteid (site_cusr).site_name;
         v_site_country := in_siteid (site_cusr).site_country;
         v_site_city := in_siteid (site_cusr).site_city;
         in_countryid := in_siteid (site_cusr).site_country; ---commented above and uncommented below...because the country id was passed in place of country name

    v_error_location := 20;
    SELECT  count(1) INTO v_sqe_site_id
        FROM site  WHERE bfg_site_id = v_site_id
             OR (to_number(to_char(expedio_site_id)) =to_number(trim(to_char(v_site_id)))
              AND REGEXP_LIKE(expedio_site_id,'^[0-9]'));

         /*validation on local sit is valid or not*/
         IF v_sqe_site_id >0 THEN
         BEGIN
         v_error_location := 30;
            SELECT DISTINCT site_id
              INTO v_count_site_id
              FROM site
             WHERE bfg_site_id = v_site_id
             OR (to_number(to_char(expedio_site_id)) =to_number(trim(to_char(v_site_id)))
              AND REGEXP_LIKE(expedio_site_id,'^[0-9]'));

         exception
            WHEN no_data_found
            THEN
               v_count_site_id := 0;
            WHEN others
            THEN
            out_status := pkg_constants.con_status_failure;
            out_errmsg := sqlerrm;
         END;
         ELSE
         v_count_site_id :=0;
         END IF;
         v_error_location := 40;
         SELECT
                ibes.bfg_site_id, ibes.expedio_site_id,
                ibes.site_name,
                ibes.bfg_location_id,ibes.bfg_address_id,
                ibes.street_name AS "Address_line2", ibes.premise_name AS "Address_line1",
                ibes.floor, ibes.room, ibes.city, ibes.county AS "State",
                ibes.country, ibes.post_code, ibes.phone_number,
                ibec.email, ibes.expedio_site_id,
                ibec.bfg_contact_id, ibec.first_name,  ibec.last_name,
                ibec.phone_number, ibec.job_title,
                ibec.fax, ibec.email,
                ibec.contact_type,  ibec.mobile_number,ibes.sit_type
           INTO v_bfg_site_id, v_expe_site_id,
                v_site_name,
                v_bfg_location_id,
                v_bfg_address_id,
                v_address_line1, v_address_line2,
                v_floor, v_room, v_city, v_state, v_country,
                v_post, v_phone, v_email,
                v_expedio_site_id,
                v_bfg_contact_id,
                v_first_name, v_last_name, v_phone_number,
                v_job_title,
                v_fax,
                v_email,
                v_contact_type,
                v_mobile_number,
                v_site_type
           FROM ivpn_bfg_expedio_sites ibes, ivpn_bfg_expedio_contacts ibec
          WHERE     (ibes.bfg_site_id  = ibec.bfg_site_id
                                        OR ibes.expedio_site_id  = ibec.expedio_site_id)
                AND ibes.bfg_customer_id = in_bfg_customer_id
                AND nvl(ibes.bfg_site_id,ibes.expedio_site_id) = v_site_id
                AND ibec.ROLE = 'Site Primary Contact';

         v_primary_contacts :=
               v_first_name  || '|'  ||
               v_last_name || '|'
              || v_job_title
              || '|'
              || v_email
              || '|'
              || v_phone_number
              || '|'
              || v_mobile_number
              || '|'
              || v_fax
              || '||';


        v_error_location := 50;
        SELECT decode(v_site_type,'CENTRAL','Y',NULL) INTO  in_mainsiteflag  FROM dual;

         IF v_count_site_id = 0
         THEN
         begin
            /*CREATE SIT BY CALLING SPI_SITE*/
            v_error_location := 60;
            pkg_site_r5.
             spi_site (in_customerid                 => in_customerid,
                       in_quoteheaderid              => in_quoteheaderid,
                       in_sitename                   => v_site_name,
                       in_customer_reportsitename    => v_site_name,
                       in_buildingno                 => NULL,
                       in_addressline1               => v_address_line1,
                       in_city                       => v_city,
                       in_state                      => v_state,
                       in_state_code                 => NULL,
                       in_countryid                  => in_countryid,
                       in_postzipcode                => v_post,
                       in_telephoneareacode          => v_phone_number,
                       in_county                     => in_county,
                       in_local_business_cust_name   => NULL,
                       in_additionalsite             => in_additionalsite,
                       in_pricontact                 => v_primary_contacts,
                       in_seccontact                 => NULL,
                       in_techcontact                => NULL,
                       in_servassurcontact           => NULL,
                       in_servicedlvcontact          => NULL,
                       in_bfgsiteid                  => v_bfg_site_id,
                       in_bfgsitename                => v_site_name,
                       in_expedio_site_id            => v_expe_site_id,
                       in_kcidetails                 => NULL,
                       in_lineofsitebilling          => NULL,
                       in_mainsiteflag               => in_mainsiteflag,
                       in_createdby                  => in_createdby,
                       IN_PLACE_ACC_PRICE_REV_ORDER  => null,
                       in_phone_number               => null,
                       out_siteid                    => out_siteid,
                       out_status                    => out_status,
                       out_errmsg                    => out_errmsg);
               V_COUNT_SITE_ID := OUT_SITEID;
        IF out_errmsg IS NOT NULL THEN
        v_error_location := 70;
        out_status := pkg_constants.con_status_failure;
        out_errmsg := substr('At '||v_error_location||'-'||sqlerrm,1,150);
        END IF;
        EXCEPTION
        WHEN others THEN
          out_status := pkg_constants.con_status_failure;
          out_errmsg := substr('At '||v_error_location||'-'||sqlerrm,1,150);
          v_sql_code := sqlcode;
          PKG_COMMON.SPI_ERROR_LOG( IN_QUOTEID, IN_QUOTEHEADERID, V_COUNT_SITE_ID, null, null,
                                    'pkg_site_r5.spi_site', v_sql_code, out_errmsg );
 --         rollback;
        end;
        begin
        v_error_location := 80;
        pkg_site_r5.spi_quote_site_r5  (in_quoteheaderid,
                                  out_siteid,
                                  NULL,---bfg_site
                                  NULL,--exp_site
                                  in_modifiedby,
                                  out_status,
                                  OUT_ERRMSG);
        IF out_errmsg IS NOT NULL THEN
        out_status := pkg_constants.con_status_failure;
        out_errmsg := substr('At '||v_error_location||'-'||sqlerrm,1,150);
        END IF;
        EXCEPTION
        WHEN others THEN
          out_status := pkg_constants.con_status_failure;
          out_errmsg := substr('At '||v_error_location||'-'||sqlerrm,1,150);
          v_sql_code := sqlcode;
          PKG_COMMON.SPI_ERROR_LOG( IN_QUOTEID, IN_QUOTEHEADERID, null, null, null,
                                    'pkg_site_r5.spi_quote_site_r5', v_sql_code, out_errmsg );
   --       rollback;
        end;
         else

         BEGIN
         v_error_location := 90;
            pkg_site.spu_site (in_customerid                 => in_customerid,
                       in_siteid                     => v_count_site_id,
                       in_customer_reportsitename    => NULL,
                       in_buildingno                 => NULL,
                       in_addressline1               => v_address_line1,
                       in_city                       => v_city,
                       in_state                      => v_state,
                       in_state_code                 => NULL,
                       in_countryid                  => in_countryid,
                       in_postzipcode                => v_phone_number,
                       in_telephoneareacode          => v_phone_number,
                       in_county                     => in_county,
                       in_local_business_cust_name   => NULL,
                       in_additionalsite             => in_additionalsite,
                       in_pricontact                 => v_primary_contacts,
                       in_seccontact                 => NULL,
                       in_techcontact                => NULL,
                       in_servassurcontact           => NULL,
                       in_servicedlvcontact          => NULL,
                       in_bfgsiteid                  => v_site_id,
                       in_bfgsitename                => v_site_name,
                       in_kcidetails                 => NULL,
                       in_lineofsitebilling          => NULL,
                       in_modifiedby                 => in_createdby,
                       out_status                    => out_status,
                       OUT_ERRMSG                    => OUT_ERRMSG);
        IF out_errmsg IS NOT NULL THEN
        out_status := pkg_constants.con_status_failure;
        out_errmsg := substr('At '||v_error_location||'-'||sqlerrm,1,150);
        END IF;
        EXCEPTION
        WHEN others THEN
          out_status := pkg_constants.con_status_failure;
          out_errmsg := substr('At '||v_error_location||'-'||sqlerrm,1,150);
          v_sql_code := sqlcode;
          PKG_COMMON.SPI_ERROR_LOG( IN_QUOTEID, IN_QUOTEHEADERID, null, null, null,
                                    'pkg_site.spu_site', v_sql_code, out_errmsg );
        end;
       begin
       v_error_location := 100;
       pkg_site_r5.spi_quote_site_r5  (in_quoteheaderid,
                              v_count_site_id,
                              NULL,
                              NULL,
                              in_modifiedby,
                              out_status,
                              OUT_ERRMSG);
        IF out_errmsg IS NOT NULL THEN
        out_status := pkg_constants.con_status_failure;
        out_errmsg := substr('At '||v_error_location||'-'||sqlerrm,1,150);
        END IF;
        EXCEPTION
        WHEN others THEN
          out_status := pkg_constants.con_status_failure;
          out_errmsg := substr('At '||v_error_location||'-'||sqlerrm,1,150);
          v_sql_code := sqlcode;
          PKG_COMMON.SPI_ERROR_LOG( IN_QUOTEID, IN_QUOTEHEADERID, null, null, null,
                                    'pkg_site.spu_site', v_sql_code, out_errmsg );
       --   rollback;
        end;
       end if;
         IF out_status =2
         THEN
            v_count_site_id := out_siteid;
         END IF;
          IF out_status = 1 OR out_status = 2
         THEN
            BEGIN
               v_line_item.DELETE;
                j := 0;
               FOR i IN in_line_item.FIRST .. in_line_item.LAST
               loop
                  IF in_line_item (i).o_site_id = in_siteid (site_cusr).site_id
                  THEN
                     j := j + 1;
                     v_line_item.EXTEND (1);
                     v_line_item (j) := in_line_item (i);
                  END IF;
               END loop;
                /* Creating Quote Configuration Process */
               pkg_quote.spi_quote_config_obj (
                  in_quoteheaderid    => in_quoteheaderid,
                  in_siteid           => v_count_site_id,
                  in_line_item        => v_line_item,
                  in_attributelevel   => in_attributelevel,
                  in_createdby        => in_createdby,
                  out_status          => out_status,
                  out_errmsg          => out_errmsg);

        IF out_errmsg IS NOT NULL THEN
        out_status := pkg_constants.con_status_failure;
        out_errmsg := substr('At '||v_error_location||'-'||sqlerrm,1,150);
        END IF;
            END;
         END IF;
      end if;

   begin
 IF UPPER(in_modifyflag)='Y' AND  out_status=1  THEN
      pkg_quote_reeng.spu_order_tobe_to_asis(
                          IN_QUOTEID => in_quoteid,
                          IN_QUOTEHEADERID => in_quoteheaderid,
                          IN_SITEID => v_count_site_id,
                          IN_CREATEDBY => in_createdby,
                          OUT_STATUS => OUT_STATUS,
                          OUT_ERRMSG => OUT_ERRMSG
                        );
END IF;
exception
      WHEN others THEN
            out_status := pkg_constants.con_status_failure;
            out_errmsg := substr('At '||v_error_location||'-'||sqlerrm,1,150);
            v_sql_code := sqlcode;
            pkg_common.spi_error_log(
                                  in_quoteid,
                                  in_quoteheaderid,
                                  v_count_site_id||'v_count_site_id',
                                  NULL,
                                  NULL,
                                  'spu_order_tobe_to_asis',
                                  v_sql_code,
                                  out_errmsg
                                 );
 END;
   END loop;
 exception
      WHEN others THEN
            out_status := pkg_constants.con_status_failure;
            out_errmsg := substr('At '||v_error_location||'-'||sqlerrm,1,150);
            v_sql_code := sqlcode;
            pkg_common.spi_error_log(
                                  in_quoteid,
                                  in_quoteheaderid,
                                  NULL,
                                  NULL,
                                  NULL,
                                  'SPI_QUOTE_CONF_OBJ_R9',
                                  v_sql_code,
                                  out_errmsg
                                 );
END SPI_QUOTE_CONF_OBJ_R9_subj;
/


CREATE OR REPLACE PROCEDURE spi_vpn_add_details (
      in_orderheaderid        IN       NUMBER,
      in_siteid               IN       NUMBER,
      in_attribute_level      IN       VARCHAR2,
      in_vpn_add_details_tbl  IN       vpn_add_details_tbl,
      out_status              OUT      NUMBER,
      out_errmsg              OUT      VARCHAR2)
   AS
      v_order_line_item_id   order_line_item.order_line_item_id%TYPE;
      v_rowid                order_line_item.row_id%TYPE               := 0;
      v_fallback             order_line_item.fallback_type%TYPE        := '';

BEGIN
    DELETE FROM vpn_add_details
    WHERE order_line_item_id IN (SELECT order_line_item_id
                                  FROM order_line_item
                                  WHERE order_header_id = in_orderheaderid
                                  AND site_id           = in_siteid);

    FOR i IN in_vpn_add_details_tbl.FIRST .. in_vpn_add_details_tbl.LAST
    LOOP
        IF (v_rowid <> in_vpn_add_details_tbl (i).row_id) OR (v_fallback <> in_vpn_add_details_tbl (i).fallback) THEN

            v_rowid    := in_vpn_add_details_tbl (i).row_id;
            v_fallback := in_vpn_add_details_tbl (i).fallback;

            BEGIN
                SELECT order_line_item_id INTO v_order_line_item_id
                 FROM order_line_item
                WHERE order_header_id = in_orderheaderid
                  AND site_id         = in_siteid
                  AND product_name    = in_vpn_add_details_tbl (i).product_name
                  AND row_id          = in_vpn_add_details_tbl (i).row_id
                  AND fallback_type   = in_vpn_add_details_tbl (i).fallback
                  AND created_date    < sysdate
                  AND active          = pkg_constants.con_activeflag_yes;
            EXCEPTION
                WHEN NO_DATA_FOUND THEN
                    EXIT;
            END;
        END IF;

        INSERT INTO vpn_add_details
               (vpn_add_det_id,
                order_line_item_id,
                row_id,
                lan_ip,
                subnet_mask,
                virtual_ip,
                fallback_type
               )
        VALUES (vpn_add_det_id.NEXTVAL,
                v_order_line_item_id,
                in_vpn_add_details_tbl (i).row_id,
                in_vpn_add_details_tbl (i).lan_ip,
                in_vpn_add_details_tbl (i).subnet_mask,
                in_vpn_add_details_tbl (i).virtual_ip,
                in_vpn_add_details_tbl (i).fallback
               );
    END LOOP;

    out_status := pkg_constants.con_status_success;
    out_errmsg := SQLERRM;
EXCEPTION
    WHEN OTHERS THEN
        out_status := pkg_constants.con_status_failure;
        out_errmsg := SQLERRM;
END;
/


CREATE OR REPLACE PROCEDURE              sps_validate_order (
   in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
   out_status         OUT      NUMBER,
   out_icb_status     OUT      NUMBER,
   in_product_name    IN       VARCHAR2 DEFAULT NULL
)
AS
   /*returns 1 if for a given quote header
    if all the sites are priced
   pricing status ofthe selected access_qref is 'Firm''
   access_type for the selected access_qref is not null
   status of the quote is 'Customer Approved''
   connector type returned from APE (i.e., in access_qref)
   is same as connector type saved in CPE config
   otherwise, if dsl is there, then dsl connector type
   should be same as CPE connector type
   */
   v_price                      VARCHAR2 (20);
   v_sitecount                  NUMBER;
   v_pricecount                 NUMBER;
   v_aqrefcnt                   NUMBER;
   v_conncnt                    NUMBER;
   v_budgetcnt                  NUMBER;
   v_dslcnt                     NUMBER;
   v_rescnt                     NUMBER;
   v_othercnt                   NUMBER;
   v_acctypcnt                  NUMBER;
   v_sitecnt                    NUMBER                  := 0;
   v_consitecnt                 NUMBER                  := 0;
   v_dslsitecnt                 NUMBER                  := 0;
   v_active_access_qref_count   NUMBER                  := 0;
   v_common_qref_count          NUMBER                  := 0;
   v_isaccess_dsl               NUMBER (1)              := 0;
   --added for 904 sprint 2
   v_bid_request                NUMBER;
   v_bid_status                 NUMBER;
   v_is_access_mode_customer    NUMBER                  := 0;
   v_is_hvpn                    NUMBER                  := 0;
   v_do_check_for_qref_expir    NUMBER (1)              := 0;
   v_cnt                        NUMBER                  := 0;
   v_quote_id                   NUMBER                  := NULL;
   v_journey_type               quote.order_type%TYPE;
   v_manual_price               NUMBER                  := 0;
   /* Added for resolving defect 81846 Jay*/
   v_access_t                   VARCHAR2 (15);
   v_access_m                   VARCHAR2 (150);
   v_hvpn_site_id               VARCHAR2 (90);

   CURSOR c1
   IS
      SELECT site_id
        FROM quote_site
       WHERE quote_header_id = in_quoteheaderid AND active = 'Y';

   PROCEDURE initialize
   IS
   BEGIN
      v_price                   := NULL;
      v_sitecount               := 0;
      v_pricecount              := 0;
      v_aqrefcnt                := 0;
      v_conncnt                 := 0;
      v_budgetcnt               := 0;
      v_dslcnt                  := 0;
      v_rescnt                  := 0;
      v_othercnt                := 0;
      v_acctypcnt               := 0;
      v_sitecnt                 := 0;
      v_consitecnt              := 0;
      v_dslsitecnt              := 0;
      v_active_access_qref_count:= 0;
      v_common_qref_count       := 0;
      v_isaccess_dsl            := 0;
      v_bid_request             := 0;
      v_bid_status              := 0;
      v_is_access_mode_customer := 0;
      v_is_hvpn                 := 0;
      v_do_check_for_qref_expir := 0;
      v_cnt                     := 0;
      v_quote_id                := NULL;
      v_journey_type            := '';
      v_manual_price            := 0;
      v_access_t                := '';
      v_access_m                := '';
      v_hvpn_site_id            := '';
   END;
BEGIN
   out_status := pkg_constants.con_status_success;

   --count of active sites for that quote_header_id
   SELECT COUNT (DISTINCT site_id)
     INTO v_sitecount
     FROM line_item
    WHERE quote_header_id = in_quoteheaderid
      AND UPPER (product_name) IN (SELECT UPPER (product_name)
                                     FROM product_master_details
                                    WHERE parent_group_id = 1)
      AND active = pkg_constants.con_activeflag_yes;

   --count of sites which are priced for that quote_header_id
   SELECT COUNT (DISTINCT site_id)
     INTO v_pricecount
     FROM line_item
    WHERE quote_header_id = in_quoteheaderid
      AND UPPER (product_name) IN (SELECT UPPER (product_name)
                                     FROM product_master_details
                                    WHERE parent_group_id = 1)
      AND active = pkg_constants.con_activeflag_yes
      AND priced = pkg_constants.con_activeflag_yes;

   IF (v_sitecount <> v_pricecount)
   --check if all sites for that quote header are priced
   THEN
      BEGIN
         out_status := pkg_constants.con_status_failure;
         pkg_common.spi_error_log
                    (NULL,
                     in_quoteheaderid,
                     NULL,
                     NULL,
                     'PKG_ORDER',
                     'SPS_VALIDATE_ORDER',
                     out_status,
                     'some of the sites for that quote header are not priced'
                    );
         RETURN;
      END;
   END IF;

-----------for hvpn----------
   BEGIN
      FOR i IN c1
      LOOP
         initialize;

         BEGIN
            SELECT DISTINCT ld.VALUE
                       INTO v_access_t
                       FROM line_item_detail ld
                      WHERE line_item_id IN (
                               SELECT line_item_id
                                 FROM line_item li
                                WHERE li.quote_header_id = in_quoteheaderid
                                  AND li.site_id = i.site_id
                                  AND li.active = 'Y')
                        AND ld.attribute_mapping_id = 3
                        AND ld.active = 'Y';

            SELECT DISTINCT ld.VALUE
                       INTO v_access_m
                       FROM line_item_detail ld
                      WHERE line_item_id IN (
                               SELECT line_item_id
                                 FROM line_item li
                                WHERE li.quote_header_id = in_quoteheaderid
                                  AND li.site_id = i.site_id
                                  AND li.active = 'Y')
                        AND ld.attribute_mapping_id = 111
                        AND ld.active = 'Y';

            IF     NVL (v_access_t, 'X') = 'HVPN'
               AND NVL (v_access_m, 'Y') = 'Customer Provided Access'
            THEN
               v_hvpn_site_id := i.site_id;
               EXIT;
            END IF;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               NULL;
            WHEN OTHERS
            THEN
               NULL;
         END;

         IF v_hvpn_site_id IS NOT NULL
         THEN
            GOTO icb_check;
         END IF;

         BEGIN
            --to check if access_qrefs exist for that quote_header
            SELECT COUNT (*)
              INTO v_aqrefcnt
              FROM access_qref
             WHERE quote_site_id IN (
                      SELECT quote_site_id
                        FROM quote_site
                       WHERE quote_header_id = in_quoteheaderid
                         AND site_id = i.site_id
                         AND active = pkg_constants.con_activeflag_yes)
               AND active = pkg_constants.con_activeflag_yes;

            IF (v_aqrefcnt > 0)
            THEN
               BEGIN
                  --if access_type in access_qref is null
                  SELECT COUNT (*)
                    INTO v_acctypcnt
                    FROM access_qref aq LEFT OUTER JOIN price_line_item_detail plid
                         ON aq.access_qref = plid.external_qref
                         LEFT OUTER JOIN line_item li
                         ON plid.line_item_id = li.line_item_id
                         LEFT OUTER JOIN quote_site qtst
                         ON li.quote_header_id = qtst.quote_header_id
                       AND qtst.quote_site_id = aq.quote_site_id
                   WHERE li.quote_header_id = in_quoteheaderid
                     AND UPPER (li.product_name) IN (
                                                   SELECT UPPER (product_name)
                                                     FROM product_master_details
                                                    WHERE parent_group_id = 1)
                     AND plid.active = pkg_constants.con_activeflag_yes
                     AND li.active = pkg_constants.con_activeflag_yes
                     AND li.priced = pkg_constants.con_activeflag_yes
                     AND (aq.access_type IS NULL OR aq.access_type = '')
                     AND li.site_id = i.site_id
                     AND qtst.site_id = i.site_id;

                  IF (v_acctypcnt > 0)
                  THEN
                     out_status := pkg_constants.con_status_failure;
                     pkg_common.spi_error_log
                                        (NULL,
                                         in_quoteheaderid,
                                         NULL,
                                         NULL,
                                         'PKG_ORDER',
                                         'SPS_VALIDATE_ORDER',
                                         out_status,
                                         'access_type in access_qref is null'
                                        );
                     RETURN;
                  END IF;

                  --get count of rows and sites having resiliency standard - unbundled
                  SELECT COUNT (*), COUNT (DISTINCT res.site_id)
                    INTO v_rescnt, v_sitecnt
                    FROM (SELECT li.site_id, lid.VALUE
                            FROM line_item li INNER JOIN line_item_detail lid
                                 ON li.line_item_id = lid.line_item_id
                               AND li.active =
                                              pkg_constants.con_activeflag_yes
                               AND lid.active =
                                              pkg_constants.con_activeflag_yes
                               AND li.quote_header_id = in_quoteheaderid
                               AND li.site_id = i.site_id
                               AND UPPER (li.product_name) IN (
                                                   SELECT UPPER (product_name)
                                                     FROM product_master_details
                                                    WHERE parent_group_id = 1)
                               AND lid.attribute_mapping_id =
                                        pkg_constants.con_resiliency_attrmapid
                                 ) res
                   WHERE UPPER (res.VALUE) = pkg_constants.con_resiliency;

                  --get count of rows and sites having other resiliency
                  SELECT COUNT (*)
                    INTO v_othercnt
                    FROM (SELECT li.site_id, lid.VALUE
                            FROM line_item li INNER JOIN line_item_detail lid
                                 ON li.line_item_id = lid.line_item_id
                               AND li.active =
                                              pkg_constants.con_activeflag_yes
                               AND lid.active =
                                              pkg_constants.con_activeflag_yes
                               AND li.quote_header_id = in_quoteheaderid
                               AND li.site_id = i.site_id
                               AND UPPER (li.product_name) IN (
                                                   SELECT UPPER (product_name)
                                                     FROM product_master_details
                                                    WHERE parent_group_id = 1)
                               AND lid.attribute_mapping_id =
                                        pkg_constants.con_resiliency_attrmapid
                                 ) res
                   WHERE UPPER (res.VALUE) != pkg_constants.con_resiliency;

                  --get count of rows and sites where qref connetor type is same as CPE connector type
                  -- added by Mahim , CASE to handle non std scenario-in case of non std  connetor type match is not required
                  SELECT COUNT (*), COUNT (DISTINCT y.site_id)
                    INTO v_conncnt, v_consitecnt
                    FROM (SELECT qtst.quote_header_id, qtst.site_id,
                                 aq.access_qref, aq.connector
                            FROM quote_site qtst INNER JOIN access_qref aq
                                 ON qtst.quote_site_id = aq.quote_site_id
                           WHERE qtst.quote_header_id = in_quoteheaderid
                             AND qtst.site_id = i.site_id
                             AND qtst.active =
                                              pkg_constants.con_activeflag_yes
                             AND aq.active = pkg_constants.con_activeflag_yes) x
                         INNER JOIN
                         (SELECT li.quote_header_id, li.site_id, lid.VALUE,
                                 lid.non_std_flag
                            FROM line_item li INNER JOIN line_item_detail lid
                                 ON li.line_item_id = lid.line_item_id
                           WHERE li.active = pkg_constants.con_activeflag_yes
                             AND lid.active = pkg_constants.con_activeflag_yes
                             AND lid.attribute_mapping_id =
                                    CASE
                                       WHEN (NVL (lid.non_std_flag, 'N') = 'N'
                                            )
                                          THEN pkg_constants.con_conntype_attrmapid
                                       ELSE lid.attribute_mapping_id
                                    END
                             --pkg_constants.con_conntype_attrmapid
                             AND li.quote_header_id = in_quoteheaderid
                             AND li.site_id = i.site_id
                             AND UPPER (li.product_name) IN (
                                                   SELECT UPPER (product_name)
                                                     FROM product_master_details
                                                    WHERE parent_group_id = 1)) y
                         ON x.quote_header_id = y.quote_header_id
                       AND x.site_id = y.site_id
                       AND x.connector LIKE
                              CASE
                                 WHEN (NVL (y.non_std_flag, 'N') = 'N')
                                    THEN y.VALUE || '%'
                                 ELSE x.connector || '%'
                              END
                         ;

                  --*************** Start Modified By Tanmayi ************************
                  /* If sites are DSL and non-DSL , then for non-DSL it will
                  come in this if loop since access_qrefs are there
                   + it should check if any other sites are also DSL
                  for which access_qref will not be there
                  */
                  --check connector types for dsl
                  SELECT COUNT (*), COUNT (DISTINCT y.site_id)
                    INTO v_dslcnt, v_dslsitecnt
                    FROM (SELECT li.quote_header_id, li.site_id, lid.VALUE
                            FROM line_item li INNER JOIN line_item_detail lid
                                 ON li.line_item_id = lid.line_item_id
                                 LEFT OUTER JOIN quote_header qthdr
                                 ON li.quote_header_id = qthdr.quote_header_id
                                 -- Added on 17/12/2010 as part of using status in quote_status table
                                 LEFT OUTER JOIN quote_status qs
                                 ON qthdr.quote_header_id = qs.quote_header_id
                               AND qs.product_name = in_product_name
                           WHERE li.active = pkg_constants.con_activeflag_yes
                             AND lid.active = pkg_constants.con_activeflag_yes
                             AND lid.attribute_mapping_id =
                                          pkg_constants.con_conntype_attrmapid
                             AND qthdr.quote_header_id = in_quoteheaderid
                             AND li.site_id = i.site_id
                             AND UPPER (li.product_name) IN (
                                                   SELECT UPPER (product_name)
                                                     FROM product_master_details
                                                    WHERE parent_group_id = 1)
                             -- Added on 17/12/2010 as part of using status in quote_status table
                             AND UPPER (NVL (qs.status, qthdr.status)) =
                                                pkg_constants.con_quote_status) x
                         INNER JOIN

                         ---- To check not equal STANDARD - UNBUNDLED  added on 24-Aug-2010 By SRK
                         (SELECT li.quote_header_id, li.site_id, lid.VALUE
                            FROM line_item li INNER JOIN line_item_detail lid
                                 ON li.line_item_id = lid.line_item_id
                               AND li.active =
                                              pkg_constants.con_activeflag_yes
                               AND lid.active =
                                              pkg_constants.con_activeflag_yes
                               AND li.quote_header_id = in_quoteheaderid
                               AND li.site_id = i.site_id
                               AND UPPER (li.product_name) IN (
                                                   SELECT UPPER (product_name)
                                                     FROM product_master_details
                                                    WHERE parent_group_id = 1)
                               AND lid.attribute_mapping_id =
                                        pkg_constants.con_resiliency_attrmapid
                           WHERE UPPER (lid.VALUE) !=
                                                  pkg_constants.con_resiliency) x1
                         ON x.site_id = x1.site_id
                       AND x.quote_header_id = x1.quote_header_id
                         INNER JOIN
                         (SELECT li.quote_header_id, li.site_id, lid.VALUE
                            FROM line_item li INNER JOIN line_item_detail lid
                                 ON li.line_item_id = lid.line_item_id
                               AND li.active =
                                              pkg_constants.con_activeflag_yes
                               AND lid.active =
                                              pkg_constants.con_activeflag_yes
                               AND lid.attribute_mapping_id =
                                       pkg_constants.con_dslconntype_attrmapid
                               AND li.quote_header_id = in_quoteheaderid
                               AND li.site_id = i.site_id
                               AND UPPER (li.product_name) IN (
                                                   SELECT UPPER (product_name)
                                                     FROM product_master_details
                                                    WHERE parent_group_id = 1)
                                 ) y
                         ON x.quote_header_id = y.quote_header_id
                       AND x.site_id = y.site_id
                       AND x.VALUE LIKE y.VALUE || '%'
                         ;

                  --Added v_sitecnt condition by Tanmayi on 20/09/2010
                  IF (v_dslcnt = 0 AND v_sitecnt = 0)
                  THEN
                     --to check STANDARD - UNBUNDLED added on 24-Aug-2010 By SRK
                     -- v_cnt has count of sites with resiliency standard-unbundled.
                     SELECT COUNT (*)
                       INTO v_cnt
                       FROM line_item li INNER JOIN line_item_detail lid
                            ON li.line_item_id = lid.line_item_id
                          AND li.active = pkg_constants.con_activeflag_yes
                          AND lid.active = pkg_constants.con_activeflag_yes
                          AND li.quote_header_id = in_quoteheaderid
                          AND li.site_id = i.site_id
                          AND UPPER (li.product_name) IN (
                                                   SELECT UPPER (product_name)
                                                     FROM product_master_details
                                                    WHERE parent_group_id = 1)
                          AND lid.attribute_mapping_id =
                                        pkg_constants.con_resiliency_attrmapid
                          AND UPPER (lid.VALUE) = pkg_constants.con_resiliency
                            ;

                     --if DSL connector type does not match
                     --if STANDARD - UNBUNDLED equal to 0 then failure else sucess added on 24-Aug-2010 By SRK
                     IF (v_cnt = 0 AND (v_consitecnt != v_sitecount))
                     THEN
                        out_status := pkg_constants.con_status_failure;
                        pkg_common.spi_error_log
                                         (NULL,
                                          in_quoteheaderid,
                                          NULL,
                                          NULL,
                                          'PKG_ORDER',
                                          'SPS_VALIDATE_ORDER',
                                          out_status,
                                          'dsl connector type does not match'
                                         );
                        RETURN;
                     ELSE
                        NULL;
                     END IF;
                  END IF;

                  --****************END Modified By Tanmayi **********************

                  --   AND x.connector LIKE y.VALUE || '%'
                  IF (   (v_rescnt > 0 AND v_othercnt = 0)
                      OR (v_othercnt > 0 AND v_conncnt > 0 AND v_rescnt = 0)
                      OR (v_othercnt > 0 AND v_conncnt > 0 AND v_rescnt > 0)
                     )
                  --validations :   resiliency is only standard - unbundled
                  --                resiliency is others and connectors match
                  --                resiliency is both standard - unbundled and others and connectors match
                  THEN
                     BEGIN
                        --if connector type is same, check the pricing status
                        SELECT COUNT (DISTINCT pricing_status)
                          INTO v_budgetcnt
                          FROM access_qref aq LEFT JOIN price_line_item_detail plid
                               ON aq.access_qref = plid.external_qref
                               LEFT OUTER JOIN line_item li
                               ON plid.line_item_id = li.line_item_id
                               LEFT OUTER JOIN quote_site qtst
                               ON aq.quote_site_id = qtst.quote_site_id
                               LEFT OUTER JOIN quote_header qthdr
                               ON qtst.quote_header_id = qthdr.quote_header_id
                               -- Added on 17/12/2010 as part of using status in quote_status table
                               LEFT OUTER JOIN quote_status qs
                               ON qthdr.quote_header_id = qs.quote_header_id
                             AND qs.product_name = in_product_name
                         WHERE qthdr.quote_header_id = in_quoteheaderid
                           AND li.site_id = i.site_id
                           AND qtst.site_id = i.site_id
                           AND UPPER (li.product_name) IN (
                                                   SELECT UPPER (product_name)
                                                     FROM product_master_details
                                                    WHERE parent_group_id = 1)
                           AND aq.active = pkg_constants.con_activeflag_yes
                           AND qtst.active = pkg_constants.con_activeflag_yes
                           AND plid.active = pkg_constants.con_activeflag_yes
                           AND li.active = pkg_constants.con_activeflag_yes
                           -- Added on 17/12/2010 as part of using status in quote_status table
                           AND UPPER (NVL (qs.status, qthdr.status)) =
                                                pkg_constants.con_quote_status
                           AND UPPER (aq.pricing_status) =
                                              pkg_constants.con_pricing_status;

                        IF (v_budgetcnt <> 0)
                        THEN
                           --if pricing status is budgetary
                           out_status := pkg_constants.con_status_failure;
                           pkg_common.spi_error_log
                                               (NULL,
                                                in_quoteheaderid,
                                                NULL,
                                                NULL,
                                                'PKG_ORDER',
                                                'SPS_VALIDATE_ORDER',
                                                out_status,
                                                'pricing status is budgetary'
                                               );
                           RETURN;
                        END IF;
                     END;
                  ELSE
                     --if connector types dont match
                     out_status := pkg_constants.con_status_failure;
                     pkg_common.spi_error_log (NULL,
                                               in_quoteheaderid,
                                               NULL,
                                               NULL,
                                               'PKG_ORDER',
                                               'SPS_VALIDATE_ORDER',
                                               out_status,
                                               'connector types not match'
                                              );
                     RETURN;
                  END IF;
               END;
            ELSE
               BEGIN
                  --check connector types for dsl
                  SELECT COUNT (*), COUNT (DISTINCT y.site_id)
                    INTO v_dslcnt, v_dslsitecnt
                    FROM (SELECT li.quote_header_id, li.site_id, lid.VALUE
                            FROM line_item li INNER JOIN line_item_detail lid
                                 ON li.line_item_id = lid.line_item_id
                                 LEFT OUTER JOIN quote_header qthdr
                                 ON li.quote_header_id = qthdr.quote_header_id
                                 -- Added on 17/12/2010 as part of using status in quote_status table
                                 LEFT OUTER JOIN quote_status qs
                                 ON qthdr.quote_header_id = qs.quote_header_id
                               AND qs.product_name = in_product_name
                           WHERE li.active = pkg_constants.con_activeflag_yes
                             AND lid.active = pkg_constants.con_activeflag_yes
                             AND lid.attribute_mapping_id =
                                          pkg_constants.con_conntype_attrmapid
                             AND qthdr.quote_header_id = in_quoteheaderid
                             AND li.site_id = i.site_id
                             AND UPPER (li.product_name) IN (
                                                   SELECT UPPER (product_name)
                                                     FROM product_master_details
                                                    WHERE parent_group_id = 1)
                             -- Added on 17/12/2010 as part of using status in quote_status table
                             AND UPPER (NVL (qs.status, qthdr.status)) =
                                                pkg_constants.con_quote_status) x
                         INNER JOIN

                         ---- To check not equal STANDARD - UNBUNDLED  added on 24-Aug-2010 By SRK
                         (SELECT li.quote_header_id, li.site_id, lid.VALUE
                            FROM line_item li INNER JOIN line_item_detail lid
                                 ON li.line_item_id = lid.line_item_id
                               AND li.active =
                                              pkg_constants.con_activeflag_yes
                               AND lid.active =
                                              pkg_constants.con_activeflag_yes
                               AND li.quote_header_id = in_quoteheaderid
                               AND UPPER (li.product_name) IN (
                                                   SELECT UPPER (product_name)
                                                     FROM product_master_details
                                                    WHERE parent_group_id = 1)
                               AND lid.attribute_mapping_id =
                                        pkg_constants.con_resiliency_attrmapid
                           WHERE UPPER (lid.VALUE) !=
                                                  pkg_constants.con_resiliency
                             AND li.site_id = i.site_id) x1
                         ON x.site_id = x1.site_id
                       AND x.quote_header_id = x1.quote_header_id
                         INNER JOIN
                         (SELECT li.quote_header_id, li.site_id, lid.VALUE
                            FROM line_item li INNER JOIN line_item_detail lid
                                 ON li.line_item_id = lid.line_item_id
                               AND li.active =
                                              pkg_constants.con_activeflag_yes
                               AND lid.active =
                                              pkg_constants.con_activeflag_yes
                               AND lid.attribute_mapping_id =
                                       pkg_constants.con_dslconntype_attrmapid
                               AND li.quote_header_id = in_quoteheaderid
                               AND li.site_id = i.site_id
                               AND UPPER (li.product_name) IN (
                                                   SELECT UPPER (product_name)
                                                     FROM product_master_details
                                                    WHERE parent_group_id = 1)
                                 ) y
                         ON x.quote_header_id = y.quote_header_id
                       AND x.site_id = y.site_id
                       AND x.VALUE LIKE y.VALUE || '%'
                         ;

                  IF (v_dslcnt = 0)
                  THEN
                     --to check STANDARD - UNBUNDLED added on 24-Aug-2010 By SRK
                     -- v_cnt has count of sites with resiliency standard-unbundled.
                     SELECT COUNT (*)
                       INTO v_cnt
                       FROM line_item li INNER JOIN line_item_detail lid
                            ON li.line_item_id = lid.line_item_id
                          AND li.active = pkg_constants.con_activeflag_yes
                          AND lid.active = pkg_constants.con_activeflag_yes
                          AND li.quote_header_id = in_quoteheaderid
                          AND li.site_id = i.site_id
                          AND UPPER (li.product_name) IN (
                                                   SELECT UPPER (product_name)
                                                     FROM product_master_details
                                                    WHERE parent_group_id = 1)
                          AND lid.attribute_mapping_id =
                                        pkg_constants.con_resiliency_attrmapid
                          AND UPPER (lid.VALUE) = pkg_constants.con_resiliency
                            ;

                     --if DSL connector type does not match
                     --if STANDARD - UNBUNDLED equal to 0 then failure else sucess added on 24-Aug-2010 By SRK
                     IF (v_cnt = 0)
                     THEN
                        out_status := pkg_constants.con_status_failure;
                        pkg_common.spi_error_log
                           (NULL,
                            in_quoteheaderid,
                            NULL,
                            NULL,
                            'PKG_ORDER',
                            'SPS_VALIDATE_ORDER',
                            out_status,
                            'count of sites with resiliency standard-unbundled'
                           );
                        RETURN;
                     ELSE
                        NULL;
                     END IF;
                  END IF;
               END;
            END IF;

            --added v_cnt to check if resiliency is STANDARD-Unbundled. added by Tanmayi on 25/08/2010
            IF (v_dslsitecnt + v_sitecnt + v_consitecnt + v_cnt <> v_sitecount
               )
            --check if connector types for all sites match based on the above validations
            THEN
               /*added on 19/11/2010 to check in case of access_backup
               where connector types also match and dsl is also there for the same site
               then site_count should be taken
               */
               IF (    v_dslsitecnt <> v_consitecnt
                   AND (v_dslsitecnt + v_consitecnt) <> v_sitecount
                  )
               THEN
                  out_status := pkg_constants.con_status_failure;
                  pkg_common.spi_error_log
                     (NULL,
                      in_quoteheaderid,
                      NULL,
                      NULL,
                      'PKG_ORDER',
                      'SPS_VALIDATE_ORDER',
                      out_status,
                      'where connector types also match and dsl is also there for the same site'
                     );
                  RETURN;
               END IF;
            END IF;
         END;

         -- END IF;

         ----904 Sprint 2 Qref expiry date Validation
         ---IF access technology is DSL, dont do validation QREF validation
         v_isaccess_dsl := 0;

         BEGIN
            SELECT COUNT (1)
              INTO v_isaccess_dsl
              FROM line_item_detail
             WHERE attribute_mapping_id = 3                              --DSL
               AND VALUE = 'DSL'
               AND active = pkg_constants.con_activeflag_yes
               AND line_item_id IN (
                      SELECT line_item_id
                        FROM line_item
                       WHERE quote_header_id = in_quoteheaderid
                         AND site_id = i.site_id
                         AND active = pkg_constants.con_activeflag_yes);
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               v_isaccess_dsl := 0;
            WHEN OTHERS
            THEN
               v_isaccess_dsl := 0;
         END;

         BEGIN
            SELECT COUNT (1)
              INTO v_is_hvpn
              FROM line_item_detail
             WHERE attribute_mapping_id = 3                              --DSL
               AND (UPPER (VALUE) = 'HVPN')
               AND active = pkg_constants.con_activeflag_yes
               AND line_item_id IN (
                      SELECT line_item_id
                        FROM line_item
                       WHERE quote_header_id = in_quoteheaderid
                         AND site_id = i.site_id
                         AND active = pkg_constants.con_activeflag_yes);
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               v_is_hvpn := 0;
            WHEN OTHERS
            THEN
               v_is_hvpn := 0;
         END;

         BEGIN
            SELECT COUNT (1)
              INTO v_is_access_mode_customer
              FROM line_item_detail
             WHERE attribute_mapping_id = 111                            --DSL
               AND VALUE = 'Customer Provided Access'
               AND active = pkg_constants.con_activeflag_yes
               AND line_item_id IN (
                      SELECT line_item_id
                        FROM line_item
                       WHERE quote_header_id = in_quoteheaderid
                         AND site_id = i.site_id
                         AND active = pkg_constants.con_activeflag_yes);
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               v_is_access_mode_customer := 0;
            WHEN OTHERS
            THEN
               v_is_access_mode_customer := 0;
         END;

         v_do_check_for_qref_expir := 1;
         v_manual_price := 1;

         BEGIN
            SELECT COUNT (1)
              INTO v_manual_price
              FROM line_item_detail
             WHERE attribute_mapping_id = 35                    --manual price
               AND active = pkg_constants.con_activeflag_yes
               AND line_item_id IN (
                      SELECT line_item_id
                        FROM line_item
                       WHERE quote_header_id = in_quoteheaderid
                         AND site_id = i.site_id
                         AND active = pkg_constants.con_activeflag_yes);
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               v_manual_price := 0;
            WHEN OTHERS
            THEN
               v_manual_price := 0;
         END;

--Modified on 19-11-2010 by SRK if more than one site has DSL then count will be > 1
         IF v_isaccess_dsl >= 1
         THEN
            v_do_check_for_qref_expir := 0;
         END IF;

         IF v_is_hvpn = 1 AND v_is_access_mode_customer = 1
         THEN
            v_do_check_for_qref_expir := 0;
         END IF;

         IF v_manual_price = 1
         THEN
            v_do_check_for_qref_expir := 0;
         END IF;

         IF v_do_check_for_qref_expir = 1
         THEN
            v_active_access_qref_count := 0;

            SELECT COUNT (1)
              INTO v_active_access_qref_count
              FROM access_qref aq,
                   quote_site qs,
                   line_item li,
                   price_line_item_detail plid
             WHERE aq.quote_site_id = qs.quote_site_id
               AND TRUNC (NVL (expiry_date, TO_DATE ('19000101', 'YYYYMMDD')),
                          'DD'
                         ) >= TRUNC (SYSDATE, 'DD')
               AND qs.quote_header_id = in_quoteheaderid
               AND li.quote_header_id = qs.quote_header_id
               AND li.site_id = i.site_id
               AND qs.site_id = i.site_id
               AND plid.line_item_id = li.line_item_id
               AND aq.access_qref = plid.external_qref
               AND plid.active = 'Y'
               AND li.active = 'Y'
               AND aq.active = 'Y'
               AND qs.active = 'Y';

            IF v_active_access_qref_count = 0
            THEN
               out_status := pkg_constants.con_status_failure_qref_expir;
               pkg_common.spi_error_log (NULL,
                                         in_quoteheaderid,
                                         NULL,
                                         NULL,
                                         'PKG_ORDER',
                                         'SPS_VALIDATE_ORDER',
                                         out_status,
                                         'qref expired error'
                                        );
               RETURN;
            --Value 3 for qref expired error
            END IF;

            v_common_qref_count := 0;
            /* Modified for resolving defect 81846 Jay
            We will use quote id instead of quote header id for checking qref used multiple times for the same customer
            This should have implemented as a part of clean order validation but that time quote versioning was not there
            and so quote header id is used instead of quote id.
            */
            v_quote_id := NULL;

            SELECT quote_id
              INTO v_quote_id
              FROM quote_header
             WHERE quote_header_id = in_quoteheaderid;

            /*****Do the qref multi validation only for Provide journey****/
            SELECT order_type
              INTO v_journey_type
              FROM quote
             WHERE quote_id = v_quote_id;

            IF UPPER (TRIM (v_journey_type)) = 'PROVIDE'
            THEN
               SELECT COUNT (1)
                 INTO v_common_qref_count
                 FROM (SELECT plid.external_qref "QREF"
                         FROM access_qref aq,
                              quote_header qh,
                              quote q,
                              line_item li,
                              price_line_item_detail plid,
                              quote_site qs
                        WHERE aq.quote_site_id = qs.quote_site_id
                          AND q.customer_id = (SELECT DISTINCT customer_id
                                                          FROM quote
                                                         WHERE quote_id =
                                                                    v_quote_id)
                          AND qh.quote_id = q.quote_id
                          AND qs.quote_header_id = qh.quote_header_id
                          AND li.quote_header_id = qh.quote_header_id
                          AND UPPER (li.product_name) IN (
                                                   SELECT UPPER (product_name)
                                                     FROM product_master_details
                                                    WHERE parent_group_id = 1)
                          AND plid.line_item_id = li.line_item_id
                          AND aq.access_qref = plid.external_qref
                          AND plid.active = 'Y'
                          AND li.active = 'Y'
                          AND aq.active = 'Y'
                          AND qs.active = 'Y'
                          AND q.quote_id <> v_quote_id
                          AND li.site_id = i.site_id
                          AND qs.site_id = i.site_id
                       INTERSECT
                       SELECT plid.external_qref "QREF"
                         FROM access_qref aq,
                              quote_site qs,
                              line_item li,
                              price_line_item_detail plid,
                              quote_header qh
                        WHERE aq.quote_site_id = qs.quote_site_id
                          AND qs.quote_header_id = qh.quote_header_id
                          AND qh.quote_id = v_quote_id
                          AND li.quote_header_id = qs.quote_header_id
                          AND plid.line_item_id = li.line_item_id
                          AND UPPER (li.product_name) IN (
                                                   SELECT UPPER (product_name)
                                                     FROM product_master_details
                                                    WHERE parent_group_id = 1)
                          AND aq.access_qref = plid.external_qref
                          AND plid.active = 'Y'
                          AND li.active = 'Y'
                          AND aq.active = 'Y'
                          AND qs.active = 'Y'
                          AND li.site_id = i.site_id
                          AND qs.site_id = i.site_id) a;

               /* Modification ends for resolving defect 81846 Jay*/
               IF v_common_qref_count > 0
               THEN
                  out_status := pkg_constants.con_status_failure_qref_multi;
                  pkg_common.spi_error_log
                     (NULL,
                      in_quoteheaderid,
                      NULL,
                      NULL,
                      'PKG_ORDER',
                      'SPS_VALIDATE_ORDER',
                      out_status,
                      'for qref used in other order placed by the same customer'
                     );
                  RETURN;
               ---value 4 - for qref used in other order placed by the same customer
               END IF;
            END IF;
         END IF;
      END LOOP;
   END;

   ----904 Sprint 2 Qref expiry date Validation
   <<icb_check>>
   /* ICB Checks starts here */
   BEGIN
      SELECT DISTINCT 1
                 INTO out_icb_status
                 FROM                /*quote q LEFT OUTER JOIN quote_header qh
                                     ON q.quote_id = qh.quote_id*/
                      quote_header qh LEFT OUTER JOIN quote_site qs
                      ON qh.quote_header_id = qs.quote_header_id
                      INNER JOIN site s ON qs.site_id = s.site_id
                      INNER JOIN line_item lm
                      ON s.site_id = lm.site_id
                    AND lm.quote_header_id = in_quoteheaderid
                      INNER JOIN line_item_detail ld
                      ON lm.line_item_id = ld.line_item_id
                    AND ld.attribute_mapping_id != 3                     --DSL
                    AND ld.VALUE != 'DSL'
                      LEFT OUTER JOIN attribute_mapping am
                      ON ld.attribute_mapping_id = am.attribute_mapping_id
                      LEFT OUTER JOIN access_qref aq
                      ON qs.quote_site_id = aq.quote_site_id
                      INNER JOIN price_line_item_detail plid
                      ON aq.access_qref = plid.external_qref
                    AND lm.line_item_id = plid.line_item_id
                WHERE     /*q.quote_id = in_quoteid
                      AND*/ qh.quote_header_id = in_quoteheaderid
                  AND UPPER (lm.product_name) IN (SELECT UPPER (product_name)
                                                    FROM product_master_details
                                                   WHERE parent_group_id = 1)
                  AND (qs.active = 'Y')
                  AND lm.active = 'Y'
                  AND ld.active = 'Y'
                  AND UPPER (aq.port_status) = UPPER ('Individual Case Basis')
                  AND qh.capcheck_refno IS NULL;
   EXCEPTION
      WHEN NO_DATA_FOUND
      THEN
         out_icb_status := 0;
   END;

   /* ICB Checks ends here */

   /* Bid Request Status Validation starts here */
   SELECT COUNT (*)
     INTO v_bid_request
     FROM quote_header qh LEFT OUTER JOIN quote_site qs
          ON qh.quote_header_id = qs.quote_header_id
          INNER JOIN site s ON qs.site_id = s.site_id
          INNER JOIN bid_request_status brs
          ON brs.site_id = s.site_id
             AND brs.quote_header_id = in_quoteheaderid
    WHERE qh.quote_header_id = in_quoteheaderid
      AND (qs.active = 'Y')
      AND brs.active = 'Y';

   IF v_bid_request > 0
   THEN
      SELECT COUNT (*)
        INTO v_bid_status
        FROM bid_request_status
       WHERE quote_header_id = in_quoteheaderid
         AND UPPER (bid_status) = UPPER ('Responded')
         /* AND ( UPPER(data_build_done) ='YES' OR
              UPPER(data_build_done) ='NA')*/
         AND one_time_install_cost IS NOT NULL
         AND monthly_recurring_cost IS NOT NULL
         AND SYSDATE <= activation_due_date
         AND TRUNC (NVL (BID_EXPIRY_DATE, TO_DATE ('19000101', 'YYYYMMDD')),
                          'DD'
                         ) >= TRUNC (SYSDATE, 'DD')
         AND active = 'Y';

      IF v_bid_status = 0
      THEN
         out_status := pkg_constants.con_status_fail_bidreq_status;
         pkg_common.spi_error_log (NULL,
                                   in_quoteheaderid,
                                   NULL,
                                   NULL,
                                   'PKG_ORDER',
                                   'SPS_VALIDATE_ORDER',
                                   out_status,
                                   'bid request status validation error'
                                  );
         RETURN;
      END IF;
   END IF;

/* Bid Request Status Validation ends here */
   pkg_common.spi_error_log (NULL,
                             in_quoteheaderid,
                             NULL,
                             NULL,
                             'PKG_ORDER',
                             'SPS_VALIDATE_ORDER',
                             out_status,
                             'sucess'
                            );
EXCEPTION
   WHEN OTHERS
   THEN
      out_status := pkg_constants.con_status_failure;
      pkg_common.spi_error_log (NULL,
                                in_quoteheaderid,
                                NULL,
                                NULL,
                                'PKG_ORDER',
                                'SPS_VALIDATE_ORDER',
                                out_status,
                                'failure'
                               );
/*ROLLBACK;    commented by Jay*/
END;
/


CREATE OR REPLACE PROCEDURE SPS_VALIDATE_ORDER_SITE (
   in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
   out_status         OUT      NUMBER,
   out_icb_status     OUT      NUMBER
)
AS
   /*returns 1 if for a given quote header
    if all the sites are priced
   pricing status ofthe selected access_qref is 'Firm''
   access_type for the selected access_qref is not null
   status of the quote is 'Customer Approved''
   connector type returned from APE (i.e., in access_qref)
   is same as connector type saved in CPE config
   otherwise, if dsl is there, then dsl connector type
   should be same as CPE connector type
   */
   /** Added below cursor for doing validation at site level**/
   CURSOR c1
   IS
      SELECT site_id
        FROM quote_site
       WHERE quote_header_id = in_quoteheaderid AND active = 'Y';

   v_price                      VARCHAR2 (20);
   v_sitecount                  NUMBER;
   v_pricecount                 NUMBER;
   v_aqrefcnt                   NUMBER;
   v_conncnt                    NUMBER;
   v_budgetcnt                  NUMBER;
   v_dslcnt                     NUMBER;
   v_rescnt                     NUMBER;
   v_othercnt                   NUMBER;
   v_acctypcnt                  NUMBER;
   v_sitecnt                    NUMBER        := 0;
   v_consitecnt                 NUMBER        := 0;
   v_dslsitecnt                 NUMBER        := 0;
   v_active_access_qref_count   NUMBER        := 0;
   v_common_qref_count          NUMBER        := 0;
   v_isaccess_dsl               NUMBER (1)    := 0;
   --added for 904 sprint 2
   v_bid_request                NUMBER;
   v_bid_status                 NUMBER;
   v_is_access_mode_customer    NUMBER        := 0;
   v_is_hvpn                    NUMBER        := 0;
   v_do_check_for_qref_expir    NUMBER (1)    := 0;
   v_cnt                        NUMBER        := 0;
BEGIN
   out_status := pkg_constants.con_status_success;

   --count of active sites for that quote_header_id
   SELECT COUNT (DISTINCT site_id)
     INTO v_sitecount
     FROM line_item
    WHERE quote_header_id = in_quoteheaderid
      AND active = pkg_constants.con_activeflag_yes;

   --count of sites which are priced for that quote_header_id
   SELECT COUNT (DISTINCT site_id)
     INTO v_pricecount
     FROM line_item
    WHERE quote_header_id = in_quoteheaderid
      AND active = pkg_constants.con_activeflag_yes
      AND priced = pkg_constants.con_activeflag_yes;

   IF (v_sitecount <> v_pricecount)
   --check if all sites for that quote header are priced
   THEN
      BEGIN
         out_status := pkg_constants.con_status_failure;
      END;
   ELSE
      FOR i IN c1
      LOOP
         IF out_status = pkg_constants.con_status_failure
         THEN
            RETURN;
         END IF;

------------------------------------------------------------------------------------------------
         BEGIN
            --to check if access_qrefs exist for that quote_header
            SELECT COUNT (*)
              INTO v_aqrefcnt
              FROM access_qref
             WHERE quote_site_id IN (
                      SELECT quote_site_id
                        FROM quote_site
                       WHERE quote_header_id = in_quoteheaderid
                         AND site_id = i.site_id
                         AND active = pkg_constants.con_activeflag_yes)
               AND active = pkg_constants.con_activeflag_yes;

            v_is_access_mode_customer := 1;
            v_is_hvpn := 1;

            BEGIN
               SELECT COUNT (1)
                 INTO v_is_hvpn
                 FROM line_item_detail
                WHERE attribute_mapping_id = 3                           --DSL
                  AND (UPPER (VALUE) = 'HVPN')
                  AND active = pkg_constants.con_activeflag_yes
                  AND line_item_id IN (
                         SELECT line_item_id
                           FROM line_item
                          WHERE quote_header_id = in_quoteheaderid
                            AND site_id = i.site_id
                            AND active = pkg_constants.con_activeflag_yes);
            EXCEPTION
               WHEN NO_DATA_FOUND
               THEN
                  v_is_hvpn := 0;
               WHEN OTHERS
               THEN
                  v_is_hvpn := 0;
            END;

            BEGIN
               SELECT COUNT (1)
                 INTO v_is_access_mode_customer
                 FROM line_item_detail
                WHERE attribute_mapping_id = 111                         --DSL
                  AND VALUE = 'Customer Provided Access'
                  AND active = pkg_constants.con_activeflag_yes
                  AND line_item_id IN (
                         SELECT line_item_id
                           FROM line_item
                          WHERE quote_header_id = in_quoteheaderid
                            AND site_id = i.site_id
                            AND active = pkg_constants.con_activeflag_yes);
            EXCEPTION
               WHEN NO_DATA_FOUND
               THEN
                  v_is_access_mode_customer := 0;
               WHEN OTHERS
               THEN
                  v_is_access_mode_customer := 0;
            END;

            IF (v_aqrefcnt > 0)
            THEN
               BEGIN
                  --if access_type in access_qref is null
                  SELECT COUNT (*)
                    INTO v_acctypcnt
                    FROM access_qref aq LEFT OUTER JOIN price_line_item_detail plid
                         ON aq.access_qref = plid.external_qref
                         LEFT OUTER JOIN line_item li
                         ON plid.line_item_id = li.line_item_id
                         LEFT OUTER JOIN quote_site qtst
                         ON li.quote_header_id = qtst.quote_header_id
                       AND qtst.quote_site_id = aq.quote_site_id
                   WHERE li.quote_header_id = in_quoteheaderid
                     AND li.site_id = i.site_id
                     AND plid.active = pkg_constants.con_activeflag_yes
                     AND li.active = pkg_constants.con_activeflag_yes
                     AND li.priced = pkg_constants.con_activeflag_yes
                     AND (aq.access_type IS NULL OR aq.access_type = '');

                  IF (v_acctypcnt > 0)
                  THEN
                     out_status := pkg_constants.con_status_failure;
                  END IF;

                  --get count of rows and sites having resiliency standard - unbundled
                  SELECT COUNT (*), COUNT (DISTINCT res.site_id)
                    INTO v_rescnt, v_sitecnt
                    FROM (SELECT li.site_id, lid.VALUE
                            FROM line_item li INNER JOIN line_item_detail lid
                                 ON li.line_item_id = lid.line_item_id
                               AND li.active =
                                              pkg_constants.con_activeflag_yes
                               AND lid.active =
                                              pkg_constants.con_activeflag_yes
                               AND li.quote_header_id = in_quoteheaderid
                               AND li.site_id = i.site_id
                               AND lid.attribute_mapping_id =
                                        pkg_constants.con_resiliency_attrmapid
                                 ) res
                   WHERE UPPER (res.VALUE) = pkg_constants.con_resiliency;

                  --get count of rows and sites having other resiliency
                  SELECT COUNT (*)
                    INTO v_othercnt
                    FROM (SELECT li.site_id, lid.VALUE
                            FROM line_item li INNER JOIN line_item_detail lid
                                 ON li.line_item_id = lid.line_item_id
                               AND li.active =
                                              pkg_constants.con_activeflag_yes
                               AND lid.active =
                                              pkg_constants.con_activeflag_yes
                               AND li.quote_header_id = in_quoteheaderid
                               AND li.site_id = i.site_id
                               AND lid.attribute_mapping_id =
                                        pkg_constants.con_resiliency_attrmapid
                                 ) res
                   WHERE UPPER (res.VALUE) != pkg_constants.con_resiliency;

                  --get count of rows and sites where qref connetor type is same as CPE connector type
                  -- added by Mahim , CASE to handle non std scenario-in case of non std  connetor type match is not required
                  SELECT COUNT (*), COUNT (DISTINCT y.site_id)
                    INTO v_conncnt, v_consitecnt
                    FROM (SELECT qtst.quote_header_id, qtst.site_id,
                                 aq.access_qref, aq.connector
                            FROM quote_site qtst INNER JOIN access_qref aq
                                 ON qtst.quote_site_id = aq.quote_site_id
                           WHERE qtst.quote_header_id = in_quoteheaderid
                             AND qtst.site_id = i.site_id
                             AND qtst.active =
                                              pkg_constants.con_activeflag_yes
                             AND aq.active = pkg_constants.con_activeflag_yes) x
                         INNER JOIN
                         (SELECT li.quote_header_id, li.site_id, lid.VALUE,
                                 lid.non_std_flag
                            FROM line_item li INNER JOIN line_item_detail lid
                                 ON li.line_item_id = lid.line_item_id
                           WHERE li.active = pkg_constants.con_activeflag_yes
                             AND lid.active = pkg_constants.con_activeflag_yes
                             AND lid.attribute_mapping_id =
                                    CASE
                                       WHEN (NVL (lid.non_std_flag, 'N') = 'N'
                                            )
                                          THEN pkg_constants.con_conntype_attrmapid
                                       ELSE lid.attribute_mapping_id
                                    END
                             --pkg_constants.con_conntype_attrmapid
                             AND li.quote_header_id = in_quoteheaderid
                             AND li.site_id = i.site_id) y
                         ON x.quote_header_id = y.quote_header_id
                       AND x.site_id = y.site_id
                       AND x.connector LIKE
                              CASE
                                 WHEN (NVL (y.non_std_flag, 'N') = 'N')
                                    THEN y.VALUE || '%'
                                 ELSE x.connector || '%'
                              END
                         ;

                                           --*************** Start Modified By Tanmayi ************************
                  /* If sites are DSL and non-DSL , then for non-DSL it will
                  come in this if loop since access_qrefs are there
                   + it should check if any other sites are also DSL
                  for which access_qref will not be there
                  */
                  --check connector types for dsl
                  SELECT COUNT (*), COUNT (DISTINCT y.site_id)
                    INTO v_dslcnt, v_dslsitecnt
                    FROM (SELECT li.quote_header_id, li.site_id, lid.VALUE
                            FROM line_item li INNER JOIN line_item_detail lid
                                 ON li.line_item_id = lid.line_item_id
                                 LEFT OUTER JOIN quote_header qthdr
                                 ON li.quote_header_id = qthdr.quote_header_id
                           WHERE li.active = pkg_constants.con_activeflag_yes
                             AND lid.active = pkg_constants.con_activeflag_yes
                             AND lid.attribute_mapping_id =
                                          pkg_constants.con_conntype_attrmapid
                             AND qthdr.quote_header_id = in_quoteheaderid
                             AND li.site_id = i.site_id
                             AND UPPER (qthdr.status) =
                                                pkg_constants.con_quote_status) x
                         INNER JOIN

                         ---- To check not equal STANDARD - UNBUNDLED  added on 24-Aug-2010 By SRK
                         (SELECT li.quote_header_id, li.site_id, lid.VALUE
                            FROM line_item li INNER JOIN line_item_detail lid
                                 ON li.line_item_id = lid.line_item_id
                               AND li.active =
                                              pkg_constants.con_activeflag_yes
                               AND lid.active =
                                              pkg_constants.con_activeflag_yes
                               AND li.quote_header_id = in_quoteheaderid
                               AND li.site_id = i.site_id
                               AND lid.attribute_mapping_id =
                                        pkg_constants.con_resiliency_attrmapid
                           WHERE UPPER (lid.VALUE) !=
                                                  pkg_constants.con_resiliency) x1
                         ON x.site_id = x1.site_id
                       AND x.quote_header_id = x1.quote_header_id
                         INNER JOIN
                         (SELECT li.quote_header_id, li.site_id, lid.VALUE
                            FROM line_item li INNER JOIN line_item_detail lid
                                 ON li.line_item_id = lid.line_item_id
                               AND li.active =
                                              pkg_constants.con_activeflag_yes
                               AND lid.active =
                                              pkg_constants.con_activeflag_yes
                               AND lid.attribute_mapping_id =
                                       pkg_constants.con_dslconntype_attrmapid
                               AND li.quote_header_id = in_quoteheaderid
                               AND li.site_id = i.site_id
                                 ) y
                         ON x.quote_header_id = y.quote_header_id
                       AND x.site_id = y.site_id
                       AND x.VALUE LIKE y.VALUE || '%'
                         ;

                  --Added v_sitecnt condition by Tanmayi on 20/09/2010
                  IF (v_dslcnt = 0 AND v_sitecnt = 0)
                  THEN
                     --to check STANDARD - UNBUNDLED added on 24-Aug-2010 By SRK
                     -- v_cnt has count of sites with resiliency standard-unbundled.
                     SELECT COUNT (*)
                       INTO v_cnt
                       FROM line_item li INNER JOIN line_item_detail lid
                            ON li.line_item_id = lid.line_item_id
                          AND li.active = pkg_constants.con_activeflag_yes
                          AND lid.active = pkg_constants.con_activeflag_yes
                          AND li.quote_header_id = in_quoteheaderid
                          AND li.site_id = i.site_id
                          AND lid.attribute_mapping_id =
                                        pkg_constants.con_resiliency_attrmapid
                          AND UPPER (lid.VALUE) = pkg_constants.con_resiliency
                            ;

                     --if DSL connector type does not match
                     --if STANDARD - UNBUNDLED equal to 0 then failure else sucess added on 24-Aug-2010 By SRK
                     IF (v_cnt = 0 AND (v_consitecnt != v_sitecount))
                     THEN
                        out_status := pkg_constants.con_status_failure;
                     ELSE
                        NULL;
                     END IF;
                  END IF;

                  --****************END Modified By Tanmayi **********************

                  --   AND x.connector LIKE y.VALUE || '%'
                  IF (   (v_rescnt > 0 AND v_othercnt = 0)
                      OR (v_othercnt > 0 AND v_conncnt > 0 AND v_rescnt = 0)
                      OR (v_othercnt > 0 AND v_conncnt > 0 AND v_rescnt > 0)
                     )
                  --validations :   resiliency is only standard - unbundled
                  --                resiliency is others and connectors match
                  --                resiliency is both standard - unbundled and others and connectors match
                  THEN
                     BEGIN
                        --if connector type is same, check the pricing status
                        SELECT COUNT (DISTINCT pricing_status)
                          INTO v_budgetcnt
                          FROM access_qref aq LEFT JOIN price_line_item_detail plid
                               ON aq.access_qref = plid.external_qref
                               LEFT OUTER JOIN line_item li
                               ON plid.line_item_id = li.line_item_id
                               LEFT OUTER JOIN quote_site qtst
                               ON aq.quote_site_id = qtst.quote_site_id
                               LEFT OUTER JOIN quote_header qthdr
                               ON qtst.quote_header_id = qthdr.quote_header_id
                         WHERE qthdr.quote_header_id = in_quoteheaderid
                           AND qtst.site_id = i.site_id
                           AND aq.active = pkg_constants.con_activeflag_yes
                           AND qtst.active = pkg_constants.con_activeflag_yes
                           AND plid.active = pkg_constants.con_activeflag_yes
                           AND li.active = pkg_constants.con_activeflag_yes
                           AND UPPER (qthdr.status) =
                                                pkg_constants.con_quote_status
                           AND UPPER (aq.pricing_status) =
                                              pkg_constants.con_pricing_status;

                        IF (v_budgetcnt <> 0)
                        THEN
                           --if pricing status is budgetary
                           out_status := pkg_constants.con_status_failure;
                        END IF;
                     END;
                  ELSE
                     --if connector types dont match
                     out_status := pkg_constants.con_status_failure;
                  END IF;
               END;
            ELSIF (v_is_access_mode_customer = 1 AND v_is_hvpn = 1)
            THEN
               GOTO SKIP;
            ELSE
               BEGIN
                  --check connector types for dsl
                  SELECT COUNT (*), COUNT (DISTINCT y.site_id)
                    INTO v_dslcnt, v_dslsitecnt
                    FROM (SELECT li.quote_header_id, li.site_id, lid.VALUE
                            FROM line_item li INNER JOIN line_item_detail lid
                                 ON li.line_item_id = lid.line_item_id
                                 LEFT OUTER JOIN quote_header qthdr
                                 ON li.quote_header_id = qthdr.quote_header_id
                           WHERE li.active = pkg_constants.con_activeflag_yes
                             AND lid.active = pkg_constants.con_activeflag_yes
                             AND lid.attribute_mapping_id =
                                          pkg_constants.con_conntype_attrmapid
                             AND qthdr.quote_header_id = in_quoteheaderid
                             AND li.site_id = i.site_id
                             AND UPPER (qthdr.status) =
                                                pkg_constants.con_quote_status) x
                         INNER JOIN

                         ---- To check not equal STANDARD - UNBUNDLED  added on 24-Aug-2010 By SRK
                         (SELECT li.quote_header_id, li.site_id, lid.VALUE
                            FROM line_item li INNER JOIN line_item_detail lid
                                 ON li.line_item_id = lid.line_item_id
                               AND li.active =
                                              pkg_constants.con_activeflag_yes
                               AND lid.active =
                                              pkg_constants.con_activeflag_yes
                               AND li.quote_header_id = in_quoteheaderid
                               AND lid.attribute_mapping_id =
                                        pkg_constants.con_resiliency_attrmapid
                           WHERE UPPER (lid.VALUE) !=
                                                  pkg_constants.con_resiliency) x1
                         ON x.site_id = x1.site_id
                       AND x.quote_header_id = x1.quote_header_id
                         INNER JOIN
                         (SELECT li.quote_header_id, li.site_id, lid.VALUE
                            FROM line_item li INNER JOIN line_item_detail lid
                                 ON li.line_item_id = lid.line_item_id
                               AND li.active =
                                              pkg_constants.con_activeflag_yes
                               AND lid.active =
                                              pkg_constants.con_activeflag_yes
                               AND lid.attribute_mapping_id =
                                       pkg_constants.con_dslconntype_attrmapid
                               AND li.quote_header_id = in_quoteheaderid
                               AND li.site_id = i.site_id
                                 ) y
                         ON x.quote_header_id = y.quote_header_id
                       AND x.site_id = y.site_id
                       AND x.VALUE LIKE y.VALUE || '%'
                         ;

                  IF (v_dslcnt = 0)
                  THEN
                     --to check STANDARD - UNBUNDLED added on 24-Aug-2010 By SRK
                       -- v_cnt has count of sites with resiliency standard-unbundled.
                     SELECT COUNT (*)
                       INTO v_cnt
                       FROM line_item li INNER JOIN line_item_detail lid
                            ON li.line_item_id = lid.line_item_id
                          AND li.active = pkg_constants.con_activeflag_yes
                          AND lid.active = pkg_constants.con_activeflag_yes
                          AND li.quote_header_id = in_quoteheaderid
                          AND lid.attribute_mapping_id =
                                        pkg_constants.con_resiliency_attrmapid
                          AND UPPER (lid.VALUE) = pkg_constants.con_resiliency
                            ;

                     --if DSL connector type does not match
                      --if STANDARD - UNBUNDLED equal to 0 then failure else sucess added on 24-Aug-2010 By SRK
                     IF (v_cnt = 0)
                     THEN
                        out_status := pkg_constants.con_status_failure;
                     ELSE
                        NULL;
                     END IF;
                  END IF;
               END;
            END IF;

            --added v_cnt to check if resiliency is STANDARD-Unbundled. added by Tanmayi on 25/08/2010
            IF (v_dslsitecnt + v_sitecnt + v_consitecnt + v_cnt <> v_sitecount
               )
            --check if connector types for all sites match based on the above validations
            THEN
               DBMS_OUTPUT.put_line
                  (   'check if connector types for all sites match based on the above validations'
                   || 'v_sitecount'
                   || v_sitecount
                  );
               DBMS_OUTPUT.put_line (   'v_dslsitecnt '
                                     || v_dslsitecnt
                                     || 'v_sitecnt'
                                     || v_sitecnt
                                     || 'v_consitecnt'
                                     || v_consitecnt
                                    );
               out_status := pkg_constants.con_status_failure;
            END IF;
         END;

               ----904 Sprint 2 Qref expiry date Validation
         ---IF access technology is DSL, dont do validation QREF validation
         <<skip>>
         v_isaccess_dsl := 0;

         BEGIN
            SELECT COUNT (1)
              INTO v_isaccess_dsl
              FROM line_item_detail
             WHERE attribute_mapping_id = 3                              --DSL
               AND VALUE = 'DSL'
               AND active = pkg_constants.con_activeflag_yes
               AND line_item_id IN (
                      SELECT line_item_id
                        FROM line_item
                       WHERE quote_header_id = in_quoteheaderid
                         AND active = pkg_constants.con_activeflag_yes
                         AND site_id = i.site_id);
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               v_isaccess_dsl := 0;
            WHEN OTHERS
            THEN
               v_isaccess_dsl := 0;
         END;

         BEGIN
            SELECT COUNT (1)
              INTO v_is_hvpn
              FROM line_item_detail
             WHERE attribute_mapping_id = 3                              --DSL
               AND (UPPER (VALUE) = 'HVPN')
               AND active = pkg_constants.con_activeflag_yes
               AND line_item_id IN (
                      SELECT line_item_id
                        FROM line_item
                       WHERE quote_header_id = in_quoteheaderid
                         AND site_id = i.site_id
                         AND active = pkg_constants.con_activeflag_yes);
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               v_is_hvpn := 0;
            WHEN OTHERS
            THEN
               v_is_hvpn := 0;
         END;

         BEGIN
            SELECT COUNT (1)
              INTO v_is_access_mode_customer
              FROM line_item_detail
             WHERE attribute_mapping_id = 111                            --DSL
               AND VALUE = 'Customer Provided Access'
               AND active = pkg_constants.con_activeflag_yes
               AND line_item_id IN (
                      SELECT line_item_id
                        FROM line_item
                       WHERE quote_header_id = in_quoteheaderid
                         AND site_id = i.site_id
                         AND active = pkg_constants.con_activeflag_yes);
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               v_is_access_mode_customer := 0;
            WHEN OTHERS
            THEN
               v_is_access_mode_customer := 0;
         END;

         v_do_check_for_qref_expir := 1;

         IF v_isaccess_dsl = 1
         THEN
            v_do_check_for_qref_expir := 0;
         END IF;

         IF v_is_hvpn = 1 AND v_is_access_mode_customer = 1
         THEN
            v_do_check_for_qref_expir := 0;
         END IF;

         IF v_do_check_for_qref_expir = 1
         THEN
            v_active_access_qref_count := 0;

            SELECT COUNT (1)
              INTO v_active_access_qref_count
              FROM access_qref aq,
                   quote_site qs,
                   line_item li,
                   price_line_item_detail plid
             WHERE aq.quote_site_id = qs.quote_site_id
               AND TRUNC (NVL (expiry_date, TO_DATE ('19000101', 'YYYYMMDD')),
                          'DD'
                         ) >= TRUNC (SYSDATE, 'DD')
               AND qs.quote_header_id = in_quoteheaderid
               AND qs.site_id = i.site_id
               AND li.site_id = i.site_id
               AND li.quote_header_id = qs.quote_header_id
               AND plid.line_item_id = li.line_item_id
               AND aq.access_qref = plid.external_qref
               AND plid.active = 'Y'
               AND li.active = 'Y'
               AND aq.active = 'Y'
               AND qs.active = 'Y';

            IF v_active_access_qref_count = 0
            THEN
               out_status := pkg_constants.con_status_failure_qref_expir;
            --Value 3 for qref expired error
            END IF;

            v_common_qref_count := 0;

            SELECT COUNT (1)
              INTO v_common_qref_count
              FROM (SELECT plid.external_qref "QREF"
                      FROM access_qref aq,
                           quote_header qh,
                           quote q,
                           line_item li,
                           price_line_item_detail plid,
                           quote_site qs
                     WHERE aq.quote_site_id = qs.quote_site_id
                       AND q.customer_id =
                              (SELECT DISTINCT q1.customer_id
                                          FROM quote q1, quote_header qh1
                                         WHERE qh1.quote_header_id =
                                                              in_quoteheaderid
                                           AND q1.quote_id = qh1.quote_id)
                       AND qh.quote_id = q.quote_id
                       AND qs.site_id = i.site_id
                       AND li.site_id = i.site_id
                       AND qs.quote_header_id = qh.quote_header_id
                       AND li.quote_header_id = qh.quote_header_id
                       AND plid.line_item_id = li.line_item_id
                       AND aq.access_qref = plid.external_qref
                       AND plid.active = 'Y'
                       AND li.active = 'Y'
                       AND aq.active = 'Y'
                       AND qs.active = 'Y'
                       AND qh.quote_header_id <> in_quoteheaderid
                    INTERSECT
                    SELECT plid.external_qref "QREF"
                      FROM access_qref aq,
                           quote_site qs,
                           line_item li,
                           price_line_item_detail plid
                     WHERE aq.quote_site_id = qs.quote_site_id
                       AND qs.quote_header_id = in_quoteheaderid
                       AND li.quote_header_id = qs.quote_header_id
                       AND plid.line_item_id = li.line_item_id
                       AND aq.access_qref = plid.external_qref
                       AND qs.site_id = i.site_id
                       AND li.site_id = i.site_id
                       AND plid.active = 'Y'
                       AND li.active = 'Y'
                       AND aq.active = 'Y'
                       AND qs.active = 'Y') a;

            IF v_common_qref_count > 0
            THEN
               out_status := pkg_constants.con_status_failure_qref_multi;
            ---value 4 - for qref used in other order placed by the same customer
            END IF;
         END IF;
      ----904 Sprint 2 Qref expiry date Validation
      END LOOP;
   END IF;

   /* ICB Checks starts here */
   BEGIN
      SELECT DISTINCT 1
                 INTO out_icb_status
                 FROM                /*quote q LEFT OUTER JOIN quote_header qh
                                     ON q.quote_id = qh.quote_id*/
                      quote_header qh LEFT OUTER JOIN quote_site qs
                      ON qh.quote_header_id = qs.quote_header_id
                      INNER JOIN site s ON qs.site_id = s.site_id
                      INNER JOIN line_item lm
                      ON s.site_id = lm.site_id
                    AND lm.quote_header_id = in_quoteheaderid
                      INNER JOIN line_item_detail ld
                      ON lm.line_item_id = ld.line_item_id
                    AND ld.attribute_mapping_id != 3                     --DSL
                    AND ld.VALUE != 'DSL'
                      LEFT OUTER JOIN attribute_mapping am
                      ON ld.attribute_mapping_id = am.attribute_mapping_id
                      LEFT OUTER JOIN access_qref aq
                      ON qs.quote_site_id = aq.quote_site_id
                      INNER JOIN price_line_item_detail plid
                      ON aq.access_qref = plid.external_qref
                    AND lm.line_item_id = plid.line_item_id
                WHERE     /*q.quote_id = in_quoteid
                      AND*/ qh.quote_header_id = in_quoteheaderid
                  AND (qs.active = 'Y')
                  AND lm.active = 'Y'
                  AND ld.active = 'Y'
                  AND UPPER (aq.port_status) = UPPER ('Individual Case Basis')
                  AND qh.capcheck_refno IS NULL;
   EXCEPTION
      WHEN NO_DATA_FOUND
      THEN
         out_icb_status := 0;
   END;

   /* ICB Checks ends here */

   /* Bid Request Status Validation starts here */
   SELECT COUNT (*)
     INTO v_bid_request
     FROM quote_header qh LEFT OUTER JOIN quote_site qs
          ON qh.quote_header_id = qs.quote_header_id
          INNER JOIN site s ON qs.site_id = s.site_id
          INNER JOIN bid_request_status brs
          ON brs.site_id = s.site_id
             AND brs.quote_header_id = in_quoteheaderid
    WHERE qh.quote_header_id = in_quoteheaderid
      AND (qs.active = 'Y')
      AND brs.active = 'Y';

   IF v_bid_request > 0
   THEN
      SELECT COUNT (*)
        INTO v_bid_status
        FROM bid_request_status
       WHERE quote_header_id = in_quoteheaderid
         AND UPPER (bid_status) = UPPER ('Responded')
         /* AND ( UPPER(data_build_done) ='YES' OR
              UPPER(data_build_done) ='NA')*/
         AND one_time_install_cost IS NOT NULL
         AND monthly_recurring_cost IS NOT NULL
         AND SYSDATE <= activation_due_date
         AND TRUNC (NVL (BID_EXPIRY_DATE, TO_DATE ('19000101', 'YYYYMMDD')),
                          'DD'
                         ) >= TRUNC (SYSDATE, 'DD')
         AND active = 'Y';

      IF v_bid_status = 0
      THEN
         out_status := pkg_constants.con_status_fail_bidreq_status;
      END IF;
   END IF;
/* Bid Request Status Validation ends here */
END;
/


CREATE OR REPLACE PROCEDURE spu_action_code_mx (p_quote_header_id IN    line_item.quote_header_id%TYPE,
                              out_status        OUT   NUMBER,
                              out_errmsg        OUT   VARCHAR2)
IS

    v_quote_header_id_old line_item.quote_header_id%TYPE;
    v_quote_header_id_new line_item.quote_header_id%TYPE;
    v_site_id site.site_id%TYPE;
    v_ifc_flag expedio_response.ifc_flag%TYPE;
    v_order_type quote.order_type%TYPE;

    CURSOR site_id_cur IS
        SELECT DISTINCT site_id
          FROM line_item
         WHERE quote_header_id = p_quote_header_id AND active = 'Y';

  CURSOR line_item_cur IS
    SELECT a.product_name  product_name_new,
           b.product_name  product_name_old ,
           a.site_id       site_id_new,
           b.site_id       site_id_old,
           a.line_item_id  line_item_id_new,
           b.line_item_id  line_item_id_old,
           (select count(line_item_detail_id) from line_item_detail where line_item_id=a.line_item_id) count_ltd_new,
           (select count(line_item_detail_id) from line_item_detail where line_item_id=b.line_item_id) count_ltd_old
     FROM
          (SELECT *
            FROM LINE_ITEM
           WHERE quote_header_id = v_quote_header_id_new
            AND site_id = v_site_id
            AND active = 'Y') A
          FULL OUTER JOIN
          (SELECT *
            FROM LINE_ITEM
           WHERE quote_header_id = v_quote_header_id_old
            AND site_id = v_site_id
            AND active = 'Y') B
      ON a.site_id = b.site_id
      AND a.product_name = b.product_name;

  CURSOR order_line_item_cur
  IS
    SELECT a.product_name  product_name_new,
           b.product_name  product_name_old,
           a.site_id       site_id_new,
           b.site_id       site_id_old,
           a.order_line_item_id  order_line_item_id_new,
           b.order_line_item_id  order_line_item_id_old,
           (select count(order_line_item_det_id) from order_line_item_detail where order_line_item_id=a.order_line_item_id) count_oltd_new,
           (select count(order_line_item_det_id) from order_line_item_detail where order_line_item_id=b.order_line_item_id) count_oltd_old
     FROM
          (SELECT oli.*
            FROM order_line_item oli,
                 order_header oh
           WHERE oh.quote_header_id = v_quote_header_id_new
            AND oh.order_header_id = oli.order_header_id
            AND oli.site_id = v_site_id
            AND oli.active = 'Y') A
          FULL OUTER JOIN
          (SELECT oli.*
            FROM order_line_item oli,
                 order_header oh
           WHERE oh.quote_header_id = v_quote_header_id_old
            AND oh.order_header_id = oli.order_header_id
            AND oli.site_id = v_site_id
            AND oli.active = 'Y') B
      ON a.site_id = b.site_id
      AND a.product_name = b.product_name;

BEGIN

     v_quote_header_id_new := p_quote_header_id;

        BEGIN
            SELECT quote_header_id
              INTO v_quote_header_id_old
              FROM quote_header
             WHERE quote_id = (SELECT quote_id
                                 FROM quote_header
                                WHERE quote_header_id = p_quote_header_id)
               AND version = (SELECT SUBSTR (version, 1, INSTR (version, '.') - 1)
                                FROM quote_header
                               WHERE quote_header_id = p_quote_header_id) - 1;

             SELECT ifc_flag
             INTO v_ifc_flag
             FROM expedio_response
             WHERE quote_header_id = p_quote_header_id;
        EXCEPTION
          WHEN OTHERS THEN
            ROLLBACK;
            /*out_status := pkg_constants.con_status_failure;
            out_errmsg := SQLCODE||'-'||SQLERRM;                        */
        END;

         SELECT order_type
         INTO v_order_type
         FROM quote q, quote_header qh
         WHERE q.quote_id=qh.quote_id
         AND qh.quote_header_id = p_quote_header_id;



    IF UPPER(v_order_type)='PROVIDE' AND v_ifc_flag = 'Y' THEN
            FOR site_id_rec IN site_id_cur
            LOOP
                v_site_id := site_id_rec.site_id;
            -- Setting the Action Codes for line_item table for MX BOM Scenarios
              FOR line_item_rec in line_item_cur LOOP
                IF line_item_rec.line_item_id_old IS NULL AND line_item_rec.line_item_id_new IS NOT NULL THEN
                  UPDATE LINE_ITEM
                     SET ACTION_CODE = 'Create'
                   WHERE line_item_id=line_item_rec.line_item_id_new;

                ELSIF line_item_rec.line_item_id_new IS NULL AND line_item_rec.line_item_id_old IS NOT NULL THEN
                  UPDATE LINE_ITEM
                     SET ACTION_CODE = 'Cancel'
                   WHERE line_item_id=line_item_rec.line_item_id_old;
                END IF;

                IF line_item_rec.count_ltd_new <> line_item_rec.count_ltd_old THEN
                  UPDATE LINE_ITEM
                     SET ACTION_CODE = 'Amend'
                   WHERE line_item_id=line_item_rec.line_item_id_new;
                ELSE
                  UPDATE LINE_ITEM
                     SET action_code = 'Amend'
                   WHERE line_item_id = line_item_rec.line_item_id_new
                     AND NOT EXISTS (SELECT 1
                                       FROM line_item_detail lid_new,
                                            line_item_detail lid_old
                                      WHERE lid_new.line_item_id         = line_item_rec.line_item_id_new
                                        AND lid_old.line_item_id         = line_item_rec.line_item_id_old
                                        AND lid_new.attribute_mapping_id = lid_old.attribute_mapping_id
                                        AND lid_new.value    = lid_new.value
                                        AND lid_new.quantity = lid_new.quantity
                                        AND lid_new.active   = 'Y'
                                        AND lid_old.active   = 'Y');

                        UPDATE LINE_ITEM
                        SET action_code = 'NONE'
                        WHERE action_code IS NULL
                        AND line_item_id = line_item_rec.line_item_id_new;
                END IF;
              END LOOP;
            -- Setting the Action Codes for order_line_item table for MX BOM Scenarios
              FOR order_line_item_rec in order_line_item_cur LOOP
                IF order_line_item_rec.order_line_item_id_new IS NOT NULL AND order_line_item_rec.order_line_item_id_old IS NULL  THEN
                  UPDATE order_line_item
                     SET ACTION_CODE = 'Create'
                   WHERE order_line_item_id = order_line_item_rec.order_line_item_id_new;

                ELSIF order_line_item_rec.order_line_item_id_new IS NULL AND order_line_item_rec.order_line_item_id_old IS NOT NULL THEN
                  UPDATE order_line_item
                     SET ACTION_CODE = 'Cancel'
                   WHERE order_line_item_id = order_line_item_rec.order_line_item_id_old;
                END IF;

                IF order_line_item_rec.count_oltd_new <> order_line_item_rec.count_oltd_old THEN
                  UPDATE order_line_item
                     SET ACTION_CODE = 'Amend'
                   WHERE order_line_item_id=order_line_item_rec.order_line_item_id_new;
                ELSE
                  UPDATE order_line_item
                     SET action_code = 'Amend'
                   WHERE order_line_item_id = order_line_item_rec.order_line_item_id_new
                     AND NOT EXISTS (SELECT 1
                                       FROM order_line_item_detail lid_new,
                                            order_line_item_detail lid_old
                                      WHERE lid_new.order_line_item_id   = order_line_item_rec.order_line_item_id_new
                                        AND lid_old.order_line_item_id   = order_line_item_rec.order_line_item_id_old
                                        AND lid_new.attribute_mapping_id = lid_old.attribute_mapping_id
                                        AND lid_new.value    = lid_new.value
                                        AND lid_new.quantity = lid_new.quantity
                                        AND lid_new.active   = 'Y'
                                        AND lid_old.active   = 'Y');

                  UPDATE order_line_item
                     SET action_code = 'NONE'
                   WHERE action_code IS NULL
                     AND order_line_item_id = order_line_item_rec.order_line_item_id_new;
                END IF;
              END LOOP;
           END LOOP;
     ELSE
         UPDATE line_item
         SET action_code='Create'
         WHERE quote_header_id=p_quote_header_id AND active='Y';

         UPDATE order_line_item
         SET action_code = 'Create'
         WHERE active='Y'
         AND order_line_item_id IN (
                                   SELECT oli.order_line_item_id
                                    FROM order_line_item oli,
                                         order_header oh
                                   WHERE oh.quote_header_id = p_quote_header_id
                                    AND oh.order_header_id = oli.order_header_id
                                    AND oli.active = 'Y');
     END IF;

       UPDATE line_item_detail
       SET action_code='ADD'
       WHERE line_item_id IN (SELECT line_item_id FROM line_item WHERE quote_header_id=p_quote_header_id AND active='Y')
       AND active='Y';

       UPDATE order_line_item_detail
       SET action_code='ADD'
       WHERE order_line_item_id IN (
                                   SELECT oli.order_line_item_id
                                    FROM order_line_item oli,
                                         order_header oh
                                   WHERE oh.quote_header_id = p_quote_header_id
                                    AND oh.order_header_id = oli.order_header_id
                                    AND oli.active = 'Y')
       AND active='Y';

       UPDATE price_line_item_detail
       SET action_code='ADD'
       WHERE line_item_id IN (SELECT line_item_id FROM line_item WHERE quote_header_id=p_quote_header_id AND active='Y')
       AND active='Y';

      out_status := pkg_constants.con_status_success;
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    out_status := pkg_constants.con_status_failure;
    out_errmsg := SQLCODE||'-'||SQLERRM;
END SPU_ACTION_CODE_MX;
/


CREATE OR REPLACE PROCEDURE spu_lineofsitebilling (
   in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
   in_lnbillingflag   IN       site.line_of_site_billing%TYPE,
   in_billingid       IN       billing.billing_id%TYPE,
   out_status         OUT      NUMBER,
   out_errmsg         OUT      VARCHAR2
)
AS
   v_siteid   site.site_id%TYPE;
--- v_sitebillingid   site.billing_id%TYPE;
BEGIN
   SELECT site_id
     INTO v_siteid
     FROM customer c, site s, quote q, quote_header qh
    WHERE c.customer_id = s.customer_id
      AND c.customer_id = q.customer_id
      AND q.quote_id = qh.quote_id
      AND quote_header_id = in_quoteheaderid
      AND main_site_flag = 'Y';

   IF (v_siteid = 0)
   THEN
      out_status := pkg_constants.con_status_duplicate;
   ELSE
      BEGIN
         UPDATE site
            SET line_of_site_billing = in_lnbillingflag,
                billing_id = in_billingid
          WHERE site_id = v_siteid;

         out_status := pkg_constants.con_status_success;
         COMMIT;
      END;
   END IF;
EXCEPTION
   WHEN OTHERS
   THEN
      out_status := pkg_constants.con_status_failure;
      out_errmsg := SQLERRM;
END;
/


CREATE OR REPLACE PROCEDURE SPU_ORDER_CONTACT_MX_ROLE_ID (
	IN_EXPEIDO_QUOTE_ID  IN VARCHAR2,
	IN_QUOTE_VERSION_ID  IN VARCHAR2,
	IN_PRODUCT_NAME			 IN VARCHAR2,
	IN_CONTACT_ROLE			 IN VARCHAR2,
	IN_BFG_SITE_ID			 IN NUMBER,
	IN_BFG_ADDRESS_ID		 IN VARCHAR2,
	IN_BFG_CNT_ID				 IN NUMBER,
	IN_BFG_CNR_ID				 IN NUMBER,
	OUT_STATUS         	 OUT      NUMBER,
	OUT_ERRMSG         	 OUT      VARCHAR2
	)
AS
/******************************************************************************
   Product Usage:MX
   PURPOSE: TO UPDATE THE SQE ORDER CONTACT

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
	 1.0				 19-08-2011  Suman					  EXPEDIO TEM UPDATE THE SQE ORDER CONTACT
******************************************************************************/

V_SITE_ID   SITE.SITE_ID%TYPE;
V_QUOTE_HEADER_ID 	QUOTE_HEADER.QUOTE_HEADER_ID%TYPE;
V_ORDER_HEADER_ID	  ORDER_HEADER.ORDER_HEADER_ID%TYPE;
V_CONTACT_ROLE			CONTACT.CONTACT_TYPE%TYPE;
V_ORDER_CONTACT_DETAIL_ID				CONTACT.CONTACT_ID%TYPE;
V_ERROLINE					VARCHAR2(255);
BEGIN
V_ERROLINE :=1;
	BEGIN
		SELECT SITE_ID INTO V_SITE_ID
				FROM SITE
				WHERE BFG_SITE_ID=IN_BFG_SITE_ID;
	EXCEPTION
	WHEN NO_DATA_FOUND THEN
	OUT_STATUS :=0;
	OUT_ERRMSG :='BFG SITE ID NOT FOUND IN THE SQE'|| 'IN_BFG_SITE_ID-->'||IN_BFG_SITE_ID;
	END;
V_ERROLINE :=2;
	BEGIN
		SELECT QUOTE_HEADER_ID INTO V_QUOTE_HEADER_ID
				FROM QUOTE_HEADER
				WHERE EXPEDIO_QUOTEID =IN_EXPEIDO_QUOTE_ID
				AND   VERSION					=IN_QUOTE_VERSION_ID;
	EXCEPTION
	WHEN NO_DATA_FOUND THEN
	OUT_STATUS :=0;
	OUT_ERRMSG :='EXPEDIO_QUOTE_ID,VERSION_ID NOT FOUND IN THE SQE'|| 'IN_EXPEIDO_QUOTE_ID,IN_QUOTE_VERSION_ID-->'||IN_EXPEIDO_QUOTE_ID||','||IN_QUOTE_VERSION_ID;
	END;

IF V_QUOTE_HEADER_ID IS NOT NULL AND V_SITE_ID IS NOT NULL THEN
V_ERROLINE :=3;
	SELECT ORDER_HEADER_ID INTO V_ORDER_HEADER_ID FROM ORDER_HEADER
	 WHERE QUOTE_HEADER_ID=V_QUOTE_HEADER_ID
			AND PRODUCT_NAME ='BT MOBILEXPRESS';

		IF 	UPPER(IN_PRODUCT_NAME)=PKG_CONSTANTS.CON_PROD_BT_MX_SSLVPN AND UPPER(IN_CONTACT_ROLE)=PKG_CONSTANTS.CON_CUS_MX_BFG_SERVICE_CONT THEN
				 V_CONTACT_ROLE :='PRIMARY SITE CONTACT';
				 ELSE
				 V_CONTACT_ROLE :='IPSEC CONTACT';
V_ERROLINE :=4;
				SELECT OCD.ORDER_CONTACT_DETAIL_ID INTO v_ORDER_CONTACT_DETAIL_ID FROM ORDER_CONTACT_DETAIL OCD,CONTACT CO
				WHERE OCD.CONTACT_ID= CO.CONTACT_ID
				AND OCD.ORDER_HEADER_ID=V_ORDER_HEADER_ID
				AND OCD.SITE_ID				 =V_SITE_ID
				AND UPPER(CO.CONTACT_TYPE)=UPPER(V_CONTACT_ROLE);

				UPDATE ORDER_CONTACT_DETAIL SET BFG_CNR_ID=IN_BFG_CNT_ID,BFG_CNT_ID=IN_BFG_CNR_ID
				WHERE ORDER_HEADER_ID=V_ORDER_HEADER_ID AND ORDER_CONTACT_DETAIL_ID=V_ORDER_CONTACT_DETAIL_ID
				AND SITE_ID = V_SITE_ID;
		END IF;
END IF;

OUT_STATUS :=1;
 EXCEPTION
      WHEN OTHERS
      THEN
         out_errmsg := SQLERRM ||'---'||V_ERROLINE ;
         pkg_common.spi_error_log (IN_BFG_SITE_ID,
                                   IN_BFG_CNR_ID,
                                   IN_BFG_CNT_ID,
																	 IN_BFG_ADDRESS_ID,
                                   'SPU_ORDER_CONTACT_MX_ROLE_ID',
                                   IN_BFG_CNR_ID,
                                   OUT_STATUS,
                                   OUT_ERRMSG
                                  );
END SPU_ORDER_CONTACT_MX_ROLE_ID;
/


CREATE OR REPLACE PROCEDURE sp_expedio_response_bom_r9(
    in_quote_id                   IN expedio_response.quote_id%TYPE,
    in_quote_header_id            IN expedio_response.quote_header_id%TYPE,
    in_order_header_id            IN order_header.order_header_id%TYPE,
    in_sqeversion                 IN expedio_response.VERSION%TYPE,
    in_exp_order_id               IN expedio_response.exp_order_id%TYPE,
    in_exp_quote_id               IN expedio_response.exp_quote_id%TYPE,
    in_expedio_ref_id             IN expedio_response.expedio_ref_id%TYPE,
    in_expedio_quoteversion       IN expedio_response.expedio_quoteversion%TYPE,
    in_site_id                    IN expedio_response.site_id%TYPE,
    in_product_id                 IN expedio_response.product_id%TYPE,
    in_product_name               IN expedio_response.product_name%TYPE,
    in_modified_by                IN expedio_response.modified_by%TYPE,
    in_modified_date              IN expedio_response.modified_date%TYPE,
    in_reason                     IN expedio_response.reason%TYPE,
    in_status                     IN expedio_response.status%TYPE,
    in_sub_status                 IN expedio_response.sub_status%TYPE,
    in_completion_date            IN expedio_response.completion_date%TYPE,
    in_ifc_flag                   IN expedio_response.ifc_flag%TYPE,
    in_order_line_item_id         IN expedio_response.order_line_item_id%TYPE,
    in_order_line_item_status_ksu IN expedio_response.order_line_item_status_ksu%TYPE,
    out_status OUT NUMBER,
    out_errmsg OUT VARCHAR2 )
AS
  CURSOR order_detials_cur
  IS
  /******************************************************************************
   NAME:       SQE Mobile Express -MX select Query for BOM.
   PURPOSE:    This SP is used display the full confi. of the MX flow.

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        04/03/2010   Suman           1. Modification of the query.


 ******************************************************************************/

    /*         SELECT oli.product_name AS "PRODUCT_NAME" ,pmd.prod_friendly_id AS "ORDER_LINE_IM_ID"---pmd.prod_friendly_id||qh.quote_id AS "ORDER_LINE_IM_ID"
    FROM order_line_item oli INNER JOIN order_header oh
    ON oli.order_header_id=oh.order_header_id
    LEFT OUTER JOIN quote_header qh
    ON qh.quote_header_id =oh.quote_header_id
    INNER JOIN product_master pm
    ON upper(pm.product_name) = upper('BT MOBILEXPRESS')
    INNER JOIN product_master_details pmd
    ON  upper(oli.product_name) = upper(pmd.product_name) AND pmd.parent_group_id=2
    INNER JOIN site s
    ON s.site_id =oli.site_id
    INNER JOIN quote_site qs
    ON s.site_id =qs.site_id AND qs.active='Y'
    WHERE oli.product_id=in_product_id
    AND oli.active='Y'
    AND oh.quote_header_id= in_quote_header_id
    AND oli.site_id=in_site_id
    UNION
    SELECT li.product_name AS "PRODUCT_NAME",pmd.prod_friendly_id AS "ORDER_LINE_IM_ID"---pmd.prod_friendly_id||q.quote_id AS "ORDER_LINE_IM_ID"
    FROM quote q
    LEFT OUTER JOIN  quote_header qh
    ON q.quote_id = qh.quote_id
    INNER JOIN line_item li
    ON qh.quote_header_id = li.quote_header_id
    INNER JOIN product_master pm
    ON upper(pm.product_name) = upper('BT MOBILEXPRESS')
    INNER JOIN product_master_details pmd
    ON  li.product_name = pmd.product_name AND pmd.parent_group_id=2
    INNER JOIN site s
    ON s.site_id =li.site_id
    INNER JOIN quote_site qs2
    ON s.site_id =qs2.site_id AND qs2.active='Y'
    AND li.active='Y'
    WHERE li.product_id=in_product_id
    AND li.active='Y'
    AND li.quote_header_id= in_quote_header_id
    AND li.site_id=in_site_id;
    */
    -- commented By Sandeep on 02-Feb-2011 for testing unique Order_line_item_id in Expedio Response Table
    /*          SELECT oli.product_name AS "PRODUCT_NAME" ,olid.row_id,pmd.prod_friendly_id||olid.row_id AS "ORDER_LINE_IM_ID"
    FROM order_line_item oli INNER JOIN order_header oh
    ON oli.order_header_id=oh.order_header_id
    INNER JOIN order_line_item_detail olid
    ON oli.order_line_item_id = olid.order_line_item_id
    LEFT OUTER JOIN quote_header qh
    ON qh.quote_header_id =oh.quote_header_id
    INNER JOIN product_master pm
    ON upper(pm.product_name) = upper('BT MOBILEXPRESS')
    INNER JOIN product_master_details pmd
    ON  upper(oli.product_name) = upper(pmd.product_name) AND pmd.parent_group_id=2
    INNER JOIN site s
    ON s.site_id =oli.site_id
    INNER JOIN quote_site qs
    ON s.site_id =qs.site_id
    AND qs.quote_header_id = oh.quote_header_id
    AND qs.active='Y'
    WHERE oli.product_id= in_product_id
    AND oli.active='Y'
    AND oh.quote_header_id= in_quote_header_id
    AND oli.site_id= in_site_id
    UNION
    SELECT li.product_name AS "PRODUCT_NAME",lid.row_id,pmd.prod_friendly_id||lid.row_id AS "ORDER_LINE_IM_ID"
    FROM quote q
    LEFT OUTER JOIN  quote_header qh
    ON q.quote_id = qh.quote_id
    INNER JOIN line_item li
    ON qh.quote_header_id = li.quote_header_id
    INNER JOIN line_item_detail lid
    ON li.line_item_id = lid.line_item_id
    INNER JOIN product_master pm
    ON upper(pm.product_name) = upper('BT MOBILEXPRESS')
    INNER JOIN product_master_details pmd
    ON  UPPER(li.product_name) = UPPER(pmd.product_name)
    AND pmd.parent_group_id=2
    INNER JOIN site s
    ON s.site_id =li.site_id
    INNER JOIN quote_site qs2
    ON s.site_id =qs2.site_id
    AND qs2.quote_header_id = li.quote_header_id
    AND qs2.active='Y'
    AND li.active='Y'
    WHERE li.product_id= in_product_id
    AND li.active='Y'
    AND li.quote_header_id= in_quote_header_id
    AND li.site_id= in_site_id; */
    SELECT DECODE(UPPER(oli.product_name),
            'BT MOBILEXPRESS MOBILE ID TOKEN PACK',
            'BT MOBILEXPRESS MOBILE ID TOKEN' ,
            oli.product_name) AS "PRODUCT_NAME",
      OLID.ROW_ID,
      PMD.PROD_FRIENDLY_ID||OLID.ROW_ID||QH.QUOTE_ID||OLI.SITE_ID
      AS "ORDER_LINE_IM_ID"
    FROM order_line_item oli
    INNER JOIN order_header oh
    ON oli.order_header_id=oh.order_header_id
    INNER JOIN order_line_item_detail olid
    ON oli.order_line_item_id = olid.order_line_item_id
    LEFT OUTER JOIN quote_header qh
    ON qh.quote_header_id =oh.quote_header_id
    INNER JOIN product_master pm
    ON upper(pm.product_name) = upper('BT MOBILEXPRESS')
    INNER JOIN product_master_details pmd
    ON upper(oli.product_name) = upper(pmd.product_name)
    AND pmd.prod_friendly_id  <> 350861
    AND pmd.parent_group_id    =2
    INNER JOIN site s
    ON s.site_id =oli.site_id
    INNER JOIN quote_site qs
    ON s.site_id                         =qs.site_id
    AND qs.quote_header_id               = oh.quote_header_id
    AND qs.active                        ='Y'
    WHERE oli.product_id                 = in_product_id
    AND oli.active                       ='Y'
    AND oh.quote_header_id               = in_quote_header_id
    AND oli.site_id                      = in_site_id
    AND olid.value                      <> '-'
    AND olid.order_line_item_det_id NOT IN
      (SELECT order_line_item_det_id
      FROM
        (SELECT b.order_line_item_det_id,
          a.product_name ,
          row_number() OVER (PARTITION BY a.product_name ORDER BY b.row_id ASC) rn
        FROM order_header oh,
          order_line_item a,
          order_line_item_detail b ,
          product_master_details c
        WHERE a.order_line_item_id = b.order_line_item_id
        AND UPPER(a.product_name)  = UPPER(c.product_name)
        AND a.order_header_id      = oh.order_header_id
        AND a.product_id           = in_product_id
        AND oh.quote_header_id     = in_quote_header_id
        AND A.site_id              = in_site_id
        AND c.parent_group_id      = 2
        AND c.prod_friendly_id    IN (350845,350860,350864,399560,399561,399559,
                                      399562,399563,378408, 350847,378407,378406,
                                      350850,350848,350841,399558,350840,350849,
                                      613407,350863)
        AND a.active               = 'Y'
        AND b.active               = 'Y'
        ) ex
    WHERE ex.rn > 1
      )
    UNION
    SELECT DECODE(UPPER(li.product_name),
          'BT MOBILEXPRESS MOBILE ID TOKEN PACK',
          'BT MOBILEXPRESS MOBILE ID TOKEN' ,
          li.product_name) AS "PRODUCT_NAME",
      LID.ROW_ID,
      PMD.PROD_FRIENDLY_ID||LID.ROW_ID||QH.QUOTE_ID||S.SITE_ID
      AS "ORDER_LINE_IM_ID"
    FROM quote q
    LEFT OUTER JOIN quote_header qh
    ON q.quote_id = qh.quote_id
    INNER JOIN line_item li
    ON qh.quote_header_id = li.quote_header_id
    INNER JOIN line_item_detail lid
    ON li.line_item_id = lid.line_item_id
    INNER JOIN product_master pm
    ON upper(pm.product_name) = upper('BT MOBILEXPRESS')
    INNER JOIN product_master_details pmd
    ON UPPER(li.product_name) = UPPER(pmd.product_name)
    AND pmd.prod_friendly_id <> 350861
    AND pmd.parent_group_id   =2
    INNER JOIN site s
    ON s.site_id =li.site_id
    INNER JOIN quote_site qs2
    ON s.site_id                     =qs2.site_id
    AND qs2.quote_header_id          = li.quote_header_id
    AND qs2.active                   ='Y'
    AND li.active                    ='Y'
    WHERE li.product_id              = in_product_id
    AND li.active                    ='Y'
    AND li.quote_header_id           = in_quote_header_id
    AND li.site_id                   = in_site_id
    AND lid.value                   <> '-'
    AND lid.line_item_detail_id NOT IN
      (SELECT line_item_detail_id
      FROM
        (SELECT b.line_item_detail_id,
          a.product_name ,
          row_number() OVER (PARTITION BY a.product_name ORDER BY b.row_id ASC) rn
        FROM line_item a,
          line_item_detail b ,
          product_master_details c
        WHERE a.line_item_id     = b.line_item_id
        AND UPPER(a.product_name)= UPPER(c.product_name)
        AND a.product_id         = in_product_id
        AND a.quote_header_id    = in_quote_header_id
        AND a.site_id            = in_site_id
        AND c.parent_group_id    = 2
        AND C.PROD_FRIENDLY_ID  IN (350845,350860,350864,399560,399561,399559,399562,
                                    399563,378408, 350847,378407,378406,350850,350848,
                                    350841,399558,350840,350849,613407,350863)
        AND a.active             = 'Y'
        AND b.active             = 'Y'
        ) ex
      WHERE ex.rn >1
      ) ;
    order_detials_rec order_detials_cur%rowtype;
    v_count         NUMBER (10);
    v_expedio_count NUMBER (10);
    v_flag          CHAR (1) := '1';
    v_sql_code      NUMBER;
    v_sql_errm      VARCHAR2(150);
  BEGIN

    SELECT COUNT (*)
    INTO v_count
    FROM quote_header qh
    INNER JOIN quote_site qs
    ON qh.quote_header_id = qs.quote_header_id
    INNER JOIN site s
    ON qs.site_id                = s.site_id
    WHERE qh.quote_header_id     = in_quote_header_id
    AND qh.expedio_quoteversion  =in_expedio_quoteversion
    AND (QS.ACTIVE               = PKG_CONSTANTS.CON_ACTIVEFLAG_YES);

    IF (in_expedio_quoteversion IS NULL) THEN
      BEGIN
        out_status := pkg_constants.con_status_failure;
        out_errmsg := 'Quote Version cannot be null';
        v_flag     := '0';
      END;
     END IF;

    IF (v_flag = '1') THEN
      BEGIN
        IF v_count <> 0 THEN
          SELECT COUNT (*)
          INTO v_expedio_count
          FROM expedio_response
          WHERE site_id           = in_site_id AND
            quote_header_id       = in_quote_header_id
          AND quote_id            = in_quote_id
          AND expedio_quoteversion=in_expedio_quoteversion
          AND exp_order_id        =in_exp_order_id;
          IF v_expedio_count      = 0 THEN
            OPEN order_detials_cur;
            LOOP
              FETCH order_detials_cur INTO order_detials_rec;
              EXIT
            WHEN order_detials_cur%notfound;

              INSERT
              INTO expedio_response
                (
                  exp_order_id,
                  exp_quote_id,
                  expedio_ref_id,
                  expedio_quoteversion,
                  site_id,
                  product_id,
                  product_name,
                  quote_id,
                  quote_header_id,
                  order_line_item_id,
                  VERSION,
                  modified_by,
                  modified_date,
                  expedio_response_id -- Added by Sujana on 19/11/2010 as part of introducing new column
                )
                VALUES
                (
                  in_exp_order_id ,
                  in_exp_quote_id,
                  in_expedio_ref_id ,
                  in_expedio_quoteversion ,
                  in_site_id,
                  in_product_id,
                  order_detials_rec.product_name ,
                  in_quote_id ,
                  in_quote_header_id ,
                  order_detials_rec.order_line_im_id,
                  in_sqeversion,
                  in_modified_by,
                  SYSDATE,
                  expedio_response_id.nextval -- Added by Sujana on 19/11/2010 as part of introducing new column
                );
            END LOOP;
            CLOSE order_detials_cur;
            out_status         := pkg_constants.con_status_success;
            OUT_ERRMSG         := 'Successful';

          elsif v_expedio_count<>0 THEN
            UPDATE expedio_response
            SET exp_order_id        =in_exp_order_id,
              exp_quote_id          =in_exp_quote_id,
              expedio_ref_id        =in_expedio_ref_id,
              expedio_quoteversion  =in_expedio_quoteversion,
              site_id               =in_site_id,
              product_id            =in_product_id,
--              product_name          =in_product_name,
              quote_id              =in_quote_id,
              quote_header_id       =in_quote_header_id,
              VERSION               =in_sqeversion,
              modified_by           =in_modified_by,
              modified_date         =SYSDATE
            WHERE quote_header_id   = in_quote_header_id
            AND quote_id            = in_quote_id
            AND expedio_quoteversion=in_expedio_quoteversion
            AND exp_order_id        =in_exp_order_id
            AND site_id             =in_site_id;
            out_status             := pkg_constants.con_status_success;
            out_errmsg             := 'Successful';
          END IF;

        elsif v_count=0 THEN
          UPDATE expedio_response
          SET modified_by                    =in_modified_by,
            modified_date                    =SYSDATE,
            status                           =in_status,
            sub_status                       =in_sub_status,
            completion_date                  =in_completion_date,
            ifc_flag                         =in_ifc_flag,
            order_line_item_status_ksu       = in_order_line_item_status_ksu,
            reason                           =in_reason
          WHERE expedio_quoteversion         =in_expedio_quoteversion
          AND (order_line_item_id            = in_order_line_item_id
          OR (in_order_line_item_id         IS NULL
          AND NVL (in_order_line_item_id, 0) = 0))
          AND exp_order_id                   =in_exp_order_id;
          out_errmsg                        := 'Successful';
          out_status                        := pkg_constants.con_status_success;
        END IF;
      END;
    END IF;
  EXCEPTION
  WHEN OTHERS THEN
    out_status := pkg_constants.con_status_failure;
    out_errmsg := SUBSTR(sqlerrm,1,150);
    v_sql_code := SQLCODE;
    pkg_common.spi_error_log( in_quote_id, in_quote_header_id, in_site_id, NULL, NULL, 'SP_EXPEDIO_RESPONSE_BOM_R9', v_sql_code, out_errmsg );
  END sp_expedio_response_bom_r9;
/

----------------------------------------------------------------------------
  -- END: DDL for Procedures
----------------------------------------------------------------------------

----------------------------------------------------------------------------
  -- START: DDL for Packages
----------------------------------------------------------------------------
CREATE OR REPLACE package          pkg_common
as
   FUNCTION fn_splitdata (in_string IN VARCHAR2, in_separator IN VARCHAR2)
      RETURN varchar2_ntt;

   FUNCTION to_string (
      nt_in          IN   varchar2_ntt,
      delimiter_in   IN   VARCHAR2 DEFAULT ','
   )
      RETURN VARCHAR2;
         FUNCTION fn_countfields (in_row IN VARCHAR2, in_separator IN VARCHAR2)
      RETURN NUMBER;

   FUNCTION fn_splitbulkupload (in_string IN CLOB, in_separator IN VARCHAR2)
      RETURN varchar2_clob;                          --used in bulk_upload sp

   FUNCTION fn_countbulkupload (in_row IN VARCHAR2, in_separator IN VARCHAR2)
      RETURN NUMBER;                                 --used in bulk_upload sp

--Start created by Nagendra on 23-NOV-2010
--This procedure is added for saving error log information
PROCEDURE spi_error_log (
   in_quote_id          NUMBER,
   in_quote_header_id   NUMBER,
   in_site_id           NUMBER,
   in_attribute_string  VARCHAR2,
   in_pkg_name          VARCHAR2,
   in_proc_name         VARCHAR2,
   in_error_code        NUMBER,
   in_error_message     VARCHAR2
);
--End

/*****R15***/
FUNCTION getprimaryaccesstechnology (
   in_quoteheaderid   quote_header.quote_header_id%TYPE,
   IN_SITEID          SITE.SITE_ID%TYPE
)    RETURN VARCHAR2;
FUNCTION getsecondaryaccessresilience (
   in_quoteheaderid   quote_header.quote_header_id%TYPE,
   IN_SITEID          SITE.SITE_ID%TYPE
)    RETURN VARCHAR2;
FUNCTION getsecondaryaccesstechnology (
   in_quoteheaderid   quote_header.quote_header_id%TYPE,
   IN_SITEID          SITE.SITE_ID%TYPE
)    RETURN VARCHAR2;

end pkg_common;
/


CREATE OR REPLACE PACKAGE pkg_constants
  -- ****************************************************************************
  -- Copyright  : British Telecommunication Plc.
  -- Author     : Tech Mahindra
  -- Created    : 06-NOV-2009
  -- Purpose    : Declare constants used by all PRODSQE  packages.
  -- Assumption : None.
  -- Notes      : Declare constants used by all PRODSQE  packages.
  -- Changes    :
  -- Version    Date           Author        Description
  -- -------    ----          ------        -----------
  --  1.1       12/31/2009    Tanmayi         1.Added constants for primary and secondary customer contacts
  --  1.2       02/16/2010    Tanmayi         1.Added constants for Customer_Approved and Budgetory Pricing status
  --  1.3       02/18/2010    Tanmayi         1.Added constants for attribute mapping id and value for resiliency
  --  1.4       08/06/2010    Sandeep Singh   1.Added constants for GHUCS F'names and Attributes and corresponding
  --                                            identifiers we are using in code.
  --  1.5       10/28/2010    Sandeep Singh   1.Added constants for GHUCS F'Names and Attribute Names for R9
  --                                          2.Product attributes and Pricing Attributes range defined for all the existing
  --                                            existing products GHUCS (Hosted Unified Communication System)
  --  1.6       10/28/2010        Suman           1.Added constants for Contact IPSEC Names for R9
  --  1.7       10/28/2010        Suman           1.Added constants for Contact   con_orde_contact_sitecontact  con_deliv_contact_sitecontact   Names for R9
  --  1.8       02/18/2010        Suman           1.Product Name change BT MOBILEXPRESS IP SEC VPN (CISCO) to BT MOBILEXPRESS MOBILE IPSEC VPN
  -- ****************************************************************************
AS
  con_activeflag_yes            constant VARCHAR2 (1)    := 'Y';
  con_activeflag_no             constant VARCHAR2 (1)    := 'N';
  con_status_failure            constant NUMBER          := 0;
  con_status_success            constant NUMBER          := 1;
  con_status_duplicate          constant NUMBER          := 2;
  con_update_flag               constant VARCHAR2 (1)    := 'U';
  con_insert_flag               constant VARCHAR2 (1)    := 'I';
  con_centralsite               constant VARCHAR2 (20)   := 'CentralSiteName';
  con_delimhash                 constant VARCHAR2 (2)    := '##';
  con_delimpipe                 constant VARCHAR2 (3)    := '|||';
  con_delimcolon                constant VARCHAR2 (3)    := '::';

  --***************---------SITE CONTACT INFROMATION ----------------------------********
  con_primary_custcontact       constant VARCHAR2 (30) := 'PRIMARY CUSTOMER CONTACT';
  con_secondary_custcontact     constant VARCHAR2 (30) := 'SECONDARY CUSTOMER CONTACT';
  con_contacttype_primary       constant NVARCHAR2 (255) := 'PRIMARY SITE CONTACT';
  con_billingcontact            constant VARCHAR2 (30)   := 'BILLING CONTACT';
  con_primary_sitecontact       constant VARCHAR2 (30)   := 'PRIMARY SITE CONTACT';
  con_secondary_sitecontact     constant VARCHAR2 (30)   := 'SECONDARY SITE CONTACT';
  con_tech_sitecontact          constant VARCHAR2 (30)   := 'TECHNICAL SITE CONTACT';
  con_serv_assur_sitecontact    constant VARCHAR2 (30)   := 'SERVICE ASSURANCE SITE CONTACT';
  con_serv_deli_sitecontact     constant VARCHAR2 (30)   := 'SERVICE DELIVERY SITE CONTACT';
  con_ipsec_contact_sitecontact constant VARCHAR2 (30)   := 'IPSEC CONTACT' ;
  con_orde_contact_sitecontact  constant VARCHAR2 (50)   := 'ORDERING ORGANISATION CONTACT' ;
  con_deliv_contact_sitecontact constant VARCHAR2 (50)   := 'DELIVERY ORGANISTATION CONTACT' ;
  con_primary_flag              constant VARCHAR2 (1)    := 'P';
  con_secondary_flag            constant VARCHAR2 (1)    := 'S';
  --added on 31/12/2009

  -- customer distributor contact types
  con_cus_sales_supp_contact constant VARCHAR2 (50) := 'CUSTOMER SALES SUPPORT CONTACT';
  con_cus_sys_engg_contact   constant VARCHAR2 (50) := 'CUSTOMER SYSTEM ENGG CONTACT';
  con_cus_acct_mgr_contact   constant VARCHAR2 (50) := 'CUSTOMER ACCOUNT MGR CONTACT';
  con_cus_order_mgr_contact  constant VARCHAR2 (50) := 'CUSTOMER ORDER MGR CONTACT';
  con_cus_bt_prj_mgr_contact constant VARCHAR2 (50) := 'CUSTOMER BT PROJECT MGR CONTACT';


  /****************************************** Added for MX  Constants names **************************************************/
  -- mx Mobile id contact types
  con_cus_mx_mob_id_cust_sec_off constant VARCHAR2 (50) := 'CUSTOMER SECURITY OFFICER';
  con_cus_mx_mob_id_deliv_add    constant VARCHAR2 (50) := 'MOBILE ID DELIVERY ADDRESS';
  -- mx Internet teleworker contact types
  con_cus_mx_itw_work_corp_admin constant VARCHAR2 (50) :='WORK PLACE CORPORATE ADMINISTRATOR';
  con_cus_mx_itw_billing_cont    constant VARCHAR2 (50) :='ITW BILLING CONTACT';
  -- mx 3G France contact types
  con_cus_mx_3gf_admin_contact constant VARCHAR2 (50) :='3G ADMINISTRATOR CONTACT';
  con_cus_mx_3gf_billing_cont  constant VARCHAR2 (50) :='3G FRANCE BILLING CONTACT';
  ---MX proxy radius
  con_cus_mx_radius_cont      constant varchar2 (50) :='RADIUS CONTACT';
  ---BT CPE
  con_cus_mx_ord_org_cont      constant varchar2 (50) :='ORDERING ORGANISATION CONTACT';
  con_cus_mx_deli_org_cont     constant varchar2 (50) :='DELIVERY ORGANISTATION CONTACT';
  ----mx bfg concate types
  con_cus_mx_bfg_sitprim_cont  constant VARCHAR2 (50) :='Site Primary Contact';
  con_cus_mx_bfg_service_cont  constant VARCHAR2 (50) :='Service Contact';
  con_cus_mx_bfg_delivery_cont constant VARCHAR2 (50) :='Delivery Contact';
  con_cus_mx_bfg_billing_cont  constant varchar2 (50) :='Billing Contact';


  ----mx constant product name information
  con_mx_product_key          NUMBER := 1012437;
  con_prod_bt_mobilexpress    constant VARCHAR2 (50)      := 'BT MOBILEXPRESS';
  con_prod_bt_mx_profess      constant VARCHAR2 (50)      := 'BT MOBILEXPRESS PROFESSIONAL';
  con_prod_bt_mx_mobileid     constant VARCHAR2 (50)      := 'BT MOBILEXPRESS MOBILE ID';
  con_prod_bt_mx_itw          constant VARCHAR2 (50)      := 'BT MOBILEXPRESS INTERNET TELEWORKER';
  con_prod_bt_mx_sslvpn       constant VARCHAR2 (50)      := 'BT MOBILEXPRESS MOBILE SSL VPN'; --'BT MOBILEXPRESS SSL VPN'; -R15 change
  con_prod_bt_mx_ipsec        constant VARCHAR2 (50)      := 'BT MOBILEXPRESS MOBILE IPSEC VPN';
  con_prod_bt_mx_btcpe        constant VARCHAR2 (50)      := 'BT GLOBAL CPE';
  con_prod_bt_mx_proxradi     constant VARCHAR2 (50)      :='BT MOBILEXPRESS PROXY RADIUS';
  con_prod_bt_mx_3g           constant VARCHAR2 (50)      := 'BT MOBILEXPRESS 3G (FRANCE)'; --'BT MOBILEXPRESS 3G'; --R15 change

   /****************************************** END of MX contact type change and Constant names *********************************/

  con_system_sqe            constant VARCHAR2 (10) := 'SQE';
  con_system_classic        constant VARCHAR2 (10) := 'CLASSIC';
  con_quote_status          constant VARCHAR2 (20) := 'CUSTOMER APPROVED';
  con_pricing_status        constant VARCHAR2 (10) := 'BUDGETARY';
  con_resiliency            constant VARCHAR2 (30) := 'STANDARD - UNBUNDLED';
  con_conntype_attrmapid    constant NUMBER        := 307;
  con_dslconntype_attrmapid constant NUMBER        := 133;
  con_resiliency_attrmapid  constant NUMBER        := 1;
  --904 Sprint 2
  con_status_failure_qref_expir constant NUMBER := 3;
  con_status_failure_qref_multi constant NUMBER := 4;
  --904 Sprint 2
  con_status_fail_bidreq_status constant NUMBER := 5;
  con_status_fail_bid_exp_status CONSTANT NUMBER :=6;
 -- Added on 17-AUG-2011
  con_status_fail_cpe_qref_expir constant NUMBER := 7;
  -- ##### Change for 904 - Call Anywhere  begin
  con_keep_cust_informeddetl constant VARCHAR2 (30) := 'KEEP CUSTOMER INFORMED DETAILS';
  -- ##### Change for 904 - Call Anywhere  end


  /* Strat : Constants for GHUCS R5 Added by Sandeep on 06-Aug-2010 */
  ghucs_product_key              VARCHAR2(10) := 1015234;
  ghucs_product_name             VARCHAR2(20) := 'HIPT - GLOBAL';
  ghucs_major_action_provide     VARCHAR2(10) := 'PROVIDE';
  ghucs_minor_action_provide     VARCHAR2(10) := 'PROVIDE';
  ghucs_major_action_amend       VARCHAR2(10) := 'AMEND';
  ghucs_minor_action_other       VARCHAR2(10) := 'OTHER';
  ghucs_minor_action_regrade     VARCHAR2(10) := 'REGRADE';
  ghucs_frdly_name_mac           VARCHAR2(10) := 'MAC';
  ghucs_frdly_name_line_service  VARCHAR2(20) := 'LINE SERVICE';
  ghucs_frdly_name_trunk_service VARCHAR2(20) := 'TRUNK SERVICE';
  ghucs_frdly_name_call_package  VARCHAR2(20) := 'CALL PACKAGE';
  ghucs_attr_name_line_type      VARCHAR2(20) := 'LINE TYPE';
  ghucs_attr_name_trunk_type     VARCHAR2(20) := 'TRUNK TYPE';
  ghucs_attr_name_call_pkg_type  VARCHAR2(20) := 'CALL PACKAGE TYPE';
  ghucs_attr_name_mac_type       VARCHAR2(20) := 'MAC TYPE';
  ghucs_friendly_name_identifier VARCHAR2(1)  := 'F';
  ghucs_attr_name_identifier     VARCHAR2(1)  := 'A';
  ghucs_validation_identifier    VARCHAR2(1)  := 'V';
  /* End : Constants for GHUCS R5 Added by Sandeep on 06-Aug-2010 */

  /* Start : Constants for GHUCS R7 Added by Sandeep on 09-Aug-2010 */
  ghucs_frdly_name_voice_mail VARCHAR2(30) := 'HOSTED IPT VOICE MAIL';
  ghucs_attr_name_voice_mail  VARCHAR2(20) := 'VOICE MAIL TYPE';
  /* End : Constants for GHUCS R7 Added by Sandeep on 09-Aug-2010 */

  /*Start : Constants for GHUCS R7 Added by Sandeep on 08-Oct-2010*/
  ghucs_frdly_name_cntct_cntr VARCHAR2(30) :='GHUCS CONTACT CENTRE';
  ghucs_frdly_name_hstd_cisco VARCHAR2(40) :='HOSTED CONTACT CENTRE WITH CISCO';
  /*End : Constants for GHUCS R7 Added by Sandeep on 08-Oct-2010*/

  /*Product and Pricing Attributes Range for all SQE products*/
  ghucs_product_attr_range    VARCHAR2(50) :='2100 - 2499';
  ghucs_pricing_attr_range    VARCHAR2(50) :='5000 - 5999';
  mobx_product_attr_range     VARCHAR2(50) :='2800 - 5999';
  mobx_pricing_attr_range     VARCHAR2(50) :='490 - 1999 AND 6000 - 7999';
  mssp_product_attr_range     VARCHAR2(50) :='14000 - 14999';
  mssp_pricing_attr_range     VARCHAR2(50) :='15000 - 15999';
  onevoice_product_attr_range VARCHAR2(50) :='10000 - 10999';
  onevoice_pricing_attr_range VARCHAR2(50) :='10000 - 10999';
  /* Start : Constants for GHUCS R9 Added by Sandeep on 28-Oct-2010 */
  ghucs_frdly_name_cntct_csco    VARCHAR2(50) :='GHUCS CONTACT CENTRE - VOICE';
  ghucs_frdly_name_cntct_cntr_mm VARCHAR2(50) :='GHUCS CONTACT CENTRE - MULTIMEDIA';
  ghucs_frdly_name_agnt_optn_mm  VARCHAR2(50) :='GHUCS CONTACT CENTRE - AGENT OPTIONS MULTIMEDIA';
  ghucs_frdly_name_agnt_optn_vce VARCHAR2(50) :='GHUCS CONTACT CENTRE - AGENT OPTIONS VOICE';
  ghucs_frdly_name_ancilry_ftrs  VARCHAR2(50) :='GHUCS CONTACT CENTRE - ANCILLARY FEATURES';
  ghucs_frdly_name_cntr_othr_chg VARCHAR2(50) :='GHUCS CONTACT CENTRE OTHER CHARGE';
  ghucs_attr_name_ancillary_ftrs VARCHAR2(50) :='ANCILLARY FEATURES';
  ghucs_aatr_name_agent_options  VARCHAR2(50) :='AGENT OPTIONS';
  ghucs_attr_name_hipt_platform  VARCHAR2(50) :='HOST IPT PLATFORM';
  ghucs_attr_name_sales_channel  VARCHAR2(50) :='SALES CHANNEL';
  ghucs_attr_name_usg_comm_uom   VARCHAR2(50) :='USAGE COMMITMENT UOM';
  /* End : Constants for GHUCS R9 Added by Sandeep on 28-Oct-2010 */
END pkg_constants;
/


CREATE OR REPLACE PACKAGE          pkg_customer
AS
/******************************************************************************
   NAME:       PRODSQE
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0      10/29/2009    Rajkamal        1. Package for Customer related  CRUD Operations
   1.1      11/14/2009    Rajkamal        1. Added CustomerID as Output Parameter
   1.2      11/16/2009    Rajkamal        1. Added Address Line 2 and removed VN Routing Type
                                             and BGP Prefix Name
                                          2. Added VPN_INDEX and MSS_ID and created/modified By
   1.3      12/03/2009    Rajkamal        1. Removed Price List from Customer Insert
   1.4      12/22/2009    Rajkamal        1. Added Billing Code logic to both Insert And Update SP's
                                          2. Changed Nvarchar to Varchar in update sp
   1.5      12/29/2009    Rajkamal        1.Moved Billing Code as Last parameter in Update Customr SP
                                            in Billing input string
   1.6      12/31/2009   Tanmayi       1. Modified spi_customer to accept currency instead of currency_id in billing
                                          2. Modified spu_customer to accept currency instead of currency_id in billing
                                          3. Modified spi_customer to insert primary and secondary customer contact types
                                          4. Modified spu_customer to insert primary and secondary customer contact types

   1.7     04/21/2010      SUMAN          1. Modified spi_customer add two parameters  in_bfgcustname,in_bfgcustid
                                          2. Modified spu_customer add two parameters in_bfgcustname,in_bfgcustid
                                          3. Modified spi_customer to insert in_bfgcustname,in_bfgcustid
                                          4. Modified spu_customer to insert in_bfgcustname

******************************************************************************/
   PROCEDURE spi_customer (
      in_cname                  IN       customer.NAME%TYPE,
      in_comp                   IN       customer.company_name%TYPE,
      in_vat                    IN       customer.vat_number%TYPE,
      in_salchnid               IN       customer.sales_channel_id%TYPE,
      in_btsub                  IN       customer.bt_subsidiary_id%TYPE,
      --added for R1
      in_tax_exempted           IN       customer.tax_exempted%TYPE,
      in_tax_exempt_ref_num     IN       customer.tax_exempt_ref_num%TYPE,
      in_line_of_site_billing   IN       customer.line_of_site_billing%TYPE,
      in_centralsitelosb        IN       site.line_of_site_billing%TYPE,
      in_ccntryid               IN       address.country_id%TYPE,
      in_caddr1                 IN       address.address_line1%TYPE,
      in_caddr2                 IN       address.address_line2%TYPE,
      in_ccity                  IN       address.city%TYPE,
      in_czip                   IN       address.post_zip_code%TYPE,
      --for R1
      in_state                  IN       address.state%TYPE,
      in_county                 IN       address.county%TYPE,
      in_contacts               IN       VARCHAR2,
      in_vpndet                 IN       VARCHAR2,
      in_billingdet             IN       VARCHAR2,
      in_bfgcustid              IN       customer.bfg_customer_id%TYPE,
      -- Ghucs, Added new parameter in_bfgcustid
      in_bfgcustname            IN       customer.bfg_customer_name%TYPE,
      -- Ghucs, Added new parameter in_bfgcustname
      in_createdby              IN       customer.created_by%TYPE,
      out_custid                OUT      customer.customer_id%TYPE,
      out_status                OUT      NUMBER,
      out_errmsg                OUT      VARCHAR2
   );

   PROCEDURE spu_customer (
      in_cid                    IN       customer.customer_id%TYPE,
      in_comp                   IN       customer.company_name%TYPE,
      in_vat                    IN       customer.vat_number%TYPE,
      in_salid                  IN       customer.sales_channel_id%TYPE,
      --for R1
      in_tax_exempted           IN       customer.tax_exempted%TYPE,
      in_tax_exempt_ref_num     IN       customer.tax_exempt_ref_num%TYPE,
      in_line_of_site_billing   IN       customer.line_of_site_billing%TYPE,
      in_centralsitelosb        IN       site.line_of_site_billing%TYPE,
      in_ccntryid               IN       address.country_id%TYPE,
      in_caddr1                 IN       address.address_line1%TYPE,
      in_caddr2                 IN       address.address_line2%TYPE,
      in_ccity                  IN       address.city%TYPE,
      in_czip                   IN       address.post_zip_code%TYPE,
      --For R1
      in_state                  IN       address.state%TYPE,
      in_county                 IN       address.county%TYPE,
      in_contacts               IN       VARCHAR2,
      in_vpndet                 IN       VARCHAR2,
      in_billingdet             IN       VARCHAR2,
      in_bfgcustid              IN       customer.bfg_customer_id%TYPE,
      -- Ghucs, Added new parameter in_bfgcustid
      in_bfgcustname            IN       customer.bfg_customer_name%TYPE,
      -- Ghucs, Added new parameter in_bfgcustname
      in_modifiedby             IN       customer.modified_by%TYPE,
      --For R1
      in_classicsiteid          IN       site.classic_site_id%TYPE,
      in_classicsitename        IN       site.classic_site_name%TYPE,
      out_status                OUT      NUMBER,
      out_errmsg                OUT      VARCHAR2
   );


   PROCEDURE spi_vpn_newcustomers (
      in_custid    IN       vpn_customers.customer_id%TYPE,
      in_vpncust   IN       vpn_newcustomers_tbl,
      in_vpn_id    IN       VARCHAR2,
      out_status   OUT      NUMBER,
      out_errmsg   OUT      VARCHAR2
   );
   PROCEDURE spi_classic_bfg_billing (
      in_customer_id                billing_bfg_classic.customer_id%TYPE,
      in_classic_billing_id         billing_bfg_classic.classic_billing_id%TYPE,
      in_bfg_billing_id             billing_bfg_classic.bfg_billing_id%TYPE,
      out_status              OUT   NUMBER,
      out_errmsg              OUT   VARCHAR2
   );

--This sp is created for GHUCS R16 requirement on 13-Jul-2011

PROCEDURE spi_customer_billing (
   in_custid        IN       customer.customer_id%TYPE,
   in_billing_obj   IN       billing_tab,
   in_createdby     IN       customer.created_by%TYPE,
   out_status       OUT      NUMBER,
   out_errmsg       OUT      VARCHAR2
);

END pkg_customer;
/


CREATE OR REPLACE PACKAGE pkg_expedio_details
AS
PROCEDURE sps_expedio_quote_details (
      in_quoteid               IN       quote_header.EXPEDIO_QUOTEID%TYPE,
      in_quoteversion         IN       quote_header.EXPEDIO_QUOTEVERSION%TYPE,
      in_expediorefid          IN       quote_header.EXPEDIO_REF_ID%TYPE,
      out_quote_details     OUT      SYS_REFCURSOR,
      out_status             OUT      NUMBER,
      out_errmsg             OUT      VARCHAR2
   );
END pkg_expedio_details;
/


CREATE OR REPLACE PACKAGE           pkg_offer
IS
/******************************************************************************
   NAME:     PKG_OFFER
   PURPOSE:  Offer Letter Generation.

   Input Parameters 1. Quote Id and Quote Header Id
                    2.
                    3.

   Output Parameters 1. sys_refcursor for customer related information.
                     2. sys_refcursor for site and lineitem realted information.
                     3. out_status and out_errmsg for error handling.

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        12/20/2009   Srinivasa        1.Package for Offer Letter Generation -> customer and site/lineitem related information.
                                              This package contains discount approvals/Rejects for Sales Users/Bid Mgr and
                                              Exchange rate details for every quote header.
   2.0        04/08/2010   Arpitha          1. Added SPS_OFFERINFO_MODIFY which is used for modify journey as a part of R4 Modify
   3.0        08/26/2010   Amit Kumar       1.Added new SP sps_offerinfo_g for GHUCS R5
******************************************************************************/
   PROCEDURE sps_offerinfo (
      in_quoteid           IN       quote.quote_id%TYPE,
      in_quoteheaderid     IN       quote_header.quote_header_id%TYPE,
      out_custdetails      OUT      sys_refcursor,
      out_sitedetails      OUT      sys_refcursor,
      out_serviceoption    OUT      sys_refcursor,
      out_qref_caveat      OUT      sys_refcursor,
      -- Commented below param for perf increase as no product is using it -- 8/9/2011
      --out_productdetails   OUT      sys_refcursor,

      -- Added in_product_name on 17/12/2010 as part of introducing new table QUOTE_STATUS
      in_product_name         IN       VARCHAR2 DEFAULT NULL
   );

   PROCEDURE sps_offerinfo_g (
      in_quoteid           IN       quote.quote_id%TYPE,
      in_quoteheaderid     IN       quote_header.quote_header_id%TYPE,
      out_custdetails      OUT      sys_refcursor,
      out_sitedetails      OUT      sys_refcursor,
      out_serviceoption    OUT      sys_refcursor,
      out_qref_caveat      OUT      sys_refcursor,
      out_productdetails   OUT      sys_refcursor,
      -- Added in_product_name on 17/12/2010 as part of introducing new table QUOTE_STATUS
      in_product_name         IN       VARCHAR2 DEFAULT NULL,
      in_cust_id            IN     customer.customer_id%TYPE,  --Added by Khader for R16 GHUCS
      in_currency           IN     quote_header.currency%TYPE,  --Added by Khader for R16 GHUCS
      out_billingdetails    OUT      sys_refcursor              --Added by Khader for R16 GHUCS

   );

   PROCEDURE spu_quotesummary (
      in_pricelinedtid   IN       price_line_item_detail.price_line_item_detail_id%TYPE,
      in_discount        IN       price_line_item_detail.discount%TYPE,
      in_netprice        IN       price_line_item_detail.net_price%TYPE,
      in_modifiedby      IN       price_line_item_detail.modified_by%TYPE,
      out_status         OUT      NUMBER,
      out_errmsg         OUT      VARCHAR2,
      in_approved_disc   IN       NUMBER DEFAULT NULL,   -- added by bijeta for approved pricing requirment
      in_disc_requested  IN       NUMBER  DEFAULT NULL   -- Added on 25/7/2011
   );

   PROCEDURE spi_discountapproval (
      in_quotehrdid     IN       quote_header.quote_header_id%TYPE,
      in_submit         IN       discount_approval.submitted_by%TYPE,
      in_appstatus      IN       discount_approval.approval_status%TYPE,
      in_reason         IN       discount_approval.reason%TYPE,
      in_createdby      IN       discount_approval.created_by%TYPE,
      --in_Activity_Id    IN       discount_approval.Activity_Id%TYPE,
      --in_Bid_mgr_email  IN       discount_approval.Bid_managers_email%TYPE,
      --in_Sub_status     IN       discount_approval.Sub_status%TYPE,
      out_status        OUT      NUMBER,
      out_errmsg        OUT      VARCHAR2
   );

   PROCEDURE spi_exchangedetail (
      in_quotehrdid   IN       quote_header.quote_header_id%TYPE,
      in_srcurrency   IN       exchange_rate_detail.source_currency%TYPE,
      in_trcurrency   IN       exchange_rate_detail.target_currency%TYPE,
      in_exrate       IN       exchange_rate_detail.exchange_rate%TYPE,
      in_exratedt     IN       exchange_rate_detail.exchange_rate_date%TYPE,
      in_createdby    IN       exchange_rate_detail.created_by%TYPE,
      out_status      OUT      NUMBER,
      out_errmsg      OUT      VARCHAR2
   );

   PROCEDURE spu_quoteheader (
      in_quotehrdid      IN       quote_header.quote_header_id%TYPE,
      in_currency        IN       quote_header.currency%TYPE,
      in_status          IN       quote_header.status%TYPE,
      in_custsigndate    IN       quote_header.customer_signed_date%TYPE,
      in_capcheckrefno   IN       quote_header.capcheck_refno%TYPE,
      --904 added
      in_modifiedby      IN       quote_header.modified_by%TYPE,
      out_status         OUT      NUMBER,
      out_errmsg         OUT      VARCHAR2,
      -- Added in_product_name on 17/12/2010 as part of introducing new table QUOTE_STATUS
      in_product_name     IN       VARCHAR2 DEFAULT NULL
   );

   PROCEDURE sps_pricingdetails (
      in_quoteheaderid       IN       quote_header.quote_header_id%TYPE,
      in_attributelist       IN       VARCHAR2,
      out_reportpricingdet   OUT      sys_refcursor
   );

   PROCEDURE spu_cascadediscount (
      in_quotehrdid           IN       quote_header.quote_header_id%TYPE,
      in_onetime_discount     IN       price_line_item_detail.onetime_port_discount%TYPE,
      in_recurring_discount   IN       price_line_item_detail.recurring_port_discount%TYPE,
      in_modifiedby           IN       price_line_item_detail.modified_by%TYPE,
      out_status              OUT      NUMBER,
      out_errmsg              OUT      VARCHAR2
   );

   --Added by Arpitha on 04/08/2010 for R4 Modify
   PROCEDURE sps_offerinfo_modify (
   in_quoteid           IN       quote.quote_id%TYPE,
      in_quoteheaderid     IN       quote_header.quote_header_id%TYPE,
      out_custdetails      OUT      sys_refcursor,
      out_sitedetails1     OUT      sys_refcursor,
      out_sitedetails2     OUT      sys_refcursor,
      out_serviceoption    OUT      sys_refcursor,
      out_qref_caveat      OUT      sys_refcursor,
      out_productdetails   OUT      sys_refcursor,
      out_sitedetails      OUT      sys_refcursor,
      -- Added in_product_name on 17/12/2010 as part of introducing new table QUOTE_STATUS
      in_product_name         IN       VARCHAR2 DEFAULT NULL
   );


   PROCEDURE sps_offerinfo_test (
      in_quoteid           IN       quote.quote_id%TYPE,
      in_quoteheaderid     IN       quote_header.quote_header_id%TYPE,
      out_custdetails      OUT      sys_refcursor,
      out_sitedetails      OUT      sys_refcursor,
      out_serviceoption    OUT      sys_refcursor,
      out_qref_caveat      OUT      sys_refcursor,
      out_productdetails   OUT      sys_refcursor,
                          -- Ghucs,added new OUT parameter out_productdetails
      -- Added in_product_name on 17/12/2010 as part of introducing new table QUOTE_STATUS
      in_product_name         IN       VARCHAR2 DEFAULT NULL
   );

   PROCEDURE sps_offerinfo_ptp (
      in_quoteid           IN       quote.quote_id%TYPE,
      in_quoteheaderid     IN       quote_header.quote_header_id%TYPE,
      out_custdetails      OUT      sys_refcursor,
      out_sitedetails      OUT      sys_refcursor,
      out_serviceoption    OUT      sys_refcursor,
      out_qref_caveat      OUT      sys_refcursor,
      out_productdetails   OUT      sys_refcursor,
                          -- Ghucs,added new OUT parameter out_productdetails
      -- Added in_product_name on 17/12/2010 as part of introducing new table QUOTE_STATUS
      in_product_name         IN       VARCHAR2 DEFAULT NULL
   );


END;
/


CREATE OR REPLACE PACKAGE           PKG_OFFER_R5
IS
/******************************************************************************
   NAME:     PKG_OFFER
   PURPOSE:  Offer Letter Generation.

   Input Parameters 1. Quote Id and Quote Header Id
                    2.
                    3.

   Output Parameters 1. sys_refcursor for customer related information.
                     2. sys_refcursor for site and lineitem realted information.
                     3. out_status and out_errmsg for error handling.

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        12/20/2009   Srinivasa        1.Package for Offer Letter Generation -> customer and site/lineitem related information.
                                              This package contains discount approvals/Rejects for Sales Users/Bid Mgr and
                                              Exchange rate details for every quote header.
******************************************************************************/
   PROCEDURE  sps_offerinfo (
    in_quoteid          IN       quote.quote_id%TYPE,
    in_quoteheaderid    IN       quote_header.quote_header_id%TYPE,
    in_productid        IN       product_selection.product_id%TYPE, -- Added as part of R5 Re-eng
    out_custdetails     OUT      sys_refcursor,
    out_sitedetails     OUT      sys_refcursor,
    out_serviceoption   OUT      sys_refcursor ,
    out_qref_caveat     OUT      sys_refcursor,
    out_productdetails  OUT      sys_refcursor,          -- Ghucs,added new OUT parameter out_productdetails
    -- Added in_product_name on 17/12/2010 as part of introducing new table QUOTE_STATUS
    in_product_name      IN       VARCHAR2 DEFAULT NULL
 );

   PROCEDURE sps_pricingdetails
  (
    in_quoteheaderid      IN   quote_header.QUOTE_HEADER_ID%TYPE,
    in_productid          IN   product_selection.product_id%TYPE, -- Added as part of R5 Re-eng
    in_attributelist      IN   VARCHAR2,
    out_reportpricingdet  OUT  sys_refcursor
   );


end;
/


CREATE OR REPLACE PACKAGE PKG_ORDER_R5 AS

  /* TODO enter package declarations (types, exceptions, methods etc) here */

  TYPE t_attrmapid IS TABLE OF attribute_mapping.attribute_mapping_id%TYPE
      INDEX BY BINARY_INTEGER;

   TYPE t_configlevel IS TABLE OF attribute_mapping.config_level%TYPE
      INDEX BY BINARY_INTEGER;

   TYPE t_value IS TABLE OF line_item_detail.VALUE%TYPE
      INDEX BY BINARY_INTEGER;

   TYPE t_qty IS TABLE OF NUMBER
      INDEX BY BINARY_INTEGER;

   TYPE t_billing IS TABLE OF VARCHAR2 (20)
      INDEX BY BINARY_INTEGER;

  PROCEDURE spi_order (
      in_quoteheaderid              IN       quote_header.quote_header_id%TYPE,
      in_bid                        IN       quote_header.bid_number%TYPE,
      in_oppid                      IN       quote_header.opportunity_id%TYPE,
      in_orderstatus                IN       order_header.order_status%TYPE,
      in_ordertype                  IN       order_header.order_type%TYPE,
      in_createdby                  IN       order_header.created_by%TYPE,
      in_contractid                 IN       order_header.contract_id%TYPE,
      in_comments                   IN       order_header.comments%TYPE,
      in_ofsd                       IN       VARCHAR2,
      in_quotestatus                IN       VARCHAR2,
      in_is_order_rejected          IN       VARCHAR2,
                                         --904 Sprint2 clean order management
      --R1 IP Clear Reach out begin
      in_is_order_ipclearreachout   IN       order_header.is_order_ipclearreachoutsite%TYPE,
      in_ftip_number                IN       order_header.ftip_number%TYPE,
      in_emailid                    IN       order_header.emailid%TYPE,
      --R1 IP Clear Reach out end
      --R3 Hub and Spoke begin
      in_vpn_connectivity_mode      IN       order_header.vpn_connectivity_mode%TYPE,
      --R3 Hub and Spoke end
      io_orderheaderid              IN OUT   order_header.order_header_id%TYPE,
      out_status                    OUT      NUMBER,
      out_errmsg                    OUT      VARCHAR2,
      in_product_name    IN       VARCHAR2 DEFAULT NULL
   );

   --TYPE ORDERSITE_TAB IS TABLE OF ordersite_obj;

     PROCEDURE spu_update_exp_st_details (
  --added on 6th Aug 2010 by Bharathi to update expedio details
      in_exp_output    IN       ORDERSITE_TAB,
      in_modifiedby   IN       site.modified_by%TYPE,
      out_status       OUT      NUMBER,
      out_errmsg       OUT      VARCHAR2
   );

  /* Procedure for Expedio Response*/
PROCEDURE sp_expedio_response
  (
    in_quote_id             IN EXPEDIO_RESPONSE.quote_id%TYPE,
    in_quote_header_id      IN EXPEDIO_RESPONSE.quote_header_id%TYPE,
    in_version              IN EXPEDIO_RESPONSE.version%TYPE,
    in_exp_order_id         IN EXPEDIO_RESPONSE.exp_order_id%TYPE,
    in_exp_quote_id         IN EXPEDIO_RESPONSE.exp_quote_id%TYPE,
    in_expedio_ref_id       IN EXPEDIO_RESPONSE.expedio_ref_id%TYPE,
    in_expedio_quoteversion IN EXPEDIO_RESPONSE.expedio_quoteversion%TYPE,
    in_site_id              IN EXPEDIO_RESPONSE.site_id%TYPE,
    in_product_id           IN EXPEDIO_RESPONSE.product_id%TYPE,
    in_product_name         IN EXPEDIO_RESPONSE.product_name%TYPE,
    in_modified_by          IN EXPEDIO_RESPONSE.modified_by%TYPE,
    in_modified_date        IN EXPEDIO_RESPONSE.modified_date%TYPE,
    in_reason               IN EXPEDIO_RESPONSE.reason%TYPE,
    in_status               IN EXPEDIO_RESPONSE.status%TYPE,
    in_sub_status           IN EXPEDIO_RESPONSE.sub_status%TYPE,
    in_completion_date      IN EXPEDIO_RESPONSE.completion_date%TYPE,
    in_ifc_flag             IN EXPEDIO_RESPONSE.IFC_FLAG%TYPE,
    out_errmsg              OUT VARCHAR2
    );


  -- for r5 order rejection update for expedio

   PROCEDURE spu_expedio_response (

    in_exp_order_id         IN EXPEDIO_RESPONSE.EXP_ORDER_ID%TYPE,
    in_expedio_quoteversion IN EXPEDIO_RESPONSE.EXPEDIO_QUOTEVERSION%TYPE,
    in_reason               IN EXPEDIO_RESPONSE.REASON%TYPE,
    in_status               IN EXPEDIO_RESPONSE.STATUS%TYPE,
    in_sub_status           IN EXPEDIO_RESPONSE.SUB_STATUS%TYPE,
    in_completion_date      IN  EXPEDIO_RESPONSE.COMPLETION_DATE%TYPE,
    out_status       OUT      NUMBER,
    out_errmsg       OUT      VARCHAR2
   );

PROCEDURE sp_expedio_response_test
  (
    in_quote_id             IN EXPEDIO_RESPONSE.quote_id%TYPE,
    in_quote_header_id      IN EXPEDIO_RESPONSE.quote_header_id%TYPE,
    in_version              IN EXPEDIO_RESPONSE.version%TYPE,
    in_exp_order_id         IN EXPEDIO_RESPONSE.exp_order_id%TYPE,
    in_exp_quote_id         IN EXPEDIO_RESPONSE.exp_quote_id%TYPE,
    in_expedio_ref_id       IN EXPEDIO_RESPONSE.expedio_ref_id%TYPE,
    in_expedio_quoteversion IN EXPEDIO_RESPONSE.expedio_quoteversion%TYPE,
    in_site_id              IN EXPEDIO_RESPONSE.site_id%TYPE,
    in_product_id           IN EXPEDIO_RESPONSE.product_id%TYPE,
    in_product_name         IN EXPEDIO_RESPONSE.product_name%TYPE,
    in_modified_by          IN EXPEDIO_RESPONSE.modified_by%TYPE,
    in_modified_date        IN EXPEDIO_RESPONSE.modified_date%TYPE,
    in_reason               IN EXPEDIO_RESPONSE.reason%TYPE,
    in_status               IN EXPEDIO_RESPONSE.status%TYPE,
    in_sub_status           IN EXPEDIO_RESPONSE.sub_status%TYPE,
    in_completion_date      IN EXPEDIO_RESPONSE.completion_date%TYPE,
    in_ifc_flag             IN EXPEDIO_RESPONSE.IFC_FLAG%TYPE,
    out_errmsg              OUT VARCHAR2
    );

----changes for  Site Infonet section on 01-sep-2010
PROCEDURE spi_order_infonetsite_detail (
      in_siteid                    IN       site_infonet.site_id%TYPE,
         in_ivs_migr_order         IN       site_infonet.IVS_MIGRATION_ORDER%TYPE,
         in_ivs_migr_team           IN       site_infonet.IVS_MIGRATION_TEAM%TYPE,
      in_ivsgateway           IN       site_infonet.IVS_PHASE2GATEWAY%TYPE,
      in_tpe_id                   IN       site_infonet.TPE_ID%TYPE,
      in_url                      IN       site_infonet.URL_DETAILS%TYPE,
          --in_modifiedby            IN       order_site_detail.created_by%TYPE,
      out_status                 OUT      NUMBER,
      out_errmsg                 OUT      VARCHAR2 );

  --Start R5 Reeng 2-Sept-2010
    PROCEDURE spi_order_site_detail (
      in_orderheaderid     IN       order_header.order_header_id%TYPE,
      in_customerid        IN       customer.customer_id%TYPE,
      in_siteid            IN       order_site_detail.site_id%TYPE,
--      in_classicsiteid     IN       site.classic_site_id%TYPE,--commented for R5 Reeng
--      in_classicsitename   IN       site.classic_site_name%TYPE, --commented for R5 Reeng
      in_crd               IN       VARCHAR2,
      in_sitebillingid     IN       order_site_detail.billing_id%TYPE,
      in_system            IN       order_site_detail.SYSTEM%TYPE,
      ----in_currency          IN       order_site_detail.currency%TYPE,--Added by SRK on 29jun2010
      in_modifiedby        IN       order_site_detail.created_by%TYPE,
      out_status           OUT      NUMBER,
      out_errmsg           OUT      VARCHAR2
   );

   --End


PROCEDURE spi_order_crd_date (
		in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
		in_quote_site_obj  IN       quote_site_tab,
		in_orderheader_id  IN       order_header.order_header_id%TYPE,
		in_createdby       IN       quote_site.created_by%TYPE,
		out_status         out      NUMBER,
		out_errmsg         out      VARCHAR2
				 );

END PKG_ORDER_R5;
/


CREATE OR REPLACE PACKAGE PKG_PRICING_USAGE AS

      TYPE T_PRODUCT_NAME IS TABLE OF LINE_ITEM.PRODUCT_NAME%TYPE
      INDEX BY BINARY_INTEGER;

      TYPE T_TYPE_USAGE_CHARGE IS TABLE OF LINE_ITEM.PRODUCT_NAME%TYPE
      INDEX BY BINARY_INTEGER;

      TYPE T_FIX_PRICE IS TABLE OF LINE_ITEM.LINE_ITEM_ID%TYPE
      INDEX BY BINARY_INTEGER;

      TYPE T_STD_PRICE IS TABLE OF LINE_ITEM.LINE_ITEM_ID%TYPE
      INDEX BY BINARY_INTEGER;

      TYPE T_MIN_PRICE IS TABLE OF LINE_ITEM.LINE_ITEM_ID%TYPE
      INDEX BY BINARY_INTEGER;

      TYPE T_MAX_PRICE IS TABLE OF LINE_ITEM.LINE_ITEM_ID%TYPE
      INDEX BY BINARY_INTEGER;


      TYPE T_FIX_PRICE_net IS TABLE OF LINE_ITEM.LINE_ITEM_ID%TYPE
      INDEX BY BINARY_INTEGER;

      TYPE T_STD_PRICE_net IS TABLE OF LINE_ITEM.LINE_ITEM_ID%TYPE
      INDEX BY BINARY_INTEGER;

      TYPE T_MIN_PRICE_net IS TABLE OF LINE_ITEM.LINE_ITEM_ID%TYPE
      INDEX BY BINARY_INTEGER;

      TYPE T_MAX_PRICE_NET is table of line_item.line_item_id%type
      INDEX BY BINARY_INTEGER;


PROCEDURE SPI_USAGE_PRICING_OBJ(
      IN_QUOTEHEADERID   IN       QUOTE_HEADER.QUOTE_HEADER_ID%TYPE,
      in_siteid          IN       line_item.site_id%type,
      IN_CREATEDBY       IN       PRICE_LINE_ITEM_DETAIL.CREATED_BY%TYPE,
      IN_PRICING_USAGE   IN       USAGE_PRICE_TAB ,
      IN_CHECK_STATUS    IN       VARCHAR2,
      out_status         OUT      NUMBER,
      OUT_ERRMSG         OUT      varchar2
   );

END PKG_PRICING_USAGE;
/


CREATE OR REPLACE PACKAGE           pkg_quote_reeng
AS
/******************************************************************************
   NAME:       pkg_quote_reeng
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0      27/06/2011    Suman             1.Tow Package are moved to PKG_QUOTE PKG .
     2.0            29/08/2011    Suman                            2.Add new paramater for spi_quote_r5 name as in_subordertype

******************************************************************************/
   TYPE t_attrmapid IS TABLE OF attribute_mapping.attribute_mapping_id%TYPE
      INDEX BY BINARY_INTEGER;

   TYPE t_configlevel IS TABLE OF attribute_mapping.config_level%TYPE
      INDEX BY BINARY_INTEGER;

   TYPE t_value IS TABLE OF line_item_detail.VALUE%TYPE
      INDEX BY BINARY_INTEGER;

   TYPE t_qty IS TABLE OF NUMBER
      INDEX BY BINARY_INTEGER;

   PROCEDURE spi_customer_r5 (
      in_cname                  IN       customer.NAME%TYPE,
      in_comp                   IN       customer.company_name%TYPE,
      in_vat                    IN       customer.vat_number%TYPE,
      in_salchnid               IN       customer.sales_channel_id%TYPE,
      in_btsub                  IN       customer.bt_subsidiary_id%TYPE,
      in_tax_exempted           IN       customer.tax_exempted%TYPE,
      in_tax_exempt_ref_num     IN       customer.tax_exempt_ref_num%TYPE,
      in_line_of_site_billing   IN       customer.line_of_site_billing%TYPE,
      in_bfgcustid              IN       customer.bfg_customer_id%TYPE,
      in_bfgcustname            IN       customer.bfg_customer_name%TYPE,
      in_createdby              IN       customer.created_by%TYPE,
      ---#### Re-eng R5 Sales User new parameter START ####----
      in_userfirstname          IN       customer.user_first_name%TYPE,
      in_userlastname           IN       customer.user_last_name%TYPE,
      in_useremail              IN       customer.user_email%TYPE,
      in_userein                IN       customer.user_ein%TYPE,
      in_saleschannel           IN       customer.sales_channel%TYPE,
      in_roleofuser             IN       customer.role_of_user%TYPE,
      in_channeltype            IN       customer.channel_type%TYPE,
      ---#### Re-eng R5 Sales User new parameter END ####----
      out_custid                OUT      customer.customer_id%TYPE,
      out_bfgcustid             OUT      customer.bfg_customer_id%TYPE,
      out_bfgcustname           OUT      customer.bfg_customer_name%TYPE,
      out_status                OUT      NUMBER,
      out_errmsg                OUT      VARCHAR2
   );

   PROCEDURE sps_customer_r5 (
      in_custid   IN       customer.customer_id%TYPE,
      out_cust    OUT      sys_refcursor
   );

   PROCEDURE spi_quote_r5 (
      in_cid              IN       quote.customer_id%TYPE,
      in_cname            IN       quote.customer_name%TYPE,
      in_ordtype          IN       quote.order_type%TYPE,
      in_qhversion        IN       quote_header.VERSION%TYPE,
      in_qref             IN       quote.reference_number%TYPE,
      in_status           IN       quote_header.status%TYPE,
      in_type             IN       quote_header.TYPE%TYPE,
      in_quotename        IN       quote_header.quote_name%TYPE,
      in_contractid       IN       quote_header.contract_id%TYPE,
      in_contterm         IN       quote_header.contract_term%TYPE,
      in_bid              IN       quote_header.bid_number%TYPE,
      in_oppid            IN       quote_header.opportunity_id%TYPE,
      in_currency         IN       quote_header.currency%TYPE,
      in_comments         IN       quote_header.comments%TYPE,
      ---#### Re-eng R5 EXPEDIO new parameter START ####----
      in_expediorefid     IN       quote_header.expedio_ref_id%TYPE,
      in_crpropid         IN       quote_header.cr_prop_id%TYPE,
      in_expquoteid       IN       quote_header.expedio_quoteid%TYPE,
      in_expedioversion   IN       quote_header.expedio_quoteversion%TYPE,
      ---#### Re-eng R5 EXPEDIO new parameter START ####----
      in_createdby        IN       quote.created_by%TYPE,
      --Start R7 new parameter
      in_saleschannel     IN       quote.sales_channel%TYPE,
      in_btsub            IN       quote.bt_subsidiary_id%TYPE,
      --End added by Nagendra on 26-Oct-2010
      out_quoteid         OUT      quote.quote_id%TYPE,
      out_qthdrid         OUT      quote_header.quote_header_id%TYPE,
--      out_qtname          OUT      quote_header.quote_name%TYPE,
      out_expversion      OUT      quote_header.expedio_quoteversion%TYPE,
      -----Re-eng R5
      out_status          OUT      NUMBER,
      out_errmsg          OUT      VARCHAR2,
      -- Added in_product_name on 17/12/2010 as part of introducing new table QUOTE_STATUS
      in_product_name      IN       VARCHAR2 DEFAULT NULL,
      in_subordertype      IN      quote_header.SUB_ORDER_TYPE%type DEFAULT NULL
   );

   PROCEDURE sps_quote_r5 (
      in_expquoteid     IN       quote_header.expedio_quoteid%TYPE,
      in_expqhversion   IN       quote_header.expedio_quoteversion%TYPE,
      in_exprefid       IN       quote_header.expedio_ref_id%TYPE,
      out_quote         OUT      sys_refcursor,
      -- Added in_product_name on 17/12/2010 as part of introducing new table QUOTE_STATUS
      in_product_name    IN       VARCHAR2 DEFAULT NULL
   );

   PROCEDURE spi_prodselection_r5 (
      --added on 28/05/2010 for R5 by Bharathi
      in_quoteid       IN       quote.quote_id%TYPE,
      in_productid     IN       product_selection.product_id%TYPE,
      in_prodname      IN       product_selection.product_name%TYPE,
      in_propid        IN       product_selection.proposition_id%TYPE,
      in_propname      IN       product_selection.proposition_name%TYPE,
      in_subpropid     IN       product_selection.sub_proposition_id%TYPE,
      in_subpropname   IN       product_selection.sub_proposition_name%TYPE,
      in_createdby     IN       product_selection.created_by%TYPE,
      in_quotehdrid    IN       product_selection.quote_header_id%TYPE,
      in_siteid        IN       product_selection.site_id%TYPE,
      out_status       OUT      NUMBER,
      out_errmsg       OUT      VARCHAR2
   );

   PROCEDURE spu_prodselection_r5 (
      --added on 28/05/2010 for R5 by Bharathi
      in_quoteid       IN       quote.quote_id%TYPE,
      in_productid     IN       product_selection.product_id%TYPE,
      in_prodname      IN       product_selection.product_name%TYPE,
      in_propid        IN       product_selection.proposition_id%TYPE,
      in_propname      IN       product_selection.proposition_name%TYPE,
      in_subpropid     IN       product_selection.sub_proposition_id%TYPE,
      in_subpropname   IN       product_selection.sub_proposition_name%TYPE,
      in_createdby     IN       product_selection.created_by%TYPE,
      in_quotehdrid    IN       product_selection.quote_header_id%TYPE,
      in_siteid        IN       product_selection.site_id%TYPE,
      out_status       OUT      NUMBER,
      out_errmsg       OUT      VARCHAR2
   );

   PROCEDURE spi_pricelist_r5 (
      -- ##### Change for 904 - Multiple Price Book  begin
      --in_pricelistid   IN       quote_price_list.price_list_id%TYPE,
      in_pricelistname   IN       quote_price_list.price_list_name%TYPE,
      -- ##### Change for 904 - Multiple Price Book  end
      in_quotehrdid      IN       quote_price_list.quote_header_id%TYPE,
      in_createdby       IN       quote_price_list.created_by%TYPE,
      in_siteid          IN       quote_price_list.site_id%TYPE,
      in_product_id      IN       quote_price_list.product_id%TYPE,
      in_product_name    IN       quote_price_list.product_name%TYPE,
      out_status         OUT      NUMBER,
      out_errmsg         OUT      VARCHAR2
   );

   PROCEDURE spu_pricelist_r5 (
      in_quotehrdid      IN       quote_header.quote_header_id%TYPE,
      in_pricelistname   IN       quote_price_list.price_list_name%TYPE,
      in_modified_by     IN       quote_price_list.modified_by%TYPE,
      in_siteid          IN       quote_price_list.site_id%TYPE,
      in_product_id      IN       quote_price_list.product_id%TYPE,
      in_product_name    IN       quote_price_list.product_name%TYPE,
      out_status         OUT      NUMBER,
      out_errmsg         OUT      VARCHAR2
   );

   PROCEDURE spi_configuration_r5 (
      in_quoteheaderid    IN       quote_header.quote_header_id%TYPE,
      in_siteid           IN       site.site_id%TYPE,
      in_attributelist    IN       CLOB,
      in_attributelevel   IN       attribute_mapping.attribute_level%TYPE,
      in_createdby        IN       line_item.created_by%TYPE,
      out_status          OUT      NUMBER,
      out_errmsg          OUT      VARCHAR2
   );

   PROCEDURE sps_productreports_r5 (
      in_quoteheaderid     IN       quote_header.quote_header_id%TYPE,
      in_productid         IN       line_item.product_id%TYPE,
      in_prodname          IN       line_item.product_name%TYPE,
      out_productreports   OUT      sys_refcursor
   );

-- Added by Sujana on 7/8/2010 as part of R5 - Start
   PROCEDURE sps_displayproducts_r5 (
      in_quoteheaderid         IN       quote_header.quote_header_id%TYPE,
      out_dispquoteprdts       OUT      sys_refcursor,
      out_dispquotesiteprdts   OUT      sys_refcursor
   );

-- Added by Sujana on 7/8/2010 as part of R5 - End

   -- Added by Bharathi on 24/7/2010 as part of R5 - Start
   PROCEDURE sps_orderlevelproducts_r5 (
      in_quoteheaderid         IN       quote_header.quote_header_id%TYPE,
      --in_orderheaderid         IN       order_header.order_header_id%TYPE,
      out_dispquoteprdts       OUT      sys_refcursor, --- for quote-products
      out_dispordersiteprdts   OUT      sys_refcursor
   --- for quote-site-products
   );

   PROCEDURE spi_quote_version_r5 (
--Added by Tanmayi on 29/07/2010 for creating new version of Quote
      in_expquoteid          IN       quote_header.expedio_quoteid%TYPE,
      in_expquoteversion     IN       quote_header.expedio_parent_version%TYPE,
      in_createdby           IN       quote_header.created_by%TYPE,
      out_newquoteheaderid   OUT      quote_header.quote_header_id%TYPE,
      out_expquoteid         OUT      quote_header.expedio_quoteid%TYPE,
      out_newexpversion      OUT      quote_header.expedio_quoteversion%TYPE,
      out_status             OUT      NUMBER,
      out_errmsg             OUT      VARCHAR2
   );

   PROCEDURE spu_quote_version_r5
                                  --Added on 04/08/2010 by Tanmayi for Quote Versioning
   (
      in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
      in_quotename       IN       quote_header.quote_name%TYPE,
      in_currency        IN       quote_header.currency%TYPE,
      in_contractterm    IN       quote_header.contract_term%TYPE,
      in_comments        IN       quote_header.comments%TYPE,
      in_modifiedby      IN       quote_header.modified_by%TYPE,
      out_status         OUT      NUMBER,
      out_errmsg         OUT      VARCHAR2
   );

   PROCEDURE sps_qref_validation_r5 (
      --Added by Tanmayi on 12/08/2010 to check qref validity for quote verision
      in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
      out_validflag      OUT      NUMBER,
      out_errmsg         OUT      VARCHAR2
   );

   -- For R5 billing and vpn details
   PROCEDURE spu_customer_vpnbillinfo (
      in_btsub         IN       customer.bt_subsidiary_id%TYPE,
      in_bfgcustid     IN       customer.bfg_customer_id%TYPE,
      in_bfgcustname   IN       customer.bfg_customer_name%TYPE,
      in_vpndet        IN       VARCHAR2,
      in_billingdet    IN       VARCHAR2,
      out_custid       OUT      customer.customer_id%TYPE,
      out_status       OUT      NUMBER,
      out_errmsg       OUT      VARCHAR2
   );

   PROCEDURE sps_managementtype (
      --added by Tanmayi on 26/08/2010 for Service options in R5
      in_quoteheaderid     IN       line_item.quote_header_id%TYPE,
      out_managementtype   OUT      line_item_detail.VALUE%TYPE,
      out_errmsg           OUT      VARCHAR2
   );

   PROCEDURE spi_quoteversion_order (
--Added by Tanmayi on 27/08/2010 for order Rejection / IFC quote_versioning
      in_expquoteid          IN       quote_header.expedio_quoteid%TYPE,
      in_expquoteversion     IN       quote_header.expedio_parent_version%TYPE,
      in_exporderid          IN       expedio_response.exp_order_id%TYPE,
      in_createdby           IN       quote_header.created_by%TYPE,
      out_newquoteheaderid   OUT      quote_header.quote_header_id%TYPE,
      out_expquoteid         OUT      quote_header.expedio_quoteid%TYPE,
      out_newexpversion      OUT      quote_header.expedio_quoteversion%TYPE,
      out_status             OUT      NUMBER,
      out_errmsg             OUT      VARCHAR2,
      -- Added in_product_name on 17/12/2010 as part of introducing new table QUOTE_STATUS
      in_product_name         IN       VARCHAR2 DEFAULT NULL

   );

   PROCEDURE spi_customer_prod_r7 (
      --added on 28/05/2010 for R5 by Bharathi
      in_quoteheaderid                IN       quote_header.quote_header_id%TYPE,
       --in_productid                IN       product_selection.product_id%TYPE,
      -- in_siteid                   IN       site.site_id%TYPE,
      in_prodname                     IN       product_selection.product_name%TYPE,
      in_bfgcustid                    IN       customer.bfg_customer_id%TYPE,
      in_monthly_revenue_commitment   IN       customer_product.monthly_revenue_commitment%TYPE,
      in_trigger_period               IN       customer_product.trigger_period%TYPE,
      in_s_codes                      IN       customer_product.s_codes%TYPE,
      in_ptp_price_book_version       IN       customer_product.ptp_price_book_version%TYPE,
      in_eup_price_book_version       IN       customer_product.eup_price_book_version%TYPE,
      in_order_submitted_flag         IN       customer_product.order_submitted_flag%TYPE,
      in_createdby                    IN       product_selection.created_by%TYPE,
      in_siteid                       IN       site.site_id%TYPE,
      in_bfg_bill_account_id          IN       customer_product.bfg_bill_account_id%TYPE,
      in_prd_mnth_rev_commit          IN       customer_product.proposed_mnth_rev_commitment%TYPE,
      in_productid                IN       product_selection.product_id%TYPE,
      out_status                      OUT      NUMBER,
      out_errmsg                      OUT      VARCHAR2
   );

   PROCEDURE spu_customer_vpn_r7 (
      in_btsub         IN       customer.bt_subsidiary_id%TYPE,
      in_bfgcustid     IN       customer.bfg_customer_id%TYPE,
      in_bfgcustname   IN       customer.bfg_customer_name%TYPE,
      in_bfgaccno      IN       billing.bfg_bill_account_id%TYPE,
      in_bfgcurrency   IN       billing.currency%TYPE,
      in_vpndet        IN       VARCHAR2,
      out_custid       OUT      customer.customer_id%TYPE,
      out_status       OUT      NUMBER,
      out_errmsg       OUT      VARCHAR2
   );

   PROCEDURE spu_customer_prod_r7 (

      in_quoteheaderid                IN       quote_header.quote_header_id%TYPE,
      in_prodname                     IN       product_selection.product_name%TYPE,
      in_monthly_revenue_commitment   IN       customer_product.monthly_revenue_commitment%TYPE,
      in_trigger_period               IN       customer_product.trigger_period%TYPE,
      in_createdby                    IN       product_selection.created_by%TYPE,
      in_prd_mnth_rev_commit          IN       customer_product.proposed_mnth_rev_commitment%TYPE,
      out_status                      OUT      NUMBER,
      out_errmsg                      OUT      VARCHAR2
   );

  PROCEDURE         SPU_ORDER_TOBE_TO_ASIS(
   IN_QUOTEID           IN     QUOTE_HEADER.QUOTE_ID%TYPE,
   IN_QUOTEHEADERID     IN     QUOTE_HEADER.QUOTE_HEADER_ID%TYPE,
   IN_SITEID            IN     SITE.SITE_ID%TYPE,
   IN_CREATEDBY         IN     QUOTE_SITE_SERVICE.CREATED_BY%TYPE,
   OUT_STATUS           OUT    NUMBER ,
   OUT_ERRMSG           OUT    VARCHAR2);


END pkg_quote_reeng;
/


CREATE OR REPLACE PACKAGE          pkg_site
AS
/******************************************************************************
   NAME:       PRODSQE
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.1     12/21/2009    Tanmayi        1. Modified spi_bulk_upload for null secondary contact details
   1.2      12/28/2009   Tanmayi        1. Modified spu_site reverted the sp back to only primary and secondary contact details
   1.3      12/30/2009   Tanmayi        1. Modified spi_site to insert technical contact details. modified  input parameter
                                        2. Modified spu_site to update technical contact details. mofidied input parameter
                                        3.Modified  spi_bulk_upload to insert technical contact details. modified parameter list
    1.4     12/31/2009   Tanmayi        1. Added sps_site_contact to select contact details for site
    1.5     1/5/2010     Tanmayi        1. Modified spi_bulk_upload to handle if site_name is more than 100 characters
    1.6     1/9/2010      Rajkamal      1. Commented Transaction Handling in insert and update Site
                                           and bulk upload site SP.
                                        2. Renamed dblinklocal_ppsr_owner to DBLINK_PPSR
    1.7     04/15/2010  Suman/Archana    1. Modified spi_site add two parameters  in_bfgcustname,in_bfgcustid
                                         2. Modified spu_site add two parameters in_bfgcustname,in_bfgcustid
                                         3. Modified spi_site to insert in_bfgcustname,in_bfgcustid
                                         4. Modified spu_site to insert in_bfgcustname
    1.8     06/29/2010   Srinivas K      1.Added Update stmt in spi_multisite_bulkupload sp,to update Primary/Secondary contact id details
                                         2.New Retrieval sp sps_multisite_bulkupload to fetch site/address with Primary/Secondary contact details
                                             if Primary/Secondary contact details are null then sp will fecth only site,address details

******************************************************************************/
   TYPE t_country IS TABLE OF country.NAME%TYPE
      INDEX BY BINARY_INTEGER;

   TYPE t_sitename IS TABLE OF VARCHAR2 (2000)
      INDEX BY BINARY_INTEGER;

--   TYPE t_sitename IS TABLE OF site.NAME%TYPE
--      INDEX BY BINARY_INTEGER;
   TYPE t_bldgno IS TABLE OF address.building_number%TYPE
      INDEX BY BINARY_INTEGER;

   TYPE t_addrline1 IS TABLE OF address.address_line1%TYPE
      INDEX BY BINARY_INTEGER;

   TYPE t_city IS TABLE OF address.city%TYPE
      INDEX BY BINARY_INTEGER;

   TYPE t_postcode IS TABLE OF address.post_zip_code%TYPE
      INDEX BY BINARY_INTEGER;

   TYPE t_telareacode IS TABLE OF site.telephone_area_code%TYPE
      INDEX BY BINARY_INTEGER;

   TYPE t_floor IS TABLE OF address.FLOOR%TYPE
      INDEX BY BINARY_INTEGER;

   TYPE t_room IS TABLE OF address.room%TYPE
      INDEX BY BINARY_INTEGER;

   TYPE t_addrline2 IS TABLE OF address.address_line2%TYPE
      INDEX BY BINARY_INTEGER;

   TYPE t_state IS TABLE OF address.state%TYPE
      INDEX BY BINARY_INTEGER;

   TYPE t_prifirstname IS TABLE OF contact.first_name%TYPE
      INDEX BY BINARY_INTEGER;

   TYPE t_prilastname IS TABLE OF contact.last_name%TYPE
      INDEX BY BINARY_INTEGER;

   TYPE t_prijobtitle IS TABLE OF contact.job_title%TYPE
      INDEX BY BINARY_INTEGER;

   TYPE t_priemail IS TABLE OF contact.email%TYPE
      INDEX BY BINARY_INTEGER;

   TYPE t_priphone IS TABLE OF contact.phone_number%TYPE
      INDEX BY BINARY_INTEGER;

   TYPE t_primobile IS TABLE OF contact.mobile_number%TYPE
      INDEX BY BINARY_INTEGER;

   TYPE t_prifax IS TABLE OF contact.fax%TYPE
      INDEX BY BINARY_INTEGER;

   TYPE t_prijob IS TABLE OF contact.job_title%TYPE
      INDEX BY BINARY_INTEGER;

   TYPE t_secfirstname IS TABLE OF contact.first_name%TYPE
      INDEX BY BINARY_INTEGER;

   TYPE t_seclastname IS TABLE OF contact.last_name%TYPE
      INDEX BY BINARY_INTEGER;

   TYPE t_secjobtitle IS TABLE OF contact.job_title%TYPE
      INDEX BY BINARY_INTEGER;

   TYPE t_secemail IS TABLE OF contact.email%TYPE
      INDEX BY BINARY_INTEGER;

   TYPE t_secphone IS TABLE OF contact.phone_number%TYPE
      INDEX BY BINARY_INTEGER;

   TYPE t_secmobile IS TABLE OF contact.mobile_number%TYPE
      INDEX BY BINARY_INTEGER;

   TYPE t_secfax IS TABLE OF contact.fax%TYPE
      INDEX BY BINARY_INTEGER;

   TYPE t_secjob IS TABLE OF contact.job_title%TYPE
      INDEX BY BINARY_INTEGER;

   TYPE t_techfirstname IS TABLE OF contact.first_name%TYPE
      INDEX BY BINARY_INTEGER;

   TYPE t_techlastname IS TABLE OF contact.last_name%TYPE
      INDEX BY BINARY_INTEGER;

   TYPE t_techjob IS TABLE OF contact.job_title%TYPE
      INDEX BY BINARY_INTEGER;

   TYPE t_techemail IS TABLE OF contact.email%TYPE
      INDEX BY BINARY_INTEGER;

   TYPE t_techphone IS TABLE OF contact.phone_number%TYPE
      INDEX BY BINARY_INTEGER;

   TYPE t_techmobile IS TABLE OF contact.mobile_number%TYPE
      INDEX BY BINARY_INTEGER;

   TYPE t_techfax IS TABLE OF contact.fax%TYPE
      INDEX BY BINARY_INTEGER;

   PROCEDURE spi_site (
      --modified on 30/12/2009 to insert technical contact details
      in_customerid                 IN       customer.customer_id%TYPE,
      in_quoteheaderid              IN       quote_header.quote_header_id%TYPE,
      in_sitename                   IN       site.NAME%TYPE,
      in_customer_reportsitename    IN       site.customer_report_site_name%TYPE,
      in_buildingno                 IN       address.building_number%TYPE,
      in_addressline1               IN       address.address_line1%TYPE,
      in_city                       IN       address.city%TYPE,
      in_state                      IN       address.state%TYPE,
      in_state_code                 IN       address.state_code%TYPE,
      in_countryid                  IN       country.country_id%TYPE,
      in_postzipcode                IN       address.post_zip_code%TYPE,
      in_telephoneareacode          IN       site.telephone_area_code%TYPE,
      --added for R1
      in_county                     IN       address.county%TYPE,
      -- ##### Change for 904 - B-End validation  begin
      in_local_business_cust_name   IN       site.local_business_customer_name%TYPE,
      -- ##### Change for 904 - B-End validation  end
      in_additionalsite             IN       VARCHAR2,          --for address
      in_pricontact                 IN       VARCHAR2,  --for primary contact
      in_seccontact                 IN       VARCHAR2,
      --for secondary contact
      in_techcontact                IN       VARCHAR2,
      --for technical contact
      in_servassurcontact           IN       VARCHAR2,
      --for service assurance contact details
      in_servicedlvcontact          IN       VARCHAR2,
      --for service delivery contact details
      in_bfgsiteid                  IN       site.bfg_site_id%TYPE,
      -- Ghucs, Added new parameter in_bfgsiteid
      in_bfgsitename                IN       site.bfg_site_name%TYPE,
                                 -- Ghucs, Added new parameter in_bfgsitename
      -- ##### Change for 904 - Call Anywhere  begin
      in_kcidetails                 IN       VARCHAR2,
                                        -- for Keep Customer Informed details
      -- ##### Change for 904 - Call Anywhere  end
      /*line_of_site_billing added on 17/06/2010*/
      in_lineofsitebilling          IN       site.line_of_site_billing%TYPE,
      in_mainsiteflag               IN       site.main_site_flag%TYPE,
      ---Added by SRK on 07JUL2010
      in_createdby                  IN       site.created_by%TYPE,
      out_siteid                    OUT      site.site_id%TYPE,
      out_status                    OUT      NUMBER,
      out_errmsg                    OUT      VARCHAR2
   );

   PROCEDURE spu_site (
      --modified on 30/12/2009 to update technical contact details
      in_customerid                 IN       customer.customer_id%TYPE,
      in_siteid                     IN       site.site_id%TYPE,
      in_customer_reportsitename    IN       site.customer_report_site_name%TYPE,
      in_buildingno                 IN       address.building_number%TYPE,
      in_addressline1               IN       address.address_line1%TYPE,
      in_city                       IN       address.city%TYPE,
      in_state                      IN       address.state%TYPE,
      in_state_code                 IN       address.state_code%TYPE,
      in_countryid                  IN       country.country_id%TYPE,
      in_postzipcode                IN       address.post_zip_code%TYPE,
      in_telephoneareacode          IN       site.telephone_area_code%TYPE,
      --added for R1
      in_county                     IN       address.county%TYPE,
      -- ##### Change for 904 - B-End validation  begin
      in_local_business_cust_name   IN       site.local_business_customer_name%TYPE,
      -- ##### Change for 904 - B-End validation  end
      in_additionalsite             IN       VARCHAR2,          --for address
      in_pricontact                 IN       VARCHAR2,  --for primary contact
      in_seccontact                 IN       VARCHAR2,
      --for secondary contact
      in_techcontact                IN       VARCHAR2,
      --for technical contact
      in_servassurcontact           IN       VARCHAR2,
      --for service assurance contact details
      in_servicedlvcontact          IN       VARCHAR2,
      --for service delivery contact details
      in_bfgsiteid                  IN       site.bfg_site_id%TYPE,
      -- Ghucs, Added new parameter in_bfgsiteid
      in_bfgsitename                IN       site.bfg_site_name%TYPE,
                                  -- Ghucs, Added new parameter in_bfgsitename
      -- ##### Change for 904 - Call Anywhere  begin
      in_kcidetails                 IN       VARCHAR2,
                                         -- for Keep Customer Informed details
      -- ##### Change for 904 - Call Anywhere  end
      /*line_of_site_billing added on 17/06/2010*/
      in_lineofsitebilling          IN       site.line_of_site_billing%TYPE,
      in_modifiedby                 IN       site.modified_by%TYPE,
      out_status                    OUT      NUMBER,
      out_errmsg                    OUT      VARCHAR2
   );

   PROCEDURE sps_site (
      in_customerid   IN       customer.customer_id%TYPE,
      in_searchby     IN       VARCHAR2,
      in_keyword      IN       VARCHAR2,
      out_site        OUT      sys_refcursor
   );

   PROCEDURE spd_quote_site (
      in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
      in_siteid          IN       VARCHAR2,
      in_modifiedby      IN       quote_site.modified_by%TYPE,
      out_status         OUT      NUMBER,
      out_errmsg         OUT      VARCHAR2
   );

   PROCEDURE spi_bulk_upload (
       --returns site id and status for each individual upload
      --modified not to add site to quote
      --modified to insert technical contact details on 30/12/2009
      in_customerid   IN       customer.customer_id%TYPE,
      in_site         IN       CLOB,
      in_batchid      IN       site_bulk_upload.batch_id%TYPE,
      in_filename     IN       site_bulk_upload.file_name%TYPE,
      in_createdby    IN       site.created_by%TYPE,
      out_batchid     OUT      site_bulk_upload.batch_id%TYPE,
      out_nextsite    OUT      site.NAME%TYPE
   );

   PROCEDURE spi_quote_site (
      in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
      in_siteid          IN       VARCHAR2,
      in_createdby       IN       quote_site.created_by%TYPE,
      out_status         OUT      NUMBER,
      out_errmsg         OUT      VARCHAR2
      --in_crd             IN       quote_site.customer_requried_date%TYPE default null, --Added by khader for GHUCS R16
      --in_cad             IN       quote_site.customer_agreed_date%TYPE default null    --Added by khader for GHUCS R16
   );

   PROCEDURE sps_site_contact (
      --added on 31/12/2009
      in_siteid     IN       site.site_id%TYPE,
      out_contact   OUT      sys_refcursor
   );

   PROCEDURE spi_multisite_bulkupload (
      --added on 11/5/2010 for R3
      in_customerid      IN       site.customer_id%TYPE,
      in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
      in_site            IN       bulkupload_tab,
      in_batchid         IN       site.batch_id%TYPE,
      in_filename        IN       VARCHAR2,
      in_createdby       IN       site.created_by%TYPE,
      out_batchid        OUT      site.batch_id%TYPE,
      out_nextsite       OUT      site.NAME%TYPE
   );

   PROCEDURE sps_multisite_bulkupload (
      in_customerid        IN       site.customer_id%TYPE,
      in_quoteheaderid     IN       quote_header.quote_header_id%TYPE,
      --  in_siteid          IN       site.site_id%TYPE,
      out_sitebulkupload   OUT      sys_refcursor,
      out_bulk1            OUT      sys_refcursor
   );

   PROCEDURE sps_bfg_site (
      in_customerid   IN       customer.bfg_customer_id%TYPE,
      in_searchby        IN       VARCHAR2,
      in_keyword         IN OUT   VARCHAR2,
      out_site           OUT      sys_refcursor
  );

-- R16 ghucs
PROCEDURE spi_quote_site_Ghucs (
                              in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
                              in_quote_site_obj  IN       quote_site_tab,
                              in_createdby       IN       quote_site.created_by%TYPE,
                              out_status         OUT      NUMBER,
                              out_errmsg         OUT      VARCHAR2
                                );

END pkg_site;
/


CREATE OR REPLACE PACKAGE        pkg_site_g
AS
/******************************************************************************
   NAME:       PRODSQE
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        01-SEP-2010 AMIT KUMAR       Based on the base code from PKG_SITE,
                                           PKG_SITE_G is created for GHUCS R5 BOM
                                           use with major changes in spi_site.

******************************************************************************/
   TYPE t_country IS TABLE OF country.NAME%TYPE
      INDEX BY BINARY_INTEGER;

   TYPE t_sitename IS TABLE OF VARCHAR2 (2000)
      INDEX BY BINARY_INTEGER;

--   TYPE t_sitename IS TABLE OF site.NAME%TYPE
--      INDEX BY BINARY_INTEGER;
   TYPE t_bldgno IS TABLE OF address.building_number%TYPE
      INDEX BY BINARY_INTEGER;

   TYPE t_addrline1 IS TABLE OF address.address_line1%TYPE
      INDEX BY BINARY_INTEGER;

   TYPE t_city IS TABLE OF address.city%TYPE
      INDEX BY BINARY_INTEGER;

   TYPE t_postcode IS TABLE OF address.post_zip_code%TYPE
      INDEX BY BINARY_INTEGER;

   TYPE t_telareacode IS TABLE OF site.telephone_area_code%TYPE
      INDEX BY BINARY_INTEGER;

   TYPE t_floor IS TABLE OF address.FLOOR%TYPE
      INDEX BY BINARY_INTEGER;

   TYPE t_room IS TABLE OF address.room%TYPE
      INDEX BY BINARY_INTEGER;

   TYPE t_addrline2 IS TABLE OF address.address_line2%TYPE
      INDEX BY BINARY_INTEGER;

   TYPE t_state IS TABLE OF address.state%TYPE
      INDEX BY BINARY_INTEGER;

   TYPE t_prifirstname IS TABLE OF contact.first_name%TYPE
      INDEX BY BINARY_INTEGER;

   TYPE t_prilastname IS TABLE OF contact.last_name%TYPE
      INDEX BY BINARY_INTEGER;

   TYPE t_prijobtitle IS TABLE OF contact.job_title%TYPE
      INDEX BY BINARY_INTEGER;

   TYPE t_priemail IS TABLE OF contact.email%TYPE
      INDEX BY BINARY_INTEGER;

   TYPE t_priphone IS TABLE OF contact.phone_number%TYPE
      INDEX BY BINARY_INTEGER;

   TYPE t_primobile IS TABLE OF contact.mobile_number%TYPE
      INDEX BY BINARY_INTEGER;

   TYPE t_prifax IS TABLE OF contact.fax%TYPE
      INDEX BY BINARY_INTEGER;

   TYPE t_prijob IS TABLE OF contact.job_title%TYPE
      INDEX BY BINARY_INTEGER;

   TYPE t_secfirstname IS TABLE OF contact.first_name%TYPE
      INDEX BY BINARY_INTEGER;

   TYPE t_seclastname IS TABLE OF contact.last_name%TYPE
      INDEX BY BINARY_INTEGER;

   TYPE t_secjobtitle IS TABLE OF contact.job_title%TYPE
      INDEX BY BINARY_INTEGER;

   TYPE t_secemail IS TABLE OF contact.email%TYPE
      INDEX BY BINARY_INTEGER;

   TYPE t_secphone IS TABLE OF contact.phone_number%TYPE
      INDEX BY BINARY_INTEGER;

   TYPE t_secmobile IS TABLE OF contact.mobile_number%TYPE
      INDEX BY BINARY_INTEGER;

   TYPE t_secfax IS TABLE OF contact.fax%TYPE
      INDEX BY BINARY_INTEGER;

   TYPE t_secjob IS TABLE OF contact.job_title%TYPE
      INDEX BY BINARY_INTEGER;

   TYPE t_techfirstname IS TABLE OF contact.first_name%TYPE
      INDEX BY BINARY_INTEGER;

   TYPE t_techlastname IS TABLE OF contact.last_name%TYPE
      INDEX BY BINARY_INTEGER;

   TYPE t_techjob IS TABLE OF contact.job_title%TYPE
      INDEX BY BINARY_INTEGER;

   TYPE t_techemail IS TABLE OF contact.email%TYPE
      INDEX BY BINARY_INTEGER;

   TYPE t_techphone IS TABLE OF contact.phone_number%TYPE
      INDEX BY BINARY_INTEGER;

   TYPE t_techmobile IS TABLE OF contact.mobile_number%TYPE
      INDEX BY BINARY_INTEGER;

   TYPE t_techfax IS TABLE OF contact.fax%TYPE
      INDEX BY BINARY_INTEGER;

   PROCEDURE spi_site (
      --modified on 30/12/2009 to insert technical contact details
      in_customerid                 IN       customer.customer_id%TYPE,
      in_quoteheaderid              IN       quote_header.quote_header_id%TYPE,
      in_sitename                   IN       site.NAME%TYPE,
      in_customer_reportsitename    IN       site.customer_report_site_name%TYPE,
      in_buildingno                 IN       address.building_number%TYPE,
      in_addressline1               IN       address.address_line1%TYPE,
      in_city                       IN       address.city%TYPE,
      in_state                      IN       address.state%TYPE,
      in_state_code                 IN       address.state_code%TYPE,
      in_countryid                  IN       country.country_id%TYPE,
      in_postzipcode                IN       address.post_zip_code%TYPE,
      in_telephoneareacode          IN       site.telephone_area_code%TYPE,
      --added for R1
      in_county                     IN       address.county%TYPE,
      -- ##### Change for 904 - B-End validation  begin
      in_local_business_cust_name   IN       site.local_business_customer_name%TYPE,
      -- ##### Change for 904 - B-End validation  end
      in_additionalsite             IN       VARCHAR2,          --for address
      in_pricontact                 IN       VARCHAR2,  --for primary contact
      in_seccontact                 IN       VARCHAR2,
      --for secondary contact
      in_techcontact                IN       VARCHAR2,
      --for technical contact
      in_servassurcontact           IN       VARCHAR2,
      --for service assurance contact details
      in_servicedlvcontact          IN       VARCHAR2,
      --for service delivery contact details
      in_bfgsiteid                  IN       site.bfg_site_id%TYPE,
      -- Ghucs, Added new parameter in_bfgsiteid
      in_bfgsitename                IN       site.bfg_site_name%TYPE,
                                 -- Ghucs, Added new parameter in_bfgsitename

      /*Start : Added for GHUCS R5 by Amit on 16-Aug-2010*/
      in_bfgaddressid               IN       site.bfg_address_id%TYPE,
      in_bfgsublocid                IN       site.bfg_subloc_id%TYPE,
      /*End : Added for GHUCS R5 by Amit on 16-Aug-2010*/

      -- ##### Change for 904 - Call Anywhere  begin
      in_kcidetails                 IN       VARCHAR2,
                                        -- for Keep Customer Informed details
      -- ##### Change for 904 - Call Anywhere  end
      /*line_of_site_billing added on 17/06/2010*/
      in_lineofsitebilling          IN       site.line_of_site_billing%TYPE,
      in_mainsiteflag               IN       site.main_site_flag%TYPE, ---Added by SRK on 07Jul2010
      in_createdby                  IN       site.created_by%TYPE,
      out_siteid                    OUT      site.site_id%TYPE,
      out_status                    OUT      NUMBER,
      out_errmsg                    OUT      VARCHAR2
   );

   PROCEDURE spu_site (
      --modified on 30/12/2009 to update technical contact details
      in_customerid                 IN       customer.customer_id%TYPE,
      in_siteid                     IN       site.site_id%TYPE,
      in_customer_reportsitename    IN       site.customer_report_site_name%TYPE,
      in_buildingno                 IN       address.building_number%TYPE,
      in_addressline1               IN       address.address_line1%TYPE,
      in_city                       IN       address.city%TYPE,
      in_state                      IN       address.state%TYPE,
      in_state_code                 IN       address.state_code%TYPE,
      in_countryid                  IN       country.country_id%TYPE,
      in_postzipcode                IN       address.post_zip_code%TYPE,
      in_telephoneareacode          IN       site.telephone_area_code%TYPE,
      --added for R1
      in_county                     IN       address.county%TYPE,
      -- ##### Change for 904 - B-End validation  begin
      in_local_business_cust_name   IN       site.local_business_customer_name%TYPE,
      -- ##### Change for 904 - B-End validation  end
      in_additionalsite             IN       VARCHAR2,          --for address
      in_pricontact                 IN       VARCHAR2,  --for primary contact
      in_seccontact                 IN       VARCHAR2,
      --for secondary contact
      in_techcontact                IN       VARCHAR2,
      --for technical contact
      in_servassurcontact           IN       VARCHAR2,
      --for service assurance contact details
      in_servicedlvcontact          IN       VARCHAR2,
      --for service delivery contact details
      in_bfgsiteid                  IN       site.bfg_site_id%TYPE,
      -- Ghucs, Added new parameter in_bfgsiteid
      in_bfgsitename                IN       site.bfg_site_name%TYPE,
                                  -- Ghucs, Added new parameter in_bfgsitename

      /*Start : Added for GHUCS R5 by Amit on 16-Aug-2010*/
      in_bfgaddressid               IN       site.bfg_address_id%TYPE,
      in_bfgsublocid                IN       site.bfg_subloc_id%TYPE,
      /*End : Added for GHUCS R5 by Amit on 16-Aug-2010*/

      -- ##### Change for 904 - Call Anywhere  begin
      in_kcidetails                 IN       VARCHAR2,
                                         -- for Keep Customer Informed details
      -- ##### Change for 904 - Call Anywhere  end
      /*line_of_site_billing added on 17/06/2010*/
      in_lineofsitebilling          IN       site.line_of_site_billing%TYPE,
      in_modifiedby                 IN       site.modified_by%TYPE,
      out_status                    OUT      NUMBER,
      out_errmsg                    OUT      VARCHAR2
   );

   PROCEDURE sps_site (
      in_customerid   IN       customer.customer_id%TYPE,
      in_searchby     IN       VARCHAR2,
      in_keyword      IN       VARCHAR2,
      out_site        OUT      sys_refcursor
   );

   PROCEDURE spd_quote_site (
      in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
      in_siteid          IN       VARCHAR2,
      in_modifiedby      IN       quote_site.modified_by%TYPE,
      out_status         OUT      NUMBER,
      out_errmsg         OUT      VARCHAR2
   );

   PROCEDURE spi_bulk_upload (
       --returns site id and status for each individual upload
      --modified not to add site to quote
      --modified to insert technical contact details on 30/12/2009
      in_customerid   IN       customer.customer_id%TYPE,
      in_site         IN       CLOB,
      in_batchid      IN       site_bulk_upload.batch_id%TYPE,
      in_filename     IN       site_bulk_upload.file_name%TYPE,
      in_createdby    IN       site.created_by%TYPE,
      out_batchid     OUT      site_bulk_upload.batch_id%TYPE,
      out_nextsite    OUT      site.NAME%TYPE
   );

   PROCEDURE spi_quote_site (
      in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
      in_siteid          IN       VARCHAR2,
      in_createdby       IN       quote_site.created_by%TYPE,
      out_status         OUT      NUMBER,
      out_errmsg         OUT      VARCHAR2
   );

   PROCEDURE sps_site_contact (
      --added on 31/12/2009
      in_siteid     IN       site.site_id%TYPE,
      out_contact   OUT      sys_refcursor
   );

   PROCEDURE spi_multisite_bulkupload (
      --added on 11/5/2010 for R3
      in_customerid      IN       site.customer_id%TYPE,
      in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
      in_site            IN       bulkupload_tab,
      in_batchid         IN       site.batch_id%TYPE,
      in_filename        IN       VARCHAR2,
      in_createdby       IN       site.created_by%TYPE,
      out_batchid        OUT      site.batch_id%TYPE,
      out_nextsite       OUT      site.NAME%TYPE
   );

   PROCEDURE sps_multisite_bulkupload (
      in_customerid        IN       site.customer_id%TYPE,
      in_quoteheaderid     IN       quote_header.quote_header_id%TYPE,
      --  in_siteid          IN       site.site_id%TYPE,
      out_sitebulkupload   OUT      sys_refcursor,
      out_bulk1            OUT      sys_refcursor
   );

END pkg_site_g;
/


CREATE OR REPLACE PACKAGE pkg_site_r5
AS
/******************************************************************************
   NAME:       PRODSQE
   PURPOSE:
   REVISIONS:
   Ver        Date         Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        28/7/2010    Sujana          1. Created the package
   2.0        1/04/2011    Suman           2. New SP is add for mx ipsec and ssl query
******************************************************************************/
   TYPE t_country IS TABLE OF country.NAME%TYPE
      INDEX BY BINARY_INTEGER;
   TYPE t_sitename IS TABLE OF VARCHAR2 (2000)
      INDEX BY BINARY_INTEGER;
   TYPE t_bldgno IS TABLE OF address.building_number%TYPE
      INDEX BY BINARY_INTEGER;
   TYPE t_addrline1 IS TABLE OF address.address_line1%TYPE
      INDEX BY BINARY_INTEGER;
   TYPE t_city IS TABLE OF address.city%TYPE
      INDEX BY BINARY_INTEGER;
   TYPE t_postcode IS TABLE OF address.post_zip_code%TYPE
      INDEX BY BINARY_INTEGER;
   TYPE t_telareacode IS TABLE OF site.telephone_area_code%TYPE
      INDEX BY BINARY_INTEGER;
   TYPE t_floor IS TABLE OF address.FLOOR%TYPE
      INDEX BY BINARY_INTEGER;
   TYPE t_room IS TABLE OF address.room%TYPE
      INDEX BY BINARY_INTEGER;
   TYPE t_addrline2 IS TABLE OF address.address_line2%TYPE
      INDEX BY BINARY_INTEGER;
   TYPE t_state IS TABLE OF address.state%TYPE
      INDEX BY BINARY_INTEGER;
   TYPE t_prifirstname IS TABLE OF contact.first_name%TYPE
      INDEX BY BINARY_INTEGER;
   TYPE t_prilastname IS TABLE OF contact.last_name%TYPE
      INDEX BY BINARY_INTEGER;
   TYPE t_prijobtitle IS TABLE OF contact.job_title%TYPE
      INDEX BY BINARY_INTEGER;
   TYPE t_priemail IS TABLE OF contact.email%TYPE
      INDEX BY BINARY_INTEGER;
   TYPE t_priphone IS TABLE OF contact.phone_number%TYPE
      INDEX BY BINARY_INTEGER;
   TYPE t_primobile IS TABLE OF contact.mobile_number%TYPE
      INDEX BY BINARY_INTEGER;
   TYPE t_prifax IS TABLE OF contact.fax%TYPE
      INDEX BY BINARY_INTEGER;
   TYPE t_prijob IS TABLE OF contact.job_title%TYPE
      INDEX BY BINARY_INTEGER;
   TYPE t_secfirstname IS TABLE OF contact.first_name%TYPE
      INDEX BY BINARY_INTEGER;
   TYPE t_seclastname IS TABLE OF contact.last_name%TYPE
      INDEX BY BINARY_INTEGER;
   TYPE t_secjobtitle IS TABLE OF contact.job_title%TYPE
      INDEX BY BINARY_INTEGER;
   TYPE t_secemail IS TABLE OF contact.email%TYPE
      INDEX BY BINARY_INTEGER;
   TYPE t_secphone IS TABLE OF contact.phone_number%TYPE
      INDEX BY BINARY_INTEGER;
   TYPE t_secmobile IS TABLE OF contact.mobile_number%TYPE
      INDEX BY BINARY_INTEGER;
   TYPE t_secfax IS TABLE OF contact.fax%TYPE
      INDEX BY BINARY_INTEGER;
   TYPE t_secjob IS TABLE OF contact.job_title%TYPE
      INDEX BY BINARY_INTEGER;
   TYPE t_techfirstname IS TABLE OF contact.first_name%TYPE
      INDEX BY BINARY_INTEGER;
   TYPE t_techlastname IS TABLE OF contact.last_name%TYPE
      INDEX BY BINARY_INTEGER;
   TYPE t_techjob IS TABLE OF contact.job_title%TYPE
      INDEX BY BINARY_INTEGER;
   TYPE t_techemail IS TABLE OF contact.email%TYPE
      INDEX BY BINARY_INTEGER;
   TYPE t_techphone IS TABLE OF contact.phone_number%TYPE
      INDEX BY BINARY_INTEGER;
   TYPE t_techmobile IS TABLE OF contact.mobile_number%TYPE
      INDEX BY BINARY_INTEGER;
   TYPE t_techfax IS TABLE OF contact.fax%TYPE
      INDEX BY BINARY_INTEGER;

      --table types created by Tanmayi on 29/07/2010 for bfg and expedio add to quote
   TYPE t_bfgsiteid IS TABLE OF site.bfg_site_id%TYPE
      INDEX BY BINARY_INTEGER;
   TYPE t_bfgsitename IS TABLE OF site.NAME%TYPE
      INDEX BY BINARY_INTEGER;
   TYPE t_bfgcity IS TABLE OF address.city%TYPE
      INDEX BY BINARY_INTEGER;
   TYPE t_bfgcountry IS TABLE OF country.NAME%TYPE
      INDEX BY BINARY_INTEGER;
   TYPE t_expsiteid IS TABLE OF site.expedio_site_id%TYPE
      INDEX BY BINARY_INTEGER;
   TYPE t_expsitename IS TABLE OF site.NAME%TYPE
      INDEX BY BINARY_INTEGER;
   TYPE t_expcity IS TABLE OF address.city%TYPE
      INDEX BY BINARY_INTEGER;
   TYPE t_expcountry IS TABLE OF country.NAME%TYPE
      INDEX BY BINARY_INTEGER;

PROCEDURE spi_site (
	in_customerid                 IN       customer.customer_id%TYPE,
	in_quoteheaderid              IN       quote_header.quote_header_id%TYPE,
	in_sitename                   IN       site.NAME%TYPE,
	in_customer_reportsitename    IN       site.customer_report_site_name%TYPE,
	in_buildingno                 IN       address.building_number%TYPE,
	in_addressline1               IN       address.address_line1%TYPE,
	in_city                       IN       address.city%TYPE,
	in_state                      IN       address.state%TYPE,
	in_state_code                 IN       address.state_code%TYPE,
	in_countryid                  IN       country.country_id%TYPE,
	in_postzipcode                IN       address.post_zip_code%TYPE,
	in_telephoneareacode          IN       site.telephone_area_code%TYPE,
	--added for R1
	in_county                     IN       address.county%TYPE,
	-- ##### Change for 904 - B-End validation  begin
	in_local_business_cust_name   IN       site.local_business_customer_name%TYPE,
	-- ##### Change for 904 - B-End validation  end
	in_additionalsite             IN       VARCHAR2,          --for address
	in_pricontact                 IN       VARCHAR2,  --for primary contact
	in_seccontact                 IN       VARCHAR2,
	--for secondary contact
	in_techcontact                IN       VARCHAR2,
	--for technical contact
	in_servassurcontact           IN       VARCHAR2,
	--for service assurance contact details
	in_servicedlvcontact          IN       VARCHAR2,
	--for service delivery contact details
	in_bfgsiteid                  IN       site.bfg_site_id%TYPE,
	-- Ghucs, Added new parameter in_bfgsiteid
	in_bfgsitename                IN       site.bfg_site_name%TYPE,
	-- Ghucs, Added new parameter in_bfgsitename
	/* Added new parameter in_expedio_site_id as part of R5 */
	in_expedio_site_id            IN       site.expedio_site_id%TYPE,
	--- in_expedio_site_name          IN       site.expedio_site_name%type,
	-- ##### Change for 904 - Call Anywhere  begin
	in_kcidetails                 IN       VARCHAR2,
																		-- for Keep Customer Informed details
	-- ##### Change for 904 - Call Anywhere  end
	/*line_of_site_billing added on 17/06/2010*/
	in_lineofsitebilling          IN       site.line_of_site_billing%TYPE,
	in_mainsiteflag               IN       site.main_site_flag%TYPE,
	in_createdby                  IN       site.created_by%TYPE,
	in_place_acc_price_rev_order  IN       site.place_acc_price_rev_order%TYPE,--Added for R9 IVPN2
	in_phone_number               IN       site.phone_number%TYPE, -- Added on 15/2/2011 as part of R11 iVPN2
	out_siteid                    OUT      site.site_id%TYPE,
	out_status                    OUT      NUMBER,
	out_errmsg                    OUT      VARCHAR2
);
PROCEDURE spu_site (
	--modified on 30/12/2009 to update technical contact details
	in_customerid                 IN       customer.customer_id%TYPE,
	in_siteid                     IN       site.site_id%TYPE,
	in_customer_reportsitename    IN       site.customer_report_site_name%TYPE,
	in_buildingno                 IN       address.building_number%TYPE,
	in_addressline1               IN       address.address_line1%TYPE,
	in_city                       IN       address.city%TYPE,
	in_state                      IN       address.state%TYPE,
	in_state_code                 IN       address.state_code%TYPE,
	in_countryid                  IN       country.country_id%TYPE,
	in_postzipcode                IN       address.post_zip_code%TYPE,
	in_telephoneareacode          IN       site.telephone_area_code%TYPE,
	--added for R1
	in_county                     IN       address.county%TYPE,
	-- ##### Change for 904 - B-End validation  begin
	in_local_business_cust_name   IN       site.local_business_customer_name%TYPE,
	-- ##### Change for 904 - B-End validation  end
	in_additionalsite             IN       VARCHAR2,          --for address
	in_pricontact                 IN       VARCHAR2,  --for primary contact
	in_seccontact                 IN       VARCHAR2,
	--for secondary contact
	in_techcontact                IN       VARCHAR2,
	--for technical contact
	in_servassurcontact           IN       VARCHAR2,
	--for service assurance contact details
	in_servicedlvcontact          IN       VARCHAR2,
	--for service delivery contact details
	in_bfgsiteid                  IN       site.bfg_site_id%TYPE,
	-- Ghucs, Added new parameter in_bfgsiteid
	in_bfgsitename                IN       site.bfg_site_name%TYPE,
	-- Ghucs, Added new parameter in_bfgsitename
	-- ##### Change for 904 - Call Anywhere  begin
	in_kcidetails                 IN       VARCHAR2,
																		 -- for Keep Customer Informed details
	-- ##### Change for 904 - Call Anywhere  end
	/*line_of_site_billing added on 17/06/2010*/
	in_lineofsitebilling          IN       site.line_of_site_billing%TYPE,
	in_modifiedby                 IN       site.modified_by%TYPE,
	in_place_acc_price_rev_order  IN       site.place_acc_price_rev_order%TYPE,--Added for R9 IVPN2
	in_phone_number               IN       site.phone_number%TYPE, -- Added on 15/2/2011 as part of R11 iVPN2
	out_status                    OUT      NUMBER,
	out_errmsg                    OUT      VARCHAR2
);
PROCEDURE sps_site (
		in_bfgcustomerid   IN       customer.bfg_customer_id%TYPE,
		in_searchby        IN       VARCHAR2,
		in_keyword         IN OUT   VARCHAR2,          -- Modified as part of R5
		out_site           OUT      sys_refcursor
 );
PROCEDURE spd_quote_site (
	in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
	in_siteid          IN       VARCHAR2,
	in_modifiedby      IN       quote_site.modified_by%TYPE,
	out_status         OUT      NUMBER,
	OUT_ERRMSG         OUT      VARCHAR2
);
PROCEDURE spi_quote_site (
      in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
      in_siteid          IN       VARCHAR2,
      in_createdby       IN       quote_site.created_by%TYPE,
      out_status         OUT      NUMBER,
      out_errmsg         OUT      VARCHAR2
   );

PROCEDURE spi_quote_site_r5 (
      --added by tanmayi on 29/07/2010 for bfg and expedio add to quote
      in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
      in_siteid          IN       VARCHAR2,                    --sqe site ids
      in_bfgsite         IN       VARCHAR2,               -- bfg site details
      in_expsite         IN       VARCHAR2,            --expedio site details
      in_createdby       IN       NUMBER,
      out_status         OUT      NUMBER,
      out_errmsg         OUT      VARCHAR2
   );

   --  added new sp for SSL site search for MX on 13/08/10
PROCEDURE sps_ssl_site (
      in_bfgcustomerid   IN       customer.bfg_customer_id%TYPE,
      in_searchby        IN       VARCHAR2,
      in_country        IN       VARCHAR2,
      in_keyword         IN OUT   VARCHAR2,
      out_site           OUT      sys_refcursor
   );
PROCEDURE spi_quotesite_bfgexpedio_r5 (
      in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
      in_sitedetails     IN       site_bfgexpedio_tab,
      in_createdby       IN       site.created_by%TYPE,
      out_batchid        OUT      site.batch_id%TYPE,
      out_errmsg         OUT      VARCHAR2
   );
PROCEDURE spu_lineofsitebilling (
      in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
      in_lnbillingflag   IN       site.line_of_site_billing%TYPE,
      in_billingid       IN       billing.billing_id%TYPE,
      out_status         OUT      NUMBER,
      out_errmsg         OUT      VARCHAR2
   );
PROCEDURE sps_site_sslipsec_repop(
    in_quoteheaderid IN quote_header.quote_header_id%TYPE,
    in_orderheaderid IN order_header.order_header_id%TYPE,
    in_productname   IN line_item.product_name%TYPE,
    in_searchby      IN VARCHAR2,
    in_bfgcustomerid   IN       customer.bfg_customer_id%TYPE,
    out_site_conf   out sys_refcursor,
    out_status      out NUMBER,
    out_errmsg      out VARCHAR2
);
------mx product
PROCEDURE SPI_EXPEDIO_MAIN_SITE (
in_bfg_customer_id    IN       customer.bfg_customer_id%TYPE,
in_quoteheaderid      IN       quote_header.quote_header_id%TYPE,
in_createdby          IN       site.created_by%TYPE,
out_sqesiteid         OUT      site.site_id%TYPE,
out_add_id            OUT      site.bfg_address_id%TYPE,
out_expedio_site_id   OUT      site.expedio_site_id%TYPE,
out_bfg_subloc_id     OUT      site.bfg_subloc_id%TYPE,
out_bfg_site_id       OUT      site.bfg_site_id%TYPE,
out_status            OUT      NUMBER,
OUT_ERRMSG            OUT      varchar2
);

procedure SPS_CRD_ORDER_SITE (
	IN_QUOTEHEADERID   in       QUOTE_HEADER.QUOTE_HEADER_ID%type,
	IN_PRODUCT_ID      in       PRODUCT_MASTER_DETAILS.PRODUCT_ID%type,
	IN_ORDERHEADERID   IN       ORDER_HEADER.ORDER_HEADER_ID%TYPE,
	out_site           OUT      sys_refcursor
);

END pkg_site_r5;
/


CREATE OR REPLACE package body          pkg_common
as

   FUNCTION fn_splitdata (in_string IN VARCHAR2, in_separator IN VARCHAR2)
      RETURN varchar2_ntt
   AS
      v_string   LONG         DEFAULT in_string || in_separator;
      v_data     varchar2_ntt := varchar2_ntt ();
      v_count    NUMBER;
      v_len         number := 0;
   BEGIN
   v_len := length(in_separator);
      LOOP
         EXIT WHEN v_string IS NULL;
         v_count := INSTR (v_string, in_separator);
         v_data.EXTEND;
         v_data (v_data.COUNT) :=
                            LTRIM (RTRIM (SUBSTR (v_string, 1, v_count - 1)));
         --v_string := SUBSTR (v_string, v_count + 1);
         v_string := SUBSTR (v_string, v_count + (v_len));
      END LOOP;

      RETURN v_data;
   END;

   FUNCTION to_string (
      nt_in          IN   varchar2_ntt,
      delimiter_in   IN   VARCHAR2 DEFAULT ','
   )
      RETURN VARCHAR2
   IS
      v_idx   PLS_INTEGER;
      v_str   VARCHAR2 (32767);
      v_dlm   VARCHAR2 (10);
   BEGIN
      v_idx := nt_in.FIRST;

      WHILE v_idx IS NOT NULL
      LOOP
         v_str := v_str || v_dlm || nt_in (v_idx);
         v_dlm := delimiter_in;
         v_idx := nt_in.NEXT (v_idx);
      END LOOP;

      RETURN v_str;
   END;
FUNCTION fn_splitbulkupload (in_string IN CLOB, in_separator IN VARCHAR2)
      RETURN varchar2_clob
   AS
      v_string   CLOB          DEFAULT in_string || in_separator;
      v_data     varchar2_clob := varchar2_clob ();
      v_count    NUMBER;
      v_len      NUMBER;
   BEGIN
      LOOP
         --EXIT WHEN v_string IS NULL;
         EXIT WHEN v_len = 0;
         v_count := INSTR (v_string, in_separator);
         v_data.EXTEND;
         v_data (v_data.COUNT) :=
                            LTRIM (RTRIM (SUBSTR (v_string, 1, v_count - 1)));
         v_string := SUBSTR (v_string, v_count + 1);

         SELECT LENGTH (v_string)
           INTO v_len
           FROM DUAL;
      END LOOP;

      RETURN v_data;
   END;

   FUNCTION fn_countbulkupload (in_row IN VARCHAR2, in_separator IN VARCHAR2)
      RETURN NUMBER
   --counts the number of input parameters
   AS
      v_count    NUMBER          := 0;
      v_string   VARCHAR2 (10000); --modified lenght from 4000 to 10000 by nagedra on 8 April 2011
      v_i        NUMBER          := 1;
      v_len      NUMBER;
   BEGIN
      v_string := in_row;

      LOOP
         EXIT WHEN v_string IS NULL;
         v_i := INSTR (v_string, in_separator, 1);

         SELECT LENGTH (in_separator)
           INTO v_len
           FROM DUAL;

         IF (v_i <> 0)
         THEN
            BEGIN
               v_string :=
                  SUBSTR (v_string,
                          INSTR (v_string, in_separator, 1) + v_len,
                          LENGTH (v_string)
                          - INSTR (v_string, in_separator, 1)
                         );
               v_count := v_count + 1;
            END;
         ELSE
            BEGIN
               v_string := NULL;
            END;
         END IF;
      END LOOP;

      RETURN v_count;
   END;
   FUNCTION fn_countfields (in_row IN VARCHAR2, in_separator IN VARCHAR2)
      RETURN NUMBER
   --counts the number of input parameters
   AS
      v_count    NUMBER          := 0;
      v_string   VARCHAR2 (4000);
      v_i        NUMBER          := 1;
   BEGIN
      v_string := in_row;
      --|| in_separator;

      LOOP
         EXIT WHEN v_string IS NULL;
         v_i := INSTR (v_string, in_separator, 1);

         IF (v_i <> 0)
         THEN
            BEGIN
               v_string :=
                  SUBSTR (v_string,
                          INSTR (v_string, in_separator, 1) + 1,
                          LENGTH (v_string)
                          - INSTR (v_string, in_separator, 1)
                         );
               v_count := v_count + 1;
            END;
         ELSE
            BEGIN
               v_string := NULL;
            END;
         END IF;
      END LOOP;

      RETURN v_count;
   END;

--Start created by Nagendra on 23-NOV-2010
--This procedure is added for saving error log information
PROCEDURE spi_error_log (
   in_quote_id          NUMBER,
   in_quote_header_id   NUMBER,
   in_site_id           NUMBER,
   in_attribute_string  VARCHAR2,
   in_pkg_name          VARCHAR2,
   in_proc_name         VARCHAR2,
   in_error_code        NUMBER,
   in_error_message     VARCHAR2
)
AS
   PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
   INSERT INTO error_log
        VALUES (error_log_id.nextval,in_quote_id, in_quote_header_id, in_site_id, in_attribute_string,
                in_pkg_name, in_proc_name,in_error_code,in_error_message,sysdate);

   COMMIT;
END;

/***R15 changes****/
FUNCTION getprimaryaccesstechnology (
   in_quoteheaderid   quote_header.quote_header_id%TYPE,
   in_siteid          site.site_id%TYPE
)
   RETURN VARCHAR2
IS
   v_return_value   VARCHAR2 (255);
/******************************************************************************
   NAME:       getPrimaryAccessTechnology
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        6/13/2011    Jayasankar          Return primary access technology

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     getPrimaryAccessTechnology
      Sysdate:         6/13/2011
      Date and Time:   6/13/2011, 5:16:19 PM, and 6/13/2011 5:16:19 PM
      Username:         (set in TOAD Options, Procedure Editor)
      Table Name:       (set in the "New PL/SQL Object" dialog)

******************************************************************************/
BEGIN
   SELECT trim(lid.VALUE)
     INTO v_return_value
     FROM line_item_detail lid, line_item li
    WHERE li.active = 'Y'
      AND li.site_id = in_siteid
      AND lid.active = 'Y'
      AND lid.line_item_id = li.line_item_id
      AND lid.attribute_mapping_id = 3
      AND UPPER (li.fallback_type) = 'PRIMARY'
      AND li.quote_header_id = in_quoteheaderid;

   RETURN v_return_value;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      RETURN '';
   WHEN OTHERS
   THEN
      -- Consider logging the error and then re-raise
      RETURN '';
END GETPRIMARYACCESSTECHNOLOGY;

FUNCTION getsecondaryaccessresilience (
   in_quoteheaderid   quote_header.quote_header_id%TYPE,
   in_siteid          site.site_id%TYPE
)
   RETURN VARCHAR2
IS
   v_return_value   VARCHAR2 (255);
/******************************************************************************
   NAME:       getSecondaryAccessTechnology
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        6/13/2011    Jayasankar          Return secondary access technology

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     getPrimaryAccessTechnology
      Sysdate:         6/13/2011
      Date and Time:   6/13/2011, 5:16:19 PM, and 6/13/2011 5:16:19 PM
      Username:         (set in TOAD Options, Procedure Editor)
      Table Name:       (set in the "New PL/SQL Object" dialog)

******************************************************************************/
BEGIN
   SELECT TRIM (lid.VALUE)
     INTO v_return_value
     FROM line_item_detail lid, line_item li
    WHERE li.active = 'Y'
      AND li.site_id = in_siteid
      AND lid.active = 'Y'
      AND lid.line_item_id = li.line_item_id
      AND lid.attribute_mapping_id = 1
      AND UPPER (li.fallback_type) = 'SECONDARY'
      AND li.quote_header_id = in_quoteheaderid;

   RETURN v_return_value;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      RETURN '';
   WHEN OTHERS
   THEN
      -- Consider logging the error and then re-raise
      RETURN '';
END getsecondaryaccessresilience;

FUNCTION getsecondaryaccesstechnology (
   in_quoteheaderid   quote_header.quote_header_id%TYPE,
   in_siteid          site.site_id%TYPE
)
   RETURN VARCHAR2
IS
   v_return_value   VARCHAR2 (255);
/******************************************************************************
   NAME:       getSecondaryAccessTechnology
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        6/13/2011    Jayasankar          Return secondary access technology

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     getPrimaryAccessTechnology
      Sysdate:         6/13/2011
      Date and Time:   6/13/2011, 5:16:19 PM, and 6/13/2011 5:16:19 PM
      Username:         (set in TOAD Options, Procedure Editor)
      Table Name:       (set in the "New PL/SQL Object" dialog)

******************************************************************************/
BEGIN
   SELECT trim(lid.VALUE)
     INTO v_return_value
     FROM line_item_detail lid, line_item li
    WHERE li.active = 'Y'
      AND li.site_id = in_siteid
      AND lid.active = 'Y'
      AND lid.line_item_id = li.line_item_id
      AND lid.attribute_mapping_id = 3
      AND UPPER (li.fallback_type) = 'SECONDARY'
      AND li.quote_header_id = in_quoteheaderid;

   RETURN v_return_value;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      RETURN '';
   WHEN OTHERS
   THEN
      -- Consider logging the error and then re-raise
      RETURN '';
END getSecondaryaccesstechnology;


--End
end pkg_common;
/


CREATE OR REPLACE PACKAGE BODY PKG_CUSTOMER
AS

   v_sql_code     NUMBER;        -- Added by Sujana on 23/11/2010 as part of exception handling
   v_sql_errm     VARCHAR2(150); -- Added by Sujana on 23/11/2010 as part of exception handling

   PROCEDURE spi_customer (
      in_cname                  IN       customer.NAME%TYPE,
      in_comp                   IN       customer.company_name%TYPE,
      in_vat                    IN       customer.vat_number%TYPE,
      in_salchnid               IN       customer.sales_channel_id%TYPE,
      in_btsub                  IN       customer.bt_subsidiary_id%TYPE,
       in_tax_exempted           IN       customer.tax_exempted%TYPE,
      in_tax_exempt_ref_num     IN       customer.tax_exempt_ref_num%TYPE,
      in_line_of_site_billing   IN       customer.line_of_site_billing%TYPE,
      in_centralsitelosb        IN       site.line_of_site_billing%TYPE,
      in_ccntryid               IN       address.country_id%TYPE,
      in_caddr1                 IN       address.address_line1%TYPE,
      in_caddr2                 IN       address.address_line2%TYPE,
      in_ccity                  IN       address.city%TYPE,
      in_czip                   IN       address.post_zip_code%TYPE,
         in_state                  IN       address.state%TYPE,
      in_county                 IN       address.county%TYPE,
      in_contacts               IN       VARCHAR2,
      in_vpndet                 IN       VARCHAR2,
      in_billingdet             IN       VARCHAR2,
      in_bfgcustid              IN       customer.bfg_customer_id%TYPE,
      in_bfgcustname            IN       customer.bfg_customer_name%TYPE,
      in_createdby              IN       customer.created_by%TYPE,
      out_custid                OUT      customer.customer_id%TYPE,
      out_status                OUT      NUMBER,
      out_errmsg                OUT      VARCHAR2
   )
   AS
/******************************************************************************
   Usage Product Name:All Products
   PURPOSE: Customer Creating

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0         22/8/00		Suman							1.0 Add History Comment for  this procedure
  ******************************************************************************/
      v_row                    VARCHAR2 (8000);
      v_rowcnt                 NUMBER;
      v_bfname                 contact.first_name%TYPE;
      v_blname                 contact.last_name%TYPE;
      v_bemail                 contact.email%TYPE;
      v_bphno                  contact.phone_number%TYPE;
      v_bcode                  ACCOUNT.bank_code%TYPE;
      v_branch                 ACCOUNT.branch_code%TYPE;
      v_bctrl                  ACCOUNT.control_code%TYPE;
      v_bacctno                ACCOUNT.account_number%TYPE;
      v_bstrtno                address.address_line2%TYPE          := NULL;
      v_bcity                  address.city%TYPE;
      v_bcntryid               address.country_id%TYPE;
      v_bzip                   address.post_zip_code%TYPE;
     v_bcurrency              billing.currency%TYPE;
      v_binvprd                billing.invoice_period%TYPE;
      v_bactdt                 billing.activation_date%TYPE;
      v_siebelid               billing.siebel_id%TYPE;
      v_bcontactid             contact.contact_id%TYPE;
      v_baddressid             address.address_id%TYPE;
      v_bacctid                ACCOUNT.account_id%TYPE;
      v_custid                 customer.customer_id%TYPE;
      v_pcontid                contact.contact_id%TYPE;
      v_scontid                contact.contact_id%TYPE;
      v_caddrid                address.address_id%TYPE;
      v_vfrnm                  vpn.vpn_friendly_name%TYPE;
      v_vmss                   vpn.mss_id%TYPE;
      v_vct                    vpn.connection_type%TYPE;
      v_vcm                    vpn.connectivity_mode%TYPE;
      v_vvpn                   vpn.vpn_index%TYPE;
      v_fname                  contact.first_name%TYPE;
      v_lname                  contact.last_name%TYPE;
      v_job                    contact.job_title%TYPE;
      v_email                  contact.email%TYPE;
      v_phno                   contact.phone_number%TYPE;
      v_fax                    contact.fax%TYPE;
      v_mob                    contact.mobile_number%TYPE;
      v_ctype                  contact.contact_type%TYPE;
      v_bilcode                billing.billing_code%TYPE;
      v_lenbil                 NUMBER;
      i                        NUMBER                              := 1;
      v_finalbilcode           VARCHAR (9);
         v_bbillcontaccountname   billing.account_name%TYPE;
      v_bbillconttitle         contact.title%TYPE;
      v_bbillcontmiddlename    contact.middle_name%TYPE;
      v_bbillcontaddress1      address.address_line1%TYPE;
      v_bbillcontaddress2      address.address_line2%TYPE;
      v_bbillcontediaddress    billing.edi_address%TYPE;
      v_bbillcontstate         address.state%TYPE;
      v_bbillingcounty         address.county%TYPE;
      v_binformationcurrency   billing.information_currency%TYPE;
      v_bbillperiod            billing.bill_period%TYPE;
      v_bpaymentmethod         billing.payment_method%TYPE;
      v_bpaymentdays           billing.payment_days%TYPE;
      v_bustouching            billing.us_touching_scenario%TYPE;
      v_binvlang               billing.inv_lang%TYPE;
      v_findtilt               NUMBER                              := 0;
      v_bfg_custid   customer.bfg_customer_id%TYPE;

      CURSOR c_billdet
      IS
         SELECT *
           FROM TABLE
                   (CAST
                       (pkg_common.fn_splitdata (in_billingdet, '|') AS varchar2_ntt
                       )
                   );

      CURSOR c_vpndet
      IS
         SELECT *
           FROM TABLE
                     (CAST (pkg_common.fn_splitdata (in_vpndet, '|') AS varchar2_ntt
                           )
                     );

      CURSOR c_contacts
      IS
         SELECT *
           FROM TABLE
                   (CAST (pkg_common.fn_splitdata (in_contacts, '|') AS varchar2_ntt
                         )
                   );
   BEGIN

      BEGIN

  ----- Duplication Check for BFG CUSTOMER ID by SRK on 11-Feb-2011

       SELECT COUNT (*)
           INTO v_bfg_custid
           FROM customer
          WHERE TRIM(bfg_customer_id) =TRIM  (in_bfgcustid);

         IF (v_bfg_custid = 0)
         THEN
            SELECT customer_id.NEXTVAL
              INTO v_custid
              FROM DUAL;

            --Costomer data
            INSERT INTO customer
                        (customer_id, NAME, company_name, vat_number,
                         sales_channel_id, bt_subsidiary_id, created_date,
                         created_by, bfg_customer_id, bfg_customer_name,
                         tax_exempted, tax_exempt_ref_num,
                         line_of_site_billing
                        )
                 VALUES (v_custid, in_cname, in_comp, in_vat,
                         in_salchnid, in_btsub, SYSDATE,
                         in_createdby, in_bfgcustid, in_bfgcustname,
                         in_tax_exempted, in_tax_exempt_ref_num,
                         in_line_of_site_billing
                        );
         ELSE
            SELECT customer_id
              INTO v_custid
              FROM customer
               WHERE TRIM(bfg_customer_id) =  TRIM  (in_bfgcustid);

         END IF;


         --Check If Adress Details is present
         IF (in_ccntryid IS NOT NULL)
         THEN
            SELECT address_id.NEXTVAL
              INTO v_caddrid
              FROM DUAL;

            INSERT INTO address
                        (address_id, country_id, address_line2, city,
                         post_zip_code, created_date, address_line1,
                         created_by, state, county
                        )
                 VALUES (v_caddrid, in_ccntryid, in_caddr2, in_ccity,
                         in_czip, SYSDATE, in_caddr1,
                         in_createdby, in_state, in_county
                        );

            INSERT INTO site
                        (site_id, address_id, customer_id,
                         main_site_flag, created_by,
                         created_date, line_of_site_billing
                        )
                 VALUES (site_id.NEXTVAL, v_caddrid, v_custid,
                         pkg_constants.con_activeflag_yes, in_createdby,
                         SYSDATE (), in_centralsitelosb
                        );
         END IF;

         ----------------------------Contact Related-----------------------------
         IF (in_contacts != '-1')
         THEN
            FOR v_rowcnt IN c_contacts
            LOOP
               SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                              1,
                              INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 1) - 1
                             )
                 INTO v_fname
                 FROM DUAL;

               SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                              INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 1) + 1,
                              (  INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 2)
                               - INSTR (v_rowcnt.COLUMN_VALUE, '~', 1)
                               - 1
                              )
                             )
                 INTO v_lname
                 FROM DUAL;

               SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                              INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 2) + 1,
                              (  INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 3)
                               - INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 2)
                               - 1
                              )
                             )
                 INTO v_job
                 FROM DUAL;

               SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                              INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 3) + 1,
                              (  INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 4)
                               - INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 3)
                               - 1
                              )
                             )
                 INTO v_email
                 FROM DUAL;

               SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                              INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 4) + 1,
                              (  INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 5)
                               - INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 4)
                               - 1
                              )
                             )
                 INTO v_phno
                 FROM DUAL;

               SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                              INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 5) + 1,
                              (  INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 6)
                               - INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 5)
                               - 1
                              )
                             )
                 INTO v_fax
                 FROM DUAL;

               SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                              INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 6) + 1,
                              (  INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 7)
                               - INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 6)
                               - 1
                              )
                             )
                 INTO v_mob
                 FROM DUAL;

               SELECT (SUBSTR (v_rowcnt.COLUMN_VALUE,
                               INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 7) + 1,
                               LENGTH (v_rowcnt.COLUMN_VALUE) - 1
                              )
                      )
                 INTO v_ctype
                 FROM DUAL;

               IF (v_fname IS NOT NULL)
               THEN
                  CASE v_ctype
                     WHEN pkg_constants.con_primary_flag
                     THEN
                        SELECT contact_id.NEXTVAL
                          INTO v_pcontid
                          FROM DUAL;

                        INSERT INTO contact
                                    (contact_id, first_name, last_name,
                                     phone_number, mobile_number, fax,
                                     contact_type,
                                     job_title, created_date, email,
                                     created_by
                                    )
                             VALUES (v_pcontid, v_fname, v_lname,
                                     v_phno, v_mob, v_fax,
                                     pkg_constants.con_primary_custcontact,
                                     -- pkg_constants.con_primary_sitecontact,
                                     v_job, SYSDATE, v_email,
                                     in_createdby
                                    );

                        INSERT INTO customer_contact
                                    (customer_contact_id, customer_id,
                                     contact_id, created_date, created_by
                                    )
                             VALUES (customer_contact_id.NEXTVAL, v_custid,
                                     v_pcontid, SYSDATE, in_createdby
                                    );
                     WHEN pkg_constants.con_secondary_flag
                     THEN
                        SELECT contact_id.NEXTVAL
                          INTO v_scontid
                          FROM DUAL;

                        INSERT INTO contact
                                    (contact_id, first_name, last_name,
                                     phone_number, mobile_number, fax,
                                     contact_type,
                                     job_title, created_date, email,
                                     created_by
                                    )
                             VALUES (v_scontid, v_fname, v_lname,
                                     v_phno, v_mob, v_fax,
                                     pkg_constants.con_secondary_custcontact,
                                     --pkg_constants.con_secondary_sitecontact,
                                     v_job, SYSDATE, v_email,
                                     in_createdby
                                    );

                        --For new Structure
                        INSERT INTO customer_contact
                                    (customer_contact_id, customer_id,
                                     contact_id, created_date, created_by
                                    )
                             VALUES (customer_contact_id.NEXTVAL, v_custid,
                                     v_scontid, SYSDATE, in_createdby
                                    );
                  END CASE;
               END IF;
            END LOOP;
         END IF;

------------------------------------------------------------------------------

         -------------------------------VPN Related-----------------------------
         IF (in_vpndet != '-1')
         THEN
            FOR v_rowcnt IN c_vpndet
            LOOP
               SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                              1,
                              INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 1) - 1
                             )
                 INTO v_vfrnm
                 FROM DUAL;

               SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                              INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 1) + 1,
                              (  INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 2)
                               - INSTR (v_rowcnt.COLUMN_VALUE, '~', 1)
                               - 1
                              )
                             )
                 INTO v_vct
                 FROM DUAL;

               SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                              INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 2) + 1,
                              (  INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 3)
                               - INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 2)
                               - 1
                              )
                             )
                 INTO v_vvpn
                 FROM DUAL;

               SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                              INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 3) + 1,
                              (  INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 4)
                               - INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 3)
                               - 1
                              )
                             )
                 INTO v_vmss
                 FROM DUAL;

               SELECT (SUBSTR (v_rowcnt.COLUMN_VALUE,
                               INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 4) + 1,
                               LENGTH (v_rowcnt.COLUMN_VALUE) - 1
                              )
                      )
                 INTO v_vcm
                 FROM DUAL;

               IF (v_vct IS NOT NULL)
               THEN
                  INSERT INTO vpn
                              (vpn_id, customer_id, vpn_friendly_name,
                               connection_type, connectivity_mode, mss_id,
                               vpn_index, created_date, created_by
                              )
                       VALUES (vpn_id.NEXTVAL, v_custid, v_vfrnm,
                               v_vct, v_vcm, v_vmss,
                               v_vvpn, SYSDATE, in_createdby
                              );
               END IF;
            END LOOP;
         END IF;

--------------------------------------Billing Related----------------------------------------
         IF (in_billingdet != '-1')
         THEN
            BEGIN
               FOR v_rowcnt IN c_billdet
               LOOP
                  SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                 1,
                                 INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 1) - 1
                                )
                    INTO v_bfname
                    FROM DUAL;

                  SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                 INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 1) + 1,
                                 (  INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 2)
                                  - INSTR (v_rowcnt.COLUMN_VALUE, '~', 1)
                                  - 1
                                 )
                                )
                    INTO v_blname
                    FROM DUAL;

                  SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                 INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 2) + 1,
                                 (  INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 3)
                                  - INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 2)
                                  - 1
                                 )
                                )
                    INTO v_bemail
                    FROM DUAL;

                  SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                 INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 3) + 1,
                                 (  INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 4)
                                  - INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 3)
                                  - 1
                                 )
                                )
                    INTO v_bphno
                    FROM DUAL;

                  SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                 INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 4) + 1,
                                 (  INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 5)
                                  - INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 4)
                                  - 1
                                 )
                                )
                    INTO v_bcode
                    FROM DUAL;

                  SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                 INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 5) + 1,
                                 (  INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 6)
                                  - INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 5)
                                  - 1
                                 )
                                )
                    INTO v_branch
                    FROM DUAL;

                  SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                 INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 6) + 1,
                                 (  INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 7)
                                  - INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 6)
                                  - 1
                                 )
                                )
                    INTO v_bctrl
                    FROM DUAL;

                  SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                 INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 7) + 1,
                                 (  INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 8)
                                  - INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 7)
                                  - 1
                                 )
                                )
                    INTO v_bacctno
                    FROM DUAL;

                  /*SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                 INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 8) + 1,
                                 (  INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 9)
                                  - INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 8)
                                  - 1
                                 )
                                )
                    INTO v_bstrtno
                    FROM DUAL;*/
                  SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                 INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 8) + 1,
                                 (  INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 9)
                                  - INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 8)
                                  - 1
                                 )
                                )
                    INTO v_bcity
                    FROM DUAL;

                  SELECT TO_NUMBER (SUBSTR (v_rowcnt.COLUMN_VALUE,
                                              INSTR (v_rowcnt.COLUMN_VALUE,
                                                     '~',
                                                     1,
                                                     9
                                                    )
                                            + 1,
                                            (  INSTR (v_rowcnt.COLUMN_VALUE,
                                                      '~',
                                                      1,
                                                      10
                                                     )
                                             - INSTR (v_rowcnt.COLUMN_VALUE,
                                                      '~',
                                                      1,
                                                      9
                                                     )
                                             - 1
                                            )
                                           )
                                   )
                    INTO v_bcntryid
                    FROM DUAL;

                  SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                 INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 10) + 1,
                                 (  INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 11)
                                  - INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 10)
                                  - 1
                                 )
                                )
                    INTO v_bzip
                    FROM DUAL;

                  SELECT
                         --TO_NUMBER
                         (SUBSTR (v_rowcnt.COLUMN_VALUE,
                                  INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 11)
                                  + 1,
                                  (  INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 12)
                                   - INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 11)
                                   - 1
                                  )
                                 )
                         )
                    -- INTO v_bcurid
                  INTO   v_bcurrency
                    FROM DUAL;

                  SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                 INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 12) + 1,
                                 (  INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 13)
                                  - INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 12)
                                  - 1
                                 )
                                )
                    INTO v_binvprd
                    FROM DUAL;

                  SELECT TO_DATE (SUBSTR (v_rowcnt.COLUMN_VALUE,
                                            INSTR (v_rowcnt.COLUMN_VALUE,
                                                   '~',
                                                   1,
                                                   13
                                                  )
                                          + 1,
                                          (  INSTR (v_rowcnt.COLUMN_VALUE,
                                                    '~',
                                                    1,
                                                    14
                                                   )
                                           - INSTR (v_rowcnt.COLUMN_VALUE,
                                                    '~',
                                                    1,
                                                    13
                                                   )
                                           - 1
                                          )
                                         )
                                 )
                    INTO v_bactdt
                    FROM DUAL;

                  SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                 INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 14) + 1,
                                 (  INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 15)
                                  - INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 14)
                                  - 1
                                 )
                                )
                    INTO v_siebelid
                    FROM DUAL;

                  --added for R1
                  ----------------------RRRRRRRRRRRRRRRRRRRRR 1111111111111111111111111111111 Starts-- The above query also modified a bit
                  SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                 INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 15) + 1,
                                 (  INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 16)
                                  - INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 15)
                                  - 1
                                 )
                                )
                    INTO v_bbillcontaccountname
                    FROM DUAL;

                  SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                 INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 16) + 1,
                                 (  INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 17)
                                  - INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 16)
                                  - 1
                                 )
                                )
                    INTO v_bbillconttitle
                    FROM DUAL;

                  SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                 INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 17) + 1,
                                 (  INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 18)
                                  - INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 17)
                                  - 1
                                 )
                                )
                    INTO v_bbillcontmiddlename
                    FROM DUAL;

                  SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                 INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 18) + 1,
                                 (  INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 19)
                                  - INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 18)
                                  - 1
                                 )
                                )
                    INTO v_bbillcontaddress1
                    FROM DUAL;

                  SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                 INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 19) + 1,
                                 (  INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 20)
                                  - INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 19)
                                  - 1
                                 )
                                )
                    INTO v_bbillcontaddress2
                    FROM DUAL;

                  SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                 INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 20) + 1,
                                 (  INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 21)
                                  - INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 20)
                                  - 1
                                 )
                                )
                    INTO v_bbillcontediaddress
                    FROM DUAL;

                  SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                 INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 21) + 1,
                                 (  INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 22)
                                  - INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 21)
                                  - 1
                                 )
                                )
                    INTO v_bbillcontstate
                    FROM DUAL;

                  SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                 INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 22) + 1,
                                 (  INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 23)
                                  - INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 22)
                                  - 1
                                 )
                                )
                    INTO v_bbillingcounty
                    FROM DUAL;

                  SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                 INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 23) + 1,
                                 (  INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 24)
                                  - INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 23)
                                  - 1
                                 )
                                )
                    INTO v_binformationcurrency
                    FROM DUAL;

                  SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                 INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 24) + 1,
                                 (  INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 25)
                                  - INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 24)
                                  - 1
                                 )
                                )
                    INTO v_bbillperiod
                    FROM DUAL;

                  SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                 INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 25) + 1,
                                 (  INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 26)
                                  - INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 25)
                                  - 1
                                 )
                                )
                    INTO v_bpaymentmethod
                    FROM DUAL;

                  SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                 INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 26) + 1,
                                 (  INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 27)
                                  - INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 26)
                                  - 1
                                 )
                                )
                    INTO v_bpaymentdays
                    FROM DUAL;

                  SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                 INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 27) + 1,
                                 (  INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 28)
                                  - INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 27)
                                  - 1
                                 )
                                )
                    INTO v_bustouching
                    FROM DUAL;

                  SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                 INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 28) + 1,
                                 LENGTH (v_rowcnt.COLUMN_VALUE) - 1
                                )
                    INTO v_binvlang
                    FROM DUAL;

                  v_findtilt := INSTR (v_binvlang, '~');

                  IF v_findtilt > 0
                  THEN
                     v_binvlang := SUBSTR (v_binvlang, 1, v_findtilt - 1);
                  END IF;

                  --Check If Billing Details is present
                  IF (v_bacctno IS NOT NULL)
                  THEN
                     BEGIN
                        SELECT contact_id.NEXTVAL
                          INTO v_bcontactid
                          FROM DUAL;

                        SELECT address_id.NEXTVAL
                          INTO v_baddressid
                          FROM DUAL;

                        SELECT account_id.NEXTVAL
                          INTO v_bacctid
                          FROM DUAL;

                        INSERT INTO contact
                                    (contact_id, first_name, last_name,
                                     phone_number, email, created_date,
                                     contact_type,
                                     created_by, middle_name,
                                     title
                                    )
                             VALUES (v_bcontactid, v_bfname, v_blname,
                                     v_bphno, v_bemail, SYSDATE,
                                     pkg_constants.con_billingcontact,
                                     in_createdby, v_bbillcontmiddlename,
                                     v_bbillconttitle
                                    );

--                        INSERT INTO contact
--                                    (contact_id, first_name, last_name,
--                                     phone_number, email, created_date,
--                                     contact_type,
--                                     created_by
--                                    )
--                             VALUES (v_bcontactid, v_bfname, v_blname,
--                                     v_bphno, v_bemail, SYSDATE,
--                                     pkg_constants.con_billingcontact,
--                                     in_createdby
--                                    );
                        INSERT INTO customer_contact
                                    (customer_contact_id, customer_id,
                                     contact_id, created_date, created_by
                                    )
                             VALUES (customer_contact_id.NEXTVAL, v_custid,
                                     v_bcontactid, SYSDATE, in_createdby
                                    );

--for R1

                        --modified by tanmayi on 16/04/2010 to insert billing address1 and billing address2
                        INSERT INTO address
                                    (address_id, country_id, street_number,
                                     city, post_zip_code, created_date,
                                     created_by, county,
                                     state, address_line1,
                                     address_line2
                                    )
                             VALUES (v_baddressid, v_bcntryid, v_bstrtno,
                                     v_bcity, v_bzip, SYSDATE,
                                     in_createdby, v_bbillingcounty,
                                     v_bbillcontstate, v_bbillcontaddress1,
                                     v_bbillcontaddress2
                                    );

--                        INSERT INTO address
--                                    (address_id, country_id, street_number,
--                                     city, post_zip_code, created_date,
--                                     created_by
--                                    )
--                             VALUES (v_baddressid, v_bcntryid, v_bstrtno,
--                                     v_bcity, v_bzip, SYSDATE,
--                                     in_createdby
--                                    );
                        INSERT INTO ACCOUNT
                                    (account_id, account_number, bank_code,
                                     branch_code, control_code, created_date,
                                     created_by
                                    )
                             VALUES (v_bacctid, v_bacctno, v_bcode,
                                     v_branch, v_bctrl, SYSDATE,
                                     in_createdby
                                    );

                        --Find max billing code for the customer(when null its 1)
                        SELECT TO_NUMBER (NVL (  MAX (TO_NUMBER (billing_code))
                                               + 1,
                                               1
                                              )
                                         )
                          INTO v_bilcode
                          FROM billing
                         WHERE customer_id = v_custid;

                        SELECT LENGTH (v_bilcode)
                          INTO v_lenbil
                          FROM DUAL;

                        v_finalbilcode := NULL;

                        --Total Length of Billing Code is 9 , this logic calculated number of '0' to be appended
                        -- to generate the billing code
                        LOOP
                           EXIT WHEN i = (9 - v_lenbil) + 1;
                           v_finalbilcode := v_finalbilcode || '0';
                           i := i + 1;
                        END LOOP;

                        i := 1;
                        v_finalbilcode := v_finalbilcode || v_bilcode;

                        --for R1
                        INSERT INTO billing
                                    (billing_id, address_id,
                                     customer_id, account_id, contact_id,
                                     --currency_id
                                     currency, activation_date,
                                     invoice_period, created_date, siebel_id,
                                     created_by, billing_code,
                                     information_currency, bill_period,
                                     payment_method, payment_days,
                                     us_touching_scenario, inv_lang,
                                     account_name,
                                     edi_address
                                    )
                             VALUES (billing_id.NEXTVAL, v_baddressid,
                                     v_custid, v_bacctid, v_bcontactid,
                                     --v_bcurid
                                     v_bcurrency, v_bactdt,
                                     v_binvprd, SYSDATE, v_siebelid,
                                     in_createdby, v_finalbilcode,
                                     v_binformationcurrency, v_bbillperiod,
                                     v_bpaymentmethod, v_bpaymentdays,
                                     v_bustouching, v_binvlang,
                                     v_bbillcontaccountname,
                                     v_bbillcontediaddress
                                    );
--                        INSERT INTO billing
--                                    (billing_id, address_id,
--                                     customer_id, account_id, contact_id,
--                                     --currency_id
--                                     currency, activation_date,
--                                     invoice_period, created_date, siebel_id,
--                                     created_by, billing_code
--                                    )
--                             VALUES (billing_id.NEXTVAL, v_baddressid,
--                                     v_custid, v_bacctid, v_bcontactid,
--                                     --v_bcurid
--                                     v_bcurrency, v_bactdt,
--                                     v_binvprd, SYSDATE, v_siebelid,
--                                     in_createdby, v_finalbilcode
--                                    );
                     END;
                  END IF;                             --End of account id null
               END LOOP;
            END;
         END IF;
      END;                                                --End of Transaction

      /*COMMIT; commented by Jay */
      out_custid := v_custid;
      out_status := pkg_constants.con_status_success;
   EXCEPTION
      WHEN OTHERS
      THEN
         out_custid := 0;
         out_status := pkg_constants.con_status_failure;
         out_errmsg := substr(SQLERRM,1,150);
          -- Added by Mini on 23/11/2010 as part of exception handling

         v_sql_code := SQLCODE;
         PKG_COMMON.spi_error_log(
                                  NULL,
                                  NULL,
                                  NULL,
                                  NULL,
                                  'PKG_CUSTOMER',
                                  'SPI_CUSTOMER',
                                  v_sql_code,
                                  out_errmsg
                                 );


         /*ROLLBACK; commented by Jay*/
   END spi_customer;


PROCEDURE spu_customer (
   in_cid                    IN       customer.customer_id%TYPE,
   in_comp                   IN       customer.company_name%TYPE,
   in_vat                    IN       customer.vat_number%TYPE,
   in_salid                  IN       customer.sales_channel_id%TYPE,
   in_tax_exempted           IN       customer.tax_exempted%TYPE,
   in_tax_exempt_ref_num     IN       customer.tax_exempt_ref_num%TYPE,
   in_line_of_site_billing   IN       customer.line_of_site_billing%TYPE,
   in_centralsitelosb        IN       site.line_of_site_billing%TYPE,
   in_ccntryid               IN       address.country_id%TYPE,
   in_caddr1                 IN       address.address_line1%TYPE,
   in_caddr2                 IN       address.address_line2%TYPE,
   in_ccity                  IN       address.city%TYPE,
   in_czip                   IN       address.post_zip_code%TYPE,
   in_state                  IN       address.state%TYPE,
   in_county                 IN       address.county%TYPE,
   in_contacts               IN       VARCHAR2,
   in_vpndet                 IN       VARCHAR2,
   in_billingdet             IN       VARCHAR2,
   in_bfgcustid              IN       customer.bfg_customer_id%TYPE,
   in_bfgcustname            IN       customer.bfg_customer_name%TYPE,
   in_modifiedby             IN       customer.modified_by%TYPE,
   in_classicsiteid          IN       site.classic_site_id%TYPE,
   in_classicsitename        IN       site.classic_site_name%TYPE,
   out_status                OUT      NUMBER,
   out_errmsg                OUT      VARCHAR2
)
AS
/******************************************************************************
   Usage Product Name:All Products
   PURPOSE: Update Customer

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0         22/8/00		Suman							1.0 Add History Comment for  this procedure
  ******************************************************************************/

   v_row                    VARCHAR2 (8000);
   v_rowcnt                 NUMBER;
   v_bfname                 contact.first_name%TYPE;
   v_blname                 contact.last_name%TYPE;
   v_bemail                 contact.email%TYPE;
   v_bphno                  contact.phone_number%TYPE;
   v_bcode                  ACCOUNT.bank_code%TYPE;
   v_branch                 ACCOUNT.branch_code%TYPE;
   v_bctrl                  ACCOUNT.control_code%TYPE;
   v_bacctno                ACCOUNT.account_number%TYPE;
   v_bstrtno                address.street_number%TYPE          := NULL;
   v_bcity                  address.city%TYPE;
   v_bcntryid               address.country_id%TYPE;
   v_bzip                   address.post_zip_code%TYPE;
   -- v_bcurid         currency.currency_id%TYPE;
   v_bcurrency              billing.currency%TYPE;
   v_binvprd                billing.invoice_period%TYPE;
   v_bactdt                 billing.activation_date%TYPE;
   v_siebelid               billing.siebel_id%TYPE;
   v_bicode                 billing.billing_code%TYPE;
 /**** Added by Jay for R9 IVPN2 Modify********/
   v_bfgbillaccid           billing.bfg_bill_account_id%TYPE;
   /**** Added by Jay for R9 IVPN2 Modify********/
   v_bcontactid             contact.contact_id%TYPE;
   v_baddressid             address.address_id%TYPE;
   v_bacctid                ACCOUNT.account_id%TYPE;
   v_pcontid                contact.contact_id%TYPE;
   v_scontid                contact.contact_id%TYPE;
   v_caddrid                address.address_id%TYPE;
   v_bacctidu               VARCHAR2 (500);
   v_bcontactidu            VARCHAR2 (500);
   v_baddressidu            VARCHAR2 (500);
   v_sitebillcodeu          varchar2_ntt                   := varchar2_ntt
                                                                          ();
   v_count                  NUMBER;
   v_vfrnm                  vpn.vpn_friendly_name%TYPE;
   v_vvpn                   vpn.vpn_index%TYPE;
   v_vct                    vpn.connection_type%TYPE;
   v_vcm                    vpn.connectivity_mode%TYPE;
   v_vmss                   vpn.mss_id%TYPE;
   v_fname                  contact.first_name%TYPE;
   v_lname                  contact.last_name%TYPE;
   v_job                    contact.job_title%TYPE;
   v_email                  contact.email%TYPE;
   v_phno                   contact.phone_number%TYPE;
   v_fax                    contact.fax%TYPE;
   v_mob                    contact.mobile_number%TYPE;
   v_ctype                  contact.contact_type%TYPE;
   v_bilcode                billing.billing_code%TYPE;
   v_lenbil                 NUMBER;
   i                        NUMBER                              := 1;
   v_finalbilcode           VARCHAR (9);
   --For R1
   v_bbillcontaccountname   billing.account_name%TYPE;
   v_bbillconttitle         contact.title%TYPE;
   v_bbillcontmiddlename    contact.middle_name%TYPE;
   v_bbillcontaddress1      address.address_line1%TYPE;
   v_bbillcontaddress2      address.address_line2%TYPE;
   v_bbillcontediaddress    billing.edi_address%TYPE;
   v_bbillcontstate         address.state%TYPE;
   v_bbillingcounty         address.county%TYPE;
   v_binformationcurrency   billing.information_currency%TYPE;
   v_bbillperiod            billing.bill_period%TYPE;
   v_bpaymentmethod         billing.payment_method%TYPE;
   v_bpaymentdays           billing.payment_days%TYPE;
   v_bustouching            billing.us_touching_scenario%TYPE;
   v_binvlang               billing.inv_lang%TYPE;
   v_findtilt               NUMBER                              := 0;

   CURSOR c_billdet
   IS
      SELECT *
        FROM TABLE
                 (CAST (pkg_common.fn_splitdata (in_billingdet, '|') AS varchar2_ntt
                       )
                 );

   CURSOR c_vpndet
   IS
      SELECT *
        FROM TABLE (CAST (pkg_common.fn_splitdata (in_vpndet, '|') AS varchar2_ntt
                         )
                   );

   CURSOR c_contacts
   IS
      SELECT *
        FROM TABLE (CAST (pkg_common.fn_splitdata (in_contacts, '|') AS varchar2_ntt
                         )
                   );
BEGIN

   BEGIN
      SELECT COUNT (*)
        INTO v_count
        FROM customer
       WHERE customer_id = in_cid OR bfg_customer_id = in_bfgcustid;

      -- Ghucs, Added new parameter in_bfgcustid as OR condition;
      IF (v_count = 0)
      THEN
         --Customer Does Not Exist
         out_status := pkg_constants.con_status_duplicate;
      ELSE
         BEGIN
            UPDATE customer
               SET company_name = in_comp,
                   vat_number = in_vat,
                   sales_channel_id = in_salid,
                   modified_by = in_modifiedby,
                   modified_date = SYSDATE,
                   bfg_customer_name = in_bfgcustname,
                     -- Ghucs, Added new parameter in_bfgcustname to update
                   --added for R1
                   tax_exempted = in_tax_exempted,
                   tax_exempt_ref_num = in_tax_exempt_ref_num,
                   line_of_site_billing = in_line_of_site_billing
             WHERE customer_id = in_cid OR bfg_customer_id = in_bfgcustid;

            -- Ghucs, Added new parameter in_bfgcustid as OR condition

            --If Primary Contact Exists
            SELECT COUNT (*)
              INTO v_pcontid
              FROM customer c, customer_contact ct, contact co
             WHERE c.customer_id = in_cid
               AND c.customer_id = ct.customer_id
               AND ct.contact_id = co.contact_id
               AND co.contact_type = pkg_constants.con_primary_custcontact;

            -- AND co.contact_type = pkg_constants.con_primary_sitecontact;
            IF (v_pcontid != 0)
            THEN
               SELECT ct.contact_id
                 INTO v_pcontid
                 FROM customer c, customer_contact ct, contact co
                WHERE c.customer_id = in_cid
                  AND c.customer_id = ct.customer_id
                  AND ct.contact_id = co.contact_id
                  AND co.contact_type = pkg_constants.con_primary_custcontact;

               --pkg_constants.con_primary_sitecontact;
               DELETE FROM customer_contact
                     WHERE contact_id = v_pcontid AND customer_id = in_cid;

               DELETE FROM contact
                     WHERE contact_id = v_pcontid;
            END IF;

            --If Secondary Contact Exists
            SELECT COUNT (*)
              INTO v_scontid
              FROM customer c, customer_contact ct, contact co
             WHERE c.customer_id = in_cid
               AND c.customer_id = ct.customer_id
               AND ct.contact_id = co.contact_id
               AND co.contact_type = pkg_constants.con_secondary_custcontact;

            -- pkg_constants.con_secondary_sitecontact;
            IF (v_scontid != 0)
            THEN
               SELECT ct.contact_id
                 INTO v_scontid
                 FROM customer c, customer_contact ct, contact co
                WHERE c.customer_id = in_cid
                  AND c.customer_id = ct.customer_id
                  AND ct.contact_id = co.contact_id
                  AND co.contact_type =
                                       pkg_constants.con_secondary_custcontact;

               --   pkg_constants.con_secondary_sitecontact;
               DELETE FROM customer_contact
                     WHERE contact_id = v_scontid AND customer_id = in_cid;

               DELETE FROM contact
                     WHERE contact_id = v_scontid;
            END IF;

            ----------------------------ADDED Contact Related-----------------------------
            IF (in_contacts != '-1')
            THEN
               FOR v_rowcnt IN c_contacts
               LOOP
                  SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                 1,
                                 INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 1) - 1
                                )
                    INTO v_fname
                    FROM DUAL;

                  SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                 INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 1) + 1,
                                 (  INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 2)
                                  - INSTR (v_rowcnt.COLUMN_VALUE, '~', 1)
                                  - 1
                                 )
                                )
                    INTO v_lname
                    FROM DUAL;

                  SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                 INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 2) + 1,
                                 (  INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 3)
                                  - INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 2)
                                  - 1
                                 )
                                )
                    INTO v_job
                    FROM DUAL;

                  SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                 INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 3) + 1,
                                 (  INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 4)
                                  - INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 3)
                                  - 1
                                 )
                                )
                    INTO v_email
                    FROM DUAL;

                  SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                 INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 4) + 1,
                                 (  INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 5)
                                  - INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 4)
                                  - 1
                                 )
                                )
                    INTO v_phno
                    FROM DUAL;

                  SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                 INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 5) + 1,
                                 (  INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 6)
                                  - INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 5)
                                  - 1
                                 )
                                )
                    INTO v_fax
                    FROM DUAL;

                  SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                 INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 6) + 1,
                                 (  INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 7)
                                  - INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 6)
                                  - 1
                                 )
                                )
                    INTO v_mob
                    FROM DUAL;

                  SELECT (SUBSTR (v_rowcnt.COLUMN_VALUE,
                                  INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 7) + 1,
                                  LENGTH (v_rowcnt.COLUMN_VALUE) - 1
                                 )
                         )
                    INTO v_ctype
                    FROM DUAL;

                  IF (v_fname IS NOT NULL)
                  THEN
                     CASE v_ctype
                        WHEN pkg_constants.con_primary_flag
                        THEN
                           SELECT contact_id.NEXTVAL
                             INTO v_pcontid
                             FROM DUAL;

                           INSERT INTO contact
                                       (contact_id, first_name, last_name,
                                        phone_number, mobile_number, fax,
                                        contact_type,
                                        job_title, created_date, email,
                                        created_by
                                       )
                                VALUES (v_pcontid, v_fname, v_lname,
                                        v_phno, v_mob, v_fax,
                                        pkg_constants.con_primary_custcontact,
                                        --pkg_constants.con_primary_sitecontact,
                                        v_job, SYSDATE, v_email,
                                        in_modifiedby
                                       );

                           INSERT INTO customer_contact
                                       (customer_contact_id, customer_id,
                                        contact_id, created_date, created_by
                                       )
                                VALUES (customer_contact_id.NEXTVAL, in_cid,
                                        v_pcontid, SYSDATE, in_modifiedby
                                       );
                        WHEN pkg_constants.con_secondary_flag
                        THEN
                           SELECT contact_id.NEXTVAL
                             INTO v_scontid
                             FROM DUAL;

                           INSERT INTO contact
                                       (contact_id, first_name, last_name,
                                        phone_number, mobile_number, fax,
                                        contact_type,
                                        job_title, created_date, email,
                                        created_by
                                       )
                                VALUES (v_scontid, v_fname, v_lname,
                                        v_phno, v_mob, v_fax,
                                        pkg_constants.con_secondary_custcontact,
                                        --pkg_constants.con_secondary_sitecontact,
                                        v_job, SYSDATE, v_email,
                                        in_modifiedby
                                       );

                           --For new Structure
                           INSERT INTO customer_contact
                                       (customer_contact_id, customer_id,
                                        contact_id, created_date, created_by
                                       )
                                VALUES (customer_contact_id.NEXTVAL, in_cid,
                                        v_scontid, SYSDATE, in_modifiedby
                                       );
                     END CASE;
                  END IF;
               END LOOP;
            END IF;

------------------------------------------------------------------------------

            --Check id Adress Details are present
            SELECT COUNT (*)
              INTO v_caddrid
              FROM site
             WHERE customer_id = in_cid;

            --If records exist for address  delete them
            IF (v_caddrid != 0)
            THEN
              /* DELETE FROM site
                     WHERE customer_id = in_cid
                       AND address_id IN (
                              SELECT address_id
                                FROM site
                               WHERE customer_id = in_cid
                                 AND main_site_flag =
                                              pkg_constants.con_activeflag_yes);*/
				update site set address_id = null where address_id IN (
                                 SELECT address_id
                                   FROM site
                                  WHERE customer_id = in_cid
                                    AND main_site_flag =
                                              pkg_constants.con_activeflag_yes);
               DELETE FROM address
                     WHERE address_id IN (
                              SELECT address_id
                                FROM site
                               WHERE customer_id = in_cid
                                 AND main_site_flag =
                                              pkg_constants.con_activeflag_yes);
            END IF;

            --After deletion Create new records
            IF (in_ccntryid IS NOT NULL)
            THEN
               SELECT address_id.NEXTVAL
                 INTO v_caddrid
                 FROM DUAL;

               INSERT INTO address
                           (address_id, country_id, address_line2, city,
                            post_zip_code, created_date, address_line1,
                            created_by, state, county
                           )
                    VALUES (v_caddrid, in_ccntryid, in_caddr2, in_ccity,
                            in_czip, SYSDATE, in_caddr1,
                            in_modifiedby, in_state, in_county
                           );
                UPDATE site
                  SET address_id = v_caddrid,
                  line_of_site_billing = in_centralsitelosb
                WHERE site_id IN (
                         SELECT site_id
                           FROM site
                          WHERE customer_id = in_cid);
                            /*AND address_id IN (
                                   SELECT address_id
                                     FROM site
                                    WHERE customer_id = in_cid
                                      AND main_site_flag =
                                              pkg_constants.con_activeflag_yes)); */
               /*INSERT INTO site
                           (site_id, address_id, customer_id,
                            main_site_flag, created_by,
                            line_of_site_billing
                           )
                    VALUES (site_id.NEXTVAL, v_caddrid, in_cid,
                            pkg_constants.con_activeflag_yes, in_modifiedby,
                            in_centralsitelosb
                           );*/
            END IF;

            -- added For R1
            IF (in_classicsiteid IS NOT NULL OR in_classicsitename IS NOT NULL
               )
            THEN
               BEGIN
                  UPDATE site
                     SET classic_site_id = in_classicsiteid,
                         classic_site_name = in_classicsitename,
                         modified_by = in_modifiedby,
                         modified_date = SYSDATE
                   WHERE customer_id = in_cid
                     AND main_site_flag = pkg_constants.con_activeflag_yes;
               END;
            END IF;

------------------------------
               --Deletions to be done FOR VPN
            SELECT COUNT (*)
              INTO v_count
              FROM vpn
             WHERE customer_id = in_cid;

            IF (v_count != 0)
            THEN
               ----if  main vpn details are null for edit customer,then existing main vpn should not be deleted
               --- added on 16-Jun-10 by Srinivas Rao.k
               IF (in_vpndet != '-1')
               THEN
                  DELETE FROM vpn
                        WHERE customer_id = in_cid;
               ELSE
                  out_status := 3;
               END IF;
            END IF;

            IF (in_vpndet != '-1')
            THEN
               FOR v_rowcnt IN c_vpndet
               LOOP
                  SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                 1,
                                 INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 1) - 1
                                )
                    INTO v_vfrnm
                    FROM DUAL;

                  SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                 INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 1) + 1,
                                 (  INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 2)
                                  - INSTR (v_rowcnt.COLUMN_VALUE, '~', 1)
                                  - 1
                                 )
                                )
                    INTO v_vct
                    FROM DUAL;

                  SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                 INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 2) + 1,
                                 (  INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 3)
                                  - INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 2)
                                  - 1
                                 )
                                )
                    INTO v_vvpn
                    FROM DUAL;

                  SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                 INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 3) + 1,
                                 (  INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 4)
                                  - INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 3)
                                  - 1
                                 )
                                )
                    INTO v_vmss
                    FROM DUAL;

                  SELECT (SUBSTR (v_rowcnt.COLUMN_VALUE,
                                  INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 4) + 1,
                                  LENGTH (v_rowcnt.COLUMN_VALUE) - 1
                                 )
                         )
                    INTO v_vcm
                    FROM DUAL;

                  IF (v_vct IS NOT NULL)
                  THEN
                     INSERT INTO vpn
                                 (vpn_id, customer_id, vpn_friendly_name,
                                  connection_type, connectivity_mode,
                                  mss_id, vpn_index, created_date, created_by
                                 )
                          VALUES (vpn_id.NEXTVAL, in_cid, v_vfrnm,
                                  v_vct, v_vcm,
                                  v_vmss, v_vvpn, SYSDATE, in_modifiedby
                                 );
                  END IF;
               END LOOP;
            END IF;

-----------------------------------

            --Deletions to be done for Billing Info (Account,Address,Contact and Customer Contact)
            SELECT COUNT (*)
              INTO v_count
              FROM billing
             WHERE customer_id = in_cid;

            IF (v_count != 0)
            THEN
               BEGIN
                  SELECT   pkg_common.to_string
                              (CAST
                                  (COLLECT (TO_CHAR (contact_id)) AS varchar2_ntt
                                  )
                              )
                      INTO v_bcontactidu
                      FROM billing
                     WHERE customer_id = in_cid
                  GROUP BY customer_id;

                  SELECT   pkg_common.to_string
                              (CAST
                                  (COLLECT (TO_CHAR (address_id)) AS varchar2_ntt
                                  )
                              )
                      INTO v_baddressidu
                      FROM billing
                     WHERE customer_id = in_cid
                  GROUP BY customer_id;

                  SELECT   pkg_common.to_string
                              (CAST
                                  (COLLECT (TO_CHAR (account_id)) AS varchar2_ntt
                                  )
                              )
                      INTO v_bacctidu
                      FROM billing
                     WHERE customer_id = in_cid
                  GROUP BY customer_id;

                  --Collect site ids and billing codes
                  SELECT CAST
                            (COLLECT (TO_CHAR (   s.site_id
                                               || '-'
                                               || NVL (b.billing_code, '')
                                              )
                                     ) AS varchar2_ntt
                            )
                    INTO v_sitebillcodeu
                    FROM site s, billing b
                   WHERE s.customer_id = in_cid
                         AND s.billing_id = b.billing_id;

                  UPDATE site
                     SET billing_id = NULL
                   WHERE site_id IN (
                                SELECT SUBSTR (val, 1, INSTR (val, '-', 1) - 1)
                                  FROM (SELECT COLUMN_VALUE val
                                          FROM TABLE (v_sitebillcodeu)));

                  DELETE FROM billing
                        WHERE customer_id = in_cid;

                  DELETE FROM ACCOUNT
                        WHERE account_id IN (
                                 SELECT TO_NUMBER (COLUMN_VALUE)
                                   FROM TABLE
                                           (CAST
                                               (pkg_common.fn_splitdata
                                                                  (v_bacctidu,
                                                                   ','
                                                                  ) AS varchar2_ntt
                                               )
                                           ));

                  DELETE FROM address
                        WHERE address_id IN (
                                 SELECT TO_NUMBER (COLUMN_VALUE)
                                   FROM TABLE
                                           (CAST
                                               (pkg_common.fn_splitdata
                                                               (v_baddressidu,
                                                                ','
                                                               ) AS varchar2_ntt
                                               )
                                           ));

                  DELETE FROM customer_contact
                        WHERE customer_id = in_cid
                          AND contact_id IN (
                                 SELECT c.contact_id
                                   FROM customer_contact cc, contact c
                                  WHERE c.contact_type =
                                              pkg_constants.con_billingcontact
                                    AND cc.customer_id = in_cid
                                    AND c.contact_id = cc.contact_id);

                  DELETE FROM contact
                        WHERE contact_id IN (
                                 SELECT TO_NUMBER (COLUMN_VALUE)
                                   FROM TABLE
                                           (CAST
                                               (pkg_common.fn_splitdata
                                                               (v_bcontactidu,
                                                                ','
                                                               ) AS varchar2_ntt
                                               )
                                           ))
                          AND contact_type = pkg_constants.con_billingcontact;
               END;
            END IF;

            IF (in_billingdet != '-1')
            THEN
               BEGIN
                  FOR v_rowcnt IN c_billdet
                  LOOP
                     SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                    1,
                                      INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 1)
                                    - 1
                                   )
                       INTO v_bfname
                       FROM DUAL;

                     SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                      INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 1)
                                    + 1,
                                    (  INSTR (v_rowcnt.COLUMN_VALUE, '~', 1,
                                              2)
                                     - INSTR (v_rowcnt.COLUMN_VALUE, '~', 1)
                                     - 1
                                    )
                                   )
                       INTO v_blname
                       FROM DUAL;

                     SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                      INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 2)
                                    + 1,
                                    (  INSTR (v_rowcnt.COLUMN_VALUE, '~', 1,
                                              3)
                                     - INSTR (v_rowcnt.COLUMN_VALUE, '~', 1,
                                              2)
                                     - 1
                                    )
                                   )
                       INTO v_bemail
                       FROM DUAL;

                     SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                      INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 3)
                                    + 1,
                                    (  INSTR (v_rowcnt.COLUMN_VALUE, '~', 1,
                                              4)
                                     - INSTR (v_rowcnt.COLUMN_VALUE, '~', 1,
                                              3)
                                     - 1
                                    )
                                   )
                       INTO v_bphno
                       FROM DUAL;

                     SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                      INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 4)
                                    + 1,
                                    (  INSTR (v_rowcnt.COLUMN_VALUE, '~', 1,
                                              5)
                                     - INSTR (v_rowcnt.COLUMN_VALUE, '~', 1,
                                              4)
                                     - 1
                                    )
                                   )
                       INTO v_bcode
                       FROM DUAL;

                     SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                      INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 5)
                                    + 1,
                                    (  INSTR (v_rowcnt.COLUMN_VALUE, '~', 1,
                                              6)
                                     - INSTR (v_rowcnt.COLUMN_VALUE, '~', 1,
                                              5)
                                     - 1
                                    )
                                   )
                       INTO v_branch
                       FROM DUAL;

                     SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                      INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 6)
                                    + 1,
                                    (  INSTR (v_rowcnt.COLUMN_VALUE, '~', 1,
                                              7)
                                     - INSTR (v_rowcnt.COLUMN_VALUE, '~', 1,
                                              6)
                                     - 1
                                    )
                                   )
                       INTO v_bctrl
                       FROM DUAL;

                     SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                      INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 7)
                                    + 1,
                                    (  INSTR (v_rowcnt.COLUMN_VALUE, '~', 1,
                                              8)
                                     - INSTR (v_rowcnt.COLUMN_VALUE, '~', 1,
                                              7)
                                     - 1
                                    )
                                   )
                       INTO v_bacctno
                       FROM DUAL;

                     /*SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                        INSTR (v_rowcnt.COLUMN_VALUE,
                                               '~',
                                               1,
                                               8
                                              )
                                      + 1,
                                      (  INSTR (v_rowcnt.COLUMN_VALUE,
                                                '~',
                                                1,
                                                9
                                               )
                                       - INSTR (v_rowcnt.COLUMN_VALUE,
                                                '~',
                                                1,
                                                8
                                               )
                                       - 1
                                      )
                                     )
                         INTO v_bstrtno
                         FROM DUAL;*/
                     SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                      INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 8)
                                    + 1,
                                    (  INSTR (v_rowcnt.COLUMN_VALUE, '~', 1,
                                              9)
                                     - INSTR (v_rowcnt.COLUMN_VALUE, '~', 1,
                                              8)
                                     - 1
                                    )
                                   )
                       INTO v_bcity
                       FROM DUAL;

                     SELECT TO_NUMBER (SUBSTR (v_rowcnt.COLUMN_VALUE,
                                                 INSTR (v_rowcnt.COLUMN_VALUE,
                                                        '~',
                                                        1,
                                                        9
                                                       )
                                               + 1,
                                               (  INSTR
                                                       (v_rowcnt.COLUMN_VALUE,
                                                        '~',
                                                        1,
                                                        10
                                                       )
                                                - INSTR
                                                       (v_rowcnt.COLUMN_VALUE,
                                                        '~',
                                                        1,
                                                        9
                                                       )
                                                - 1
                                               )
                                              )
                                      )
                       INTO v_bcntryid
                       FROM DUAL;

                     SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                      INSTR (v_rowcnt.COLUMN_VALUE, '~', 1,
                                             10)
                                    + 1,
                                    (  INSTR (v_rowcnt.COLUMN_VALUE,
                                              '~',
                                              1,
                                              11
                                             )
                                     - INSTR (v_rowcnt.COLUMN_VALUE,
                                              '~',
                                              1,
                                              10
                                             )
                                     - 1
                                    )
                                   )
                       INTO v_bzip
                       FROM DUAL;

                     SELECT
                            --TO_NUMBER
                            (SUBSTR (v_rowcnt.COLUMN_VALUE,
                                       INSTR (v_rowcnt.COLUMN_VALUE,
                                              '~',
                                              1,
                                              11
                                             )
                                     + 1,
                                     (  INSTR (v_rowcnt.COLUMN_VALUE,
                                               '~',
                                               1,
                                               12
                                              )
                                      - INSTR (v_rowcnt.COLUMN_VALUE,
                                               '~',
                                               1,
                                               11
                                              )
                                      - 1
                                     )
                                    )
                            )
                       --INTO v_bcurid
                     INTO   v_bcurrency
                       FROM DUAL;

                     SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                      INSTR (v_rowcnt.COLUMN_VALUE, '~', 1,
                                             12)
                                    + 1,
                                    (  INSTR (v_rowcnt.COLUMN_VALUE,
                                              '~',
                                              1,
                                              13
                                             )
                                     - INSTR (v_rowcnt.COLUMN_VALUE,
                                              '~',
                                              1,
                                              12
                                             )
                                     - 1
                                    )
                                   )
                       INTO v_binvprd
                       FROM DUAL;

                     SELECT TO_DATE (SUBSTR (v_rowcnt.COLUMN_VALUE,
                                               INSTR (v_rowcnt.COLUMN_VALUE,
                                                      '~',
                                                      1,
                                                      13
                                                     )
                                             + 1,
                                             (  INSTR (v_rowcnt.COLUMN_VALUE,
                                                       '~',
                                                       1,
                                                       14
                                                      )
                                              - INSTR (v_rowcnt.COLUMN_VALUE,
                                                       '~',
                                                       1,
                                                       13
                                                      )
                                              - 1
                                             )
                                            )
                                    )
                       INTO v_bactdt
                       FROM DUAL;

                     SELECT (SUBSTR (v_rowcnt.COLUMN_VALUE,
                                       INSTR (v_rowcnt.COLUMN_VALUE,
                                              '~',
                                              1,
                                              14
                                             )
                                     + 1,
                                     (  INSTR (v_rowcnt.COLUMN_VALUE,
                                               '~',
                                               1,
                                               15
                                              )
                                      - INSTR (v_rowcnt.COLUMN_VALUE,
                                               '~',
                                               1,
                                               14
                                              )
                                      - 1
                                     )
                                    )
                            )
                       INTO v_siebelid
                       FROM DUAL;

                         --modified on 26/04/2010 for R1. billing_code is the last
                    --parameter in billingdetails string
--                        SELECT (SUBSTR (v_rowcnt.COLUMN_VALUE,
--                                          INSTR (v_rowcnt.COLUMN_VALUE,
--                                                 '~',
--                                                 1,
--                                                 16
--                                                )
--                                        + 1,
--                                        (  INSTR (v_rowcnt.COLUMN_VALUE,
--                                                  '~',
--                                                  1,
--                                                  17
--                                                 )
--                                         - INSTR (v_rowcnt.COLUMN_VALUE,
--                                                  '~',
--                                                  1,
--                                                  16
--                                                 )
--                                         - 1
--                                        )
--                                       )
--                               )
--                          INTO v_bicode
--                          FROM DUAL;

                     ----------------------RRRRRRRRRRRRRRRRRRRRR 1111111111111111111111111111111 Starts-- The above query also modified a bit
                     SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                      INSTR (v_rowcnt.COLUMN_VALUE, '~', 1,
                                             15)
                                    + 1,
                                    (  INSTR (v_rowcnt.COLUMN_VALUE,
                                              '~',
                                              1,
                                              16
                                             )
                                     - INSTR (v_rowcnt.COLUMN_VALUE,
                                              '~',
                                              1,
                                              15
                                             )
                                     - 1
                                    )
                                   )
                       INTO v_bbillcontaccountname
                       FROM DUAL;

                     SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                      INSTR (v_rowcnt.COLUMN_VALUE, '~', 1,
                                             16)
                                    + 1,
                                    (  INSTR (v_rowcnt.COLUMN_VALUE,
                                              '~',
                                              1,
                                              17
                                             )
                                     - INSTR (v_rowcnt.COLUMN_VALUE,
                                              '~',
                                              1,
                                              16
                                             )
                                     - 1
                                    )
                                   )
                       INTO v_bbillconttitle
                       FROM DUAL;

                     SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                      INSTR (v_rowcnt.COLUMN_VALUE, '~', 1,
                                             17)
                                    + 1,
                                    (  INSTR (v_rowcnt.COLUMN_VALUE,
                                              '~',
                                              1,
                                              18
                                             )
                                     - INSTR (v_rowcnt.COLUMN_VALUE,
                                              '~',
                                              1,
                                              17
                                             )
                                     - 1
                                    )
                                   )
                       INTO v_bbillcontmiddlename
                       FROM DUAL;

                     SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                      INSTR (v_rowcnt.COLUMN_VALUE, '~', 1,
                                             18)
                                    + 1,
                                    (  INSTR (v_rowcnt.COLUMN_VALUE,
                                              '~',
                                              1,
                                              19
                                             )
                                     - INSTR (v_rowcnt.COLUMN_VALUE,
                                              '~',
                                              1,
                                              18
                                             )
                                     - 1
                                    )
                                   )
                       INTO v_bbillcontaddress1
                       FROM DUAL;

                     SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                      INSTR (v_rowcnt.COLUMN_VALUE, '~', 1,
                                             19)
                                    + 1,
                                    (  INSTR (v_rowcnt.COLUMN_VALUE,
                                              '~',
                                              1,
                                              20
                                             )
                                     - INSTR (v_rowcnt.COLUMN_VALUE,
                                              '~',
                                              1,
                                              19
                                             )
                                     - 1
                                    )
                                   )
                       INTO v_bbillcontaddress2
                       FROM DUAL;

                     SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                      INSTR (v_rowcnt.COLUMN_VALUE, '~', 1,
                                             20)
                                    + 1,
                                    (  INSTR (v_rowcnt.COLUMN_VALUE,
                                              '~',
                                              1,
                                              21
                                             )
                                     - INSTR (v_rowcnt.COLUMN_VALUE,
                                              '~',
                                              1,
                                              20
                                             )
                                     - 1
                                    )
                                   )
                       INTO v_bbillcontediaddress
                       FROM DUAL;

                     SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                      INSTR (v_rowcnt.COLUMN_VALUE, '~', 1,
                                             21)
                                    + 1,
                                    (  INSTR (v_rowcnt.COLUMN_VALUE,
                                              '~',
                                              1,
                                              22
                                             )
                                     - INSTR (v_rowcnt.COLUMN_VALUE,
                                              '~',
                                              1,
                                              21
                                             )
                                     - 1
                                    )
                                   )
                       INTO v_bbillcontstate
                       FROM DUAL;

                     SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                      INSTR (v_rowcnt.COLUMN_VALUE, '~', 1,
                                             22)
                                    + 1,
                                    (  INSTR (v_rowcnt.COLUMN_VALUE,
                                              '~',
                                              1,
                                              23
                                             )
                                     - INSTR (v_rowcnt.COLUMN_VALUE,
                                              '~',
                                              1,
                                              22
                                             )
                                     - 1
                                    )
                                   )
                       INTO v_bbillingcounty
                       FROM DUAL;

                     SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                      INSTR (v_rowcnt.COLUMN_VALUE, '~', 1,
                                             23)
                                    + 1,
                                    (  INSTR (v_rowcnt.COLUMN_VALUE,
                                              '~',
                                              1,
                                              24
                                             )
                                     - INSTR (v_rowcnt.COLUMN_VALUE,
                                              '~',
                                              1,
                                              23
                                             )
                                     - 1
                                    )
                                   )
                       INTO v_binformationcurrency
                       FROM DUAL;

                     SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                      INSTR (v_rowcnt.COLUMN_VALUE, '~', 1,
                                             24)
                                    + 1,
                                    (  INSTR (v_rowcnt.COLUMN_VALUE,
                                              '~',
                                              1,
                                              25
                                             )
                                     - INSTR (v_rowcnt.COLUMN_VALUE,
                                              '~',
                                              1,
                                              24
                                             )
                                     - 1
                                    )
                                   )
                       INTO v_bbillperiod
                       FROM DUAL;

                     SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                      INSTR (v_rowcnt.COLUMN_VALUE, '~', 1,
                                             25)
                                    + 1,
                                    (  INSTR (v_rowcnt.COLUMN_VALUE,
                                              '~',
                                              1,
                                              26
                                             )
                                     - INSTR (v_rowcnt.COLUMN_VALUE,
                                              '~',
                                              1,
                                              25
                                             )
                                     - 1
                                    )
                                   )
                       INTO v_bpaymentmethod
                       FROM DUAL;

                     SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                      INSTR (v_rowcnt.COLUMN_VALUE, '~', 1,
                                             26)
                                    + 1,
                                    (  INSTR (v_rowcnt.COLUMN_VALUE,
                                              '~',
                                              1,
                                              27
                                             )
                                     - INSTR (v_rowcnt.COLUMN_VALUE,
                                              '~',
                                              1,
                                              26
                                             )
                                     - 1
                                    )
                                   )
                       INTO v_bpaymentdays
                       FROM DUAL;

                     SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                      INSTR (v_rowcnt.COLUMN_VALUE, '~', 1,
                                             27)
                                    + 1,
                                    (  INSTR (v_rowcnt.COLUMN_VALUE,
                                              '~',
                                              1,
                                              28
                                             )
                                     - INSTR (v_rowcnt.COLUMN_VALUE,
                                              '~',
                                              1,
                                              27
                                             )
                                     - 1
                                    )
                                   )
                       INTO v_bustouching
                       FROM DUAL;

                     SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                      INSTR (v_rowcnt.COLUMN_VALUE, '~', 1,
                                             28)
                                    + 1,
                                    (  INSTR (v_rowcnt.COLUMN_VALUE,
                                              '~',
                                              1,
                                              29
                                             )
                                     - INSTR (v_rowcnt.COLUMN_VALUE,
                                              '~',
                                              1,
                                              28
                                             )
                                     - 1
                                    )
                                   )
                       INTO v_binvlang
                       FROM DUAL;

                     v_findtilt := INSTR (v_binvlang, '~');

                     IF v_findtilt > 0
                     THEN
                        v_binvlang := SUBSTR (v_binvlang, 1, v_findtilt - 1);
                     END IF;

                     --modified on 26/04/2010 for R1. billing_code is the last
                     --parameter in billingdetails string
                      BEGIN
                        SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                         INSTR (v_rowcnt.COLUMN_VALUE,
                                                '~',
                                                1,
                                                29
                                               )
                                       + 1,
                                       LENGTH (v_rowcnt.COLUMN_VALUE) - 1
                                      )
                          INTO v_bicode
                          FROM DUAL;
                     EXCEPTION
                        WHEN OTHERS
                        THEN
                           SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                            INSTR (v_rowcnt.COLUMN_VALUE,
                                                   '~',
                                                   1,
                                                   29
                                                  )
                                          + 1,
                                          (  INSTR (v_rowcnt.COLUMN_VALUE,
                                                    '~',
                                                    1,
                                                    30
                                                   )
                                           - INSTR (v_rowcnt.COLUMN_VALUE,
                                                    '~',
                                                    1,
                                                    29
                                                   )
                                           - 1
                                          )
                                         )
                             INTO v_bicode
                             FROM DUAL;

                           SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                            INSTR (v_rowcnt.COLUMN_VALUE,
                                                   '~',
                                                   1,
                                                   30
                                                  )
                                          + 1,
                                          LENGTH (v_rowcnt.COLUMN_VALUE) - 1
                                         )
                             INTO v_bfgbillaccid
                             FROM DUAL;
                     END;

                     v_findtilt := INSTR (v_bicode, '~');

                     IF v_findtilt > 0
                     THEN
                        SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                         INSTR (v_rowcnt.COLUMN_VALUE,
                                                '~',
                                                1,
                                                29
                                               )
                                       + 1,
                                       (  INSTR (v_rowcnt.COLUMN_VALUE,
                                                 '~',
                                                 1,
                                                 30
                                                )
                                        - INSTR (v_rowcnt.COLUMN_VALUE,
                                                 '~',
                                                 1,
                                                 29
                                                )
                                        - 1
                                       )
                                      )
                          INTO v_bicode
                          FROM DUAL;

                        SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                         INSTR (v_rowcnt.COLUMN_VALUE,
                                                '~',
                                                1,
                                                30
                                               )
                                       + 1,
                                       LENGTH (v_rowcnt.COLUMN_VALUE) - 1
                                      )
                          INTO v_bfgbillaccid
                          FROM DUAL;
                     END IF;


-----Last should be like below
/*
 SELECT (SUBSTR (v_rowcnt.COLUMN_VALUE,
                                  INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 29)
                                  + 1,
                                  LENGTH (v_rowcnt.COLUMN_VALUE) - 1
                                 )
                         )
                    INTO v_siebelid
                    FROM DUAL;

*/
                     SELECT contact_id.NEXTVAL
                       INTO v_bcontactid
                       FROM DUAL;

                     SELECT address_id.NEXTVAL
                       INTO v_baddressid
                       FROM DUAL;

                     SELECT account_id.NEXTVAL
                       INTO v_bacctid
                       FROM DUAL;

                     --added for R1
                     INSERT INTO contact
                                 (contact_id, first_name, last_name,
                                  phone_number, email, created_date,
                                  contact_type,
                                  created_by, middle_name,
                                  title
                                 )
                          VALUES (v_bcontactid, v_bfname, v_blname,
                                  v_bphno, v_bemail, SYSDATE,
                                  pkg_constants.con_billingcontact,
                                  in_modifiedby, v_bbillcontmiddlename,
                                  v_bbillconttitle
                                 );

--                        INSERT INTO contact
--                                    (contact_id, first_name, last_name,
--                                     phone_number, email, created_date,
--                                     contact_type,
--                                     created_by
--                                    )
--                             VALUES (v_bcontactid, v_bfname, v_blname,
--                                     v_bphno, v_bemail, SYSDATE,
--                                     pkg_constants.con_billingcontact,
--                                     in_modifiedby
--                                    );
                     INSERT INTO customer_contact
                                 (customer_contact_id, customer_id,
                                  contact_id, created_date, created_by
                                 )
                          VALUES (customer_contact_id.NEXTVAL, in_cid,
                                  v_bcontactid, SYSDATE, in_modifiedby
                                 );

                     --Added For R1
                     INSERT INTO address
                                 (address_id, country_id, street_number,
                                  city, post_zip_code, created_date,
                                  created_by, county,
                                  state, address_line1,
                                  address_line2
                                 )
                          VALUES (v_baddressid, v_bcntryid, v_bstrtno,
                                  v_bcity, v_bzip, SYSDATE,
                                  in_modifiedby, v_bbillingcounty,
                                  v_bbillcontstate, v_bbillcontaddress1,
                                  v_bbillcontaddress2
                                 );

--                        INSERT INTO address
--                                    (address_id, country_id, street_number,
--                                     city, post_zip_code, created_date,
--                                     created_by
--                                    )
--                             VALUES (v_baddressid, v_bcntryid, v_bstrtno,
--                                     v_bcity, v_bzip, SYSDATE,
--                                     in_modifiedby
--                                    );
                     INSERT INTO ACCOUNT
                                 (account_id, account_number, bank_code,
                                  branch_code, control_code, created_date,
                                  created_by
                                 )
                          VALUES (v_bacctid, v_bacctno, v_bcode,
                                  v_branch, v_bctrl, SYSDATE,
                                  in_modifiedby
                                 );

                     --This is executed only when a new billing record is added generate new Billing Code
                     IF (v_bicode = '-1')
                     THEN
                        BEGIN
                           --Find max billing code for the customer(when null its 1)
                           SELECT TO_NUMBER
                                          (NVL (  MAX (TO_NUMBER (billing_code)
                                                      )
                                                + 1,
                                                1
                                               )
                                          )
                             INTO v_bilcode
                             FROM billing
                            WHERE customer_id = in_cid;

                           SELECT LENGTH (v_bilcode)
                             INTO v_lenbil
                             FROM DUAL;

                           v_bicode := NULL;

                           --Total Length of Billing Code is 9 , this logic calculated number of '0' to be appended
                           -- to generate the billing code
                           LOOP
                              EXIT WHEN i = (9 - v_lenbil) + 1;
                              v_bicode := v_bicode || '0';
                              i := i + 1;
                           END LOOP;

                           i := 1;
                           v_bicode := v_bicode || v_bilcode;
                        END;
                     END IF;

                     --Modified For R1
                     INSERT INTO billing
                                 (billing_id, address_id, customer_id,
                                  account_id, contact_id,
                                                         --currency_id
                                                         currency,
                                  activation_date, invoice_period,
                                  created_date, siebel_id, created_by,
                                  billing_code, information_currency,
                                  bill_period, payment_method,
                                  payment_days, us_touching_scenario,
                                  inv_lang, account_name,
                                  edi_address, bfg_bill_account_id
                                 )
                          VALUES (billing_id.NEXTVAL, v_baddressid, in_cid,
                                  v_bacctid, v_bcontactid,
                                                          --v_bcurid
                                                          v_bcurrency,
                                  v_bactdt, v_binvprd,
                                  SYSDATE, v_siebelid, in_modifiedby,
                                  v_bicode, v_binformationcurrency,
                                  v_bbillperiod, v_bpaymentmethod,
                                  v_bpaymentdays, v_bustouching,
                                  v_binvlang, v_bbillcontaccountname,
                                  v_bbillcontediaddress, v_bfgbillaccid
                                 );
--                        INSERT INTO billing
--                                    (billing_id, address_id,
--                                     customer_id, account_id, contact_id,
--                                     --currency_id
--                                     currency, activation_date,
--                                     invoice_period, created_date, siebel_id,
--                                     created_by, billing_code
--                                    )
--                             VALUES (billing_id.NEXTVAL, v_baddressid,
--                                     in_cid, v_bacctid, v_bcontactid,
--                                     --v_bcurid
--                                     v_bcurrency, v_bactdt,
--                                     v_binvprd, SYSDATE, v_siebelid,
--                                     in_modifiedby, v_bicode
--                                    );
                  END LOOP;

                  IF v_sitebillcodeu.COUNT > 0
                  -- Modified by Syed. Update only if there are billing ids mapped to site.
                  THEN
                     BEGIN
                        FOR i IN 1 .. v_sitebillcodeu.LAST
                        LOOP
                           UPDATE site
                              SET billing_id =
                                     (SELECT billing_id
                                        FROM billing
                                       WHERE billing_code =
                                                SUBSTR
                                                   (v_sitebillcodeu (i),
                                                      INSTR
                                                          (v_sitebillcodeu (i),
                                                           '-'
                                                          )
                                                    + 1
                                                   )
                                         AND customer_id = in_cid)
                            WHERE site_id =
                                     SUBSTR (v_sitebillcodeu (i),
                                             1,
                                               INSTR (v_sitebillcodeu (i),
                                                      '-',
                                                      1
                                                     )
                                             - 1
                                            );
                        END LOOP;
                     END;
                  END IF;
               END;
            END IF;                                   --end of billing id null
         END;
      END IF;
   END;

   /*COMMIT; commented by Jay */

   IF (out_status IS NULL)
   THEN
      out_status := pkg_constants.con_status_success;
   END IF;
EXCEPTION
   WHEN OTHERS
   THEN
      out_status := pkg_constants.con_status_failure;
      out_errmsg := SUBSTR (SQLERRM, 1, 150);
      /*ROLLBACK; commented by Jay*/
      -- Added by Mini on 23/11/2010 as part of exception handling
      v_sql_code := SQLCODE;
      pkg_common.spi_error_log (NULL,
                                NULL,
                                NULL,
                                NULL,
                                'PKG_CUSTOMER',
                                'SPU_CUSTOMER',
                                v_sql_code,
                                out_errmsg
                               );
END spu_customer;



   PROCEDURE spi_vpn_newcustomers (
      in_custid    IN       vpn_customers.customer_id%TYPE,
      in_vpncust   IN       vpn_newcustomers_tbl,
      in_vpn_id    IN       VARCHAR2,
      out_status   OUT      NUMBER,
      out_errmsg   OUT      VARCHAR2
   )
   AS
/******************************************************************************
   Usage Product Name:IVPN
   PURPOSE: For creating the VPN customer.

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0         22/8/00		Suman							1.0 Add History Comment for  this procedure
  ******************************************************************************/
   BEGIN
      DELETE FROM vpn_customers
            WHERE customer_id = in_custid AND vpn_id = in_vpn_id;

      FOR i IN in_vpncust.FIRST .. in_vpncust.LAST
      LOOP
         IF (in_vpncust (i).vpncustid <> '-1')
         -- IF (in_vpncust (i).vpncustid IS NOT NULL)
         THEN
            INSERT INTO vpn_customers
                        (allowed_customer_id,
                         allowed_customer_name, customer_id,
                         vpn_id, SYSTEM,
                         classic_customer_id
                        )
                 VALUES (in_vpncust (i).vpncustid,
                         in_vpncust (i).vpncustname, in_custid,
                         in_vpncust (i).vpnid, in_vpncust (i).SYSTEM,
                         in_vpncust (i).classiccustomerid
                        );
         END IF;
      END LOOP;

      out_status := pkg_constants.con_status_success;
   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         out_errmsg := substr(SQLERRM,1,150);
         -- Added by Mini on 23/11/2010 as part of exception handling

         v_sql_code := SQLCODE;
         PKG_COMMON.spi_error_log(
                                  NULL,
                                  NULL,
                                  NULL,
                                  NULL,
                                  'PKG_CUSTOMER',
                                  'SPI_VPN_NEWCUSTOMERS',
                                  v_sql_code,
                                  out_errmsg
                                 );

   END spi_vpn_newcustomers;

   ----R4 Modify for BFG and classic billing
   PROCEDURE spi_classic_bfg_billing (
      in_customer_id                billing_bfg_classic.customer_id%TYPE,
      in_classic_billing_id         billing_bfg_classic.classic_billing_id%TYPE,
      in_bfg_billing_id             billing_bfg_classic.bfg_billing_id%TYPE,
      out_status              OUT   NUMBER,
      out_errmsg              OUT   VARCHAR2
   )
   AS
/******************************************************************************
   Usage Product Name:IVPN
   PURPOSE: Select Stmt for the Classis BFG billing.

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0         22/8/00		Suman							1.0 Add History Comment for  this procedure
  ******************************************************************************/
      v_row_exist   INTEGER := 0;

   BEGIN
      SELECT COUNT (1)
        INTO v_row_exist
        FROM billing_bfg_classic
       WHERE customer_id = in_customer_id
         AND classic_billing_id = in_classic_billing_id
         AND bfg_billing_id = in_bfg_billing_id;

      IF v_row_exist = 0
      THEN
         INSERT INTO billing_bfg_classic
                     (bfg_classic_billing_id, customer_id,
                      classic_billing_id, bfg_billing_id
                     )
              VALUES (billing_bfg_classic_id.NEXTVAL, in_customer_id,
                      in_classic_billing_id, in_bfg_billing_id
                     );
      ELSE
         out_status := pkg_constants.con_status_success;

      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         out_errmsg := substr(SQLERRM,1,150);
          -- Added by Mini on 23/11/2010 as part of exception handling

         v_sql_code := SQLCODE;
         PKG_COMMON.spi_error_log(
                                  NULL,
                                  NULL,
                                  NULL,
                                  NULL,
                                  'PKG_CUSTOMER',
                                  'SPI_CLASSIC_BFG_BILLING',
                                  v_sql_code,
                                  out_errmsg
                                 );

   END spi_classic_bfg_billing;

--This sp is created for GHUCS R16 requirement on 13-Jul-2011

PROCEDURE spi_customer_billing (
   in_custid        IN       customer.customer_id%TYPE,
   in_billing_obj   IN       billing_tab,
   in_createdby     IN       customer.created_by%TYPE,
   out_status       OUT      NUMBER,
   out_errmsg       OUT      VARCHAR2
)
IS
/******************************************************************************
   Usage Product Name:IVPN
   PURPOSE: Select Stmt for the SQE billing.

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0         22/8/00		Suman							1.0 Add History Comment for  this procedure
  ******************************************************************************/

   v_rowcount       NUMBER;

BEGIN
   FOR i IN in_billing_obj.FIRST .. in_billing_obj.LAST
   LOOP

      SELECT COUNT (*)
        INTO v_rowcount
        FROM billing
       WHERE customer_id =in_custid
         AND BFG_BILL_ACCOUNT_ID = in_billing_obj (i).o_bfg_bill_account_id;

      IF v_rowcount = 0 THEN

            INSERT INTO billing
                        (billing_id, customer_id,
                         bfg_bill_account_id,
                         account_name,
                         currency, created_date, created_by
                        )
                 VALUES (billing_id.NEXTVAL, in_custid,
                         in_billing_obj (i).o_bfg_bill_account_id,
                         in_billing_obj (i).o_account_name,
                         in_billing_obj (i).o_currency, SYSDATE, in_createdby
                        );
      ELSE

            -- UPDATE
            UPDATE billing set bfg_bill_account_id=in_billing_obj (i).o_bfg_bill_account_id,
                               account_name= in_billing_obj (i).o_account_name,
                               currency=in_billing_obj (i).o_currency,
                               modified_by=in_createdby,
                               modified_date=sysdate
            WHERE customer_id = in_custid
            AND BFG_BILL_ACCOUNT_ID = in_billing_obj (i).o_bfg_bill_account_id;

      END IF;

   END LOOP;

   out_status := pkg_constants.con_status_success;

EXCEPTION
   WHEN OTHERS THEN
      out_status := pkg_constants.con_status_failure;
      out_errmsg := SQLERRM;
      pkg_common.spi_error_log(NULL,
                               NULL,
                               NULL,
                               NULL,
                               'PKG_CUSTOMER',
                               'SPI_CUSTOMER_BILLING',
                               v_sql_code,
                               out_errmsg
                              );
END spi_customer_billing;

END PKG_CUSTOMER;
/


CREATE OR REPLACE PACKAGE BODY pkg_expedio_details
IS
   PROCEDURE sps_expedio_quote_details (
      in_quoteid          IN       quote_header.expedio_quoteid%TYPE,
      in_quoteversion     IN       quote_header.expedio_quoteversion%TYPE,
      in_expediorefid     IN       quote_header.expedio_ref_id%TYPE,
      out_quote_details   OUT      sys_refcursor,
      out_status          OUT      NUMBER,
      out_errmsg          OUT      VARCHAR2
   )
   AS
   BEGIN
      INSERT INTO gtt_sqe_ivpn_exp_quote
                  (quoterefid, customername, customerid, salesorganization,
                   salesrepname, ordertype, quoteversion, quotestatus,
                   quotename, contractterm, bidnumber, siebelid, currency,
                   comments, exprefno, quote_version_status, createddate,
                   created_date, modified_by, modified_date, product_type,
                   currency_id)
         SELECT quoterefid, customername, customerid, salesorganization,
                salesrepname, ordertype, quoteversion, quotestatus,
                quotename, contractterm, bidnumber, siebelid, currency,
                comments, exprefno, quote_version_status, createddate,
                created_date, modified_by, modified_date, product_type,
                currency_id
           FROM ivpn_exp_quote
          WHERE quoterefid = in_quoteid
            AND quoteversion = in_quoteversion
            AND exprefno = in_expediorefid;

      COMMIT;

      ---DBMS_SESSION.close_database_link ('DBLINK_EXPEDIO');
      OPEN out_quote_details FOR
         SELECT DISTINCT ieq.quoterefid, ieq.quoteversion, ieq.quotename,
                         NVL (qs.status, ieq.quotestatus) quotestatus,
                         ieq.contractterm, ieq.currency, ieq.bidnumber,
                         ieq.siebelid, ieq.ordertype, ieq.comments
                    FROM gtt_sqe_ivpn_exp_quote ieq LEFT OUTER JOIN quote_header qh
                         ON ieq.quoterefid = qh.expedio_quoteid
                       AND ieq.quoteversion = qh.expedio_quoteversion
                       AND ieq.exprefno = qh.expedio_ref_id
                         LEFT OUTER JOIN quote_status qs
                         ON qh.quote_header_id = qs.quote_header_id
                       AND UPPER (qs.product_name) = UPPER ('BT IVPN2 GLOBAL')
                         ;

      DELETE FROM gtt_sqe_ivpn_exp_quote;

      COMMIT;
   EXCEPTION
      WHEN NO_DATA_FOUND
      THEN
         out_status := pkg_constants.con_status_failure;
         out_errmsg :=
               'No Data Available for :'
            || in_quoteid
            || ' : '
            || in_quoteversion
            || ' : '
            || in_expediorefid;
         ROLLBACK;
         RAISE;
      WHEN OTHERS
      THEN
         out_errmsg :=
               'No Data Available for :'
            || in_quoteid
            || ' : '
            || in_quoteversion
            || ' : '
            || in_expediorefid
            || '-'
            || SQLCODE
            || '-'
            || SQLERRM;
         out_status := pkg_constants.con_status_failure;
         ROLLBACK;
         RAISE;
   END sps_expedio_quote_details;
END pkg_expedio_details;
/


CREATE OR REPLACE PACKAGE BODY PKG_OFFER
IS
/******************************************************************************
   NAME:     PKG_OFFER
   PURPOSE:  Offer Letter Generation.

   Input Parameters 1. Quote Id and Quote Header Id
                    2.
                    3.

   Output Parameters 1. sys_refcursor for customer related information.
                     2. sys_refcursor for site and lineitem realted information.
                     3. out_status and out_errmsg for error handling.

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        12/20/2009   Srinivasa        1.Package for Offer Letter Generation -> customer and site/lineitem related information.
                                              This package contains discount approvals/Rejects for Sales Users/Bid Mgr and
                                              Exchange rate details for every quote header.
   2.0        08/04/2010   Arpitha          1. Added SPS_OFFERINFO_MODIFY which is used for Modify Journey, as a part of R4 modify
   3.0        08/26/2010   Amit Kumar       1.Added new SP sps_offerinfo_g for GHUCS R5
   4.0        10/28/2010   Amit Kumar       1.Included new columns in the out_productdetals cursor for sps_offerinfo_g
******************************************************************************/
   PROCEDURE sps_offerinfo (
      in_quoteid           IN       quote.quote_id%TYPE,
      in_quoteheaderid     IN       quote_header.quote_header_id%TYPE,
      out_custdetails      OUT      sys_refcursor,
      out_sitedetails      OUT      sys_refcursor,
      out_serviceoption    OUT      sys_refcursor,
      out_qref_caveat      OUT      sys_refcursor,
      -- Commented below param for perf increase as no product is using it -- 8/9/2011
      --out_productdetails   OUT      sys_refcursor,

      -- Added in_product_name on 17/12/2010 as part of introducing new table QUOTE_STATUS
      in_product_name         IN       VARCHAR2 DEFAULT NULL
   )
   AS
   BEGIN
      OPEN out_custdetails FOR
          SELECT  DISTINCT
                  q.quote_id, qh.quote_header_id, q.customer_name, nvl(qs.status,qh.status) status, -- Added on 17/12/2010 as part of using status in quote_status table
                  qh.quote_name, qh.bid_number, qh.VERSION,
                  qh.customer_signed_date, qh.opportunity_id,
                  qpl.price_list_name AS "PRICE_LIST_NAME",
                  qh.contract_term,
                  ps.product_id, ps.product_name AS "PRODUCT_NAME",
                  qh.currency_id AS "currency_id", qh.currency AS "CURRENCY",
                  da.submitted_by AS "DISCOUNT_SUBMITTEDBY",
                  da.approval_status AS "DISCOUNTAPPROVAL_STATUS",
                  da.reason AS "DISCOUNT_REASON",
                  q.created_date AS "QUOTE_CREATED_DATE",
                  qh.capcheck_refno,
                  bt.NAME AS "SUBSIDIARY",
                  cp.ptp_price_book_version AS "PTP_PRICE_BOOK_VERSION",
                  -- Added on 25/7/2011 - Start
                  c.user_first_name||c.user_last_name "Sales_User_Name",
                  c.user_email "Email",
                  c.user_ein "EIN",
                  addr.building_number "Building_Number",
                  addr.address_line1 "Address1",
                  addr.address_line2 "Address2",
                  addr.city "City",
                  addr.county "County",
                  addr.state "State_Province",
                  addr.post_zip_code "Zip_Post_Code"
                  -- Added on 25/7/2011 - End
             FROM quote q LEFT OUTER JOIN quote_header qh
                  ON q.quote_id = qh.quote_id
                  -- Added on 17/12/2010 as part of using status in quote_status table
                  LEFT OUTER JOIN quote_status qs
                  ON qh.quote_header_id = qs.quote_header_id
                  AND qs.product_name = in_product_name
                  LEFT OUTER JOIN customer c
                  ON c.customer_id = q.customer_id
                  LEFT OUTER JOIN bt_subsidiary bt
                  ON c.bt_subsidiary_id = bt.bt_subsidiary_id
                  -- Added on 25/7/2011 - Start
                  LEFT OUTER JOIN quote_site qtst
                  ON qtst.quote_header_id = qh.quote_header_id
                  LEFT OUTER JOIN site s
                  ON qtst.site_id = s.site_id
                  LEFT OUTER JOIN address addr
                  ON s.address_id = addr.address_id
                  -- Added on 25/7/2011 - End
                  LEFT OUTER JOIN quote_price_list qpl
                  ON qh.quote_header_id = qpl.quote_header_id
                  LEFT OUTER JOIN customer_product cp
                  ON qh.quote_header_id = cp.quote_header_id
                  LEFT OUTER JOIN product_selection ps
                  ON qh.quote_id = ps.quote_id
                  LEFT OUTER JOIN discount_approval da
                  ON qh.quote_header_id = da.quote_header_id
                  AND da.active = pkg_constants.con_activeflag_yes
                  AND ps.active = pkg_constants.con_activeflag_yes
            WHERE q.quote_id = in_quoteid
              AND qh.quote_header_id = in_quoteheaderid
              AND ps.active = pkg_constants.con_activeflag_yes
              -- Added on 25/7/2011 - Start
              AND NVL (s.main_site_flag, '-1') !=
                                              pkg_constants.con_activeflag_yes
              AND qtst.active = pkg_constants.con_activeflag_yes
              -- Added on 25/7/2011 - End
         ORDER BY customer_name;

    -- Commented below param for perf increase as no product is using it -- 8/9/2011
    --Begins  Ghucs,added new  refcursor out_productdetails to display the product details.
    /*  OPEN out_productdetails FOR
         SELECT   'Hosted IPT Service' AS "Product Name",
                  lm.product_name AS "Product Variant",
                  NVL (ld.quantity, 1) AS "LINE_ITEM_QUANTITY",
                  pd.price AS "LINE_ITEM_DETAIL_PRICE",
                  pd.rent_price AS "RENTAL PRICE", qs.site_id AS "SITE ID",
                  lm.product_id AS "Product Id",                       --GHUCS
                  ad.building_number AS "BUILDING NUMBER", ad.city AS "CITY",
                  ad.state AS "STATE", ad.post_zip_code AS "POST ZIP CODE",
                  ad.address_line1 AS "ADDRESS LINE1",
                  pd.discount AS "DISCOUNT", lm.priced AS "PRICED FLAG"
             FROM quote q LEFT OUTER JOIN quote_header qh
                  ON q.quote_id = qh.quote_id
                  LEFT OUTER JOIN quote_site qs
                  ON qh.quote_header_id = qs.quote_header_id
                  INNER JOIN site s ON qs.site_id = s.site_id
                  --Joined Address AND Country tables to fetch the address details
                  LEFT OUTER JOIN address ad ON s.address_id = ad.address_id
                  LEFT OUTER JOIN country cu ON ad.country_id = cu.country_id
                  INNER JOIN line_item lm
                  ON s.site_id = lm.site_id
                AND lm.quote_header_id = in_quoteheaderid
                  INNER JOIN line_item_detail ld
                  ON lm.line_item_id = ld.line_item_id
                  LEFT OUTER JOIN attribute_mapping am
                  ON ld.attribute_mapping_id = am.attribute_mapping_id
                  LEFT OUTER JOIN price_line_item_detail pd
                  ON lm.line_item_id = pd.line_item_id
                  LEFT OUTER JOIN price_line_item pl
                  ON pd.price_line_item_id = pl.price_line_item_id
            WHERE q.quote_id = in_quoteid
              AND qh.quote_header_id = in_quoteheaderid
              AND (qs.active = pkg_constants.con_activeflag_yes)
              AND (lm.active = pkg_constants.con_activeflag_yes)
              AND (ld.active = pkg_constants.con_activeflag_yes)
              AND (   pd.active = pkg_constants.con_activeflag_yes
                   OR pd.active IS NULL
                  )
              --modified by Tanmayi on 15/09/2010 for Central Site R5
              AND NVL (s.main_site_flag, '-1') !=
                                              pkg_constants.con_activeflag_yes
         ORDER BY ld.line_item_detail_id, lm.product_name; */

      -- Ends Ghucs,added new  refcursor out_productdetails to display the product details.
      OPEN out_sitedetails FOR
         SELECT UNIQUE q.quote_id, qh.quote_header_id, s.site_id,
                       s.NAME AS "SITE_NAME", cu.NAME AS "COUNTRY",
                       s.resilience AS "RESILIENCE_TYPE",
                       qs.active AS "SITE_ACTIVE", lm.product_id,
                       lm.product_name, lm.active AS "LINE_ITEM_ACTIVE",
                       lm.currency AS "LINE_ITEM_CURRENCY", lm.fallback_type,
                       lm.quantity AS "LINE_ITEM_QUANTITY", lm.priced,
                       lm.part_type, pd.row_id, aq.access_qref,
                       aq.pricing_status, aq.port_status,          --904 added
                                                         aq.nni_flag,
                       ad.address_line1, aq.apop_node, aq.gpop_node,
                       aq.gpop_id, aq.apop_id,
                       cq.pri_status AS "CPE_QREF_PRISTATUS",
                       cq.sec_status AS "CPE_QREF_SECSTATUS",
                       ld.line_item_detail_id,
                       ld.active AS "LINE_ITEM_DETAILS_ACTIVE",
                       am.attribute_mapping_id, am.sqe_display_text,
                       am.active AS "ATTRIBUTE_ACTIVE", am.attribute_level,
                       ld.VALUE AS "ATTRIBUTE_VALUE",
                       pd.currency AS "PRICE_CURRENCY",
                       pd.charge_type AS "DOMAIN", pd.discount,
                       pd.active AS "PRICE_LINE_ITEM_ACTIVE",
                       pl.price_line_item_id, pd.price_line_item_detail_id,
                       pl.price_line_description,
                       pd.price AS "LINE_ITEM_DETAIL_PRICE", pd.external_qref,
                       pd.onetime_port_discount, pd.recurring_port_discount,
                       cd.COST AS "COST", cd.cost_type AS "COST_TYPE",
                       cd.currency AS "COST_CURRENCY",
                       pd.net_price "NET_PRICE",
                                                /* Added the below three for Production defect BH420954 on 11Aug2010*/
                                                aq.supplier, aq.gpop_node,
                       aq.lead_time, support_24x7,
                       pd.approved_disc AS "Approved Discount",
                           -- added by Bijeta for approved discount req in R7
                       pd.ptp_eup,ad.city,/* Added City column for defect id 87042 on 18th December 2010*/
                       -- Added the below on 5/9/2011
                       pd.discount_requested AS "Requested Discount"
                  FROM quote q LEFT OUTER JOIN quote_header qh
                       ON q.quote_id = qh.quote_id
                       LEFT OUTER JOIN quote_site qs
                       ON qh.quote_header_id = qs.quote_header_id
                       INNER JOIN site s ON qs.site_id = s.site_id
                       LEFT OUTER JOIN address ad ON s.address_id =
                                                                 ad.address_id
                       LEFT OUTER JOIN country cu
                       ON ad.country_id = cu.country_id
                       LEFT OUTER JOIN line_item lm
                       ON s.site_id = lm.site_id
                     AND (lm.active = pkg_constants.con_activeflag_yes)
                     AND lm.quote_header_id = in_quoteheaderid
                       LEFT OUTER JOIN line_item_detail ld
                       ON lm.line_item_id = ld.line_item_id
                     AND (ld.active = pkg_constants.con_activeflag_yes)
                       LEFT OUTER JOIN attribute_mapping am
                       ON ld.attribute_mapping_id = am.attribute_mapping_id
                       LEFT OUTER JOIN price_line_item_detail pd
                       ON lm.line_item_id = pd.line_item_id
                     AND (pd.active = pkg_constants.con_activeflag_yes)
                       LEFT OUTER JOIN access_qref aq
                       ON aq.quote_site_id = qs.quote_site_id
                     AND aq.access_qref = pd.external_qref
                       LEFT OUTER JOIN cpe_qref cq
                       ON cq.quote_site_id = qs.quote_site_id
                     AND (   cq.cpe_qref = pd.external_qref
                          OR cq.secondary_cpe_qref = pd.external_qref
                         )
                       LEFT OUTER JOIN price_line_item pl
                       ON pd.price_line_item_id = pl.price_line_item_id
                       LEFT OUTER JOIN cost_detail cd
                       ON cd.price_line_item_detail_id =
                                                  pd.price_line_item_detail_id
                     AND (COST != 0)                                    --Syed
                 WHERE q.quote_id = in_quoteid
                   AND qh.quote_header_id = in_quoteheaderid
                   AND (qs.active = pkg_constants.con_activeflag_yes)
                   --modified by Tanmayi on 15/09/2010 for Central Site R5
                   AND NVL (s.main_site_flag, '-1') !=
                                              pkg_constants.con_activeflag_yes
              --    AND (lm.active = pkg_constants.con_activeflag_yes)
              --    AND (ld.active = pkg_constants.con_activeflag_yes)

                ORDER BY s.site_id,
                       lm.product_name,
                       lm.fallback_type,
                       am.attribute_mapping_id,
                       pd.row_id;

      /*Added the below cursor for
      904 Order Site to Site SLA */
      OPEN out_serviceoption FOR
         SELECT am.sqe_attribute "Report Name", lid.VALUE "Selected or not",
                lid.quantity "Quantity", li.line_item_id "Line_Item_Id",
                plid.price, plid.discount, plid.price_line_item_id,
                plid.charge_type, price_line_item_detail_id
           FROM quote_header qh,
                line_item li,
                line_item_detail lid,
                attribute_mapping am,
                price_line_item_detail plid
          WHERE qh.quote_header_id = in_quoteheaderid
            AND li.quote_header_id = qh.quote_header_id
            AND lid.line_item_id = li.line_item_id
            AND lid.attribute_mapping_id = 501
            AND am.attribute_mapping_id = lid.attribute_mapping_id
            AND lid.active = pkg_constants.con_activeflag_yes
            AND plid.line_item_id(+) = li.line_item_id
            AND plid.active(+) = pkg_constants.con_activeflag_yes;

     OPEN out_qref_caveat FOR
              SELECT DISTINCT s.NAME AS site_name, aq.access_qref AS access_qref,
                          ac.caveat_id AS access_caveat_id,
                          ac.description AS description, ac.caveat_id
                     FROM quote q LEFT OUTER JOIN quote_header qh
                          ON q.quote_id = qh.quote_id
                          LEFT OUTER JOIN quote_site qs
                          ON qh.quote_header_id = qs.quote_header_id
                          INNER JOIN site s ON qs.site_id = s.site_id
                          LEFT OUTER JOIN access_qref aq
                          ON qs.quote_site_id = aq.quote_site_id
                          INNER JOIN price_line_item_detail plid
                          ON plid.external_qref = aq.access_qref
                          LEFT OUTER JOIN access_caveat ac
                          ON ac.access_qref_id = aq.access_qref_id
                    WHERE q.quote_id = in_quoteid
                      AND qh.quote_header_id = in_quoteheaderid
                      AND (qs.active = pkg_constants.con_activeflag_yes)
                      AND (plid.active = pkg_constants.con_activeflag_yes)
                      --modified by Tanmayi on 15/09/2010 for Central Site R5
                      AND NVL (s.main_site_flag, '-1') !=
                                                  pkg_constants.con_activeflag_yes
          UNION
          SELECT DISTINCT s.NAME AS site_name, NULL AS access_qref,
                          gc.caveat_id AS access_caveat_id,
                          gc.description AS description, gc.caveat_id
                     FROM quote_header qh,
                          quote_site qs,
                          site s,
                          generic_caveat gc
                    WHERE qh.quote_header_id = in_quoteheaderid
                      AND qs.quote_header_id = qh.quote_header_id
                      AND s.site_id = qs.site_id
                      AND qs.active = pkg_constants.con_activeflag_yes
                  AND gc.quote_site_id = qs.quote_site_id;

   END sps_offerinfo;

   /*Start : New SP Added by Amit for GHUCS R5*/
   PROCEDURE sps_offerinfo_g (
      in_quoteid           IN       quote.quote_id%TYPE,
      in_quoteheaderid     IN       quote_header.quote_header_id%TYPE,
      out_custdetails      OUT      sys_refcursor,
      out_sitedetails      OUT      sys_refcursor,
      out_serviceoption    OUT      sys_refcursor,
      out_qref_caveat      OUT      sys_refcursor,
      out_productdetails   OUT      sys_refcursor,
-- Added new OUT parameter out_productdetails1 for GHUCS by Amit on 6-Aug-2010
      -- Added in_product_name on 17/12/2010 as part of introducing new table QUOTE_STATUS
      in_product_name       IN    VARCHAR2 DEFAULT NULL,
      in_cust_id            IN     customer.customer_id%TYPE, --Added by Khader for R16 GHUCS
      in_currency           IN     quote_header.currency%TYPE, --Added by Khader for R16 GHUCS
      out_billingdetails    OUT      sys_refcursor              --Added by Khader for R16 GHUCS
   )
   AS
   BEGIN
      OPEN out_custdetails FOR
         SELECT   q.quote_id, qh.quote_header_id, q.customer_name, nvl(qs.status,qh.status) status, --Added on 17/12/2010 as part of using status in quote_status table
                  qh.quote_name, qh.bid_number, qh.VERSION,
                  qh.customer_signed_date, qh.opportunity_id,

                  -- ##### Change for 904 - Multiple Price Book  begin
                  --pl.price_list AS "PRICE_LIST",
                  qpl.price_list_name AS "PRICE_LIST_NAME",
                                                           -- ##### Change for 904 - Multiple Price Book  end
                                                           qh.contract_term,
                  ps.product_id, ps.product_name AS "PRODUCT_NAME",
                  qh.currency_id AS "currency_id", qh.currency AS "CURRENCY",
                  da.submitted_by AS "DISCOUNT_SUBMITTEDBY",
                  da.approval_status AS "DISCOUNTAPPROVAL_STATUS",
                  da.reason AS "DISCOUNT_REASON",

                  -- ##### Change for 904 - Quote Tool Functionality - Discount  begin
                  q.created_date AS "QUOTE_CREATED_DATE",
                  q.order_type AS "Order Type",    -- Added by amit for GHUCS R7 on 08-OCT-10
                                                         -- ##### Change for 904 - Quote Tool Functionality - Discount  end
                                                         qh.capcheck_refno,
                  bt.NAME AS "SUBSIDIARY"                         --Added 904
             FROM quote q LEFT OUTER JOIN quote_header qh
                  ON q.quote_id = qh.quote_id
                  -- Added on 17/12/2010 as part of using status in quote_status table
                  LEFT OUTER JOIN quote_status qs
          ON qh.quote_header_id = qs.quote_header_id
                  AND qs.product_name = in_product_name
                  LEFT OUTER JOIN customer c ON c.customer_id = q.customer_id
                  LEFT OUTER JOIN bt_subsidiary bt
                  ON c.bt_subsidiary_id = bt.bt_subsidiary_id
                  LEFT OUTER JOIN quote_price_list qpl
                  ON qh.quote_header_id = qpl.quote_header_id
                  LEFT OUTER JOIN product_selection ps
                  ON qh.quote_id = ps.quote_id
                  LEFT OUTER JOIN discount_approval da
                  ON qh.quote_header_id = da.quote_header_id
                AND da.active = pkg_constants.con_activeflag_yes
            WHERE q.quote_id = in_quoteid
              AND qh.quote_header_id = in_quoteheaderid
              --added by tanmayi on 03/08/2010 for R5
              AND ps.active = pkg_constants.con_activeflag_yes
         ORDER BY customer_name;
     -- Select modified by Sandeep for GHUCS R7 on 08-Oct-10
      OPEN out_productdetails FOR
         SELECT DISTINCT 'HIPT - GLOBAL' AS "Product Name",
                    CASE when ld.line_item_description is null and
                              ld.attribute_mapping_id = 2107 then
                              upper(am.sqe_attribute)
                         else lm.product_name
                         end
                         as "Friendly Name",
                    case when upper(lm.product_name) = upper(am.sqe_attribute) or
                              ld.attribute_mapping_id = 2107 then
                              '-'
                         else upper(am.sqe_attribute)
                         end as "Attribute Name",
                         ld.VALUE AS "Value",
                         am.attribute_mapping_id AS "Attribute ID",
                         NVL (ld.quantity, 1) AS "LINE_ITEM_QUANTITY",
                         pd.price AS "LINE_ITEM_DETAIL_PRICE",
                         pd.rent_price AS "RENTAL PRICE",
                         qs.site_id AS "SITE ID",
                         lm.product_id AS "Product Id",
                         ad.building_number AS "BUILDING NUMBER",
                         ad.city AS "CITY", ad.state AS "STATE",
                         ad.post_zip_code AS "POST ZIP CODE",
                         ad.address_line1 AS "ADDRESS LINE1",
                         pd.discount AS "DISCOUNT",
                         ld.priced_flag AS "PRICED FLAG",
                         LD.ACTION_CODE AS "Action Code",--Added by Amit For GHUCS MODIFY R7
                         ld.line_item_detail_id, lm.product_name,pl.price_line_description,pd.price_line_item_id,
             NVL(pd.pln_inventory_id,-1)"PLN INVENTORY ID",ld.row_id        -- Added by Amit for GHUCS R7 on 10/28/2010
               ,ld.max_qty "max qty" --Added by Nagendra for R16 Max qty requirement on 3/07/2011
                ,pd.Billing_id AS "Billing id",               /*START: Added by Khader for GHUCS R16 */
                pd.Billing_reference_name AS "Billing reference name",
                to_char(pd.Billing_start_date,'DD-MON-YYYY') AS "Billing start date",
                to_char(pd.Billing_end_date,'DD-MON-YYYY') AS  "Billing end date"   /* END: Added by Khader FOR GHUCS R16 */
                    FROM quote q LEFT OUTER JOIN quote_header qh
                         ON q.quote_id = qh.quote_id
                         LEFT OUTER JOIN quote_site qs
                         ON qh.quote_header_id = qs.quote_header_id
                         INNER JOIN site s ON qs.site_id = s.site_id
                         --Joined Address And Country tables to fetch the address details
                         LEFT OUTER JOIN address ad
                         ON s.address_id = ad.address_id
                         LEFT OUTER JOIN country cu
                         ON ad.country_id = cu.country_id
                         INNER JOIN line_item lm
                         ON s.site_id = lm.site_id
                       AND lm.quote_header_id = in_quoteheaderid
                         INNER JOIN line_item_detail ld
                         ON lm.line_item_id = ld.line_item_id
                         LEFT OUTER JOIN attribute_mapping am
                         ON ld.attribute_mapping_id = am.attribute_mapping_id
                         LEFT OUTER JOIN price_line_item_detail pd
                         ON lm.line_item_id = pd.line_item_id
                       AND ld.line_item_detail_id = pd.line_item_detail_id
                         LEFT OUTER JOIN price_line_item pl
                         ON pd.price_line_item_id = pl.price_line_item_id
                   WHERE q.quote_id = in_quoteid
                     AND qh.quote_header_id = in_quoteheaderid
                     AND (qs.active = pkg_constants.con_activeflag_yes)
                     AND (lm.active = pkg_constants.con_activeflag_yes)
                     AND (ld.active = pkg_constants.con_activeflag_yes)
                     AND (   pd.active = pkg_constants.con_activeflag_yes
                          OR pd.active IS NULL
                         )
                ORDER BY ld.line_item_detail_id, lm.product_name;

      OPEN out_sitedetails FOR
         SELECT UNIQUE q.quote_id, qh.quote_header_id, s.site_id,
                       s.NAME AS "SITE_NAME", cu.NAME AS "COUNTRY",
                       s.resilience AS "RESILIENCE_TYPE",
                       qs.active AS "SITE_ACTIVE", lm.product_id,
                       lm.product_name, lm.active AS "LINE_ITEM_ACTIVE",
                       lm.currency AS "LINE_ITEM_CURRENCY", lm.fallback_type,
                       lm.quantity AS "LINE_ITEM_QUANTITY", lm.priced,
                       lm.part_type, ld.row_id, aq.access_qref,
                       aq.pricing_status, aq.port_status,          --904 added
                                                         aq.nni_flag,
                       ad.building_number AS "BUILDING NUMBER",
                       ad.city AS "CITY", ad.state AS "STATE",
                       ad.post_zip_code AS "POST ZIP CODE",
                       ad.address_line1 AS "ADDRESS LINE1", aq.apop_node,
                       aq.gpop_node, aq.gpop_id, aq.apop_id,
                       cq.pri_status AS "CPE_QREF_PRISTATUS",
                       cq.sec_status AS "CPE_QREF_SECSTATUS",
                       ld.line_item_detail_id,
                       ld.active AS "LINE_ITEM_DETAILS_ACTIVE",
                       am.attribute_mapping_id, am.sqe_display_text,
                       am.active AS "ATTRIBUTE_ACTIVE", am.attribute_level,
                       ld.VALUE AS "ATTRIBUTE_VALUE",
                       pd.currency AS "PRICE_CURRENCY",
                       pd.charge_type AS "DOMAIN", pd.discount,
                       pd.active AS "PRICE_LINE_ITEM_ACTIVE",
                       pl.price_line_item_id, pd.price_line_item_detail_id,
                       pl.price_line_description,
                       pd.price AS "LINE_ITEM_DETAIL_PRICE", pd.external_qref,
                       pd.onetime_port_discount, pd.recurring_port_discount,
                       cd.COST AS "COST", cd.cost_type AS "COST_TYPE",
                       cd.currency AS "COST_CURRENCY"
                  FROM quote q LEFT OUTER JOIN quote_header qh
                       ON q.quote_id = qh.quote_id
                       LEFT OUTER JOIN quote_site qs
                       ON qh.quote_header_id = qs.quote_header_id
                       INNER JOIN site s ON qs.site_id = s.site_id
                       LEFT OUTER JOIN address ad ON s.address_id =
                                                                 ad.address_id
                       LEFT OUTER JOIN country cu
                       ON ad.country_id = cu.country_id
                       LEFT OUTER JOIN line_item lm
                       ON s.site_id = lm.site_id
                     AND (lm.active = pkg_constants.con_activeflag_yes)
                     AND lm.quote_header_id = in_quoteheaderid
                       LEFT OUTER JOIN line_item_detail ld
                       ON lm.line_item_id = ld.line_item_id
                     AND (ld.active = pkg_constants.con_activeflag_yes)
                       LEFT OUTER JOIN attribute_mapping am
                       ON ld.attribute_mapping_id = am.attribute_mapping_id
                       LEFT OUTER JOIN price_line_item_detail pd
                       ON lm.line_item_id = pd.line_item_id
                     AND (pd.active = pkg_constants.con_activeflag_yes)
                       LEFT OUTER JOIN access_qref aq
                       ON aq.quote_site_id = qs.quote_site_id
                     AND aq.access_qref = pd.external_qref
                       LEFT OUTER JOIN cpe_qref cq
                       ON cq.quote_site_id = qs.quote_site_id
                     AND (   cq.cpe_qref = pd.external_qref
                          OR cq.secondary_cpe_qref = pd.external_qref
                         )
                       LEFT OUTER JOIN price_line_item pl
                       ON pd.price_line_item_id = pl.price_line_item_id
                       LEFT OUTER JOIN cost_detail cd
                       ON cd.price_line_item_detail_id =
                                                  pd.price_line_item_detail_id
                     AND (COST != 0)                                    --Syed
                 WHERE q.quote_id = in_quoteid
                   AND qh.quote_header_id = in_quoteheaderid
                   AND (qs.active = pkg_constants.con_activeflag_yes)
              --    AND (lm.active = pkg_constants.con_activeflag_yes)
              --    AND (ld.active = pkg_constants.con_activeflag_yes)

         ORDER BY      s.site_id,
                       lm.product_name,
                       lm.fallback_type,
                       am.attribute_mapping_id;

      /*Added the below cursor for
      904 Order Site to Site SLA */
      OPEN out_serviceoption FOR
         SELECT am.sqe_attribute "Report Name", lid.VALUE "Selected or not",
                lid.quantity "Quantity", li.line_item_id "Line_Item_Id",
                plid.price, plid.discount, plid.price_line_item_id,
                plid.charge_type, price_line_item_detail_id
           FROM quote_header qh,
                line_item li,
                line_item_detail lid,
                attribute_mapping am,
                price_line_item_detail plid
          WHERE qh.quote_header_id = in_quoteheaderid
            AND li.quote_header_id = qh.quote_header_id
            AND lid.line_item_id = li.line_item_id
            AND lid.attribute_mapping_id = 501
            AND am.attribute_mapping_id = lid.attribute_mapping_id
            AND lid.active = pkg_constants.con_activeflag_yes
            AND plid.line_item_id(+) = li.line_item_id
            AND plid.active(+) = pkg_constants.con_activeflag_yes;

      OPEN out_qref_caveat FOR
         SELECT s.NAME AS site_name, aq.access_qref AS access_qref,
                ac.access_caveat_id AS access_caveat_id,
                ac.description AS description
           FROM quote q LEFT OUTER JOIN quote_header qh
                ON q.quote_id = qh.quote_id
                LEFT OUTER JOIN quote_site qs
                ON qh.quote_header_id = qs.quote_header_id
                INNER JOIN site s ON qs.site_id = s.site_id
                LEFT OUTER JOIN access_qref aq
                ON qs.quote_site_id = aq.quote_site_id
                INNER JOIN price_line_item_detail plid
                ON plid.external_qref = aq.access_qref
                LEFT OUTER JOIN access_caveat ac
                ON ac.access_qref_id = aq.access_qref_id
          WHERE q.quote_id = in_quoteid
            AND qh.quote_header_id = in_quoteheaderid
            AND (qs.active = pkg_constants.con_activeflag_yes)
            AND (plid.active = pkg_constants.con_activeflag_yes);
        --Start Added by Khader for R16 GHUCS
     OPEN out_billingdetails FOR
       SELECT b.bfg_bill_account_id "billing id", b.account_name "billing ref name", b.currency "currency"
          FROM billing b
         WHERE b.customer_id = in_cust_id AND UPPER(currency) = UPPER(in_currency);
           --END Added by Khader for R16 GHUCS
   END sps_offerinfo_g;

   /*End : New SP Added by Amit for GHUCS R5*/
   PROCEDURE spu_quotesummary (
      in_pricelinedtid   IN       price_line_item_detail.price_line_item_detail_id%TYPE,
      in_discount        IN       price_line_item_detail.discount%TYPE,
      in_netprice        IN       price_line_item_detail.net_price%TYPE,
      in_modifiedby      IN       price_line_item_detail.modified_by%TYPE,
      out_status         OUT      NUMBER,
      out_errmsg         OUT      VARCHAR2,
      in_approved_disc   IN       NUMBER  DEFAULT NULL,    -- added by bijeta for approved pricing requirment
      in_disc_requested  IN       NUMBER  DEFAULT NULL     -- Added on 25/7/2011
   )
   AS
      v_count   NUMBER;
   BEGIN
      SELECT COUNT (*)
        INTO v_count
        FROM price_line_item_detail
       WHERE price_line_item_detail_id = in_pricelinedtid;

      IF (v_count = 0)
      THEN
         out_status := pkg_constants.con_status_duplicate;
      ELSE
         BEGIN
            UPDATE price_line_item_detail
               SET discount = in_discount,
                   modified_by = in_modifiedby,
                   modified_date = SYSDATE (),
                   net_price = in_netprice,
                   approved_disc = in_approved_disc,  -- added by bijeta for approved pricing requirment
           discount_requested = in_disc_requested -- Added on 25/7/2011
             WHERE price_line_item_detail_id = in_pricelinedtid;

            out_status := pkg_constants.con_status_success;
           /* COMMIT; Commented by Nagendra on 15 Mar 2011 */
         END;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         out_errmsg := SQLERRM;
   END spu_quotesummary;



   PROCEDURE spi_discountapproval (
      in_quotehrdid     IN       quote_header.quote_header_id%TYPE,
      in_submit         IN       discount_approval.submitted_by%TYPE,
      in_appstatus      IN       discount_approval.approval_status%TYPE,
      in_reason         IN       discount_approval.reason%TYPE,
      in_createdby      IN       discount_approval.created_by%TYPE,
      --in_Activity_Id    IN       discount_approval.Activity_Id%TYPE,
      --in_Bid_mgr_email  IN       discount_approval.Bid_managers_email%TYPE,
      --in_Sub_status     IN       discount_approval.Sub_status%TYPE,
      out_status        OUT      NUMBER,
      out_errmsg        OUT      VARCHAR2
   )

   AS
      v_count   NUMBER;
   BEGIN
      SELECT COUNT (*)
        INTO v_count
        FROM discount_approval
       WHERE quote_header_id = in_quotehrdid;

      --AND submitted_by = in_submit;
      IF (v_count = 0)
      THEN
         INSERT INTO discount_approval
                     (discount_approval_id, quote_header_id,
                      submitted_by, approval_status, reason, active,
                      created_by, created_date
                     --,ACTIVITY_ID, BID_MANAGERS_EMAIL, SUB_STATUS
                     )
              VALUES (discount_approval_id.NEXTVAL, in_quotehrdid,
                      in_submit, in_appstatus, in_reason, 'Y',
                      in_createdby, SYSDATE ()
                   --- ,in_Activity_Id, in_Bid_mgr_email, in_Sub_status
                     );
      ELSE
         UPDATE discount_approval
            SET active = pkg_constants.con_activeflag_no,
                modified_by = in_createdby,
                modified_date = SYSDATE ()
          WHERE quote_header_id = in_quotehrdid;

         ---AND submitted_by = in_submit;
         INSERT INTO discount_approval
                     (discount_approval_id, quote_header_id, submitted_by,
                      approval_status, reason, active, created_by,
                      created_date
               --- ,ACTIVITY_ID, BID_MANAGERS_EMAIL, SUB_STATUS
                     )
              VALUES (discount_approval_id.NEXTVAL, in_quotehrdid, in_submit,
                      in_appstatus, in_reason, 'Y', in_createdby,
                      SYSDATE ()
               --- ,in_Activity_Id, in_Bid_mgr_email, in_Sub_status
                     );

         out_status := pkg_constants.con_status_success;
         /* COMMIT; Commented by Nagendra on 15 Mar 2011 */
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         out_errmsg := SQLERRM;
   END spi_discountapproval;

   PROCEDURE spi_exchangedetail (
      in_quotehrdid   IN       quote_header.quote_header_id%TYPE,
      in_srcurrency   IN       exchange_rate_detail.source_currency%TYPE,
      in_trcurrency   IN       exchange_rate_detail.target_currency%TYPE,
      in_exrate       IN       exchange_rate_detail.exchange_rate%TYPE,
      in_exratedt     IN       exchange_rate_detail.exchange_rate_date%TYPE,
      in_createdby    IN       exchange_rate_detail.created_by%TYPE,
      out_status      OUT      NUMBER,
      out_errmsg      OUT      VARCHAR2
   )
   AS
      v_count   NUMBER;
   BEGIN
      SELECT COUNT (*)
        INTO v_count
        FROM exchange_rate_detail
       WHERE quote_header_id = in_quotehrdid
         AND active = pkg_constants.con_activeflag_yes;

      IF (v_count = 0)
      THEN
         INSERT INTO exchange_rate_detail
                     (exchange_rate_detail_id, quote_header_id,
                      source_currency, target_currency, exchange_rate,
                      exchange_rate_date, active, created_by, created_date
                     )
              VALUES (exchange_rate_detail_id.NEXTVAL, in_quotehrdid,
                      in_srcurrency, in_trcurrency, in_exrate,
                      in_exratedt, 'Y', in_createdby, SYSDATE ()
                     );
      ELSE
         UPDATE exchange_rate_detail
            SET active = pkg_constants.con_activeflag_no,
                modified_by = in_createdby,
                modified_date = SYSDATE ()
          WHERE quote_header_id = in_quotehrdid
            AND active = pkg_constants.con_activeflag_yes;

         INSERT INTO exchange_rate_detail
                     (exchange_rate_detail_id, quote_header_id,
                      source_currency, target_currency, exchange_rate,
                      exchange_rate_date, active, created_by, created_date
                     )
              VALUES (exchange_rate_detail_id.NEXTVAL, in_quotehrdid,
                      in_srcurrency, in_trcurrency, in_exrate,
                      in_exratedt, 'Y', in_createdby, SYSDATE ()
                     );
      END IF;

      out_status := pkg_constants.con_status_success;
      /* COMMIT; Commented by Nagendra on 15 Mar 2011 */
   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         out_errmsg := SQLERRM;
   END spi_exchangedetail;

   PROCEDURE spu_quoteheader (
      in_quotehrdid      IN       quote_header.quote_header_id%TYPE,
      in_currency        IN       quote_header.currency%TYPE,
      in_status          IN       quote_header.status%TYPE,
      in_custsigndate    IN       quote_header.customer_signed_date%TYPE,
      in_capcheckrefno   IN       quote_header.capcheck_refno%TYPE,
      --904 added
      in_modifiedby      IN       quote_header.modified_by%TYPE,
      out_status         OUT      NUMBER,
      out_errmsg         OUT      VARCHAR2,
      in_product_name     IN       VARCHAR2 DEFAULT NULL
   )
   AS
      v_count   NUMBER;
   BEGIN
      SELECT COUNT (*)
        INTO v_count
        FROM quote_header
       WHERE quote_header_id = in_quotehrdid;

      IF (v_count = 0)
      THEN
         out_status := pkg_constants.con_status_duplicate;
      ELSE
         BEGIN
            UPDATE quote_header
               SET currency = in_currency,
                   status = in_status,
                   customer_signed_date = in_custsigndate,
                   capcheck_refno = in_capcheckrefno,
                   modified_by = in_modifiedby,
                   modified_date = SYSDATE ()
             WHERE quote_header_id = in_quotehrdid;

            -- Added by Sujana on 17/12/2010 as part of introducing new table QUOTE_STATUS
            UPDATE quote_status
               SET status = in_status
             WHERE quote_header_id = in_quotehrdid
             AND product_name=in_product_name;
            --


            out_status := pkg_constants.con_status_success;
            /* COMMIT; Commented by Nagendra on 15 Mar 2011 */
         END;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         out_errmsg := SQLERRM;
   END spu_quoteheader;

   PROCEDURE sps_pricingdetails (
      in_quoteheaderid       IN       quote_header.quote_header_id%TYPE,
      in_attributelist       IN       VARCHAR2,
      out_reportpricingdet   OUT      sys_refcursor
   )
   AS
   BEGIN
      OPEN out_reportpricingdet FOR
         SELECT am.sqe_attribute "Report Name", lid.VALUE "Selected or not",
                lid.quantity "Quantity", li.line_item_id "Line_Item_Id",
                plid.price, plid.discount, plid.price_line_item_id,
                plid.price_line_item_detail_id, plid.charge_type
               ,plid.ptp_eup,plid.net_price,plid.discount_requested--added on 02-Aug-2011 for R16 changes
           FROM quote_header qh,
                line_item li,
                line_item_detail lid,
                attribute_mapping am,
                price_line_item_detail plid
          WHERE qh.quote_header_id = in_quoteheaderid
            AND li.quote_header_id = qh.quote_header_id
            AND lid.line_item_id = li.line_item_id
            -- AND lid.attribute_mapping_id in (501,502,503,504,505,506)
            AND lid.attribute_mapping_id IN (
                   SELECT TO_NUMBER (COLUMN_VALUE)
                     FROM TABLE
                             (CAST
                                 (pkg_common.fn_splitdata (in_attributelist,
                                                           ','
                                                          ) AS varchar2_ntt
                                 )
                             ))
            AND am.attribute_mapping_id = lid.attribute_mapping_id
            AND lid.active = pkg_constants.con_activeflag_yes
            AND plid.line_item_id(+) = li.line_item_id
            AND plid.active(+) = pkg_constants.con_activeflag_yes;
   /*exception when others then
   jay_debug('sps_pricingdetails','exception',sqlerrm); */
   END sps_pricingdetails;

   PROCEDURE spu_cascadediscount (
      in_quotehrdid           IN       quote_header.quote_header_id%TYPE,
      in_onetime_discount     IN       price_line_item_detail.onetime_port_discount%TYPE,
      in_recurring_discount   IN       price_line_item_detail.recurring_port_discount%TYPE,
      in_modifiedby           IN       price_line_item_detail.modified_by%TYPE,
      out_status              OUT      NUMBER,
      out_errmsg              OUT      VARCHAR2
   )
   AS
      v_count   NUMBER;
   BEGIN
      SELECT COUNT (*)
        INTO v_count
        FROM price_line_item_detail
       WHERE active = pkg_constants.con_activeflag_yes
         AND line_item_id IN (
                SELECT line_item_id
                  FROM line_item
                 WHERE quote_header_id = in_quotehrdid
                   AND active = pkg_constants.con_activeflag_yes);

      IF (v_count > 0)
      THEN
         BEGIN
            UPDATE price_line_item_detail
               SET onetime_port_discount = in_onetime_discount,
                   recurring_port_discount = in_recurring_discount,
                   modified_by = in_modifiedby,
                   modified_date = SYSDATE ()
             WHERE active = pkg_constants.con_activeflag_yes
               AND line_item_id IN (
                      SELECT line_item_id
                        FROM line_item
                       WHERE quote_header_id = in_quotehrdid
                         AND active = pkg_constants.con_activeflag_yes);

            out_status := pkg_constants.con_status_success;
         END;
      ELSE
         out_status := pkg_constants.con_status_failure;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         out_errmsg := SQLERRM;
   END;

   --Added by Arpitha on 04/08/2010 for R4 Modify
   PROCEDURE sps_offerinfo_modify (
      in_quoteid           IN       quote.quote_id%TYPE,
      in_quoteheaderid     IN       quote_header.quote_header_id%TYPE,
      out_custdetails      OUT      sys_refcursor,
      out_sitedetails1     OUT      sys_refcursor,
      out_sitedetails2     OUT      sys_refcursor,
      out_serviceoption    OUT      sys_refcursor,
      out_qref_caveat      OUT      sys_refcursor,
      out_productdetails   OUT      sys_refcursor,
      out_sitedetails      OUT      sys_refcursor,
      -- Added in_product_name on 17/12/2010 as part of introducing new table QUOTE_STATUS
      in_product_name         IN       VARCHAR2 DEFAULT NULL
   )
   AS
   BEGIN
      OPEN out_custdetails FOR
         SELECT   q.quote_id, qh.quote_header_id, q.customer_name, nvl(qs.status,qh.status) status, -- Added on 17/12/2010 as part of using status in quote_status table
                  qh.quote_name, qh.bid_number, qh.VERSION,
                  qh.customer_signed_date, qh.opportunity_id,

                  -- ##### Change for 904 - Multiple Price Book  begin
                  --pl.price_list AS "PRICE_LIST",
                  qpl.price_list_name AS "PRICE_LIST_NAME",
                                                           -- ##### Change for 904 - Multiple Price Book  end
                                                           qh.contract_term,
                  ps.product_id, ps.product_name AS "PRODUCT_NAME",
                  qh.currency_id AS "currency_id", qh.currency AS "CURRENCY",
                  da.submitted_by AS "DISCOUNT_SUBMITTEDBY",
                  da.approval_status AS "DISCOUNTAPPROVAL_STATUS",
                  da.reason AS "DISCOUNT_REASON",

                  -- ##### Change for 904 - Quote Tool Functionality - Discount  begin
                  q.created_date AS "QUOTE_CREATED_DATE",
                                                         -- ##### Change for 904 - Quote Tool Functionality - Discount  end
                                                         qh.capcheck_refno,
                  bt.NAME AS "SUBSIDIARY"                         --Added 904
                  ,cp.ptp_price_book_version AS "PTP_PRICE_BOOK_VERSION",
                  -- Added on 7/9/2011 - Start
                  c.user_first_name||c.user_last_name "Sales_User_Name",
                  c.user_email "Email",
                  c.user_ein "EIN",
                  addr.building_number "Building_Number",
                  addr.address_line1 "Address1",
                  addr.address_line2 "Address2",
                  addr.city "City",
                  addr.county "County",
                  addr.state "State_Province",
                  addr.post_zip_code "Zip_Post_Code"
                  -- Added on 7/9/2011 - End
             FROM quote q LEFT OUTER JOIN quote_header qh
                  ON q.quote_id = qh.quote_id
                  -- Added on 17/12/2010 as part of using status in quote_status table
                  LEFT OUTER JOIN quote_status qs
                  ON qh.quote_header_id = qs.quote_header_id
                  AND qs.product_name = in_product_name
                  LEFT OUTER JOIN customer c ON c.customer_id = q.customer_id
                  LEFT OUTER JOIN bt_subsidiary bt
                  ON c.bt_subsidiary_id = bt.bt_subsidiary_id
                  -- Added on 7/9/2011 - Start
                  LEFT OUTER JOIN quote_site qtst
                  ON qtst.quote_header_id = qh.quote_header_id
                  LEFT OUTER JOIN site s
                  ON qtst.site_id = s.site_id
                  LEFT OUTER JOIN address addr
                  ON s.address_id = addr.address_id
                  -- Added on 7/9/2011 - End
                  LEFT OUTER JOIN quote_price_list qpl
                  ON qh.quote_header_id = qpl.quote_header_id
                  LEFT OUTER JOIN customer_product cp
                  ON qh.quote_header_id = cp.quote_header_id
                  LEFT OUTER JOIN product_selection ps
                  ON qh.quote_id = ps.quote_id
                  AND ps.active = pkg_constants.con_activeflag_yes
                  LEFT OUTER JOIN discount_approval da
                  ON qh.quote_header_id = da.quote_header_id
                  AND da.active = pkg_constants.con_activeflag_yes
            WHERE q.quote_id = in_quoteid
              AND qh.quote_header_id = in_quoteheaderid
              -- Added on 7/9/2011 - Start
              AND ps.active = pkg_constants.con_activeflag_yes
              AND s.main_site_flag = pkg_constants.con_activeflag_yes
              AND qtst.active = pkg_constants.con_activeflag_yes
              -- Added on 7/9/2011 - End
         ORDER BY customer_name;

      --Begins  Ghucs,added new  refcursor out_productdetails to display the product details.
      OPEN out_productdetails FOR
         SELECT   'Hosted IPT Service' AS "Product Name",
                  lm.product_name AS "Product Variant",
                  NVL (ld.quantity, 1) AS "LINE_ITEM_QUANTITY",
                  pd.price AS "LINE_ITEM_DETAIL_PRICE",
                  pd.rent_price AS "RENTAL PRICE", qs.site_id AS "SITE ID",
                  lm.product_id AS "Product Id",                       --GHUCS
                  ad.building_number AS "BUILDING NUMBER", ad.city AS "CITY",
                  ad.state AS "STATE", ad.post_zip_code AS "POST ZIP CODE",
                  ad.address_line1 AS "ADDRESS LINE1",
                  pd.discount AS "DISCOUNT", lm.priced AS "PRICED FLAG"
             FROM quote q LEFT OUTER JOIN quote_header qh
                  ON q.quote_id = qh.quote_id
                  LEFT OUTER JOIN quote_site qs
                  ON qh.quote_header_id = qs.quote_header_id
                  INNER JOIN site s ON qs.site_id = s.site_id
                  --Joined Address AND Country tables to fetch the address details
                  LEFT OUTER JOIN address ad ON s.address_id = ad.address_id
                  LEFT OUTER JOIN country cu ON ad.country_id = cu.country_id
                  INNER JOIN line_item lm
                  ON s.site_id = lm.site_id
                AND lm.quote_header_id = in_quoteheaderid
                  INNER JOIN line_item_detail ld
                  ON lm.line_item_id = ld.line_item_id
                  LEFT OUTER JOIN attribute_mapping am
                  ON ld.attribute_mapping_id = am.attribute_mapping_id
                  LEFT OUTER JOIN price_line_item_detail pd
                  ON lm.line_item_id = pd.line_item_id
                  LEFT OUTER JOIN price_line_item pl
                  ON pd.price_line_item_id = pl.price_line_item_id
            WHERE q.quote_id = in_quoteid
              AND qh.quote_header_id = in_quoteheaderid
              AND (qs.active = pkg_constants.con_activeflag_yes)
              AND (lm.active = pkg_constants.con_activeflag_yes)
              AND (ld.active = pkg_constants.con_activeflag_yes)
              AND (   pd.active = pkg_constants.con_activeflag_yes
                   OR pd.active IS NULL
                  )
              -- Added below line on 6/7/2011 as part of not including the below price lines
              AND pd.price_line_item_id not between 2203 and 2216
         ORDER BY ld.line_item_detail_id, lm.product_name;

      -- Ends Ghucs,added new  refcursor out_productdetails to display the product details.
      OPEN out_sitedetails1 FOR
         SELECT UNIQUE q.quote_id, qh.quote_header_id, s.site_id,
                       s.NAME AS "SITE_NAME", cu.NAME AS "COUNTRY",
                       s.resilience AS "RESILIENCE_TYPE",
                       qs.active AS "SITE_ACTIVE", 'Existing' AS "Price Type",
                       lm.product_id, lm.product_name,
                       lm.active AS "LINE_ITEM_ACTIVE",
                       lm.currency AS "LINE_ITEM_CURRENCY", lm.fallback_type,
                       lm.quantity AS "LINE_ITEM_QUANTITY", lm.priced,
                       lm.part_type, ld.row_id, aq.access_qref,
                       aq.pricing_status AS "Pricing Status", aq.port_status,

                       --904 added
                       aq.nni_flag, ad.address_line1, aq.apop_node,
                       aq.gpop_node, aq.gpop_id, aq.apop_id,
                       cq.pri_status AS "CPE_QREF_PRISTATUS",
                       cq.sec_status AS "CPE_QREF_SECSTATUS",
                       ld.line_item_detail_id,
                       ld.active AS "LINE_ITEM_DETAILS_ACTIVE",
                       am.attribute_mapping_id, am.sqe_display_text,
                       am.active AS "ATTRIBUTE_ACTIVE", am.attribute_level,
                       ld.VALUE AS "ATTRIBUTE_VALUE",
                       pd.currency AS "PRICE_CURRENCY",
                       pd.charge_type AS "DOMAIN", pd.discount,
                       pd.active AS "PRICE_LINE_ITEM_ACTIVE",
                       pl.price_line_item_id, pd.price_line_item_detail_id,
                       pl.price_line_description,
                       pd.net_price AS "LINE_ITEM_DETAIL_PRICE",
                       pd.external_qref, pd.onetime_port_discount,
                       pd.recurring_port_discount, cd.COST AS "COST",
                       cd.cost_type AS "COST_TYPE",
                       cd.currency AS "COST_CURRENCY",
                       pd.price "LINE_ITEM_DETAIL_CAT_PRICE", aq.supplier,
                       aq.lead_time, aq.support_24x7,pd.row_id AS "PRICE_LINE_ROW_ID"
                  FROM quote q LEFT OUTER JOIN quote_header qh
                       ON q.quote_id = qh.quote_id
                       LEFT OUTER JOIN quote_site qs
                       ON qh.quote_header_id = qs.quote_header_id
                       INNER JOIN site s ON qs.site_id = s.site_id
                       LEFT OUTER JOIN address ad ON s.address_id =
                                                                 ad.address_id
                       LEFT OUTER JOIN country cu
                       ON ad.country_id = cu.country_id
                       LEFT OUTER JOIN quote_line_item_as_is lm
                       ON s.site_id = lm.site_id
                     AND (lm.active = pkg_constants.con_activeflag_yes)
                     AND lm.quote_header_id = in_quoteheaderid
                       LEFT OUTER JOIN quote_line_item_detail_as_is ld
                       ON lm.line_item_id = ld.line_item_id
                     AND (ld.active = pkg_constants.con_activeflag_yes)
                       LEFT OUTER JOIN attribute_mapping am
                       ON ld.attribute_mapping_id = am.attribute_mapping_id
                       LEFT OUTER JOIN price_line_item_detail_as_is pd
                       ON lm.line_item_id = pd.line_item_id
                     AND (pd.active = pkg_constants.con_activeflag_yes)
                       LEFT OUTER JOIN access_qref_as_is aq
                       ON aq.quote_site_id = qs.quote_site_id
                     AND aq.access_qref = pd.external_qref
                       LEFT OUTER JOIN cpe_qref cq
                       ON cq.quote_site_id = qs.quote_site_id
                     AND (   cq.cpe_qref = pd.external_qref
                          OR cq.secondary_cpe_qref = pd.external_qref
                         )
                       LEFT OUTER JOIN price_line_item pl
                       ON pd.price_line_item_id = pl.price_line_item_id
                       LEFT OUTER JOIN cost_detail_as_is cd
                       ON cd.price_line_item_detail_id =
                                                  pd.price_line_item_detail_id
                     AND (COST != 0)                                    --Syed
                 WHERE q.quote_id = in_quoteid
                   AND qh.quote_header_id = in_quoteheaderid
                   AND nvl(s.main_site_flag,'N') <> 'Y'
                   AND (qs.active = pkg_constants.con_activeflag_yes)
                   -- Added below line on 6/7/2011 as part of not including the below price lines
                   AND NVL(pd.price_line_item_id,-1) not between 2203 and 2216     --added NVL condition for defect id 115496 on 18-aug-2011
              --    AND (lm.active = pkg_constants.con_activeflag_yes)
              --    AND (ld.active = pkg_constants.con_activeflag_yes)
         ORDER BY      s.site_id,
                       lm.product_name,
                       lm.fallback_type,
                       am.attribute_mapping_id, pd.row_id;

      OPEN out_sitedetails2 FOR
         SELECT UNIQUE q.quote_id, qh.quote_header_id, s.site_id,
                       s.NAME AS "SITE_NAME", cu.NAME AS "COUNTRY",
                       s.resilience AS "RESILIENCE_TYPE",
                       qs.active AS "SITE_ACTIVE", 'New' AS "Price Type",
                       lm.product_id, lm.product_name,
                       lm.active AS "LINE_ITEM_ACTIVE",
                       lm.currency AS "LINE_ITEM_CURRENCY", lm.fallback_type,
                       lm.quantity AS "LINE_ITEM_QUANTITY", lm.priced,
                       lm.part_type, ld.row_id, aq.access_qref,
                       aq.pricing_status AS "Pricing Status", aq.port_status,

                       --904 added
                       aq.nni_flag, ad.address_line1, aq.apop_node,
                       aq.gpop_node, aq.gpop_id, aq.apop_id,
                       cq.pri_status AS "CPE_QREF_PRISTATUS",
                       cq.sec_status AS "CPE_QREF_SECSTATUS",
                       ld.line_item_detail_id,
                       ld.active AS "LINE_ITEM_DETAILS_ACTIVE",
                       am.attribute_mapping_id, am.sqe_display_text,
                       am.active AS "ATTRIBUTE_ACTIVE", am.attribute_level,
                       ld.VALUE AS "ATTRIBUTE_VALUE",
                       pd.currency AS "PRICE_CURRENCY",
                       pd.charge_type AS "DOMAIN", pd.discount,
                       pd.active AS "PRICE_LINE_ITEM_ACTIVE",
                       pl.price_line_item_id, pd.price_line_item_detail_id,
                       pl.price_line_description,
                       pd.net_price AS "LINE_ITEM_DETAIL_PRICE", pd.external_qref,
                       pd.onetime_port_discount, pd.recurring_port_discount,
                       cd.COST AS "COST", cd.cost_type AS "COST_TYPE",
                       cd.currency AS "COST_CURRENCY",
                       pd.price "LINE_ITEM_DETAIL_CAT_PRICE", aq.supplier,
                       aq.lead_time, aq.support_24x7,pd.row_id AS "PRICE_LINE_ROW_ID"
                  FROM quote q LEFT OUTER JOIN quote_header qh
                       ON q.quote_id = qh.quote_id
                       LEFT OUTER JOIN quote_site qs
                       ON qh.quote_header_id = qs.quote_header_id
                       INNER JOIN site s ON qs.site_id = s.site_id
                       LEFT OUTER JOIN address ad ON s.address_id =
                                                                 ad.address_id
                       LEFT OUTER JOIN country cu
                       ON ad.country_id = cu.country_id
                       LEFT OUTER JOIN line_item lm
                       ON s.site_id = lm.site_id
                     AND (lm.active = pkg_constants.con_activeflag_yes)
                     AND lm.quote_header_id = in_quoteheaderid
                       LEFT OUTER JOIN line_item_detail ld
                       ON lm.line_item_id = ld.line_item_id
                     AND (ld.active = pkg_constants.con_activeflag_yes)
                       INNER JOIN
                       (SELECT a.line_item_detail_id line_item_detail_id_tobe
                          FROM (SELECT lid.line_item_detail_id,
                                       am.attribute_mapping_id,
                                       am.config_level, li.quote_header_id,
                                       lid.VALUE AS VALUE,
                                       NVL (li.fallback_type,
                                            0) fallback_type,
                                       NVL (li.product_id, 0) product_id,
                                       NVL (li.part_type, 0) part_type,
                                       NVL (li.non_std_flag, 0) non_std_flag,
                                       NVL (li.row_id, 0) row_id
                                  FROM line_item_detail lid,
                                       line_item li,
                                       attribute_mapping am
                                 WHERE li.quote_header_id = in_quoteheaderid
                                   --AND li.site_id              = in_siteid
                                   AND li.active = 'Y'
                                   AND lid.line_item_id = li.line_item_id
                                   AND lid.active = 'Y'
                                   AND am.attribute_mapping_id =
                                                      lid.attribute_mapping_id
                                   AND am.attribute_level = 'Quote') a
                               FULL OUTER JOIN
                               (SELECT lid.line_item_detail_id,
                                       am.attribute_mapping_id,
                                       sqe_display_text, am.config_level,
                                       li.quote_header_id, lid.VALUE AS VALUE,
                                       NVL (li.fallback_type,
                                            0) fallback_type,
                                       NVL (li.product_id, 0) product_id,
                                       NVL (li.part_type, 0) part_type,
                                       NVL (li.non_std_flag, 0) non_std_flag,
                                       NVL (li.row_id, 0) row_id
                                  FROM quote_line_item_detail_as_is lid,
                                       quote_line_item_as_is li,
                                       attribute_mapping am
                                 WHERE li.quote_header_id = in_quoteheaderid
                                   --AND li.site_id              = in_siteid
                                   AND li.active = 'Y'
                                   AND lid.line_item_id = li.line_item_id
                                   AND lid.active = 'Y'
                                   AND am.attribute_mapping_id =
                                                      lid.attribute_mapping_id
                                   AND am.attribute_level = 'Quote') b
                               ON a.quote_header_id = b.quote_header_id
                             AND a.attribute_mapping_id =
                                                        b.attribute_mapping_id
                             AND a.fallback_type = b.fallback_type
                             AND a.product_id = b.product_id
                             AND a.part_type = b.part_type
                             AND a.non_std_flag = b.non_std_flag
                             AND a.row_id = b.row_id
                             AND a.VALUE IS NOT NULL
                             AND b.VALUE IS NOT NULL
                         WHERE a.VALUE <> b.VALUE) x
                       ON ld.line_item_detail_id = x.line_item_detail_id_tobe
                       LEFT OUTER JOIN attribute_mapping am
                       ON ld.attribute_mapping_id = am.attribute_mapping_id
                       LEFT OUTER JOIN price_line_item_detail pd
                       ON lm.line_item_id = pd.line_item_id
                     AND (pd.active = pkg_constants.con_activeflag_yes)
                       LEFT OUTER JOIN access_qref aq
                       ON aq.quote_site_id = qs.quote_site_id
                     AND aq.access_qref = pd.external_qref
                       LEFT OUTER JOIN cpe_qref cq
                       ON cq.quote_site_id = qs.quote_site_id
                     AND (   cq.cpe_qref = pd.external_qref
                          OR cq.secondary_cpe_qref = pd.external_qref
                         )
                       LEFT OUTER JOIN price_line_item pl
                       ON pd.price_line_item_id = pl.price_line_item_id
                       LEFT OUTER JOIN cost_detail cd
                       ON cd.price_line_item_detail_id =
                                                  pd.price_line_item_detail_id
                     AND (COST != 0)                                    --Syed
                 WHERE q.quote_id = in_quoteid
                   AND qh.quote_header_id = in_quoteheaderid
                   AND (qs.active = pkg_constants.con_activeflag_yes)
                   -- Added below line on 6/7/2011 as part of not including the below price lines
                   AND pd.price_line_item_id not between 2203 and 2216
              --    AND (lm.active = pkg_constants.con_activeflag_yes)
              --    AND (ld.active = pkg_constants.con_activeflag_yes)
         ORDER BY      s.site_id,
                       lm.product_name,
                       lm.fallback_type,
                       am.attribute_mapping_id,pd.row_id;

      /*Added the below cursor for
      904 Order Site to Site SLA */
      OPEN out_serviceoption FOR
         SELECT am.sqe_attribute "Report Name", lid.VALUE "Selected or not",
                lid.quantity "Quantity", li.line_item_id "Line_Item_Id",
                plid.price, plid.discount, plid.price_line_item_id,
                plid.charge_type, price_line_item_detail_id
           FROM quote_header qh,
                line_item li,
                line_item_detail lid,
                attribute_mapping am,
                price_line_item_detail plid
          WHERE qh.quote_header_id = in_quoteheaderid
            AND li.quote_header_id = qh.quote_header_id
            AND lid.line_item_id = li.line_item_id
            AND lid.attribute_mapping_id = 501
            AND am.attribute_mapping_id = lid.attribute_mapping_id
            AND lid.active = pkg_constants.con_activeflag_yes
            AND plid.line_item_id(+) = li.line_item_id
            AND plid.active(+) = pkg_constants.con_activeflag_yes
            -- Added below line on 6/7/2011 as part of not including the below price lines
            AND plid.price_line_item_id not between 2203 and 2216;

      OPEN out_qref_caveat FOR
         SELECT distinct s.NAME AS site_name, aq.access_qref AS access_qref,
                ac.access_caveat_id AS access_caveat_id,
                ac.description AS description
           FROM quote q LEFT OUTER JOIN quote_header qh
                ON q.quote_id = qh.quote_id
                LEFT OUTER JOIN quote_site qs
                ON qh.quote_header_id = qs.quote_header_id
                INNER JOIN site s ON qs.site_id = s.site_id
                LEFT OUTER JOIN access_qref aq
                ON qs.quote_site_id = aq.quote_site_id
                INNER JOIN price_line_item_detail plid
                ON plid.external_qref = aq.access_qref
                LEFT OUTER JOIN access_caveat ac
                ON ac.access_qref_id = aq.access_qref_id
          WHERE q.quote_id = in_quoteid
            AND qh.quote_header_id = in_quoteheaderid
            AND (qs.active = pkg_constants.con_activeflag_yes)
            AND (plid.active = pkg_constants.con_activeflag_yes)
            -- Added below line on 6/7/2011 as part of not including the below price lines
            AND plid.price_line_item_id not between 2203 and 2216;

            OPEN out_sitedetails FOR
         SELECT UNIQUE q.quote_id, qh.quote_header_id, s.site_id,
                       s.NAME AS "SITE_NAME", cu.NAME AS "COUNTRY",
                       s.resilience AS "RESILIENCE_TYPE",
                       qs.active AS "SITE_ACTIVE",'New' AS "Price Type", lm.product_id,
                       lm.product_name, lm.active AS "LINE_ITEM_ACTIVE",
                       lm.currency AS "LINE_ITEM_CURRENCY", lm.fallback_type,
                       lm.quantity AS "LINE_ITEM_QUANTITY", lm.priced,
                       lm.part_type, ld.row_id, aq.access_qref,
                       aq.pricing_status AS "Pricing Status", aq.port_status,          --904 added
                                                         aq.nni_flag,
                       ad.address_line1, aq.apop_node, aq.gpop_node,
                       aq.gpop_id, aq.apop_id,
                       cq.pri_status AS "CPE_QREF_PRISTATUS",
                       cq.sec_status AS "CPE_QREF_SECSTATUS",
                       ld.line_item_detail_id,
                       ld.active AS "LINE_ITEM_DETAILS_ACTIVE",
                       am.attribute_mapping_id, am.sqe_display_text,
                       am.active AS "ATTRIBUTE_ACTIVE", am.attribute_level,
                       ld.VALUE AS "ATTRIBUTE_VALUE",
                       pd.currency AS "PRICE_CURRENCY",
                       pd.charge_type AS "DOMAIN", pd.discount,
                       pd.active AS "PRICE_LINE_ITEM_ACTIVE",
                       pl.price_line_item_id, pd.price_line_item_detail_id,
                       pl.price_line_description,
                       pd.price AS "LINE_ITEM_DETAIL_PRICE", pd.external_qref,
                       pd.onetime_port_discount, pd.recurring_port_discount,
                       cd.COST AS "COST", cd.cost_type AS "COST_TYPE",
                       cd.currency AS "COST_CURRENCY",
                       pd.net_price "LINE_ITEM_DETAIL_CAT_PRICE",
                                                /* Added the below three for Production defect BH420954 on 11Aug2010*/
                                                aq.supplier, aq.gpop_node,
                       aq.lead_time, support_24x7, pd.row_id AS "PRICE_LINE_ROW_ID"
                  FROM quote q LEFT OUTER JOIN quote_header qh
                       ON q.quote_id = qh.quote_id
                       LEFT OUTER JOIN quote_site qs
                       ON qh.quote_header_id = qs.quote_header_id
                       INNER JOIN site s ON qs.site_id = s.site_id
                       LEFT OUTER JOIN address ad ON s.address_id =
                                                                 ad.address_id
                       LEFT OUTER JOIN country cu
                       ON ad.country_id = cu.country_id
                       LEFT OUTER JOIN line_item lm
                       ON s.site_id = lm.site_id
                     AND (lm.active = pkg_constants.con_activeflag_yes)
                     AND lm.quote_header_id = in_quoteheaderid
                       LEFT OUTER JOIN line_item_detail ld
                       ON lm.line_item_id = ld.line_item_id
                     AND (ld.active = pkg_constants.con_activeflag_yes)
                       LEFT OUTER JOIN attribute_mapping am
                       ON ld.attribute_mapping_id = am.attribute_mapping_id
                       LEFT OUTER JOIN price_line_item_detail pd
                       ON lm.line_item_id = pd.line_item_id
                     AND (pd.active = pkg_constants.con_activeflag_yes)
                       LEFT OUTER JOIN access_qref aq
                       ON aq.quote_site_id = qs.quote_site_id
                     AND aq.access_qref = pd.external_qref
                       LEFT OUTER JOIN cpe_qref cq
                       ON cq.quote_site_id = qs.quote_site_id
                     AND (   cq.cpe_qref = pd.external_qref
                          OR cq.secondary_cpe_qref = pd.external_qref
                         )
                       LEFT OUTER JOIN price_line_item pl
                       ON pd.price_line_item_id = pl.price_line_item_id
                       LEFT OUTER JOIN cost_detail cd
                       ON cd.price_line_item_detail_id =
                                                  pd.price_line_item_detail_id
                     AND (COST != 0)                                    --Syed
                 WHERE q.quote_id = in_quoteid
                   AND qh.quote_header_id = in_quoteheaderid
                   AND (qs.active = pkg_constants.con_activeflag_yes)
                   --modified by Tanmayi on 15/09/2010 for Central Site R5
                   AND NVL (s.main_site_flag, '-1') !=
                                              pkg_constants.con_activeflag_yes
                   -- Added below line on 6/7/2011 as part of not including the below price lines
                   AND NVL(pd.price_line_item_id,-1) not between 2203 and 2216 --added NVL condition for Defect id 115496 on 18-AUG-2011
              --    AND (lm.active = pkg_constants.con_activeflag_yes)
              --    AND (ld.active = pkg_constants.con_activeflag_yes)
         ORDER BY      s.site_id,
                       lm.product_name,
                       lm.fallback_type,
                       am.attribute_mapping_id, pd.row_id;


   END sps_offerinfo_modify;

   PROCEDURE spu_quotesummary_test (
      in_pricelinedtid   IN       price_line_item_detail.price_line_item_detail_id%TYPE,
      in_discount        IN       price_line_item_detail.discount%TYPE,
      in_netprice        IN       price_line_item_detail.net_price%TYPE,
      in_modifiedby      IN       price_line_item_detail.modified_by%TYPE,
      out_status         OUT      NUMBER,
      out_errmsg         OUT      VARCHAR2
   )
   AS
      v_count   NUMBER;
   BEGIN
      SELECT COUNT (*)
        INTO v_count
        FROM price_line_item_detail
       WHERE price_line_item_detail_id = in_pricelinedtid;

      IF (v_count = 0)
      THEN
         out_status := pkg_constants.con_status_duplicate;
      ELSE
         BEGIN
            UPDATE price_line_item_detail
               SET discount = in_discount,
                   modified_by = in_modifiedby,
                   modified_date = SYSDATE (),
                   net_price = in_netprice
             WHERE price_line_item_detail_id = in_pricelinedtid;

            out_status := pkg_constants.con_status_success;
            /* COMMIT; Commented by Nagendra on 15 Mar 2011 */
         END;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         out_errmsg := SQLERRM;
   END spu_quotesummary_test;

   PROCEDURE sps_offerinfo_test (
      in_quoteid           IN       quote.quote_id%TYPE,
      in_quoteheaderid     IN       quote_header.quote_header_id%TYPE,
      out_custdetails      OUT      sys_refcursor,
      out_sitedetails      OUT      sys_refcursor,
      out_serviceoption    OUT      sys_refcursor,
      out_qref_caveat      OUT      sys_refcursor,
      out_productdetails   OUT      sys_refcursor,
                           -- Ghucs,added new OUT parameter out_productdetails
      -- Added in_product_name on 17/12/2010 as part of introducing new table QUOTE_STATUS
      in_product_name         IN       VARCHAR2 DEFAULT NULL
   )
   AS
   BEGIN
      OPEN out_custdetails FOR
         SELECT   q.quote_id, qh.quote_header_id, q.customer_name, nvl(qs.status,qh.status) status, -- Added on 17/12/2010 as part of using status in quote_status table
                  qh.quote_name, qh.bid_number, qh.VERSION,
                  qh.customer_signed_date, qh.opportunity_id,

                  -- ##### Change for 904 - Multiple Price Book  begin
                  --pl.price_list AS "PRICE_LIST",
                  qpl.price_list_name AS "PRICE_LIST_NAME",
                                                           -- ##### Change for 904 - Multiple Price Book  end
                                                           qh.contract_term,
                  ps.product_id, ps.product_name AS "PRODUCT_NAME",
                  qh.currency_id AS "currency_id", qh.currency AS "CURRENCY",
                  da.submitted_by AS "DISCOUNT_SUBMITTEDBY",
                  da.approval_status AS "DISCOUNTAPPROVAL_STATUS",
                  da.reason AS "DISCOUNT_REASON",

                  -- ##### Change for 904 - Quote Tool Functionality - Discount  begin
                  q.created_date AS "QUOTE_CREATED_DATE",
                                                         -- ##### Change for 904 - Quote Tool Functionality - Discount  end
                                                         qh.capcheck_refno,
                  bt.NAME AS "SUBSIDIARY"                         --Added 904
             FROM quote q LEFT OUTER JOIN quote_header qh
                  ON q.quote_id = qh.quote_id
                  -- Added on 17/12/2010 as part of using status in quote_status table
                  LEFT OUTER JOIN quote_status qs
          ON qh.quote_header_id = qs.quote_header_id
                  AND qs.product_name = in_product_name
                  LEFT OUTER JOIN customer c ON c.customer_id = q.customer_id
                  LEFT OUTER JOIN bt_subsidiary bt
                  ON c.bt_subsidiary_id = bt.bt_subsidiary_id
                  LEFT OUTER JOIN quote_price_list qpl
                  ON qh.quote_header_id = qpl.quote_header_id
                   -- ##### Change for 904 - Multiple Price Book  begin
                  --LEFT OUTER JOIN price_list pl
                   --ON pl.price_list_id = qpl.price_list_id
                   -- ##### Change for 904 - Multiple Price Book  end
                  LEFT OUTER JOIN product_selection ps
                  ON qh.quote_id = ps.quote_id
                  LEFT OUTER JOIN discount_approval da
                  ON qh.quote_header_id = da.quote_header_id
                AND da.active = pkg_constants.con_activeflag_yes
                AND ps.active = pkg_constants.con_activeflag_yes
            WHERE q.quote_id = in_quoteid
              AND qh.quote_header_id = in_quoteheaderid
              --added by tanmayi on 03/08/2010 for R5
              AND ps.active = pkg_constants.con_activeflag_yes
         ORDER BY customer_name;

      --Begins  Ghucs,added new  refcursor out_productdetails to display the product details.
      OPEN out_productdetails FOR
         SELECT   'Hosted IPT Service' AS "Product Name",
                  lm.product_name AS "Product Variant",
                  NVL (ld.quantity, 1) AS "LINE_ITEM_QUANTITY",
                  pd.price AS "LINE_ITEM_DETAIL_PRICE",
                  pd.rent_price AS "RENTAL PRICE", qs.site_id AS "SITE ID",
                  lm.product_id AS "Product Id",                       --GHUCS
                  ad.building_number AS "BUILDING NUMBER", ad.city AS "CITY",
                  ad.state AS "STATE", ad.post_zip_code AS "POST ZIP CODE",
                  ad.address_line1 AS "ADDRESS LINE1",
                  pd.discount AS "DISCOUNT", lm.priced AS "PRICED FLAG"
             FROM quote q LEFT OUTER JOIN quote_header qh
                  ON q.quote_id = qh.quote_id
                  LEFT OUTER JOIN quote_site qs
                  ON qh.quote_header_id = qs.quote_header_id
                  INNER JOIN site s ON qs.site_id = s.site_id
                  --Joined Address AND Country tables to fetch the address details
                  LEFT OUTER JOIN address ad ON s.address_id = ad.address_id
                  LEFT OUTER JOIN country cu ON ad.country_id = cu.country_id
                  INNER JOIN line_item lm
                  ON s.site_id = lm.site_id
                AND lm.quote_header_id = in_quoteheaderid
                  INNER JOIN line_item_detail ld
                  ON lm.line_item_id = ld.line_item_id
                  LEFT OUTER JOIN attribute_mapping am
                  ON ld.attribute_mapping_id = am.attribute_mapping_id
                  LEFT OUTER JOIN price_line_item_detail pd
                  ON lm.line_item_id = pd.line_item_id
                  LEFT OUTER JOIN price_line_item pl
                  ON pd.price_line_item_id = pl.price_line_item_id
            WHERE q.quote_id = in_quoteid
              AND qh.quote_header_id = in_quoteheaderid
              AND (qs.active = pkg_constants.con_activeflag_yes)
              AND (lm.active = pkg_constants.con_activeflag_yes)
              AND (ld.active = pkg_constants.con_activeflag_yes)
              AND (   pd.active = pkg_constants.con_activeflag_yes
                   OR pd.active IS NULL
                  )
         ORDER BY ld.line_item_detail_id, lm.product_name;

      -- Ends Ghucs,added new  refcursor out_productdetails to display the product details.
      OPEN out_sitedetails FOR
         SELECT UNIQUE q.quote_id, qh.quote_header_id, s.site_id,
                       s.NAME AS "SITE_NAME", cu.NAME AS "COUNTRY",
                       s.resilience AS "RESILIENCE_TYPE",
                       qs.active AS "SITE_ACTIVE", lm.product_id,
                       lm.product_name, lm.active AS "LINE_ITEM_ACTIVE",
                       lm.currency AS "LINE_ITEM_CURRENCY", lm.fallback_type,
                       lm.quantity AS "LINE_ITEM_QUANTITY", lm.priced,
                       lm.part_type, ld.row_id, aq.access_qref,
                       aq.pricing_status, aq.port_status,          --904 added
                                                         aq.nni_flag,
                       ad.address_line1, aq.apop_node, aq.gpop_node,
                       aq.gpop_id, aq.apop_id,
                       cq.pri_status AS "CPE_QREF_PRISTATUS",
                       cq.sec_status AS "CPE_QREF_SECSTATUS",
                       ld.line_item_detail_id,
                       ld.active AS "LINE_ITEM_DETAILS_ACTIVE",
                       am.attribute_mapping_id, am.sqe_display_text,
                       am.active AS "ATTRIBUTE_ACTIVE", am.attribute_level,
                       ld.VALUE AS "ATTRIBUTE_VALUE",
                       pd.currency AS "PRICE_CURRENCY",
                       pd.charge_type AS "DOMAIN", pd.discount,
                       pd.active AS "PRICE_LINE_ITEM_ACTIVE",
                       pl.price_line_item_id, pd.price_line_item_detail_id,
                       pl.price_line_description,
                       pd.price AS "LINE_ITEM_DETAIL_PRICE", pd.external_qref,
                       pd.onetime_port_discount, pd.recurring_port_discount,
                       cd.COST AS "COST", cd.cost_type AS "COST_TYPE",
                       cd.currency AS "COST_CURRENCY",
                       pd.net_price "NET_PRICE",
                                                /* Added the below three for Production defect BH420954 on 11Aug2010*/
                                                aq.supplier, aq.gpop_node,
                       aq.lead_time, support_24x7
                  FROM quote q LEFT OUTER JOIN quote_header qh
                       ON q.quote_id = qh.quote_id
                       LEFT OUTER JOIN quote_site qs
                       ON qh.quote_header_id = qs.quote_header_id
                       INNER JOIN site s ON qs.site_id = s.site_id
                       LEFT OUTER JOIN address ad ON s.address_id =
                                                                 ad.address_id
                       LEFT OUTER JOIN country cu
                       ON ad.country_id = cu.country_id
                       LEFT OUTER JOIN line_item lm
                       ON s.site_id = lm.site_id
                     AND (lm.active = pkg_constants.con_activeflag_yes)
                     AND lm.quote_header_id = in_quoteheaderid
                       LEFT OUTER JOIN line_item_detail ld
                       ON lm.line_item_id = ld.line_item_id
                     AND (ld.active = pkg_constants.con_activeflag_yes)
                       LEFT OUTER JOIN attribute_mapping am
                       ON ld.attribute_mapping_id = am.attribute_mapping_id
                       LEFT OUTER JOIN price_line_item_detail pd
                       ON lm.line_item_id = pd.line_item_id
                     AND (pd.active = pkg_constants.con_activeflag_yes)
                       LEFT OUTER JOIN access_qref aq
                       ON aq.quote_site_id = qs.quote_site_id
                     AND aq.access_qref = pd.external_qref
                       LEFT OUTER JOIN cpe_qref cq
                       ON cq.quote_site_id = qs.quote_site_id
                     AND (   cq.cpe_qref = pd.external_qref
                          OR cq.secondary_cpe_qref = pd.external_qref
                         )
                       LEFT OUTER JOIN price_line_item pl
                       ON pd.price_line_item_id = pl.price_line_item_id
                       LEFT OUTER JOIN cost_detail cd
                       ON cd.price_line_item_detail_id =
                                                  pd.price_line_item_detail_id
                     AND (COST != 0)                                    --Syed
                 WHERE q.quote_id = in_quoteid
                   AND qh.quote_header_id = in_quoteheaderid
                   AND (qs.active = pkg_constants.con_activeflag_yes)
              --    AND (lm.active = pkg_constants.con_activeflag_yes)
              --    AND (ld.active = pkg_constants.con_activeflag_yes)
         ORDER BY      s.site_id,
                       lm.product_name,
                       lm.fallback_type,
                       am.attribute_mapping_id;

      /*Added the below cursor for
      904 Order Site to Site SLA */
      OPEN out_serviceoption FOR
         SELECT am.sqe_attribute "Report Name", lid.VALUE "Selected or not",
                lid.quantity "Quantity", li.line_item_id "Line_Item_Id",
                plid.price, plid.discount, plid.price_line_item_id,
                plid.charge_type, price_line_item_detail_id
           FROM quote_header qh,
                line_item li,
                line_item_detail lid,
                attribute_mapping am,
                price_line_item_detail plid
          WHERE qh.quote_header_id = in_quoteheaderid
            AND li.quote_header_id = qh.quote_header_id
            AND lid.line_item_id = li.line_item_id
            AND lid.attribute_mapping_id = 501
            AND am.attribute_mapping_id = lid.attribute_mapping_id
            AND lid.active = pkg_constants.con_activeflag_yes
            AND plid.line_item_id(+) = li.line_item_id
            AND plid.active(+) = pkg_constants.con_activeflag_yes;

      OPEN out_qref_caveat FOR
         SELECT s.NAME AS site_name, aq.access_qref AS access_qref,
                ac.access_caveat_id AS access_caveat_id,
                ac.description AS description
           FROM quote q LEFT OUTER JOIN quote_header qh
                ON q.quote_id = qh.quote_id
                LEFT OUTER JOIN quote_site qs
                ON qh.quote_header_id = qs.quote_header_id
                INNER JOIN site s ON qs.site_id = s.site_id
                LEFT OUTER JOIN access_qref aq
                ON qs.quote_site_id = aq.quote_site_id
                INNER JOIN price_line_item_detail plid
                ON plid.external_qref = aq.access_qref
                LEFT OUTER JOIN access_caveat ac
                ON ac.access_qref_id = aq.access_qref_id
          WHERE q.quote_id = in_quoteid
            AND qh.quote_header_id = in_quoteheaderid
            AND (qs.active = pkg_constants.con_activeflag_yes)
            AND (plid.active = pkg_constants.con_activeflag_yes);
   END sps_offerinfo_test;

PROCEDURE sps_offerinfo_ptp (
      in_quoteid           IN       quote.quote_id%TYPE,
      in_quoteheaderid     IN       quote_header.quote_header_id%TYPE,
      out_custdetails      OUT      sys_refcursor,
      out_sitedetails      OUT      sys_refcursor,
      out_serviceoption    OUT      sys_refcursor,
      out_qref_caveat      OUT      sys_refcursor,
      out_productdetails   OUT      sys_refcursor,
                          -- Ghucs,added new OUT parameter out_productdetails
      -- Added in_product_name on 17/12/2010 as part of introducing new table QUOTE_STATUS
      in_product_name         IN       VARCHAR2 DEFAULT NULL
   )
   AS
   BEGIN
      OPEN out_custdetails FOR
         SELECT   q.quote_id, qh.quote_header_id, q.customer_name, nvl(qs.status,qh.status) status, -- Added on 17/12/2010 as part of using status in quote_status table
                  qh.quote_name, qh.bid_number, qh.VERSION,
                  qh.customer_signed_date, qh.opportunity_id,

                  -- ##### Change for 904 - Multiple Price Book  begin
                  --pl.price_list AS "PRICE_LIST",
                  qpl.price_list_name AS "PRICE_LIST_NAME",
                                                           -- ##### Change for 904 - Multiple Price Book  end
                                                           qh.contract_term,
                  ps.product_id, ps.product_name AS "PRODUCT_NAME",
                  qh.currency_id AS "currency_id", qh.currency AS "CURRENCY",
                  da.submitted_by AS "DISCOUNT_SUBMITTEDBY",
                  da.approval_status AS "DISCOUNTAPPROVAL_STATUS",
                  da.reason AS "DISCOUNT_REASON",

                  -- ##### Change for 904 - Quote Tool Functionality - Discount  begin
                  q.created_date AS "QUOTE_CREATED_DATE",
                                                         -- ##### Change for 904 - Quote Tool Functionality - Discount  end
                                                         qh.capcheck_refno,
                  bt.NAME AS "SUBSIDIARY"                         --Added 904
             FROM quote q LEFT OUTER JOIN quote_header qh
                  ON q.quote_id = qh.quote_id
                  -- Added on 17/12/2010 as part of using status in quote_status table
                  LEFT OUTER JOIN quote_status qs
          ON qh.quote_header_id = qs.quote_header_id
                  AND qs.product_name = in_product_name
                  LEFT OUTER JOIN customer c ON c.customer_id = q.customer_id
                  LEFT OUTER JOIN bt_subsidiary bt
                  ON c.bt_subsidiary_id = bt.bt_subsidiary_id
                  LEFT OUTER JOIN quote_price_list qpl
                  ON qh.quote_header_id = qpl.quote_header_id
                   -- ##### Change for 904 - Multiple Price Book  begin
                  --LEFT OUTER JOIN price_list pl
                   --ON pl.price_list_id = qpl.price_list_id
                   -- ##### Change for 904 - Multiple Price Book  end
                  LEFT OUTER JOIN product_selection ps
                  ON qh.quote_id = ps.quote_id
                  LEFT OUTER JOIN discount_approval da
                  ON qh.quote_header_id = da.quote_header_id
                AND da.active = pkg_constants.con_activeflag_yes
                AND ps.active = pkg_constants.con_activeflag_yes
            WHERE q.quote_id = in_quoteid
              AND qh.quote_header_id = in_quoteheaderid
              --added by tanmayi on 03/08/2010 for R5
              AND ps.active = pkg_constants.con_activeflag_yes
         ORDER BY customer_name;

      --Begins  Ghucs,added new  refcursor out_productdetails to display the product details.
      OPEN out_productdetails FOR
         SELECT   'Hosted IPT Service' AS "Product Name",
                  lm.product_name AS "Product Variant",
                  NVL (ld.quantity, 1) AS "LINE_ITEM_QUANTITY",
                  pd.price AS "LINE_ITEM_DETAIL_PRICE",
                  pd.rent_price AS "RENTAL PRICE", qs.site_id AS "SITE ID",
                  lm.product_id AS "Product Id",                       --GHUCS
                  ad.building_number AS "BUILDING NUMBER", ad.city AS "CITY",
                  ad.state AS "STATE", ad.post_zip_code AS "POST ZIP CODE",
                  ad.address_line1 AS "ADDRESS LINE1",
                  pd.discount AS "DISCOUNT", lm.priced AS "PRICED FLAG"
             FROM quote q LEFT OUTER JOIN quote_header qh
                  ON q.quote_id = qh.quote_id
                  LEFT OUTER JOIN quote_site qs
                  ON qh.quote_header_id = qs.quote_header_id
                  INNER JOIN site s ON qs.site_id = s.site_id
                  --Joined Address AND Country tables to fetch the address details
                  LEFT OUTER JOIN address ad ON s.address_id = ad.address_id
                  LEFT OUTER JOIN country cu ON ad.country_id = cu.country_id
                  INNER JOIN line_item lm
                  ON s.site_id = lm.site_id
                AND lm.quote_header_id = in_quoteheaderid
                  INNER JOIN line_item_detail ld
                  ON lm.line_item_id = ld.line_item_id
                  LEFT OUTER JOIN attribute_mapping am
                  ON ld.attribute_mapping_id = am.attribute_mapping_id
                  LEFT OUTER JOIN price_line_item_detail pd
                  ON lm.line_item_id = pd.line_item_id
                  LEFT OUTER JOIN price_line_item pl
                  ON pd.price_line_item_id = pl.price_line_item_id
            WHERE q.quote_id = in_quoteid
              AND qh.quote_header_id = in_quoteheaderid
              AND (qs.active = pkg_constants.con_activeflag_yes)
              AND (lm.active = pkg_constants.con_activeflag_yes)
              AND (ld.active = pkg_constants.con_activeflag_yes)
              AND (   pd.active = pkg_constants.con_activeflag_yes
                   OR pd.active IS NULL
                  )
              --modified by Tanmayi on 15/09/2010 for Central Site R5
              AND NVL (s.main_site_flag, '-1') !=
                                              pkg_constants.con_activeflag_yes
         ORDER BY ld.line_item_detail_id, lm.product_name;

      -- Ends Ghucs,added new  refcursor out_productdetails to display the product details.
      OPEN out_sitedetails FOR
         SELECT UNIQUE q.quote_id, qh.quote_header_id, s.site_id,
                       s.NAME AS "SITE_NAME", cu.NAME AS "COUNTRY",
                       s.resilience AS "RESILIENCE_TYPE",
                       qs.active AS "SITE_ACTIVE", lm.product_id,
                       lm.product_name, lm.active AS "LINE_ITEM_ACTIVE",
                       lm.currency AS "LINE_ITEM_CURRENCY", lm.fallback_type,
                       lm.quantity AS "LINE_ITEM_QUANTITY", lm.priced,
                       lm.part_type, ld.row_id, aq.access_qref,
                       aq.pricing_status, aq.port_status,          --904 added
                                                         aq.nni_flag,
                       ad.address_line1, aq.apop_node, aq.gpop_node,
                       aq.gpop_id, aq.apop_id,
                       cq.pri_status AS "CPE_QREF_PRISTATUS",
                       cq.sec_status AS "CPE_QREF_SECSTATUS",
                       ld.line_item_detail_id,
                       ld.active AS "LINE_ITEM_DETAILS_ACTIVE",
                       am.attribute_mapping_id, am.sqe_display_text,
                       am.active AS "ATTRIBUTE_ACTIVE", am.attribute_level,
                       ld.VALUE AS "ATTRIBUTE_VALUE",
                       pd.currency AS "PRICE_CURRENCY",
                       pd.charge_type AS "DOMAIN", pd.discount,
                       pd.active AS "PRICE_LINE_ITEM_ACTIVE",
                       pl.price_line_item_id, pd.price_line_item_detail_id,
                       pl.price_line_description,
                       pd.price AS "LINE_ITEM_DETAIL_PRICE", pd.external_qref,
                       pd.onetime_port_discount, pd.recurring_port_discount,
                       cd.COST AS "COST", cd.cost_type AS "COST_TYPE",
                       cd.currency AS "COST_CURRENCY",
                       pd.net_price "NET_PRICE",
                                                /* Added the below three for Production defect BH420954 on 11Aug2010*/
                                                aq.supplier, aq.gpop_node,
                       aq.lead_time, support_24x7,
                       pd.approved_disc AS "Approved Discount",
                            -- added by Bijeta for approved discount req in R7
                      pd.ptp_eup
                  FROM quote q LEFT OUTER JOIN quote_header qh
                       ON q.quote_id = qh.quote_id
                       LEFT OUTER JOIN quote_site qs
                       ON qh.quote_header_id = qs.quote_header_id
                       INNER JOIN site s ON qs.site_id = s.site_id
                       LEFT OUTER JOIN address ad ON s.address_id =
                                                                 ad.address_id
                       LEFT OUTER JOIN country cu
                       ON ad.country_id = cu.country_id
                       LEFT OUTER JOIN line_item lm
                       ON s.site_id = lm.site_id
                     AND (lm.active = pkg_constants.con_activeflag_yes)
                     AND lm.quote_header_id = in_quoteheaderid
                       LEFT OUTER JOIN line_item_detail ld
                       ON lm.line_item_id = ld.line_item_id
                     AND (ld.active = pkg_constants.con_activeflag_yes)
                       LEFT OUTER JOIN attribute_mapping am
                       ON ld.attribute_mapping_id = am.attribute_mapping_id
                       LEFT OUTER JOIN price_line_item_detail pd
                       ON lm.line_item_id = pd.line_item_id
                     AND (pd.active = pkg_constants.con_activeflag_yes)
                       LEFT OUTER JOIN access_qref aq
                       ON aq.quote_site_id = qs.quote_site_id
                     AND aq.access_qref = pd.external_qref
                       LEFT OUTER JOIN cpe_qref cq
                       ON cq.quote_site_id = qs.quote_site_id
                     AND (   cq.cpe_qref = pd.external_qref
                          OR cq.secondary_cpe_qref = pd.external_qref
                         )
                       LEFT OUTER JOIN price_line_item pl
                       ON pd.price_line_item_id = pl.price_line_item_id
                       LEFT OUTER JOIN cost_detail cd
                       ON cd.price_line_item_detail_id =
                                                  pd.price_line_item_detail_id
                     AND (COST != 0)                                    --Syed
                 WHERE q.quote_id = in_quoteid
                   AND qh.quote_header_id = in_quoteheaderid
                   AND (qs.active = pkg_constants.con_activeflag_yes)
                   --modified by Tanmayi on 15/09/2010 for Central Site R5
                   AND NVL (s.main_site_flag, '-1') !=
                                              pkg_constants.con_activeflag_yes
              --    AND (lm.active = pkg_constants.con_activeflag_yes)
              --    AND (ld.active = pkg_constants.con_activeflag_yes)
         ORDER BY      s.site_id,
                       lm.product_name,
                       lm.fallback_type,
                       am.attribute_mapping_id;

      /*Added the below cursor for
      904 Order Site to Site SLA */
      OPEN out_serviceoption FOR
         SELECT am.sqe_attribute "Report Name", lid.VALUE "Selected or not",
                lid.quantity "Quantity", li.line_item_id "Line_Item_Id",
                plid.price, plid.discount, plid.price_line_item_id,
                plid.charge_type, price_line_item_detail_id
           FROM quote_header qh,
                line_item li,
                line_item_detail lid,
                attribute_mapping am,
                price_line_item_detail plid
          WHERE qh.quote_header_id = in_quoteheaderid
            AND li.quote_header_id = qh.quote_header_id
            AND lid.line_item_id = li.line_item_id
            AND lid.attribute_mapping_id = 501
            AND am.attribute_mapping_id = lid.attribute_mapping_id
            AND lid.active = pkg_constants.con_activeflag_yes
            AND plid.line_item_id(+) = li.line_item_id
            AND plid.active(+) = pkg_constants.con_activeflag_yes;

     OPEN out_qref_caveat FOR
         SELECT DISTINCT s.NAME AS site_name, aq.access_qref AS access_qref,
                ac.access_caveat_id AS access_caveat_id,
                ac.description AS description,
                ac.CAVEAT_ID
           FROM quote q LEFT OUTER JOIN quote_header qh
                ON q.quote_id = qh.quote_id
                LEFT OUTER JOIN quote_site qs
                ON qh.quote_header_id = qs.quote_header_id
                INNER JOIN site s ON qs.site_id = s.site_id
                LEFT OUTER JOIN access_qref aq
                ON qs.quote_site_id = aq.quote_site_id
                INNER JOIN price_line_item_detail plid
                ON plid.external_qref = aq.access_qref
                LEFT OUTER JOIN access_caveat ac
                ON ac.access_qref_id = aq.access_qref_id
          WHERE q.quote_id = in_quoteid
            AND qh.quote_header_id = in_quoteheaderid
            AND (qs.active = pkg_constants.con_activeflag_yes)
            AND (plid.active = pkg_constants.con_activeflag_yes)
            --modified by Tanmayi on 15/09/2010 for Central Site R5
            AND NVL (s.main_site_flag, '-1') !=
                                              pkg_constants.con_activeflag_yes;
   END sps_offerinfo_ptp;

END pkg_offer;
/


CREATE OR REPLACE PACKAGE BODY pkg_offer_r5
IS
   PROCEDURE sps_offerinfo (
      in_quoteid           IN       quote.quote_id%TYPE,
      in_quoteheaderid     IN       quote_header.quote_header_id%TYPE,
      in_productid         IN       product_selection.product_id%TYPE,
                                                -- Added as part of R5 Re-eng
      out_custdetails      OUT      sys_refcursor,
      out_sitedetails      OUT      sys_refcursor,
      out_serviceoption    OUT      sys_refcursor,
      out_qref_caveat      OUT      sys_refcursor,
      out_productdetails   OUT      sys_refcursor,
                          -- Ghucs,added new OUT parameter out_productdetails
      -- Added in_product_name on 17/12/2010 as part of introducing new table QUOTE_STATUS
      in_product_name         IN       VARCHAR2 DEFAULT NULL
   )
   AS
   BEGIN
      OPEN out_custdetails FOR
         SELECT DISTINCT        -- Added DISTINCT clause as part of R5 Re-eng
                         q.quote_id, qh.quote_header_id, q.customer_name,
                         nvl(qs.status,qh.status) status, -- Added on 17/12/2010 as part of using status in quote_status table
                         qh.quote_name, qh.bid_number, qh.VERSION,
                         qh.customer_signed_date, qh.opportunity_id,

                         -- ##### Change for 904 - Multiple Price Book  begin
                         --pl.price_list AS "PRICE_LIST",
                         qpl.price_list_name AS "PRICE_LIST_NAME",

                         -- ##### Change for 904 - Multiple Price Book  end
                         qh.contract_term, ps.product_id,
                         ps.product_name AS "PRODUCT_NAME",
                         qh.currency_id AS "currency_id",
                         qh.currency AS "CURRENCY",
                         da.submitted_by AS "DISCOUNT_SUBMITTEDBY",
                         da.approval_status AS "DISCOUNTAPPROVAL_STATUS",
                         da.reason AS "DISCOUNT_REASON",

                         -- ##### Change for 904 - Quote Tool Functionality - Discount  begin
                         q.created_date AS "QUOTE_CREATED_DATE",

                         -- ##### Change for 904 - Quote Tool Functionality - Discount  end
                         qh.capcheck_refno,
                         bt.NAME AS "SUBSIDIARY"                  --Added 904
                    FROM quote q LEFT OUTER JOIN quote_header qh
                         ON q.quote_id = qh.quote_id
                         -- Added on 17/12/2010 as part of using status in quote_status table
                         LEFT OUTER JOIN quote_status qs
             ON qh.quote_header_id = qs.quote_header_id
                         AND qs.product_name = in_product_name
                         LEFT OUTER JOIN customer c
                         ON c.customer_id = q.customer_id
                         LEFT OUTER JOIN bt_subsidiary bt
                         ON c.bt_subsidiary_id = bt.bt_subsidiary_id
                         LEFT OUTER JOIN quote_price_list qpl
                         ON qh.quote_header_id = qpl.quote_header_id
                          -- ##### Change for 904 - Multiple Price Book  begin
                         --LEFT OUTER JOIN price_list pl
                          --ON pl.price_list_id = qpl.price_list_id
                          -- ##### Change for 904 - Multiple Price Book  end
                         LEFT OUTER JOIN product_selection ps
                         ON qh.quote_id = ps.quote_id
                         LEFT OUTER JOIN discount_approval da
                         ON qh.quote_header_id = da.quote_header_id
                       AND da.active = pkg_constants.con_activeflag_yes
                   WHERE q.quote_id = in_quoteid
                     AND qh.quote_header_id = in_quoteheaderid
                     AND ps.product_id =
                                     in_productid
                                                 -- Added as part of R5 Re-eng
                     AND ps.active = pkg_constants.con_activeflag_yes
                ORDER BY customer_name;

      --Begins  Ghucs,added new  refcursor out_productdetails to display the product details.
      OPEN out_productdetails FOR
         SELECT   'HIPT - GLOBAL' AS "Product Name",
                                  -- Modified for GHUCS by Amit on 26-JUL-2010
                  lm.product_name AS "Friendly Name",
                  DECODE (lm.product_name,
                          UPPER (am.sqe_attribute), '-',
                          am.sqe_attribute
                         ) AS "Attribute Name",
                  ld.VALUE AS "Value",
                  am.attribute_mapping_id AS "Attribute ID",
                  NVL (ld.quantity, 1) AS "LINE_ITEM_QUANTITY",
                  pd.price AS "LINE_ITEM_DETAIL_PRICE",
                  pd.rent_price AS "RENTAL PRICE", qs.site_id AS "SITE ID",
                  lm.product_id AS "Product Id",                       --GHUCS
                  ad.building_number AS "BUILDING NUMBER", ad.city AS "CITY",
                  ad.state AS "STATE", ad.post_zip_code AS "POST ZIP CODE",
                  ad.address_line1 AS "ADDRESS LINE1",
                  pd.discount AS "DISCOUNT", lm.priced AS "PRICED FLAG"
             FROM quote q LEFT OUTER JOIN quote_header qh
                  ON q.quote_id = qh.quote_id
                  LEFT OUTER JOIN quote_site qs
                  ON qh.quote_header_id = qs.quote_header_id
                  INNER JOIN site s ON qs.site_id = s.site_id
                  --Joined Address COUNTRY tables to fetch the address details
                  LEFT OUTER JOIN address ad ON s.address_id = ad.address_id
                  LEFT OUTER JOIN country cu ON ad.country_id = cu.country_id
                  INNER JOIN line_item lm
                  ON s.site_id = lm.site_id
                AND lm.quote_header_id = in_quoteheaderid
                  INNER JOIN line_item_detail ld
                  ON lm.line_item_id = ld.line_item_id
                  LEFT OUTER JOIN attribute_mapping am
                  ON ld.attribute_mapping_id = am.attribute_mapping_id
                  LEFT OUTER JOIN price_line_item_detail pd
                  ON lm.line_item_id = pd.line_item_id
                  LEFT OUTER JOIN price_line_item pl
                  ON pd.price_line_item_id = pl.price_line_item_id
            WHERE q.quote_id = in_quoteid
              AND qh.quote_header_id = in_quoteheaderid
              AND (qs.active = pkg_constants.con_activeflag_yes)
              AND (lm.active = pkg_constants.con_activeflag_yes)
              AND (ld.active = pkg_constants.con_activeflag_yes)
              AND (   pd.active = pkg_constants.con_activeflag_yes
                   OR pd.active IS NULL
                  )
         ORDER BY ld.line_item_detail_id, lm.product_name;

      -- Ends Ghucs,added new  refcursor out_productdetails to display the product details.
      OPEN out_sitedetails FOR
         SELECT UNIQUE q.quote_id, qh.quote_header_id, s.site_id,
                       s.NAME AS "SITE_NAME", cu.NAME AS "COUNTRY",
                       s.resilience AS "RESILIENCE_TYPE",
                       qs.active AS "SITE_ACTIVE", lm.product_id,
                       lm.product_name, lm.active AS "LINE_ITEM_ACTIVE",
                       lm.currency AS "LINE_ITEM_CURRENCY", lm.fallback_type,
                       lm.quantity AS "LINE_ITEM_QUANTITY", lm.priced,
                       lm.part_type, lm.row_id, aq.access_qref,
                       aq.pricing_status, aq.port_status,          --904 added
                                                         aq.nni_flag,

                       /*Start : R5 GHUCS*/    -- Added by Amit on 29/07/2010
                       ad.building_number AS "BUILDING NUMBER",
                       ad.city AS "CITY", ad.state AS "STATE",
                       ad.post_zip_code AS "POST ZIP CODE",

                       /*end : R5 GHUCS */
                       ad.address_line1 AS "ADDRESS LINE1", aq.apop_node,
                       aq.gpop_node, aq.gpop_id, aq.apop_id,
                       cq.pri_status AS "CPE_QREF_PRISTATUS",
                       cq.sec_status AS "CPE_QREF_SECSTATUS",
                       ld.line_item_detail_id,
                       ld.active AS "LINE_ITEM_DETAILS_ACTIVE",
                       am.attribute_mapping_id, am.sqe_display_text,
                       am.active AS "ATTRIBUTE_ACTIVE", am.attribute_level,
                       ld.VALUE AS "ATTRIBUTE_VALUE",
                       pd.currency AS "PRICE_CURRENCY",
                       pd.charge_type AS "DOMAIN", pd.discount,
                       pd.active AS "PRICE_LINE_ITEM_ACTIVE",
                       pl.price_line_item_id, pd.price_line_item_detail_id,
                       pl.price_line_description,
                       pd.price AS "LINE_ITEM_DETAIL_PRICE", pd.external_qref,
                       pd.onetime_port_discount, pd.recurring_port_discount,
                       cd.COST AS "COST", cd.cost_type AS "COST_TYPE",
                       cd.currency AS "COST_CURRENCY"
                  FROM quote q LEFT OUTER JOIN quote_header qh
                       ON q.quote_id = qh.quote_id
                       LEFT OUTER JOIN quote_site qs
                       ON qh.quote_header_id = qs.quote_header_id
                       INNER JOIN site s ON qs.site_id = s.site_id
                       LEFT OUTER JOIN address ad ON s.address_id =
                                                                 ad.address_id
                       LEFT OUTER JOIN country cu
                       ON ad.country_id = cu.country_id
                       LEFT OUTER JOIN line_item lm
                       ON s.site_id = lm.site_id
                     AND (lm.active = pkg_constants.con_activeflag_yes)
                     AND lm.quote_header_id = in_quoteheaderid
                       LEFT OUTER JOIN line_item_detail ld
                       ON lm.line_item_id = ld.line_item_id
                     AND (ld.active = pkg_constants.con_activeflag_yes)
                       LEFT OUTER JOIN attribute_mapping am
                       ON ld.attribute_mapping_id = am.attribute_mapping_id
                       LEFT OUTER JOIN price_line_item_detail pd
                       ON lm.line_item_id = pd.line_item_id
                     AND (pd.active = pkg_constants.con_activeflag_yes)
                       LEFT OUTER JOIN access_qref aq
                       ON aq.quote_site_id = qs.quote_site_id
                     AND aq.access_qref = pd.external_qref
                       LEFT OUTER JOIN cpe_qref cq
                       ON cq.quote_site_id = qs.quote_site_id
                     AND (   cq.cpe_qref = pd.external_qref
                          OR cq.secondary_cpe_qref = pd.external_qref
                         )
                       LEFT OUTER JOIN price_line_item pl
                       ON pd.price_line_item_id = pl.price_line_item_id
                       LEFT OUTER JOIN cost_detail cd
                       ON cd.price_line_item_detail_id =
                                                  pd.price_line_item_detail_id
                     AND (COST != 0)                                    --Syed
                 WHERE q.quote_id = in_quoteid
                   AND qh.quote_header_id = in_quoteheaderid
                   AND lm.product_id =
                                     in_productid
                                                 -- Added as part of R5 Re-eng
                   AND (qs.active = pkg_constants.con_activeflag_yes)
              --    AND (lm.active = pkg_constants.con_activeflag_yes)
              --    AND (ld.active = pkg_constants.con_activeflag_yes)
         ORDER BY      s.site_id,
                       lm.product_name,
                       lm.fallback_type,
                       am.attribute_mapping_id;

      /*Added the below cursor for
      904 Order Site to Site SLA */
      OPEN out_serviceoption FOR
         SELECT am.sqe_attribute "Report Name", lid.VALUE "Selected or not",
                lid.quantity "Quantity", li.line_item_id "Line_Item_Id",
                plid.price, plid.discount, plid.price_line_item_id,
                plid.charge_type, price_line_item_detail_id
           FROM quote_header qh,
                line_item li,
                line_item_detail lid,
                attribute_mapping am,
                price_line_item_detail plid
          WHERE qh.quote_header_id = in_quoteheaderid
            AND li.product_id = in_productid     -- Added as part of R5 Re-eng
            AND li.quote_header_id = qh.quote_header_id
            AND lid.line_item_id = li.line_item_id
            AND lid.attribute_mapping_id = 501
            AND am.attribute_mapping_id = lid.attribute_mapping_id
            AND lid.active = pkg_constants.con_activeflag_yes
            AND plid.line_item_id(+) = li.line_item_id
            AND plid.active(+) = pkg_constants.con_activeflag_yes;

      OPEN out_qref_caveat FOR
         SELECT s.NAME AS site_name, aq.access_qref AS access_qref,
                ac.access_caveat_id AS access_caveat_id,
                ac.description AS description
           FROM quote q LEFT OUTER JOIN quote_header qh
                ON q.quote_id = qh.quote_id
                LEFT OUTER JOIN quote_site qs
                ON qh.quote_header_id = qs.quote_header_id
                INNER JOIN site s ON qs.site_id = s.site_id
                LEFT OUTER JOIN access_qref aq
                ON qs.quote_site_id = aq.quote_site_id
                INNER JOIN price_line_item_detail plid
                ON plid.external_qref = aq.access_qref
                LEFT OUTER JOIN access_caveat ac
                ON ac.access_qref_id = aq.access_qref_id
          WHERE q.quote_id = in_quoteid
            AND qh.quote_header_id = in_quoteheaderid
            AND (qs.active = pkg_constants.con_activeflag_yes)
            AND (plid.active = pkg_constants.con_activeflag_yes);
   END sps_offerinfo;


   PROCEDURE sps_pricingdetails (
      in_quoteheaderid       IN       quote_header.quote_header_id%TYPE,
      in_productid           IN       product_selection.product_id%TYPE,
                                                 -- Added as part of R5 Re-eng
      in_attributelist       IN       VARCHAR2,
      out_reportpricingdet   OUT      sys_refcursor
   )
   AS
   BEGIN
      OPEN out_reportpricingdet FOR
         SELECT am.sqe_attribute "Report Name", lid.VALUE "Selected or not",
                lid.quantity "Quantity", li.line_item_id "Line_Item_Id",
                plid.price, plid.discount, plid.price_line_item_id,
                plid.price_line_item_detail_id, plid.charge_type
           FROM quote_header qh,
                line_item li,
                line_item_detail lid,
                attribute_mapping am,
                price_line_item_detail plid
          WHERE qh.quote_header_id = in_quoteheaderid
            AND li.product_id = in_productid     -- Added as part of R5 Re-eng
            AND li.quote_header_id = qh.quote_header_id
            AND lid.line_item_id = li.line_item_id
            -- AND lid.attribute_mapping_id in (501,502,503,504,505,506)
            AND lid.attribute_mapping_id IN (
                   SELECT TO_NUMBER (COLUMN_VALUE)
                     FROM TABLE
                             (CAST
                                 (pkg_common.fn_splitdata (in_attributelist,
                                                           ','
                                                          ) AS varchar2_ntt
                                 )
                             ))
            AND am.attribute_mapping_id = lid.attribute_mapping_id
            AND lid.active = pkg_constants.con_activeflag_yes
            AND plid.line_item_id(+) = li.line_item_id
            AND plid.active(+) = pkg_constants.con_activeflag_yes;
   /*exception when others then
   jay_debug('sps_pricingdetails','exception',sqlerrm); */
   END sps_pricingdetails;


END pkg_offer_r5;
/


CREATE OR REPLACE PACKAGE BODY PKG_ORDER_R5
-- ****************************************************************************
-- Copyright  : British Telecommunication Plc.
-- Author     : Tech Mahindra
-- Created    : 30-DEC-2010
-- Purpose    : This Package is used for inserting/updating All Order releated information.
-- Assumption : None.
-- Notes      : None.
-- Changes    :
-- Version    Date          Author        Description
-- -------    ----          ------        -----------
--  1.1       21-JAN-2011   Sandeep Singh 1.Changes done in sp_expedio_response for GHUCS R11.

-- ****************************************************************************

AS

v_sql_code     NUMBER;        -- Added by Sujana on 23/11/2010 as part of exception handling
v_sql_errm     VARCHAR2(150); -- Added by Sujana on 23/11/2010 as part of exception handling

  PROCEDURE spi_order (
      in_quoteheaderid              IN       quote_header.quote_header_id%TYPE,
      in_bid                        IN       quote_header.bid_number%TYPE,
      in_oppid                      IN       quote_header.opportunity_id%TYPE,
      in_orderstatus                IN       order_header.order_status%TYPE,
      in_ordertype                  IN       order_header.order_type%TYPE,
      in_createdby                  IN       order_header.created_by%TYPE,
      in_contractid                 IN       order_header.contract_id%TYPE,
      in_comments                   IN       order_header.comments%TYPE,
      in_ofsd                       IN       VARCHAR2,
      in_quotestatus                IN       VARCHAR2,
      in_is_order_rejected          IN       VARCHAR2,
      --904 Sprint2 clean order management
      --904 R1 IP Clear Reach out begin
      in_is_order_ipclearreachout   IN       order_header.is_order_ipclearreachoutsite%TYPE,
      in_ftip_number                IN       order_header.ftip_number%TYPE,
      in_emailid                    IN       order_header.emailid%TYPE,
      --904 R1 IP Clear Reach out end
      --R3 Hub and Spoke begin
      in_vpn_connectivity_mode      IN       order_header.vpn_connectivity_mode%TYPE,
      --R3 Hub and Spoke end
      io_orderheaderid              IN OUT   order_header.order_header_id%TYPE,
      out_status                    OUT      NUMBER,
      out_errmsg                    OUT      VARCHAR2,
      in_product_name    IN       VARCHAR2 DEFAULT NULL
   )
   AS
      v_ordercount   NUMBER;
      v_ofsd         DATE;
--v_orderheaderid order_header.order_header_id%TYPE;
   BEGIN
      v_ofsd := TO_DATE (in_ofsd, 'DD-MON-YYYY');

      IF (io_orderheaderid IS NULL)
      THEN
         BEGIN
            --904 R1 IP Clear Reach out begin

            --R3 Hub and Spoke begin - added vpn_connectivity_mode in INSERT statement
            INSERT INTO order_header
                        (order_header_id, quote_header_id,
                         order_type, order_status, contract_id,
                         comments, order_form_sign_date, created_by,
                         created_date, is_order_rejected,
                         is_order_ipclearreachoutsite, ftip_number,
                         emailid, vpn_connectivity_mode,product_name
                        )
                 VALUES (order_header_id.NEXTVAL, in_quoteheaderid,
                         in_ordertype, in_orderstatus, in_contractid,
                         in_comments, v_ofsd, in_createdby,
                         SYSDATE, in_is_order_rejected,
                         in_is_order_ipclearreachout, in_ftip_number,
                         in_emailid, in_vpn_connectivity_mode,in_product_name
                        )
              RETURNING order_header_id
                   INTO io_orderheaderid;

            --R3 Hub and Spoke end - added vpn_connectivity_mode in INSERT statement
            --904 R1 IP Clear Reach out end

            --   COMMIT;
            out_errmsg := 'Order Created';
            out_status := pkg_constants.con_status_success;
         END;
      ELSE
         BEGIN
            SELECT COUNT (*)
              INTO v_ordercount
              FROM order_header
             WHERE order_header_id = io_orderheaderid;

            IF (v_ordercount = 0)
            THEN
               BEGIN
                  out_errmsg := 'Invalid Order';
                  out_status := pkg_constants.con_status_failure;
               END;
            ELSE
               BEGIN
                  --904 R1 IP Clear Reach out begin
                     --R3 Hub and Spoke begin - updating vpn_connectivity_mode
                  UPDATE order_header
                     SET quote_header_id = in_quoteheaderid,
                         order_type = in_ordertype,
                         order_status = in_orderstatus,
                         contract_id = in_contractid,
                         comments = in_comments,
                         order_form_sign_date = v_ofsd,
                         modified_by = in_createdby,
                         modified_date = SYSDATE,
                         is_order_rejected = in_is_order_rejected,
                         is_order_ipclearreachoutsite =
                                                   in_is_order_ipclearreachout,
                         ftip_number = in_ftip_number,
                         emailid = in_emailid,
                         vpn_connectivity_mode = in_vpn_connectivity_mode,
                         product_name=in_product_name
                   WHERE order_header_id = io_orderheaderid;

                  --R3 Hub and Spoke end - updating vpn_connectivity_mode
                  --904 R1 IP Clear Reach out end
                  out_errmsg := 'Order Modified';
                  out_status := pkg_constants.con_status_success;
               END;
            END IF;
         END;
      END IF;

      UPDATE quote_header
         SET opportunity_id = in_oppid,
             bid_number = in_bid,
             status = in_quotestatus,
             modified_by = in_createdby,
             modified_date = SYSDATE
       WHERE quote_header_id = in_quoteheaderid;

      -- Added by Sujana on 17/12/2010 as part of introducing new table QUOTE_STATUS
      UPDATE quote_status
         SET status = in_quotestatus
       WHERE quote_header_id = in_quoteheaderid
         AND product_name = in_product_name;
      --

   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         -- Added by Sujana on 23/11/2010 as part of exception handling
         out_errmsg := substr(SQLERRM,1,150);
         v_sql_code := SQLCODE;
         PKG_COMMON.spi_error_log(
                                  NULL,
                                  in_quoteheaderid,
                                  NULL,
                                  NULL,
                                  'PKG_ORDER_R5',
                                  'SPI_ORDER',
                                  v_sql_code,
                                  out_errmsg
                                 );
   END spi_order;



PROCEDURE spu_update_exp_st_details
  (
    --added on 6th Aug 2010 by Bharathi and Tanmayi to update expedio details
    in_exp_output IN ORDERSITE_TAB,
    in_modifiedby IN site.modified_by%TYPE,
    out_status OUT NUMBER,
    out_errmsg OUT VARCHAR2 )
AS
  v_siteid site.site_id%TYPE;
BEGIN
  FOR i IN in_exp_output.FIRST .. in_exp_output.LAST
  LOOP
    IF (UPPER (in_exp_output (i).flag) = 'B')
      --if BFG_Site details are passed for updation
      THEN
      BEGIN
        SELECT site_id
        INTO v_siteid
        FROM site
        WHERE bfg_site_id = in_exp_output (i).bfg_site_id;
        UPDATE site
        SET prop_site_id  = in_exp_output (i).prop_site_id,
          bfg_address_id  = in_exp_output (i).bfg_address_id,
          bfg_subloc_id   = in_exp_output (i).bfg_subloc_id,
          prop_address_id = in_exp_output (i).prop_address_id,
          prop_subloc_id  = in_exp_output (i).prop_subloc_id,
          CHILD_EXPEDIO_REF_ID = in_exp_output (i).CHILD_EXPEDIO_REF_ID,
          CR_PROP_ID = in_exp_output (i).CR_PROP_ID,
          modified_by     = in_modifiedby,
          modified_date   = SYSDATE ()
        WHERE site_id     = v_siteid;
      END;
    ELSIF (UPPER (in_exp_output (i).flag) = 'E')
      --if Expedio site details are passed for updation
      THEN
      BEGIN
        SELECT site_id
        INTO v_siteid
        FROM site
        WHERE upper(expedio_site_id) = upper(in_exp_output (i).expedio_site_id);
        UPDATE site
        SET prop_site_id  = in_exp_output (i).prop_site_id,
          bfg_site_id     = in_exp_output (i).bfg_site_id,
          bfg_address_id  = in_exp_output (i).bfg_address_id,
          bfg_subloc_id   = in_exp_output (i).bfg_subloc_id,
          prop_address_id = in_exp_output (i).prop_address_id,
          prop_subloc_id  = in_exp_output (i).prop_subloc_id,
          CHILD_EXPEDIO_REF_ID = in_exp_output (i).CHILD_EXPEDIO_REF_ID,
          CR_PROP_ID = in_exp_output (i).CR_PROP_ID,
          modified_by     = in_modifiedby,
          modified_date   = SYSDATE ()
        WHERE site_id     = v_siteid;
      END;
    ELSE
      BEGIN
        --if SQE site details are passed for updation
        IF (UPPER (in_exp_output (i).flag) = 'S') THEN
          UPDATE site
          SET prop_site_id      = in_exp_output (i).prop_site_id,
            bfg_site_id         = in_exp_output (i).bfg_site_id,
            bfg_address_id      = in_exp_output (i).bfg_address_id,
            bfg_subloc_id       = in_exp_output (i).bfg_subloc_id,
            prop_address_id     = in_exp_output (i).prop_address_id,
            prop_subloc_id      = in_exp_output (i).prop_subloc_id,
            bfg_site_contact_id = in_exp_output (i).bfg_site_contact_id,
            CHILD_EXPEDIO_REF_ID = in_exp_output (i).CHILD_EXPEDIO_REF_ID,
            CR_PROP_ID = in_exp_output (i).CR_PROP_ID,
            modified_by         = in_modifiedby,
            modified_date       = SYSDATE ()
          WHERE site_id         = in_exp_output (i).sqe_site_id;
        END IF;
      END;
    END IF;
  END LOOP;
  out_status := pkg_constants.con_status_success;
EXCEPTION
WHEN OTHERS THEN
  out_status := pkg_constants.con_status_failure;
  -- Added by Sujana on 23/11/2010 as part of exception handling
  out_errmsg := substr(SQLERRM,1,150);
  v_sql_code := SQLCODE;
  PKG_COMMON.spi_error_log(
                           NULL,
                           NULL,
                           v_siteid,
                           NULL,
                           'PKG_ORDER_R5',
                           'SPU_UPDATE_EXP_ST_DETAILS',
                           v_sql_code,
                           out_errmsg
                          );
END spu_update_exp_st_details;


/* Procedure for Expedio Response R5 for order rejection on 07/08/2010*/
PROCEDURE sp_expedio_response
  (
    in_quote_id             IN EXPEDIO_RESPONSE.quote_id%TYPE,
    in_quote_header_id      IN EXPEDIO_RESPONSE.quote_header_id%TYPE,
    in_version              IN EXPEDIO_RESPONSE.version%TYPE,
    in_exp_order_id         IN EXPEDIO_RESPONSE.exp_order_id%TYPE,
    in_exp_quote_id         IN EXPEDIO_RESPONSE.exp_quote_id%TYPE,
    in_expedio_ref_id       IN EXPEDIO_RESPONSE.expedio_ref_id%TYPE,
    in_expedio_quoteversion IN EXPEDIO_RESPONSE.expedio_quoteversion%TYPE,
    in_site_id              IN EXPEDIO_RESPONSE.site_id%TYPE,
    in_product_id           IN EXPEDIO_RESPONSE.product_id%TYPE,
    in_product_name         IN EXPEDIO_RESPONSE.product_name%TYPE,
    in_modified_by          IN EXPEDIO_RESPONSE.modified_by%TYPE,
    in_modified_date        IN EXPEDIO_RESPONSE.modified_date%TYPE,
    in_reason               IN EXPEDIO_RESPONSE.reason%TYPE,
    in_status               IN EXPEDIO_RESPONSE.status%TYPE,
    in_sub_status           IN EXPEDIO_RESPONSE.sub_status%TYPE,
    in_completion_date      IN EXPEDIO_RESPONSE.completion_date%TYPE,
    in_ifc_flag             IN EXPEDIO_RESPONSE.IFC_FLAG%TYPE,
    out_errmsg              OUT VARCHAR2
    )
AS
  v_count         NUMBER (10);
  v_expedio_count NUMBER (10);
  -- v_site_count   NUMBER (10);
BEGIN
  SELECT COUNT (*)
  INTO v_count
  FROM
    /*quote q LEFT OUTER JOIN */
    quote_header qh
    --ON q.quote_id = qh.quote_id
  LEFT OUTER JOIN quote_site qs
  ON qh.quote_header_id = qs.quote_header_id
  INNER JOIN site s
  ON qs.site_id          = s.site_id
  WHERE s.site_id        = in_site_id
  AND qh.quote_header_id = in_quote_header_id
  --and qh.expedio_quoteversion=in_expedio_quoteversion
  and NVL(qh.expedio_quoteversion,'1.0')=in_expedio_quoteversion                -- NVL included By Sandeep on 19-JAN-2010 for handling GHUCS scenario
  AND (qs.active         = pkg_constants.con_activeflag_yes);

  IF v_count            <> 0 THEN
    SELECT COUNT (*)
    INTO v_expedio_count
    FROM EXPEDIO_RESPONSE
    WHERE site_id       = in_site_id
    AND quote_header_id = in_quote_header_id
    --and expedio_quoteversion=in_expedio_quoteversion;
    AND NVL(expedio_quoteversion,'1.0')=in_expedio_quoteversion;                -- NVL included By Sandeep on 19-JAN-2010 for handling GHUCS scenario

    IF v_expedio_count  = 0 THEN
      INSERT
      INTO EXPEDIO_RESPONSE
        (
          EXPEDIO_RESPONSE_ID,
          EXP_ORDER_ID,
          EXP_QUOTE_ID,
          EXPEDIO_REF_ID,
          EXPEDIO_QUOTEVERSION,
          SITE_ID,
          PRODUCT_ID,
          PRODUCT_NAME,
          QUOTE_ID,
          QUOTE_HEADER_ID,
          VERSION,
          MODIFIED_BY,
          MODIFIED_DATE,
          REASON,
          STATUS ,
          SUB_STATUS,
          COMPLETION_DATE,
          IFC_FLAG
        )
        VALUES
        (
          expedio_response_id.nextval,
          in_exp_order_id ,
          in_exp_quote_id ,
          in_expedio_ref_id ,
          in_expedio_quoteversion ,
          in_site_id,
          in_product_id,
          in_product_name ,
          in_QUOTE_ID ,
          in_QUOTE_HEADER_ID ,
          in_VERSION,
          in_modified_by,
          sysdate,
          in_reason,
          in_status,
          in_sub_status,
          in_completion_date,
          in_ifc_flag
          );
    ELSE
      UPDATE expedio_response
      SET EXP_ORDER_ID      =in_exp_order_id,
        EXP_QUOTE_ID        =in_exp_quote_id,
        EXPEDIO_REF_ID      =in_expedio_ref_id,
        EXPEDIO_QUOTEVERSION=in_expedio_quoteversion,
        SITE_ID             =in_site_id,
        PRODUCT_ID          =in_product_id,
        PRODUCT_NAME        =in_product_name,
        QUOTE_ID            =in_QUOTE_ID,
        QUOTE_HEADER_ID     =in_QUOTE_HEADER_ID,
        VERSION             =in_VERSION,
        MODIFIED_BY         =in_modified_by,
        MODIFIED_DATE       =sysdate,
        REASON             =in_reason,
        STATUS             =in_status,
        SUB_STATUS          =in_sub_status,
        COMPLETION_DATE     =in_completion_date,
        IFC_FLAG            =in_ifc_flag
      WHERE site_id         = in_site_id
      AND quote_header_id   = in_quote_header_id
      and expedio_quoteversion=in_expedio_quoteversion;

      IF SQL%NOTFOUND THEN
        NULL;
      END IF;
      out_errmsg := 'Successful';
    END IF;
  ELSIF (in_quote_header_id IS NOT NULL AND in_site_id IS NULL) THEN

    SELECT COUNT (*)
    INTO v_expedio_count
    FROM expedio_response
    WHERE site_id      IS NULL
    AND quote_header_id = in_quote_header_id
    --and expedio_quoteversion=in_expedio_quoteversion;
    AND NVL(expedio_quoteversion,'1.0')= in_expedio_quoteversion;                -- NVL included By Sandeep on 19-JAN-2010 for handling GHUCS scenario

    IF v_expedio_count  = 0 THEN
      INSERT
      INTO EXPEDIO_RESPONSE
        (
          EXPEDIO_RESPONSE_ID,
          EXP_ORDER_ID,
          EXP_QUOTE_ID,
          EXPEDIO_REF_ID,
          EXPEDIO_QUOTEVERSION,
          SITE_ID,
          PRODUCT_ID,
          PRODUCT_NAME,
          QUOTE_ID,
          QUOTE_HEADER_ID,
          VERSION,
          MODIFIED_BY,
          MODIFIED_DATE,
          REASON,
          STATUS ,
          SUB_STATUS,
          COMPLETION_DATE,
          IFC_FLAG
        )
        VALUES
        (
          expedio_response_id.nextval,
          in_exp_order_id ,
          in_exp_quote_id ,
          in_expedio_ref_id ,
          in_expedio_quoteversion ,
          in_site_id,
          in_product_id,
          in_product_name ,
          in_QUOTE_ID ,
          in_QUOTE_HEADER_ID ,
          in_VERSION,
          in_modified_by,
          sysdate,
          in_reason,
          in_status,
          in_sub_status,
          in_completion_date,
          in_ifc_flag
        ) ;
    ELSE
      UPDATE expedio_response
      SET EXP_ORDER_ID      =in_exp_order_id,
        EXP_QUOTE_ID        =in_exp_quote_id,
        EXPEDIO_REF_ID      =in_expedio_ref_id,
        EXPEDIO_QUOTEVERSION=in_expedio_quoteversion,
        SITE_ID             =in_site_id,
        PRODUCT_ID          =in_product_id,
        PRODUCT_NAME        =in_product_name,
        QUOTE_ID            =in_QUOTE_ID,
        QUOTE_HEADER_ID     =in_QUOTE_HEADER_ID,
        VERSION             =in_VERSION,
        MODIFIED_BY         =in_modified_by,
        MODIFIED_DATE       =sysdate,
        REASON             =in_reason,
        STATUS             =in_status,
        SUB_STATUS          =in_sub_status,
        COMPLETION_DATE     =in_completion_date,
        IFC_FLAG              =in_ifc_flag
      WHERE site_id         is null
      AND quote_header_id   = in_quote_header_id
      --and expedio_quoteversion=in_expedio_quoteversion;
      AND NVL(expedio_quoteversion,'1.0')= in_expedio_quoteversion;                -- NVL included By Sandeep on 19-JAN-2010 for handling GHUCS scenario

      IF SQL%NOTFOUND THEN
        NULL;
      END IF;
      out_errmsg := 'Successful';
    END IF;

  ELSE --IF v_site_count <> 0 THEN
    -- out_status := pkg_constants.con_status_failure;
    out_errmsg := 'INVALID QUOTE AND SITE';
         PKG_COMMON.spi_error_log(
                                  in_quote_id,
                                  in_quote_header_id,
                                  in_site_id,
                                  in_expedio_quoteversion,
                                  'PKG_ORDER_R5',
                                  'SP_EXPEDIO_RESPONSE',
                                  pkg_constants.con_status_failure,
                                  out_errmsg
                                 );

  END IF;
  out_errmsg := 'Successful';                                                      -- NVL included By Sandeep on 19-JAN-2010 for handling GHUCS scenario

EXCEPTION
WHEN OTHERS THEN
  --    out_status := pkg_constants.con_status_failure;
  -- Added by Sujana on 23/11/2010 as part of exception handling
  out_errmsg := substr(SQLERRM,1,150);
  v_sql_code := SQLCODE;
  PKG_COMMON.spi_error_log(
                           in_quote_id,
                           in_quote_header_id,
                           in_site_id,
                           NULL,
                           'PKG_ORDER_R5',
                           'SP_EXPEDIO_RESPONSE',
                           v_sql_code,
                           out_errmsg
                          );
END sp_expedio_response;


 -- for r5 order rejection update

PROCEDURE spu_expedio_response (
    in_exp_order_id         IN EXPEDIO_RESPONSE.EXP_ORDER_ID%TYPE,
    in_expedio_quoteversion IN EXPEDIO_RESPONSE.EXPEDIO_QUOTEVERSION%TYPE,
    in_reason               IN EXPEDIO_RESPONSE.REASON%TYPE,
    in_status               IN EXPEDIO_RESPONSE.STATUS%TYPE,
    in_sub_status           IN EXPEDIO_RESPONSE.SUB_STATUS%TYPE,
    in_completion_date      IN  EXPEDIO_RESPONSE.COMPLETION_DATE%TYPE,
    out_status       OUT      NUMBER,
    out_errmsg       OUT      VARCHAR2
   )
AS
 v_count   NUMBER;
 BEGIN
      SELECT COUNT (*)
        INTO v_count
        FROM EXPEDIO_RESPONSE
        WHERE EXP_ORDER_ID= in_exp_order_id
        AND EXPEDIO_QUOTEVERSION=in_expedio_quoteversion;

      IF (v_count < 1)
      THEN
         out_status := pkg_constants.con_status_failure;
      ELSE
         BEGIN
            UPDATE EXPEDIO_RESPONSE
               SET  reason=in_reason,
                    status=in_status,
                    sub_status =in_sub_status,
                    completion_date=in_completion_date
            WHERE EXP_ORDER_ID= in_exp_order_id
              AND EXPEDIO_QUOTEVERSION=in_expedio_quoteversion;

            out_status := pkg_constants.con_status_success;
         END;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         -- Added by Sujana on 23/11/2010 as part of exception handling
         out_errmsg := substr(SQLERRM,1,150);
         v_sql_code := SQLCODE;
         PKG_COMMON.spi_error_log(
                                  NULL,
                                  NULL,
                                  NULL,
                                  NULL,
                                  'PKG_ORDER_R5',
                                  'SPU_EXPEDIO_RESPONSE',
                                  v_sql_code,
                                  out_errmsg
                                 );

END spu_expedio_response;
PROCEDURE sp_expedio_response_test
  (
    in_quote_id             IN EXPEDIO_RESPONSE.quote_id%TYPE,
    in_quote_header_id      IN EXPEDIO_RESPONSE.quote_header_id%TYPE,
    in_version              IN EXPEDIO_RESPONSE.version%TYPE,
    in_exp_order_id         IN EXPEDIO_RESPONSE.exp_order_id%TYPE,
    in_exp_quote_id         IN EXPEDIO_RESPONSE.exp_quote_id%TYPE,
    in_expedio_ref_id       IN EXPEDIO_RESPONSE.expedio_ref_id%TYPE,
    in_expedio_quoteversion IN EXPEDIO_RESPONSE.expedio_quoteversion%TYPE,
    in_site_id              IN EXPEDIO_RESPONSE.site_id%TYPE,
    in_product_id           IN EXPEDIO_RESPONSE.product_id%TYPE,
    in_product_name         IN EXPEDIO_RESPONSE.product_name%TYPE,
    in_modified_by          IN EXPEDIO_RESPONSE.modified_by%TYPE,
    in_modified_date        IN EXPEDIO_RESPONSE.modified_date%TYPE,
    in_reason               IN EXPEDIO_RESPONSE.reason%TYPE,
    in_status               IN EXPEDIO_RESPONSE.status%TYPE,
    in_sub_status           IN EXPEDIO_RESPONSE.sub_status%TYPE,
    in_completion_date      IN EXPEDIO_RESPONSE.completion_date%TYPE,
    in_ifc_flag             IN EXPEDIO_RESPONSE.IFC_FLAG%TYPE,
    out_errmsg              OUT VARCHAR2
    )
AS
  v_count         NUMBER (10);
  v_expedio_count NUMBER (10);
  -- v_site_count   NUMBER (10);
BEGIN
  SELECT COUNT (*)
  INTO v_count
  FROM
    /*quote q LEFT OUTER JOIN */
    quote_header qh
    --ON q.quote_id = qh.quote_id
  LEFT OUTER JOIN quote_site qs
  ON qh.quote_header_id = qs.quote_header_id
  INNER JOIN site s
  ON qs.site_id          = s.site_id
  WHERE s.site_id        = in_site_id
  AND qh.quote_header_id = in_quote_header_id
  and qh.expedio_quoteversion=in_expedio_quoteversion
  AND (qs.active         = pkg_constants.con_activeflag_yes);

  IF v_count            <> 0 THEN
    SELECT COUNT (*)
    INTO v_expedio_count
    FROM EXPEDIO_RESPONSE
    WHERE site_id       = in_site_id
    AND quote_header_id = in_quote_header_id
    and expedio_quoteversion=in_expedio_quoteversion;

    IF v_expedio_count  = 0 THEN
      INSERT
      INTO EXPEDIO_RESPONSE
        (
          EXP_ORDER_ID,
          EXP_QUOTE_ID,
          EXPEDIO_REF_ID,
          EXPEDIO_QUOTEVERSION,
          SITE_ID,
          PRODUCT_ID,
          PRODUCT_NAME,
          QUOTE_ID,
          QUOTE_HEADER_ID,
          VERSION,
          MODIFIED_BY,
          MODIFIED_DATE,
          REASON,
          STATUS ,
          SUB_STATUS,
          COMPLETION_DATE,
          IFC_FLAG
        )
        VALUES
        (
          in_exp_order_id ,
          in_exp_quote_id ,
          in_expedio_ref_id ,
          in_expedio_quoteversion ,
          in_site_id,
          in_product_id,
          in_product_name ,
          in_QUOTE_ID ,
          in_QUOTE_HEADER_ID ,
          in_VERSION,
          in_modified_by,
          sysdate,
          in_reason,
          in_status,
          in_sub_status,
          in_completion_date,
          in_ifc_flag
          );
    ELSE
      UPDATE expedio_response
      SET EXP_ORDER_ID      =in_exp_order_id,
        EXP_QUOTE_ID        =in_exp_quote_id,
        EXPEDIO_REF_ID      =in_expedio_ref_id,
        EXPEDIO_QUOTEVERSION=in_expedio_quoteversion,
        SITE_ID             =in_site_id,
        PRODUCT_ID          =in_product_id,
        PRODUCT_NAME        =in_product_name,
        QUOTE_ID            =in_QUOTE_ID,
        QUOTE_HEADER_ID     =in_QUOTE_HEADER_ID,
        VERSION             =in_VERSION,
        MODIFIED_BY         =in_modified_by,
        MODIFIED_DATE       =sysdate,
        REASON             =in_reason,
        STATUS             =in_status,
        SUB_STATUS          =in_sub_status,
        COMPLETION_DATE     =in_completion_date,
        IFC_FLAG            =in_ifc_flag
      WHERE site_id         = in_site_id
      AND quote_header_id   = in_quote_header_id
      and expedio_quoteversion=in_expedio_quoteversion;

      IF SQL%NOTFOUND THEN
        NULL;
      END IF;
      out_errmsg := 'Successful';
    END IF;
  ELSIF (in_quote_header_id IS NOT NULL AND in_site_id IS NULL) THEN

    SELECT COUNT (*)
    INTO v_expedio_count
    FROM expedio_response
    WHERE site_id      IS NULL
    AND quote_header_id = in_quote_header_id
    and expedio_quoteversion=in_expedio_quoteversion;

    IF v_expedio_count  = 0 THEN
      INSERT
      INTO EXPEDIO_RESPONSE
        (
          EXP_ORDER_ID,
          EXP_QUOTE_ID,
          EXPEDIO_REF_ID,
          EXPEDIO_QUOTEVERSION,
          SITE_ID,
          PRODUCT_ID,
          PRODUCT_NAME,
          QUOTE_ID,
          QUOTE_HEADER_ID,
          VERSION,
          MODIFIED_BY,
          MODIFIED_DATE,
          REASON,
          STATUS ,
          SUB_STATUS,
          COMPLETION_DATE,
          IFC_FLAG
        )
        VALUES
        (
          in_exp_order_id ,
          in_exp_quote_id ,
          in_expedio_ref_id ,
          in_expedio_quoteversion ,
          in_site_id,
          in_product_id,
          in_product_name ,
          in_QUOTE_ID ,
          in_QUOTE_HEADER_ID ,
          in_VERSION,
          in_modified_by,
          sysdate,
          in_reason,
          in_status,
          in_sub_status,
          in_completion_date,
          in_ifc_flag
        ) ;
    ELSE
      UPDATE expedio_response
      SET EXP_ORDER_ID      =in_exp_order_id,
        EXP_QUOTE_ID        =in_exp_quote_id,
        EXPEDIO_REF_ID      =in_expedio_ref_id,
        EXPEDIO_QUOTEVERSION=in_expedio_quoteversion,
        SITE_ID             =in_site_id,
        PRODUCT_ID          =in_product_id,
        PRODUCT_NAME        =in_product_name,
        QUOTE_ID            =in_QUOTE_ID,
        QUOTE_HEADER_ID     =in_QUOTE_HEADER_ID,
        VERSION             =in_VERSION,
        MODIFIED_BY         =in_modified_by,
        MODIFIED_DATE       =sysdate,
        REASON             =in_reason,
        STATUS             =in_status,
        SUB_STATUS          =in_sub_status,
        COMPLETION_DATE     =in_completion_date,
        IFC_FLAG              =in_ifc_flag
      WHERE site_id         is null
      AND quote_header_id   = in_quote_header_id
      and expedio_quoteversion=in_expedio_quoteversion;
      IF SQL%NOTFOUND THEN
        NULL;
      END IF;
      out_errmsg := 'Successful';
    END IF;
  ELSE --IF v_site_count <> 0 THEN
    -- out_status := pkg_constants.con_status_failure;
    out_errmsg := 'INVALID QUOTE AND SITE';
  END IF;
EXCEPTION
WHEN OTHERS THEN
  --    out_status := pkg_constants.con_status_failure;
  out_errmsg := SQLERRM;
END sp_expedio_response_test;


PROCEDURE spi_order_infonetsite_detail (
      in_siteid           IN       site_infonet.site_id%TYPE,
      in_ivs_migr_order   IN       site_infonet.ivs_migration_order%TYPE,
      in_ivs_migr_team    IN       site_infonet.ivs_migration_team%TYPE,
      in_ivsgateway       IN       site_infonet.ivs_phase2gateway%TYPE,
      in_tpe_id           IN       site_infonet.tpe_id%TYPE,
      in_url              IN       site_infonet.url_details%TYPE,
      --in_modifiedby            IN       order_site_detail.created_by%TYPE,
      out_status          OUT      NUMBER,
      out_errmsg          OUT      VARCHAR2
   )
   AS
      v_createdate   DATE          := SYSDATE;
      v_site_type    VARCHAR2 (20);
      v_count        NUMBER;
   BEGIN
      /* select decode(count(*),0,'Classic','Non Classic') into v_site_type from site
       where site_id = in_siteid;*/
 --   DBMS_OUTPUT.PUT_LINE('in_ivs_migr_team  '||in_ivs_migr_team);
  /* This line is commented on 14-Jul-2011 for R16 release
   IF ( in_ivs_migr_order = '1') THEN---15-SEP-2010 R5 CHANGES
 */
       SELECT COUNT (*)
        INTO v_count
        FROM site_infonet
       WHERE site_id = in_siteid;
--DBMS_OUTPUT.PUT_LINE('in_siteid  '||in_siteid);
      IF v_count = 0
      THEN
         INSERT INTO site_infonet
                     (site_id, site_type, ivs_migration_order,
                      ivs_migration_team, ivs_phase2gateway, tpe_id,
                      url_details
                     )
              VALUES (in_siteid, v_site_type, in_ivs_migr_order,
                      in_ivs_migr_team, in_ivsgateway, in_tpe_id,
                      in_url
                     );
      /*  UPDATE site_infonet SET SITE_TYPE ='NON CLASSIC'
        WHERE SITE_ID = in_siteid AND site_id = (SELECT site_id FROM site WHERE
                                                  site_id = in_siteid);*/
      ELSE
         UPDATE site_infonet
            SET ivs_migration_order = in_ivs_migr_order,
                ivs_migration_team = in_ivs_migr_team,
                ivs_phase2gateway = in_ivsgateway,
                tpe_id = in_tpe_id,
                url_details = in_url
          WHERE site_id = in_siteid;
      END IF;
  /* This line is commented on 14-Jul-2011 for R16 release
   ELSE---15-SEP-2010 R5 CHANGES

--DBMS_OUTPUT.PUT_LINE('DELETE  '||in_siteid);
      DELETE FROM site_infonet  WHERE site_id = in_siteid;
   END IF;---15-SEP-2010 R5 CHANGES
  */
      UPDATE site_infonet
         SET site_type = 'CLASSIC'
       WHERE site_id = in_siteid
         AND site_id = (SELECT DISTINCT classic_site_id
                                   FROM site
                                  WHERE classic_site_id = in_siteid);
--DBMS_OUTPUT.PUT_LINE('ROW COUNT  '||SQL%ROWCOUNT);
      IF SQL%NOTFOUND
      THEN
         UPDATE site_infonet
            SET site_type = 'NON CLASSIC'
          WHERE site_id = in_siteid;
      END IF;

      out_status := pkg_constants.con_status_success;
      out_errmsg := 'Successfully Updated Site Details';
      /*COMMIT; commented by Jay */
   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         -- Added by Sujana on 23/11/2010 as part of exception handling
         out_errmsg := substr(SQLERRM,1,150);
         v_sql_code := SQLCODE;
         PKG_COMMON.spi_error_log(
                                  NULL,
                                  NULL,
                                  in_siteid,
                                  NULL,
                                  'PKG_ORDER_R5',
                                  'SPI_ORDER_INFONETSITE_DETAIL',
                                  v_sql_code,
                                  out_errmsg
                                 );
 END spi_order_infonetsite_detail;

--Start R5 Reeng 2-Sept-2010
 -- this SP Updates classic site information to the SQE site table
-- also inserts other site level informations such as customer required date
-- selected billing Id for the site in the order_site_detail table
-- if details are already available for the selected site and order
-- the information is soft deleted and a new set of values will be inserted

 PROCEDURE spi_order_site_detail (
      in_orderheaderid     IN       order_header.order_header_id%TYPE,
      in_customerid        IN       customer.customer_id%TYPE,
      in_siteid            IN       order_site_detail.site_id%TYPE,
     -- in_classicsiteid     IN       site.classic_site_id%TYPE,
     -- in_classicsitename   IN       site.classic_site_name%TYPE,
      in_crd               IN       VARCHAR2,
      in_sitebillingid     IN       order_site_detail.billing_id%TYPE,
      in_system            IN       order_site_detail.SYSTEM%TYPE,
      in_modifiedby        IN       order_site_detail.created_by%TYPE,
      out_status           OUT      NUMBER,
      out_errmsg           OUT      VARCHAR2
   )
   AS
      v_crd              DATE;
      v_createdate       DATE   := SYSDATE;
      v_siteordercount   NUMBER;
      v_ofsd             DATE;
   BEGIN
      v_crd := TO_DATE (in_crd, 'DD-MON-YYYY');

--Start commented for R5 Reeng
/*
      IF (in_classicsiteid IS NOT NULL OR in_classicsitename IS NOT NULL)
      -- If any of the classic site information is valid  the update the site table
      -- with classic site information
      THEN
         BEGIN
            UPDATE site
               SET classic_site_id = in_classicsiteid,
                   classic_site_name = in_classicsitename,
                   modified_by = in_modifiedby,
                   modified_date = v_createdate
             WHERE site_id = in_siteid AND customer_id = in_customerid;
         END;
      END IF;
*/

--End
      SELECT COUNT (*)
        INTO v_siteordercount
        FROM order_site_detail
       WHERE order_header_id = in_orderheaderid
         AND site_id = in_siteid
         AND active = pkg_constants.con_activeflag_yes;

      -- check if the site has already got site detail for the order
      IF (v_siteordercount > 0)
      THEN
         -- if yes the soft delete the details in the order site detail table
         BEGIN
            UPDATE order_site_detail
               SET active = pkg_constants.con_activeflag_no,
                   modified_by = in_modifiedby,
                   modified_date = v_createdate
             WHERE order_header_id = in_orderheaderid AND site_id = in_siteid;
         END;
      END IF;

      IF (in_sitebillingid IS NOT NULL)
      THEN
         INSERT INTO order_site_detail
                     (order_site_detail_id, order_header_id,
                      site_id, billing_id, SYSTEM, customer_required_date,
                      active, created_by,
                      created_date
                     )
              VALUES (order_site_detail_id.NEXTVAL, in_orderheaderid,
                      in_siteid, in_sitebillingid, in_system, v_crd,
                      pkg_constants.con_activeflag_yes, in_modifiedby,
                      v_createdate
                     );
      END IF;

--         SELECT MAX(customer_signed_date) INTO   v_ofsd
--                FROM  order_site_detail WHERE order_header_id = in_orderheaderid
--                                        AND  active   = pkg_constants.con_activeflag_yes;
--
--         UPDATE order_header SET  ORDER_FORM_SIGN_DATE = v_ofsd,
--                                  modified_by =  in_modifiedby,
--                                  modified_date = v_createDate
--                      WHERE order_header_id = in_orderheaderid;
      out_status := pkg_constants.con_status_success;
      out_errmsg := 'Successfully Updated Site Details';
   -- COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         -- Added by Sujana on 23/11/2010 as part of exception handling
         out_errmsg := substr(SQLERRM,1,150);
         v_sql_code := SQLCODE;
         PKG_COMMON.spi_error_log(
                                  NULL,
                                  NULL,
                                  in_siteid,
                                  NULL,
                                  'PKG_ORDER_R5',
                                  'SPI_ORDER_SITE_DETAIL',
                                  v_sql_code,
                                  out_errmsg
                                 );
   END spi_order_site_detail;
 --End


PROCEDURE spi_order_crd_date (
                              in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
                              IN_QUOTE_SITE_OBJ  in       QUOTE_SITE_TAB,
                              in_orderheader_id  in       order_header.order_header_id%type,
                              in_createdby       IN       quote_site.created_by%TYPE,
                              out_status         OUT      NUMBER,
                              out_errmsg         OUT      VARCHAR2
                               )

AS
-- ****************************************************************************
-- Created    : 05-08-2011
-- Purpose    : THIS IS USED TO UPDATE THE CRD DATA FOR THE MX PRODUCTS
-- Assumption : None.
-- Version    Date          Author        Description
-- -------    ----          ------        -----------
--  1.1       05-08-2011   SUMAN         1.NEW sp for the update the CRD Date

-- ****************************************************************************
v_rowcount  number;
BEGIN

  FOR i IN in_quote_site_obj.FIRST .. in_quote_site_obj.LAST
  LOOP
      begin

           SELECT COUNT (*)
           INTO v_rowcount
           from ORDER_SITE_DETAIL
           WHERE order_header_id = in_orderheader_id
            AND site_id = in_quote_site_obj (i).o_site_id
            and ACTIVE = PKG_CONSTANTS.CON_ACTIVEFLAG_YES;

            IF (v_rowcount = 0) THEN
                   INSERT INTO ORDER_SITE_DETAIL
                               (ORDER_SITE_DETAIL_ID,
                                ORDER_HEADER_ID,
                                SITE_ID         ,
                                CUSTOMER_REQUIRED_DATE   ,
                                ACTIVE                   ,
                                CREATED_BY               ,
                                CREATED_DATE
                               )
                        values (ORDER_SITE_DETAIL_ID.NEXTVAL,
                                IN_ORDERHEADER_ID,
                                IN_QUOTE_SITE_OBJ (I).O_SITE_ID,
                                in_quote_site_obj (i).o_crd,
                                pkg_constants.con_activeflag_yes,
                                in_createdby,
                                SYSDATE
                               );
            else
              UPDATE ORDER_SITE_DETAIL
              SET CUSTOMER_REQUIRED_DATE=IN_QUOTE_SITE_OBJ (I).O_CRD ,
                MODIFIED_BY             =IN_CREATEDBY,
                MODIFIED_DATE           =sysdate
              WHERE ORDER_HEADER_ID     =IN_ORDERHEADER_ID
              AND SITE_ID               =IN_QUOTE_SITE_OBJ (I).O_SITE_ID
              AND ACTIVE                = PKG_CONSTANTS.CON_ACTIVEFLAG_YES;
            END IF;
      END ;
  END LOOP;

  out_status := pkg_constants.con_status_success;

EXCEPTION
      WHEN OTHERS THEN
         out_status := pkg_constants.con_status_failure;
         OUT_ERRMSG := SQLERRM;
          PKG_COMMON.spi_error_log(
                                  IN_ORDERHEADER_ID,
                                  NULL,
                                  NULL,
                                  null,
                                  'PKG_ORDER_R5.spi_order_crd_date',
                                  'SPU_EXPEDIO_RESPONSE',
                                  v_sql_code,
                                  OUT_ERRMSG
                                 );
end;


END PKG_ORDER_R5;
/


CREATE OR REPLACE PACKAGE BODY pkg_pricing_usage
AS
   PROCEDURE spi_usage_pricing_obj (
      in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
      in_siteid          IN       line_item.site_id%TYPE,
      in_createdby       IN       price_line_item_detail.created_by%TYPE,
      in_pricing_usage   IN       usage_price_tab,
      in_check_status    IN       VARCHAR2,
      out_status         OUT      NUMBER,
      out_errmsg         OUT      VARCHAR2
   )
   AS
      v_priclinitmid               price_line_item.price_line_item_id%TYPE;
      v_line_item_id               line_item.line_item_id%TYPE;
      v_line_item_asis_id          line_item.line_item_id%TYPE;
      v_errorline                  VARCHAR2 (255);
      v_type_usage_charge          t_type_usage_charge;
      v_fix_price                  t_fix_price;
      v_std_price                  t_std_price;
      v_min_price                  t_min_price;
      v_max_price                  t_max_price;
      v_fix_price_net              t_fix_price_net;
      v_std_price_net              t_std_price_net;
      v_min_price_net              t_min_price_net;
      v_max_price_net              t_max_price_net;
      v_price_line_detail_id       NUMBER;
      v_price_line_detailasis_id   NUMBER;
      v_erro_line                  VARCHAR2 (255);
      v_sql_code                   NUMBER;
   BEGIN
--     SUM_DEBUG(in_quoteheaderid,IN_CHECK_STATUS,0);
      IF UPPER (in_check_status) = 'PROVIDE'
      THEN
         UPDATE price_line_item_detail
            SET active = 'N'
          WHERE line_item_id IN (
                   SELECT line_item_id
                     FROM line_item
                    WHERE UPPER (product_name) IN (
                             SELECT UPPER (product_name)
                               FROM product_master_details
                              WHERE prod_friendly_id IN
                                       (399561, 399560, 399562, 399563,
                                        399559)
                                AND product_id = 1012437)
                      AND quote_header_id = in_quoteheaderid
                      AND site_id = in_siteid
                      AND active = 'Y'
                      AND product_id = 1012437)
            AND active = 'Y';

         UPDATE price_line_item_detail
            SET active = 'N'
          WHERE line_item_id IN (
                   SELECT line_item_id
                     FROM line_item
                    WHERE quote_header_id = in_quoteheaderid
                      AND site_id = in_siteid
                      AND active = 'Y'
                      AND product_id = 1012437)
            AND price_line_item_id IN (588, 589, 590)
            AND active = 'Y';

         FOR cur_price_obj IN in_pricing_usage.FIRST .. in_pricing_usage.LAST
         LOOP
            BEGIN
               SELECT line_item_id
                 INTO v_line_item_id
                 FROM line_item
                WHERE quote_header_id = in_quoteheaderid
                  AND active = 'Y'
                  AND UPPER (product_name) =
                         TRIM
                            (UPPER (in_pricing_usage (cur_price_obj).o_prodname
                                   )
                            )
                  AND site_id = in_siteid;
            EXCEPTION
               WHEN NO_DATA_FOUND
               THEN
                  out_status := pkg_constants.con_status_failure;
                  out_errmsg :=
                        SQLERRM
                     || 'SQE LINE_ITEM PRODUCT_NAME NOT FOUND'
                     || v_errorline;
               WHEN OTHERS
               THEN
                  out_errmsg := SUBSTR (SQLERRM, 1, 150);
                  v_sql_code := SQLCODE;
                  pkg_common.spi_error_log (in_siteid,
                                            in_quoteheaderid,
                                            in_createdby,
                                            NULL,
                                            'PKG_PRICING_USAGE',
                                            'SPI_USAGE_PRICING_OBJ',
                                            v_sql_code,
                                            out_errmsg
                                           );
            END;

            v_erro_line := '2 Checking SQE Description ';

            BEGIN
--       SUM_DEBUG(  TRIM (UPPER (IN_PRICING_USAGE (CUR_PRICE_OBJ).O_SQE_PRICEITEMDESC)),V_PRICLINITMID,'V_PRICLINITMID');
               SELECT price_line_item_id
                 INTO v_priclinitmid
                 FROM price_line_item
                WHERE TRIM (UPPER (price_line_description)) =
                         TRIM
                            (UPPER
                                (in_pricing_usage (cur_price_obj).o_sqe_priceitemdesc
                                )
                            )
                  AND product_id = 1012437;
            EXCEPTION
               WHEN NO_DATA_FOUND
               THEN
                  out_status := pkg_constants.con_status_failure;
                  out_errmsg :=
                        SQLERRM
                     || 'SQE PRICE LINE_ITEM DESC NOT FOUND'
                     || v_errorline;
               WHEN OTHERS
               THEN
                  out_errmsg := SUBSTR (SQLERRM, 1, 150);
                  v_sql_code := SQLCODE;
                  pkg_common.spi_error_log (in_siteid,
                                            in_quoteheaderid,
                                            in_createdby,
                                            NULL,
                                            'PKG_PRICING_USAGE',
                                            'SPI_USAGE_PRICING_OBJ',
                                            v_sql_code,
                                            out_errmsg
                                           );
            END;

            v_erro_line :=
                     '3 Pricing Attribute Not Found Check the SQE Description';

            SELECT price_line_item_detail_id.NEXTVAL
              INTO v_price_line_detail_id
              FROM DUAL;

            INSERT INTO price_line_item_detail
                        (price_line_item_detail_id, price_line_item_id, price,
                         currency, charge_type, discount, rent_price, active,
                         created_by, created_date, line_item_id, quantity,
                         net_price, ptp_eup, ptp_eup_id, discount_requested,
                         discount_proposed, pln_inventory_id        --,PPSR_ID
                                                            ,
                         tariff_name, price_point_id, price_point_name,
                         price_point_version, region, country)
               (SELECT v_price_line_detail_id, v_priclinitmid,
                       in_pricing_usage (cur_price_obj).o_price,
                       in_pricing_usage (cur_price_obj).o_currency,
                       in_pricing_usage (cur_price_obj).o_chargetype,
                       in_pricing_usage (cur_price_obj).o_discount,
                       in_pricing_usage (cur_price_obj).o_rent_price,
                       pkg_constants.con_activeflag_yes, in_createdby,
                       SYSDATE (), line_item_id,
                       in_pricing_usage (cur_price_obj).o_quanty,
                       in_pricing_usage (cur_price_obj).o_netprice,
                       in_pricing_usage (cur_price_obj).o_ptp_eup,
                       in_pricing_usage (cur_price_obj).o_ptp_eup_id,
                       in_pricing_usage (cur_price_obj).o_discount_requested,
                       in_pricing_usage (cur_price_obj).o_discount_proposed,
                       in_pricing_usage (cur_price_obj).o_pln_inventory_id,
                       in_pricing_usage (cur_price_obj).o_tariff_name,
                       in_pricing_usage (cur_price_obj).o_price_point_id,
                       in_pricing_usage (cur_price_obj).o_price_point_name,
                       in_pricing_usage (cur_price_obj).o_price_point_version,
                       in_pricing_usage (cur_price_obj).o_region,
                       in_pricing_usage (cur_price_obj).o_country
                  FROM line_item
                 WHERE quote_header_id = in_quoteheaderid
                   AND site_id = in_siteid
                   AND UPPER (product_name) =
                          TRIM
                             (UPPER
                                   (in_pricing_usage (cur_price_obj).o_prodname
                                   )
                             )
                   AND active = pkg_constants.con_activeflag_yes
                   AND UPPER (fallback_type) =
                           UPPER (in_pricing_usage (cur_price_obj).o_fallback));

            UPDATE line_item
               SET priced = pkg_constants.con_activeflag_yes
             WHERE quote_header_id = in_quoteheaderid
               AND site_id = in_siteid
               AND UPPER (product_name) =
                      TRIM (UPPER (in_pricing_usage (cur_price_obj).o_prodname)
                           )
               AND active = pkg_constants.con_activeflag_yes;

            v_erro_line := '4 Insert into TO pricing';
            v_type_usage_charge.DELETE;
            v_fix_price.DELETE;
            v_std_price.DELETE;
            v_min_price.DELETE;
            v_max_price.DELETE;
            v_fix_price_net.DELETE;
            v_std_price_net.DELETE;
            v_min_price_net.DELETE;
            v_max_price_net.DELETE;

            FOR cur_price_count IN
               1 .. in_pricing_usage (cur_price_obj).o_price_usage_price_call.COUNT
            LOOP
               FOR cur_price_plan_obj IN
                  in_pricing_usage (cur_price_obj).o_price_usage_price_call.FIRST .. in_pricing_usage
                                                                                       (cur_price_obj
                                                                                       ).o_price_usage_price_call.LAST
               LOOP
                  IF cur_price_plan_obj IS NOT NULL
                  THEN
                     v_type_usage_charge (cur_price_plan_obj) :=
                        in_pricing_usage (cur_price_obj).o_price_usage_price_call
                                                          (cur_price_plan_obj).o_type_usage_charge;
                     v_fix_price (cur_price_plan_obj) :=
                        in_pricing_usage (cur_price_obj).o_price_usage_price_call
                                                          (cur_price_plan_obj).o_fix_price;
                     v_std_price (cur_price_plan_obj) :=
                        in_pricing_usage (cur_price_obj).o_price_usage_price_call
                                                          (cur_price_plan_obj).o_std_price;
                     v_min_price (cur_price_plan_obj) :=
                        in_pricing_usage (cur_price_obj).o_price_usage_price_call
                                                          (cur_price_plan_obj).o_min_price;
                     v_max_price (cur_price_plan_obj) :=
                        in_pricing_usage (cur_price_obj).o_price_usage_price_call
                                                          (cur_price_plan_obj).o_max_price;
                     v_fix_price_net (cur_price_plan_obj) :=
                        in_pricing_usage (cur_price_obj).o_price_usage_price_call
                                                          (cur_price_plan_obj).o_fix_price_net;
                     v_std_price_net (cur_price_plan_obj) :=
                        in_pricing_usage (cur_price_obj).o_price_usage_price_call
                                                          (cur_price_plan_obj).o_std_price_net;
                     v_min_price_net (cur_price_plan_obj) :=
                        in_pricing_usage (cur_price_obj).o_price_usage_price_call
                                                          (cur_price_plan_obj).o_min_price_net;
                     v_max_price_net (cur_price_plan_obj) :=
                        in_pricing_usage (cur_price_obj).o_price_usage_price_call
                                                          (cur_price_plan_obj).o_max_price_net;
                  END IF;
               END LOOP;
            END LOOP;

            v_erro_line := '6 Coping the data';
            FORALL i IN 1 .. in_pricing_usage (cur_price_obj).o_price_usage_price_call.COUNT
               INSERT INTO price_ln_usg_chrg_details
                           (pln_usg_charge_id, line_item_id,
                            price_line_item_detail_id, fixed_usage_charge,
                            standard_usage_charge, min_usage_charge,
                            max_usage_charge, fixed_usage_charge_netprice,
                            standard_usage_charge_netprice,
                            min_usage_charge_netprice,
                            max_usage_charge_netprice, created_by,
                            created_date
                           )
                    VALUES (pln_usg_chrg_details.NEXTVAL, v_line_item_id,
                            v_price_line_detail_id, v_fix_price (i),
                            v_std_price (i), v_min_price (i),
                            v_max_price (i), v_fix_price_net (i),
                            v_std_price_net (i),
                            v_min_price_net (i),
                            v_max_price_net (i), in_createdby,
                            SYSDATE
                           );
         END LOOP;
      END IF;

 -------------------Start the checking the ASIS infro.-----------------
--     SUM_DEBUG(in_quoteheaderid,IN_CHECK_STATUS,0);
      BEGIN
         IF UPPER (in_check_status) = 'MODIFY'
         THEN
            UPDATE price_line_item_detail_as_is
               SET active = 'N'
             WHERE line_item_id IN (
                      SELECT line_item_id
                        FROM quote_line_item_as_is
                       WHERE UPPER (product_name) IN (
                                SELECT UPPER (product_name)
                                  FROM product_master_details
                                 WHERE prod_friendly_id IN
                                          (399561,
                                           399560,
                                           399562,
                                           399563,
                                           399559
                                          )
                                   AND product_id = 1012437)
                         AND quote_header_id = in_quoteheaderid
                         AND site_id = in_siteid
                         AND active = 'Y'
                         AND product_id = 1012437)
               AND active = 'Y';

            UPDATE price_line_item_detail_as_is
               SET active = 'N'
             WHERE line_item_id IN (
                      SELECT line_item_id
                        FROM quote_line_item_as_is
                       WHERE quote_header_id = in_quoteheaderid
                         AND site_id = in_siteid
                         AND active = 'Y'
                         AND product_id = 1012437)
               AND price_line_item_id IN (588, 589, 590)
               AND active = 'Y';

            FOR cur_price_asis_obj IN
               in_pricing_usage.FIRST .. in_pricing_usage.LAST
            LOOP
               BEGIN
                  SELECT line_item_id
                    INTO v_line_item_asis_id
                    FROM quote_line_item_as_is
                   WHERE quote_header_id = in_quoteheaderid
                     AND active = 'Y'
                     AND UPPER (product_name) =
                            TRIM
                               (UPPER
                                   (in_pricing_usage (cur_price_asis_obj).o_prodname
                                   )
                               )
                     AND site_id = in_siteid;
               EXCEPTION
                  WHEN NO_DATA_FOUND
                  THEN
                     out_status := pkg_constants.con_status_failure;
                     out_errmsg :=
                           SQLERRM
                        || 'SQE LINE_ITEM PRODUCT_NAME NOT FOUND'
                        || v_errorline;
               END;

               v_erro_line := '2 Loop Stated ASISDATA';

               BEGIN
--  SUM_DEBUG(  IN_PRICING_USAGE (CUR_PRICE_ASIS_OBJ).O_SQE_PRICEITEMDESC,V_PRICLINITMID,'V_PRICLINITMID');
                  SELECT price_line_item_id
                    INTO v_priclinitmid
                    FROM price_line_item
                   WHERE TRIM (UPPER (price_line_description)) =
                            TRIM
                               (UPPER
                                   (in_pricing_usage (cur_price_asis_obj).o_sqe_priceitemdesc
                                   )
                               )
                     AND product_id = 1012437;
--  SUM_DEBUG(  IN_PRICING_USAGE (CUR_PRICE_ASIS_OBJ).O_SQE_PRICEITEMDESC,V_PRICLINITMID,'V_PRICLINITMID');
               EXCEPTION
                  WHEN NO_DATA_FOUND
                  THEN
                     out_status := pkg_constants.con_status_failure;
                     out_errmsg :=
                           SQLERRM
                        || 'SQE PRICE LINE_ITEM DESC NOT FOUND ASIS'
                        || v_errorline;
               END;

               v_erro_line := '3 checking SQE Description';

--    SUM_DEBUG(in_pricing_usage (CUR_PRICE_ASIS_OBJ).o_ptp_eup,CUR_PRICE_ASIS_OBJ||'--'||in_pricing_usage (CUR_PRICE_ASIS_OBJ).O_PRODNAME,1);
--    select price_line_item_detail_id.NEXTVAL into v_pric_line_detail_id from dual;
               SELECT price_line_item_detail_id.NEXTVAL
                 INTO v_price_line_detailasis_id
                 FROM DUAL;

               INSERT INTO price_line_item_detail_as_is
                           (price_line_item_detail_id, price_line_item_id,
                            price, currency, charge_type, discount,
                            rent_price, active, created_by, created_date,
                            line_item_id, quantity, net_price, ptp_eup,
                            ptp_eup_id, discount_requested, discount_proposed,
                            pln_inventory_id, tariff_name, price_point_id,
                            price_point_name, price_point_version, region,
                            country)
                  (SELECT v_price_line_detailasis_id, v_priclinitmid,
                          in_pricing_usage (cur_price_asis_obj).o_price,
                          in_pricing_usage (cur_price_asis_obj).o_currency,
                          in_pricing_usage (cur_price_asis_obj).o_chargetype,
                          in_pricing_usage (cur_price_asis_obj).o_discount,
                          in_pricing_usage (cur_price_asis_obj).o_rent_price,
                          pkg_constants.con_activeflag_yes, in_createdby,
                          SYSDATE (), line_item_id,
                          in_pricing_usage (cur_price_asis_obj).o_quanty,
                          in_pricing_usage (cur_price_asis_obj).o_netprice,
                          in_pricing_usage (cur_price_asis_obj).o_ptp_eup,
                          in_pricing_usage (cur_price_asis_obj).o_ptp_eup_id,
                          in_pricing_usage (cur_price_asis_obj).o_discount_requested,
                          in_pricing_usage (cur_price_asis_obj).o_discount_proposed,
                          in_pricing_usage (cur_price_asis_obj).o_pln_inventory_id,
                          in_pricing_usage (cur_price_asis_obj).o_tariff_name,
                          in_pricing_usage (cur_price_asis_obj).o_price_point_id,
                          in_pricing_usage (cur_price_asis_obj).o_price_point_name,
                          in_pricing_usage (cur_price_asis_obj).o_price_point_version,
                          in_pricing_usage (cur_price_asis_obj).o_region,
                          in_pricing_usage (cur_price_asis_obj).o_country
                     FROM quote_line_item_as_is
                    WHERE quote_header_id = in_quoteheaderid
                      AND site_id = in_siteid
                      AND UPPER (product_name) =
                             TRIM
                                (UPPER
                                    (in_pricing_usage (cur_price_asis_obj).o_prodname
                                    )
                                )
                      AND active = pkg_constants.con_activeflag_yes
                      AND UPPER (fallback_type) =
                             UPPER
                                (in_pricing_usage (cur_price_asis_obj).o_fallback
                                ));

               v_erro_line := '4 Insert into TO pricing';
               v_type_usage_charge.DELETE;
               v_fix_price.DELETE;
               v_std_price.DELETE;
               v_min_price.DELETE;
               v_max_price.DELETE;
               v_fix_price_net.DELETE;
               v_std_price_net.DELETE;
               v_min_price_net.DELETE;
               v_max_price_net.DELETE;

               FOR cur_price_count IN
                  1 .. in_pricing_usage (cur_price_asis_obj).o_price_usage_price_call.COUNT
               LOOP
                  FOR cur_price_plan_obj IN
                     in_pricing_usage (cur_price_asis_obj).o_price_usage_price_call.FIRST .. in_pricing_usage
                                                                                               (cur_price_asis_obj
                                                                                               ).o_price_usage_price_call.LAST
                  LOOP
                     IF cur_price_plan_obj IS NOT NULL
                     THEN
                        v_type_usage_charge (cur_price_plan_obj) :=
                           in_pricing_usage (cur_price_asis_obj).o_price_usage_price_call
                                                          (cur_price_plan_obj).o_type_usage_charge;
                        v_fix_price (cur_price_plan_obj) :=
                           in_pricing_usage (cur_price_asis_obj).o_price_usage_price_call
                                                          (cur_price_plan_obj).o_fix_price;
                        v_std_price (cur_price_plan_obj) :=
                           in_pricing_usage (cur_price_asis_obj).o_price_usage_price_call
                                                          (cur_price_plan_obj).o_std_price;
                        v_min_price (cur_price_plan_obj) :=
                           in_pricing_usage (cur_price_asis_obj).o_price_usage_price_call
                                                          (cur_price_plan_obj).o_min_price;
                        v_max_price (cur_price_plan_obj) :=
                           in_pricing_usage (cur_price_asis_obj).o_price_usage_price_call
                                                          (cur_price_plan_obj).o_max_price;
                        v_fix_price_net (cur_price_plan_obj) :=
                           in_pricing_usage (cur_price_asis_obj).o_price_usage_price_call
                                                          (cur_price_plan_obj).o_fix_price_net;
                        v_std_price_net (cur_price_plan_obj) :=
                           in_pricing_usage (cur_price_asis_obj).o_price_usage_price_call
                                                          (cur_price_plan_obj).o_std_price_net;
                        v_min_price_net (cur_price_plan_obj) :=
                           in_pricing_usage (cur_price_asis_obj).o_price_usage_price_call
                                                          (cur_price_plan_obj).o_min_price_net;
                        v_max_price_net (cur_price_plan_obj) :=
                           in_pricing_usage (cur_price_asis_obj).o_price_usage_price_call
                                                          (cur_price_plan_obj).o_max_price_net;
                     END IF;
                  END LOOP;
               END LOOP;

               v_erro_line := '6 Coping the data';
               FORALL price_asis IN 1 .. in_pricing_usage (cur_price_asis_obj).o_price_usage_price_call.COUNT
                  INSERT INTO price_ln_usg_chrg_details_asis
                              (pln_usg_charge_id,
                               line_item_id,
                               price_line_item_detail_id,
                               fixed_usage_charge,
                               standard_usage_charge,
                               min_usage_charge,
                               max_usage_charge,
                               fixed_usage_charge_netprice,
                               standard_usage_charge_netprice,
                               min_usage_charge_netprice,
                               max_usage_charge_netprice, created_by,
                               created_date
                              )
                       VALUES (pln_usg_chrg_details_asis.NEXTVAL,
                               v_line_item_asis_id,
                               v_price_line_detailasis_id,
                               v_fix_price (price_asis),
                               v_std_price (price_asis),
                               v_min_price (price_asis),
                               v_max_price (price_asis),
                               v_fix_price_net (price_asis),
                               v_std_price_net (price_asis),
                               v_min_price_net (price_asis),
                               v_max_price_net (price_asis), in_createdby,
                               SYSDATE
                              );
            END LOOP;
         END IF;
      EXCEPTION
         WHEN OTHERS
         THEN
            DBMS_OUTPUT.put_line ('error:' || SUBSTR (SQLERRM, 1, 50));
            out_status := pkg_constants.con_status_failure;
            out_errmsg := SQLERRM || 'SQE -' || v_erro_line;
            pkg_common.spi_error_log (NULL,
                                      in_quoteheaderid,
                                      in_siteid,
                                      in_quoteheaderid,
                                      'sqe_pricing_usage',
                                      'SPI_USAGE_PRICING_OBJ',
                                      out_status,
                                      out_errmsg
                                     );
      END;

-------------------end the checking the ASIS infro.-----------------
      out_status := pkg_constants.con_status_success;
   --  COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         DBMS_OUTPUT.put_line ('error:' || SUBSTR (SQLERRM, 1, 50));
         out_status := pkg_constants.con_status_failure;
         out_errmsg := SQLERRM || 'SQE -' || v_erro_line;
         pkg_common.spi_error_log (NULL,
                                   in_quoteheaderid,
                                   in_siteid,
                                   in_quoteheaderid,
                                   'sqe_pricing_usage',
                                   'SPI_USAGE_PRICING_OBJ',
                                   out_status,
                                   out_errmsg
                                  );
   END spi_usage_pricing_obj;
END pkg_pricing_usage;
/


CREATE OR REPLACE PACKAGE BODY pkg_quote_reeng
AS
/******************************************************************************
   NAME:       pkg_quote_reeng
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------

******************************************************************************/
   PROCEDURE spi_customer_r5 (
      in_cname                  IN       customer.NAME%TYPE,
      in_comp                   IN       customer.company_name%TYPE,
      in_vat                    IN       customer.vat_number%TYPE,
      in_salchnid               IN       customer.sales_channel_id%TYPE,
      in_btsub                  IN       customer.bt_subsidiary_id%TYPE,
      in_tax_exempted           IN       customer.tax_exempted%TYPE,
      in_tax_exempt_ref_num     IN       customer.tax_exempt_ref_num%TYPE,
      in_line_of_site_billing   IN       customer.line_of_site_billing%TYPE,
      in_bfgcustid              IN       customer.bfg_customer_id%TYPE,
      in_bfgcustname            IN       customer.bfg_customer_name%TYPE,
      in_createdby              IN       customer.created_by%TYPE,
      in_userfirstname          IN       customer.user_first_name%TYPE,
      in_userlastname           IN       customer.user_last_name%TYPE,
      in_useremail              IN       customer.user_email%TYPE,
      in_userein                IN       customer.user_ein%TYPE,
      in_saleschannel           IN       customer.sales_channel%TYPE,
      in_roleofuser             IN       customer.role_of_user%TYPE,
      in_channeltype            IN       customer.channel_type%TYPE,
      out_custid                OUT      customer.customer_id%TYPE,
      out_bfgcustid             OUT      customer.bfg_customer_id%TYPE,
      out_bfgcustname           OUT      customer.bfg_customer_name%TYPE,
      out_status                OUT      NUMBER,
      out_errmsg                OUT      VARCHAR2
   )
   AS
/******************************************************************************
   Usage Product Name:All Products
   PURPOSE: For creating new customer

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0         22/8/00		Suman							1.0 Add History Comment for  this procedure

  ******************************************************************************/
      v_custid       customer.customer_id%TYPE;
      v_bfg_custid   customer.bfg_customer_id%TYPE;    -- Added as part of R5
   BEGIN
      SELECT customer_id.NEXTVAL
        INTO v_custid
        FROM DUAL;

      -- Added as part of R5
      SELECT COUNT (1)
        INTO v_bfg_custid
        FROM customer
       WHERE bfg_customer_id = in_bfgcustid;

      -- Added as part of R5
      IF v_bfg_custid = 0
      THEN
         --Customer Data
         INSERT INTO customer
                     (customer_id, NAME, company_name, vat_number,
                      sales_channel_id, bt_subsidiary_id, created_date,
                      created_by, bfg_customer_id, bfg_customer_name,
                      tax_exempted, tax_exempt_ref_num,
                      line_of_site_billing, user_first_name,
                      user_last_name, user_email, user_ein,
                      sales_channel, role_of_user, channel_type
                     )
              VALUES (v_custid, in_cname, in_comp, in_vat,
                      in_salchnid, in_btsub, SYSDATE,
                      in_createdby, in_bfgcustid, in_bfgcustname,
                      in_tax_exempted, in_tax_exempt_ref_num,
                      in_line_of_site_billing, in_userfirstname,
                      in_userlastname, in_useremail, in_userein,
                      in_saleschannel, in_roleofuser, in_channeltype
                     );
      ELSE
         SELECT customer_id
           INTO v_custid
           FROM customer
          WHERE bfg_customer_id = in_bfgcustid;
      END IF;

      -- COMMIT;
      out_custid := v_custid;
      out_bfgcustid := in_bfgcustid;
      out_bfgcustname := in_bfgcustname;
      out_status := pkg_constants.con_status_success;
   EXCEPTION
      WHEN OTHERS
      THEN
         out_custid := 0;
         out_bfgcustid := 0;
         out_bfgcustname := NULL;
         out_status := pkg_constants.con_status_failure;
         out_errmsg := SQLERRM;
--  ROLLBACK;
   END;

   PROCEDURE sps_customer_r5 (
      in_custid   IN       customer.customer_id%TYPE,
      out_cust    OUT      sys_refcursor
   )
   AS
   BEGIN
	 /******************************************************************************
   Usage Product Name:All Products
   PURPOSE: For query for saving customer

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0         22/8/00		Suman							1.0 Add History Comment for  this procedure

  ******************************************************************************/

      OPEN out_cust FOR
         SELECT   expedio_ref_id "Expedio Reference ID", bfg_customer_id,
                  bfg_customer_name, NAME "Full Legal Company Name",
                  user_last_name, user_email, user_ein, q.sales_channel,
                  role_of_user, expedio_ref_id AS "Expedio Reference ID",
                  cr_prop_id, expedio_quoteid "EXPEDIO QUOTE ID",
                  expedio_quoteversion AS "EXPEDIO QUOTE VERSION"
             FROM customer c, quote q, quote_header qh
            WHERE q.quote_id = qh.quote_id
              AND c.customer_id = q.customer_id
              AND c.customer_id = in_custid
         ORDER BY c.customer_id;
   END;

    PROCEDURE spi_quote_r5 (
      in_cid              IN       quote.customer_id%TYPE,
      in_cname            IN       quote.customer_name%TYPE,
      in_ordtype          IN       quote.order_type%TYPE,
      in_qhversion        IN       quote_header.VERSION%TYPE,
      in_qref             IN       quote.reference_number%TYPE,
      in_status           IN       quote_header.status%TYPE,
      in_type             IN       quote_header.TYPE%TYPE,
      in_quotename        IN       quote_header.quote_name%TYPE,
      in_contractid       IN       quote_header.contract_id%TYPE,
      in_contterm         IN       quote_header.contract_term%TYPE,
      in_bid              IN       quote_header.bid_number%TYPE,
      in_oppid            IN       quote_header.opportunity_id%TYPE,
      in_currency         IN       quote_header.currency%TYPE,
      in_comments         IN       quote_header.comments%TYPE,
      in_expediorefid     IN       quote_header.expedio_ref_id%TYPE,
      in_crpropid         IN       quote_header.cr_prop_id%TYPE,
      in_expquoteid       IN       quote_header.expedio_quoteid%TYPE,
      in_expedioversion   IN       quote_header.expedio_quoteversion%TYPE,
      in_createdby        IN       quote.created_by%TYPE,
      in_saleschannel     IN       quote.sales_channel%TYPE,
      in_btsub            IN       quote.bt_subsidiary_id%TYPE,
      out_quoteid         OUT      quote.quote_id%TYPE,
      out_qthdrid         OUT      quote_header.quote_header_id%TYPE,
      out_expversion      OUT      quote_header.expedio_quoteversion%TYPE,
      out_status          OUT      NUMBER,
      out_errmsg          OUT      VARCHAR2,
      in_product_name      IN       VARCHAR2 DEFAULT NULL,
      in_subordertype      IN      quote_header.SUB_ORDER_TYPE%type DEFAULT NULL
   )
   AS
   /******************************************************************************
   NAME:       spi_quote_r5
   PURPOSE:    Creating Quote Detials

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0      12/07/2011    Suman             1.Added One In parameter for subordertype.
   2.0      17/12/2010                      -- Added in_product_name on 17/12/2010 as part of introducing new table QUOTE_STATUS

******************************************************************************/
      v_quoteid      quote.quote_id%TYPE;
      v_quotehdrid   quote_header.quote_header_id%TYPE;
      v_count        NUMBER;
   BEGIN
      SELECT quote_id.NEXTVAL
        INTO v_quoteid
        FROM DUAL;

      INSERT INTO quote
                  (quote_id, customer_id, customer_name, reference_number,
                   order_type, created_date, created_by, sales_channel,
                   bt_subsidiary_id  --added for R7 on 26 oct 2010 by nagendra
                  )
           VALUES (v_quoteid, in_cid, in_cname, in_qref,
                   in_ordtype, SYSDATE, in_createdby, in_saleschannel,
                   in_btsub          --added for R7 on 26 oct 2010 by nagendra
                  );

      SELECT quote_header_id.NEXTVAL
        INTO v_quotehdrid
        FROM DUAL;

      INSERT INTO quote_header
                  (quote_header_id, quote_id, contract_term, quote_name,
                   opportunity_id, bid_number, comments, status, TYPE,
                   currency, VERSION, created_date, created_by,
                   contract_id, expedio_ref_id, cr_prop_id,
                   expedio_quoteid, expedio_quoteversion,SUB_ORDER_TYPE
                  )
           VALUES (v_quotehdrid, v_quoteid, in_contterm, in_quotename,
                   in_oppid, in_bid, in_comments, in_status, in_type,
                   in_currency, in_qhversion, SYSDATE, in_createdby,
                   in_contractid, in_expediorefid, in_crpropid,
                   in_expquoteid, in_expedioversion,in_subordertype
                  );

      -- Added on 17/12/2010 as part of introducing new table QUOTE_STATUS
      INSERT INTO quote_status
                  (quote_id, quote_header_id, product_name, status,
                   quote_status_id
                  )
           VALUES (v_quoteid, v_quotehdrid, in_product_name, in_status,
                   quote_status_id.NEXTVAL
                  );

			out_quoteid := v_quoteid;
      out_qthdrid := v_quotehdrid;
      out_expversion := in_qhversion;
      out_status := pkg_constants.con_status_success;
   EXCEPTION
      WHEN OTHERS
      THEN
         out_quoteid := 0;
         out_qthdrid := 0;
         out_expversion := NULL;
         out_status := pkg_constants.con_status_failure;
         out_errmsg := SQLERRM;
   END;

   PROCEDURE sps_quote_r5 (
      in_expquoteid     IN       quote_header.expedio_quoteid%TYPE,
      in_expqhversion   IN       quote_header.expedio_quoteversion%TYPE,
      in_exprefid       IN       quote_header.expedio_ref_id%TYPE,
      out_quote         OUT      sys_refcursor,
      -- Added in_product_name on 17/12/2010 as part of introducing new table QUOTE_STATUS
      in_product_name  IN       VARCHAR2 DEFAULT NULL
   )
   AS
	 /******************************************************************************
   Usage Product Name:All Products
   PURPOSE: For query for saving quote

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0         22/8/00		Suman							1.0 Add History Comment for  this procedure

  ******************************************************************************/
   BEGIN
      OPEN out_quote FOR
         SELECT   expedio_quoteid "expedio quoteid",
                  qh.expedio_quoteversion "expedio quote version",
                  qh.quote_name "quote name",
                  NVL (qs.status, qh.status) "quote status",

                  -- Added on 17/12/2010 as part of using status in quote_status table
                  qh.contract_term "contract term", qh.currency "currency",
                  qh.bid_number "bid number", qh.opportunity_id "siebel id",
                  q.order_type "order type", qh.comments "quote comments"
             FROM quote q, quote_header qh, quote_status qs
            WHERE qh.quote_id = q.quote_id
              -- Added on 17/12/2010 as part of using status in quote_status table
              AND qh.quote_header_id = qs.quote_header_id(+)
          AND qs.product_name(+) = in_product_name
              AND q.quote_id = in_expquoteid
              AND qh.VERSION = in_expqhversion
              AND qh.expedio_ref_id = in_exprefid
         ORDER BY q.quote_id;
   END;

   PROCEDURE spi_prodselection_r5 (
      in_quoteid       IN       quote.quote_id%TYPE,
      in_productid     IN       product_selection.product_id%TYPE,
      in_prodname      IN       product_selection.product_name%TYPE,
      in_propid        IN       product_selection.proposition_id%TYPE,
      in_propname      IN       product_selection.proposition_name%TYPE,
      in_subpropid     IN       product_selection.sub_proposition_id%TYPE,
      in_subpropname   IN       product_selection.sub_proposition_name%TYPE,
      in_createdby     IN       product_selection.created_by%TYPE,
      in_quotehdrid    IN       product_selection.quote_header_id%TYPE,
      in_siteid        IN       product_selection.site_id%TYPE,
      out_status       OUT      NUMBER,
      out_errmsg       OUT      VARCHAR2
   )
   AS
	 /******************************************************************************
   Usage Product Name:All Products
   PURPOSE: For  saving Products

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0         22/8/00		Suman							1.0 Add History Comment for  this procedure
	 2.0				28/05/2010	Bharathi					2.0 added on 28/05/2010 for R5 by Bharathi
  ******************************************************************************/
      v_count   NUMBER;
   BEGIN
      IF in_siteid IS NULL
      THEN
         SELECT COUNT (*)
           INTO v_count
           FROM product_selection
          WHERE quote_id = in_quoteid
            AND proposition_id = in_propid
            AND sub_proposition_id = in_subpropid
            AND product_id = in_productid
            AND quote_header_id = in_quotehdrid
            AND site_id IS NULL
            AND active = pkg_constants.con_activeflag_yes;
      ELSE
         SELECT COUNT (*)
           INTO v_count
           FROM product_selection
          WHERE quote_id = in_quoteid
            AND proposition_id = in_propid
            AND sub_proposition_id = in_subpropid
            AND product_id = in_productid
            AND quote_header_id = in_quotehdrid
            AND site_id = in_siteid
            AND active = pkg_constants.con_activeflag_yes;
      END IF;

      IF (v_count >= 1)
      THEN
         out_status := pkg_constants.con_status_duplicate;
      ELSE
         BEGIN
            INSERT INTO product_selection
                        (product_selection_id, quote_id,
                         proposition_id, sub_proposition_id, product_id,
                         created_date, created_by, proposition_name,
                         sub_proposition_name, product_name,
                         quote_header_id, site_id,
                         active
                        )
                 VALUES (product_selection_id.NEXTVAL, in_quoteid,
                         in_propid, in_subpropid, in_productid,
                         SYSDATE (), in_createdby, in_propname,
                         in_subpropname, in_prodname,
                         in_quotehdrid, in_siteid,
                         pkg_constants.con_activeflag_yes
                        );

            out_status := pkg_constants.con_status_success;
         END;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         out_errmsg := SQLERRM;
   END;

   PROCEDURE spu_prodselection_r5 (
      in_quoteid       IN       quote.quote_id%TYPE,
      in_productid     IN       product_selection.product_id%TYPE,
      in_prodname      IN       product_selection.product_name%TYPE,
      in_propid        IN       product_selection.proposition_id%TYPE,
      in_propname      IN       product_selection.proposition_name%TYPE,
      in_subpropid     IN       product_selection.sub_proposition_id%TYPE,
      in_subpropname   IN       product_selection.sub_proposition_name%TYPE,
      in_createdby     IN       product_selection.created_by%TYPE,
      in_quotehdrid    IN       product_selection.quote_header_id%TYPE,
      in_siteid        IN       product_selection.site_id%TYPE,
      out_status       OUT      NUMBER,
      out_errmsg       OUT      VARCHAR2
   )
   AS
     /******************************************************************************
   Usage Product Name:All Products
   PURPOSE: For update saving products

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0         22/8/00        Suman                            1.0 Add History Comment for  this procedure
     2.0                28/05/2010    Bharathi                    2.0 added on 28/05/2010 for R5 by Bharathi
  ******************************************************************************/
      v_count   NUMBER;
   BEGIN
      SELECT COUNT (*)
        INTO v_count
        FROM product_selection
       WHERE quote_id = in_quoteid
         AND proposition_id = in_propid
         AND sub_proposition_id = in_subpropid
         AND product_id = in_productid
         AND quote_header_id = in_quotehdrid
         AND site_id = in_siteid
         AND active = pkg_constants.con_activeflag_yes;

      IF (v_count < 1)
      THEN
         out_status := pkg_constants.con_status_failure;
      ELSE
         BEGIN
            UPDATE product_selection
               SET proposition_id = in_propid,
                   sub_proposition_id = in_subpropid,
                   product_id = in_productid,
                   modified_date = SYSDATE,
                   modified_by = in_createdby,
                   proposition_name = in_subpropname,
                   sub_proposition_name = in_subpropname,
                   product_name = in_prodname,
                   quote_header_id = in_quotehdrid,
                   site_id = in_siteid
             WHERE quote_id = in_quoteid
               AND active = pkg_constants.con_activeflag_yes;

            out_status := pkg_constants.con_status_success;
         END;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         out_errmsg := SQLERRM;
   END;

   PROCEDURE SPI_PRICELIST_R5 (
      -- ##### Change for 904 - Multiple Price Book  begin
      --in_pricelistid   IN       quote_price_list.price_list_id%TYPE,
      in_pricelistname   IN       quote_price_list.price_list_name%TYPE,
      -- ##### Change for 904 - Multiple Price Book  end
      in_quotehrdid      IN       quote_price_list.quote_header_id%TYPE,
      in_createdby       IN       quote_price_list.created_by%TYPE,
      in_siteid          IN       quote_price_list.site_id%TYPE,
      in_product_id      IN       quote_price_list.product_id%TYPE,
      in_product_name    IN       quote_price_list.product_name%TYPE,
      out_status         OUT      NUMBER,
      out_errmsg         OUT      VARCHAR2
   )
   AS
      v_count   NUMBER;
   BEGIN
     /******************************************************************************
   Usage Product Name:All Products
   PURPOSE: For saving price list

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0         22/8/00        Suman                            1.0 Add History Comment for  this procedure
  ******************************************************************************/
      -- ##### Change for 904 - Multiple Price Book  begin
         /*SELECT COUNT (*)
           INTO v_count
           FROM quote_price_list
          WHERE quote_header_id = in_quotehrdid
                AND price_list_id = in_pricelistid;*/
      SELECT COUNT (*)
        INTO v_count
        FROM quote_price_list
       WHERE quote_header_id = in_quotehrdid
         AND NVL (site_id, -1) = NVL (in_siteid, -1)
         AND product_id = in_product_id
         AND upper(trim(product_name)) = upper(trim(in_product_name));

      --AND upper(price_list_name) = upper(in_pricelistname);

      -- ##### Change for 904 - Multiple Price Book  end
      IF (v_count = 0)
      THEN
         -- ##### Change for 904 - Multiple Price Book  begin
         INSERT INTO quote_price_list
                     (quote_price_list_id, quote_header_id,
                      price_list_name, site_id, product_id,
                      product_name, created_by, created_date
                     )
              VALUES (quote_price_list_id.NEXTVAL, in_quotehrdid,
                      in_pricelistname, in_siteid, in_product_id,
                      in_product_name, in_createdby, SYSDATE
                     );
       -- ##### Change for 904 - Multiple Price Book  end
      -- out_status := pkg_constants.con_status_success;
      ELSE
         UPDATE quote_price_list
            SET price_list_name = in_pricelistname,
                modified_by = in_createdby,
                modified_date = SYSDATE
          WHERE quote_header_id = in_quotehrdid
            AND NVL (site_id, -1) = NVL (in_siteid, -1)
            AND product_id = in_product_id
            AND upper(trim(product_name)) = upper(trim(in_product_name));
      --   out_status := pkg_constants.con_status_duplicate;
      END IF;

      out_status := pkg_constants.con_status_success;
   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         out_errmsg := SQLERRM;
   END;

   PROCEDURE spu_pricelist_r5 (
      in_quotehrdid      IN       quote_header.quote_header_id%TYPE,
      in_pricelistname   IN       quote_price_list.price_list_name%TYPE,
      in_modified_by     IN       quote_price_list.modified_by%TYPE,
      in_siteid          IN       quote_price_list.site_id%TYPE,
      in_product_id      IN       quote_price_list.product_id%TYPE,
      in_product_name    IN       quote_price_list.product_name%TYPE,
      out_status         OUT      NUMBER,
      out_errmsg         OUT      VARCHAR2
   )
   AS
          /******************************************************************************
   Usage Product Name:All Products
   PURPOSE: For update saving price list

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0         22/8/00        Suman                            1.0 Add History Comment for  this procedure
  ******************************************************************************/
      v_price_list   VARCHAR (100);
   BEGIN
      UPDATE quote_price_list
         SET price_list_name = in_pricelistname,
             site_id = in_siteid,
             product_id = in_product_id,
             product_name = in_product_name,
             modified_by = in_modified_by,
             modified_date = SYSDATE
       WHERE quote_header_id = in_quotehrdid;

      --in_createdby
      out_status := pkg_constants.con_status_success;

      SELECT price_list_name
        INTO v_price_list
        FROM quote_price_list
       WHERE quote_header_id = in_quotehrdid;
   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         out_errmsg := SQLERRM;
   END;

   PROCEDURE spi_configuration_r5 (
      in_quoteheaderid    IN       quote_header.quote_header_id%TYPE,
      in_siteid           IN       site.site_id%TYPE,
      in_attributelist    IN       CLOB,
      in_attributelevel   IN       attribute_mapping.attribute_level%TYPE,
      in_createdby        IN       line_item.created_by%TYPE,
      out_status          OUT      NUMBER,
      out_errmsg          OUT      VARCHAR2
   )
--Row separator is ~ for products
--attribute separator is ##
--parameters for an attribute separated by ::
   AS
          /******************************************************************************
   Usage Product Name:IVPN
   PURPOSE: For saving configuration data

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0         22/8/00        Suman                            1.0 Add History Comment for  this procedure
  ******************************************************************************/
      CURSOR c_attributelist
      IS
         SELECT *
           FROM TABLE
                   (CAST
                       (pkg_common.fn_splitbulkupload (in_attributelist, '~') AS varchar2_clob
                       )
                   );

      i                      NUMBER                                   := 1;
      v_prodid               line_item.product_id%TYPE;
      v_prodname             line_item.product_name%TYPE;
      v_fallback             line_item.fallback_type%TYPE;
      v_parttype             line_item.part_type%TYPE;
      v_tattrid              t_attrmapid;
      v_tconfiglevel         t_configlevel;
      v_tattrval             t_value;
      v_qty                  t_qty;
      v_lineitemid           line_item.line_item_id%TYPE;
      v_lineitemids          VARCHAR2 (2000);
      v_attrlevel            attribute_mapping.attribute_level%TYPE;
      v_configlevel          attribute_mapping.config_level%TYPE;
      v_rowcount             NUMBER;
      v_prodattr             VARCHAR2 (8000);
      v_proddet              VARCHAR2 (8000);
      v_attrdet              VARCHAR2 (8000);
      v_attrcnt              NUMBER;
      v_curdate              TIMESTAMP;
      v_flag                 CHAR (1)                                 := '1';
      v_existintlineitemid   line_item.line_item_id%TYPE;
      v_non_std_flag         VARCHAR2 (1);
      v_bidcount_pr          NUMBER                                   := 0;
      v_bidcount_sec         NUMBER                                   := 0;
      v_caseflag             CHAR (1);
   BEGIN
      SELECT SYSDATE
        INTO v_curdate
        FROM DUAL;

--jay_debug(in_quoteheaderid,in_attributelevel,substr(in_attributelist,1,2000));
      IF (in_attributelist IS NOT NULL)
      THEN
         BEGIN
/* c_attributelist contain Product details and all its attributes.Using cursor loop
 we can cover all products and attributes in one string only*/
            OPEN c_attributelist;

            --SET TRANSACTION READ WRITE NAME 'Product configuration';

            --Loop therough the products in the input string
            LOOP
               FETCH c_attributelist
                INTO v_prodattr;

               v_lineitemid := NULL;
               v_flag := '1';
               EXIT WHEN c_attributelist%NOTFOUND;
               v_proddet :=
                     SUBSTR (v_prodattr, 1, INSTR (v_prodattr, ';', 1, 1) - 1);
               v_attrdet :=
                        SUBSTR (v_prodattr, INSTR (v_prodattr, ';', 1, 1) + 1);
               v_attrdet := v_attrdet || '##';

               SELECT pkg_common.fn_countbulkupload (v_attrdet, '##')
                 INTO v_attrcnt
                 FROM DUAL;

               IF (v_attrcnt != 0)
               THEN
                  BEGIN
                     --get the list of products from the input string
                     v_prodid :=
                        SUBSTR (v_proddet,
                                INSTR (v_proddet, '|||') + 3,
                                  (INSTR (v_proddet, '::') - 3
                                  )
                                - INSTR (v_proddet, '|||')
                               );
                     v_proddet :=
                          SUBSTR (v_proddet, INSTR (v_proddet, '::', 1, 1) + 2);
                     v_prodname :=
                        SUBSTR (v_proddet,
                                INSTR (v_proddet, '|||') + 3,
                                  (INSTR (v_proddet, '::') - 3
                                  )
                                - INSTR (v_proddet, '|||')
                               );
                     v_proddet :=
                          SUBSTR (v_proddet, INSTR (v_proddet, '::', 1, 1) + 2);
                     v_fallback :=
                        SUBSTR (v_proddet,
                                INSTR (v_proddet, '|||', 1, 1) + 3,
                                  (INSTR (v_proddet, '::', 1, 1) - 1
                                  )
                                - (INSTR (v_proddet, '|||', 1, 1) + 2)
                               );
                     v_proddet :=
                          SUBSTR (v_proddet, INSTR (v_proddet, '::', 1, 1) + 2);
                     v_parttype :=
                        SUBSTR (v_proddet,
                                INSTR (v_proddet, '|||', 1, 1) + 3,
                                  (INSTR (v_proddet, '::', 1, 1) - 1
                                  )
                                - (INSTR (v_proddet, '|||', 1, 1) + 2)
                               );
                     v_proddet :=
                          SUBSTR (v_proddet, INSTR (v_proddet, '::', 1, 1) + 2);
                     v_non_std_flag :=
                         SUBSTR (v_proddet, INSTR (v_proddet, '|||', 1, 1) + 3);

                    --- m_j1 (100, v_prodid);
                    --- m_j1 (200, v_prodname);
                    --- m_j1 (300, v_fallback);
                    --- m_j1 (400, v_parttype);
                    --- m_j1 (500, v_non_std_flag);

                     /*  DBMS_OUTPUT.put_line ('  v_non_std_flag   '
                                             || v_non_std_flag
                                            );*/

                     --validation if fallback is null
                     IF (v_fallback IS NULL)
                     THEN
                        BEGIN
                           v_fallback := 'Primary';
                        END;
                     END IF;

                     --validation for parttype incase of CPE
                     IF (UPPER (v_prodname) LIKE '%CPE%')
                     THEN
                        BEGIN
                           IF (v_parttype IS NULL)
                           THEN
                              BEGIN
                                 out_status :=
                                             pkg_constants.con_status_failure;
                                 out_errmsg :=
                                           'Part Type cannot be null for CPE';
                                 v_flag := '0';
                              END;
--                            ELSIF  (upper(v_parttype) ='BUNDLE') THEN
--                              v_non_std_flag := '';
                           END IF;
                        END;
                     END IF;

                     IF (v_flag = '1')
                     THEN
                        BEGIN
                           -- Check if record exists for the current product in line item
                           SELECT COUNT (*)
                             INTO v_rowcount
                             FROM line_item
                            WHERE quote_header_id = in_quoteheaderid
                              AND (   site_id = in_siteid
                                   OR (    site_id IS NULL
                                       AND NVL (in_siteid, 0) = 0
                                      )
                                  )            /*904 Order Site to Site SLA */
                              AND UPPER (product_name) = UPPER (v_prodname)
                              AND UPPER (fallback_type) = UPPER (v_fallback)
                              AND active = pkg_constants.con_activeflag_yes;

                          --- m_j1 ('20', v_rowcount);

                                 --     AND NVL(non_std_flag,-1) = NVL(v_non_std_flag,-1) ;
                           --      DBMS_OUTPUT.put_line ('  v_rowcount   ' || v_rowcount);

                           --If record does not exist, create a  line item
                           IF (v_rowcount = 0)
                           THEN
                              BEGIN
                                 INSERT INTO line_item
                                             (line_item_id,
                                              quote_header_id, site_id,
                                              product_id, product_name,
                                              fallback_type, part_type,
                                              quantity,
                                              active,
                                              --non_std_flag,
                                              created_by, created_date
                                             )
                                      VALUES (line_item_id.NEXTVAL,
                                              in_quoteheaderid, in_siteid,
                                              v_prodid, v_prodname,
                                              v_fallback, v_parttype,
                                              DEFAULT,
                                              pkg_constants.con_activeflag_yes,
                                              -- v_non_std_flag,
                                              in_createdby, v_curdate
                                             )
                                   RETURNING line_item_id
                                        INTO v_lineitemid;
                              END;

                             --- m_j1 ('3', '3');
                           /* DBMS_OUTPUT.put_line (   '  v_lineitemid   '
                                                  || v_lineitemid
                                                 );*/
                           ELSE
                              BEGIN
                                 --Logic to incorporate CPE parts Insert/ Update
                                 IF (v_parttype IS NOT NULL)
                                 THEN
                                    BEGIN
                                       --added if condition on 16/1/2010 to update
                                       --line_item for part type other than Bundle
                                       IF (UPPER (v_parttype) <> 'BUNDLE')
                                       THEN
                                          BEGIN
                                           ---  m_j1 ('4', '4');

                                             --if it is not bundle, update all previous records
                                             -- and insert new record
                                             UPDATE line_item
                                                SET active =
                                                       pkg_constants.con_activeflag_no,
                                                    modified_date = v_curdate
                                              WHERE (   part_type IS NOT NULL
                                                     OR part_type <> ''
                                                    )
                                                AND quote_header_id =
                                                              in_quoteheaderid
                                                AND (   site_id = in_siteid
                                                     OR (    site_id IS NULL
                                                         AND NVL (in_siteid,
                                                                  0) = 0
                                                        )
                                                    )
                                                /*904 Order Site to Site SLA */
                                                AND product_name = v_prodname
                                                AND created_date < v_curdate
                                                AND UPPER (fallback_type) =
                                                            UPPER (v_fallback)
                                                AND UPPER (part_type) =
                                                       UPPER (TRIM (v_parttype)
                                                             )
                                                -- AND NVL(non_std_flag,-1) <> NVL(v_non_std_flag,-1)
                                                   -- AND product_id = v_prodid
                                                AND modified_date IS NULL;

                                             INSERT INTO line_item
                                                         (line_item_id,
                                                          quote_header_id,
                                                          site_id,
                                                          product_id,
                                                          product_name,
                                                          fallback_type,
                                                          part_type,
                                                          quantity,
                                                          active,
                                                          --  non_std_flag,
                                                          created_by,
                                                          created_date
                                                         )
                                                  VALUES (line_item_id.NEXTVAL,
                                                          in_quoteheaderid,
                                                          in_siteid,
                                                          v_prodid,
                                                          v_prodname,
                                                          v_fallback,
                                                          v_parttype,
                                                          DEFAULT,
                                                          pkg_constants.con_activeflag_yes,
                                                          --    v_non_std_flag,
                                                          in_createdby,
                                                          v_curdate
                                                         )
                                               RETURNING line_item_id
                                                    INTO v_lineitemid;
                                          END;
                                       ELSE
                                          BEGIN
                                            --- m_j1 ('5', '5');

                                             --For a bundle, check if it is existing
                                             SELECT COUNT (*)
                                               INTO v_rowcount
                                               FROM line_item
                                              WHERE quote_header_id =
                                                              in_quoteheaderid
                                                AND (   site_id = in_siteid
                                                     OR (    site_id IS NULL
                                                         AND NVL (in_siteid,
                                                                  0) = 0
                                                        )
                                                    )
                                                /*904 Order Site to Site SLA */
                                                AND product_name = v_prodname
                                                AND active =
                                                       pkg_constants.con_activeflag_yes
                                                AND UPPER (fallback_type) =
                                                            UPPER (v_fallback)
                                                --    AND NVL(non_std_flag,-1) = NVL(v_non_std_flag,-1)
                                                AND created_date < v_curdate
                                                AND product_id <> v_prodid
                                                AND modified_date IS NULL;

                                             IF (v_rowcount > 0)
                                             THEN
                                                BEGIN
                                                  --- m_j1 ('6', '6');

                                                   --A bundle exists with different product id, so soft delete and
                                                   --then insert a new line item
                                                   UPDATE line_item
                                                      SET active =
                                                             pkg_constants.con_activeflag_no,
                                                          modified_date =
                                                                     v_curdate
                                                    WHERE UPPER (part_type) =
                                                                      'BUNDLE'
                                                      AND quote_header_id =
                                                              in_quoteheaderid
                                                      AND (   site_id =
                                                                     in_siteid
                                                           OR (    site_id IS NULL
                                                               AND NVL
                                                                      (in_siteid,
                                                                       0
                                                                      ) = 0
                                                              )
                                                          )
                                                      /*904 Order Site to Site SLA */
                                                      AND product_name =
                                                                    v_prodname
                                                      AND created_date <
                                                                     v_curdate
                                                      AND UPPER (fallback_type) =
                                                             UPPER (v_fallback)
                                                      AND product_id <>
                                                                      v_prodid
                                                      --     AND NVL(non_std_flag,-1) = NVL(v_non_std_flag,-1)
                                                      AND modified_date IS NULL;

                                                  --- m_j1 ('7', '7');

                                                   --previous bundle with different product id
                                                   -- has been to inactive. for same product id, check
                                                   --if bundle is present
                                                   SELECT COUNT (*)
                                                     INTO v_rowcount
                                                     FROM line_item
                                                    WHERE quote_header_id =
                                                              in_quoteheaderid
                                                      AND (   site_id =
                                                                     in_siteid
                                                           OR (    site_id IS NULL
                                                               AND NVL
                                                                      (in_siteid,
                                                                       0
                                                                      ) = 0
                                                              )
                                                          )
                                                      /*904 Order Site to Site SLA */
                                                      AND product_name =
                                                                    v_prodname
                                                      AND active =
                                                             pkg_constants.con_activeflag_yes
                                                      AND UPPER (fallback_type) =
                                                             UPPER (v_fallback)
                                                      -- AND NVL(non_std_flag,-1) = NVL(v_non_std_flag,-1)
                                                      AND UPPER (part_type) =
                                                             UPPER (v_parttype)
                                                      --AND created_date < v_curdate
                                                      --AND product_id <> v_prodid
                                                      AND modified_date IS NULL;

                                                   --if not present, insert new record
                                                   --else select existing line item
                                                   IF (v_rowcount = 0)
                                                   THEN
                                                     --- m_j1 ('8', '8');

                                                      INSERT INTO line_item
                                                                  (line_item_id,
                                                                   quote_header_id,
                                                                   site_id,
                                                                   product_id,
                                                                   product_name,
                                                                   fallback_type,
                                                                   part_type,
                                                                   quantity,
                                                                   active,
                                                                   -- non_std_flag,
                                                                   created_by,
                                                                   created_date
                                                                  )
                                                           VALUES (line_item_id.NEXTVAL,
                                                                   in_quoteheaderid,
                                                                   in_siteid,
                                                                   v_prodid,
                                                                   v_prodname,
                                                                   v_fallback,
                                                                   v_parttype,
                                                                   DEFAULT,
                                                                   pkg_constants.con_activeflag_yes,
                                                                   -- v_non_std_flag,
                                                                   in_createdby,
                                                                   v_curdate
                                                                  )
                                                        RETURNING line_item_id
                                                             INTO v_lineitemid;
                                                   ELSE
                                                     --- m_j1 ('9', '9');

                                                      --select existing line item
                                                      SELECT line_item_id
                                                        INTO v_lineitemid
                                                        FROM line_item
                                                       WHERE quote_header_id =
                                                                in_quoteheaderid
                                                         AND (   site_id =
                                                                     in_siteid
                                                              OR (    site_id IS NULL
                                                                  AND NVL
                                                                         (in_siteid,
                                                                          0
                                                                         ) = 0
                                                                 )
                                                             )
                                                         /*904 Order Site to Site SLA */
                                                         AND product_name =
                                                                    v_prodname
                                                         AND active =
                                                                pkg_constants.con_activeflag_yes
                                                         AND UPPER
                                                                (fallback_type) =
                                                                UPPER
                                                                   (v_fallback)
                                                         AND UPPER (part_type) =
                                                                UPPER
                                                                   (v_parttype)
                                                         -- AND NVL(non_std_flag,-1) = NVL(v_non_std_flag,-1)
                                                               --AND created_date < v_curdate
                                                               --AND product_id <> v_prodid
                                                         AND modified_date IS NULL;
                                                   END IF;
                                                END;
                                             ELSE
                                               --- m_j1 ('10', '10');

                                                BEGIN
                                                   --added for no_data_found error starts
                                                               --previous bundle saved also has same product id
                                                   SELECT line_item_id
                                                     INTO v_lineitemid
                                                     FROM line_item
                                                    WHERE quote_header_id =
                                                              in_quoteheaderid
                                                      AND (   site_id =
                                                                     in_siteid
                                                           OR (    site_id IS NULL
                                                               AND NVL
                                                                      (in_siteid,
                                                                       0
                                                                      ) = 0
                                                              )
                                                          )
                                                      /*904 Order Site to Site SLA */
                                                      AND UPPER (product_name) =
                                                             UPPER (v_prodname)
                                                      AND UPPER (fallback_type) =
                                                             UPPER (v_fallback)
                                                      --    AND NVL(non_std_flag,-1) = NVL(v_non_std_flag,-1)------T1 defect fix 19th June 2010
                                                      AND active =
                                                             pkg_constants.con_activeflag_yes
                                                      AND product_id =
                                                                      v_prodid;
                                                EXCEPTION
                                                   WHEN NO_DATA_FOUND
                                                   THEN
                                                      SELECT line_item_id
                                                        INTO v_lineitemid
                                                        FROM line_item
                                                       WHERE quote_header_id =
                                                                in_quoteheaderid
                                                         AND (   site_id =
                                                                     in_siteid
                                                              OR (    site_id IS NULL
                                                                  AND NVL
                                                                         (in_siteid,
                                                                          0
                                                                         ) = 0
                                                                 )
                                                             )
                                                         AND UPPER
                                                                 (product_name) =
                                                                UPPER
                                                                   (v_prodname)
                                                         AND UPPER
                                                                (fallback_type) =
                                                                UPPER
                                                                   (v_fallback)
                                                         AND active =
                                                                pkg_constants.con_activeflag_yes
                                                         AND product_id =
                                                                (SELECT DISTINCT product_id
                                                                            FROM line_item
                                                                           WHERE quote_header_id =
                                                                                    in_quoteheaderid
                                                                             AND (   site_id =
                                                                                        in_siteid
                                                                                  OR (    site_id IS NULL
                                                                                      AND NVL
                                                                                             (in_siteid,
                                                                                              0
                                                                                             ) =
                                                                                             0
                                                                                     )
                                                                                 )
                                                                             AND UPPER
                                                                                    (product_name
                                                                                    ) =
                                                                                    UPPER
                                                                                       (v_prodname
                                                                                       )
                                                                             AND UPPER
                                                                                    (fallback_type
                                                                                    ) =
                                                                                    UPPER
                                                                                       (v_fallback
                                                                                       )
                                                                             AND active =
                                                                                    pkg_constants.con_activeflag_yes
                                                                             AND UPPER
                                                                                    (part_type
                                                                                    ) =
                                                                                    UPPER
                                                                                       (TRIM
                                                                                           (v_parttype
                                                                                           )
                                                                                       ));
                                                END;
                                             --added for no_data_found error ends
                                             END IF;
                                          END;
                                       END IF;
                                    END;
                                 ELSE
                                    BEGIN
                                      -- m_j1 ('11', '11');

                                       --    m_j1('11');
                                              --for non - BT CPE products
                                       SELECT line_item_id
                                         INTO v_lineitemid
                                         FROM line_item
                                        WHERE quote_header_id =
                                                              in_quoteheaderid
                                          AND (   site_id = in_siteid
                                               OR (    site_id IS NULL
                                                   AND NVL (in_siteid, 0) = 0
                                                  )
                                              )
                                          /*904 Order Site to Site SLA */
                                          AND UPPER (product_name) =
                                                            UPPER (v_prodname)
                                          AND UPPER (fallback_type) =
                                                            UPPER (v_fallback)
                                          AND active =
                                                 pkg_constants.con_activeflag_yes
                                          AND product_id = v_prodid;
                                    END;
                                 END IF;

                                -- m_j1 ('12', '12');


                     ----Start Moved to below update stmt to get inactive order line item ids
                     ----Modified by SRK on 22-Feb for improve the performance

                           /*  SELECT pkg_common.to_string
                                           (CAST
                                               (COLLECT (TO_CHAR (line_item_id)
                                                        ) AS varchar2_ntt
                                               )
                                           )
                                   INTO v_lineitemids
                                   FROM line_item
                                  WHERE quote_header_id = in_quoteheaderid
                                    AND (   site_id = in_siteid
                                         OR (    site_id IS NULL
                                             AND NVL (in_siteid, 0) = 0
                                            )
                                        )
                                    AND UPPER (product_name) =
                                                            UPPER (v_prodname)
                                    AND UPPER (fallback_type) =
                                                            UPPER (v_fallback)
                                    AND active =
                                           CASE
                                              --added case condition for when line_item
                                              --is not updated for part type bundle
                                           WHEN (   (    v_parttype IS NULL
                                                     AND modified_date IS NULL
                                                    )
                                                 OR (    v_parttype = ''
                                                     AND modified_date IS NULL
                                                    )
                                                 OR (    UPPER (v_parttype) =
                                                                      'BUNDLE'
                                                     AND product_id = v_prodid
                                                     AND modified_date IS NULL
                                                    )
                                                )
                                                 THEN pkg_constants.con_activeflag_yes
                                              ELSE pkg_constants.con_activeflag_no
                                           END;

                                 IF (INSTR (v_lineitemids, ',', 1) = 0)
                                 THEN
                                    v_lineitemids := v_lineitemids || ',';
                                 END IF;

                                    */   ----End Moved to below update stmt
                              END;
                           END IF;

                           --get the individual parameters from the input string
                           FOR i IN 1 .. v_attrcnt
                           LOOP
                              --  m_j1('1190','chking');
                              v_tattrid (i) :=
                                 SUBSTR (v_attrdet,
                                         INSTR (v_attrdet, '|||') + 3,
                                           (INSTR (v_attrdet, '::') - 3
                                           )
                                         - INSTR (v_attrdet, '|||')
                                        );
                              --m_j1('110',v_tattrid (i));
                              v_attrdet :=
                                 SUBSTR (v_attrdet,
                                         INSTR (v_attrdet, '::', 1, 1) + 2
                                        );
                              v_tconfiglevel (i) :=
                                 SUBSTR (v_attrdet,
                                         INSTR (v_attrdet, '|||') + 3,
                                           (INSTR (v_attrdet, '::') - 3
                                           )
                                         - INSTR (v_attrdet, '|||')
                                        );
                              --m_j1('111',v_tconfiglevel (i));
                              v_attrdet :=
                                 SUBSTR (v_attrdet,
                                         INSTR (v_attrdet, '::', 1, 1) + 2
                                        );
                              v_tattrval (i) :=
                                 SUBSTR (v_attrdet,
                                         INSTR (v_attrdet, '|||') + 3,
                                           (INSTR (v_attrdet, '::') - 3
                                           )
                                         - INSTR (v_attrdet, '|||')
                                        );
                              --m_j1('112',v_tattrval (i));
                              v_attrdet :=
                                 SUBSTR (v_attrdet,
                                         INSTR (v_attrdet, '::', 1, 1) + 2
                                        );
                              /*   m_j1('900',v_attrdet);
                                 m_j1('900','success');*/
                              v_qty (i) :=
                                 SUBSTR (v_attrdet,
                                         INSTR (v_attrdet, '|||') + 3,
                                           (INSTR (v_attrdet, '##') - 3
                                           )
                                         - INSTR (v_attrdet, '|||')
                                        );
                              --  m_j1('113','success');

                              -- m_j1('113',v_qty (i));
                              v_attrdet :=
                                 SUBSTR (v_attrdet,
                                         INSTR (v_attrdet, '##', 1) + 2
                                        );
                           -- m_j1('901',v_attrdet);
                           END LOOP;

       ---Update all previous order_line_item_details for the exisiting order_line_items
       ---Update modified by SRK on 22-Feb for improve the performance

                           FORALL i IN v_tconfiglevel.FIRST .. v_tconfiglevel.LAST
                               UPDATE line_item_detail ld
                                 SET active = pkg_constants.con_activeflag_no,
                                     modified_date = v_curdate,
                                     modified_by = in_createdby
                               WHERE line_item_id IN (
                                     SELECT line_item_id
                                       FROM line_item   WHERE quote_header_id = in_quoteheaderid
                                    AND (   site_id = in_siteid
                                         OR (    site_id IS NULL
                                             AND NVL (in_siteid, 0) = 0
                                            )
                                        )
                                    AND UPPER (product_name) =
                                                            UPPER (v_prodname)
                                    AND UPPER (fallback_type) =
                                                            UPPER (v_fallback)
                                    AND active =
                                           CASE
                                              --added case condition for when line_item
                                              --is not updated for part type bundle
                                           WHEN (   (    v_parttype IS NULL
                                                     AND modified_date IS NULL
                                                    )
                                                 OR (    v_parttype = ''
                                                     AND modified_date IS NULL
                                                    )
                                                 OR (    UPPER (v_parttype) =
                                                                      'BUNDLE'
                                                     AND product_id = v_prodid
                                                     AND modified_date IS NULL
                                                    )
                                                )
                                                 THEN pkg_constants.con_activeflag_yes
                                              ELSE pkg_constants.con_activeflag_no
                                           END)
                                AND EXISTS (
                                     SELECT 1
                                       FROM attribute_mapping am
                                         WHERE UPPER (config_level) =
                                                    UPPER (v_tconfiglevel (i))
                                           AND UPPER (attribute_level) =
                                                     UPPER (in_attributelevel)
                                          AND ld.attribute_mapping_id =
                                                       am.attribute_mapping_id)
                                 AND created_date < v_curdate
                                 AND modified_date IS NULL
                                 --and  nvl(non_std_flag,-1) <> nvl(v_non_std_flag,-2)
                                 AND NVL (non_std_flag, -1) =
                                        CASE
                                           WHEN (non_std_flag = v_non_std_flag
                                                )
                                              THEN v_non_std_flag
                                           WHEN non_std_flag IS NULL
                                              THEN NVL (non_std_flag, -1)
                                           WHEN (    v_non_std_flag =
                                                        pkg_constants.con_activeflag_yes
                                                 AND non_std_flag <>
                                                                v_non_std_flag
                                                )
                                              THEN pkg_constants.con_activeflag_no
                                           ELSE pkg_constants.con_activeflag_yes
                                        END;

                             --      -('224','224');
                           --insert into line-item_detail all the attributes after making
                           --existing attributes as inactive
                           FORALL i IN 1 .. v_attrcnt
                              INSERT INTO line_item_detail
                                          (line_item_detail_id,
                                           line_item_id,
                                           attribute_mapping_id, VALUE,
                                           active,
                                           non_std_flag, created_by,
                                           created_date, quantity
                                          )
                                   VALUES (line_item_detail_id.NEXTVAL,
                                           v_lineitemid,
                                           v_tattrid (i), v_tattrval (i),
                                           pkg_constants.con_activeflag_yes,
                                           v_non_std_flag, in_createdby,
                                           v_curdate, v_qty (i)
                                          );
                           out_status := pkg_constants.con_status_success;
                        --   m_j1('114','114');
                        END;
                     END IF;
                  END;
               ELSE
                  BEGIN
                     out_status := pkg_constants.con_status_failure;
                     out_errmsg := 'Invalid Product-Attribute List';
                  END;
               END IF;
            END LOOP;

            CLOSE c_attributelist;
         --   COMMIT;
         END;
      ELSE
         BEGIN
            out_status := pkg_constants.con_status_failure;
            out_errmsg := 'Invalid Product-Attribute List';
         END;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         out_errmsg := SQLERRM;
   --   ROLLBACK;
   END;

   PROCEDURE sps_productreports_r5 (
      in_quoteheaderid     IN       quote_header.quote_header_id%TYPE,
      in_productid         IN       line_item.product_id%TYPE,
      in_prodname          IN       line_item.product_name%TYPE,
      out_productreports   OUT      sys_refcursor
   )
   AS
/******************************************************************************
   Usage Product Name:IVPN
   PURPOSE: query pop. for configuration data

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0         22/8/00        Suman                            1.0 Add History Comment for  this procedure
  ******************************************************************************/
   BEGIN
      OPEN out_productreports FOR
         SELECT am.attribute_mapping_id "Report ID",
                am.sqe_attribute "Report Name"
           FROM quote_header qh,
                line_item li,
                line_item_detail lid,
                attribute_mapping am
          WHERE qh.quote_header_id = in_quoteheaderid
            AND li.product_id = in_productid
            AND li.product_name = in_prodname
            AND li.quote_header_id = qh.quote_header_id
            AND lid.line_item_id = li.line_item_id
            AND lid.attribute_mapping_id IN (501, 502, 503, 504, 505, 506)
            AND am.attribute_mapping_id = lid.attribute_mapping_id
            AND lid.active = pkg_constants.con_activeflag_yes;
   END sps_productreports_r5;

   -- Added by Sujana on 8/7/2010 as part of R5 - Start
   PROCEDURE sps_displayproducts_r5 (
      in_quoteheaderid         IN       quote_header.quote_header_id%TYPE,
      out_dispquoteprdts       OUT      sys_refcursor,  --- for quote-products
      out_dispquotesiteprdts   OUT      sys_refcursor
/******************************************************************************
   Usage Product Name:IVPN
   PURPOSE: query pop. for configuration data

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0         22/8/00        Suman                            1.0 Add History Comment for  this procedure
   2.0        8/7/2010   Sujana                        2.0 Added by Sujana on 8/7/2010 as part of R5 - Start
  ******************************************************************************/

   )
   AS
   BEGIN
      OPEN out_dispquotesiteprdts FOR
         SELECT   st.site_id "Site ID", st.NAME "Site_Name",
                  ps.product_id "Site Level Product ID",
                  ps.product_name "Site Level Product Name"
             FROM site st LEFT OUTER JOIN quote_site qst
                  ON st.site_id = qst.site_id
                  LEFT OUTER JOIN quote_header qh
                  ON qst.quote_header_id = qh.quote_header_id
                  LEFT OUTER JOIN product_selection ps
                  ON qh.quote_header_id = ps.quote_header_id
                AND st.site_id = ps.site_id
                --join condition modified by tanmayi on 1/09/2010
                AND (   ps.active = pkg_constants.con_activeflag_yes
                     OR ps.active IS NULL
                    )
            WHERE qst.active = pkg_constants.con_activeflag_yes
              AND qh.quote_header_id = in_quoteheaderid
              --Added Main_Site_flag condition by tanmayi on 9/9/2010
              AND NVL (st.main_site_flag, '-1') !=
                                              pkg_constants.con_activeflag_yes
         ORDER BY st.NAME ASC;

      OPEN out_dispquoteprdts FOR
         SELECT ps.product_id "Quote Level Product Id",
                ps.product_name "Quote Level Product Name", ps.proposition_id,
                ps.proposition_name, ps.sub_proposition_id,
                ps.sub_proposition_name
           FROM product_selection ps
          WHERE quote_header_id = in_quoteheaderid
            AND site_id IS NULL
            AND (   ps.active = pkg_constants.con_activeflag_yes
                 OR ps.active IS NULL
                );
   END sps_displayproducts_r5;

-- Added by Sujana on 8/7/2010 as part of R5 - End

   -- Added by Bharathi on 24/7/2010 as part of R5 - Start
   PROCEDURE sps_orderlevelproducts_r5 (
      in_quoteheaderid         IN       quote_header.quote_header_id%TYPE,
      --in_orderheaderid         IN       order_header.order_header_id%TYPE,
      out_dispquoteprdts       OUT      sys_refcursor,  --- for quote-products
      out_dispordersiteprdts   OUT      sys_refcursor
   --- for quote-site-products
   )
/******************************************************************************
   Usage Product Name:IVPN
   PURPOSE: query pop. for order level products

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0         22/8/00        Suman                            1.0 Add History Comment for  this procedure
  ******************************************************************************/
   AS
   BEGIN
      OPEN out_dispordersiteprdts FOR
         SELECT qh.quote_header_id, oh.order_header_id, st.site_id "Site ID",
                st.NAME "Site_Name", ps.product_id "Site Level Product ID",
                PS.PRODUCT_NAME "Site Level Product Name"
           FROM quote q INNER JOIN quote_header qh
                ON q.quote_id = qh.quote_id
                LEFT OUTER JOIN quote_site qst
                ON qh.quote_header_id = qst.quote_header_id
                LEFT OUTER JOIN site st ON st.site_id = qst.site_id
                LEFT OUTER JOIN product_selection ps
                ON qh.quote_header_id = ps.quote_header_id
              AND st.site_id = ps.site_id
                LEFT OUTER JOIN order_header oh
                ON qh.quote_header_id = oh.quote_header_id
              AND (    oh.product_name = 'BT IVPN2 GLOBAL'
                   AND oh.product_name IS NULL
                  )
          WHERE qh.quote_header_id = in_quoteheaderid
            --AND oh.order_header_id = in_orderheaderid
            AND qst.active = pkg_constants.con_activeflag_yes
            AND (   ps.active = pkg_constants.con_activeflag_yes
                 OR ps.active IS NULL
                )
            --Added Main_Site_flag condition by tanmayi on 13/9/2010
            AND NVL (st.main_site_flag, '-1') !=
                                              pkg_constants.con_activeflag_yes;

      OPEN out_dispquoteprdts FOR
         SELECT oh.order_header_id "Order Header ID",
                ps.quote_header_id "Quote Header ID",
                ps.product_name "Product Name", ps.product_id "Product ID"
           FROM product_selection ps LEFT OUTER JOIN order_header oh
                ON ps.quote_header_id = oh.quote_header_id
              AND (    oh.product_name = 'BT IVPN2 GLOBAL'
                   AND oh.product_name IS NULL
                  )
                LEFT OUTER JOIN quote_site qst
                ON qst.quote_header_id = oh.quote_header_id
          WHERE oh.quote_header_id = in_quoteheaderid
            --AND oh.order_header_id = in_orderheaderid
            AND qst.site_id IS NULL
            AND qst.active = pkg_constants.con_activeflag_yes
            AND (   ps.active = pkg_constants.con_activeflag_yes
                 OR ps.active IS NULL
                );
   END sps_orderlevelproducts_r5;

-- Added by Bharathi on 24/7/2010 as part of R5 - End
    PROCEDURE spi_quote_version_r5 (
--Added by Tanmayi on 20/07/2010 for creating new version of Quote
      in_expquoteid          IN       quote_header.expedio_quoteid%TYPE,
      in_expquoteversion     IN       quote_header.expedio_parent_version%TYPE,
      in_createdby           IN       quote_header.created_by%TYPE,
      out_newquoteheaderid   OUT      quote_header.quote_header_id%TYPE,
      out_expquoteid         OUT      quote_header.expedio_quoteid%TYPE,
      out_newexpversion      OUT      quote_header.expedio_quoteversion%TYPE,
      out_status             OUT      NUMBER,
      out_errmsg             OUT      VARCHAR2
   )
   AS
/******************************************************************************
   Usage Product Name:All products
   PURPOSE: creating new version of Quote

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0         22/8/00        Suman                            1.0 Add History Comment for  this procedure
  ******************************************************************************/
      v_quoteheaderid   quote_header.quote_header_id%TYPE;
      v_quoteid         quote_header.quote_id%TYPE;
      v_version         quote_header.VERSION%TYPE;
      v_expversion      quote_header.expedio_quoteversion%TYPE;
      v_newqthdrid      quote_header.quote_header_id%TYPE;
      v_i               NUMBER;
      v_product_name    line_item.product_name%TYPE;
   ----Added on 05-Jan-2011 by SRK
   BEGIN
      DELETE FROM temp_quoteversion;

      --COMMIT;

      --select existing quote_header_id to copy
      SELECT DISTINCT quote_header_id, quote_id
                 INTO v_quoteheaderid, v_quoteid
                 FROM quote_header
                WHERE expedio_quoteid = in_expquoteid
                  AND expedio_quoteversion = in_expquoteversion;

      --get max of version to create new version
      SELECT CAST ((MAX (TO_NUMBER (VERSION)) + 1) AS VARCHAR2 (10)) || '.0',
                CAST ((MAX (TO_NUMBER (expedio_quoteversion)) + 1) AS VARCHAR2 (10)
                     )
             || '.0'
        INTO v_version,
             v_expversion
        FROM quote_header
       WHERE quote_id = v_quoteid;

      SELECT quote_header_id.NEXTVAL
        INTO v_newqthdrid
        FROM DUAL;

      --create new version of the quote generating new quote_header
      INSERT INTO quote_header
                  (quote_header_id, quote_id, currency_id, VERSION,
                   quote_name, contract_term, opportunity_id, bid_number,
                   comments, status, TYPE, currency, customer_signed_date,
                   contract_id, capcheck_refno, expedio_ref_id, cr_prop_id,
                   expedio_quoteid, expedio_quoteversion,
                   expedio_parent_version, created_by, created_date)
         (SELECT v_newqthdrid, v_quoteid, currency_id, v_version, quote_name,
                 contract_term, opportunity_id, bid_number, comments, 'Draft',
                 TYPE, currency, customer_signed_date, contract_id,
                 capcheck_refno, expedio_ref_id, cr_prop_id, in_expquoteid,
                 v_expversion, in_expquoteversion, in_createdby, SYSDATE
            FROM quote_header
           WHERE quote_header_id = v_quoteheaderid);

----Added on 05-Jan-2011 by SRK
      BEGIN
         SELECT DISTINCT product_name
                    INTO v_product_name
                    FROM line_item
                   WHERE quote_header_id = v_quoteheaderid
                     AND UPPER (product_name) = UPPER ('BT IVPN2 GLOBAL');
      EXCEPTION
         WHEN OTHERS
         THEN
            v_product_name := NULL;
      END;

      -- Added on 17/12/2010
      --copy into quote_status with new quote_header_id
      INSERT INTO quote_status
                  (quote_id, quote_header_id, product_name, status,
                   quote_status_id)
         (SELECT v_quoteid, v_newqthdrid, product_name, 'Draft',
                 quote_status_id.NEXTVAL
            FROM quote_status
           WHERE quote_header_id = v_quoteheaderid);

--map old quote_site to new quote_site
      INSERT INTO temp_quoteversion
                  (column_name, old_value, new_value)
         (SELECT 'Quote_Site', quote_site_id, quote_site_id.NEXTVAL
            FROM quote_site
           WHERE quote_header_id = v_quoteheaderid
             AND active = pkg_constants.con_activeflag_yes);

      --copy into quote_site with new header_id
      INSERT INTO quote_site
                  (quote_site_id, site_id, quote_header_id, active,
                   created_by, created_date, rfo_validated)
         (SELECT new_value, site_id, v_newqthdrid,
                 pkg_constants.con_activeflag_yes, in_createdby, SYSDATE,
                 rfo_validated
            FROM quote_site INNER JOIN temp_quoteversion
                 ON quote_site_id = old_value AND column_name = 'Quote_Site'
           WHERE quote_header_id = v_quoteheaderid
             AND active = pkg_constants.con_activeflag_yes);

      --copy into quote_price_list with new header_id
      INSERT INTO quote_price_list
                  (quote_price_list_id, quote_header_id, price_list_id,
                   created_by, created_date, price_list_name, site_id,
                   product_id, product_name)
         (SELECT quote_price_list_id.NEXTVAL, v_newqthdrid, price_list_id,
                 in_createdby, SYSDATE, price_list_name, site_id, product_id,
                 product_name
            FROM quote_price_list
           WHERE quote_header_id = v_quoteheaderid);

--map old quote_site_service to new quote_site_service
      INSERT INTO temp_quoteversion
                  (column_name, old_value, new_value)
         (SELECT 'Quote_Site_Service', quote_site_service_id,
                 quote_site_service_id.NEXTVAL
            FROM quote_site_service
           WHERE quote_header_id = v_quoteheaderid);

      --copy into quote_site_service with new header_id
      INSERT INTO quote_site_service
                  (quote_site_service_id, quote_header_id, site_id,
                   product_id, product_name, created_by, created_date,
                   service_name, PRIMARY, secondary, status)
         (SELECT new_value, v_newqthdrid, site_id, product_id, product_name,
                 in_createdby, SYSDATE, service_name, PRIMARY, secondary,
                 status
            FROM quote_site_service INNER JOIN temp_quoteversion
                 ON quote_site_service_id = old_value
               AND column_name = 'Quote_Site_Service'
           WHERE quote_header_id = v_quoteheaderid);

      --copy into product_selection with new quote_header_id
      INSERT INTO product_selection
                  (product_selection_id, quote_id, proposition_id,
                   sub_proposition_id, product_id, created_by, created_date,
                   proposition_name, sub_proposition_name, product_name,
                   site_id, quote_header_id, active)
         (SELECT product_selection_id.NEXTVAL, v_quoteid, proposition_id,
                 sub_proposition_id, product_id, in_createdby, SYSDATE,
                 proposition_name, sub_proposition_name, product_name,
                 site_id, v_newqthdrid, pkg_constants.con_activeflag_yes
            FROM product_selection
           WHERE quote_header_id = v_quoteheaderid
             AND quote_id = v_quoteid
             AND active = pkg_constants.con_activeflag_yes);

      INSERT INTO customer_product
                  (quote_header_id, product_name, customer_id, created_by,
                   created_date, site_id, bfg_bill_account_id,
                   ptp_price_book_version, eup_price_book_version, product_id,
                   comments, monthly_revenue_commitment, trigger_period,
                   order_submitted_flag, proposed_mnth_rev_commitment,
                   customer_product_id
                                      -- Added by Sujana on 16/11/2010
                  )
         (SELECT v_newqthdrid, product_name, customer_id, created_by,
                 created_date, site_id, bfg_bill_account_id,
                 ptp_price_book_version, eup_price_book_version, product_id,
                 comments, monthly_revenue_commitment, trigger_period,
                 order_submitted_flag, proposed_mnth_rev_commitment,
                 customer_product_id.NEXTVAL
            -- Added by Sujana on 16/11/2010
          FROM   customer_product
           WHERE quote_header_id = v_quoteheaderid);

      --map old line_itemto new line_item
      INSERT INTO temp_quoteversion
                  (column_name, old_value, new_value)
         (SELECT 'Line_Item', line_item_id, line_item_id.NEXTVAL
            FROM line_item
           WHERE quote_header_id = v_quoteheaderid
             AND active = pkg_constants.con_activeflag_yes);

      IF (UPPER (v_product_name) = UPPER ('BT IVPN2 GLOBAL'))
      THEN
         --copy line_item with new header_id
         INSERT INTO line_item
                     (line_item_id, quote_header_id, VALUE, currency,
                      aggregate_price, site_id, created_by, created_date,
                      product_id, product_name, quantity, active,
                      fallback_type, part_type, priced, non_std_flag, row_id,
                      quote_site_service_id, scode)
            (SELECT tqv.new_value, v_newqthdrid, VALUE, currency,
                    aggregate_price, site_id, in_createdby, SYSDATE,
                    product_id, product_name, quantity,
                    pkg_constants.con_activeflag_yes, fallback_type,
                    part_type,
                    CASE
                       WHEN UPPER (product_name) =
                                             UPPER ('BT iVPN2 Access')
                          THEN priced
                       ELSE 'N'
                    END priced,               ---Modified by SRK on 30-dec-10
                    non_std_flag, row_id, qss.new_value, scode
               FROM line_item INNER JOIN temp_quoteversion tqv
                    ON line_item_id = tqv.old_value
                  AND tqv.column_name = 'Line_Item'
                    LEFT OUTER JOIN
                    (SELECT old_value, new_value
                       FROM temp_quoteversion
                      WHERE column_name = 'Quote_Site_Service') qss
                    ON quote_site_service_id = qss.old_value
              WHERE quote_header_id = v_quoteheaderid
                AND active = pkg_constants.con_activeflag_yes);
      ELSE
         INSERT INTO line_item
                     (line_item_id, quote_header_id, VALUE, currency,
                      aggregate_price, site_id, created_by, created_date,
                      product_id, product_name, quantity, active,
                      fallback_type, part_type, priced, non_std_flag, row_id,
                      quote_site_service_id, scode)
            (SELECT tqv.new_value, v_newqthdrid, VALUE, currency,
                    aggregate_price, site_id, in_createdby, SYSDATE,
                    product_id, product_name, quantity,
                    pkg_constants.con_activeflag_yes, fallback_type,
                    part_type, priced, non_std_flag, row_id, qss.new_value,
                    scode
               FROM line_item INNER JOIN temp_quoteversion tqv
                    ON line_item_id = tqv.old_value
                  AND tqv.column_name = 'Line_Item'
                    LEFT OUTER JOIN
                    (SELECT old_value, new_value
                       FROM temp_quoteversion
                      WHERE column_name = 'Quote_Site_Service') qss
                    ON quote_site_service_id = qss.old_value
              WHERE quote_header_id = v_quoteheaderid
                AND active = pkg_constants.con_activeflag_yes);
      END IF;

      -- copy line_item_details for new line_item_id
      INSERT INTO line_item_detail
                  (line_item_detail_id, line_item_id, VALUE, active,
                   created_by, created_date, attribute_mapping_id, quantity,
                   line_item_description, non_std_flag, row_id, action_code)
         (SELECT line_item_detail_id.NEXTVAL, new_value, VALUE,
                 pkg_constants.con_activeflag_yes, in_createdby, SYSDATE,
                 attribute_mapping_id, quantity, line_item_description,
                 non_std_flag, row_id, action_code
            FROM line_item_detail INNER JOIN temp_quoteversion
                 ON line_item_id = old_value
               AND column_name = 'Line_Item'
               AND active = pkg_constants.con_activeflag_yes
                                       /*added by jay for duplicate attribute issue nov 03 2010

                 Defect 85923*/
         );

      --copy pricing_bucket with new quote_header_id
      INSERT INTO pricing_bucket
                  (pricing_bucket_id, bucket_id, request_id, quote_header_id,
                   site_name, config_level, product_name, active, created_by,
                   created_date)
         (SELECT pricing_bucket_id.NEXTVAL, bucket_id, request_id,
                 v_newqthdrid, site_name, config_level, product_name,
                 pkg_constants.con_activeflag_yes, in_createdby, SYSDATE
            FROM pricing_bucket
           WHERE quote_header_id = v_quoteheaderid
             AND active = pkg_constants.con_activeflag_yes);

--map old price_line_item_detail  to new price_line_item_detail
---- Modified on 05-Jan-2011 to copy Pricing only for Access By SRK
      IF (UPPER (v_product_name) = UPPER ('BT IVPN2 GLOBAL'))
      THEN
         INSERT INTO temp_quoteversion
                     (column_name, old_value, new_value)
            (SELECT 'Price_Line_Item_Detail', price_line_item_detail_id,
                    price_line_item_detail_id.NEXTVAL
               FROM price_line_item_detail pd
              WHERE line_item_id IN (SELECT old_value
                                       FROM temp_quoteversion tqv INNER JOIN line_item lm
                                            ON lm.line_item_id =
                                                                tqv.old_value
                                          AND UPPER (lm.product_name) =
                                                     UPPER ('BT iVPN2 Access')
                                          AND lm.active =
                                                 pkg_constants.con_activeflag_yes
                                      WHERE column_name = 'Line_Item')
                AND pd.active = pkg_constants.con_activeflag_yes);

         --copy price_line_item_details for new line_item_id
         INSERT INTO price_line_item_detail
                     (price_line_item_detail_id, price_line_item_id,
                      line_item_id, price, currency, active, created_by,
                      created_date, attribute_mapping_id, charge_type,
                      external_qref, discount, discount_type, rent_price,
                      row_id, onetime_port_discount, recurring_port_discount,
                      request_status, error_description,
                      primary_pricing_status, secondary_pricing_status,
                      quantity, net_price, action_code, line_item_detail_id,
                      approved_disc, ptp_eup, ptp_eup_id, pln_inventory_id)
            (SELECT tqv.new_value, price_line_item_id, li.new_value, price,
                    pd.currency, pkg_constants.con_activeflag_yes,
                    in_createdby, SYSDATE, attribute_mapping_id, charge_type,
                    external_qref, discount, discount_type, rent_price,
                    pd.row_id, onetime_port_discount, recurring_port_discount,
                    request_status, error_description, primary_pricing_status,
                    secondary_pricing_status, pd.quantity, net_price,
                    pd.action_code, line_item_detail_id, approved_disc, ptp_eup,
                    ptp_eup_id, pln_inventory_id
               FROM price_line_item_detail pd INNER JOIN temp_quoteversion tqv
                    ON pd.price_line_item_detail_id = tqv.old_value
                    INNER JOIN line_item lm
                    ON pd.line_item_id = lm.line_item_id
                  AND UPPER (lm.product_name) = UPPER ('BT iVPN2 Access')
                  AND lm.active = pkg_constants.con_activeflag_yes
                  AND tqv.column_name = 'Price_Line_Item_Detail'
                  AND pd.active = pkg_constants.con_activeflag_yes
                    INNER JOIN
                    (SELECT old_value, new_value
                       FROM temp_quoteversion
                      WHERE column_name = 'Line_Item') li
                    ON pd.line_item_id = li.old_value
                    );
      ELSE
         INSERT INTO temp_quoteversion
                     (column_name, old_value, new_value)
            (SELECT 'Price_Line_Item_Detail', price_line_item_detail_id,
                    price_line_item_detail_id.NEXTVAL
               FROM price_line_item_detail pd
              WHERE line_item_id IN (SELECT old_value
                                       FROM temp_quoteversion tqv INNER JOIN line_item lm
                                            ON lm.line_item_id =
                                                                tqv.old_value
                                          ----AND upper(lm.product_name) = upper('BT iVPN2 Access')
                                          AND lm.active =
                                                 pkg_constants.con_activeflag_yes
                                      WHERE column_name = 'Line_Item')
                AND pd.active = pkg_constants.con_activeflag_yes);

         --copy price_line_item_details for new line_item_id
         INSERT INTO price_line_item_detail
                     (price_line_item_detail_id, price_line_item_id,
                      line_item_id, price, currency, active, created_by,
                      created_date, attribute_mapping_id, charge_type,
                      external_qref, discount, discount_type, rent_price,
                      row_id, onetime_port_discount, recurring_port_discount,
                      request_status, error_description,
                      primary_pricing_status, secondary_pricing_status,
                      quantity, net_price, action_code, line_item_detail_id,
                      approved_disc, ptp_eup, ptp_eup_id, pln_inventory_id,
                      discount_requested, discount_proposed)
            (SELECT tqv.new_value, price_line_item_id, li.new_value, price,
                    pd.currency, pkg_constants.con_activeflag_yes, in_createdby,
                    SYSDATE, attribute_mapping_id, charge_type, external_qref,
                    discount, discount_type, rent_price, pd.row_id,
                    onetime_port_discount, recurring_port_discount,
                    request_status, error_description, primary_pricing_status,
                    secondary_pricing_status, pd.quantity, net_price,
                    pd.action_code, line_item_detail_id, approved_disc, ptp_eup,
                    ptp_eup_id, pln_inventory_id, discount_requested,
                    discount_proposed
               FROM price_line_item_detail pd INNER JOIN temp_quoteversion tqv
                    ON pd.price_line_item_detail_id = tqv.old_value
                    INNER JOIN line_item lm
                    ON pd.line_item_id = lm.line_item_id
                  ---- AND UPPER (lm.product_name) = UPPER ('BT iVPN2 Access')
                  AND lm.active = pkg_constants.con_activeflag_yes
                  AND tqv.column_name = 'Price_Line_Item_Detail'
                  AND pd.active = pkg_constants.con_activeflag_yes
                    INNER JOIN
                    (SELECT old_value, new_value
                       FROM temp_quoteversion
                      WHERE column_name = 'Line_Item') li
                    ON pd.line_item_id = li.old_value
                    );
      END IF;

--copy cost_detail with new price_line_item_detail_id
      INSERT INTO cost_detail
                  (cost_detail_id, price_line_item_detail_id, COST, cost_type,
                   currency, created_by, created_date)
         (SELECT cost_detail_id.NEXTVAL, new_value, COST, cost_type, currency,
                 in_createdby, SYSDATE
            FROM cost_detail INNER JOIN temp_quoteversion
                 ON price_line_item_detail_id = old_value
               AND column_name = 'Price_Line_Item_Detail'
                 );

--map old access_qref  to new access_qref
--qrefs are checked for expiry date only if they are not selected
      INSERT INTO temp_quoteversion
                  (column_name, old_value, new_value)
         (SELECT 'Access_Qref', aqref.access_qref_id, access_qref_id.NEXTVAL
            FROM
                 --to select qrefs which have not expired
                 (SELECT access_qref_id
                    FROM access_qref
                   WHERE quote_site_id IN (SELECT old_value
                                             FROM temp_quoteversion
                                            WHERE column_name = 'Quote_Site')
                     AND active = pkg_constants.con_activeflag_yes
                     AND TRUNC (NVL (expiry_date,
                                     TO_DATE ('19000101', 'YYYYMMDD')
                                    ),
                                'DD'
                               ) >= TRUNC (SYSDATE, 'DD')
                  UNION
                  --to select only qref which have been selected from price_line_item_detail
                  --irrespective of whether they have expired or not
                  SELECT DISTINCT access_qref_id
                             FROM access_qref aq,
                                  price_line_item_detail plid,
                                  line_item li,
                                  quote_site qs
                            WHERE aq.access_qref = plid.external_qref
                              AND li.line_item_id = plid.line_item_id
                              AND li.quote_header_id = v_quoteheaderid
                              AND plid.active =
                                              pkg_constants.con_activeflag_yes
                              AND aq.quote_site_id = qs.quote_site_id
                              AND qs.quote_header_id = v_quoteheaderid
                              AND qs.active = pkg_constants.con_activeflag_yes
                              AND aq.active = pkg_constants.con_activeflag_yes) aqref);

      --copy access_qrefs with new quote_site_id

      ---- Modified on 04-Jan-2011 to copy Pricing Status only Access others Not Priced By SRK
      INSERT INTO access_qref
                  (access_qref_id, quote_site_id, access_qref, pricing_status,
                   access_speed, supplier, lead_time, port_speed,
                   one_time_charge, recurring_charge, created_by,
                   created_date, active, port_speed_value, port_uom,
                   access_speed_value, access_uom, access_product_type,
                   access_technology, supplier_product_name, gpop_node,
                   distance_gpop, apop_node, distance_apop, term, leg_id,
                   pair_id, expiry_date_time_zone, tariff_zone_name,
                   no_of_copper_pairs, circuit_interface, auto_priced_flag,
                   budgetary_priced_flag, interface_type, framing_details,
                   connector, install_cost, supplier_cost, backhaul_cost,
                   local_tail_cost, cost_access_currency, resiliency_flag,
                   comments, nni_flag, support_24x7, sent_to_ape,
                   monthly_cost, access_type, expiry_date, apop_flag,
                   port_status, gpop_id, apop_id, port_speed_avail_status,
                   method, aggregator_quote_line_id, encapsulation,
                   guaranteed_speed, isp_addressing, time_to_deliver,
                   monthly_recurring_charge, non_recurring_charge,
                   access_availability, service_catagory, other_service_notes,
                   additional_charges, tranaction_type,
                   hvpn_access_technology, pricing_id, service_id,
                   copper_details, copper_service_id, rfa_notes, mrc, nrc,
                   tarrif_zone, support_24_7, rfo_notes, copper_pair,
                   ethernet_phase_attribute, non_std_qref_flag, network_type,
                   partner_name, workflow_status, ape_comments,
                   staff_member_name, staff_member_email,service_variant)
         (SELECT tqv.new_value, qtsite.new_value, access_qref,
                 CASE
                    WHEN UPPER (lm.product_name) =
                                     UPPER ('BT iVPN2 Access')
                       THEN aq.pricing_status
                    ELSE 'Not Priced'
                 END pricing_status,
                 access_speed, supplier, lead_time, port_speed,
                 one_time_charge, recurring_charge, in_createdby, SYSDATE,
                 pkg_constants.con_activeflag_yes, port_speed_value, port_uom,
                 access_speed_value, access_uom, access_product_type,
                 access_technology, supplier_product_name, gpop_node,
                 distance_gpop, apop_node, distance_apop, term, leg_id,
                 pair_id, expiry_date_time_zone, tariff_zone_name,
                 no_of_copper_pairs, circuit_interface, auto_priced_flag,
                 budgetary_priced_flag, interface_type, framing_details,
                 connector, install_cost, supplier_cost, backhaul_cost,
                 local_tail_cost, cost_access_currency, resiliency_flag,
                 comments, nni_flag, support_24x7, sent_to_ape, monthly_cost,
                 access_type, expiry_date, apop_flag, port_status, gpop_id,
                 apop_id, port_speed_avail_status, method,
                 aggregator_quote_line_id, encapsulation, guaranteed_speed,
                 isp_addressing, time_to_deliver, monthly_recurring_charge,
                 non_recurring_charge, access_availability, service_catagory,
                 other_service_notes, additional_charges, tranaction_type,
                 hvpn_access_technology, pricing_id, service_id,
                 copper_details, copper_service_id, rfa_notes, mrc, nrc,
                 tarrif_zone, support_24_7, rfo_notes, copper_pair,
                 ethernet_phase_attribute, non_std_qref_flag, network_type,
                 partner_name, workflow_status, ape_comments,
                 staff_member_name, staff_member_email,service_variant
            FROM access_qref aq INNER JOIN temp_quoteversion tqv
                 ON access_qref_id = tqv.old_value
               AND tqv.column_name = 'Access_Qref'
                 INNER JOIN quote_site qs
                 ON aq.quote_site_id = qs.quote_site_id
                 INNER JOIN line_item lm
                 ON qs.quote_header_id = lm.quote_header_id
                 AND qs.site_id=lm.site_id
               AND UPPER(lm.product_name) = UPPER ('BT iVPN2 Access')
               AND lm.active = pkg_constants.con_activeflag_yes
                 INNER JOIN
                 (SELECT old_value, new_value
                    FROM temp_quoteversion
                   WHERE column_name = 'Quote_Site') qtsite
                 ON qs.quote_site_id = qtsite.old_value
               AND aq.active = pkg_constants.con_activeflag_yes
                 );

      --copy access_caveat with new access_qref_id
      INSERT INTO access_caveat
                  (access_caveat_id, access_qref_id, caveat_id, description,
                   caveated_on, created_by, created_date, updated_on, active,
                   access_caveat)
         (SELECT access_caveat_id.NEXTVAL, new_value, caveat_id, description,
                 caveated_on, in_createdby, SYSDATE, updated_on,
                 pkg_constants.con_activeflag_yes, access_caveat
            FROM access_caveat ac INNER JOIN temp_quoteversion tq
                 ON ac.access_qref_id = tq.old_value
               AND column_name = 'Access_Qref'
                 INNER JOIN access_qref aq
                 ON aq.access_qref_id = ac.access_qref_id
                 INNER JOIN quote_site qs
                 ON aq.quote_site_id = qs.quote_site_id
                 INNER JOIN line_item lm
                 ON qs.quote_header_id = lm.quote_header_id
                 AND qs.quote_site_id=lm.site_id
               AND UPPER(lm.product_name) = UPPER ('BT iVPN2 Access')
               AND lm.active = pkg_constants.con_activeflag_yes
                 );

--map old cpe_qref  to new cpe_qref
----Commented CPE QREf and CPE CAVEAT on 23-11-2010 by SRK
---prcing and  CPE Qref Caveat should come every time freshly

      --      INSERT INTO temp_quoteversion
--                  (column_name, old_value, new_value)
--         (SELECT 'CPE_Qref', cpe_qref_id, cpe_qref_id.NEXTVAL
--            FROM cpe_qref
--           WHERE quote_site_id IN (SELECT old_value
--                                     FROM temp_quoteversion
--                                    WHERE column_name = 'Quote_Site'));

      --copy cpe_qref with new quote_site_id
--      INSERT INTO cpe_qref
--                  (cpe_qref_id, quote_site_id, created_by, created_date,
--                   cpe_qref, pri_supplier_name, pri_status,
--                   pri_one_time_charge, pri_recurring_charge, expiry_date,
--                   cpe_lead_time, cpe_lead_time_status, comments,
--                   sec_supplier_name, sec_status, sec_one_time_charge,
--                   sec_recurring_charge, secondary_cpe_qref,
--                   pri_ssp_bid_ref_no, sec_ssp_bid_ref_no,
--                   pri_offer_valid_date, sec_offer_valid_date)
--         (SELECT tqv.new_value, qtsite.new_value, in_createdby, SYSDATE,
--                 cpe_qref, pri_supplier_name, pri_status, pri_one_time_charge,
--                 pri_recurring_charge, expiry_date, cpe_lead_time,
--                 cpe_lead_time_status, comments, sec_supplier_name,
--                 sec_status, sec_one_time_charge, sec_recurring_charge,
--                 secondary_cpe_qref, pri_ssp_bid_ref_no, sec_ssp_bid_ref_no,
--                 pri_offer_valid_date, sec_offer_valid_date
--            FROM cpe_qref INNER JOIN temp_quoteversion tqv
--                 ON cpe_qref_id = tqv.old_value
--               AND tqv.column_name = 'CPE_Qref'
--                 INNER JOIN
--                 (SELECT old_value, new_value
--                    FROM temp_quoteversion
--                   WHERE column_name = 'Quote_Site') qtsite
--                 ON quote_site_id = qtsite.old_value
--                 );

      ----copy cpe_caveat with new cpe_qref_id
--      INSERT INTO cpe_caveat
--                  (cpe_caveat_id, cpe_caveat, description, cpe_qref_id,
--                   active, created_by, created_date)
--         (SELECT cpe_caveat_id.NEXTVAL, cpe_caveat, description, new_value,
--                 pkg_constants.con_activeflag_yes, in_createdby, SYSDATE
--            FROM cpe_caveat INNER JOIN temp_quoteversion
--                 ON cpe_qref_id = old_value AND column_name = 'CPE_Qref'
--                 );

      --copy bid_detail with new quote_header id
      INSERT INTO bid_detail
                  (bid_detail_id, quote_header_id, site_id, product_id,
                   product_name, request_name, customer_committed,
                   customer_requested, volume_for_features, tier,
                   bid_manager_name, win_chance, customer_value, nsoc,
                   siebel_id, ipn_spoc_name, comments, non_standard_flag,
                   created_by, created_date, active, no_of_isdn_channels,
                   discount_approved_rejected_by, bid_manager_email_id,
                   sales_user_reason, bid_manager_reason)
         (SELECT bid_detail_id.NEXTVAL, v_newqthdrid, site_id, product_id,
                 product_name, request_name, customer_committed,
                 customer_requested, volume_for_features, tier,
                 bid_manager_name, win_chance, customer_value, nsoc,
                 siebel_id, ipn_spoc_name, comments, non_standard_flag,
                 in_createdby, SYSDATE, pkg_constants.con_activeflag_yes,
                 no_of_isdn_channels, discount_approved_rejected_by,
                 bid_manager_email_id, sales_user_reason, bid_manager_reason
            FROM bid_detail
           WHERE quote_header_id = v_quoteheaderid);

      --copy bid_request_status for new quote_header_id
      INSERT INTO bid_request_status
                  (bid_request_status_id, quote_header_id, site_id,
                   product_id, product_name, special_bid_number, bid_status,
                   one_time_install_cost, data_build_done, bid_expiry_date,
                   monthly_recurring_cost, created_by, created_date, active,
                   non_std_bid_items, row_id, activation_due_date, tpp_url,
                   non_std_comp, instructions)
         (SELECT bid_request_status_id.NEXTVAL, v_newqthdrid, site_id,
                 product_id, product_name, special_bid_number, bid_status,
                 one_time_install_cost, data_build_done, bid_expiry_date,
                 monthly_recurring_cost, in_createdby, SYSDATE,
                 pkg_constants.con_activeflag_yes, non_std_bid_items, row_id,
                 activation_due_date, tpp_url, non_std_comp, instructions
            FROM bid_request_status
           WHERE quote_header_id = v_quoteheaderid
             AND active = pkg_constants.con_activeflag_yes);

      --copy discount_approval with new quote_header_id
      INSERT INTO discount_approval
                  (discount_approval_id, quote_header_id, submitted_by,
                   approval_status, reason, created_by, created_date, active)
         (SELECT discount_approval_id.NEXTVAL, v_newqthdrid, submitted_by,
                 approval_status, reason, in_createdby, SYSDATE,
                 pkg_constants.con_activeflag_yes
            FROM discount_approval
           WHERE quote_header_id = v_quoteheaderid
             AND active = pkg_constants.con_activeflag_yes);

      --copy exchange_rate_detail with new quote_header_id
      INSERT INTO exchange_rate_detail
                  (exchange_rate_detail_id, quote_header_id, source_currency,
                   target_currency, exchange_rate, exchange_rate_date, active,
                   created_by, created_date)
         (SELECT exchange_rate_detail_id.NEXTVAL, v_newqthdrid,
                 source_currency, target_currency, exchange_rate,
                 exchange_rate_date, pkg_constants.con_activeflag_yes,
                 in_createdby, SYSDATE
            FROM exchange_rate_detail
           WHERE quote_header_id = v_quoteheaderid
             AND active = pkg_constants.con_activeflag_yes);

--map old order_header to new order_header
      INSERT INTO temp_quoteversion
                  (column_name, old_value, new_value)
         (SELECT 'Order_Header', order_header_id, order_header_id.NEXTVAL
            FROM order_header
           WHERE quote_header_id = v_quoteheaderid);

      --copy order_header with new quote_header_id
      INSERT INTO order_header
                  (order_header_id, quote_header_id, currency, created_by,
                   created_date, order_status, order_type, contract_id,
                   comments, order_form_sign_date, is_order_rejected,
                   is_order_ipclearreachoutsite, ftip_number, emailid,
                   vpn_connectivity_mode,product_name)
         (SELECT new_value, v_newqthdrid, currency, in_createdby, SYSDATE,
                 'Draft', order_type, contract_id, comments,
                 order_form_sign_date, is_order_rejected,
                 is_order_ipclearreachoutsite, ftip_number, emailid,
                 vpn_connectivity_mode,product_name
            FROM order_header INNER JOIN temp_quoteversion
                 ON order_header_id = old_value
               AND column_name = 'Order_Header'
           WHERE quote_header_id = v_quoteheaderid);

      --copy customer_billing_info with new order_header_id
      INSERT INTO customer_billing_info
                  (customer_billing_info_id, customer_id, order_header_id,
                   billing_id, SYSTEM, is_default, created_by, created_date,
                   currency)
         (SELECT customer_billing_info_id.NEXTVAL, customer_id, new_value,
                 billing_id, SYSTEM, is_default, in_createdby, SYSDATE,
                 currency
            FROM customer_billing_info INNER JOIN temp_quoteversion
                 ON order_header_id = old_value
               AND column_name = 'Order_Header'
                 );

      --map old order_attachment to new order_attachment
      INSERT INTO temp_quoteversion
                  (column_name, old_value, new_value)
         (SELECT 'Order_Attachment', attachment_id,
                 order_attachment_id.NEXTVAL
            FROM order_attachment INNER JOIN temp_quoteversion
                 ON order_header_id = old_value
               AND column_name = 'Order_Header'
                 );

      --copy order_attachment with new order_header_id
      INSERT INTO order_attachment
                  (attachment_id, order_header_id, site_id, attachment_type)
         (SELECT tqv.new_value, ohd.new_value, site_id, attachment_type
            FROM order_attachment INNER JOIN temp_quoteversion tqv
                 ON attachment_id = tqv.old_value
               AND tqv.column_name = 'Order_Attachment'
                 INNER JOIN
                 (SELECT old_value, new_value
                    FROM temp_quoteversion
                   WHERE column_name = 'Order_Header') ohd
                 ON order_header_id = ohd.old_value
                 );

      --copy order_attachment_detail with new attachment_id
     INSERT INTO order_attachment_detail
            (order_attachment_detail_id, attachment_id, url,
             downloaded_to_classic, SOURCE, attachment_type)
   (SELECT order_attachment_detail_id.NEXTVAL, new_value, url,
           downloaded_to_classic, SOURCE, attachment_type
      FROM order_attachment_detail INNER JOIN temp_quoteversion
           ON attachment_id = old_value AND column_name = 'Order_Attachment'
           );

      --copy order_contact_detail with new order_header_id
      INSERT INTO order_contact_detail
                  (order_contact_detail_id, order_header_id, contact_id,
                   address_id, bfg_cnt_id, bfg_cnr_id, created_by,
                   created_date)
         (SELECT order_contact_detail_id.NEXTVAL, new_value, contact_id,
                 address_id, bfg_cnt_id, bfg_cnr_id, in_createdby, SYSDATE
            FROM order_contact_detail INNER JOIN temp_quoteversion
                 ON order_header_id = old_value
               AND column_name = 'Order_Header'
                 );

--map old order_line_item to new order_line_item
      INSERT INTO temp_quoteversion
                  (column_name, old_value, new_value)
         (SELECT 'Order_Line_Item', order_line_item_id,
                 order_line_item_id.NEXTVAL
            FROM order_line_item INNER JOIN temp_quoteversion
                 ON order_header_id = old_value
               AND column_name = 'Order_Header'
           WHERE active = pkg_constants.con_activeflag_yes);

      --copy order_line_item with new order_header_id
      INSERT INTO order_line_item
                  (order_line_item_id, order_header_id, currency, product_id,
                   product_name, site_id, active, created_by, created_date,
                   fallback_type, quantity, row_id, quote_site_service_id)
         (SELECT tqv.new_value, ohd.new_value, currency, product_id,
                 product_name, site_id, pkg_constants.con_activeflag_yes,
                 in_createdby, SYSDATE, fallback_type, quantity, row_id,
                 qss.new_value
            FROM order_line_item INNER JOIN temp_quoteversion tqv
                 ON order_line_item_id = tqv.old_value
               AND column_name = 'Order_Line_Item'
                 INNER JOIN
                 (SELECT old_value, new_value
                    FROM temp_quoteversion
                   WHERE column_name = 'Order_Header') ohd
                 ON order_header_id = ohd.old_value
                 LEFT OUTER JOIN
                 (SELECT old_value, new_value
                    FROM temp_quoteversion
                   WHERE column_name = 'Quote_Site_Service') qss
                 ON quote_site_service_id = qss.old_value
           WHERE active = pkg_constants.con_activeflag_yes);

      --copy order_line_item_detail for new order_line_item_id
      INSERT INTO order_line_item_detail
                  (order_line_item_det_id, order_line_item_id,
                   attribute_mapping_id, VALUE, active, created_by,
                   created_date, quantity, row_id)
         (SELECT order_line_item_det_id.NEXTVAL, new_value,
                 attribute_mapping_id, VALUE,
                 pkg_constants.con_activeflag_yes, in_createdby, SYSDATE,
                 quantity, row_id
            FROM order_line_item_detail INNER JOIN temp_quoteversion
                 ON order_line_item_id = old_value
               AND column_name = 'Order_Line_Item'
           WHERE active = pkg_constants.con_activeflag_yes);

      --copy Port_IP_Routes with new order_line_item_id
      INSERT INTO port_ip_routes
                  (port_ip_route_id, order_line_item_id, row_id,
                   serial_number, subnet_address, subnet_mask,
                   next_hop_ip_address, fallback_type)
         (SELECT port_ip_route_id.NEXTVAL, new_value, row_id, serial_number,
                 subnet_address, subnet_mask, next_hop_ip_address,
                 fallback_type
            FROM port_ip_routes INNER JOIN temp_quoteversion
                 ON order_line_item_id = old_value
               AND column_name = 'Order_Line_Item'
                 );

      --copy order_site_Detail with new order_header_id
      INSERT INTO order_site_detail
                  (order_site_detail_id, order_header_id, site_id, billing_id,
                   SYSTEM, customer_required_date, active, created_by,
                   created_date)
         (SELECT order_site_detail_id.NEXTVAL, new_value, site_id, billing_id,
                 SYSTEM, customer_required_date,
                 pkg_constants.con_activeflag_yes, in_createdby, SYSDATE
            FROM order_site_detail INNER JOIN temp_quoteversion
                 ON order_header_id = old_value
               AND column_name = 'Order_Header'
           WHERE active = pkg_constants.con_activeflag_yes);

      --copy order_validation with new order_header_id
      INSERT INTO order_validation
                  (order_validation_id, order_header_id, rfo_validated,
                   created_by, created_date)
         (SELECT order_validation_id.NEXTVAL, new_value, rfo_validated,
                 in_createdby, SYSDATE
            FROM order_validation INNER JOIN temp_quoteversion
                 ON order_header_id = old_value
               AND column_name = 'Order_Header'
                 );

      --copy bcm_export with new quote_header_id
      INSERT INTO bcm_export
                  (bcmexport_id, quote_header_id, site_status, site_id, site,
                   country, city, resilience_type, primary_connection_status,
                   primary_reach_in_nni_port, primary_reach_in_nni_part_name,
                   primary_tarrif_zone, primary_gpop, primary_apop,
                   primary_traffic_type, primary_access_technology,
                   primary_n_e1_t1, primary_access_speed, primary_port_speed,
                   primary_dsl_supplier_id, primary_dsl_supp_offer_name,
                   primary_dsl_type, primary_dsl_contention,
                   primary_dsl_access_upstream, primary_dsl_access_downstream,
                   primary_dsl_port_speed, primary_dsl_local_loop_access,
                   primary_hvpn_access_prod_type,
                   primary_hvpn_access_service_id,
                   primry_hvpn_port_dwnstrm_speed,
                   primary_hvpn_port_upstrm_speed,
                   primary_hvpn_local_loop_access, primary_total_af,
                   primary_af_multimedia, primary_ef_speed, primary_de_speed,
                   no_of_addi_vpn_prmry_port, no_of_bgp_prefixes_prmry_port,
                   primary_cpe_program_name, primary_cpe_install_eup,
                   primary_cpe_inst_eup_disct, primary_cpe_monthly_rental_eup,
                   primary_cpe_mthly_rnt_eup_disc, primary_cpe_mont_maint_eup,
                   primary_cpe_install_cost, primary_cpe_month_recurr_cost,
                   primary_cpe_cost_currency, primary_cpe_pricing_status,
                   primary_access_install_eup, primary_access_install_eup_dis,
                   primary_access_mnthly_rnt_eup,
                   prim_access_mnth_rnt_eup_disc, primary_access_install_cost,
                   primary_access_monthly_cost, primary_access_cost_currency,
                   primary_access_pricing_status, primary_port_install_eup,
                   primary_port_install_eup_disc,
                   primary_port_reconfig_one_time,
                   primary_port_reconfig_ot_disc, primary_dsl_upgrd_dwngrd_ot,
                   primary_dsl_up_dwn_grd_ot_disc,
                   primary_port_mnthly_rntl_eup,
                   prmry_port_mnth_rntl_eup_disc, primary_lla_install_eup,
                   primary_lla_install_eup_disc, primary_lla_mnthl_rental_eup,
                   primary_lla_mnth_rnt_eup_disc, primary_lla_install_cost,
                   primary_lla_monthly_cost, primary_lla_cost_currency,
                   primary_mvpn_one_time_eup, prim_mvpn_mnt_rnt_eup_perport,
                   pri_mvpn_mntrnt_eup_perprt_dis,
                   pri_mvp_mnt_rnt_eup_totadd_vpn,
                   pri_mvpn_mntrnt_net_eup_addvpn,
                   primary_bgp_prfix_onetime_eup,
                   pprimary_bgp_prfix_ot_eup_disc,
                   primary_bgp_prfx_mnt_rntl_eup,
                   prim_bgp_prfx_mnt_rntl_eup_dis, secondry_connection_status,
                   secondry_nni_port, scndry_reach_in_nni_prt_name,
                   secondry_tarrif_zone, secondry_gpop, secondry_apop,
                   secondry_traffic_type, secondry_access_type,
                   secondry_n_e1_t1, secondry_access_speed,
                   secondry_port_speed, secondry_dsl_supplier_id,
                   secondry_dsl_supp_offr_name, secondry_dsl_type,
                   secondry_dsl_contention, secondry_dsl_access_upstream,
                   secondry_dsl_access_downstream, secondry_dsl_port_speed,
                   secondry_dsl_local_loop_access,
                   secondry_hvpn_access_prod_type,
                   secnd_hvpn_access_service_id, secnd_hvpn_prt_dwnstrm_speed,
                   secondry_hvpn_prt_upstrm_speed,
                   secnd_hvpn_local_loop_access, secondry_total_af,
                   secondry_af_multimedia, secondry_ef_speed,
                   secondry_de_speed, no_of_addi_vpn_scndry_port,
                   no_of_bgp_prefxes_scndry_port, secondry_cpe_program_name,
                   secondry_cpe_install_eup, secondry_cpe_inst_eup_disct,
                   secnd_cpe_monthly_rental_eup, secnd_cpe_mthly_rnt_eup_disc,
                   secondry_cpe_mont_maint_eup, secondry_cpe_install_cost,
                   secnd_cpe_month_recurr_cost, secondry_cpe_cost_currency,
                   secondry_cpe_pricing_status, secondry_access_install_eup,
                   secnd_access_install_eup_disc,
                   secnd_access_mnthly_rent_eup,
                   secn_access_mnth_rnt_eup_disc,
                   secondry_access_install_cost, secondry_access_monthly_cost,
                   secondry_access_cost_currency,
                   secondry_access_pricing_status, secondry_port_install_eup,
                   secondry_port_install_eup_disc,
                   secndry_port_reconfig_one_time,
                   secndry_port_reconfig_ot_disc,
                   secondry_dsl_upgrd_dwngrd_ot, secnd_dsl_up_dwn_grd_ot_disc,
                   secondry_port_mnthly_rntl_eup,
                   secnd_port_mnth_rntl_eup_dis, secondry_lla_install_eup,
                   secondry_lla_install_eup_disc,
                   secondry_lla_mnthl_rental_eup,
                   secondry_lla_mnth_rnt_eup_disc, secondry_lla_install_cost,
                   secondry_lla_monthly_cost, secondry_lla_cost_currency,
                   secondry_mvpn_one_time_eup, secondry_mvpn_one_time_net_eup,
                   secd_mvpn_mnt_rnt_eup_perport,
                   sec_mvpn_mntrnt_eup_perprt_dis,
                   sec_mvp_mntrnt_eup_tot_add_vpn,
                   sec_mvpn_mntrnt_net_eup_addvpn,
                   secondry_bgp_prfix_onetime_eup,
                   secondry_bgp_prfix_ot_eup_disc,
                   secondry_bgp_prfx_mnt_rntl_eup,
                   secd_bgp_prfx_mnt_rntl_eup_dis, change_management,
                   change_management_discount, change_management_light_eup,
                   change_mngment_light_eup_disc,
                   proactive_ce_monitorings_eup,
                   proactve_ce_monitrings_eup_dis,
                   snmp_rdon_aces_prmy_cpeot_eup,
                   snmp_rd_aces_prm_cpeot_eup_dis, ooh_trnup_mn_cpe_ot_eup,
                   ooh_trnup_mn_cpe_ot_eup_dis, snmp_rdon_aces_secd_cpeot_eup,
                   snmp_rd_aces_sec_cpeot_eup_dis, ooh_trnup_sec_cpe_ot_eup,
                   ooh_trnup_sec_cpe_ot_eup_dis)
         (SELECT bcmexport_id.NEXTVAL, v_newqthdrid, site_status, site_id,
                 site, country, city, resilience_type,
                 primary_connection_status, primary_reach_in_nni_port,
                 primary_reach_in_nni_part_name, primary_tarrif_zone,
                 primary_gpop, primary_apop, primary_traffic_type,
                 primary_access_technology, primary_n_e1_t1,
                 primary_access_speed, primary_port_speed,
                 primary_dsl_supplier_id, primary_dsl_supp_offer_name,
                 primary_dsl_type, primary_dsl_contention,
                 primary_dsl_access_upstream, primary_dsl_access_downstream,
                 primary_dsl_port_speed, primary_dsl_local_loop_access,
                 primary_hvpn_access_prod_type,
                 primary_hvpn_access_service_id,
                 primry_hvpn_port_dwnstrm_speed,
                 primary_hvpn_port_upstrm_speed,
                 primary_hvpn_local_loop_access, primary_total_af,
                 primary_af_multimedia, primary_ef_speed, primary_de_speed,
                 no_of_addi_vpn_prmry_port, no_of_bgp_prefixes_prmry_port,
                 primary_cpe_program_name, primary_cpe_install_eup,
                 primary_cpe_inst_eup_disct, primary_cpe_monthly_rental_eup,
                 primary_cpe_mthly_rnt_eup_disc, primary_cpe_mont_maint_eup,
                 primary_cpe_install_cost, primary_cpe_month_recurr_cost,
                 primary_cpe_cost_currency, primary_cpe_pricing_status,
                 primary_access_install_eup, primary_access_install_eup_dis,
                 primary_access_mnthly_rnt_eup, prim_access_mnth_rnt_eup_disc,
                 primary_access_install_cost, primary_access_monthly_cost,
                 primary_access_cost_currency, primary_access_pricing_status,
                 primary_port_install_eup, primary_port_install_eup_disc,
                 primary_port_reconfig_one_time,
                 primary_port_reconfig_ot_disc, primary_dsl_upgrd_dwngrd_ot,
                 primary_dsl_up_dwn_grd_ot_disc, primary_port_mnthly_rntl_eup,
                 prmry_port_mnth_rntl_eup_disc, primary_lla_install_eup,
                 primary_lla_install_eup_disc, primary_lla_mnthl_rental_eup,
                 primary_lla_mnth_rnt_eup_disc, primary_lla_install_cost,
                 primary_lla_monthly_cost, primary_lla_cost_currency,
                 primary_mvpn_one_time_eup, prim_mvpn_mnt_rnt_eup_perport,
                 pri_mvpn_mntrnt_eup_perprt_dis,
                 pri_mvp_mnt_rnt_eup_totadd_vpn,
                 pri_mvpn_mntrnt_net_eup_addvpn,
                 primary_bgp_prfix_onetime_eup,
                 pprimary_bgp_prfix_ot_eup_disc,
                 primary_bgp_prfx_mnt_rntl_eup,
                 prim_bgp_prfx_mnt_rntl_eup_dis, secondry_connection_status,
                 secondry_nni_port, scndry_reach_in_nni_prt_name,
                 secondry_tarrif_zone, secondry_gpop, secondry_apop,
                 secondry_traffic_type, secondry_access_type,
                 secondry_n_e1_t1, secondry_access_speed, secondry_port_speed,
                 secondry_dsl_supplier_id, secondry_dsl_supp_offr_name,
                 secondry_dsl_type, secondry_dsl_contention,
                 secondry_dsl_access_upstream, secondry_dsl_access_downstream,
                 secondry_dsl_port_speed, secondry_dsl_local_loop_access,
                 secondry_hvpn_access_prod_type, secnd_hvpn_access_service_id,
                 secnd_hvpn_prt_dwnstrm_speed, secondry_hvpn_prt_upstrm_speed,
                 secnd_hvpn_local_loop_access, secondry_total_af,
                 secondry_af_multimedia, secondry_ef_speed, secondry_de_speed,
                 no_of_addi_vpn_scndry_port, no_of_bgp_prefxes_scndry_port,
                 secondry_cpe_program_name, secondry_cpe_install_eup,
                 secondry_cpe_inst_eup_disct, secnd_cpe_monthly_rental_eup,
                 secnd_cpe_mthly_rnt_eup_disc, secondry_cpe_mont_maint_eup,
                 secondry_cpe_install_cost, secnd_cpe_month_recurr_cost,
                 secondry_cpe_cost_currency, secondry_cpe_pricing_status,
                 secondry_access_install_eup, secnd_access_install_eup_disc,
                 secnd_access_mnthly_rent_eup, secn_access_mnth_rnt_eup_disc,
                 secondry_access_install_cost, secondry_access_monthly_cost,
                 secondry_access_cost_currency,
                 secondry_access_pricing_status, secondry_port_install_eup,
                 secondry_port_install_eup_disc,
                 secndry_port_reconfig_one_time,
                 secndry_port_reconfig_ot_disc, secondry_dsl_upgrd_dwngrd_ot,
                 secnd_dsl_up_dwn_grd_ot_disc, secondry_port_mnthly_rntl_eup,
                 secnd_port_mnth_rntl_eup_dis, secondry_lla_install_eup,
                 secondry_lla_install_eup_disc, secondry_lla_mnthl_rental_eup,
                 secondry_lla_mnth_rnt_eup_disc, secondry_lla_install_cost,
                 secondry_lla_monthly_cost, secondry_lla_cost_currency,
                 secondry_mvpn_one_time_eup, secondry_mvpn_one_time_net_eup,
                 secd_mvpn_mnt_rnt_eup_perport,
                 sec_mvpn_mntrnt_eup_perprt_dis,
                 sec_mvp_mntrnt_eup_tot_add_vpn,
                 sec_mvpn_mntrnt_net_eup_addvpn,
                 secondry_bgp_prfix_onetime_eup,
                 secondry_bgp_prfix_ot_eup_disc,
                 secondry_bgp_prfx_mnt_rntl_eup,
                 secd_bgp_prfx_mnt_rntl_eup_dis, change_management,
                 change_management_discount, change_management_light_eup,
                 change_mngment_light_eup_disc, proactive_ce_monitorings_eup,
                 proactve_ce_monitrings_eup_dis,
                 snmp_rdon_aces_prmy_cpeot_eup,
                 snmp_rd_aces_prm_cpeot_eup_dis, ooh_trnup_mn_cpe_ot_eup,
                 ooh_trnup_mn_cpe_ot_eup_dis, snmp_rdon_aces_secd_cpeot_eup,
                 snmp_rd_aces_sec_cpeot_eup_dis, ooh_trnup_sec_cpe_ot_eup,
                 ooh_trnup_sec_cpe_ot_eup_dis
            FROM bcm_export
           WHERE quote_header_id = v_quoteheaderid);

/*      --copy edca_response with new quote_header_id
      INSERT INTO edca_response
                  (edca_order_id, quote_header_id, classic_customer_id,
                   first_name, last_name, email, phone, fax, mobile, title,
                   user_id, ein, ROLE, edca_parent_site_id,
                   edca_child_order_id, edca_child_site_id, site_id,
                   classic_site_id, customer_signed_date, last_assigned_user,
                   last_assigned_team, order_status, rejection_type, reason,
                   team_wrote_reason, site_status, modified_by, modified_date)
         (SELECT edca_order_id, v_newqthdrid, classic_customer_id, first_name,
                 last_name, email, phone, fax, mobile, title, user_id, ein,
                 ROLE, edca_parent_site_id, edca_child_order_id,
                 edca_child_site_id, site_id, classic_site_id,
                 customer_signed_date, last_assigned_user, last_assigned_team,
                 order_status, rejection_type, reason, team_wrote_reason,
                 site_status, in_createdby, SYSDATE
            FROM edca_response
           WHERE quote_header_id = v_quoteheaderid);*/

      /*      --copy expedio_response with new quote_header_id, new quote vesrion and new expedio quote version
         INSERT INTO expedio_response
                     (exp_order_id, exp_quote_id, expedio_ref_id,
                      expedio_quoteversion, site_id, product_id, product_name,
                      quote_id, quote_header_id, VERSION, modified_by,
                      modified_date, reason, status, sub_status, completion_date,
                      ifc_flag,
                      expedio_response_id) -- Added by Sujana on 19/11/2010 as part of introducing new column
            (SELECT exp_order_id, exp_quote_id, expedio_ref_id, v_expversion,
                    site_id, product_id, product_name, quote_id, v_newqthdrid,
                    v_version, modified_by, SYSDATE, reason, status, sub_status,
                    completion_date, ifc_flag,
                    expedio_response_id.NEXTVAL -- Added by Sujana on 19/11/2010 as part of introducing new column
             FROM   expedio_response
              WHERE quote_header_id = v_quoteheaderid);*/
      --COMMIT;
      out_newquoteheaderid := v_newqthdrid;
      out_status := pkg_constants.con_status_success;
      out_expquoteid := in_expquoteid;
      out_newexpversion := v_expversion;
--out_newexpversion := v_expversion;
   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         out_errmsg := SQLERRM;
         ROLLBACK;
   END;

   PROCEDURE spu_quote_version_r5
                                  --Added on 04/08/2010 by Tanmayi for Quote Versioning
   (
      in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
      in_quotename       IN       quote_header.quote_name%TYPE,
      in_currency        IN       quote_header.currency%TYPE,
      in_contractterm    IN       quote_header.contract_term%TYPE,
      in_comments        IN       quote_header.comments%TYPE,
      in_modifiedby      IN       quote_header.modified_by%TYPE,
      out_status         OUT      NUMBER,
      out_errmsg         OUT      VARCHAR2
   )
   AS
/******************************************************************************
   Usage Product Name:All products
   PURPOSE: creating update version of Quote

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0         22/8/00        Suman                            1.0 Add History Comment for  this procedure
  ******************************************************************************/
      v_count   NUMBER;
   BEGIN
      SELECT COUNT (*)
        INTO v_count
        FROM quote_header
       WHERE quote_header_id = in_quoteheaderid;

      IF (v_count >= 1)
      THEN
         BEGIN
            UPDATE quote_header
               SET quote_name = in_quotename,
                   currency = in_currency,
                   contract_term = in_contractterm,
                   comments = in_comments,
                   modified_by = in_modifiedby,
                   modified_date = SYSDATE
             WHERE quote_header_id = in_quoteheaderid;

            out_status := pkg_constants.con_status_success;
         END;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         out_errmsg := SQLERRM;
   END;

   PROCEDURE sps_qref_validation_r5 (
      --Added by Tanmayi on 12/08/2010 to check qref validity for quote verision
      in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
      out_validflag      OUT      NUMBER,
      out_errmsg         OUT      VARCHAR2
   )
   AS
/******************************************************************************
   Usage Product Name:All products
   PURPOSE: creating update version of Quote

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0         22/8/00        Suman                            1.0 Add History Comment for  this procedure
  ******************************************************************************/
      v_qrefcnt    NUMBER;
      v_validcnt   NUMBER;
   BEGIN
      --total qrefs for associated to that quote_header
      SELECT COUNT (DISTINCT external_qref)
        INTO v_qrefcnt
        FROM access_qref aq,
             price_line_item_detail plid,
             line_item li,
             quote_site qs
       WHERE aq.access_qref = plid.external_qref
         AND li.line_item_id = plid.line_item_id
         AND li.quote_header_id = in_quoteheaderid
         AND plid.active = pkg_constants.con_activeflag_yes
         AND aq.quote_site_id = qs.quote_site_id
         AND qs.quote_header_id = in_quoteheaderid
         AND qs.active = pkg_constants.con_activeflag_yes
         AND aq.active = pkg_constants.con_activeflag_yes
         AND li.priced = pkg_constants.con_activeflag_yes;

      --total qrefs associated to that quote_header which are valid
      SELECT COUNT (DISTINCT external_qref)
        INTO v_validcnt
        FROM access_qref aq,
             price_line_item_detail plid,
             line_item li,
             quote_site qs
       WHERE aq.access_qref = plid.external_qref
         AND li.line_item_id = plid.line_item_id
         AND li.quote_header_id = in_quoteheaderid
         AND plid.active = pkg_constants.con_activeflag_yes
         AND aq.quote_site_id = qs.quote_site_id
         AND qs.quote_header_id = in_quoteheaderid
         AND qs.active = pkg_constants.con_activeflag_yes
         AND aq.active = pkg_constants.con_activeflag_yes
         AND li.priced = pkg_constants.con_activeflag_yes
         AND TRUNC (NVL (expiry_date, TO_DATE ('19000101', 'YYYYMMDD')), 'DD') >=
                                                         TRUNC (SYSDATE, 'DD');

      IF (v_qrefcnt = v_validcnt)
      THEN
         out_validflag := pkg_constants.con_status_success;
      ELSE
         out_validflag := pkg_constants.con_status_failure;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         out_errmsg := SQLERRM;
         ROLLBACK;
   END;

-- r5 start
   PROCEDURE spu_customer_vpnbillinfo (
      in_btsub         IN       customer.bt_subsidiary_id%TYPE,
      in_bfgcustid     IN       customer.bfg_customer_id%TYPE,
      in_bfgcustname   IN       customer.bfg_customer_name%TYPE,
      in_vpndet        IN       VARCHAR2,
      in_billingdet    IN       VARCHAR2,
      out_custid       OUT      customer.customer_id%TYPE,
      out_status       OUT      NUMBER,
      out_errmsg       OUT      VARCHAR2
   )
/******************************************************************************
   Usage Product Name:All products
   PURPOSE: creating billing and vpn info.

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0         22/8/00        Suman                            1.0 Add History Comment for  this procedure
  ******************************************************************************/
   AS
      v_row                    VARCHAR2 (8000);
      v_rowcnt                 NUMBER;
      v_bfname                 contact.first_name%TYPE;
      v_blname                 contact.last_name%TYPE;
      v_bemail                 contact.email%TYPE;
      v_bphno                  contact.phone_number%TYPE;
      v_bcode                  ACCOUNT.bank_code%TYPE;
      v_branch                 ACCOUNT.branch_code%TYPE;
      v_bctrl                  ACCOUNT.control_code%TYPE;
      v_bacctno                ACCOUNT.account_number%TYPE;
      v_bstrtno                address.street_number%TYPE          := NULL;
      v_bcity                  address.city%TYPE;
      v_bcntryid               address.country_id%TYPE;
      v_bzip                   address.post_zip_code%TYPE;
      -- v_bcurid         currency.currency_id%TYPE;
      v_bcurrency              billing.currency%TYPE;
      v_binvprd                billing.invoice_period%TYPE;
      v_bactdt                 billing.activation_date%TYPE;
      v_siebelid               billing.siebel_id%TYPE;
      v_bicode                 billing.billing_code%TYPE;
      v_bcontactid             contact.contact_id%TYPE;
      v_baddressid             address.address_id%TYPE;
      v_bacctid                ACCOUNT.account_id%TYPE;
      v_pcontid                contact.contact_id%TYPE;
      v_scontid                contact.contact_id%TYPE;
      v_caddrid                address.address_id%TYPE;
      v_bacctidu               VARCHAR2 (500);
      v_bcontactidu            VARCHAR2 (500);
      v_baddressidu            VARCHAR2 (500);
      v_sitebillcodeu          varchar2_ntt                := varchar2_ntt
                                                                          ();
      v_count                  NUMBER;
      v_vfrnm                  vpn.vpn_friendly_name%TYPE;
      v_vvpn                   vpn.vpn_index%TYPE;
      v_vct                    vpn.connection_type%TYPE;
      v_vcm                    vpn.connectivity_mode%TYPE;
      v_vmss                   vpn.mss_id%TYPE;
      v_fname                  contact.first_name%TYPE;
      v_lname                  contact.last_name%TYPE;
      v_job                    contact.job_title%TYPE;
      v_email                  contact.email%TYPE;
      v_phno                   contact.phone_number%TYPE;
      v_fax                    contact.fax%TYPE;
      v_mob                    contact.mobile_number%TYPE;
      v_ctype                  contact.contact_type%TYPE;
      v_bilcode                billing.billing_code%TYPE;
      v_lenbil                 NUMBER;
      i                        NUMBER                              := 1;
      v_finalbilcode           VARCHAR (9);
      --For R1
      v_bbillcontaccountname   billing.account_name%TYPE;
      v_bbillconttitle         contact.title%TYPE;
      v_bbillcontmiddlename    contact.middle_name%TYPE;
      v_bbillcontaddress1      address.address_line1%TYPE;
      v_bbillcontaddress2      address.address_line2%TYPE;
      v_bbillcontediaddress    billing.edi_address%TYPE;
      v_bbillcontstate         address.state%TYPE;
      v_bbillingcounty         address.county%TYPE;
      v_binformationcurrency   billing.information_currency%TYPE;
      v_bbillperiod            billing.bill_period%TYPE;
      v_bpaymentmethod         billing.payment_method%TYPE;
      v_bpaymentdays           billing.payment_days%TYPE;
      v_bustouching            billing.us_touching_scenario%TYPE;
      v_binvlang               billing.inv_lang%TYPE;
      v_findtilt               NUMBER                              := 0;
      v_cid                    customer.customer_id%TYPE;
      v_extranetname           vpn.extranet_name%TYPE;
      v_vpn_count              NUMBER;
      v_source                 vpn.SOURCE%TYPE;
      v_bfgbillaccid           billing.bfg_bill_account_id%TYPE;

      CURSOR c_billdet
      IS
         SELECT *
           FROM TABLE
                   (CAST
                       (pkg_common.fn_splitdata (in_billingdet, '|') AS varchar2_ntt
                       )
                   );

      CURSOR c_vpndet
      IS
         SELECT *
           FROM TABLE
                     (CAST (pkg_common.fn_splitdata (in_vpndet, '|') AS varchar2_ntt
                           )
                     );
   BEGIN

      BEGIN
         SELECT customer_id
           INTO v_cid
           FROM customer
          WHERE bfg_customer_id = in_bfgcustid;

         IF (in_vpndet != '-1')
         THEN
            FOR v_rowcnt IN c_vpndet
            LOOP
               SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                              1,
                              INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 1) - 1
                             )
                 INTO v_vfrnm
                 FROM DUAL;

               SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                              INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 1) + 1,
                              (  INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 2)
                               - INSTR (v_rowcnt.COLUMN_VALUE, '~', 1)
                               - 1
                              )
                             )
                 INTO v_vct
                 FROM DUAL;

               SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                              INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 2) + 1,
                              (  INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 3)
                               - INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 2)
                               - 1
                              )
                             )
                 INTO v_vvpn
                 FROM DUAL;

               SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                              INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 3) + 1,
                              (  INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 4)
                               - INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 3)
                               - 1
                              )
                             )
                 INTO v_vmss
                 FROM DUAL;

               SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                              INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 4) + 1,
                              (  INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 5)
                               - INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 4)
                               - 1
                              )
                             )
                 INTO v_vcm
                 FROM DUAL;

               SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                              INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 5) + 1,
                              (  INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 6)
                               - INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 5)
                               - 1
                              )
                             )
                 INTO v_extranetname
                 FROM DUAL;

               SELECT (SUBSTR (v_rowcnt.COLUMN_VALUE,
                               INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 6) + 1,
                               LENGTH (v_rowcnt.COLUMN_VALUE) - 1
                              )
                      )
                 INTO v_source
                 FROM DUAL;

               --r5 changes
               SELECT COUNT (*)
                 INTO v_vpn_count
                 FROM vpn
                WHERE vpn_index = v_vvpn AND customer_id = v_cid;

               IF (v_vpn_count = 0)
               THEN
                  INSERT INTO vpn
                              (vpn_id, customer_id, vpn_friendly_name,
                               connection_type, connectivity_mode, mss_id,
                               vpn_index, created_date, extranet_name, SOURCE
                              )
                       VALUES (vpn_id.NEXTVAL, v_cid, v_vfrnm,
                               v_vct, v_vcm, v_vmss,
                               v_vvpn, SYSDATE, v_extranetname, v_source
                              );
               END IF;
            END LOOP;
         END IF;

-----------------------------------

         --Deletions to be done for Billing Info (Account,Address,Contact and Customer Contact)
         SELECT COUNT (*)
           INTO v_count
           FROM billing
          WHERE customer_id = v_cid;

         IF (v_count != 0)
         THEN
            BEGIN
               SELECT   pkg_common.to_string
                            (CAST (COLLECT (TO_CHAR (contact_id)) AS varchar2_ntt
                                  )
                            )
                   INTO v_bcontactidu
                   FROM billing
                  WHERE customer_id = v_cid
               GROUP BY customer_id;

               SELECT   pkg_common.to_string
                            (CAST (COLLECT (TO_CHAR (address_id)) AS varchar2_ntt
                                  )
                            )
                   INTO v_baddressidu
                   FROM billing
                  WHERE customer_id = v_cid
               GROUP BY customer_id;

               SELECT   pkg_common.to_string
                            (CAST (COLLECT (TO_CHAR (account_id)) AS varchar2_ntt
                                  )
                            )
                   INTO v_bacctidu
                   FROM billing
                  WHERE customer_id = v_cid
               GROUP BY customer_id;

               --Collect site ids and billing codes
               SELECT CAST
                         (COLLECT (TO_CHAR (   s.site_id
                                            || '-'
                                            || NVL (b.billing_code, '')
                                           )
                                  ) AS varchar2_ntt
                         )
                 INTO v_sitebillcodeu
                 FROM site s, billing b
                WHERE s.customer_id = v_cid AND s.billing_id = b.billing_id;

               UPDATE site
                  SET billing_id = NULL
                WHERE site_id IN (
                                SELECT SUBSTR (val, 1, INSTR (val, '-', 1) - 1)
                                  FROM (SELECT COLUMN_VALUE val
                                          FROM TABLE (v_sitebillcodeu)));

               DELETE FROM billing
                     WHERE customer_id = v_cid;

               DELETE FROM ACCOUNT
                     WHERE account_id IN (
                              SELECT TO_NUMBER (COLUMN_VALUE)
                                FROM TABLE
                                        (CAST
                                            (pkg_common.fn_splitdata
                                                                  (v_bacctidu,
                                                                   ','
                                                                  ) AS varchar2_ntt
                                            )
                                        ));

               DELETE FROM address
                     WHERE address_id IN (
                              SELECT TO_NUMBER (COLUMN_VALUE)
                                FROM TABLE
                                        (CAST
                                            (pkg_common.fn_splitdata
                                                               (v_baddressidu,
                                                                ','
                                                               ) AS varchar2_ntt
                                            )
                                        ));

               DELETE FROM customer_contact
                     WHERE customer_id = v_cid
                       AND contact_id IN (
                              SELECT c.contact_id
                                FROM customer_contact cc, contact c
                               WHERE c.contact_type =
                                              pkg_constants.con_billingcontact
                                 AND cc.customer_id = v_cid
                                 AND c.contact_id = cc.contact_id);

               DELETE FROM contact
                     WHERE contact_id IN (
                              SELECT TO_NUMBER (COLUMN_VALUE)
                                FROM TABLE
                                        (CAST
                                            (pkg_common.fn_splitdata
                                                               (v_bcontactidu,
                                                                ','
                                                               ) AS varchar2_ntt
                                            )
                                        ))
                       AND contact_type = pkg_constants.con_billingcontact;
            END;
         END IF;

         IF (in_billingdet != '-1')
         THEN
            BEGIN
               FOR v_rowcnt IN c_billdet
               LOOP
                  SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                 1,
                                 INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 1) - 1
                                )
                    INTO v_bcode
                    FROM DUAL;

                  SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                 INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 1) + 1,
                                 (  INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 2)
                                  - INSTR (v_rowcnt.COLUMN_VALUE, '~', 1)
                                  - 1
                                 )
                                )
                    INTO v_branch
                    FROM DUAL;

                  SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                 INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 2) + 1,
                                 (  INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 3)
                                  - INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 2)
                                  - 1
                                 )
                                )
                    INTO v_bctrl
                    FROM DUAL;

                  SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                 INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 3) + 1,
                                 (  INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 4)
                                  - INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 3)
                                  - 1
                                 )
                                )
                    INTO v_bacctno
                    FROM DUAL;

                  SELECT TO_NUMBER (SUBSTR (v_rowcnt.COLUMN_VALUE,
                                              INSTR (v_rowcnt.COLUMN_VALUE,
                                                     '~',
                                                     1,
                                                     4
                                                    )
                                            + 1,
                                            (  INSTR (v_rowcnt.COLUMN_VALUE,
                                                      '~',
                                                      1,
                                                      5
                                                     )
                                             - INSTR (v_rowcnt.COLUMN_VALUE,
                                                      '~',
                                                      1,
                                                      4
                                                     )
                                             - 1
                                            )
                                           )
                                   )
                    INTO v_bcntryid
                    FROM DUAL;

                  SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                 INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 5) + 1,
                                 (  INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 6)
                                  - INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 5)
                                  - 1
                                 )
                                )
                    INTO v_bcurrency
                    FROM DUAL;

                  SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                 INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 6) + 1,
                                 (  INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 7)
                                  - INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 6)
                                  - 1
                                 )
                                )
                    INTO v_binvprd
                    FROM DUAL;

                  SELECT TO_DATE (SUBSTR (v_rowcnt.COLUMN_VALUE,
                                            INSTR (v_rowcnt.COLUMN_VALUE,
                                                   '~',
                                                   1,
                                                   7
                                                  )
                                          + 1,
                                          (  INSTR (v_rowcnt.COLUMN_VALUE,
                                                    '~',
                                                    1,
                                                    8
                                                   )
                                           - INSTR (v_rowcnt.COLUMN_VALUE,
                                                    '~',
                                                    1,
                                                    7
                                                   )
                                           - 1
                                          )
                                         )
                                 )
                    INTO v_bactdt
                    FROM DUAL;

                  SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                 INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 8) + 1,
                                 (  INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 9)
                                  - INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 8)
                                  - 1
                                 )
                                )
                    INTO v_binformationcurrency
                    FROM DUAL;

                  SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                 INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 9) + 1,
                                 (  INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 10)
                                  - INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 9)
                                  - 1
                                 )
                                )
                    INTO v_bbillperiod
                    FROM DUAL;

                  SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                 INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 10) + 1,
                                 (  INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 11)
                                  - INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 10)
                                  - 1
                                 )
                                )
                    INTO v_bpaymentdays
                    FROM DUAL;

                  SELECT
                         --TO_NUMBER
                         (SUBSTR (v_rowcnt.COLUMN_VALUE,
                                  INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 11)
                                  + 1,
                                  (  INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 12)
                                   - INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 11)
                                   - 1
                                  )
                                 )
                         )
                    -- INTO v_bcurid
                  INTO   v_bpaymentmethod
                    FROM DUAL;

                  SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                 INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 12) + 1,
                                 (  INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 13)
                                  - INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 12)
                                  - 1
                                 )
                                )
                    INTO v_bustouching
                    FROM DUAL;

                  SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                 INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 13) + 1,
                                 (  INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 14)
                                  - INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 13)
                                  - 1
                                 )
                                )
                    INTO v_binvlang
                    FROM DUAL;

                  SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                 INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 14) + 1,
                                 (  INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 15)
                                  - INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 14)
                                  - 1
                                 )
                                )
                    INTO v_bicode
                    FROM DUAL;

                  SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                 INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 15) + 1,
                                 LENGTH (v_rowcnt.COLUMN_VALUE) - 1
                                )
                    INTO v_bfgbillaccid
                    FROM DUAL;

                  v_findtilt := INSTR (v_binvlang, '~');

                  IF v_findtilt > 0
                  THEN
                     v_binvlang := SUBSTR (v_binvlang, 1, v_findtilt - 1);
                  END IF;

                  SELECT contact_id.NEXTVAL
                    INTO v_bcontactid
                    FROM DUAL;

                  SELECT address_id.NEXTVAL
                    INTO v_baddressid
                    FROM DUAL;

                  SELECT account_id.NEXTVAL
                    INTO v_bacctid
                    FROM DUAL;

                  --added for R1
                  INSERT INTO contact
                              (contact_id, first_name, last_name,
                               phone_number, email, created_date,
                               contact_type,
                               middle_name, title
                              )
                       VALUES (v_bcontactid, v_bfname, v_blname,
                               v_bphno, v_bemail, SYSDATE,
                               pkg_constants.con_billingcontact,
                               v_bbillcontmiddlename, v_bbillconttitle
                              );

                  INSERT INTO customer_contact
                              (customer_contact_id, customer_id,
                               contact_id, created_date
                              )
                       VALUES (customer_contact_id.NEXTVAL, v_cid,
                               v_bcontactid, SYSDATE
                              );

                  --Added For R1
                  INSERT INTO address
                              (address_id, country_id, street_number, city,
                               post_zip_code, created_date, county,
                               state, address_line1,
                               address_line2
                              )
                       VALUES (v_baddressid, v_bcntryid, v_bstrtno, v_bcity,
                               v_bzip, SYSDATE, v_bbillingcounty,
                               v_bbillcontstate, v_bbillcontaddress1,
                               v_bbillcontaddress2
                              );

                  INSERT INTO ACCOUNT
                              (account_id, account_number, bank_code,
                               branch_code, control_code, created_date
                              )
                       VALUES (v_bacctid, v_bacctno, v_bcode,
                               v_branch, v_bctrl, SYSDATE
                              );

                  --This is executed only when a new billing record is added generate new Billing Code
                  IF (v_bicode = '-1')
                  THEN
                     BEGIN
                        --Find max billing code for the customer(when null its 1)
                        SELECT TO_NUMBER (NVL (  MAX (TO_NUMBER (billing_code))
                                               + 1,
                                               1
                                              )
                                         )
                          INTO v_bilcode
                          FROM billing
                         WHERE customer_id = v_cid;

                        SELECT LENGTH (v_bilcode)
                          INTO v_lenbil
                          FROM DUAL;

                        v_bicode := NULL;

                        --Total Length of Billing Code is 9 , this logic calculated number of '0' to be appended
                        -- to generate the billing code
                        LOOP
                           EXIT WHEN i = (9 - v_lenbil) + 1;
                           v_bicode := v_bicode || '0';
                           i := i + 1;
                        END LOOP;

                        i := 1;
                        v_bicode := v_bicode || v_bilcode;
                     END;
                  END IF;

                  --Modified For R1
                  INSERT INTO billing
                              (billing_id, address_id, customer_id,
                               account_id, contact_id,
                                                      --currency_id
                                                      currency,
                               activation_date, invoice_period, created_date,
                               -- siebel_id,
                               billing_code, information_currency,
                               bill_period, payment_method,
                               payment_days, us_touching_scenario, inv_lang,
                               account_name, edi_address,
                               bfg_bill_account_id
                              )
                       VALUES (billing_id.NEXTVAL, v_baddressid, v_cid,
                               v_bacctid, v_bcontactid,
                                                       --v_bcurid
                                                       v_bcurrency,
                               v_bactdt, v_binvprd, SYSDATE,     --v_siebelid,
                               v_bicode, v_binformationcurrency,
                               v_bbillperiod, v_bpaymentmethod,
                               v_bpaymentdays, v_bustouching, v_binvlang,
                               v_bbillcontaccountname, v_bbillcontediaddress,
                               v_bfgbillaccid
                              );
               END LOOP;

               IF v_sitebillcodeu.COUNT > 0
               -- Modified by Syed. Update only if there are billing ids mapped to site.
               THEN
                  BEGIN
                     FOR i IN 1 .. v_sitebillcodeu.LAST
                     LOOP
                        UPDATE site
                           SET billing_id =
                                  (SELECT billing_id
                                     FROM billing
                                    WHERE billing_code =
                                             SUBSTR
                                                  (v_sitebillcodeu (i),
                                                     INSTR
                                                          (v_sitebillcodeu (i),
                                                           '-'
                                                          )
                                                   + 1
                                                  )
                                      AND customer_id = v_cid)
                         WHERE site_id =
                                  SUBSTR (v_sitebillcodeu (i),
                                          1,
                                            INSTR (v_sitebillcodeu (i), '-',
                                                   1)
                                          - 1
                                         );
                     END LOOP;
                  END;
               END IF;
            END;
         END IF;                                      --end of billing id null
      END;

      --COMMIT;
      out_custid := v_cid;

      IF (out_status IS NULL)
      THEN
         out_status := pkg_constants.con_status_success;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         out_errmsg := SQLERRM;
         ROLLBACK;
   END;

   PROCEDURE sps_managementtype (
      --added by Tanmayi on 26/08/2010 for Service options in R5
      in_quoteheaderid     IN       line_item.quote_header_id%TYPE,
      out_managementtype   OUT      line_item_detail.VALUE%TYPE,
      out_errmsg           OUT      VARCHAR2
   )
   /*
   SP returns out_managementtype as 'BT Managed' even if one site for that
   quote_header_id has management type BT Managed.
   if all sites for that quote_header_id are Customer Managed, out_managementtype
   is returned as 'Customer Managed' otherwise null is returned
   */
   AS
      v_btmgdcnt   NUMBER := 0;
      v_custcnt    NUMBER := 0;
   BEGIN
      --get count where management type is BT Managed
      SELECT COUNT (*)
        INTO v_btmgdcnt
        FROM line_item_detail
       WHERE line_item_id IN (
                SELECT line_item_id
                  FROM line_item
                 WHERE quote_header_id = in_quoteheaderid
                   AND site_id IS NOT NULL
                   AND active = pkg_constants.con_activeflag_yes)
         AND active = pkg_constants.con_activeflag_yes
         AND attribute_mapping_id = 402
         AND UPPER (VALUE) = 'BT MANAGED';

      IF (v_btmgdcnt > 0)
      THEN
         out_managementtype := 'BT Managed';
      ELSE
         BEGIN
            --get count where management type is Customer Managed
            SELECT COUNT (*)
              INTO v_custcnt
              FROM line_item_detail
             WHERE line_item_id IN (
                      SELECT line_item_id
                        FROM line_item
                       WHERE quote_header_id = in_quoteheaderid
                         AND site_id IS NOT NULL
                         AND active = pkg_constants.con_activeflag_yes)
               AND active = pkg_constants.con_activeflag_yes
               AND attribute_mapping_id = 402
               AND UPPER (VALUE) = 'CUSTOMER MANAGED';

            IF (v_custcnt > 0)
            THEN
               out_managementtype := 'Customer Managed';
            ELSE
               NULL;
            END IF;
         END;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         out_errmsg := SQLERRM;
   END;

      PROCEDURE spi_quoteversion_order(
          --Added by Tanmayi on 27/08/2010 for order Rejection / IFC quote_versioning
          in_expquoteid      IN quote_header.expedio_quoteid%TYPE,
          in_expquoteversion IN quote_header.expedio_parent_version%TYPE,
          in_exporderid      IN expedio_response.exp_order_id%TYPE,
          in_createdby       IN quote_header.created_by%TYPE,
          out_newquoteheaderid out quote_header.quote_header_id%TYPE,
          out_expquoteid out quote_header.expedio_quoteid%TYPE,
          out_newexpversion out quote_header.expedio_quoteversion%TYPE,
          out_status out NUMBER,
          out_errmsg out VARCHAR2,
          -- Added in_product_name on 17/12/2010 as part of introducing new table QUOTE_STATUS
          in_product_name IN VARCHAR2 DEFAULT NULL)
      AS
        v_quoteheaderid quote_header.quote_header_id%TYPE;
        v_quoteid quote_header.quote_id%TYPE;
        v_version quote_header.VERSION%TYPE;
        v_expversion quote_header.expedio_quoteversion%TYPE;
        v_newqthdrid quote_header.quote_header_id%TYPE;
        v_siteid site.site_id%TYPE;
        v_neworderhdrid order_header.order_header_id%TYPE;
        v_i NUMBER;
        v_product_name expedio_response.product_name%TYPE;
        -- Added on 17/12/2010
        v_cancled_status VARCHAR2 (100);
        v_main_site_flag VARCHAR2 (10);
        v_lineitemid line_item.line_item_id%TYPE;
        v_orderlineid NUMBER;
        v_orderheader NUMBER;
        v_contactid contact.contact_id%TYPE;
        v_addressid address.address_id%TYPE;
      BEGIN
        DELETE FROM temp_quoteversion;
        COMMIT;
          --select existing quote_header_id to copy
        SELECT DISTINCT quote_header_id,
          quote_id
        INTO v_quoteheaderid,
          v_quoteid
        FROM quote_header
        WHERE expedio_quoteid    = in_expquoteid
        AND expedio_quoteversion = in_expquoteversion;
        --get max of version to create new version
        SELECT CAST ( (MAX (to_number (VERSION)) + 1) AS VARCHAR2 (10))
          || '.0',
          CAST ( (MAX (to_number (expedio_quoteversion)) + 1) AS VARCHAR2 (10))
          || '.0'
        INTO v_version,
          v_expversion
        FROM quote_header
        WHERE quote_id = v_quoteid;
        SELECT quote_header_id.nextval INTO v_newqthdrid FROM dual;
        --create new version of the quote generating new quote_header
        INSERT
        INTO quote_header
          (
            quote_header_id,
            quote_id,
            currency_id,
            VERSION,
            quote_name,
            contract_term,
            opportunity_id,
            bid_number,
            comments,
            status,
            TYPE,
            currency,
            customer_signed_date,
            contract_id,
            capcheck_refno,
            expedio_ref_id,
            cr_prop_id,
            expedio_quoteid,
            expedio_quoteversion,
            expedio_parent_version,
            created_by,
            created_date
          )
          (SELECT v_newqthdrid,
              v_quoteid,
              currency_id,
              v_version,
              quote_name,
              contract_term,
              opportunity_id,
              bid_number,
              comments,
              'Draft',
              TYPE,
              currency,
              customer_signed_date,
              contract_id,
              capcheck_refno,
              expedio_ref_id,
              cr_prop_id,
              in_expquoteid,
              v_expversion,
              in_expquoteversion,
              in_createdby,
              SYSDATE
            FROM quote_header
            WHERE quote_header_id = v_quoteheaderid
          );
        --select the single site_id for that expedio_order_id, quote_id and quote_header_id
        SELECT DISTINCT site_id
        INTO v_siteid
        FROM expedio_response
        WHERE exp_order_id  = in_exporderid
        AND quote_id        = v_quoteid
        AND quote_header_id = v_quoteheaderid;
        SELECT DISTINCT nvl (main_site_flag, 'N')
        INTO v_main_site_flag
        FROM site
        WHERE site_id = v_siteid;
        SELECT DISTINCT status
        INTO v_cancled_status
        FROM expedio_response
        WHERE exp_order_id         = in_exporderid
        AND quote_id               = v_quoteid
        AND quote_header_id        = v_quoteheaderid;
        IF upper (in_product_name) = upper ('BT IVPN2 GLOBAL') THEN
          BEGIN
            SELECT DISTINCT product_name
            INTO v_product_name
            FROM expedio_response
            WHERE exp_order_id       = in_exporderid
            AND quote_id             = v_quoteid
            AND quote_header_id      = v_quoteheaderid
            AND upper (product_name) = upper ('BT IVPN2 GLOBAL');
          exception
          WHEN others THEN
            v_product_name := NULL;
          END;
        END IF;
        -- Added on 17/12/2010
        --copy into quote_status with new quote_header_id
        INSERT
        INTO quote_status
          (
            quote_id,
            quote_header_id,
            product_name,
            status,
            quote_status_id
          )
          (SELECT v_quoteid,
                  v_newqthdrid,
                  product_name,
                  'Draft',
                  quote_status_id.nextval
            FROM quote_status
            WHERE quote_header_id = v_quoteheaderid
            AND product_name      = in_product_name
          );
        --map old quote_site to new quote_site for only that site which has been rejected
        INSERT
        INTO temp_quoteversion
          (
            column_name,
            old_value,
            new_value
          )
          (SELECT 'Quote_Site',
              quote_site_id,
              quote_site_id.nextval
            FROM quote_site
            WHERE quote_header_id = v_quoteheaderid
            AND active            = pkg_constants.con_activeflag_yes
            AND site_id           = v_siteid
          );
        --copy into quote_site with new header_id
        INSERT
        INTO quote_site
          (
            quote_site_id,
            site_id,
            quote_header_id,
            active,
            created_by,
            created_date,
            rfo_validated
          )
          (SELECT new_value,
              site_id,
              v_newqthdrid,
              pkg_constants.con_activeflag_yes,
              in_createdby,
              SYSDATE,
              rfo_validated
            FROM quote_site
            INNER JOIN temp_quoteversion
            ON quote_site_id      = old_value
            AND column_name       = 'Quote_Site'
            WHERE quote_header_id = v_quoteheaderid
            AND active            = pkg_constants.con_activeflag_yes
            AND site_id           = v_siteid
          );
        --copy into quote_price_list with new header_id
        INSERT
        INTO quote_price_list
          (
            quote_price_list_id,
            quote_header_id,
            price_list_id,
            created_by,
            created_date,
            price_list_name,
            site_id,
            product_id,
            product_name
          )
          (SELECT quote_price_list_id.nextval,
              v_newqthdrid,
              price_list_id,
              in_createdby,
              SYSDATE,
              price_list_name,
              site_id,
              product_id,
              product_name
            FROM quote_price_list
            WHERE quote_header_id = v_quoteheaderid
            AND site_id           = v_siteid
          );
        --map old quote_site_service to new quote_site_service
        INSERT
        INTO temp_quoteversion
          (
            column_name,
            old_value,
            new_value
          )
          (SELECT 'Quote_Site_Service',
              quote_site_service_id,
              quote_site_service_id.nextval
            FROM quote_site_service
            WHERE quote_header_id = v_quoteheaderid
            AND site_id           = v_siteid
          );
        --copy into quote_site_service with new header_id
        INSERT
        INTO quote_site_service
          (
            quote_site_service_id,
            quote_header_id,
            site_id,
            product_id,
            product_name,
            created_by,
            created_date,
            service_name,
            PRIMARY,
            secondary,
            status
          )
          (SELECT new_value,
              v_newqthdrid,
              site_id,
              product_id,
              product_name,
              in_createdby,
              SYSDATE,
              service_name,
              PRIMARY,
              secondary,
              status
            FROM quote_site_service
            INNER JOIN temp_quoteversion
            ON quote_site_service_id = old_value
            AND column_name          = 'Quote_Site_Service'
            WHERE quote_header_id    = v_quoteheaderid
          );
        --copy into product_selection with new quote_header_id
        INSERT
        INTO product_selection
          (
            product_selection_id,
            quote_id,
            proposition_id,
            sub_proposition_id,
            product_id,
            created_by,
            created_date,
            proposition_name,
            sub_proposition_name,
            product_name,
            site_id,
            quote_header_id,
            active
          )
          (SELECT product_selection_id.nextval,
              v_quoteid,
              proposition_id,
              sub_proposition_id,
              product_id,
              in_createdby,
              SYSDATE,
              proposition_name,
              sub_proposition_name,
              product_name,
              site_id,
              v_newqthdrid,
              pkg_constants.con_activeflag_yes
            FROM product_selection
            WHERE quote_header_id = v_quoteheaderid
            AND quote_id          = v_quoteid
            AND active            = pkg_constants.con_activeflag_yes
            AND (site_id          = v_siteid
            OR site_id           IS NULL)
          );
        /*** Added for merging code******/
        INSERT
        INTO customer_product
          (
            quote_header_id,
            product_name,
            customer_id,
            created_by,
            created_date,
            site_id,
            bfg_bill_account_id,
            ptp_price_book_version,
            eup_price_book_version,
            product_id,
            customer_product_id,
            comments,
            monthly_revenue_commitment,
            trigger_period,
            order_submitted_flag,
            proposed_mnth_rev_commitment -- Added by Sujana on 16/11/2010
          )
          (SELECT v_newqthdrid,
              product_name,
              customer_id,
              created_by,
              created_date,
              site_id,
              bfg_bill_account_id,
              ptp_price_book_version,
              eup_price_book_version,
              product_id,
              customer_product_id.nextval -- Added by Sujana on 16/11/2010
              customer_product_id,
              comments,
              monthly_revenue_commitment,
              trigger_period,
              order_submitted_flag,
              proposed_mnth_rev_commitment
            FROM customer_product
            WHERE quote_header_id = v_quoteheaderid
            AND (site_id          = v_siteid
            OR site_id           IS NULL)
          );
        --***************code to lock line_item table**************************
        --      SELECT        line_item_id
        --               INTO v_i
        --               FROM line_item
        --              WHERE ROWNUM = 1
        --      FOR UPDATE OF line_item_id NOWAIT;
        --***********************************************************************
        --map old line_itemto new line_item
        INSERT
        INTO temp_quoteversion
          (
            column_name,
            old_value,
            new_value
          )
          (SELECT 'Line_Item',
              line_item_id,
              line_item_id.nextval
            FROM line_item
            WHERE quote_header_id = v_quoteheaderid
            AND active            = pkg_constants.con_activeflag_yes
            AND (site_id          = v_siteid
            OR site_id           IS NULL)
          );
        IF
          (
            upper (v_product_name) = upper ('BT IVPN2 GLOBAL')
          )
          THEN
          --copy line_item with new header_id
          INSERT
          INTO line_item
            (
              line_item_id,
              quote_header_id,
              VALUE,
              currency,
              aggregate_price,
              site_id,
              created_by,
              created_date,
              product_id,
              product_name,
              quantity,
              active,
              fallback_type,
              part_type,
              priced,
              non_std_flag,
              row_id,
              quote_site_service_id,
              scode
            )
            (SELECT tqv.new_value,
                v_newqthdrid,
                VALUE,
                currency,
                aggregate_price,
                site_id,
                in_createdby,
                SYSDATE,
                product_id,
                product_name,
                quantity,
                pkg_constants.con_activeflag_yes,
                fallback_type,
                part_type,
                CASE
                  WHEN upper (product_name) = upper ('BT iVPN2 Access')
                  THEN priced
                  ELSE 'N'
                END priced, ---Modified by SRK on 30-dec-10
                non_std_flag,
                row_id,
                qss.new_value,
                scode
              FROM line_item
              INNER JOIN temp_quoteversion tqv
              ON line_item_id     = tqv.old_value
              AND tqv.column_name = 'Line_Item'
              LEFT OUTER JOIN
                (SELECT old_value,
                  new_value
                FROM temp_quoteversion
                WHERE column_name = 'Quote_Site_Service'
                ) qss
              ON quote_site_service_id = qss.old_value
              WHERE quote_header_id    = v_quoteheaderid
              AND active               = pkg_constants.con_activeflag_yes
            );
        ELSE
          INSERT
          INTO line_item
            (
              line_item_id,
              quote_header_id,
              VALUE,
              currency,
              aggregate_price,
              site_id,
              created_by,
              created_date,
              product_id,
              product_name,
              quantity,
              active,
              fallback_type,
              part_type,
              priced,
              non_std_flag,
              row_id,
              quote_site_service_id,
              scode
            )
            (SELECT tqv.new_value,
                v_newqthdrid,
                VALUE,
                currency,
                aggregate_price,
                site_id,
                in_createdby,
                SYSDATE,
                product_id,
                product_name,
                quantity,
                pkg_constants.con_activeflag_yes,
                fallback_type,
                part_type,
                priced,
                non_std_flag,
                row_id,
                qss.new_value,
                scode
              FROM line_item
              INNER JOIN temp_quoteversion tqv
              ON line_item_id     = tqv.old_value
              AND tqv.column_name = 'Line_Item'
              LEFT OUTER JOIN
                (SELECT old_value,
                  new_value
                FROM temp_quoteversion
                WHERE column_name = 'Quote_Site_Service'
                ) qss
              ON quote_site_service_id = qss.old_value
              WHERE quote_header_id    = v_quoteheaderid
              AND active               = pkg_constants.con_activeflag_yes
            );
        END IF;
        -- copy line_item_details for new line_item_id
        INSERT
        INTO line_item_detail
          (
            line_item_detail_id,
            line_item_id,
            VALUE,
            active,
            created_by,
            created_date,
            attribute_mapping_id,
            quantity,
            line_item_description,
            non_std_flag,
            row_id,
            action_code
          )
          (SELECT line_item_detail_id.nextval,
              new_value,
              VALUE,
              pkg_constants.con_activeflag_yes,
              in_createdby,
              SYSDATE,
              attribute_mapping_id,
              quantity,
              line_item_description,
              non_std_flag,
              row_id,
              action_code
            FROM line_item_detail
            INNER JOIN temp_quoteversion
            ON line_item_id = old_value
            AND column_name = 'Line_Item'
            AND active      = pkg_constants.con_activeflag_yes
          );
        --copy pricing_bucket with new quote_header_id
        INSERT
        INTO pricing_bucket
          (
            pricing_bucket_id,
            bucket_id,
            request_id,
            quote_header_id,
            site_name,
            config_level,
            product_name,
            active,
            created_by,
            created_date
          )
          (SELECT pricing_bucket_id.nextval,
              bucket_id,
              request_id,
              v_newqthdrid,
              site_name,
              config_level,
              product_name,
              pkg_constants.con_activeflag_yes,
              in_createdby,
              SYSDATE
            FROM pricing_bucket
            WHERE quote_header_id = v_quoteheaderid
            AND active            = pkg_constants.con_activeflag_yes
          );
        --map old price_line_item_detail  to new price_line_item_detail
        ---- Modified on 23-11-2010 to copy Pricing only for Access By SRK
        IF
          (
            upper (v_product_name) = upper ('BT IVPN2 GLOBAL')
          )
          THEN
          INSERT
          INTO temp_quoteversion
            (
              column_name,
              old_value,
              new_value
            )
            (SELECT 'Price_Line_Item_Detail',
                price_line_item_detail_id,
                price_line_item_detail_id.nextval
              FROM price_line_item_detail pd
              WHERE line_item_id IN
                (SELECT old_value
                FROM temp_quoteversion tqv
                INNER JOIN line_item lm
                ON lm.line_item_id          = tqv.old_value
                AND upper (lm.product_name) = upper ( 'BT iVPN2 Access')
                AND lm.active               = pkg_constants. con_activeflag_yes
                WHERE column_name           = 'Line_Item'
                )
              AND pd.active = pkg_constants.con_activeflag_yes
            );
          --copy price_line_item_details for new line_item_id
          INSERT
          INTO price_line_item_detail
            (
              price_line_item_detail_id,
              price_line_item_id,
              line_item_id,
              price,
              currency,
              active,
              created_by,
              created_date,
              attribute_mapping_id,
              charge_type,
              external_qref,
              discount,
              discount_type,
              rent_price,
              row_id,
              onetime_port_discount,
              recurring_port_discount,
              request_status,
              error_description,
              primary_pricing_status,
              secondary_pricing_status,
              quantity,
              net_price,
              action_code,
              line_item_detail_id,
              approved_disc,
              ptp_eup,
              ptp_eup_id,
              pln_inventory_id,
              discount_requested,
              discount_proposed
            )
            (SELECT tqv.new_value,
                price_line_item_id,
                li.new_value,
                price,
                pd.currency,
                pkg_constants.con_activeflag_yes,
                in_createdby,
                SYSDATE,
                attribute_mapping_id,
                charge_type,
                external_qref,
                discount,
                discount_type,
                rent_price,
                pd.row_id,
                onetime_port_discount,
                recurring_port_discount,
                request_status,
                error_description,
                primary_pricing_status,
                secondary_pricing_status,
                pd.quantity,
                net_price,
                pd.action_code,
                line_item_detail_id,
                approved_disc,
                ptp_eup,
                ptp_eup_id,
                pln_inventory_id,
                discount_requested,
                discount_proposed
              FROM price_line_item_detail pd
              INNER JOIN temp_quoteversion tqv
              ON pd.price_line_item_detail_id = tqv.old_value
              INNER JOIN line_item lm
              ON pd.line_item_id          = lm.line_item_id
              AND upper (lm.product_name) = upper ('BT iVPN2 Access')
              AND lm.active               = pkg_constants.con_activeflag_yes
              AND tqv.column_name         = 'Price_Line_Item_Detail'
              AND pd.active               = pkg_constants.con_activeflag_yes
              INNER JOIN
                (SELECT old_value,
                  new_value
                FROM temp_quoteversion
                WHERE column_name = 'Line_Item'
                ) li
              ON pd.line_item_id = li.old_value
            );
        ELSE
          INSERT
          INTO temp_quoteversion
            (
              column_name,
              old_value,
              new_value
            )
            (SELECT 'Price_Line_Item_Detail',
                price_line_item_detail_id,
                price_line_item_detail_id.nextval
              FROM price_line_item_detail pd
              WHERE line_item_id IN
                (SELECT old_value
                FROM temp_quoteversion tqv
                INNER JOIN line_item lm
                ON lm.line_item_id = tqv.old_value
                  ----AND upper(lm.product_name) = upper('BT iVPN2 Access')
                AND lm.active     = pkg_constants. con_activeflag_yes
                WHERE column_name = 'Line_Item'
                )
              AND pd.active = pkg_constants.con_activeflag_yes
            );
          --copy price_line_item_details for new line_item_id
          INSERT
          INTO price_line_item_detail
            (
              price_line_item_detail_id,
              price_line_item_id,
              line_item_id,
              price,
              currency,
              active,
              created_by,
              created_date,
              attribute_mapping_id,
              charge_type,
              external_qref,
              discount,
              discount_type,
              rent_price,
              row_id,
              onetime_port_discount,
              recurring_port_discount,
              request_status,
              error_description,
              primary_pricing_status,
              secondary_pricing_status,
              quantity,
              net_price,
              action_code,
              line_item_detail_id,
              approved_disc,
              ptp_eup,
              ptp_eup_id,
              pln_inventory_id,
              discount_requested,
              discount_proposed
            )
            (SELECT tqv.new_value,
                price_line_item_id,
                li.new_value,
                price,
                pd.currency,
                pkg_constants.con_activeflag_yes,
                in_createdby,
                SYSDATE,
                attribute_mapping_id,
                charge_type,
                external_qref,
                discount,
                discount_type,
                rent_price,
                pd.row_id,
                onetime_port_discount,
                recurring_port_discount,
                request_status,
                error_description,
                primary_pricing_status,
                secondary_pricing_status,
                pd.quantity,
                net_price,
                pd.action_code,
                line_item_detail_id,
                approved_disc,
                ptp_eup,
                ptp_eup_id,
                pln_inventory_id,
                discount_requested,
                discount_proposed
              FROM price_line_item_detail pd
              INNER JOIN temp_quoteversion tqv
              ON pd.price_line_item_detail_id = tqv.old_value
              INNER JOIN line_item lm
              ON pd.line_item_id = lm.line_item_id
                ---- AND UPPER (lm.product_name) = UPPER ('BT iVPN2 Access')
              AND lm.active       = pkg_constants.con_activeflag_yes
              AND tqv.column_name = 'Price_Line_Item_Detail'
              AND pd.active       = pkg_constants.con_activeflag_yes
              INNER JOIN
                (SELECT old_value,
                  new_value
                FROM temp_quoteversion
                WHERE column_name = 'Line_Item'
                ) li
              ON pd.line_item_id = li.old_value
            );
        END IF;
        --copy cost_detail with new price_line_item_detail_id
        INSERT
        INTO cost_detail
          (
            cost_detail_id,
            price_line_item_detail_id,
            COST,
            cost_type,
            currency,
            created_by,
            created_date
          )
          (SELECT cost_detail_id.nextval,
              new_value,
              COST,
              cost_type,
              currency,
              in_createdby,
              SYSDATE
            FROM cost_detail
            INNER JOIN temp_quoteversion
            ON price_line_item_detail_id = old_value
            AND column_name              = 'Price_Line_Item_Detail'
          );
        --map old access_qref  to new access_qref
        INSERT
        INTO temp_quoteversion
          (
            column_name,
            old_value,
            new_value
          )
          (SELECT 'Access_Qref',
              access_qref_id,
              access_qref_id.nextval
            FROM access_qref
            WHERE quote_site_id IN
              (SELECT old_value FROM temp_quoteversion WHERE column_name = 'Quote_Site'
              )
            AND active                                                              = pkg_constants.con_activeflag_yes
            AND trunc ( nvl (expiry_date, to_date ('19000101', 'YYYYMMDD')), 'DD') >= trunc (SYSDATE, 'DD')
          );
        --copy access_qrefs with new quote_site_id
        ---- Modified on 04-Jan-2011 to copy Pricing status only Access others Not Priced By SRK
        INSERT
        INTO access_qref
          (
            access_qref_id,
            quote_site_id,
            access_qref,
            pricing_status,
            access_speed,
            supplier,
            lead_time,
            port_speed,
            one_time_charge,
            recurring_charge,
            created_by,
            created_date,
            active,
            port_speed_value,
            port_uom,
            access_speed_value,
            access_uom,
            access_product_type,
            access_technology,
            supplier_product_name,
            gpop_node,
            distance_gpop,
            apop_node,
            distance_apop,
            term,
            leg_id,
            pair_id,
            expiry_date_time_zone,
            tariff_zone_name,
            no_of_copper_pairs,
            circuit_interface,
            auto_priced_flag,
            budgetary_priced_flag,
            interface_type,
            framing_details,
            connector,
            install_cost,
            supplier_cost,
            backhaul_cost,
            local_tail_cost,
            cost_access_currency,
            resiliency_flag,
            comments,
            nni_flag,
            support_24x7,
            sent_to_ape,
            monthly_cost,
            access_type,
            expiry_date,
            apop_flag,
            port_status,
            gpop_id,
            apop_id,
            port_speed_avail_status,
            METHOD,
            aggregator_quote_line_id,
            encapsulation,
            guaranteed_speed,
            isp_addressing,
            time_to_deliver,
            monthly_recurring_charge,
            non_recurring_charge,
            access_availability,
            service_catagory,
            other_service_notes,
            additional_charges,
            tranaction_type,
            hvpn_access_technology,
            pricing_id,
            service_id,
            copper_details,
            copper_service_id,
            rfa_notes,
            mrc,
            nrc,
            tarrif_zone,
            support_24_7,
            rfo_notes,
            copper_pair,
            ethernet_phase_attribute,
            non_std_qref_flag,
            network_type,
            partner_name,
            workflow_status,
            ape_comments,
            staff_member_name,
            staff_member_email,
            service_variant
          )
          (SELECT tqv.new_value,
              qtsite.new_value,
              access_qref,
              CASE
                WHEN upper (lm.product_name) = upper ('BT iVPN2 Access')
                THEN aq.pricing_status
                ELSE 'Not Priced'
              END pricing_status,
              access_speed,
              supplier,
              lead_time,
              port_speed,
              one_time_charge,
              recurring_charge,
              in_createdby,
              SYSDATE,
              pkg_constants.con_activeflag_yes,
              port_speed_value,
              port_uom,
              access_speed_value,
              access_uom,
              access_product_type,
              access_technology,
              supplier_product_name,
              gpop_node,
              distance_gpop,
              apop_node,
              distance_apop,
              term,
              leg_id,
              pair_id,
              expiry_date_time_zone,
              tariff_zone_name,
              no_of_copper_pairs,
              circuit_interface,
              auto_priced_flag,
              budgetary_priced_flag,
              interface_type,
              framing_details,
              connector,
              install_cost,
              supplier_cost,
              backhaul_cost,
              local_tail_cost,
              cost_access_currency,
              resiliency_flag,
              comments,
              nni_flag,
              support_24x7,
              sent_to_ape,
              monthly_cost,
              access_type,
              expiry_date,
              apop_flag,
              port_status,
              gpop_id,
              apop_id,
              port_speed_avail_status,
              METHOD,
              aggregator_quote_line_id,
              encapsulation,
              guaranteed_speed,
              isp_addressing,
              time_to_deliver,
              monthly_recurring_charge,
              non_recurring_charge,
              access_availability,
              service_catagory,
              other_service_notes,
              additional_charges,
              tranaction_type,
              hvpn_access_technology,
              pricing_id,
              service_id,
              copper_details,
              copper_service_id,
              rfa_notes,
              mrc,
              nrc,
              tarrif_zone,
              support_24_7,
              rfo_notes,
              copper_pair,
              ethernet_phase_attribute,
              non_std_qref_flag,
              network_type,
              partner_name,
              workflow_status,
              ape_comments,
              staff_member_name,
              staff_member_email,
              service_variant
            FROM access_qref aq
            INNER JOIN temp_quoteversion tqv
            ON access_qref_id   = tqv.old_value
            AND tqv.column_name = 'Access_Qref'
            INNER JOIN quote_site qs
            ON aq.quote_site_id = qs.quote_site_id
            INNER JOIN line_item lm
            ON qs.quote_header_id = lm.quote_header_id
            AND upper(lm.product_name) = upper ('BT iVPN2 Access')
            AND lm.active         = pkg_constants.con_activeflag_yes
            INNER JOIN
              (SELECT old_value,
                new_value
              FROM temp_quoteversion
              WHERE column_name = 'Quote_Site'
              ) qtsite
            ON aq.quote_site_id = qtsite.old_value
            AND aq.active       = pkg_constants.con_activeflag_yes
          );
        --copy access_caveat with new access_qref_id
        INSERT
        INTO access_caveat
          (
            access_caveat_id,
            access_qref_id,
            caveat_id,
            description,
            caveated_on,
            created_by,
            created_date,
            updated_on,
            active,
            access_caveat
          )
          (SELECT access_caveat_id.nextval,
              new_value,
              caveat_id,
              description,
              caveated_on,
              in_createdby,
              SYSDATE,
              updated_on,
              pkg_constants.con_activeflag_yes,
              access_caveat
            FROM access_caveat ac
            INNER JOIN temp_quoteversion tq
            ON ac.access_qref_id = tq.old_value
            AND column_name      = 'Access_Qref'
            INNER JOIN access_qref aq
            ON aq.access_qref_id = ac.access_qref_id
            INNER JOIN quote_site qs
            ON aq.quote_site_id = qs.quote_site_id
            INNER JOIN line_item lm
            ON qs.quote_header_id = lm.quote_header_id
            AND (lm.product_name) = upper ('BT iVPN2 Access')
            AND lm.active         = pkg_constants.con_activeflag_yes
          );
        --copy bid_detail with new quote_header id
        INSERT
        INTO bid_detail
          (
            bid_detail_id,
            quote_header_id,
            site_id,
            product_id,
            product_name,
            request_name,
            customer_committed,
            customer_requested,
            volume_for_features,
            tier,
            bid_manager_name,
            win_chance,
            customer_value,
            nsoc,
            siebel_id,
            ipn_spoc_name,
            comments,
            non_standard_flag,
            created_by,
            created_date,
            active,
            no_of_isdn_channels,
            discount_approved_rejected_by,
            bid_manager_email_id,
            sales_user_reason,
            bid_manager_reason
          )
          (SELECT bid_detail_id.nextval,
              v_newqthdrid,
              site_id,
              product_id,
              product_name,
              request_name,
              customer_committed,
              customer_requested,
              volume_for_features,
              tier,
              bid_manager_name,
              win_chance,
              customer_value,
              nsoc,
              siebel_id,
              ipn_spoc_name,
              comments,
              non_standard_flag,
              in_createdby,
              SYSDATE,
              pkg_constants.con_activeflag_yes,
              no_of_isdn_channels,
              discount_approved_rejected_by,
              bid_manager_email_id,
              sales_user_reason,
              bid_manager_reason
            FROM bid_detail
            WHERE quote_header_id = v_quoteheaderid
          );
        --copy bid_request_status for new quote_header_id
        INSERT
        INTO bid_request_status
          (
            bid_request_status_id,
            quote_header_id,
            site_id,
            product_id,
            product_name,
            special_bid_number,
            bid_status,
            one_time_install_cost,
            data_build_done,
            bid_expiry_date,
            monthly_recurring_cost,
            created_by,
            created_date,
            active,
            non_std_bid_items,
            row_id,
            activation_due_date,
            tpp_url,
            non_std_comp,
            instructions
          )
          (SELECT bid_request_status_id.nextval,
              v_newqthdrid,
              site_id,
              product_id,
              product_name,
              special_bid_number,
              bid_status,
              one_time_install_cost,
              data_build_done,
              bid_expiry_date,
              monthly_recurring_cost,
              in_createdby,
              SYSDATE,
              pkg_constants.con_activeflag_yes,
              non_std_bid_items,
              row_id,
              activation_due_date,
              tpp_url,
              non_std_comp,
              instructions
            FROM bid_request_status
            WHERE quote_header_id = v_quoteheaderid
            AND active            = pkg_constants.con_activeflag_yes
            AND site_id           = v_siteid
          );
        --copy discount_approval with new quote_header_id
        INSERT
        INTO discount_approval
          (
            discount_approval_id,
            quote_header_id,
            submitted_by,
            approval_status,
            reason,
            created_by,
            created_date,
            active
          )
          (SELECT discount_approval_id.nextval,
              v_newqthdrid,
              submitted_by,
              approval_status,
              reason,
              in_createdby,
              SYSDATE,
              pkg_constants.con_activeflag_yes
            FROM discount_approval
            WHERE quote_header_id = v_quoteheaderid
            AND active            = pkg_constants.con_activeflag_yes
          );
        --copy exchange_rate_detail with new quote_header_id
        INSERT
        INTO exchange_rate_detail
          (
            exchange_rate_detail_id,
            quote_header_id,
            source_currency,
            target_currency,
            exchange_rate,
            exchange_rate_date,
            active,
            created_by,
            created_date
          )
          (SELECT exchange_rate_detail_id.nextval,
              v_newqthdrid,
              source_currency,
              target_currency,
              exchange_rate,
              exchange_rate_date,
              pkg_constants.con_activeflag_yes,
              in_createdby,
              SYSDATE
            FROM exchange_rate_detail
            WHERE quote_header_id = v_quoteheaderid
            AND active            = pkg_constants.con_activeflag_yes
          );
        --map old order_header to new order_header
        INSERT
        INTO temp_quoteversion
          (
            column_name,
            old_value,
            new_value
          )
          (SELECT 'Order_Header',
              order_header_id,
              order_header_id.nextval
            FROM order_header
            WHERE quote_header_id = v_quoteheaderid
          );
        --copy order_header with new quote_header_id
        INSERT
        INTO order_header
          (
            order_header_id,
            quote_header_id,
            currency,
            created_by,
            created_date,
            order_status,
            order_type,
            contract_id,
            comments,
            order_form_sign_date,
            is_order_rejected,
            is_order_ipclearreachoutsite,
            ftip_number,
            emailid,
            vpn_connectivity_mode,
            expedio_parent_orderid,
            product_name
          ) -- Added By Sandeep on 10-Mar-2011(was missing in Local)
          (SELECT new_value,
              v_newqthdrid,
              currency,
              in_createdby,
              SYSDATE,
              'Draft',
              order_type,
              contract_id,
              comments,
              order_form_sign_date,
              is_order_rejected,
              is_order_ipclearreachoutsite,
              ftip_number,
              emailid,
              vpn_connectivity_mode,
              in_exporderid,
              product_name
            FROM order_header
            INNER JOIN temp_quoteversion
            ON order_header_id    = old_value
            AND column_name       = 'Order_Header'
            WHERE quote_header_id = v_quoteheaderid
          );
        --copy customer_billing_info with new order_header_id
        INSERT
        INTO customer_billing_info
          (
            customer_billing_info_id,
            customer_id,
            order_header_id,
            billing_id,
            SYSTEM,
            is_default,
            created_by,
            created_date,
            currency
          )
          (SELECT customer_billing_info_id.nextval,
              customer_id,
              new_value,
              billing_id,
              SYSTEM,
              is_default,
              in_createdby,
              SYSDATE,
              currency
            FROM customer_billing_info
            INNER JOIN temp_quoteversion
            ON order_header_id = old_value
            AND column_name    = 'Order_Header'
          );
        INSERT
        INTO temp_quoteversion
          (
            column_name,
            old_value,
            new_value
          )
          (SELECT 'Order_Attachment',
              attachment_id,
              order_attachment_id.nextval
            FROM order_attachment
            INNER JOIN temp_quoteversion
            ON order_header_id = old_value
            AND column_name    = 'Order_Header'
            AND site_id        = v_siteid
          );
        --copy order_attachment with new order_header_id
        INSERT
        INTO order_attachment
          (
            attachment_id,
            order_header_id,
            site_id,
            attachment_type
          )
          (SELECT tqv.new_value,
              ohd.new_value,
              site_id,
              attachment_type
            FROM order_attachment
            INNER JOIN temp_quoteversion tqv
            ON attachment_id    = tqv.old_value
            AND tqv.column_name = 'Order_Attachment'
            INNER JOIN
              (SELECT old_value,
                new_value
              FROM temp_quoteversion
              WHERE column_name = 'Order_Header'
              ) ohd
            ON order_header_id = ohd.old_value
          );
        --copy order_attachment_detail with new attachment_id
        INSERT
        INTO order_attachment_detail
          (
            attachment_id,
            url,
            downloaded_to_classic,
            SOURCE --,attachment_type
          )
          (SELECT new_value,
              url,
              downloaded_to_classic,
              SOURCE
              --,attachment_type
            FROM order_attachment_detail
            INNER JOIN temp_quoteversion
            ON attachment_id = old_value
            AND column_name  = 'Order_Attachment'
          );
        --map old order_line_item to new order_line_item
        INSERT
        INTO temp_quoteversion
          (
            column_name,
            old_value,
            new_value
          )
          (SELECT 'Order_Line_Item',
              order_line_item_id,
              order_line_item_id.nextval
            FROM order_line_item
            INNER JOIN temp_quoteversion
            ON order_header_id = old_value
            AND column_name    = 'Order_Header'
            WHERE active       = pkg_constants.con_activeflag_yes
            AND site_id        = v_siteid
          );
        --copy order_line_item with new order_header_id
        INSERT
        INTO order_line_item
          (
            order_line_item_id,
            order_header_id,
            currency,
            product_id,
            product_name,
            site_id,
            active,
            created_by,
            created_date,
            fallback_type,
            quantity,
            row_id,
            quote_site_service_id
          )
          (SELECT tqv.new_value,
              ohd.new_value,
              currency,
              product_id,
              product_name,
              site_id,
              pkg_constants.con_activeflag_yes,
              in_createdby,
              SYSDATE,
              fallback_type,
              quantity,
              row_id,
              qss.new_value
            FROM order_line_item
            INNER JOIN temp_quoteversion tqv
            ON order_line_item_id = tqv.old_value
            AND column_name       = 'Order_Line_Item'
            INNER JOIN
              (SELECT old_value,
                new_value
              FROM temp_quoteversion
              WHERE column_name = 'Order_Header'
              ) ohd
            ON order_header_id = ohd.old_value
            LEFT OUTER JOIN
              (SELECT old_value,
                new_value
              FROM temp_quoteversion
              WHERE column_name = 'Quote_Site_Service'
              ) qss
            ON quote_site_service_id = qss.old_value
            WHERE active             = pkg_constants.con_activeflag_yes
          );
        --copy order_line_item_detail for new order_line_item_id
        INSERT
        INTO order_line_item_detail
          (
            order_line_item_det_id,
            order_line_item_id,
            attribute_mapping_id,
            VALUE,
            active,
            created_by,
            created_date,
            quantity,
            row_id
          )
          (SELECT order_line_item_det_id.nextval,
              new_value,
              attribute_mapping_id,
              VALUE,
              pkg_constants.con_activeflag_yes,
              in_createdby,
              SYSDATE,
              quantity,
              row_id
            FROM order_line_item_detail
            INNER JOIN temp_quoteversion
            ON order_line_item_id = old_value
            AND column_name       = 'Order_Line_Item'
            WHERE active          = pkg_constants.con_activeflag_yes
          );
        --copy order_contact_detail with new order_header_id

        BEGIN
          FOR cont_order_contact IN
          (SELECT DISTINCT co.first_name AS first_name,
              co.last_name               AS last_name,
              co.phone_number            AS phone_number,
              co.mobile_number           AS mobile_number,
              co.fax                     AS fax,
              co.job_title               AS job_title,
              co.email                   AS email,
              co.contact_type            AS contact_type,
              co.pager                   AS pager,
              co.org_id                  AS org_id,
              co.orga_name               AS orga_name,
              ad.country_id              AS country_id,
              ad.city                    AS city,
              ad.state                   AS state,
              ad.post_zip_code           AS post_zip_code,
              ad.address_line1           AS address_line1,
              ad.address_line2           AS address_line2,
              ad.street_name             AS street_name,
              ad.county                  AS county,
              ocd.bfg_cnt_id             AS bfg_cnt_id,
              ocd.bfg_cnr_id             AS bfg_cnr_id,
              ocd.site_id                AS site_id,
              new_value                  AS new_value
            FROM order_contact_detail ocd ,
              contact co ,
              address ad,
              temp_quoteversion
            WHERE co.contact_id =ocd.contact_id
            AND ad.address_id   =ocd.address_id
              --                          and OCD.ORDER_HEADER_ID=2410
            AND ocd.order_header_id = old_value
            AND column_name         = 'Order_Header'
          )
          loop
            INSERT
            INTO contact
              (
                contact_id,
                first_name,
                last_name,
                email,
                phone_number,
                contact_type,
                created_by,
                created_date,
                job_title,
                mobile_number,
                fax,
                org_id,
                orga_name
              )
              VALUES
              (
                contact_id.nextval,
                cont_order_contact.first_name,
                cont_order_contact.last_name,
                cont_order_contact.email,
                cont_order_contact.phone_number,
                cont_order_contact.contact_type,
                in_createdby,
                SYSDATE,
                cont_order_contact.job_title,
                cont_order_contact.mobile_number,
                cont_order_contact.fax,
                cont_order_contact.org_id,
                cont_order_contact.orga_name
              );
            INSERT
            INTO address
              (
                address_id,
                country_id,
                city,
                post_zip_code,
                created_date,
                created_by,
                county,
                state,
                address_line1,
                address_line2
              )
              VALUES
              (
                address_id.nextval,
                cont_order_contact.country_id,
                cont_order_contact.city,
                cont_order_contact.post_zip_code,
                SYSDATE,
                in_createdby,
                cont_order_contact.county,
                cont_order_contact.state,
                cont_order_contact.address_line1,
                cont_order_contact.address_line2
              );
            INSERT
            INTO site_contact_detail
              (
                site_contact_detail_id,
                site_id,
                contact_id,
                created_by,
                created_date
              )
              VALUES
              (
                site_contact_detail_id.nextval,
                cont_order_contact.site_id,
                contact_id.currval,
                in_createdby,
                SYSTIMESTAMP
              );
            INSERT
            INTO order_contact_detail
              (
                order_contact_detail_id,
                order_header_id,
                contact_id,
                address_id,
                bfg_cnt_id,
                bfg_cnr_id,
                created_by,
                created_date,
                site_id
              )
              VALUES
              (
                order_contact_detail_id.nextval,
                cont_order_contact.new_value,
                contact_id.currval,
                address_id.currval,
                cont_order_contact.bfg_cnt_id,
                cont_order_contact.bfg_cnr_id,
                in_createdby,
                SYSDATE,
                cont_order_contact.site_id
              );
          END loop;
        END;

        --copy Port_IP_Routes with new order_line_item_id
        INSERT
        INTO port_ip_routes
          (
            port_ip_route_id,
            order_line_item_id,
            row_id,
            serial_number,
            subnet_address,
            subnet_mask,
            next_hop_ip_address,
            fallback_type
          )
          (SELECT port_ip_route_id.nextval,
              new_value,
              row_id,
              serial_number,
              subnet_address,
              subnet_mask,
              next_hop_ip_address,
              fallback_type
            FROM port_ip_routes
            INNER JOIN temp_quoteversion
            ON order_line_item_id = old_value
            AND column_name       = 'Order_Line_Item'
          );
        --copy order_site_Detail with new order_header_id
        INSERT
        INTO order_site_detail
          (
            order_site_detail_id,
            order_header_id,
            site_id,
            billing_id,
            SYSTEM,
            customer_required_date,
            active,
            created_by,
            created_date
          )
          (SELECT order_site_detail_id.nextval,
              new_value,
              site_id,
              billing_id,
              SYSTEM,
              customer_required_date,
              pkg_constants.con_activeflag_yes,
              in_createdby,
              SYSDATE
            FROM order_site_detail
            INNER JOIN temp_quoteversion
            ON order_header_id = old_value
            AND column_name    = 'Order_Header'
            WHERE active       = pkg_constants.con_activeflag_yes
            AND site_id        = v_siteid
          );
        --copy bcm_export with new quote_header_id
        INSERT
        INTO bcm_export
          (
            bcmexport_id,
            quote_header_id,
            site_status,
            site_id,
            site,
            country,
            city,
            resilience_type,
            primary_connection_status,
            primary_reach_in_nni_port,
            primary_reach_in_nni_part_name,
            primary_tarrif_zone,
            primary_gpop,
            primary_apop,
            primary_traffic_type,
            primary_access_technology,
            primary_n_e1_t1,
            primary_access_speed,
            primary_port_speed,
            primary_dsl_supplier_id,
            primary_dsl_supp_offer_name,
            primary_dsl_type,
            primary_dsl_contention,
            primary_dsl_access_upstream,
            primary_dsl_access_downstream,
            primary_dsl_port_speed,
            primary_dsl_local_loop_access,
            primary_hvpn_access_prod_type,
            primary_hvpn_access_service_id,
            primry_hvpn_port_dwnstrm_speed,
            primary_hvpn_port_upstrm_speed,
            primary_hvpn_local_loop_access,
            primary_total_af,
            primary_af_multimedia,
            primary_ef_speed,
            primary_de_speed,
            no_of_addi_vpn_prmry_port,
            no_of_bgp_prefixes_prmry_port,
            primary_cpe_program_name,
            primary_cpe_install_eup,
            primary_cpe_inst_eup_disct,
            primary_cpe_monthly_rental_eup,
            primary_cpe_mthly_rnt_eup_disc,
            primary_cpe_mont_maint_eup,
            primary_cpe_install_cost,
            primary_cpe_month_recurr_cost,
            primary_cpe_cost_currency,
            primary_cpe_pricing_status,
            primary_access_install_eup,
            primary_access_install_eup_dis,
            primary_access_mnthly_rnt_eup,
            prim_access_mnth_rnt_eup_disc,
            primary_access_install_cost,
            primary_access_monthly_cost,
            primary_access_cost_currency,
            primary_access_pricing_status,
            primary_port_install_eup,
            primary_port_install_eup_disc,
            primary_port_reconfig_one_time,
            primary_port_reconfig_ot_disc,
            primary_dsl_upgrd_dwngrd_ot,
            primary_dsl_up_dwn_grd_ot_disc,
            primary_port_mnthly_rntl_eup,
            prmry_port_mnth_rntl_eup_disc,
            primary_lla_install_eup,
            primary_lla_install_eup_disc,
            primary_lla_mnthl_rental_eup,
            primary_lla_mnth_rnt_eup_disc,
            primary_lla_install_cost,
            primary_lla_monthly_cost,
            primary_lla_cost_currency,
            primary_mvpn_one_time_eup,
            prim_mvpn_mnt_rnt_eup_perport,
            pri_mvpn_mntrnt_eup_perprt_dis,
            pri_mvp_mnt_rnt_eup_totadd_vpn,
            pri_mvpn_mntrnt_net_eup_addvpn,
            primary_bgp_prfix_onetime_eup,
            pprimary_bgp_prfix_ot_eup_disc,
            primary_bgp_prfx_mnt_rntl_eup,
            prim_bgp_prfx_mnt_rntl_eup_dis,
            secondry_connection_status,
            secondry_nni_port,
            scndry_reach_in_nni_prt_name,
            secondry_tarrif_zone,
            secondry_gpop,
            secondry_apop,
            secondry_traffic_type,
            secondry_access_type,
            secondry_n_e1_t1,
            secondry_access_speed,
            secondry_port_speed,
            secondry_dsl_supplier_id,
            secondry_dsl_supp_offr_name,
            secondry_dsl_type,
            secondry_dsl_contention,
            secondry_dsl_access_upstream,
            secondry_dsl_access_downstream,
            secondry_dsl_port_speed,
            secondry_dsl_local_loop_access,
            secondry_hvpn_access_prod_type,
            secnd_hvpn_access_service_id,
            secnd_hvpn_prt_dwnstrm_speed,
            secondry_hvpn_prt_upstrm_speed,
            secnd_hvpn_local_loop_access,
            secondry_total_af,
            secondry_af_multimedia,
            secondry_ef_speed,
            secondry_de_speed,
            no_of_addi_vpn_scndry_port,
            no_of_bgp_prefxes_scndry_port,
            secondry_cpe_program_name,
            secondry_cpe_install_eup,
            secondry_cpe_inst_eup_disct,
            secnd_cpe_monthly_rental_eup,
            secnd_cpe_mthly_rnt_eup_disc,
            secondry_cpe_mont_maint_eup,
            secondry_cpe_install_cost,
            secnd_cpe_month_recurr_cost,
            secondry_cpe_cost_currency,
            secondry_cpe_pricing_status,
            secondry_access_install_eup,
            secnd_access_install_eup_disc,
            secnd_access_mnthly_rent_eup,
            secn_access_mnth_rnt_eup_disc,
            secondry_access_install_cost,
            secondry_access_monthly_cost,
            secondry_access_cost_currency,
            secondry_access_pricing_status,
            secondry_port_install_eup,
            secondry_port_install_eup_disc,
            secndry_port_reconfig_one_time,
            secndry_port_reconfig_ot_disc,
            secondry_dsl_upgrd_dwngrd_ot,
            secnd_dsl_up_dwn_grd_ot_disc,
            secondry_port_mnthly_rntl_eup,
            secnd_port_mnth_rntl_eup_dis,
            secondry_lla_install_eup,
            secondry_lla_install_eup_disc,
            secondry_lla_mnthl_rental_eup,
            secondry_lla_mnth_rnt_eup_disc,
            secondry_lla_install_cost,
            secondry_lla_monthly_cost,
            secondry_lla_cost_currency,
            secondry_mvpn_one_time_eup,
            secondry_mvpn_one_time_net_eup,
            secd_mvpn_mnt_rnt_eup_perport,
            sec_mvpn_mntrnt_eup_perprt_dis,
            sec_mvp_mntrnt_eup_tot_add_vpn,
            sec_mvpn_mntrnt_net_eup_addvpn,
            secondry_bgp_prfix_onetime_eup,
            secondry_bgp_prfix_ot_eup_disc,
            secondry_bgp_prfx_mnt_rntl_eup,
            secd_bgp_prfx_mnt_rntl_eup_dis,
            change_management,
            change_management_discount,
            change_management_light_eup,
            change_mngment_light_eup_disc,
            proactive_ce_monitorings_eup,
            proactve_ce_monitrings_eup_dis,
            snmp_rdon_aces_prmy_cpeot_eup,
            snmp_rd_aces_prm_cpeot_eup_dis,
            ooh_trnup_mn_cpe_ot_eup,
            ooh_trnup_mn_cpe_ot_eup_dis,
            snmp_rdon_aces_secd_cpeot_eup,
            snmp_rd_aces_sec_cpeot_eup_dis,
            ooh_trnup_sec_cpe_ot_eup,
            ooh_trnup_sec_cpe_ot_eup_dis
          )
          (SELECT bcmexport_id.nextval,
              v_newqthdrid,
              site_status,
              site_id,
              site,
              country,
              city,
              resilience_type,
              primary_connection_status,
              primary_reach_in_nni_port,
              primary_reach_in_nni_part_name,
              primary_tarrif_zone,
              primary_gpop,
              primary_apop,
              primary_traffic_type,
              primary_access_technology,
              primary_n_e1_t1,
              primary_access_speed,
              primary_port_speed,
              primary_dsl_supplier_id,
              primary_dsl_supp_offer_name,
              primary_dsl_type,
              primary_dsl_contention,
              primary_dsl_access_upstream,
              primary_dsl_access_downstream,
              primary_dsl_port_speed,
              primary_dsl_local_loop_access,
              primary_hvpn_access_prod_type,
              primary_hvpn_access_service_id,
              primry_hvpn_port_dwnstrm_speed,
              primary_hvpn_port_upstrm_speed,
              primary_hvpn_local_loop_access,
              primary_total_af,
              primary_af_multimedia,
              primary_ef_speed,
              primary_de_speed,
              no_of_addi_vpn_prmry_port,
              no_of_bgp_prefixes_prmry_port,
              primary_cpe_program_name,
              primary_cpe_install_eup,
              primary_cpe_inst_eup_disct,
              primary_cpe_monthly_rental_eup,
              primary_cpe_mthly_rnt_eup_disc,
              primary_cpe_mont_maint_eup,
              primary_cpe_install_cost,
              primary_cpe_month_recurr_cost,
              primary_cpe_cost_currency,
              primary_cpe_pricing_status,
              primary_access_install_eup,
              primary_access_install_eup_dis,
              primary_access_mnthly_rnt_eup,
              prim_access_mnth_rnt_eup_disc,
              primary_access_install_cost,
              primary_access_monthly_cost,
              primary_access_cost_currency,
              primary_access_pricing_status,
              primary_port_install_eup,
              primary_port_install_eup_disc,
              primary_port_reconfig_one_time,
              primary_port_reconfig_ot_disc,
              primary_dsl_upgrd_dwngrd_ot,
              primary_dsl_up_dwn_grd_ot_disc,
              primary_port_mnthly_rntl_eup,
              prmry_port_mnth_rntl_eup_disc,
              primary_lla_install_eup,
              primary_lla_install_eup_disc,
              primary_lla_mnthl_rental_eup,
              primary_lla_mnth_rnt_eup_disc,
              primary_lla_install_cost,
              primary_lla_monthly_cost,
              primary_lla_cost_currency,
              primary_mvpn_one_time_eup,
              prim_mvpn_mnt_rnt_eup_perport,
              pri_mvpn_mntrnt_eup_perprt_dis,
              pri_mvp_mnt_rnt_eup_totadd_vpn,
              pri_mvpn_mntrnt_net_eup_addvpn,
              primary_bgp_prfix_onetime_eup,
              pprimary_bgp_prfix_ot_eup_disc,
              primary_bgp_prfx_mnt_rntl_eup,
              prim_bgp_prfx_mnt_rntl_eup_dis,
              secondry_connection_status,
              secondry_nni_port,
              scndry_reach_in_nni_prt_name,
              secondry_tarrif_zone,
              secondry_gpop,
              secondry_apop,
              secondry_traffic_type,
              secondry_access_type,
              secondry_n_e1_t1,
              secondry_access_speed,
              secondry_port_speed,
              secondry_dsl_supplier_id,
              secondry_dsl_supp_offr_name,
              secondry_dsl_type,
              secondry_dsl_contention,
              secondry_dsl_access_upstream,
              secondry_dsl_access_downstream,
              secondry_dsl_port_speed,
              secondry_dsl_local_loop_access,
              secondry_hvpn_access_prod_type,
              secnd_hvpn_access_service_id,
              secnd_hvpn_prt_dwnstrm_speed,
              secondry_hvpn_prt_upstrm_speed,
              secnd_hvpn_local_loop_access,
              secondry_total_af,
              secondry_af_multimedia,
              secondry_ef_speed,
              secondry_de_speed,
              no_of_addi_vpn_scndry_port,
              no_of_bgp_prefxes_scndry_port,
              secondry_cpe_program_name,
              secondry_cpe_install_eup,
              secondry_cpe_inst_eup_disct,
              secnd_cpe_monthly_rental_eup,
              secnd_cpe_mthly_rnt_eup_disc,
              secondry_cpe_mont_maint_eup,
              secondry_cpe_install_cost,
              secnd_cpe_month_recurr_cost,
              secondry_cpe_cost_currency,
              secondry_cpe_pricing_status,
              secondry_access_install_eup,
              secnd_access_install_eup_disc,
              secnd_access_mnthly_rent_eup,
              secn_access_mnth_rnt_eup_disc,
              secondry_access_install_cost,
              secondry_access_monthly_cost,
              secondry_access_cost_currency,
              secondry_access_pricing_status,
              secondry_port_install_eup,
              secondry_port_install_eup_disc,
              secndry_port_reconfig_one_time,
              secndry_port_reconfig_ot_disc,
              secondry_dsl_upgrd_dwngrd_ot,
              secnd_dsl_up_dwn_grd_ot_disc,
              secondry_port_mnthly_rntl_eup,
              secnd_port_mnth_rntl_eup_dis,
              secondry_lla_install_eup,
              secondry_lla_install_eup_disc,
              secondry_lla_mnthl_rental_eup,
              secondry_lla_mnth_rnt_eup_disc,
              secondry_lla_install_cost,
              secondry_lla_monthly_cost,
              secondry_lla_cost_currency,
              secondry_mvpn_one_time_eup,
              secondry_mvpn_one_time_net_eup,
              secd_mvpn_mnt_rnt_eup_perport,
              sec_mvpn_mntrnt_eup_perprt_dis,
              sec_mvp_mntrnt_eup_tot_add_vpn,
              sec_mvpn_mntrnt_net_eup_addvpn,
              secondry_bgp_prfix_onetime_eup,
              secondry_bgp_prfix_ot_eup_disc,
              secondry_bgp_prfx_mnt_rntl_eup,
              secd_bgp_prfx_mnt_rntl_eup_dis,
              change_management,
              change_management_discount,
              change_management_light_eup,
              change_mngment_light_eup_disc,
              proactive_ce_monitorings_eup,
              proactve_ce_monitrings_eup_dis,
              snmp_rdon_aces_prmy_cpeot_eup,
              snmp_rd_aces_prm_cpeot_eup_dis,
              ooh_trnup_mn_cpe_ot_eup,
              ooh_trnup_mn_cpe_ot_eup_dis,
              snmp_rdon_aces_secd_cpeot_eup,
              snmp_rd_aces_sec_cpeot_eup_dis,
              ooh_trnup_sec_cpe_ot_eup,
              ooh_trnup_sec_cpe_ot_eup_dis
            FROM bcm_export
            WHERE quote_header_id = v_quoteheaderid
            AND site_id           = v_siteid
          );
        IF upper
          ( v_cancled_status )   = 'CANCELLED' THEN
          UPDATE quote_header
          SET status            = 'Customer Approved'
          WHERE quote_header_id = v_newqthdrid;
        END IF;
         BEGIN
          IF upper (in_product_name) = pkg_constants.con_prod_bt_mobilexpress AND upper (nvl (v_main_site_flag, pkg_constants.con_activeflag_no)) = pkg_constants.con_activeflag_no THEN
            SELECT line_item_id.nextval
            INTO v_lineitemid
            FROM dual;
            INSERT
            INTO line_item
              (
                line_item_id,
                quote_header_id,
                VALUE,
                currency,
                aggregate_price,
                site_id,
                created_by,
                created_date,
                product_id,
                product_name,
                quantity,
                active,
                fallback_type,
                part_type,
                priced,
                non_std_flag,
                row_id,
                scode
              )
              (SELECT v_lineitemid,
                  v_newqthdrid,
                  VALUE,
                  currency,
                  aggregate_price,
                  v_siteid,
                  in_createdby,
                  SYSDATE,
                  product_id,
                  product_name,
                  quantity,
                  pkg_constants.con_activeflag_yes,
                  fallback_type,
                  part_type,
                  priced,
                  non_std_flag,
                  row_id,
                  scode
                FROM line_item
                WHERE quote_header_id    = v_quoteheaderid
                AND upper (product_name) = 'BT MOBILEXPRESS'
                AND active               = pkg_constants.con_activeflag_yes
                AND site_id             IS NOT NULL
              );
            INSERT
            INTO line_item_detail
              (
                line_item_detail_id,
                line_item_id,
                VALUE,
                active,
                created_by,
                created_date,
                attribute_mapping_id,
                quantity
              )
              (SELECT line_item_detail_id.nextval,
                  v_lineitemid,
                  VALUE,
                  'Y',
                  in_createdby,
                  SYSDATE,
                  attribute_mapping_id,
                  0
                FROM line_item_detail
                WHERE attribute_mapping_id IN (3008, 5105)
                AND active                  = 'Y'
                AND line_item_id            =
                  (SELECT line_item_id
                  FROM line_item
                  WHERE quote_header_id = v_quoteheaderid
                  AND active            = 'Y'
                  AND product_name      = 'BT MOBILEXPRESS'
                  )
              );
            FOR lin_det_id IN
            (SELECT DISTINCT upper (er.product_name) product_name
              FROM expedio_response er,
                attribute_mapping am
              WHERE quote_header_id        = v_quoteheaderid
              AND upper (er.product_name)  = upper (am.sqe_attribute)
              AND am.attribute_mapping_id IN (3006, 2886)
              AND er.product_id            = 1012437
              AND site_id                 IS NOT NULL
            )
            loop
              INSERT
              INTO line_item_detail
                (
                  line_item_detail_id,
                  line_item_id,
                  VALUE,
                  active,
                  created_by,
                  created_date,
                  attribute_mapping_id,
                  quantity
                )
                VALUES
                (
                  line_item_detail_id.nextval,
                  v_lineitemid,
                  'Yes',
                  pkg_constants.con_activeflag_yes,
                  in_createdby,
                  SYSDATE,
                  decode ( upper (lin_det_id.product_name), 'BT MOBILEXPRESS MOBILE IPSEC VPN', 2886,
                  /* COMMENTED BECAUSE THE ATTRIBUTE NAME IS CHANGED'BT MOBILEXPRESS IP SEC VPN (CISCO)',2886,*/
                  'BT MOBILEXPRESS MOBILE SSL VPN', 3006),
                  0 --'BT MOBILEXPRESS SSL VPN',3006) ,0
                );  -- R15 Change
            END loop;
            -------Coping the order line item information
            SELECT order_line_item_id.nextval
            INTO v_orderlineid
            FROM dual;
            SELECT order_header_id.currval INTO v_orderheader FROM dual;
            INSERT
            INTO order_line_item
              (
                order_line_item_id,
                order_header_id,
                product_id,
                product_name,
                site_id,
                active,
                created_by,
                created_date,
                fallback_type,
                quantity,
                row_id
              )
              VALUES
              (
                v_orderlineid,
                v_orderheader,
                1012437,
                'BT MOBILEXPRESS',
                v_siteid,
                'Y',
                in_createdby,
                SYSDATE,
                'primary',
                1,
                1
              );
            INSERT
            INTO order_line_item_detail
              (
                order_line_item_det_id,
                order_line_item_id,
                attribute_mapping_id,
                VALUE,
                active,
                created_by,
                created_date,
                quantity,
                row_id
              )
              VALUES
              (
                order_line_item_det_id.nextval,
                v_orderlineid,
                3007,
                'Yes',
                'Y',
                in_createdby,
                SYSDATE,
                0,
                1
              );
          END IF;
        END;
        COMMIT;
        out_newquoteheaderid := v_newqthdrid;
        out_status           := pkg_constants.con_status_success;
        out_expquoteid       := in_expquoteid;
        out_newexpversion    := v_expversion;
        --out_newexpversion := v_expversion;
      exception
      WHEN others THEN
        out_status := pkg_constants.con_status_failure;
        out_errmsg := sqlerrm;
        ROLLBACK;
      END;

   PROCEDURE spi_customer_prod_r7 (
      --added on 28/05/2010 for R5 by Bharathi
      in_quoteheaderid                IN       quote_header.quote_header_id%TYPE,
      in_prodname                     IN       product_selection.product_name%TYPE,
      in_bfgcustid                    IN       customer.bfg_customer_id%TYPE,
      in_monthly_revenue_commitment   IN       customer_product.monthly_revenue_commitment%TYPE,
      in_trigger_period               IN       customer_product.trigger_period%TYPE,
      in_s_codes                      IN       customer_product.s_codes%TYPE,
      in_ptp_price_book_version       IN       customer_product.ptp_price_book_version%TYPE,
      in_eup_price_book_version       IN       customer_product.eup_price_book_version%TYPE,
      in_order_submitted_flag         IN       customer_product.order_submitted_flag%TYPE,
      in_createdby                    IN       product_selection.created_by%TYPE,
      in_siteid                       IN       site.site_id%TYPE,
      in_bfg_bill_account_id          IN       customer_product.bfg_bill_account_id%TYPE,
      in_prd_mnth_rev_commit          IN       customer_product.proposed_mnth_rev_commitment%TYPE,
      in_productid                IN       product_selection.product_id%TYPE,
      out_status                      OUT      NUMBER,
      out_errmsg                      OUT      VARCHAR2
   )
   AS
      v_count   NUMBER := 0;
   BEGIN
      SELECT COUNT (*)
        INTO v_count
        FROM customer_product
       WHERE quote_header_id = in_quoteheaderid AND product_name = in_prodname;

      IF v_count = 0
      THEN
         INSERT INTO customer_product
                     (quote_header_id, product_name, customer_id,
                      monthly_revenue_commitment,
                      proposed_mnth_rev_commitment, trigger_period, s_codes,
                      ptp_price_book_version, eup_price_book_version,
                      order_submitted_flag, site_id,
                      bfg_bill_account_id, created_by, created_date,
                      product_id,
                      customer_product_id     -- Added by Sujana on 16/11/2010
                     )
              VALUES (in_quoteheaderid, in_prodname, in_bfgcustid,
                      in_monthly_revenue_commitment,
                      in_prd_mnth_rev_commit, in_trigger_period, in_s_codes,
                      in_ptp_price_book_version, in_eup_price_book_version,
                      in_order_submitted_flag, in_siteid,
                      in_bfg_bill_account_id, in_createdby, SYSDATE,
                      in_productid,
                      customer_product_id.NEXTVAL
                     -- Added by Sujana on 16/11/2010
                     );
      ELSE
         UPDATE customer_product
            SET monthly_revenue_commitment = in_monthly_revenue_commitment,
                proposed_mnth_rev_commitment = in_prd_mnth_rev_commit,
                trigger_period = in_trigger_period,
                ptp_price_book_version = in_ptp_price_book_version,
                eup_price_book_version = in_eup_price_book_version,
                order_submitted_flag = in_order_submitted_flag
          WHERE quote_header_id = in_quoteheaderid
            AND product_name = in_prodname;
      END IF;

        out_status := pkg_constants.con_status_success;
        out_errmsg := 'Saved or updated customer product';
   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         out_errmsg := SQLERRM;
   END spi_customer_prod_r7;

   PROCEDURE spu_customer_vpn_r7 (
      in_btsub         IN       customer.bt_subsidiary_id%TYPE,
      in_bfgcustid     IN       customer.bfg_customer_id%TYPE,
      in_bfgcustname   IN       customer.bfg_customer_name%TYPE,
      in_bfgaccno      IN       billing.bfg_bill_account_id%TYPE,
      in_bfgcurrency   IN       billing.currency%TYPE,
      in_vpndet        IN       VARCHAR2,
      out_custid       OUT      customer.customer_id%TYPE,
      out_status       OUT      NUMBER,
      out_errmsg       OUT      VARCHAR2
   )
   AS
      v_rowcnt            NUMBER;
      v_count             NUMBER;
      v_vfrnm             vpn.vpn_friendly_name%TYPE;
      v_vvpn              vpn.vpn_index%TYPE;
      v_vct               vpn.connection_type%TYPE;
      v_vcm               vpn.connectivity_mode%TYPE;
      v_vmss              vpn.mss_id%TYPE;
      v_cid               customer.customer_id%TYPE;
      v_extranetname      vpn.extranet_name%TYPE;
      v_vpn_count         NUMBER;
      v_source            vpn.SOURCE%TYPE;
      v_accountid         ACCOUNT.account_id%TYPE;
      v_shared_access_val vpn.shared_access_val%TYPE;

      CURSOR c_vpndet
      IS
         SELECT *
           FROM TABLE
                     (CAST (pkg_common.fn_splitdata (in_vpndet, '|') AS varchar2_ntt
                           )
                     );
   BEGIN
      SELECT customer_id
        INTO v_cid
        FROM customer
       WHERE bfg_customer_id = in_bfgcustid;

      IF (in_vpndet != '-1')
      THEN
         FOR v_rowcnt IN c_vpndet
         LOOP
            SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                           1,
                           INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 1) - 1
                          )
              INTO v_vfrnm
              FROM DUAL;

            SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                           INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 1) + 1,
                           (  INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 2)
                            - INSTR (v_rowcnt.COLUMN_VALUE, '~', 1)
                            - 1
                           )
                          )
              INTO v_vct
              FROM DUAL;

            SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                           INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 2) + 1,
                           (  INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 3)
                            - INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 2)
                            - 1
                           )
                          )
              INTO v_vvpn
              FROM DUAL;

            SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                           INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 3) + 1,
                           (  INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 4)
                            - INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 3)
                            - 1
                           )
                          )
              INTO v_vmss
              FROM DUAL;

            SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                           INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 4) + 1,
                           (  INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 5)
                            - INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 4)
                            - 1
                           )
                          )
              INTO v_vcm
              FROM DUAL;

            SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                           INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 5) + 1,
                           (  INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 6)
                            - INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 5)
                            - 1
                           )
                          )
              INTO v_extranetname
              FROM DUAL;

              SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                           INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 6) + 1,
                           (  INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 7)
                            - INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 6)
                            - 1
                           )
                          )
              INTO v_source
              FROM DUAL;

            SELECT (SUBSTR (v_rowcnt.COLUMN_VALUE,
                            INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 7) + 1,
                            LENGTH (v_rowcnt.COLUMN_VALUE) - 1
                           )
                   )
              INTO v_shared_access_val
              FROM DUAL;

            --r5 changes
            SELECT COUNT (*)
              INTO v_vpn_count
              FROM vpn
             WHERE mss_id = v_vmss AND customer_id = v_cid;

            IF (v_vpn_count = 0)
            THEN
               INSERT INTO vpn
                           (vpn_id, customer_id, vpn_friendly_name,
                            connection_type, connectivity_mode, mss_id,
                            vpn_index, created_date, extranet_name, SOURCE,
                            shared_access_val
                           )
                    VALUES (vpn_id.NEXTVAL, v_cid, v_vfrnm,
                            v_vct, v_vcm, v_vmss,
                            v_vvpn, SYSDATE, v_extranetname, v_source,
                            v_shared_access_val
                           );
           ELSE
           UPDATE vpn
           SET vpn_friendly_name = v_vfrnm,
               connection_type   = v_vct,
               connectivity_mode = v_vcm,
               mss_id            = v_vmss,
               extranet_name     = v_extranetname,
               SOURCE            = v_source,
               shared_access_val = v_shared_access_val,
               modified_date     = SYSDATE
                WHERE customer_id = v_cid AND vpn_index = v_vvpn;
            END IF;
         END LOOP;
      END IF;

      INSERT INTO ACCOUNT
                  (account_id, account_number, created_date
                  )
           VALUES (account_id.NEXTVAL, in_bfgaccno, SYSDATE
                  )
        RETURNING account_id
             INTO v_accountid;

      SELECT COUNT (*)
        INTO v_count
        FROM billing
       WHERE customer_id = v_cid AND bfg_bill_account_id = in_bfgaccno;

      IF (v_count = 0)
      THEN
         INSERT INTO billing
                     (billing_id, customer_id, account_id,
                      currency, created_date, bfg_bill_account_id
                     )
              VALUES (billing_id.NEXTVAL, v_cid, v_accountid,
                      in_bfgcurrency, SYSDATE, in_bfgaccno
                     );
      END IF;

       --added by SQEDB on 22 oct
        SELECT COUNT (*)
        INTO v_count
        FROM billing
       WHERE customer_id = v_cid AND bfg_bill_account_id IS NULL;

      IF (v_count > 0)
      THEN
         UPDATE billing
            SET bfg_bill_account_id = in_bfgaccno,
                                account_id = v_accountid,
                                currency  = in_bfgcurrency
          WHERE customer_id = v_cid;
      END IF;

      --ends here
      --COMMIT;
      out_custid := v_cid;
      out_status := pkg_constants.con_status_success;
   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         out_errmsg := SQLERRM;
         ROLLBACK;
   END;

  PROCEDURE spu_customer_prod_r7 (
      in_quoteheaderid                IN       quote_header.quote_header_id%TYPE,
      in_prodname                     IN       product_selection.product_name%TYPE,
      in_monthly_revenue_commitment   IN       customer_product.monthly_revenue_commitment%TYPE,
      in_trigger_period               IN       customer_product.trigger_period%TYPE,
      in_createdby                    IN       product_selection.created_by%TYPE,
      in_prd_mnth_rev_commit          IN       customer_product.proposed_mnth_rev_commitment%TYPE,
      out_status                      OUT      NUMBER,
      out_errmsg                      OUT      VARCHAR2
   )
   AS
      v_count   NUMBER := 0;
   BEGIN
      SELECT COUNT (*)
        INTO v_count
        FROM customer_product
       WHERE quote_header_id = in_quoteheaderid AND product_name = in_prodname;

      IF v_count > 0
      THEN
         UPDATE customer_product
            SET monthly_revenue_commitment = in_monthly_revenue_commitment,
                proposed_mnth_rev_commitment = in_prd_mnth_rev_commit,
                trigger_period = in_trigger_period
          WHERE quote_header_id = in_quoteheaderid
            AND product_name = in_prodname;

         UPDATE exp_pricebookversion
     SET monthly_commitment_revenue = in_monthly_revenue_commitment,
                trigger_months = in_trigger_period
          WHERE customer_id IN (
                   SELECT c.bfg_customer_id
                     FROM quote q, quote_header qh, customer c
                WHERE quote_header_id = in_quoteheaderid
                AND qh.quote_id = q.quote_id
                AND c.customer_id =q.customer_id)
            AND UPPER(product_name) = UPPER(in_prodname);

      END IF;

         out_status := pkg_constants.con_status_success;
         out_errmsg := 'Saved or updated customer product';
   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         out_errmsg := SQLERRM;
         ROLLBACK;
   END spu_customer_prod_r7;


PROCEDURE         SPU_ORDER_TOBE_TO_ASIS
(
   IN_QUOTEID           IN     QUOTE_HEADER.QUOTE_ID%TYPE,
   IN_QUOTEHEADERID     IN     QUOTE_HEADER.QUOTE_HEADER_ID%TYPE,
   IN_SITEID            IN     SITE.SITE_ID%TYPE,---site_detials_tab,
   IN_CREATEDBY         IN     QUOTE_SITE_SERVICE.CREATED_BY%TYPE,
   OUT_STATUS           OUT    NUMBER ,
   OUT_ERRMSG           OUT    VARCHAR2)
AS
/******************************************************************************
   Usage Product Name:MX Products
   PURPOSE: Add the product to quote site service

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0         22/8/00        Suman                            1.0 Add History Comment for  this procedure
  ******************************************************************************/
V_SITE_ID SITE.SITE_ID%TYPE;
v_sql_code     NUMBER;
V_SQL_ERRM     VARCHAR2(150);
v_error_location         NUMBER(10) ;

----Order Removing data Check
      CURSOR cur_orderas_site
      IS
         SELECT DISTINCT olias.site_id, olias.product_name
                    FROM order_line_item_as_is olias
                   WHERE olias.quote_header_id = in_quoteheaderid
                     AND olias.active = pkg_constants.con_activeflag_yes
                     AND UPPER (olias.product_name) =UPPER ('BT MobileXpress Mobile SSL VPN')
                     AND olias.site_id NOT IN (
                            SELECT DISTINCT site_id
                                       FROM line_item li
                                      WHERE li.quote_header_id =in_quoteheaderid
                                        AND li.active =pkg_constants.con_activeflag_yes
                                        --AND upper(LI.PRODUCT_NAME)     =upper('BT MobileXpress SSL VPN')
                                        AND UPPER (li.product_name) =UPPER('BT MobileXpress Mobile SSL VPN'));

      CURSOR cur_orderas_site_ipsec
      IS
         SELECT DISTINCT olias.site_id, olias.product_name
                    FROM order_line_item_as_is olias
                   WHERE olias.quote_header_id = in_quoteheaderid
                     AND olias.active = pkg_constants.con_activeflag_yes
                     AND UPPER (olias.product_name) =UPPER ('BT MobileXpress Mobile IPsec VPN')
                     AND olias.site_id NOT IN (
                            SELECT DISTINCT site_id
                                       FROM line_item li
                                      WHERE li.quote_header_id =in_quoteheaderid
                                        AND li.active =pkg_constants.con_activeflag_yes
                                        AND UPPER (li.product_name) =UPPER('BT MobileXpress Mobile IPsec VPN'));

----Quote Insert Data check
      CURSOR cur_quote_site
      IS
         SELECT DISTINCT li.site_id, li.product_name
                    FROM line_item li
                   WHERE li.quote_header_id = in_quoteheaderid
                     AND li.active = pkg_constants.con_activeflag_yes
                     --AND upper(LI.PRODUCT_NAME)     =upper('BT MobileXpress SSL VPN')
                     AND UPPER (li.product_name) =
                                      UPPER ('BT MobileXpress Mobile SSL VPN')
                     AND li.site_id NOT IN (
                            SELECT DISTINCT site_id
                                       FROM order_line_item_as_is olias
                                      WHERE olias.quote_header_id =
                                                              in_quoteheaderid
                                        AND olias.active =
                                               pkg_constants.con_activeflag_yes
                                        --AND upper(OLIAS.PRODUCT_NAME)     =upper('BT MobileXpress SSL VPN')
                                        AND UPPER (olias.product_name) =
                                               UPPER
                                                  ('BT MobileXpress Mobile SSL VPN'
                                                  ));

      CURSOR cur_quote_site_ipsec
      IS
         SELECT DISTINCT li.site_id, li.product_name
                    FROM line_item li
                   WHERE li.quote_header_id = in_quoteheaderid
                     AND li.active = pkg_constants.con_activeflag_yes
                     AND UPPER (li.product_name) =
                                    UPPER ('BT MobileXpress Mobile IPsec VPN')
                     AND li.site_id NOT IN (
                            SELECT DISTINCT site_id
                                       FROM order_line_item_as_is olias
                                      WHERE olias.quote_header_id =
                                                              in_quoteheaderid
                                        AND olias.active =
                                               pkg_constants.con_activeflag_yes
                                        AND UPPER (olias.product_name) =
                                               UPPER
                                                  ('BT MobileXpress Mobile IPsec VPN'
                                                  ));

      v_order_site_id           site.site_id%TYPE;
      v_quote_site_id           site.site_id%TYPE;
      v_order_product_name      line_item.product_name%TYPE;
      v_quote_site_id           line_item.product_name%TYPE;
      v_quote_site_service_id   quote_site_service.quote_site_service_id%TYPE;
      v_lineitemid              line_item.line_item_id%TYPE;
BEGIN

 BEGIN
  SELECT quote_site_service_id
           INTO v_quote_site_service_id
  FROM quote_site_service qss
  WHERE qss.quote_header_id          = in_quoteheaderid
            AND qss.site_id = in_siteid
            AND UPPER (service_name) = UPPER ('BT MOBILEXPRESS');
EXCEPTION
WHEN no_data_found THEN
  select quote_site_service_id.nextval
      into v_quote_site_service_id from dual;

  INSERT
  INTO quote_site_service
    (
      quote_site_service_id,quote_header_id,
      site_id,created_by,created_date,service_name
    )
    VALUES
    (
      v_quote_site_service_id,in_quoteheaderid,
      in_siteid,in_createdby,SYSDATE,'BT MOBILEXPRESS'
    );
WHEN OTHERS THEN
  out_status := 0;
  return;
END;


BEGIN
OPEN CUR_ORDERAS_SITE;
LOOP
 FETCH CUR_ORDERAS_SITE INTO V_ORDER_SITE_ID,V_ORDER_PRODUCT_NAME;
 EXIT WHEN CUR_ORDERAS_SITE%NOTFOUND;
            UPDATE ORDER_LINE_ITEM_AS_IS SET
                    TOBE_MODIFIED=PKG_CONSTANTS.CON_ACTIVEFLAG_NO
                    WHERE QUOTE_HEADER_ID=IN_QUOTEHEADERID AND SITE_ID=V_ORDER_SITE_ID
                    AND   UPPER(PRODUCT_NAME)  =UPPER(V_ORDER_PRODUCT_NAME)
                    AND   ACTIVE        =PKG_CONSTANTS.CON_ACTIVEFLAG_YES;
END LOOP;
CLOSE CUR_ORDERAS_SITE;
END;

BEGIN
OPEN CUR_QUOTE_SITE_IPSEC;
LOOP
 FETCH CUR_QUOTE_SITE_IPSEC INTO V_ORDER_SITE_ID,V_ORDER_PRODUCT_NAME;
 EXIT WHEN CUR_QUOTE_SITE_IPSEC%NOTFOUND;
            UPDATE ORDER_LINE_ITEM_AS_IS SET
                    TOBE_MODIFIED=PKG_CONSTANTS.CON_ACTIVEFLAG_NO
                    WHERE QUOTE_HEADER_ID=IN_QUOTEHEADERID AND SITE_ID=V_ORDER_SITE_ID
                    AND   UPPER(PRODUCT_NAME)  =UPPER(V_ORDER_PRODUCT_NAME)
                    AND   ACTIVE        =PKG_CONSTANTS.CON_ACTIVEFLAG_YES;
END LOOP;
CLOSE CUR_QUOTE_SITE_IPSEC;
END;

IF  V_QUOTE_SITE_SERVICE_ID IS NOT NULL THEN
BEGIN
OPEN CUR_QUOTE_SITE;
LOOP
 FETCH CUR_QUOTE_SITE INTO V_ORDER_SITE_ID,V_ORDER_PRODUCT_NAME;
 EXIT WHEN CUR_QUOTE_SITE%NOTFOUND;
           BEGIN
           INSERT INTO ORDER_LINE_ITEM_AS_IS
                       (ORDER_LINE_ITEM_ID,
                        QUOTE_HEADER_ID, SITE_ID, PRODUCT_ID,
                        PRODUCT_NAME, FALLBACK_TYPE, QUANTITY,
                        ACTIVE,
                        created_by, created_date, row_id,
                        QUOTE_SITE_SERVICE_ID,TOBE_MODIFIED
                       )
                VALUES (ORDER_LINE_ITEM_ID.NEXTVAL,
                        IN_QUOTEHEADERID, V_ORDER_SITE_ID, 1012437,
                        V_ORDER_PRODUCT_NAME, 'primary', DEFAULT,
                        PKG_CONSTANTS.CON_ACTIVEFLAG_YES,
                        in_createdby, sysdate, 0,
                        V_QUOTE_SITE_SERVICE_ID,'Y'
                       )
             RETURNING ORDER_LINE_ITEM_ID
                  INTO V_LINEITEMID;

          INSERT INTO ORDER_LINE_ITEM_DETAIL_AS_IS
                             (ORDER_LINE_ITEM_DET_ID,
                              ORDER_LINE_ITEM_ID, ATTRIBUTE_MAPPING_ID,
                              VALUE,
                              ACTIVE,
                              created_by, created_date, quantity,
                              ROW_ID
                             )
                      VALUES (ORDER_LINE_ITEM_DET_ID.NEXTVAL,
                              V_LINEITEMID, 2873,
                              '-',
                              PKG_CONSTANTS.CON_ACTIVEFLAG_YES,
                              IN_CREATEDBY, SYSDATE, 0,
                              0
                              );
END;
END LOOP;
CLOSE CUR_QUOTE_SITE;
END;

BEGIN
OPEN CUR_QUOTE_SITE_IPSEC;
LOOP
 FETCH CUR_QUOTE_SITE_IPSEC INTO V_ORDER_SITE_ID,V_ORDER_PRODUCT_NAME;
 EXIT WHEN CUR_QUOTE_SITE_IPSEC%NOTFOUND;
           BEGIN
           INSERT INTO ORDER_LINE_ITEM_AS_IS
                       (ORDER_LINE_ITEM_ID,
                        QUOTE_HEADER_ID, SITE_ID, PRODUCT_ID,
                        PRODUCT_NAME, FALLBACK_TYPE, QUANTITY,
                        ACTIVE,
                        created_by, created_date, row_id,
                        QUOTE_SITE_SERVICE_ID,TOBE_MODIFIED
                       )
                VALUES (ORDER_LINE_ITEM_ID.NEXTVAL,
                        IN_QUOTEHEADERID, V_ORDER_SITE_ID, 1012437,
                        V_ORDER_PRODUCT_NAME, 'primary', DEFAULT,
                        PKG_CONSTANTS.CON_ACTIVEFLAG_YES,
                        in_createdby, sysdate, 0,
                        V_QUOTE_SITE_SERVICE_ID,'Y'
                       )
             RETURNING ORDER_LINE_ITEM_ID
                  INTO V_LINEITEMID;

          INSERT INTO ORDER_LINE_ITEM_DETAIL_AS_IS
                             (ORDER_LINE_ITEM_DET_ID,
                              ORDER_LINE_ITEM_ID, ATTRIBUTE_MAPPING_ID,
                              VALUE,
                              ACTIVE,
                              created_by, created_date, quantity,
                              ROW_ID
                             )
                      VALUES (ORDER_LINE_ITEM_DET_ID.NEXTVAL,
                              V_LINEITEMID, 2873,
                              '-',
                              PKG_CONSTANTS.CON_ACTIVEFLAG_YES,
                              IN_CREATEDBY, SYSDATE, 0,
                              0
                              );
END;
END LOOP;
CLOSE CUR_QUOTE_SITE_IPSEC;
END;

out_status :=1;
END IF;
EXCEPTION
      WHEN others THEN
            out_status := pkg_constants.con_status_failure;
            out_errmsg := substr('At '||v_error_location||'-'||sqlerrm,1,150);
            v_sql_code := sqlcode;
            pkg_common.spi_error_log(
                                  in_quoteid,
                                  in_quoteheaderid,
                                  v_error_location,
                                  NULL,
                                  NULL,
                                  'SPU_ORDER_TOBE_TO_ASIS',
                                  v_sql_code,
                                  OUT_ERRMSG
                                 );
END SPU_ORDER_TOBE_TO_ASIS;

END pkg_quote_reeng;
/


CREATE OR REPLACE PACKAGE BODY pkg_site
AS
   PROCEDURE spi_site (
      --modified on 30/12/2009 to insert technical contact details
      in_customerid                 IN       customer.customer_id%TYPE,
      in_quoteheaderid              IN       quote_header.quote_header_id%TYPE,
      in_sitename                   IN       site.NAME%TYPE,
      in_customer_reportsitename    IN       site.customer_report_site_name%TYPE,
      in_buildingno                 IN       address.building_number%TYPE,
      in_addressline1               IN       address.address_line1%TYPE,
      in_city                       IN       address.city%TYPE,
      in_state                      IN       address.state%TYPE,
      in_state_code                 IN       address.state_code%TYPE,
      in_countryid                  IN       country.country_id%TYPE,
      in_postzipcode                IN       address.post_zip_code%TYPE,
      in_telephoneareacode          IN       site.telephone_area_code%TYPE,
      --added for R1
      in_county                     IN       address.county%TYPE,
      -- ##### Change for 904 - B-End validation  begin
      in_local_business_cust_name   IN       site.local_business_customer_name%TYPE,
      -- ##### Change for 904 - B-End validation  end
      in_additionalsite             IN       VARCHAR2,          --for address
      in_pricontact                 IN       VARCHAR2,  --for primary contact
      in_seccontact                 IN       VARCHAR2,
      --for secondary contact
      in_techcontact                IN       VARCHAR2,
      --for technical contact
      in_servassurcontact           IN       VARCHAR2,
      --for service assurance contact details
      in_servicedlvcontact          IN       VARCHAR2,
      --for service delivery contact details
      in_bfgsiteid                  IN       site.bfg_site_id%TYPE,
      -- Ghucs, Added new parameter in_bfgsiteid
      in_bfgsitename                IN       site.bfg_site_name%TYPE,
                                 -- Ghucs, Added new parameter in_bfgsitename
      -- ##### Change for 904 - Call Anywhere  begin
      in_kcidetails                 IN       VARCHAR2,
                                        -- for Keep Customer Informed details
      -- ##### Change for 904 - Call Anywhere  end
      /*line_of_site_billing added on 17/06/2010*/
      in_lineofsitebilling          IN       site.line_of_site_billing%TYPE,
      in_mainsiteflag               IN       site.main_site_flag%TYPE,
      ---Added by SRK on 07JUL2010
      in_createdby                  IN       site.created_by%TYPE,
      out_siteid                    OUT      site.site_id%TYPE,
      out_status                    OUT      NUMBER,
      out_errmsg                    OUT      VARCHAR2
   )
   AS
      v_addrline2              address.address_line2%TYPE;
      v_notes                  site.notes%TYPE;
      v_floor                  address.FLOOR%TYPE;
      v_room                   address.room%TYPE;
      v_classicsiteid          site.classic_site_id%TYPE;
      v_prifirstname           contact.first_name%TYPE;
      v_prilastname            contact.last_name%TYPE;
      v_prijobtitle            contact.job_title%TYPE;
      v_priemail               contact.email%TYPE;
      v_priphone               contact.phone_number%TYPE;
      v_primobile              contact.mobile_number%TYPE;
      v_prifax                 contact.fax%TYPE;
      v_secfirstname           contact.first_name%TYPE;
      v_seclastname            contact.last_name%TYPE;
      v_secjobtitle            contact.job_title%TYPE;
      v_secemail               contact.email%TYPE;
      v_secphone               contact.phone_number%TYPE;
      v_secmobile              contact.mobile_number%TYPE;
      v_secfax                 contact.fax%TYPE;
      v_billingid              site.billing_id%TYPE;
      v_row                    VARCHAR2 (8000);
      v_rowcount               NUMBER;
      v_addressid              address.address_id%TYPE;
      v_pricontactid           site.primary_contact_id%TYPE;
      v_seccontactid           site.secondary_contact_id%TYPE;
      v_siteid                 site.site_id%TYPE;
      v_fldcnt                 NUMBER;
      v_kgiflag                NUMBER                           := 1;
      v_kgitype                VARCHAR2 (100);
      --v_kgitype         kgi_country.kgi_type%TYPE;
      v_techfirstname          contact.first_name%TYPE;
      v_techlastname           contact.last_name%TYPE;
      v_techjobtitle           contact.job_title%TYPE;
      v_techemail              contact.email%TYPE;
      v_techphone              contact.phone_number%TYPE;
      v_techmobile             contact.mobile_number%TYPE;
      v_techfax                contact.fax%TYPE;
      v_techcontactid          contact.contact_id%TYPE;
      v_countryname            country.NAME%TYPE;
      --below variable for service assurance and service delivery addresses.
      v_tempfirstname          contact.first_name%TYPE;
      v_templastname           contact.last_name%TYPE;
      v_tempjobtitle           contact.job_title%TYPE;
      v_tempemail              contact.email%TYPE;
      v_tempphone              contact.phone_number%TYPE;
      v_tempmobile             contact.mobile_number%TYPE;
      v_tempfax                contact.fax%TYPE;
      v_tempcontactid          contact.contact_id%TYPE;
      v_ppsr_notes             site.ppsr_note%TYPE;
      v_cntry_spec_notes_req   site.cntry_spec_notes_req%TYPE;
      v_url                    site.url%TYPE;
      /****R3 */
      v_pstn_number            contact.pstn_number%TYPE;
      v_primary_notes          contact.primary_notes%TYPE;
   BEGIN
--      SET TRANSACTION READ WRITE NAME 'site_page';

      --modified for kgi_check from ppsr
      SELECT NAME
        INTO v_countryname
        FROM country
       WHERE country_id = in_countryid;

--      SELECT COUNT (*)
--        INTO v_rowcount
--        FROM kgi_country
--       WHERE country_id = in_countryid;

      --kgi check from PPSR
      SELECT COUNT (*)
        INTO v_rowcount
        FROM ppsr_owner.ppsr_kgi_data_v@dblink_ppsr
       WHERE UPPER (REPLACE ("Country", '''')) =
                                         UPPER (REPLACE (v_countryname, ''''));

      v_row := in_additionalsite;

--kgi check
      IF (v_rowcount != 0)
      THEN
         BEGIN
--            SELECT kgi_type
--              INTO v_kgitype
--              FROM kgi_country
--             WHERE country_id = in_countryid;

            --kgi check from PPSR
            SELECT DISTINCT "Kgi Type"
                       INTO v_kgitype
                       FROM ppsr_owner.ppsr_kgi_data_v@dblink_ppsr
                      WHERE UPPER (REPLACE ("Country", '''')) =
                                         UPPER (REPLACE (v_countryname, ''''));

            IF (UPPER (v_kgitype) LIKE '%CITY%')
            THEN
               BEGIN
                  IF (in_city IS NULL)
                  THEN
                     v_kgiflag := 0;
                  END IF;
               END;
            END IF;

            IF (UPPER (v_kgitype) LIKE '%POST CODE%')
            THEN
               BEGIN
                  IF (in_postzipcode IS NULL)
                  THEN
                     v_kgiflag := 0;
                  END IF;
               END;
            END IF;

            IF (   UPPER (v_kgitype) LIKE '%STREET NAME%'
                OR UPPER (v_kgitype) LIKE '%STREET NUMBER%'
               )
            THEN
               BEGIN
                  IF (in_addressline1 IS NULL)
                  THEN
                     v_kgiflag := 0;
                  END IF;
               END;
            END IF;

            IF (UPPER (v_kgitype) LIKE '%TELEPHONE AREA CODE%')
            THEN
               BEGIN
                  IF (in_telephoneareacode IS NULL)
                  THEN
                     v_kgiflag := 0;
                  END IF;
               END;
            END IF;

            IF (UPPER (v_kgitype) LIKE '%DISTRICT%')
            THEN
               BEGIN
                  v_addrline2 :=
                     SUBSTR (v_row,
                             INSTR (v_row, '|', 1, 2) + 1,
                               (INSTR (v_row, '|', 1, 3) - 1
                               )
                             - (INSTR (v_row, '|', 1, 2))
                            );

                  IF (v_addrline2 IS NULL)
                  THEN
                     v_kgiflag := 0;
                  END IF;
               END;
            END IF;
         END;
      END IF;

       IF (v_kgiflag = 0)
      THEN
         BEGIN
            out_status := pkg_constants.con_status_failure;
            out_errmsg := 'KGI Error: ' || v_kgitype || ' is mandatory';
         END;
      ELSE
         BEGIN
              IF in_bfgsiteid IS NOT NULL THEN

             SELECT COUNT(1)
               INTO v_rowcount
               FROM site
              WHERE trim(bfg_site_id) = trim(in_bfgsiteid)
                AND customer_id = in_customerid;

           END IF;

            IF (v_rowcount = 0)
            THEN
               BEGIN
                  SELECT address_id.NEXTVAL
                    INTO v_addressid
                    FROM DUAL;

                  INSERT INTO address
                              (address_id, building_number, address_line1,
                               city, state, country_id,
                               post_zip_code, created_by, created_date,
                               state_code, county
                              )
                       VALUES (v_addressid, in_buildingno, in_addressline1,
                               in_city, in_state, in_countryid,
                               in_postzipcode, in_createdby, SYSDATE (),
                               in_state_code, in_county
                              );

                  SELECT site_id.NEXTVAL
                    INTO v_siteid
                    FROM DUAL;

                  -- ##### Change for 904 - B-End validation  begin
                  INSERT INTO site
                              (site_id, NAME,
                               customer_report_site_name, address_id,
                               telephone_area_code, customer_id,
                               created_by, created_date,
                               local_business_customer_name, bfg_site_id,
                               bfg_site_name, line_of_site_billing,
                               main_site_flag
                              )
                       VALUES (v_siteid, in_sitename,
                               in_customer_reportsitename, v_addressid,
                               in_telephoneareacode, in_customerid,
                               in_createdby, SYSDATE (),
                               in_local_business_cust_name, in_bfgsiteid,
                               in_bfgsitename, in_lineofsitebilling,
                               in_mainsiteflag
                              );

                  -- ##### Change for 904 - B-End validation  end

                  --quote id is null for cmlite
                  IF (in_quoteheaderid IS NOT NULL)
                  THEN
                     BEGIN
                        INSERT INTO quote_site
                                    (quote_site_id, site_id,
                                     quote_header_id,
                                     active,
                                     created_by, created_date
                                    )
                             VALUES (quote_site_id.NEXTVAL, v_siteid,
                                     in_quoteheaderid,
                                     pkg_constants.con_activeflag_yes,
                                     in_createdby, SYSDATE
                                    );
                     END;
                  END IF;

                  --check number of parameters modified on 30/12/2009
                  IF (in_additionalsite IS NOT NULL)
                  THEN
                     BEGIN
                        v_row := in_additionalsite;

                        SELECT pkg_common.fn_countfields (v_row, '|')
                          INTO v_fldcnt
                          FROM DUAL;

                        IF (v_fldcnt = 8)
                        THEN
                           BEGIN
                              v_floor :=
                                 SUBSTR (v_row,
                                         1,
                                         INSTR (v_row, '|', 1, 1) - 1
                                        );
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_room :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_addrline2 :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_classicsiteid :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_billingid :=
                                 TO_NUMBER (SUBSTR (v_row,
                                                    1,
                                                      INSTR (v_row, '|', 1, 1)
                                                    - 1
                                                   )
                                           );
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              /* Sprint2 Clean order managment SQE904 Starts */
                              v_notes :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_ppsr_notes :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_cntry_spec_notes_req :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_url := v_row;

/* Sprint2 Clean order managment SQE904  end*/
                              UPDATE address
                                 SET FLOOR = v_floor,
                                     room = v_room,
                                     address_line2 = v_addrline2
                               WHERE address_id = v_addressid;

                              UPDATE site
                                 SET classic_site_id = v_classicsiteid,
                                     billing_id = v_billingid,
                                     notes = v_notes,
                                     ppsr_note = v_ppsr_notes,
                                     cntry_spec_notes_req =
                                                        v_cntry_spec_notes_req,
                                     url = v_url
                               WHERE site_id = v_siteid;
                           END;
                        ELSE
                           BEGIN
                              out_errmsg := 'Invalid Additional Site details';
                           END;
                        END IF;                                   --end fldcnt
                     END;
                  END IF;                       --end additional site not null

                  v_row := NULL;

                  --check primary contact details added on 30/12/2009
                  IF (in_pricontact IS NOT NULL)
                  THEN
                     BEGIN
                        v_row := in_pricontact;

                        SELECT pkg_common.fn_countfields (v_row, '|')
                          INTO v_fldcnt
                          FROM DUAL;

                        IF (v_fldcnt = 8)
                        THEN
                           BEGIN
                              v_prifirstname :=
                                 SUBSTR (v_row,
                                         1,
                                         INSTR (v_row, '|', 1, 1) - 1
                                        );
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_prilastname :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_prijobtitle :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_priemail :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_priphone :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_primobile :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              --v_prifax := v_row;

                              /********/
                              /*HVPN Design change R3 (2010) */
                              /*adding PSTN number and Notes in the primary contact section  */
                              v_prifax :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_pstn_number :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_primary_notes := v_row;

                              /*R3 ends */
                              /*******/
                              INSERT INTO contact
                                          (contact_id,
                                           first_name, last_name,
                                           phone_number, mobile_number, fax,
                                           contact_type,
                                           job_title, email,
                                           created_by, created_date,
                                           pstn_number, primary_notes
                                          )
                                   VALUES (contact_id.NEXTVAL,
                                           v_prifirstname, v_prilastname,
                                           v_priphone, v_primobile, v_prifax,
                                           pkg_constants.con_primary_sitecontact,
                                           v_prijobtitle, v_priemail,
                                           in_createdby, SYSDATE (),
                                           v_pstn_number, v_primary_notes
                                          )
                                RETURNING contact_id
                                     INTO v_pricontactid;

                              INSERT INTO site_contact_detail
                                          (site_contact_detail_id,
                                           site_id, contact_id,
                                           created_by, created_date
                                          )
                                   VALUES (site_contact_detail_id.NEXTVAL,
                                           v_siteid, v_pricontactid,
                                           in_createdby, SYSDATE
                                          );
                           END;
                        ELSE
                           BEGIN
                              out_errmsg := 'Invalid Primary Contact details';
                           END;
                        END IF;                                   --end fldcnt
                     END;
                  END IF;                       --end primary contact not null

                  v_row := NULL;

                  --check secondary contact details added on 30/12/2009
                  IF (in_seccontact IS NOT NULL)
                  THEN
                     BEGIN
                        v_row := in_seccontact;

                        SELECT pkg_common.fn_countfields (v_row, '|')
                          INTO v_fldcnt
                          FROM DUAL;

                        IF (v_fldcnt = 6)
                        THEN
                           BEGIN
                              v_secfirstname :=
                                 SUBSTR (v_row,
                                         1,
                                         INSTR (v_row, '|', 1, 1) - 1
                                        );
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_seclastname :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_secjobtitle :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_secemail :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_secphone :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_secmobile :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_secfax := v_row;

                              INSERT INTO contact
                                          (contact_id,
                                           first_name, last_name,
                                           phone_number, mobile_number, fax,
                                           contact_type,
                                           job_title, email,
                                           created_by, created_date
                                          )
                                   VALUES (contact_id.NEXTVAL,
                                           v_secfirstname, v_seclastname,
                                           v_secphone, v_secmobile, v_secfax,
                                           pkg_constants.con_secondary_sitecontact,
                                           v_secjobtitle, v_secemail,
                                           in_createdby, SYSDATE ()
                                          )
                                RETURNING contact_id
                                     INTO v_seccontactid;

                              INSERT INTO site_contact_detail
                                          (site_contact_detail_id,
                                           site_id, contact_id,
                                           created_by, created_date
                                          )
                                   VALUES (site_contact_detail_id.NEXTVAL,
                                           v_siteid, v_seccontactid,
                                           in_createdby, SYSDATE
                                          );
                           END;
                        ELSE
                           BEGIN
                              out_errmsg :=
                                          'Invalid Secondary Contact details';
                           END;
                        END IF;                                   --end fldcnt
                     END;
                  END IF;                 -- end secondary contact is not null

                  v_row := NULL;

                  --check technical contact details added on 30/12/2009
                  IF (in_techcontact IS NOT NULL)
                  THEN
                     BEGIN
                        v_row := in_techcontact;

                        SELECT pkg_common.fn_countfields (v_row, '|')
                          INTO v_fldcnt
                          FROM DUAL;

                        IF (v_fldcnt = 6)
                        THEN
                           BEGIN
                              v_techfirstname :=
                                 SUBSTR (v_row,
                                         1,
                                         INSTR (v_row, '|', 1, 1) - 1
                                        );
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_techlastname :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_techjobtitle :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_techemail :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_techphone :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_techmobile :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_techfax := v_row;

                              INSERT INTO contact
                                          (contact_id,
                                           first_name, last_name,
                                           phone_number, mobile_number,
                                           fax,
                                           contact_type,
                                           job_title, email,
                                           created_by, created_date
                                          )
                                   VALUES (contact_id.NEXTVAL,
                                           v_techfirstname, v_techlastname,
                                           v_techphone, v_techmobile,
                                           v_techfax,
                                           pkg_constants.con_tech_sitecontact,
                                           v_techjobtitle, v_techemail,
                                           in_createdby, SYSDATE ()
                                          )
                                RETURNING contact_id
                                     INTO v_techcontactid;

                              INSERT INTO site_contact_detail
                                          (site_contact_detail_id,
                                           site_id, contact_id,
                                           created_by, created_date
                                          )
                                   VALUES (site_contact_detail_id.NEXTVAL,
                                           v_siteid, v_techcontactid,
                                           in_createdby, SYSDATE
                                          );
                           END;
                        ELSE
                           BEGIN
                              out_errmsg :=
                                          'Invalid Technical Contact details';
                           END;
                        END IF;                              --end of fldcount
                     END;
                  END IF;

                  --check service assurance contact details added on 3rd March 2009
                  IF (in_servassurcontact IS NOT NULL)
                  THEN
                     BEGIN
                        v_row := in_servassurcontact;

                        SELECT pkg_common.fn_countfields (v_row, '|')
                          INTO v_fldcnt
                          FROM DUAL;

                        IF (v_fldcnt = 6)
                        THEN
                           BEGIN
                              v_tempfirstname :=
                                 SUBSTR (v_row,
                                         1,
                                         INSTR (v_row, '|', 1, 1) - 1
                                        );
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_templastname :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_tempjobtitle :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_tempemail :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_tempphone :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_tempmobile :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_tempfax := v_row;

                              INSERT INTO contact
                                          (contact_id,
                                           first_name, last_name,
                                           phone_number, mobile_number,
                                           fax,
                                           contact_type,
                                           job_title, email,
                                           created_by, created_date
                                          )
                                   VALUES (contact_id.NEXTVAL,
                                           v_tempfirstname, v_templastname,
                                           v_tempphone, v_tempmobile,
                                           v_tempfax,
                                           pkg_constants.con_serv_assur_sitecontact,
                                           v_tempjobtitle, v_tempemail,
                                           in_createdby, SYSDATE ()
                                          )
                                RETURNING contact_id
                                     INTO v_tempcontactid;

                              INSERT INTO site_contact_detail
                                          (site_contact_detail_id,
                                           site_id, contact_id,
                                           created_by, created_date
                                          )
                                   VALUES (site_contact_detail_id.NEXTVAL,
                                           v_siteid, v_tempcontactid,
                                           in_createdby, SYSDATE
                                          );
                           END;
                        ELSE
                           BEGIN
                              out_errmsg :=
                                  'Invalid Service Assurance Contact details';
                           END;
                        END IF;                              --end of fldcount
                     END;
                  END IF;                  --end service assurance is not null

                  --check service assurance contact details added on 3rd March 2009
                  IF (in_servicedlvcontact IS NOT NULL)
                  THEN
                     BEGIN
                        v_row := in_servicedlvcontact;

                        SELECT pkg_common.fn_countfields (v_row, '|')
                          INTO v_fldcnt
                          FROM DUAL;

                        IF (v_fldcnt = 6)
                        THEN
                           BEGIN
                              v_tempfirstname :=
                                 SUBSTR (v_row,
                                         1,
                                         INSTR (v_row, '|', 1, 1) - 1
                                        );
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_templastname :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_tempjobtitle :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_tempemail :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_tempphone :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_tempmobile :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_tempfax := v_row;

                              INSERT INTO contact
                                          (contact_id,
                                           first_name, last_name,
                                           phone_number, mobile_number,
                                           fax,
                                           contact_type,
                                           job_title, email,
                                           created_by, created_date
                                          )
                                   VALUES (contact_id.NEXTVAL,
                                           v_tempfirstname, v_templastname,
                                           v_tempphone, v_tempmobile,
                                           v_tempfax,
                                           pkg_constants.con_serv_deli_sitecontact,
                                           v_tempjobtitle, v_tempemail,
                                           in_createdby, SYSDATE ()
                                          )
                                RETURNING contact_id
                                     INTO v_tempcontactid;

                              INSERT INTO site_contact_detail
                                          (site_contact_detail_id,
                                           site_id, contact_id,
                                           created_by, created_date
                                          )
                                   VALUES (site_contact_detail_id.NEXTVAL,
                                           v_siteid, v_tempcontactid,
                                           in_createdby, SYSDATE
                                          );
                           END;
                        ELSE
                           BEGIN
                              out_errmsg :=
                                     'Invalid service option Contact details';
                           END;
                        END IF;                              --end of fldcount
                     END;
                  END IF;             --end service option contact is not null

                  -- ##### Change for 904 - Call Anywhere  begin
                  IF (in_kcidetails IS NOT NULL)
                  THEN
                     BEGIN
                        v_row := in_kcidetails;

                        SELECT pkg_common.fn_countfields (v_row, '|')
                          INTO v_fldcnt
                          FROM DUAL;

                        IF (v_fldcnt = 6)
                        THEN
                           BEGIN
                              v_tempfirstname :=
                                 SUBSTR (v_row,
                                         1,
                                         INSTR (v_row, '|', 1, 1) - 1
                                        );
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_templastname :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_tempjobtitle :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_tempemail :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_tempphone :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_tempmobile :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_tempfax := v_row;

                              INSERT INTO contact
                                          (contact_id,
                                           first_name, last_name,
                                           phone_number, mobile_number,
                                           fax,
                                           contact_type,
                                           job_title, email,
                                           created_by, created_date
                                          )
                                   VALUES (contact_id.NEXTVAL,
                                           v_tempfirstname, v_templastname,
                                           v_tempphone, v_tempmobile,
                                           v_tempfax,
                                           pkg_constants.con_keep_cust_informeddetl,
                                           v_tempjobtitle, v_tempemail,
                                           in_createdby, SYSDATE ()
                                          )
                                RETURNING contact_id
                                     INTO v_tempcontactid;

                              INSERT INTO site_contact_detail
                                          (site_contact_detail_id,
                                           site_id, contact_id,
                                           created_by, created_date
                                          )
                                   VALUES (site_contact_detail_id.NEXTVAL,
                                           v_siteid, v_tempcontactid,
                                           in_createdby, SYSDATE
                                          );
                           END;
                        ELSE
                           BEGIN
                              out_errmsg := 'Invalid KCI details';
                           END;
                        END IF;
                     END;
                  END IF;

                  -- ##### Change for 904 - Call Anywhere  end
                  IF (out_errmsg IS NOT NULL)
                  THEN
                     BEGIN
                        out_status := pkg_constants.con_status_failure;
                       -- ROLLBACK;
                     END;
                  ELSE
                     BEGIN
                        -- COMMIT;
                        out_siteid := v_siteid;
                        out_status := pkg_constants.con_status_success;
                     END;
                  END IF;
               END;
            ELSE
               BEGIN
                   SELECT Site_ID
                    INTO out_siteid
                    FROM site
                   WHERE UPPER (NAME) = UPPER (in_sitename)
                     AND customer_id = in_customerid;

                  out_status := pkg_constants.con_status_duplicate;
               END;
            END IF;
         END;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         out_errmsg := SQLERRM;
         -- ROLLBACK;
   END;


PROCEDURE spu_site (
      --modified on 30/12/2009 to update technical contact details
      in_customerid                 IN       customer.customer_id%TYPE,
      in_siteid                     IN       site.site_id%TYPE,
      in_customer_reportsitename    IN       site.customer_report_site_name%TYPE,
      in_buildingno                 IN       address.building_number%TYPE,
      in_addressline1               IN       address.address_line1%TYPE,
      in_city                       IN       address.city%TYPE,
      in_state                      IN       address.state%TYPE,
      in_state_code                 IN       address.state_code%TYPE,
      in_countryid                  IN       country.country_id%TYPE,
      in_postzipcode                IN       address.post_zip_code%TYPE,
      in_telephoneareacode          IN       site.telephone_area_code%TYPE,
      --added for R1
      in_county                     IN       address.county%TYPE,
      -- ##### Change for 904 - B-End validation  begin
      in_local_business_cust_name   IN       site.local_business_customer_name%TYPE,
      -- ##### Change for 904 - B-End validation  end
      in_additionalsite             IN       VARCHAR2,           --for address
      in_pricontact                 IN       VARCHAR2,   --for primary contact
      in_seccontact                 IN       VARCHAR2, --for secondary contact
      in_techcontact                IN       VARCHAR2, --for technical contact
      in_servassurcontact           IN       VARCHAR2,
      --for service assurance contact details
      in_servicedlvcontact          IN       VARCHAR2,
      --for service delivery contact details
      in_bfgsiteid                  IN       site.bfg_site_id%TYPE,
      -- Ghucs, Added new parameter in_bfgsiteid
      in_bfgsitename                IN       site.bfg_site_name%TYPE,
                                  -- Ghucs, Added new parameter in_bfgsitename
      -- ##### Change for 904 - Call Anywhere  begin
      in_kcidetails                 IN       VARCHAR2,
                                         -- for Keep Customer Informed details
      -- ##### Change for 904 - Call Anywhere  end
      /*line_of_site_billing added on 17/06/2010*/
      in_lineofsitebilling          IN       site.line_of_site_billing%TYPE,
      in_modifiedby                 IN       site.modified_by%TYPE,
      out_status                    OUT      NUMBER,
      out_errmsg                    OUT      VARCHAR2
   )
   AS
      v_addrline2              address.address_line2%TYPE;
      v_notes                  site.notes%TYPE;
      v_floor                  address.FLOOR%TYPE;
      v_room                   address.room%TYPE;
      v_classicsiteid          site.classic_site_id%TYPE;
      v_prifirstname           contact.first_name%TYPE;
      v_prilastname            contact.last_name%TYPE;
      v_prijobtitle            contact.job_title%TYPE;
      v_priemail               contact.email%TYPE;
      v_priphone               contact.phone_number%TYPE;
      v_primobile              contact.mobile_number%TYPE;
      v_prifax                 contact.fax%TYPE;
      v_secfirstname           contact.first_name%TYPE;
      v_seclastname            contact.last_name%TYPE;
      v_secjobtitle            contact.job_title%TYPE;
      v_secemail               contact.email%TYPE;
      v_secphone               contact.phone_number%TYPE;
      v_secmobile              contact.mobile_number%TYPE;
      v_secfax                 contact.fax%TYPE;
      v_billingid              site.billing_id%TYPE;
      v_row                    VARCHAR2 (2000);
      v_rowcount               NUMBER;
      v_addressid              address.address_id%TYPE;
      v_pricontactid           site.primary_contact_id%TYPE;
      v_seccontactid           site.secondary_contact_id%TYPE;
      v_siteid                 site.site_id%TYPE;
      v_fldcnt                 NUMBER;
      v_kgiflag                NUMBER                           := 1;
      v_flag                   NUMBER                           := 1;
      v_kgitype                VARCHAR2 (100);
      --v_kgitype         kgi_country.kgi_type%TYPE;
      v_techfirstname          contact.first_name%TYPE;
      v_techlastname           contact.last_name%TYPE;
      v_techjobtitle           contact.job_title%TYPE;
      v_techemail              contact.email%TYPE;
      v_techphone              contact.phone_number%TYPE;
      v_techmobile             contact.mobile_number%TYPE;
      v_techfax                contact.fax%TYPE;
      v_techcontactid          contact.contact_id%TYPE;
      v_contactcnt             NUMBER;
      v_countryname            country.NAME%TYPE;
      v_tempfirstname          contact.first_name%TYPE;
      v_templastname           contact.last_name%TYPE;
      v_tempjobtitle           contact.job_title%TYPE;
      v_tempemail              contact.email%TYPE;
      v_tempphone              contact.phone_number%TYPE;
      v_tempmobile             contact.mobile_number%TYPE;
      v_tempfax                contact.fax%TYPE;
      v_tempcontactid          contact.contact_id%TYPE;
      v_sa_contact_count       NUMBER;
      v_so_contact_count       NUMBER;
      v_sa_contactid           contact.contact_id%TYPE;
      v_so_contactid           contact.contact_id%TYPE;
      v_ppsr_notes             site.ppsr_note%TYPE;
      v_cntry_spec_notes_req   site.cntry_spec_notes_req%TYPE;
      v_url                    site.url%TYPE;
      /****R3 */
      v_pstn_number            contact.pstn_number%TYPE;
      v_primary_notes          contact.primary_notes%TYPE;
      v_sql_code               NUMBER; -- Added by Sujana on 23/11/2010 as part of exception handling
      v_ipsec_contact_id       contact.contact_id%TYPE;
      v_ipsec_contact_count    NUMBER;


   BEGIN
      v_row := in_additionalsite;

      --modified for kgi_check from ppsr
      SELECT NAME
        INTO v_countryname
        FROM country
       WHERE country_id = in_countryid;

      --kgi check from PPSR
      SELECT COUNT (*)
        INTO v_rowcount
        FROM ppsr_owner.ppsr_kgi_data_v@dblink_ppsr
       WHERE UPPER (REPLACE ("Country", '''')) =
                                         UPPER (REPLACE (v_countryname, ''''));

--kgi check
      IF (v_rowcount != 0)
      THEN
         BEGIN
            --kgi check from PPSR
            SELECT DISTINCT "Kgi Type"
                       INTO v_kgitype
                       FROM ppsr_owner.ppsr_kgi_data_v@dblink_ppsr
                      WHERE UPPER (REPLACE ("Country", '''')) =
                                         UPPER (REPLACE (v_countryname, ''''));

            IF (UPPER (v_kgitype) LIKE '%CITY%')
            THEN
               BEGIN
                  IF (in_city IS NULL)
                  THEN
                     v_kgiflag := 0;
                  END IF;
               END;
            END IF;

            IF (UPPER (v_kgitype) LIKE '%POST CODE%')
            THEN
               BEGIN
                  IF (in_postzipcode IS NULL)
                  THEN
                     v_kgiflag := 0;
                  END IF;
               END;
            END IF;

            IF (   UPPER (v_kgitype) LIKE '%STREET NAME%'
                OR UPPER (v_kgitype) LIKE '%STREET NUMBER%'
               )
            THEN
               BEGIN
                  IF (in_addressline1 IS NULL)
                  THEN
                     v_kgiflag := 0;
                  END IF;
               END;
            END IF;

            IF (UPPER (v_kgitype) LIKE '%TELEPHONE AREA CODE%')
            THEN
               BEGIN
                  IF (in_telephoneareacode IS NULL)
                  THEN
                     v_kgiflag := 0;
                  END IF;
               END;
            END IF;

            IF (UPPER (v_kgitype) LIKE '%DISTRICT%')
            THEN
               BEGIN
                  v_addrline2 :=
                     SUBSTR (v_row,
                             INSTR (v_row, '|', 1, 2) + 1,
                               (INSTR (v_row, '|', 1, 3) - 1
                               )
                             - (INSTR (v_row, '|', 1, 2))
                            );

                  IF (v_addrline2 IS NULL)
                  THEN
                     v_kgiflag := 0;
                  END IF;
               END;
            END IF;
         END;
      END IF;

      IF (v_kgiflag = 0)
      THEN
         BEGIN
            out_status := pkg_constants.con_status_failure;
            out_errmsg := 'KGI Error: ' || v_kgitype || ' is mandatory';
         END;
      ELSE
         BEGIN
            SELECT COUNT (*)
              INTO v_rowcount
              FROM site
             WHERE site_id = in_siteid AND customer_id = in_customerid;

            IF (v_rowcount = 1)
            THEN
               BEGIN
                  -- SET TRANSACTION READ WRITE NAME 'site page';

                  --get address_id
                  SELECT address_id
                    INTO v_addressid
                    FROM site s
                   WHERE s.site_id = in_siteid AND customer_id = in_customerid;

                  --get primary_contact_id added on 30/12/2009
                  SELECT COUNT (*)
                    INTO v_contactcnt
                    FROM site s, site_contact_detail sc, contact c
                   WHERE s.site_id = sc.site_id
                     AND sc.contact_id = c.contact_id
                     AND UPPER (c.contact_type) =
                                 UPPER (pkg_constants.con_primary_sitecontact)
                     AND s.site_id = in_siteid
                     AND customer_id = in_customerid;

                  IF (v_contactcnt <> 0)
                  THEN
                     BEGIN
                        SELECT sc.contact_id
                          INTO v_pricontactid
                          FROM site s, site_contact_detail sc, contact c
                         WHERE s.site_id = sc.site_id
                           AND sc.contact_id = c.contact_id
                           AND UPPER (c.contact_type) =
                                  UPPER (pkg_constants.con_primary_sitecontact)
                           AND s.site_id = in_siteid
                           AND customer_id = in_customerid;
                     END;
                  ELSE
                     BEGIN
                        v_pricontactid := NULL;
                     END;
                  END IF;

                  --get secondary_contact_id added on 30/12/2009
                  SELECT COUNT (*)
                    INTO v_contactcnt
                    FROM site s, site_contact_detail sc, contact c
                   WHERE s.site_id = sc.site_id
                     AND sc.contact_id = c.contact_id
                     AND UPPER (c.contact_type) =
                               UPPER (pkg_constants.con_secondary_sitecontact)
                     AND s.site_id = in_siteid
                     AND customer_id = in_customerid;

                  IF (v_contactcnt <> 0)
                  THEN
                     BEGIN
                        SELECT sc.contact_id
                          INTO v_seccontactid
                          FROM site s, site_contact_detail sc, contact c
                         WHERE s.site_id = sc.site_id
                           AND sc.contact_id = c.contact_id
                           AND UPPER (c.contact_type) =
                                  UPPER
                                      (pkg_constants.con_secondary_sitecontact)
                           AND s.site_id = in_siteid
                           AND customer_id = in_customerid;
                     END;
                  ELSE
                     BEGIN
                        v_seccontactid := NULL;
                     END;
                  END IF;

                  --get technical_contact_id added on 30/12/2009
                  SELECT COUNT (*)
                    INTO v_contactcnt
                    FROM site s, site_contact_detail sc, contact c
                   WHERE s.site_id = sc.site_id
                     AND sc.contact_id = c.contact_id
                     AND UPPER (c.contact_type) =
                                    UPPER (pkg_constants.con_tech_sitecontact)
                     AND s.site_id = in_siteid
                     AND customer_id = in_customerid;

                  --get service assurance contact_id added on 3rd March 2010
                  SELECT COUNT (*)
                    INTO v_sa_contact_count
                    FROM site s, site_contact_detail sc, contact c
                   WHERE s.site_id = sc.site_id
                     AND sc.contact_id = c.contact_id
                     AND UPPER (c.contact_type) =
                              UPPER (pkg_constants.con_serv_assur_sitecontact)
                     AND s.site_id = in_siteid
                     AND customer_id = in_customerid;

                  --get service option contact_id added on 3rd march 2010
                  SELECT COUNT (*)
                    INTO v_so_contact_count
                    FROM site s, site_contact_detail sc, contact c
                   WHERE s.site_id = sc.site_id
                     AND sc.contact_id = c.contact_id
                     AND UPPER (c.contact_type) =
                               UPPER (pkg_constants.con_serv_deli_sitecontact)
                     AND s.site_id = in_siteid
                     AND customer_id = in_customerid;

                  IF (v_contactcnt <> 0)
                  THEN
                     BEGIN
                        SELECT sc.contact_id
                          INTO v_techcontactid
                          FROM site s, site_contact_detail sc, contact c
                         WHERE s.site_id = sc.site_id
                           AND sc.contact_id = c.contact_id
                           AND UPPER (c.contact_type) =
                                    UPPER (pkg_constants.con_tech_sitecontact)
                           AND s.site_id = in_siteid
                           AND customer_id = in_customerid;
                     END;
                  ELSE
                     BEGIN
                        v_techcontactid := NULL;
                     END;
                  END IF;

                  IF v_sa_contact_count <> 0
                  THEN
                     BEGIN
                        SELECT sc.contact_id
                          INTO v_sa_contactid
                          FROM site s, site_contact_detail sc, contact c
                         WHERE s.site_id = sc.site_id
                           AND sc.contact_id = c.contact_id
                           AND UPPER (c.contact_type) =
                                  UPPER
                                     (pkg_constants.con_serv_assur_sitecontact)
                           AND s.site_id = in_siteid
                           AND customer_id = in_customerid;
                     END;
                  ELSE
                     BEGIN
                        v_sa_contactid := NULL;
                     END;
                  END IF;

                  IF v_so_contact_count <> 0
                  THEN
                     BEGIN
                        SELECT sc.contact_id
                          INTO v_so_contactid
                          FROM site s, site_contact_detail sc, contact c
                         WHERE s.site_id = sc.site_id
                           AND sc.contact_id = c.contact_id
                           AND UPPER (c.contact_type) =
                                  UPPER
                                      (pkg_constants.con_serv_deli_sitecontact)
                           AND s.site_id = in_siteid
                           AND customer_id = in_customerid;
                     END;
                  ELSE
                     BEGIN
                        v_so_contactid := NULL;
                     END;
                  END IF;

                  --get IPSEC_contact_id added on 24/11/2010
                  SELECT COUNT (*)
                    INTO v_ipsec_contact_count
                    FROM site s, site_contact_detail sc, contact c
                   WHERE s.site_id = sc.site_id
                     AND sc.contact_id = c.contact_id
                     AND UPPER (c.contact_type) =upper(pkg_constants.con_IPSEC_CONTACT_sitecontact)
                     AND s.site_id = in_siteid
                     AND customer_id = in_customerid;

                  IF (v_ipsec_contact_count <> 0)
                  THEN
                     BEGIN
                        SELECT sc.contact_id
                          INTO v_ipsec_contact_id
                          FROM site s, site_contact_detail sc, contact c
                         WHERE s.site_id = sc.site_id
                           AND sc.contact_id = c.contact_id
                           AND UPPER (c.contact_type) =upper(pkg_constants.con_IPSEC_CONTACT_sitecontact)
                           AND s.site_id = in_siteid
                           AND customer_id = in_customerid;
                     END;
                  ELSE
                     BEGIN
                        v_ipsec_contact_id := NULL;
                     END;
                  END IF;

                  --not using primary and secondary contact ids in site
                  UPDATE site
                     SET address_id = NULL,
                         primary_contact_id = NULL,
                         secondary_contact_id = NULL,
                         bfg_site_name = in_bfgsitename
                   -- Ghucs, Added new parameter in_bfgsitename to update
                  WHERE  SITE_ID = IN_SITEID AND (CUSTOMER_ID = IN_CUSTOMERID
                      OR bfg_site_id = in_bfgsiteid);

                  -- Ghucs, Added new parameter in_bfgsiteid as OR condition
                  DELETE FROM address
                        WHERE address_id = v_addressid;

                  DELETE FROM site_contact_detail
                        WHERE site_id = in_siteid;

                  DELETE FROM ORDER_CONTACT_DETAIL
                  WHERE CONTACT_ID IN (v_pricontactid,
                                        v_seccontactid,
                                        v_techcontactid,
                                        v_sa_contactid,
                                        V_SO_CONTACTID,
                                        v_ipsec_contact_id);

                   DELETE FROM ORDER_CONTACT_DETAIL
                  WHERE   address_id = v_addressid;

                  DELETE FROM contact
                        WHERE contact_id IN
                                 (v_pricontactid,
                                  v_seccontactid,
                                  v_techcontactid,
                                  v_sa_contactid,
                                  v_so_contactid,
                                  v_ipsec_contact_id
                                 );

                  SELECT address_id.NEXTVAL
                    INTO v_addressid
                    FROM DUAL;

                  INSERT INTO address
                              (address_id, country_id, building_number,
                               address_line1, city, state,
                               post_zip_code, created_by, created_date,
                               state_code, county
                              )
                       VALUES (v_addressid, in_countryid, in_buildingno,
                               in_addressline1, in_city, in_state,
                               in_postzipcode, in_modifiedby, SYSDATE (),
                               in_state_code, in_county
                              );

                  -- ##### Change for 904 - B-End validation  begin
                  UPDATE site
                     SET customer_report_site_name =
                                                    in_customer_reportsitename,
                         local_business_customer_name =
                                                   in_local_business_cust_name,
                         address_id = v_addressid,
                         classic_site_id = NULL,
                         billing_id = NULL,
                         telephone_area_code = in_telephoneareacode,
                         line_of_site_billing = in_lineofsitebilling,
                         notes = NULL,
                         modified_by = in_modifiedby,
                         modified_date = SYSDATE ()
                   WHERE site_id = in_siteid AND customer_id = in_customerid;

                                -- ##### Change for 904 - B-End validation  end
                  IF (in_additionalsite IS NOT NULL)
                  THEN
                     BEGIN
                        v_row := in_additionalsite;

                        SELECT pkg_common.fn_countfields (v_row, '|')
                          INTO v_fldcnt
                          FROM DUAL;

                        IF (v_fldcnt = 8)
                        THEN
                           BEGIN
                              v_floor :=
                                 SUBSTR (v_row,
                                         1,
                                         INSTR (v_row, '|', 1, 1) - 1
                                        );
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_room :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_addrline2 :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_classicsiteid :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_billingid :=
                                 TO_NUMBER (SUBSTR (v_row,
                                                    1,
                                                      INSTR (v_row, '|', 1, 1)
                                                    - 1
                                                   )
                                           );
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              /* Sprint2 Clean order managment SQE904 Starts */
                              v_notes :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_ppsr_notes :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_cntry_spec_notes_req :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_url := v_row;

                              /* Sprint2 Clean order managment SQE904  end*/
                              UPDATE address
                                 SET FLOOR = v_floor,
                                     room = v_room,
                                     address_line2 = v_addrline2
                               WHERE address_id = v_addressid;

                              UPDATE site
                                 SET classic_site_id = v_classicsiteid,
                                     billing_id = v_billingid,
                                     notes = v_notes,
                                     ppsr_note = v_ppsr_notes,
                                     cntry_spec_notes_req =
                                                        v_cntry_spec_notes_req,
                                     url = v_url
                               WHERE site_id = in_siteid
                                 AND customer_id = in_customerid;
                           END;
                        ELSE
                           BEGIN
                              out_status := pkg_constants.con_status_failure; -- Added as part of exception handling
                              out_errmsg := 'Invalid Additional Site details';
                           END;
                        END IF;
                     END;
                  END IF;                              --end in_additionalsite

                  v_row := NULL;

                  IF (in_pricontact IS NOT NULL)
                  THEN
                     BEGIN
                        v_row := in_pricontact;

                        SELECT pkg_common.fn_countfields (v_row, '|')
                          INTO v_fldcnt
                          FROM DUAL;

                        IF (v_fldcnt = 8)
                        THEN
                           BEGIN
                              v_prifirstname :=
                                 SUBSTR (v_row,
                                         1,
                                         INSTR (v_row, '|', 1, 1) - 1
                                        );
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_prilastname :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_prijobtitle :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_priemail :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_priphone :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_primobile :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              --v_prifax := v_row;
/********/
                              /*HVPN Design change R3 (2010) */
                              /*adding PSTN number and Notes in the primary contact section  */
                              v_prifax :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_pstn_number :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_primary_notes := v_row;

                              /*R3 ends */
                              /*******/
                              INSERT INTO contact
                                          (contact_id,
                                           first_name, last_name,
                                           phone_number, mobile_number, fax,
                                           contact_type,
                                           job_title, email,
                                           created_by, created_date,
                                           pstn_number, primary_notes
                                          )
                                   VALUES (contact_id.NEXTVAL,
                                           v_prifirstname, v_prilastname,
                                           v_priphone, v_primobile, v_prifax,
                                           pkg_constants.con_primary_sitecontact,
                                           v_prijobtitle, v_priemail,
                                           in_modifiedby, SYSDATE (),
                                           v_pstn_number, v_primary_notes
                                          )
                                RETURNING contact_id
                                     INTO v_pricontactid;

                              INSERT INTO site_contact_detail
                                          (site_contact_detail_id,
                                           site_id, contact_id,
                                           created_by, created_date
                                          )
                                   VALUES (site_contact_detail_id.NEXTVAL,
                                           in_siteid, v_pricontactid,
                                           in_modifiedby, SYSDATE
                                          );
                           END;
                        ELSE
                           BEGIN
                              out_status := pkg_constants.con_status_failure; -- Added as part of exception handling
                              out_errmsg := 'Invalid Primary Contact details';
                           END;
                        END IF;                                --end of fldcnt
                     END;
                  END IF;                    --end of primary contact not null

                  v_row := NULL;

                  IF (in_seccontact IS NOT NULL)
                  THEN
                     BEGIN
                        v_row := in_seccontact;

                        SELECT pkg_common.fn_countfields (v_row, '|')
                          INTO v_fldcnt
                          FROM DUAL;

                        IF (v_fldcnt = 6)
                        THEN
                           BEGIN
                              v_secfirstname :=
                                 SUBSTR (v_row,
                                         1,
                                         INSTR (v_row, '|', 1, 1) - 1
                                        );
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_seclastname :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_secjobtitle :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_secemail :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_secphone :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_secmobile :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_secfax := v_row;

                              INSERT INTO contact
                                          (contact_id,
                                           first_name, last_name,
                                           phone_number, mobile_number, fax,
                                           contact_type,
                                           job_title, email,
                                           created_by, created_date
                                          )
                                   VALUES (contact_id.NEXTVAL,
                                           v_secfirstname, v_seclastname,
                                           v_secphone, v_secmobile, v_secfax,
                                           pkg_constants.con_secondary_sitecontact,
                                           v_secjobtitle, v_secemail,
                                           in_modifiedby, SYSDATE ()
                                          )
                                RETURNING contact_id
                                     INTO v_seccontactid;

                              INSERT INTO site_contact_detail
                                          (site_contact_detail_id,
                                           site_id, contact_id,
                                           created_by, created_date
                                          )
                                   VALUES (site_contact_detail_id.NEXTVAL,
                                           in_siteid, v_seccontactid,
                                           in_modifiedby, SYSDATE
                                          );
                           END;
                        ELSE
                           BEGIN
                              out_status := pkg_constants.con_status_failure; -- Added as part of exception handling
                              out_errmsg :=
                                          'Invalid Secondary Contact details';
                           END;
                        END IF;                                --end of fldcnt
                     END;
                  END IF;                  --end of secondary contact not null

                  v_row := NULL;

                  IF (in_techcontact IS NOT NULL)
                  THEN
                     BEGIN
                        v_row := in_techcontact;

                        SELECT pkg_common.fn_countfields (v_row, '|')
                          INTO v_fldcnt
                          FROM DUAL;

                        IF (v_fldcnt = 6)
                        THEN
                           BEGIN
                              v_techfirstname :=
                                 SUBSTR (v_row,
                                         1,
                                         INSTR (v_row, '|', 1, 1) - 1
                                        );
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_techlastname :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_techjobtitle :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_techemail :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_techphone :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_techmobile :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_techfax := v_row;

                              INSERT INTO contact
                                          (contact_id,
                                           first_name, last_name,
                                           phone_number, mobile_number,
                                           fax,
                                           contact_type,
                                           job_title, email,
                                           created_by, created_date
                                          )
                                   VALUES (contact_id.NEXTVAL,
                                           v_techfirstname, v_techlastname,
                                           v_techphone, v_techmobile,
                                           v_techfax,
                                           pkg_constants.con_tech_sitecontact,
                                           v_techjobtitle, v_techemail,
                                           in_modifiedby, SYSDATE ()
                                          )
                                RETURNING contact_id
                                     INTO v_techcontactid;

                              INSERT INTO site_contact_detail
                                          (site_contact_detail_id,
                                           site_id, contact_id,
                                           created_by, created_date
                                          )
                                   VALUES (site_contact_detail_id.NEXTVAL,
                                           in_siteid, v_techcontactid,
                                           in_modifiedby, SYSDATE
                                          );
                           END;
                        ELSE
                           BEGIN
                              out_status := pkg_constants.con_status_failure; -- Added as part of exception handling
                              out_errmsg :=
                                          'Invalid Technical Contact details';
                           END;
                        END IF;                              --end of fldcount
                     END;
                  END IF;                  --end of technical contact not null

                  IF (in_servassurcontact IS NOT NULL)
                  THEN
                     BEGIN
                        v_row := in_servassurcontact;

                        SELECT pkg_common.fn_countfields (v_row, '|')
                          INTO v_fldcnt
                          FROM DUAL;

                        IF (v_fldcnt = 6)
                        THEN
                           BEGIN
                              v_tempfirstname :=
                                 SUBSTR (v_row,
                                         1,
                                         INSTR (v_row, '|', 1, 1) - 1
                                        );
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_templastname :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_tempjobtitle :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_tempemail :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_tempphone :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_tempmobile :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_tempfax := v_row;

                              INSERT INTO contact
                                          (contact_id,
                                           first_name, last_name,
                                           phone_number, mobile_number,
                                           fax,
                                           contact_type,
                                           job_title, email,
                                           created_by, created_date
                                          )
                                   VALUES (contact_id.NEXTVAL,
                                           v_tempfirstname, v_templastname,
                                           v_tempphone, v_tempmobile,
                                           v_tempfax,
                                           pkg_constants.con_serv_assur_sitecontact,
                                           v_tempjobtitle, v_tempemail,
                                           in_modifiedby, SYSDATE ()
                                          )
                                RETURNING contact_id
                                     INTO v_tempcontactid;

                              INSERT INTO site_contact_detail
                                          (site_contact_detail_id,
                                           site_id, contact_id,
                                           created_by, created_date
                                          )
                                   VALUES (site_contact_detail_id.NEXTVAL,
                                           in_siteid, v_tempcontactid,
                                           in_modifiedby, SYSDATE
                                          );
                           END;
                        ELSE
                           BEGIN
                              out_status := pkg_constants.con_status_failure; -- Added as part of exception handling
                              out_errmsg :=
                                  'Invalid service assurance contact details';
                           END;
                        END IF;                              --end of fldcount
                     END;
                  END IF;          --end of service assurance contact not null

                  IF (in_servicedlvcontact IS NOT NULL)
                  THEN
                     BEGIN
                        v_row := in_servicedlvcontact;

                        SELECT pkg_common.fn_countfields (v_row, '|')
                          INTO v_fldcnt
                          FROM DUAL;

                        IF (v_fldcnt = 6)
                        THEN
                           BEGIN
                              v_tempfirstname :=
                                 SUBSTR (v_row,
                                         1,
                                         INSTR (v_row, '|', 1, 1) - 1
                                        );
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_templastname :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_tempjobtitle :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_tempemail :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_tempphone :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_tempmobile :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_tempfax := v_row;

                              INSERT INTO contact
                                          (contact_id,
                                           first_name, last_name,
                                           phone_number, mobile_number,
                                           fax,
                                           contact_type,
                                           job_title, email,
                                           created_by, created_date
                                          )
                                   VALUES (contact_id.NEXTVAL,
                                           v_tempfirstname, v_templastname,
                                           v_tempphone, v_tempmobile,
                                           v_tempfax,
                                           pkg_constants.con_serv_deli_sitecontact,
                                           v_tempjobtitle, v_tempemail,
                                           in_modifiedby, SYSDATE ()
                                          )
                                RETURNING contact_id
                                     INTO v_tempcontactid;

                              INSERT INTO site_contact_detail
                                          (site_contact_detail_id,
                                           site_id, contact_id,
                                           created_by, created_date
                                          )
                                   VALUES (site_contact_detail_id.NEXTVAL,
                                           in_siteid, v_tempcontactid,
                                           in_modifiedby, SYSDATE
                                          );
                           END;
                        ELSE
                           BEGIN
                              out_status := pkg_constants.con_status_failure; -- Added as part of exception handling
                              out_errmsg :=
                                     'Invalid service option contact details';
                           END;
                        END IF;                              --end of fldcount
                     END;
                  END IF;             --end of service option contact not null

                  -- ##### Change for 904 - Call Anywhere  begin
                  IF (in_kcidetails IS NOT NULL)
                  THEN
                     BEGIN
                        v_row := in_kcidetails;

                        SELECT pkg_common.fn_countfields (v_row, '|')
                          INTO v_fldcnt
                          FROM DUAL;

                        IF (v_fldcnt = 6)
                        THEN
                           BEGIN
                              v_tempfirstname :=
                                 SUBSTR (v_row,
                                         1,
                                         INSTR (v_row, '|', 1, 1) - 1
                                        );
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_templastname :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_tempjobtitle :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_tempemail :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_tempphone :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_tempmobile :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_tempfax := v_row;

                              INSERT INTO contact
                                          (contact_id,
                                           first_name, last_name,
                                           phone_number, mobile_number,
                                           fax,
                                           contact_type,
                                           job_title, email,
                                           created_by, created_date
                                          )
                                   VALUES (contact_id.NEXTVAL,
                                           v_tempfirstname, v_templastname,
                                           v_tempphone, v_tempmobile,
                                           v_tempfax,
                                           pkg_constants.con_keep_cust_informeddetl,
                                           v_tempjobtitle, v_tempemail,
                                           in_modifiedby, SYSDATE ()
                                          )
                                RETURNING contact_id
                                     INTO v_tempcontactid;

                              INSERT INTO site_contact_detail
                                          (site_contact_detail_id,
                                           site_id, contact_id,
                                           created_by, created_date
                                          )
                                   VALUES (site_contact_detail_id.NEXTVAL,
                                           in_siteid, v_tempcontactid,
                                           in_modifiedby, SYSDATE
                                          );
                           END;
                        ELSE
                           BEGIN
                              out_status := pkg_constants.con_status_failure; -- Added as part of exception handling
                              out_errmsg := 'Invalid KCI details';
                           END;
                        END IF;                              --end of fldcount
                     END;
                  END IF;             --end of service option contact not null
               -- ##### Change for 904 - Call Anywhere  end

               --end of row count
               END;
            END IF;
         END;
      END IF;

      --end kgi flag
      IF (out_errmsg IS NOT NULL)
      THEN
         BEGIN
            out_status := pkg_constants.con_status_failure;
            --ROLLBACK;
         END;
      ELSE
         BEGIN
            out_status := pkg_constants.con_status_success;
            -- COMMIT;
         END;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         -- Added by Sujana on 23/11/2010 as part of exception handling
         out_errmsg := substr(SQLERRM,1,150);
         v_sql_code := SQLCODE;
         PKG_COMMON.spi_error_log(
                                  NULL,
                                  NULL,
                                  in_siteid,
                                  NULL,
                                  'PKG_SITE_R5',
                                  'SPU_SITE',
                                  v_sql_code,
                                  out_errmsg
                                 );
   END;


   PROCEDURE sps_site (
      in_customerid   IN       customer.customer_id%TYPE,
      in_searchby     IN       VARCHAR2,
      in_keyword      IN       VARCHAR2,
      out_site        OUT      sys_refcursor
   )
   AS
   BEGIN
      IF (in_keyword IS NULL)
      THEN
         BEGIN
            OPEN out_site FOR
               SELECT   st.site_id "Site ID", st.NAME "Site Name",
                        addr.address_line1 "Address1",
                        addr.address_line2 "Address2", addr.city "City",
                        addr.state "State", cntry.NAME "Country",
                        addr.post_zip_code "Zip/Post Code",
                        addr.state_code "State Code"
                   FROM site st LEFT OUTER JOIN address addr
                        ON st.address_id = addr.address_id
                        LEFT OUTER JOIN country cntry
                        ON addr.country_id = cntry.country_id
                  WHERE st.customer_id = in_customerid
                    AND (   st.NAME IS NOT NULL
                         OR st.main_site_flag !=
                                              pkg_constants.con_activeflag_yes
                        )
               ORDER BY st.site_id;
         END;
      ELSE
         BEGIN
            CASE UPPER (in_searchby)
               WHEN 'SITE NAME'
               THEN
                  BEGIN
                     OPEN out_site FOR
                        SELECT   st.site_id "Site ID", st.NAME "Site Name",
                                 addr.address_line1 "Address1",
                                 addr.address_line2 "Address2",
                                 addr.city "City", addr.state "State",
                                 cntry.NAME "Country",
                                 addr.post_zip_code "Zip/Post Code",
                                 addr.state_code "State Code"
                            FROM site st LEFT OUTER JOIN address addr
                                 ON st.address_id = addr.address_id
                                 LEFT OUTER JOIN country cntry
                                 ON addr.country_id = cntry.country_id
                           WHERE UPPER (st.NAME) LIKE UPPER (in_keyword) ESCAPE '\'
                             AND st.customer_id = in_customerid
                             AND (   st.NAME IS NOT NULL
                                  OR st.main_site_flag !=
                                              pkg_constants.con_activeflag_yes
                                 )
                        ORDER BY st.site_id;
                  END;
               WHEN 'CITY'
               THEN
                  BEGIN
                     OPEN out_site FOR
                        SELECT   st.site_id "Site ID", st.NAME "Site Name",
                                 addr.address_line1 "Address1",
                                 addr.address_line2 "Address2",
                                 addr.city "City", addr.state "State",
                                 cntry.NAME "Country",
                                 addr.post_zip_code "Zip/Post Code",
                                 addr.state_code "State Code"
                            FROM site st LEFT OUTER JOIN address addr
                                 ON st.address_id = addr.address_id
                                 LEFT OUTER JOIN country cntry
                                 ON addr.country_id = cntry.country_id
                           WHERE UPPER (addr.city) LIKE UPPER (in_keyword)
                             AND st.customer_id = in_customerid
                             AND (   st.NAME IS NOT NULL
                                  OR st.main_site_flag !=
                                              pkg_constants.con_activeflag_yes
                                 )
                        ORDER BY st.site_id;
                  END;
               WHEN 'STATE'
               THEN
                  BEGIN
                     OPEN out_site FOR
                        SELECT   st.site_id "Site ID", st.NAME "Site Name",
                                 addr.address_line1 "Address1",
                                 addr.address_line2 "Address2",
                                 addr.city "City", addr.state "State",
                                 cntry.NAME "Country",
                                 addr.post_zip_code "Zip/Post Code",
                                 addr.state_code "State Code"
                            FROM site st LEFT OUTER JOIN address addr
                                 ON st.address_id = addr.address_id
                                 LEFT OUTER JOIN country cntry
                                 ON addr.country_id = cntry.country_id
                           WHERE UPPER (addr.state) LIKE UPPER (in_keyword)
                             AND st.customer_id = in_customerid
                             AND (   st.NAME IS NOT NULL
                                  OR st.main_site_flag !=
                                              pkg_constants.con_activeflag_yes
                                 )
                        ORDER BY st.site_id;
                  END;
               WHEN 'COUNTRY'
               THEN
                  BEGIN
                     OPEN out_site FOR
                        SELECT   st.site_id "Site ID", st.NAME "Site Name",
                                 addr.address_line1 "Address1",
                                 addr.address_line2 "Address2",
                                 addr.city "City", addr.state "State",
                                 cntry.NAME "Country",
                                 addr.post_zip_code "Zip/Post Code",
                                 addr.state_code "State Code"
                            FROM site st LEFT OUTER JOIN address addr
                                 ON st.address_id = addr.address_id
                                 LEFT OUTER JOIN country cntry
                                 ON addr.country_id = cntry.country_id
                           WHERE UPPER (cntry.NAME) LIKE UPPER (in_keyword)
                             AND st.customer_id = in_customerid
                             AND (   st.NAME IS NOT NULL
                                  OR st.main_site_flag !=
                                              pkg_constants.con_activeflag_yes
                                 )
                        ORDER BY st.site_id;
                  END;
               WHEN 'ZIP CODE'
               THEN
                  BEGIN
                     OPEN out_site FOR
                        SELECT   st.site_id "Site ID", st.NAME "Site Name",
                                 addr.address_line1 "Address1",
                                 addr.address_line2 "Address2",
                                 addr.city "City", addr.state "State",
                                 cntry.NAME "Country",
                                 addr.post_zip_code "Zip/Post Code",
                                 addr.state_code "State Code"
                            FROM site st LEFT OUTER JOIN address addr
                                 ON st.address_id = addr.address_id
                                 LEFT OUTER JOIN country cntry
                                 ON addr.country_id = cntry.country_id
                           WHERE UPPER (addr.post_zip_code) LIKE
                                                           UPPER (in_keyword)
                             AND st.customer_id = in_customerid
                             AND (   st.NAME IS NOT NULL
                                  OR st.main_site_flag !=
                                              pkg_constants.con_activeflag_yes
                                 )
                        ORDER BY st.site_id;
                  END;
               ELSE
                  BEGIN
                     IF (in_searchby IS NULL)
                     THEN
                        OPEN out_site FOR
                           SELECT   st.site_id "Site ID",
                                    st.NAME "Site Name",
                                    addr.address_line1 "Address1",
                                    addr.address_line2 "Address2",
                                    addr.city "City", addr.state "State",
                                    cntry.NAME "Country",
                                    addr.post_zip_code "Zip/Post Code",
                                    addr.state_code "State Code"
                               FROM site st LEFT OUTER JOIN address addr
                                    ON st.address_id = addr.address_id
                                    LEFT OUTER JOIN country cntry
                                    ON addr.country_id = cntry.country_id
                              WHERE st.customer_id = in_customerid
                                AND (   st.NAME IS NOT NULL
                                     OR st.main_site_flag !=
                                              pkg_constants.con_activeflag_yes
                                    )
                           ORDER BY st.site_id;
                     END IF;
                  END;
            END CASE;
         END;
      END IF;
   END;

   PROCEDURE spd_quote_site (
      in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
      in_siteid          IN       VARCHAR2,
      in_modifiedby      IN       quote_site.modified_by%TYPE,
      out_status         OUT      NUMBER,
      out_errmsg         OUT      VARCHAR2
   )
   AS
      CURSOR c_siteid
      IS
         SELECT *
           FROM TABLE
                     (CAST (pkg_common.fn_splitdata (in_siteid, '~') AS varchar2_ntt
                           )
                     );

      v_cntqoutesite   NUMBER;
      v_cntaccqref     NUMBER;
      v_cntlineitem    NUMBER;
      v_cntcpeqref     NUMBER;
      v_siteid         site.site_id%TYPE;
      v_quotesiteid    quote_site.quote_site_id%TYPE;
   BEGIN
      OPEN c_siteid;

      LOOP
         FETCH c_siteid
          INTO v_siteid;

         EXIT WHEN c_siteid%NOTFOUND;

         SELECT COUNT (*)
           INTO v_cntqoutesite
           FROM quote_site
          WHERE quote_header_id = in_quoteheaderid
            AND site_id = v_siteid
            AND active = pkg_constants.con_activeflag_yes;

         SELECT COUNT (*)
           INTO v_cntlineitem
           FROM line_item
          WHERE quote_header_id = in_quoteheaderid
            AND site_id = v_siteid
            AND active = pkg_constants.con_activeflag_yes;

         IF (v_cntqoutesite != 0)
         THEN
            BEGIN
               SELECT quote_site_id
                 INTO v_quotesiteid
                 FROM quote_site
                WHERE quote_header_id = in_quoteheaderid
                  AND site_id = v_siteid
                  AND active = pkg_constants.con_activeflag_yes;

               SELECT COUNT (*)
                 INTO v_cntaccqref
                 FROM access_qref
                WHERE quote_site_id = v_quotesiteid;

               SELECT COUNT (*)
                 INTO v_cntcpeqref
                 FROM cpe_qref
                WHERE quote_site_id = v_quotesiteid;

               IF (v_cntaccqref != 0)
               THEN
                  BEGIN
                     --delete access_caveat and access_qref
                     DELETE FROM access_caveat
                           WHERE access_qref_id IN (
                                          SELECT access_qref_id
                                            FROM access_qref
                                           WHERE quote_site_id =
                                                                v_quotesiteid);

                     DELETE FROM access_qref
                           WHERE quote_site_id = v_quotesiteid;
                  END;
               END IF;

               IF (v_cntcpeqref != 0)
               THEN
                  BEGIN
                     --delete cpe_caveat and cpe_qref
                     DELETE FROM cpe_caveat
                           WHERE cpe_qref_id IN (
                                          SELECT cpe_qref_id
                                            FROM cpe_qref
                                           WHERE quote_site_id =
                                                                v_quotesiteid);

                     DELETE FROM cpe_qref
                           WHERE quote_site_id = v_quotesiteid;
                  END;
               END IF;
            END;
         END IF;

         IF (v_cntlineitem != 0)
         THEN
            BEGIN
               --update line_item_detail and price_line_item_detail
               UPDATE line_item_detail
                  SET active = pkg_constants.con_activeflag_no,
                      modified_by = in_modifiedby,
                      modified_date = SYSDATE
                WHERE line_item_id IN (
                         SELECT line_item_id
                           FROM line_item
                          WHERE quote_header_id = in_quoteheaderid
                            AND site_id = v_siteid
                            AND active = pkg_constants.con_activeflag_yes);

               UPDATE price_line_item_detail
                  SET active = pkg_constants.con_activeflag_no,
                      modified_by = in_modifiedby,
                      modified_date = SYSDATE
                WHERE line_item_id IN (
                         SELECT line_item_id
                           FROM line_item
                          WHERE quote_header_id = in_quoteheaderid
                            AND site_id = v_siteid
                            AND active = pkg_constants.con_activeflag_yes);
            END;
         END IF;

         --update line_item and quote_site
         UPDATE line_item
            SET active = pkg_constants.con_activeflag_no,
                modified_by = in_modifiedby,
                modified_date = SYSDATE
          WHERE quote_header_id = in_quoteheaderid AND site_id = v_siteid;

         UPDATE quote_site
            SET active = pkg_constants.con_activeflag_no,
                modified_by = in_modifiedby,
                modified_date = SYSDATE
          WHERE quote_header_id = in_quoteheaderid AND site_id = v_siteid;

          --update bid_request_status this code is added on 24-Mar-2011 by Nagendra

          UPDATE bid_request_status
             SET active = pkg_constants.con_activeflag_no,
                 modified_by = in_modifiedby,
                 modified_date = SYSDATE
           WHERE quote_header_id = in_quoteheaderid AND site_id = v_siteid;


      END LOOP;

      out_status := pkg_constants.con_status_success;
      --COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         out_errmsg := SQLERRM;
         --ROLLBACK;
   END;

   PROCEDURE spi_bulk_upload (
      --returns site id and status for each individual upload
      --modified on 30/12/2009 to insert technical contact details
      in_customerid   IN       customer.customer_id%TYPE,
      in_site         IN       CLOB,
      in_batchid      IN       site_bulk_upload.batch_id%TYPE,
      in_filename     IN       site_bulk_upload.file_name%TYPE,
      in_createdby    IN       site.created_by%TYPE,
      out_batchid     OUT      site_bulk_upload.batch_id%TYPE,
      out_nextsite    OUT      site.NAME%TYPE
   )         --returns the site id and status of insert for each site uploaded
   AS
      CURSOR c_sitedetails
      IS
         SELECT *
           FROM TABLE
                   (CAST
                       (pkg_common.fn_splitbulkupload (in_site, '|') AS varchar2_clob
                       )
                   );

      v_tsitename       t_sitename;
      v_troom           t_room;
      v_tfloor          t_floor;
      v_tbldgno         t_bldgno;
      v_taddrline1      t_addrline1;
      v_taddrline2      t_addrline2;
      v_ttelareacode    t_telareacode;
      v_tcity           t_city;
      v_tstate          t_state;
      v_tcountry        t_country;
      v_tpostcode       t_postcode;
      v_tprilastname    t_prilastname;
      v_tprifirstname   t_prifirstname;
      v_tpriemail       t_priemail;
      v_tprifax         t_prifax;
      v_tpriphone       t_priphone;
      v_tprimobile      t_primobile;
      v_tprijob         t_prijob;
      v_tseclastname    t_seclastname;
      v_tsecfirstname   t_secfirstname;
      v_tsecemail       t_secemail;
      v_tsecfax         t_secfax;
      v_tsecphone       t_secphone;
      v_tsecmobile      t_secmobile;
      v_tsecjob         t_secjob;
      v_addressid       address.address_id%TYPE;
      v_row             VARCHAR2 (4000);
      v_i               NUMBER                           := 0;
      v_rowcount        NUMBER;
      v_countryid       country.country_id%TYPE;
      v_pricontactid    site.primary_contact_id%TYPE;
      v_seccontactid    site.secondary_contact_id%TYPE;
      v_siteid          site.site_id%TYPE;
      v_fldcnt          NUMBER;
      v_batchid         site_bulk_upload.batch_id%TYPE;
      v_currsite        VARCHAR2 (2000);
      -- v_currsite        site.NAME%TYPE;
      v_errmsg          VARCHAR2 (100);
      v_kgiflag         NUMBER                           := 1;
      v_kgitype         VARCHAR2 (100);
      --v_kgitype         kgi_country.kgi_type%TYPE;
      v_ttechfname      t_techfirstname;
      v_ttechlname      t_techlastname;
      v_ttechjob        t_techjob;
      v_ttechemail      t_techemail;
      v_ttechphone      t_techphone;
      v_ttechmobile     t_techmobile;
      v_ttechfax        t_techfax;
      v_techcontactid   contact.contact_id%TYPE;
      v_contactcnt      NUMBER;
      success           SMALLINT                         := 1;
   BEGIN
      OPEN c_sitedetails;

      --if the insert belongs the new batch id or same batch.
      IF (in_batchid IS NULL)
      THEN
         BEGIN
            INSERT INTO site_bulk_upload
                        (batch_id, file_name, created_by, created_date
                        )
                 VALUES (batch_id.NEXTVAL, in_filename, in_createdby, SYSDATE
                        )
              RETURNING batch_id
                   INTO v_batchid;
         END;
      ELSE
         BEGIN
            v_batchid := in_batchid;
         END;
      END IF;

      out_batchid := v_batchid;
      -- COMMIT;

      IF (in_site IS NOT NULL)
      THEN
         BEGIN
            LOOP
               FETCH c_sitedetails
                INTO v_row;

               EXIT WHEN c_sitedetails%NOTFOUND;

               --check the number of input parameters
               SELECT pkg_common.fn_countbulkupload (v_row, '~')
                 INTO v_fldcnt
                 FROM DUAL;

               v_currsite := SUBSTR (v_row, 1, INSTR (v_row, '~', 1, 1) - 1);

               --if number parameters is incorrect, doesnot insert the values into the
               --table types
               IF (v_fldcnt = 31
                  )               --total 32 parameters modified on 30/12/2009
               THEN
                  BEGIN
                     v_i := v_i + 1;
                     v_tsitename (v_i) :=
                               SUBSTR (v_row, 1, INSTR (v_row, '~', 1, 1) - 1);
                     v_row :=
                        SUBSTR (v_row,
                                INSTR (v_row, '~', 1, 1) + 1,
                                LENGTH (v_row) - INSTR (v_row, '~', 1, 1)
                               );
                     v_tcountry (v_i) :=
                                SUBSTR (v_row, 1, INSTR (v_row, '~', 1, 1) - 1);
                     v_row :=
                        SUBSTR (v_row,
                                INSTR (v_row, '~', 1, 1) + 1,
                                LENGTH (v_row) - INSTR (v_row, '~', 1, 1)
                               );
                     v_tcity (v_i) :=
                                SUBSTR (v_row, 1, INSTR (v_row, '~', 1, 1) - 1);
                     v_row :=
                        SUBSTR (v_row,
                                INSTR (v_row, '~', 1, 1) + 1,
                                LENGTH (v_row) - INSTR (v_row, '~', 1, 1)
                               );
                     v_tbldgno (v_i) :=
                                SUBSTR (v_row, 1, INSTR (v_row, '~', 1, 1) - 1);
                     v_row :=
                        SUBSTR (v_row,
                                INSTR (v_row, '~', 1, 1) + 1,
                                LENGTH (v_row) - INSTR (v_row, '~', 1, 1)
                               );
                     v_taddrline1 (v_i) :=
                                SUBSTR (v_row, 1, INSTR (v_row, '~', 1, 1) - 1);
                     v_row :=
                        SUBSTR (v_row,
                                INSTR (v_row, '~', 1, 1) + 1,
                                LENGTH (v_row) - INSTR (v_row, '~', 1, 1)
                               );
                     v_taddrline2 (v_i) :=
                                SUBSTR (v_row, 1, INSTR (v_row, '~', 1, 1) - 1);
                     v_row :=
                        SUBSTR (v_row,
                                INSTR (v_row, '~', 1, 1) + 1,
                                LENGTH (v_row) - INSTR (v_row, '~', 1, 1)
                               );
                     v_tpostcode (v_i) :=
                                SUBSTR (v_row, 1, INSTR (v_row, '~', 1, 1) - 1);
                     v_row :=
                        SUBSTR (v_row,
                                INSTR (v_row, '~', 1, 1) + 1,
                                LENGTH (v_row) - INSTR (v_row, '~', 1, 1)
                               );
                     v_tstate (v_i) :=
                                SUBSTR (v_row, 1, INSTR (v_row, '~', 1, 1) - 1);
                     v_row :=
                        SUBSTR (v_row,
                                INSTR (v_row, '~', 1, 1) + 1,
                                LENGTH (v_row) - INSTR (v_row, '~', 1, 1)
                               );
                     v_ttelareacode (v_i) :=
                                SUBSTR (v_row, 1, INSTR (v_row, '~', 1, 1) - 1);
                     v_row :=
                        SUBSTR (v_row,
                                INSTR (v_row, '~', 1, 1) + 1,
                                LENGTH (v_row) - INSTR (v_row, '~', 1, 1)
                               );
                     v_troom (v_i) :=
                                SUBSTR (v_row, 1, INSTR (v_row, '~', 1, 1) - 1);
                     v_row :=
                        SUBSTR (v_row,
                                INSTR (v_row, '~', 1, 1) + 1,
                                LENGTH (v_row) - INSTR (v_row, '~', 1, 1)
                               );
                     v_tfloor (v_i) :=
                                SUBSTR (v_row, 1, INSTR (v_row, '~', 1, 1) - 1);
                     v_row :=
                        SUBSTR (v_row,
                                INSTR (v_row, '~', 1, 1) + 1,
                                LENGTH (v_row) - INSTR (v_row, '~', 1, 1)
                               );
                     v_tprilastname (v_i) :=
                                SUBSTR (v_row, 1, INSTR (v_row, '~', 1, 1) - 1);
                     v_row :=
                        SUBSTR (v_row,
                                INSTR (v_row, '~', 1, 1) + 1,
                                LENGTH (v_row) - INSTR (v_row, '~', 1, 1)
                               );
                     v_tprifirstname (v_i) :=
                                SUBSTR (v_row, 1, INSTR (v_row, '~', 1, 1) - 1);
                     v_row :=
                        SUBSTR (v_row,
                                INSTR (v_row, '~', 1, 1) + 1,
                                LENGTH (v_row) - INSTR (v_row, '~', 1, 1)
                               );
                     v_tprijob (v_i) :=
                                SUBSTR (v_row, 1, INSTR (v_row, '~', 1, 1) - 1);
                     v_row :=
                        SUBSTR (v_row,
                                INSTR (v_row, '~', 1, 1) + 1,
                                LENGTH (v_row) - INSTR (v_row, '~', 1, 1)
                               );
                     v_tpriemail (v_i) :=
                                SUBSTR (v_row, 1, INSTR (v_row, '~', 1, 1) - 1);
                     v_row :=
                        SUBSTR (v_row,
                                INSTR (v_row, '~', 1, 1) + 1,
                                LENGTH (v_row) - INSTR (v_row, '~', 1, 1)
                               );
                     v_tpriphone (v_i) :=
                                SUBSTR (v_row, 1, INSTR (v_row, '~', 1, 1) - 1);
                     v_row :=
                        SUBSTR (v_row,
                                INSTR (v_row, '~', 1, 1) + 1,
                                LENGTH (v_row) - INSTR (v_row, '~', 1, 1)
                               );
                     v_tprimobile (v_i) :=
                                SUBSTR (v_row, 1, INSTR (v_row, '~', 1, 1) - 1);
                     v_row :=
                        SUBSTR (v_row,
                                INSTR (v_row, '~', 1, 1) + 1,
                                LENGTH (v_row) - INSTR (v_row, '~', 1, 1)
                               );
                     v_tprifax (v_i) :=
                                SUBSTR (v_row, 1, INSTR (v_row, '~', 1, 1) - 1);
                     v_row :=
                        SUBSTR (v_row,
                                INSTR (v_row, '~', 1, 1) + 1,
                                LENGTH (v_row) - INSTR (v_row, '~', 1, 1)
                               );
                     v_tseclastname (v_i) :=
                                SUBSTR (v_row, 1, INSTR (v_row, '~', 1, 1) - 1);
                     v_row :=
                        SUBSTR (v_row,
                                INSTR (v_row, '~', 1, 1) + 1,
                                LENGTH (v_row) - INSTR (v_row, '~', 1, 1)
                               );
                     v_tsecfirstname (v_i) :=
                                SUBSTR (v_row, 1, INSTR (v_row, '~', 1, 1) - 1);
                     v_row :=
                        SUBSTR (v_row,
                                INSTR (v_row, '~', 1, 1) + 1,
                                LENGTH (v_row) - INSTR (v_row, '~', 1, 1)
                               );
                     v_tsecjob (v_i) :=
                                SUBSTR (v_row, 1, INSTR (v_row, '~', 1, 1) - 1);
                     v_row :=
                        SUBSTR (v_row,
                                INSTR (v_row, '~', 1, 1) + 1,
                                LENGTH (v_row) - INSTR (v_row, '~', 1, 1)
                               );
                     v_tsecemail (v_i) :=
                                SUBSTR (v_row, 1, INSTR (v_row, '~', 1, 1) - 1);
                     v_row :=
                        SUBSTR (v_row,
                                INSTR (v_row, '~', 1, 1) + 1,
                                LENGTH (v_row) - INSTR (v_row, '~', 1, 1)
                               );
                     v_tsecphone (v_i) :=
                                SUBSTR (v_row, 1, INSTR (v_row, '~', 1, 1) - 1);
                     v_row :=
                        SUBSTR (v_row,
                                INSTR (v_row, '~', 1, 1) + 1,
                                LENGTH (v_row) - INSTR (v_row, '~', 1, 1)
                               );
                     v_tsecmobile (v_i) :=
                                SUBSTR (v_row, 1, INSTR (v_row, '~', 1, 1) - 1);
                     v_row :=
                        SUBSTR (v_row,
                                INSTR (v_row, '~', 1, 1) + 1,
                                LENGTH (v_row) - INSTR (v_row, '~', 1, 1)
                               );
                     v_tsecfax (v_i) :=
                                SUBSTR (v_row, 1, INSTR (v_row, '~', 1, 1) - 1);
                     v_row :=
                        SUBSTR (v_row,
                                INSTR (v_row, '~', 1, 1) + 1,
                                LENGTH (v_row) - INSTR (v_row, '~', 1, 1)
                               );
                     v_ttechlname (v_i) :=
                                SUBSTR (v_row, 1, INSTR (v_row, '~', 1, 1) - 1);
                     v_row :=
                        SUBSTR (v_row,
                                INSTR (v_row, '~', 1, 1) + 1,
                                LENGTH (v_row) - INSTR (v_row, '~', 1, 1)
                               );
                     v_ttechfname (v_i) :=
                                SUBSTR (v_row, 1, INSTR (v_row, '~', 1, 1) - 1);
                     v_row :=
                        SUBSTR (v_row,
                                INSTR (v_row, '~', 1, 1) + 1,
                                LENGTH (v_row) - INSTR (v_row, '~', 1, 1)
                               );
                     v_ttechjob (v_i) :=
                                SUBSTR (v_row, 1, INSTR (v_row, '~', 1, 1) - 1);
                     v_row :=
                        SUBSTR (v_row,
                                INSTR (v_row, '~', 1, 1) + 1,
                                LENGTH (v_row) - INSTR (v_row, '~', 1, 1)
                               );
                     v_ttechemail (v_i) :=
                                SUBSTR (v_row, 1, INSTR (v_row, '~', 1, 1) - 1);
                     v_row :=
                        SUBSTR (v_row,
                                INSTR (v_row, '~', 1, 1) + 1,
                                LENGTH (v_row) - INSTR (v_row, '~', 1, 1)
                               );
                     v_ttechphone (v_i) :=
                                SUBSTR (v_row, 1, INSTR (v_row, '~', 1, 1) - 1);
                     v_row :=
                        SUBSTR (v_row,
                                INSTR (v_row, '~', 1, 1) + 1,
                                LENGTH (v_row) - INSTR (v_row, '~', 1, 1)
                               );
                     v_ttechmobile (v_i) :=
                                SUBSTR (v_row, 1, INSTR (v_row, '~', 1, 1) - 1);
                     v_row :=
                        SUBSTR (v_row,
                                INSTR (v_row, '~', 1, 1) + 1,
                                LENGTH (v_row) - INSTR (v_row, '~', 1, 1)
                               );
                     v_ttechfax (v_i) := v_row;
                  END;
               ELSE
                  BEGIN
                     INSERT INTO site_log
                                 (site_log_id, batch_id,
                                  site_name,
                                  status,
                                  reason,
                                  created_by, created_date
                                 )
                          VALUES (site_log_id.NEXTVAL, v_batchid,
                                  SUBSTR (v_currsite, 1, 100),
                                  pkg_constants.con_status_failure,
                                  'Invalid number of parameters',
                                  in_createdby, SYSDATE
                                 );

                     -- COMMIT;
                  END;
               END IF;
            END LOOP;

            CLOSE c_sitedetails;

            -- SET TRANSACTION READ WRITE NAME 'site_bulk_upload_page';
            BEGIN
               v_i := v_tsitename.FIRST;

               IF (v_i IS NOT NULL)
               THEN
                  BEGIN
                     FOR i IN v_tsitename.FIRST .. v_tsitename.LAST
                     LOOP
                        v_currsite := v_tsitename (i);
                        v_kgiflag := 1;

                        IF (i = v_tsitename.LAST)  --if this is the last site
                        THEN
                           out_nextsite := NULL;
                        ELSE
                           out_nextsite :=
                                         SUBSTR (v_tsitename (i + 1), 1, 100);
                        END IF;

                        SELECT COUNT (*)
                          INTO v_rowcount
                          FROM country
                         WHERE UPPER (REPLACE (NAME, '''')) =
                                        UPPER (REPLACE (v_tcountry (i), ''''));

                        IF (v_rowcount = 0
                           )           --country doesnt exist in country table
                        THEN
                           BEGIN
                              INSERT INTO site_log
                                          (site_log_id, batch_id,
                                           site_name,
                                           status,
                                           reason, created_by,
                                           created_date
                                          )
                                   VALUES (site_log_id.NEXTVAL, v_batchid,
                                           SUBSTR (v_currsite, 1, 100),
                                           pkg_constants.con_status_failure,
                                           'Invalid Country', in_createdby,
                                           SYSDATE
                                          );
                           END;
                        ELSE
                           BEGIN
                              SELECT country_id
                                INTO v_countryid
                                FROM country
                               WHERE UPPER (REPLACE (NAME, '''')) =
                                        UPPER (REPLACE (v_tcountry (i), ''''));

--                              SELECT COUNT (*)
--                                INTO v_rowcount
--                                FROM kgi_country
--                               WHERE country_id = v_countryid;

                              --                                --kgi check from PPSR
                              SELECT COUNT (*)
                                INTO v_rowcount
                                FROM ppsr_owner.ppsr_kgi_data_v@dblink_ppsr
                               WHERE UPPER (REPLACE ("Country", '''')) =
                                        UPPER (REPLACE (v_tcountry (i), ''''));

                              IF (v_rowcount != 0)
                              THEN
                                 BEGIN
                                    --------------KGI Check------------------
--                                    SELECT kgi_type
--                                      INTO v_kgitype
--                                      FROM kgi_country
--                                     WHERE country_id = v_countryid;

                                    --kgi check from PPSR
                                    SELECT DISTINCT "Kgi Type"
                                               INTO v_kgitype
                                               FROM ppsr_owner.ppsr_kgi_data_v@dblink_ppsr
                                              WHERE UPPER (REPLACE ("Country",
                                                                    ''''
                                                                   )
                                                          ) =
                                                       UPPER
                                                          (REPLACE
                                                               (v_tcountry (i),
                                                                ''''
                                                               )
                                                          );

                                    IF (UPPER (v_kgitype) LIKE '%CITY%')
                                    THEN
                                       BEGIN
                                          IF (v_tcity (i) IS NULL)
                                          THEN
                                             v_kgiflag := 0;
                                          END IF;
                                       END;
                                    END IF;

                                    IF (UPPER (v_kgitype) LIKE '%POST CODE%')
                                    THEN
                                       BEGIN
                                          IF (v_tpostcode (i) IS NULL)
                                          THEN
                                             v_kgiflag := 0;
                                          END IF;
                                       END;
                                    END IF;

                                    IF (   UPPER (v_kgitype) LIKE
                                                               '%STREET NAME%'
                                        OR UPPER (v_kgitype) LIKE
                                                             '%STREET NUMBER%'
                                       )
                                    THEN
                                       BEGIN
                                          IF (v_taddrline1 (i) IS NULL)
                                          THEN
                                             v_kgiflag := 0;
                                          END IF;
                                       END;
                                    END IF;

                                    IF (UPPER (v_kgitype) LIKE
                                                       '%TELEPHONE AREA CODE%'
                                       )
                                    THEN
                                       BEGIN
                                          IF (v_ttelareacode (i) IS NULL)
                                          THEN
                                             v_kgiflag := 0;
                                          END IF;
                                       END;
                                    END IF;

                                    IF (UPPER (v_kgitype) LIKE '%DISTRICT%')
                                    THEN
                                       BEGIN
                                          IF (v_taddrline2 (i) IS NULL)
                                          THEN
                                             v_kgiflag := 0;
                                          END IF;
                                       END;
                                    END IF;
                                 END;
                              END IF;

------------------------------------------------
                              IF (v_kgiflag = 1)
                              THEN
                                 success := 1;

                                 BEGIN
                                    SELECT COUNT (*)
                                      INTO v_rowcount
                                      FROM site
                                     WHERE UPPER (NAME) =
                                                       UPPER (v_tsitename (i))
                                       AND customer_id = in_customerid;

                                    IF (v_rowcount = 0)   --site doesnot exist
                                    THEN
                                       BEGIN
                                          INSERT INTO address
                                                      (address_id,
                                                       country_id,
                                                       building_number,
                                                       address_line1,
                                                       city,
                                                       state,
                                                       post_zip_code,
                                                       room,
                                                       FLOOR,
                                                       address_line2,
                                                       created_by,
                                                       created_date
                                                      )
                                               VALUES (address_id.NEXTVAL,
                                                       v_countryid,
                                                       v_tbldgno (i),
                                                       v_taddrline1 (i),
                                                       v_tcity (i),
                                                       v_tstate (i),
                                                       v_tpostcode (i),
                                                       v_troom (i),
                                                       v_tfloor (i),
                                                       v_taddrline2 (i),
                                                       in_createdby,
                                                       SYSDATE ()
                                                      )
                                            RETURNING address_id
                                                 INTO v_addressid;

                                          INSERT INTO site
                                                      (site_id,
                                                       NAME,
                                                       address_id,
                                                       customer_id,
                                                       telephone_area_code,
                                                       created_by,
                                                       created_date,
                                                       customer_report_site_name,
                                                       batch_id
                                                      )
                                               VALUES (site_id.NEXTVAL,
                                                       v_tsitename (i),
                                                       v_addressid,
                                                       in_customerid,
                                                       --  v_pricontactid,
                                                        -- v_seccontactid,
                                                       v_ttelareacode (i),
                                                       in_createdby,
                                                       SYSDATE,
                                                       v_tsitename (i),
                                                       v_batchid
                                                      )
                                            RETURNING site_id
                                                 INTO v_siteid;

                                          --insert primary contact details added on 30/12/2009
                                          IF (   v_tprifirstname (i) IS NOT NULL
                                              OR v_tprilastname (i) IS NOT NULL
                                              OR v_tpriemail (i) IS NOT NULL
                                              OR v_tpriphone (i) IS NOT NULL
                                              OR v_tprifax (i) IS NOT NULL
                                             )
                                          THEN
                                             BEGIN
                                                INSERT INTO contact
                                                            (contact_id,
                                                             first_name,
                                                             last_name,
                                                             phone_number,
                                                             mobile_number,
                                                             fax,
                                                             job_title,
                                                             contact_type,
                                                             created_by,
                                                             created_date,
                                                             email
                                                            )
                                                     VALUES (contact_id.NEXTVAL,
                                                             v_tprifirstname
                                                                           (i),
                                                             v_tprilastname
                                                                           (i),
                                                             v_tpriphone (i),
                                                             v_tprimobile (i),
                                                             v_tprifax (i),
                                                             v_tprijob (i),
                                                             pkg_constants.con_primary_sitecontact,
                                                             in_createdby,
                                                             SYSDATE (),
                                                             v_tpriemail (i)
                                                            )
                                                  RETURNING contact_id
                                                       INTO v_pricontactid;

                                                INSERT INTO site_contact_detail
                                                            (site_contact_detail_id,
                                                             site_id,
                                                             contact_id,
                                                             created_by,
                                                             created_date
                                                            )
                                                     VALUES (site_contact_detail_id.NEXTVAL,
                                                             v_siteid,
                                                             v_pricontactid,
                                                             in_createdby,
                                                             SYSDATE
                                                            );
                                             END;
                                          ELSE
                                             BEGIN
                                                v_pricontactid := NULL;
                                             END;
                                          END IF;

                                          --insert secondary contact details added on 30/12/2009
                                          IF (   v_tsecfirstname (i) IS NOT NULL
                                              OR v_tseclastname (i) IS NOT NULL
                                              OR v_tsecemail (i) IS NOT NULL
                                              OR v_tsecphone (i) IS NOT NULL
                                              OR v_tsecfax (i) IS NOT NULL
                                             )
                                          THEN
                                             BEGIN
                                                INSERT INTO contact
                                                            (contact_id,
                                                             first_name,
                                                             last_name,
                                                             phone_number,
                                                             mobile_number,
                                                             fax,
                                                             job_title,
                                                             contact_type,
                                                             created_by,
                                                             created_date,
                                                             email
                                                            )
                                                     VALUES (contact_id.NEXTVAL,
                                                             v_tsecfirstname
                                                                           (i),
                                                             v_tseclastname
                                                                           (i),
                                                             v_tsecphone (i),
                                                             v_tsecmobile (i),
                                                             v_tsecfax (i),
                                                             v_tsecjob (i),
                                                             pkg_constants.con_secondary_sitecontact,
                                                             in_createdby,
                                                             SYSDATE (),
                                                             v_tsecemail (i)
                                                            )
                                                  RETURNING contact_id
                                                       INTO v_seccontactid;

                                                INSERT INTO site_contact_detail
                                                            (site_contact_detail_id,
                                                             site_id,
                                                             contact_id,
                                                             created_by,
                                                             created_date
                                                            )
                                                     VALUES (site_contact_detail_id.NEXTVAL,
                                                             v_siteid,
                                                             v_seccontactid,
                                                             in_createdby,
                                                             SYSDATE
                                                            );
                                             END;
                                          ELSE
                                             --added on 22/12/2009 to handle null secondary contact details
                                             BEGIN
                                                v_seccontactid := NULL;
                                             END;
                                          END IF;

                                          --insert technical contact details added on 30/12/2009
                                          IF (   v_ttechfname (i) IS NOT NULL
                                              OR v_ttechlname (i) IS NOT NULL
                                              OR v_ttechemail (i) IS NOT NULL
                                              OR v_ttechphone (i) IS NOT NULL
                                              OR v_ttechfax (i) IS NOT NULL
                                             )
                                          THEN
                                             BEGIN
                                                INSERT INTO contact
                                                            (contact_id,
                                                             first_name,
                                                             last_name,
                                                             phone_number,
                                                             mobile_number,
                                                             fax,
                                                             job_title,
                                                             contact_type,
                                                             created_by,
                                                             created_date,
                                                             email
                                                            )
                                                     VALUES (contact_id.NEXTVAL,
                                                             v_ttechfname (i),
                                                             v_ttechlname (i),
                                                             v_ttechphone (i),
                                                             v_ttechmobile (i),
                                                             v_ttechfax (i),
                                                             v_ttechjob (i),
                                                             pkg_constants.con_tech_sitecontact,
                                                             in_createdby,
                                                             SYSDATE (),
                                                             v_ttechemail (i)
                                                            )
                                                  RETURNING contact_id
                                                       INTO v_techcontactid;

                                                INSERT INTO site_contact_detail
                                                            (site_contact_detail_id,
                                                             site_id,
                                                             contact_id,
                                                             created_by,
                                                             created_date
                                                            )
                                                     VALUES (site_contact_detail_id.NEXTVAL,
                                                             v_siteid,
                                                             v_techcontactid,
                                                             in_createdby,
                                                             SYSDATE
                                                            );
                                             END;
                                          ELSE
                                             --added on 22/12/2009 to handle null secondary contact details
                                             BEGIN
                                                v_techcontactid := NULL;
                                             END;
                                          END IF;
                                       END;
                                    ELSE          --update if row is duplicate
                                       BEGIN
                                          v_contactcnt := NULL;

                                          SELECT site_id, address_id
                                            INTO v_siteid, v_addressid
                                            FROM site
                                           WHERE UPPER (NAME) =
                                                       UPPER (v_tsitename (i))
                                             AND customer_id = in_customerid;

                                          --Modified on 23-Jan-2010, do not allow any modification of a site
                                          --if it is associated to a quote.
                                          SELECT COUNT (*)
                                            INTO v_rowcount
                                            FROM quote_site
                                           WHERE site_id = v_siteid
                                             AND active =
                                                    pkg_constants.con_activeflag_yes;

                                          IF (v_rowcount = 0)
                                          THEN
                                             BEGIN
                                                --update primary contact details added on 30/12/2009
                                                SELECT COUNT (*)
                                                  INTO v_contactcnt
                                                  FROM site s,
                                                       site_contact_detail sc,
                                                       contact c
                                                 WHERE s.site_id = sc.site_id
                                                   AND sc.contact_id =
                                                                  c.contact_id
                                                   AND UPPER (c.contact_type) =
                                                          UPPER
                                                             (pkg_constants.con_primary_sitecontact
                                                             )
                                                   AND s.site_id = v_siteid
                                                   AND customer_id =
                                                                 in_customerid;

                                                IF (v_contactcnt <> 0)
                                                THEN
                                                   BEGIN
                                                      SELECT sc.contact_id
                                                        INTO v_pricontactid
                                                        FROM site s,
                                                             site_contact_detail sc,
                                                             contact c
                                                       WHERE s.site_id =
                                                                    sc.site_id
                                                         AND sc.contact_id =
                                                                  c.contact_id
                                                         AND UPPER
                                                                (c.contact_type
                                                                ) =
                                                                UPPER
                                                                   (pkg_constants.con_primary_sitecontact
                                                                   )
                                                         AND s.site_id =
                                                                      v_siteid
                                                         AND customer_id =
                                                                 in_customerid;
                                                   END;
                                                ELSE
                                                   BEGIN
                                                      v_pricontactid := NULL;
                                                   END;
                                                END IF;

                                                --update secondary contact details added on 30/12/2009
                                                SELECT COUNT (*)
                                                  INTO v_contactcnt
                                                  FROM site s,
                                                       site_contact_detail sc,
                                                       contact c
                                                 WHERE s.site_id = sc.site_id
                                                   AND sc.contact_id =
                                                                  c.contact_id
                                                   AND UPPER (c.contact_type) =
                                                          UPPER
                                                             (pkg_constants.con_secondary_sitecontact
                                                             )
                                                   AND s.site_id = v_siteid
                                                   AND customer_id =
                                                                 in_customerid;

                                                IF (v_contactcnt <> 0)
                                                THEN
                                                   BEGIN
                                                      SELECT sc.contact_id
                                                        INTO v_seccontactid
                                                        FROM site s,
                                                             site_contact_detail sc,
                                                             contact c
                                                       WHERE s.site_id =
                                                                    sc.site_id
                                                         AND sc.contact_id =
                                                                  c.contact_id
                                                         AND UPPER
                                                                (c.contact_type
                                                                ) =
                                                                UPPER
                                                                   (pkg_constants.con_secondary_sitecontact
                                                                   )
                                                         AND s.site_id =
                                                                      v_siteid
                                                         AND customer_id =
                                                                 in_customerid;
                                                   END;
                                                ELSE
                                                   BEGIN
                                                      v_seccontactid := NULL;
                                                   END;
                                                END IF;

                                                --update technical contact details added on 30/12/2009
                                                SELECT COUNT (*)
                                                  INTO v_contactcnt
                                                  FROM site s,
                                                       site_contact_detail sc,
                                                       contact c
                                                 WHERE s.site_id = sc.site_id
                                                   AND sc.contact_id =
                                                                  c.contact_id
                                                   AND UPPER (c.contact_type) =
                                                          UPPER
                                                             (pkg_constants.con_tech_sitecontact
                                                             )
                                                   AND s.site_id = v_siteid
                                                   AND customer_id =
                                                                 in_customerid;

                                                IF (v_contactcnt <> 0)
                                                THEN
                                                   BEGIN
                                                      SELECT sc.contact_id
                                                        INTO v_techcontactid
                                                        FROM site s,
                                                             site_contact_detail sc,
                                                             contact c
                                                       WHERE s.site_id =
                                                                    sc.site_id
                                                         AND sc.contact_id =
                                                                  c.contact_id
                                                         AND UPPER
                                                                (c.contact_type
                                                                ) =
                                                                UPPER
                                                                   (pkg_constants.con_tech_sitecontact
                                                                   )
                                                         AND s.site_id =
                                                                      v_siteid
                                                         AND customer_id =
                                                                 in_customerid;
                                                   END;
                                                ELSE
                                                   BEGIN
                                                      v_techcontactid := NULL;
                                                   END;
                                                END IF;

                                                UPDATE site
                                                   SET modified_by =
                                                                  in_createdby,
                                                       modified_date = SYSDATE,
                                                       customer_report_site_name =
                                                               v_tsitename (i),
                                                       telephone_area_code =
                                                            v_ttelareacode (i)
                                                 WHERE site_id = v_siteid;

                                                UPDATE address
                                                   SET country_id =
                                                                   v_countryid,
                                                       building_number =
                                                                 v_tbldgno (i),
                                                       address_line1 =
                                                              v_taddrline1 (i),
                                                       city = v_tcity (i),
                                                       state = v_tstate (i),
                                                       post_zip_code =
                                                               v_tpostcode (i),
                                                       room = v_troom (i),
                                                       FLOOR = v_tfloor (i),
                                                       address_line2 =
                                                              v_taddrline2 (i),
                                                       modified_by =
                                                                  in_createdby,
                                                       modified_date = SYSDATE
                                                 WHERE address_id =
                                                                   v_addressid;

                                                UPDATE site_contact_detail
                                                   SET modified_by =
                                                                  in_createdby,
                                                       modified_date = SYSDATE
                                                 WHERE site_id = v_siteid;

                                                -- update primary contact
                                                IF (v_pricontactid IS NULL)
                                                THEN
                                                   BEGIN
                                                      IF (   v_tprifirstname
                                                                           (i) IS NOT NULL
                                                          OR v_tprilastname
                                                                           (i) IS NOT NULL
                                                          OR v_tpriemail (i) IS NOT NULL
                                                          OR v_tpriphone (i) IS NOT NULL
                                                          OR v_tprifax (i) IS NOT NULL
                                                         )
                                                      THEN
                                                         BEGIN
                                                            INSERT INTO contact
                                                                        (contact_id,
                                                                         first_name,
                                                                         last_name,
                                                                         phone_number,
                                                                         mobile_number,
                                                                         fax,
                                                                         job_title,
                                                                         created_by,
                                                                         created_date,
                                                                         email,
                                                                         contact_type
                                                                        )
                                                                 VALUES (contact_id.NEXTVAL,
                                                                         v_tprifirstname
                                                                            (i),
                                                                         v_tprilastname
                                                                            (i),
                                                                         v_tpriphone
                                                                            (i),
                                                                         v_tprimobile
                                                                            (i),
                                                                         v_tprifax
                                                                            (i),
                                                                         v_tprijob
                                                                            (i),
                                                                         in_createdby,
                                                                         SYSDATE,
                                                                         v_tpriemail
                                                                            (i),
                                                                         pkg_constants.con_primary_sitecontact
                                                                        )
                                                              RETURNING contact_id
                                                                   INTO v_pricontactid;

                                                            INSERT INTO site_contact_detail
                                                                        (site_contact_detail_id,
                                                                         site_id,
                                                                         contact_id,
                                                                         created_by,
                                                                         created_date
                                                                        )
                                                                 VALUES (site_contact_detail_id.NEXTVAL,
                                                                         v_siteid,
                                                                         v_pricontactid,
                                                                         in_createdby,
                                                                         SYSDATE
                                                                        );
                                                         END;
                                                      END IF;
                                                   END;
                                                ELSE
                                                   BEGIN
                                                      UPDATE contact
                                                         SET first_name =
                                                                v_tprifirstname
                                                                           (i),
                                                             last_name =
                                                                v_tprilastname
                                                                           (i),
                                                             phone_number =
                                                                v_tpriphone
                                                                           (i),
                                                             mobile_number =
                                                                v_tprimobile
                                                                           (i),
                                                             fax =
                                                                 v_tprifax (i),
                                                             job_title =
                                                                 v_tprijob (i),
                                                             contact_type =
                                                                pkg_constants.con_primary_sitecontact,
                                                             email =
                                                                v_tpriemail
                                                                           (i),
                                                             modified_by =
                                                                  in_createdby,
                                                             modified_date =
                                                                       SYSDATE
                                                       WHERE contact_id =
                                                                v_pricontactid;
                                                   END;
                                                END IF;

                                                -- update secondary contact
                                                IF (v_seccontactid IS NULL)
                                                THEN
                                                   BEGIN
                                                      IF (   v_tsecfirstname
                                                                           (i) IS NOT NULL
                                                          OR v_tseclastname
                                                                           (i) IS NOT NULL
                                                          OR v_tsecemail (i) IS NOT NULL
                                                          OR v_tsecphone (i) IS NOT NULL
                                                          OR v_tsecfax (i) IS NOT NULL
                                                         )
                                                      THEN
                                                         BEGIN
                                                            INSERT INTO contact
                                                                        (contact_id,
                                                                         first_name,
                                                                         last_name,
                                                                         phone_number,
                                                                         mobile_number,
                                                                         fax,
                                                                         job_title,
                                                                         created_by,
                                                                         created_date,
                                                                         email,
                                                                         contact_type
                                                                        )
                                                                 VALUES (contact_id.NEXTVAL,
                                                                         v_tsecfirstname
                                                                            (i),
                                                                         v_tseclastname
                                                                            (i),
                                                                         v_tsecphone
                                                                            (i),
                                                                         v_tsecmobile
                                                                            (i),
                                                                         v_tsecfax
                                                                            (i),
                                                                         v_tsecjob
                                                                            (i),
                                                                         in_createdby,
                                                                         SYSDATE,
                                                                         v_tsecemail
                                                                            (i),
                                                                         pkg_constants.con_secondary_sitecontact
                                                                        )
                                                              RETURNING contact_id
                                                                   INTO v_seccontactid;

                                                            INSERT INTO site_contact_detail
                                                                        (site_contact_detail_id,
                                                                         site_id,
                                                                         contact_id,
                                                                         created_by,
                                                                         created_date
                                                                        )
                                                                 VALUES (site_contact_detail_id.NEXTVAL,
                                                                         v_siteid,
                                                                         v_seccontactid,
                                                                         in_createdby,
                                                                         SYSDATE
                                                                        );
                                                         END;
                                                      END IF;
                                                   END;
                                                ELSE
                                                   BEGIN
                                                      UPDATE contact
                                                         SET first_name =
                                                                v_tsecfirstname
                                                                           (i),
                                                             last_name =
                                                                v_tseclastname
                                                                           (i),
                                                             phone_number =
                                                                v_tsecphone
                                                                           (i),
                                                             mobile_number =
                                                                v_tsecmobile
                                                                           (i),
                                                             fax =
                                                                 v_tsecfax (i),
                                                             job_title =
                                                                 v_tsecjob (i),
                                                             contact_type =
                                                                pkg_constants.con_secondary_sitecontact,
                                                             email =
                                                                v_tsecemail
                                                                           (i),
                                                             modified_by =
                                                                  in_createdby,
                                                             modified_date =
                                                                       SYSDATE
                                                       WHERE contact_id =
                                                                v_seccontactid;
                                                   END;
                                                END IF;

                                                IF (v_techcontactid IS NULL)
                                                THEN
                                                   BEGIN
                                                      IF (   v_ttechfname (i) IS NOT NULL
                                                          OR v_ttechlname (i) IS NOT NULL
                                                          OR v_ttechemail (i) IS NOT NULL
                                                          OR v_ttechphone (i) IS NOT NULL
                                                          OR v_ttechfax (i) IS NOT NULL
                                                         )
                                                      THEN
                                                         BEGIN
                                                            INSERT INTO contact
                                                                        (contact_id,
                                                                         first_name,
                                                                         last_name,
                                                                         phone_number,
                                                                         mobile_number,
                                                                         fax,
                                                                         job_title,
                                                                         created_by,
                                                                         created_date,
                                                                         email,
                                                                         contact_type
                                                                        )
                                                                 VALUES (contact_id.NEXTVAL,
                                                                         v_ttechfname
                                                                            (i),
                                                                         v_ttechlname
                                                                            (i),
                                                                         v_ttechphone
                                                                            (i),
                                                                         v_ttechmobile
                                                                            (i),
                                                                         v_ttechfax
                                                                            (i),
                                                                         v_ttechjob
                                                                            (i),
                                                                         in_createdby,
                                                                         SYSDATE,
                                                                         v_ttechemail
                                                                            (i),
                                                                         pkg_constants.con_tech_sitecontact
                                                                        )
                                                              RETURNING contact_id
                                                                   INTO v_techcontactid;

                                                            INSERT INTO site_contact_detail
                                                                        (site_contact_detail_id,
                                                                         site_id,
                                                                         contact_id,
                                                                         created_by,
                                                                         created_date
                                                                        )
                                                                 VALUES (site_contact_detail_id.NEXTVAL,
                                                                         v_siteid,
                                                                         v_techcontactid,
                                                                         in_createdby,
                                                                         SYSDATE
                                                                        );
                                                         END;
                                                      END IF;
                                                   END;
                                                ELSE
                                                   BEGIN
                                                      --update technical contact
                                                      UPDATE contact
                                                         SET first_name =
                                                                v_ttechfname
                                                                           (i),
                                                             last_name =
                                                                v_ttechlname
                                                                           (i),
                                                             phone_number =
                                                                v_ttechphone
                                                                           (i),
                                                             mobile_number =
                                                                v_ttechmobile
                                                                           (i),
                                                             fax =
                                                                v_ttechfax (i),
                                                             job_title =
                                                                v_ttechjob (i),
                                                             contact_type =
                                                                pkg_constants.con_tech_sitecontact,
                                                             email =
                                                                v_ttechemail
                                                                           (i),
                                                             modified_by =
                                                                  in_createdby,
                                                             modified_date =
                                                                       SYSDATE
                                                       WHERE contact_id =
                                                                v_techcontactid;
                                                   END;
                                                END IF;
                                             END;
                                          ELSE
                                             BEGIN
                                                success := 0;

                                                INSERT INTO site_log
                                                            (site_log_id,
                                                             batch_id,
                                                             site_name,
                                                             status,
                                                             reason,
                                                             created_by,
                                                             created_date
                                                            )
                                                     VALUES (site_log_id.NEXTVAL,
                                                             v_batchid,
                                                             SUBSTR
                                                                (v_tsitename
                                                                           (i),
                                                                 1,
                                                                 100
                                                                ),
                                                             pkg_constants.con_status_failure,
                                                                'Cannot update site.Site('
                                                             || v_siteid
                                                             || ') is associated to a Quote',
                                                             in_createdby,
                                                             SYSDATE
                                                            );

                                                -- COMMIT;
                                             END;
                                          END IF;
                                       END;
                                    END IF;

                                    IF success = 1
                                    THEN
                                       BEGIN
                                          --commonly insert success for insertion/duplicate updation
                                          INSERT INTO site_log
                                                      (site_log_id,
                                                       batch_id,
                                                       site_name,
                                                       status,
                                                       created_by,
                                                       created_date
                                                      )
                                               VALUES (site_log_id.NEXTVAL,
                                                       v_batchid,
                                                       SUBSTR (v_currsite,
                                                               1,
                                                               100
                                                              ),
                                                       pkg_constants.con_status_success,
                                                       in_createdby,
                                                       SYSDATE
                                                      );
                                       END;
                                    END IF;

                                    --COMMIT;
                                 --end of site duplicate rowcount loop
                                 END;             --end of kgi check v_kgiflag
                              ELSE
                                 BEGIN
                                    --insert the kgi error value in site_log table
                                    INSERT INTO site_log
                                                (site_log_id,
                                                 batch_id,
                                                 site_name,
                                                 status,
                                                 reason,
                                                 created_by, created_date
                                                )
                                         VALUES (site_log_id.NEXTVAL,
                                                 v_batchid,
                                                 SUBSTR (v_tsitename (i),
                                                         1,
                                                         100
                                                        ),
                                                 pkg_constants.con_status_failure,
                                                    'KGI Error: '
                                                 || v_kgitype
                                                 || ' is mandatory',
                                                 in_createdby, SYSDATE
                                                );

                                    -- COMMIT;
                                 END;
                              END IF;                        --end of kgi flag
                           END;
                        END IF;               ----end of country row count = 0
                     END LOOP;
                  END;
               END IF;
            END;                                          --end of transaction
         END;                                -- end of site_details null check
      ELSE
         BEGIN
            INSERT INTO site_log
                        (site_log_id, batch_id, site_name,
                         status,
                         reason, created_by, created_date
                        )
                 VALUES (site_log_id.NEXTVAL, v_batchid, NULL,
                         pkg_constants.con_status_failure,
                         'No Site details entered', in_createdby, SYSDATE
                        );

            -- COMMIT;
         END;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_errmsg := SQLERRM;
         --ROLLBACK;

         INSERT INTO site_log
                     (site_log_id, batch_id,
                      site_name,
                      status, reason,
                      created_by, created_date
                     )
              VALUES (site_log_id.NEXTVAL, v_batchid,
                      SUBSTR (v_currsite, 1, 100),
                      pkg_constants.con_status_failure, v_errmsg,
                      in_createdby, SYSDATE
                     );

         -- COMMIT;
   END;

   PROCEDURE spi_quote_site (
      in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
      in_siteid          IN       VARCHAR2,
      in_createdby       IN       quote_site.created_by%TYPE,
      out_status         OUT      NUMBER,
      out_errmsg         OUT      VARCHAR2
   )
   AS
      CURSOR c_siteid
      IS
         SELECT *
           FROM TABLE
                     (CAST (pkg_common.fn_splitdata (in_siteid, '~') AS varchar2_ntt
                           )
                     );

      --v_quoteheaderid   quote_header.quote_header_id%TYPE;
      v_rowcount   NUMBER;
      v_siteid     site.site_id%TYPE;
   BEGIN
      OPEN c_siteid;

      LOOP
         FETCH c_siteid
          INTO v_siteid;

         EXIT WHEN c_siteid%NOTFOUND;

         SELECT COUNT (*)
           INTO v_rowcount
           FROM quote_site
          WHERE quote_header_id = in_quoteheaderid
            AND site_id = v_siteid
            AND active = pkg_constants.con_activeflag_yes;

         IF (v_rowcount = 0)
         THEN
            BEGIN
               INSERT INTO quote_site
                           (quote_site_id, site_id,
                            quote_header_id,
                            active, created_by,
                            created_date
                           )
                    VALUES (quote_site_id.NEXTVAL, v_siteid,
                            in_quoteheaderid,
                            pkg_constants.con_activeflag_yes, in_createdby,
                            SYSDATE
                           );
            END;
         END IF;

         --return status as 1 irrespecitve of new insert or duplicate
         out_status := pkg_constants.con_status_success;
         -- COMMIT;
      END LOOP;
   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         out_errmsg := SQLERRM;
--         ROLLBACK;
   END;

   PROCEDURE sps_site_contact (
      --added on 31/12/2009
      in_siteid     IN       site.site_id%TYPE,
      out_contact   OUT      sys_refcursor
   )
   AS
   BEGIN
      OPEN out_contact FOR
         SELECT scd.site_id "Site ID", c.first_name "First Name",
                c.last_name "Last Name", c.job_title "Job Title",
                c.email "Email", c.phone_number "Phone",
                c.mobile_number "Mobile", c.fax "Fax",
                c.contact_type "Contact Type", c.pstn_number "PSTN Number",
                c.primary_notes "Primary Notes"
           FROM site st LEFT OUTER JOIN site_contact_detail scd
                ON st.site_id = scd.site_id
                LEFT OUTER JOIN contact c ON scd.contact_id = c.contact_id
          WHERE st.site_id = in_siteid;
   END;


    PROCEDURE spi_multisite_bulkupload (
       --added on 11/5/2010 for R3
         -- new sites are inserted and all duplicate sites are updated
       in_customerid      IN       site.customer_id%TYPE,
       in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
       in_site            IN       bulkupload_tab,
       in_batchid         IN       site.batch_id%TYPE,
       in_filename        IN       VARCHAR2,
       in_createdby       IN       site.created_by%TYPE,
       out_batchid        OUT      site.batch_id%TYPE,
       out_nextsite       OUT      site.NAME%TYPE
    )
    AS
       v_siteid        site.site_id%TYPE;
       v_batchid       site.batch_id%TYPE;
       v_pricontid     contact.contact_id%TYPE;
       v_seccontid     contact.contact_id%TYPE;
       v_addrid        address.address_id%TYPE;
       v_countryid     address.country_id%TYPE;
       v_currsite      VARCHAR2 (500);
       v_kgiflag       NUMBER;
       v_kgitype       VARCHAR2 (100);
       v_rowcount      NUMBER;
       v_errmsg        VARCHAR2 (200);
       v_pricnt        NUMBER;
       v_seccnt        NUMBER;
       v_qtsitecount   NUMBER;
    BEGIN
       IF (in_batchid IS NULL)
       THEN
          INSERT INTO site_bulk_upload
                      (batch_id, file_name, created_by, created_date
                      )
               VALUES (batch_id.NEXTVAL, in_filename, in_createdby, SYSDATE
                      )
            RETURNING batch_id
                 INTO v_batchid;
       ELSE
          v_batchid := in_batchid;
       END IF;

       out_batchid := v_batchid;

       FOR i IN in_site.FIRST .. in_site.LAST
       LOOP
          v_currsite := in_site (i).o_sitename;
          v_kgiflag := 1;

          IF (i = in_site.LAST)
          THEN
             out_nextsite := NULL;
          ELSE
             out_nextsite := in_site (i + 1).o_sitename;
          END IF;

          SELECT COUNT (*)
            INTO v_rowcount
            FROM country
           WHERE UPPER (REPLACE (NAME, '''')) =
                                     UPPER (REPLACE (in_site (i).o_country, ''''));

          IF (v_rowcount = 0)              --country doesnt exist in country table
          THEN
             BEGIN
                INSERT INTO site_log
                            (site_log_id, batch_id,
                             site_name,
                             status,
                             reason, created_by, created_date
                            )
                     VALUES (site_log_id.NEXTVAL, v_batchid,
                             SUBSTR (v_currsite, 1, 100),
                             pkg_constants.con_status_failure,
                             'Invalid Country', in_createdby, SYSDATE
                            );
             END;
          ELSE
             BEGIN
                SELECT country_id
                  INTO v_countryid
                  FROM country
                 WHERE UPPER (REPLACE (NAME, '''')) =
                                     UPPER (REPLACE (in_site (i).o_country, ''''));

                --kgi check from PPSR
                SELECT COUNT (*)
                  INTO v_rowcount
                  FROM ppsr_owner.ppsr_kgi_data_v@dblink_ppsr
                 WHERE UPPER (REPLACE ("Country", '''')) =
                                     UPPER (REPLACE (in_site (i).o_country, ''''));

                IF (v_rowcount != 0)
                THEN
                   BEGIN
                      SELECT DISTINCT "Kgi Type"
                                 INTO v_kgitype
                                 FROM ppsr_owner.ppsr_kgi_data_v@dblink_ppsr
                                WHERE UPPER (REPLACE ("Country", '''')) =
                                         UPPER (REPLACE (in_site (i).o_country,
                                                         ''''
                                                        )
                                               );

                      IF (UPPER (v_kgitype) LIKE '%CITY%')
                      THEN
                         BEGIN
                            IF (in_site (i).o_city IS NULL)
                            THEN
                               v_kgiflag := 0;
                            END IF;
                         END;
                      END IF;

                      IF (UPPER (v_kgitype) LIKE '%POST CODE%')
                      THEN
                         BEGIN
                            IF (in_site (i).o_postcode IS NULL)
                            THEN
                               v_kgiflag := 0;
                            END IF;
                         END;
                      END IF;

                      IF (   UPPER (v_kgitype) LIKE '%STREET NAME%'
                          OR UPPER (v_kgitype) LIKE '%STREET NUMBER%'
                         )
                      THEN
                         BEGIN
                            IF (in_site (i).o_addrline1 IS NULL)
                            THEN
                               v_kgiflag := 0;
                            END IF;
                         END;
                      END IF;

                      IF (UPPER (v_kgitype) LIKE '%TELEPHONE AREA CODE%')
                      THEN
                         BEGIN
                            IF (in_site (i).o_telareacode IS NULL)
                            THEN
                               v_kgiflag := 0;
                            END IF;
                         END;
                      END IF;

                      IF (UPPER (v_kgitype) LIKE '%DISTRICT%')
                      THEN
                         BEGIN
                            IF (in_site (i).o_addrline2 IS NULL)
                            THEN
                               v_kgiflag := 0;
                            END IF;
                         END;
                      END IF;
                   END;
                END IF;

                IF (v_kgiflag = 0)
                THEN
                   BEGIN
                      INSERT INTO site_log
                                  (site_log_id, batch_id,
                                   site_name,
                                   status,
                                   reason,
                                   created_by, created_date
                                  )
                           VALUES (site_log_id.NEXTVAL, v_batchid,
                                   SUBSTR (v_currsite, 1, 100),
                                   pkg_constants.con_status_failure,
                                   'KGI Error: ' || v_kgitype || ' mandatory',
                                   in_createdby, SYSDATE
                                  );
                   END;
                ELSE
                   BEGIN
                      --duplication check in site table
                      SELECT COUNT (*)
                        INTO v_rowcount
                        FROM site
                       WHERE UPPER (NAME) = UPPER (in_site (i).o_sitename)
                         -- UPPER (TRIM (in_site (i).o_sitename))
                         AND customer_id = in_customerid
                         AND NVL (main_site_flag, 'X') <> 'Y';

                      IF (v_rowcount = 0)
                      THEN
                         BEGIN
                            --new insert
                            INSERT INTO address
                                        (address_id, country_id,
                                         building_number,
                                         address_line1,
                                         city,
                                         state,
                                         post_zip_code,
                                         room,
                                         FLOOR,
                                         address_line2, created_by,
                                         created_date
                                        )
                                 VALUES (address_id.NEXTVAL, v_countryid,
                                         in_site (i).o_bldgno,
                                         in_site (i).o_addrline1,
                                         in_site (i).o_city,
                                         in_site (i).o_state,
                                         in_site (i).o_postcode,
                                         in_site (i).o_room,
                                         in_site (i).o_floor,
                                         in_site (i).o_addrline2, in_createdby,
                                         SYSDATE ()
                                        )
                              RETURNING address_id
                                   INTO v_addrid;

                            INSERT INTO site
                                        (site_id, NAME,
                                         address_id, customer_id,
                                         telephone_area_code, created_by,
                                         created_date, customer_report_site_name,
                                         batch_id, local_business_customer_name,
                                         phone_number,
                                         -- Added on 14/3/2011 as part of R11 iVPN
                                         bfg_site_id,
                                         expedio_site_id
                                        )
                                 VALUES (site_id.NEXTVAL, in_site (i).o_sitename,
                                         v_addrid, in_customerid,
                                         in_site (i).o_telareacode, in_createdby,
                                         SYSDATE, in_site (i).o_sitename,
                                         v_batchid, in_site (i).o_customername,
                                         in_site (i).o_phonenumber,
                                         -- Added on 14/3/2011 as part of R11 iVPN
                                         NVL (TRIM (in_site (i).o_bfgsiteid), null),
                                         in_site (i).o_expediositeid
                                        )
                              RETURNING site_id
                                   INTO v_siteid;

                            IF (   in_site (i).o_prilname IS NOT NULL
                                OR in_site (i).o_prifname IS NOT NULL
                                OR in_site (i).o_priphone IS NOT NULL
                                OR in_site (i).o_primobile IS NOT NULL
                                OR in_site (i).o_priemail IS NOT NULL
                                OR in_site (i).o_prijob IS NOT NULL
                                OR in_site (i).o_prifax IS NOT NULL
                               )
                            THEN
                               BEGIN
                                  INSERT INTO contact
                                              (contact_id,
                                               first_name,
                                               last_name,
                                               phone_number,
                                               mobile_number,
                                               fax,
                                               job_title,
                                               email,
                                               contact_type,
                                               created_by, created_date
                                              )
                                       VALUES (contact_id.NEXTVAL,
                                               in_site (i).o_prifname,
                                               in_site (i).o_prilname,
                                               in_site (i).o_priphone,
                                               in_site (i).o_primobile,
                                               in_site (i).o_prifax,
                                               --     in_site (i).o_prifax,
                                               in_site (i).o_prijob,
                                               in_site (i).o_priemail,
                                               pkg_constants.con_primary_sitecontact,
                                               in_createdby, SYSDATE
                                              )
                                    RETURNING contact_id
                                         INTO v_pricontid;

                                  INSERT INTO site_contact_detail
                                              (site_contact_detail_id,
                                               site_id, contact_id,
                                               created_by, created_date
                                              )
                                       VALUES (site_contact_detail_id.NEXTVAL,
                                               v_siteid, v_pricontid,
                                               in_createdby, SYSDATE
                                              );

                                  UPDATE site
                                     SET primary_contact_id = v_pricontid
                                   WHERE site_id = v_siteid;
                               -------Added by SRK on 28Jun2010
                               END;
                            ELSE
                               BEGIN
                                  v_pricontid := NULL;
                               END;
                            END IF;

                            IF (   in_site (i).o_seclname IS NOT NULL
                                OR in_site (i).o_secfname IS NOT NULL
                                OR in_site (i).o_secphone IS NOT NULL
                                OR in_site (i).o_secmobile IS NOT NULL
                                OR in_site (i).o_secemail IS NOT NULL
                                OR in_site (i).o_secjob IS NOT NULL
                                OR in_site (i).o_secfax IS NOT NULL
                               )
                            THEN
                               INSERT INTO contact
                                           (contact_id,
                                            first_name,
                                            last_name,
                                            phone_number,
                                            mobile_number,
                                            fax,
                                            job_title,
                                            email,
                                            contact_type,
                                            created_by, created_date
                                           )
                                    VALUES (contact_id.NEXTVAL,
                                            in_site (i).o_secfname,
                                            in_site (i).o_seclname,
                                            in_site (i).o_secphone,
                                            in_site (i).o_secmobile,
                                            in_site (i).o_secfax,
                                            --         in_site (i).o_secfax,
                                            in_site (i).o_secjob,
                                            in_site (i).o_secemail,
                                            pkg_constants.con_secondary_sitecontact,
                                            in_createdby, SYSDATE
                                           )
                                 RETURNING contact_id
                                      INTO v_seccontid;

                               INSERT INTO site_contact_detail
                                           (site_contact_detail_id,
                                            site_id, contact_id, created_by,
                                            created_date
                                           )
                                    VALUES (site_contact_detail_id.NEXTVAL,
                                            v_siteid, v_seccontid, in_createdby,
                                            SYSDATE
                                           );

                               UPDATE site
                                  SET secondary_contact_id = v_seccontid
                                WHERE site_id = v_siteid;
                            -------Added by SRK on 28Jun2010
                            ELSE
                               v_seccontid := NULL;
                            END IF;
                         END;
                      ELSE
                         BEGIN
                            --IF (v_rowcount = 1) -- Added on 22/3/2011 to fix an issue where a customer_id
                            --THEN                -- is having multiple sites with the same name

                            --duplicate row. update
                            SELECT site_id, address_id
                              INTO v_siteid, v_addrid
                              FROM site s
                             WHERE UPPER (NAME) = UPPER (in_site (i).o_sitename)
                               AND customer_id = in_customerid
                               AND NOT EXISTS (
                                        SELECT 1
                                          FROM quote_site
                                         WHERE site_id = s.site_id
                                               AND active = 'Y')
                               AND ROWNUM < 2;
    --Checking in the site table and selecting the first site which is not associated with any quote.

                            UPDATE site
                               SET modified_by = in_createdby,
                                   modified_date = SYSDATE,
                                   customer_report_site_name =
                                                            in_site (i).o_sitename,
                                   telephone_area_code = in_site (i).o_telareacode,
                                   phone_number = in_site (i).o_phonenumber,
                                         -- Added on 14/3/2011 as part of R11 iVPN
                                   local_business_customer_name =
                                                        in_site (i).o_customername,
                                   bfg_site_id =
                                           NVL (TRIM (in_site (i).o_bfgsiteid), null)
                             WHERE site_id = v_siteid;

                            UPDATE address
                               SET country_id = v_countryid,
                                   building_number = in_site (i).o_bldgno,
                                   address_line1 = in_site (i).o_addrline1,
                                   city = in_site (i).o_city,
                                   state = in_site (i).o_state,
                                   post_zip_code = in_site (i).o_postcode,
                                   room = in_site (i).o_room,
                                   FLOOR = in_site (i).o_floor,
                                   address_line2 = in_site (i).o_addrline2,
                                   modified_by = in_createdby,
                                   modified_date = SYSDATE
                             WHERE address_id = v_addrid;

                            --END IF; -- Added on 22/3/2011
                            /*****Below code added to associate site with the quote header id  23rd MArch 2011     ******/
                            v_qtsitecount := 0;

                            SELECT COUNT (*)
                              INTO v_qtsitecount
                              FROM quote_site
                             WHERE site_id = v_siteid
                               AND quote_header_id = in_quoteheaderid
                               AND active = pkg_constants.con_activeflag_yes;

                            --insert into quote_site on new insert or
                            --site is present but was deleted from quote_site
                            IF (v_qtsitecount = 0)
                            THEN
                               INSERT INTO quote_site
                                           (quote_site_id, site_id,
                                            quote_header_id,
                                            active,
                                            created_by, created_date
                                           )
                                    VALUES (quote_site_id.NEXTVAL, v_siteid,
                                            in_quoteheaderid,
                                            pkg_constants.con_activeflag_yes,
                                            in_createdby, SYSDATE
                                           );
                            END IF;

                            --get row counts of primary, secondary and technical contacts
                            SELECT COUNT (prict.contact_id),
                                   COUNT (secct.contact_id)
                              INTO v_pricnt,
                                   v_seccnt
                              FROM (SELECT scd.site_id, ct.contact_id
                                      FROM site_contact_detail scd, contact ct
                                     WHERE scd.contact_id = ct.contact_id
                                       AND UPPER (ct.contact_type) =
                                              pkg_constants.con_primary_sitecontact) prict
                                   LEFT OUTER JOIN
                                   site st ON prict.site_id = st.site_id
                                   LEFT OUTER JOIN
                                   (SELECT scd.site_id, ct.contact_id
                                      FROM site_contact_detail scd, contact ct
                                     WHERE scd.contact_id = ct.contact_id
                                       AND UPPER (ct.contact_type) =
                                              pkg_constants.con_secondary_sitecontact) secct
                                   ON st.site_id = secct.site_id
                             WHERE st.site_id = v_siteid
                               AND st.customer_id = in_customerid;

                            IF (v_pricnt <> 0)
                            THEN
                               BEGIN
                                  SELECT sc.contact_id
                                    INTO v_pricontid
                                    FROM site s, site_contact_detail sc,
                                         contact c
                                   WHERE s.site_id = sc.site_id
                                     AND sc.contact_id = c.contact_id
                                     AND UPPER (c.contact_type) =
                                            UPPER
                                               (pkg_constants.con_primary_sitecontact
                                               )
                                     AND s.site_id = v_siteid
                                     AND customer_id = in_customerid;
                               END;
                            ELSE
                               BEGIN
                                  v_pricontid := NULL;
                               END;
                            END IF;

                            --update secondary contact details added on 30/12/2009
                            IF (v_seccnt <> 0)
                            THEN
                               BEGIN
                                  SELECT sc.contact_id
                                    INTO v_seccontid
                                    FROM site s, site_contact_detail sc,
                                         contact c
                                   WHERE s.site_id = sc.site_id
                                     AND sc.contact_id = c.contact_id
                                     AND UPPER (c.contact_type) =
                                            UPPER
                                               (pkg_constants.con_secondary_sitecontact
                                               )
                                     AND s.site_id = v_siteid
                                     AND customer_id = in_customerid;
                               END;
                            ELSE
                               BEGIN
                                  v_seccontid := NULL;
                               END;
                            END IF;

                            UPDATE site_contact_detail
                               SET modified_by = in_createdby,
                                   modified_date = SYSDATE
                             WHERE site_id = v_siteid;

                            IF (v_pricontid IS NULL)
                            --if primary contact does not exist, check if it is null
                            --and then insert. if it exists, then update.
                            THEN
                               BEGIN
                                  IF (   in_site (i).o_prifname IS NOT NULL
                                      OR in_site (i).o_prilname IS NOT NULL
                                      OR in_site (i).o_priemail IS NOT NULL
                                      OR in_site (i).o_priphone IS NOT NULL
                                      OR in_site (i).o_prifax IS NOT NULL
                                      OR in_site (i).o_prijob IS NOT NULL
                                     )
                                  THEN
                                     BEGIN
                                        INSERT INTO contact
                                                    (contact_id,
                                                     first_name,
                                                     last_name,
                                                     phone_number,
                                                     mobile_number,
                                                     fax,
                                                     job_title,
                                                     created_by, created_date,
                                                     email,
                                                     contact_type
                                                    )
                                             VALUES (contact_id.NEXTVAL,
                                                     in_site (i).o_prifname,
                                                     in_site (i).o_prilname,
                                                     in_site (i).o_priphone,
                                                     in_site (i).o_primobile,
                                                     in_site (i).o_prifax,
                                                     in_site (i).o_prijob,
                                                     in_createdby, SYSDATE,
                                                     in_site (i).o_priemail,
                                                     pkg_constants.con_primary_sitecontact
                                                    )
                                          RETURNING contact_id
                                               INTO v_pricontid;

                                        INSERT INTO site_contact_detail
                                                    (site_contact_detail_id,
                                                     site_id, contact_id,
                                                     created_by, created_date
                                                    )
                                             VALUES (site_contact_detail_id.NEXTVAL,
                                                     v_siteid, v_pricontid,
                                                     in_createdby, SYSDATE
                                                    );

                                        UPDATE site
                                           SET primary_contact_id = v_pricontid
                                         WHERE site_id = v_siteid;
                                     END;
                                  END IF;
                               END;
                            ELSE
                               BEGIN
                                  UPDATE contact
                                     SET first_name = in_site (i).o_prifname,
                                         last_name = in_site (i).o_prilname,
                                         phone_number = in_site (i).o_priphone,
                                         mobile_number = in_site (i).o_primobile,
                                         fax = in_site (i).o_prifax,
                                         job_title = in_site (i).o_prijob,
                                         contact_type =
                                             pkg_constants.con_primary_sitecontact,
                                         email = in_site (i).o_priemail,
                                         modified_by = in_createdby,
                                         modified_date = SYSDATE
                                   WHERE contact_id = v_pricontid;
                               END;
                            END IF;                 --end of primary contact check

                            IF (v_seccontid IS NULL)
                            --if secondary contact does not exist, check if it is null
                            --and then insert. if it exists, then update.
                            THEN
                               BEGIN
                                  IF (   in_site (i).o_secfname IS NOT NULL
                                      OR in_site (i).o_seclname IS NOT NULL
                                      OR in_site (i).o_secemail IS NOT NULL
                                      OR in_site (i).o_secphone IS NOT NULL
                                      OR in_site (i).o_secfax IS NOT NULL
                                      OR in_site (i).o_secjob IS NOT NULL
                                     )
                                  THEN
                                     BEGIN
                                        INSERT INTO contact
                                                    (contact_id,
                                                     first_name,
                                                     last_name,
                                                     phone_number,
                                                     mobile_number,
                                                     fax,
                                                     job_title,
                                                     created_by, created_date,
                                                     email,
                                                     contact_type
                                                    )
                                             VALUES (contact_id.NEXTVAL,
                                                     in_site (i).o_secfname,
                                                     in_site (i).o_seclname,
                                                     in_site (i).o_secphone,
                                                     in_site (i).o_secmobile,
                                                     in_site (i).o_secfax,
                                                     in_site (i).o_secjob,
                                                     in_createdby, SYSDATE,
                                                     in_site (i).o_secemail,
                                                     pkg_constants.con_secondary_sitecontact
                                                    )
                                          RETURNING contact_id
                                               INTO v_seccontid;

                                        INSERT INTO site_contact_detail
                                                    (site_contact_detail_id,
                                                     site_id, contact_id,
                                                     created_by, created_date
                                                    )
                                             VALUES (site_contact_detail_id.NEXTVAL,
                                                     v_siteid, v_seccontid,
                                                     in_createdby, SYSDATE
                                                    );

                                        UPDATE site
                                           SET secondary_contact_id = v_seccontid
                                         WHERE site_id = v_siteid;
                                     END;
                                  END IF;
                               END;
                            ELSE
                               BEGIN
                                  UPDATE contact
                                     SET first_name = in_site (i).o_secfname,
                                         last_name = in_site (i).o_seclname,
                                         phone_number = in_site (i).o_secphone,
                                         mobile_number = in_site (i).o_secmobile,
                                         fax = in_site (i).o_secfax,
                                         job_title = in_site (i).o_secjob,
                                         contact_type =
                                            pkg_constants.con_secondary_sitecontact,
                                         email = in_site (i).o_secemail,
                                         modified_by = in_createdby,
                                         modified_date = SYSDATE
                                   WHERE contact_id = v_seccontid;
                               END;
                            END IF;               --end of secondary contact check
                         END;
                      END IF;

                      SELECT COUNT (*)
                        INTO v_qtsitecount
                        FROM quote_site
                       WHERE site_id = v_siteid
                         AND quote_header_id = in_quoteheaderid
                         AND active = pkg_constants.con_activeflag_yes;

                      --insert into quote_site on new insert or
                      --site is present but was deleted from quote_site
                      IF (v_qtsitecount = 0)
                      THEN
                         INSERT INTO quote_site
                                     (quote_site_id, site_id,
                                      quote_header_id,
                                      active,
                                      created_by, created_date
                                     )
                              VALUES (quote_site_id.NEXTVAL, v_siteid,
                                      in_quoteheaderid,
                                      pkg_constants.con_activeflag_yes,
                                      in_createdby, SYSDATE
                                     );
                      END IF;

                      --commonly insert success for insertion/duplicate updation
                      INSERT INTO site_log
                                  (site_log_id, batch_id,
                                   site_name,
                                   status,
                                   created_by, created_date
                                  )
                           VALUES (site_log_id.NEXTVAL, v_batchid,
                                   SUBSTR (v_currsite, 1, 100),
                                   pkg_constants.con_status_success,
                                   in_createdby, SYSDATE
                                  );
                   END;
                END IF;                                   --country does not exist
             END;                                                 --kgi flag check
          END IF;
       END LOOP;
    EXCEPTION
       WHEN OTHERS
       THEN
          v_errmsg := SQLERRM;

          INSERT INTO site_log
                      (site_log_id, batch_id,
                       site_name,
                       status, reason, created_by,
                       created_date
                      )
               VALUES (site_log_id.NEXTVAL, v_batchid,
                       SUBSTR (v_currsite, 1, 100),
                       pkg_constants.con_status_failure, v_errmsg, in_createdby,
                       SYSDATE
                      );
    END;

   PROCEDURE sps_multisite_bulkupload (
      in_customerid        IN       site.customer_id%TYPE,
      in_quoteheaderid     IN       quote_header.quote_header_id%TYPE,
      --  in_siteid          IN       site.site_id%TYPE,
      out_sitebulkupload   OUT      sys_refcursor,
      out_bulk1            OUT      sys_refcursor
   )
   AS
   BEGIN
      BEGIN
         OPEN out_sitebulkupload FOR
            SELECT a1.pri_site_id "Site ID", a1.NAME "Site Name",
                   a1.city "City", a1.country "Country",
                   a1.classic_customer_id "Classic Customer Id",
                   a1.classic_site_id "Classic Site Id",
                   a1.post_zip_code "PostCode",
                   a1.address_line1 "Address Line1",
                   a1.building_number "Bulding Number", a1.state "State",
                   a1.address_line2 "Address Line2",
                   a1.telephone_area_code "Telephone Area Code",
                   a1.room "Room", a1.FLOOR "Floor", a1.address_id,
                   a1.first_name "Primary First Name",
                   a1.last_name "Primary Last Name",
                   a1.job_title "Primary Job Title",
                   a1.email "Primary Email",
                   a1.phone_number "Primary Phone No",
                   a1.mobile_number "Primary Mobile No",
                   a1.fax "Primary Fax",
                   a2.first_name "Secondary First Name",
                   a2.last_name "Secondary Last Name",
                   a2.job_title "Secondary Job Title",
                   a2.email "Secondary Email",
                   a2.phone_number "Secondary Phone No",
                   a2.mobile_number "Secondary Mobile No",
                   a2.fax "Secondary Fax",
		   a2.PhoneNumber "Phone Number"                                --added here
              FROM (SELECT s.phone_number as PhoneNumber ,s.site_id pri_site_id, s.NAME, ad.city,
                           cou.NAME country, cu.classic_customer_id,
                           s.classic_site_id, ad.post_zip_code,
                           ad.address_line1, ad.building_number, ad.state,
                           ad.address_line2, s.telephone_area_code, ad.room,
                           ad.FLOOR, ad.address_id, co.first_name,
                           co.last_name, co.job_title, co.email,
                           co.phone_number, co.mobile_number, co.fax
                      FROM quote q LEFT OUTER JOIN quote_header qh
                           ON q.quote_id = qh.quote_id
                           LEFT OUTER JOIN quote_site qs
                           ON qh.quote_header_id = qs.quote_header_id
                           INNER JOIN site s ON qs.site_id = s.site_id
                           AND NVL(s.main_site_flag,'N') <>'Y'
                           LEFT OUTER JOIN customer cu
                           ON cu.customer_id = q.customer_id
                           LEFT OUTER JOIN address ad
                           ON s.address_id = ad.address_id
                           LEFT OUTER JOIN country cou
                           ON ad.country_id = cou.country_id
                           LEFT OUTER JOIN site_contact_detail scd
                           ON s.site_id = scd.site_id
                           LEFT OUTER JOIN contact co
                           ON scd.contact_id = co.contact_id
                     WHERE cu.customer_id = in_customerid          --in_custid
                       -- Added on 10/8/2011 - changed quote_id to quote_header_id
                       AND qh.quote_header_id = in_quoteheaderid         -- in_quoteid
                       AND (qs.active = 'Y')
                       AND s.primary_contact_id = co.contact_id
                                                               -- and co.contact_id = 4531
                   ) a1,
                   (SELECT s.phone_number as PhoneNumber ,s.site_id sec_site_id, s.NAME, ad.city, cou.NAME,
                           cu.classic_customer_id, s.classic_site_id,
                           ad.post_zip_code, ad.address_line1,
                           ad.building_number, ad.state, ad.address_line2,
                           s.telephone_area_code, ad.room, ad.FLOOR,
                           ad.address_id, co.first_name, co.last_name,
                           co.job_title, co.email, co.phone_number,
                           co.mobile_number, co.fax
                      FROM quote q LEFT OUTER JOIN quote_header qh
                           ON q.quote_id = qh.quote_id
                           LEFT OUTER JOIN quote_site qs
                           ON qh.quote_header_id = qs.quote_header_id
                           INNER JOIN site s ON qs.site_id = s.site_id
                           AND NVL(s.main_site_flag,'N') <>'Y'
                           LEFT OUTER JOIN customer cu
                           ON cu.customer_id = q.customer_id
                           LEFT OUTER JOIN address ad
                           ON s.address_id = ad.address_id
                           LEFT OUTER JOIN country cou
                           ON ad.country_id = cou.country_id
                           LEFT OUTER JOIN site_contact_detail scd
                           ON s.site_id = scd.site_id
                           LEFT OUTER JOIN contact co
                           ON scd.contact_id = co.contact_id
                     WHERE cu.customer_id = in_customerid          --in_custid
                       -- Added on 10/8/2011 - changed quote_id to quote_header_id
                       AND qh.quote_header_id = in_quoteheaderid         -- in_quoteid
                       AND (qs.active = 'Y')
                       AND s.secondary_contact_id = co.contact_id
                                                                 -- and co.contact_id = 4531
                   ) a2
             WHERE NVL (a1.pri_site_id, a2.sec_site_id) =
                                          NVL (a2.sec_site_id, a1.pri_site_id);
      END;

      BEGIN
         OPEN out_bulk1 FOR
            SELECT s.site_id "Site ID", s.NAME "Site Name", ad.city "City",
                   cou.NAME "Country",
                   cu.classic_customer_id "Classic Customer Id",
                   s.classic_site_id "Classic Site Id",
                   ad.post_zip_code "PostCode",
                   ad.address_line1 "Address Line1",
                   ad.building_number "Bulding Number", ad.state "State",
                   ad.address_line2 "Address Line2",
                   s.telephone_area_code "Telephone Area Code",
                   ad.room "Room", ad.FLOOR "Floor", ad.address_id,
                   s.phone_number "Phone Number", -- Added on 14/3/2011 as part of R11 iVPN
				   decode(qs.MODIFIED_FLAG,'N',0,'Y',1,0) "Modified Flag" /*R15 Revalidation*/
              FROM quote q LEFT OUTER JOIN quote_header qh
                   ON q.quote_id = qh.quote_id
                   LEFT OUTER JOIN quote_site qs
                   ON qh.quote_header_id = qs.quote_header_id
                   INNER JOIN site s ON qs.site_id = s.site_id
                   AND NVL(s.main_site_flag,'N') <>'Y'
                   LEFT OUTER JOIN customer cu ON cu.customer_id =
                                                                q.customer_id
                   LEFT OUTER JOIN address ad ON s.address_id = ad.address_id
                   LEFT OUTER JOIN country cou ON ad.country_id =
                                                               cou.country_id
             WHERE cu.customer_id = in_customerid                 --in_custid
               -- Added on 10/8/2011 - changed quote_id to quote_header_id
               AND qh.quote_header_id = in_quoteheaderid                 -- in_quoteid
               AND (    s.primary_contact_id IS NULL
                    AND secondary_contact_id IS NULL
                   )
               AND (qs.active = 'Y');
      END;
   END;

   PROCEDURE sps_bfg_site (
      in_customerid   IN       customer.bfg_customer_id%TYPE,
      in_searchby        IN       VARCHAR2,
      in_keyword         IN OUT   VARCHAR2,
      out_site           OUT      sys_refcursor
   )
   AS
      out_exp_site   sys_refcursor;
      v_sql_code     NUMBER;        -- later we need to remove this should declare in specs
      v_sql_errm     VARCHAR2(150); -- later we need to remove this should declare in specs

   BEGIN
      IF (TRIM (in_keyword) IS NULL)
      THEN
         BEGIN
            OPEN out_site FOR
                SELECT site_name "site name",street_number "building number",street_name "street name",
                       city "city",county "county",country "country",
                       post_code "zip post code",telephone_area_code "telephone area code",
                       room "room", floor "floor",bfg_site_id "bfg site id",
                       bfg_address_id "bfg address id",
                       bfg_location_id "bfg sub location id"
                 FROM ivpn_bfg_expedio_sites
                WHERE bfg_customer_id = in_customerid;
         END;
      ELSE
         BEGIN
            CASE UPPER (in_searchby)
               WHEN 'SITE NAME'
               THEN
                  BEGIN
                     OPEN out_site FOR
                        SELECT site_name "site name",street_number "building number",street_name "street name",
                               city "city",county "county",country "country",
                               post_code "zip post code",telephone_area_code "telephone area code",
                               room "room", floor "floor",bfg_site_id "bfg site id",
                               bfg_address_id "bfg address id",
                               bfg_location_id "bfg sub location id"
                         FROM ivpn_bfg_expedio_sites
                         WHERE bfg_customer_id = in_customerid
                           AND UPPER (site_name) LIKE
                                                        UPPER (TRIM (in_keyword)) ESCAPE '\';
                  END;
               WHEN 'CITY'
               THEN
                  BEGIN
                     OPEN out_site FOR
                         SELECT site_name "site name",street_number "building number",street_name "street name",
                               city "city",county "county",country "country",
                               post_code "zip post code",telephone_area_code "telephone area code",
                               room "room", floor "floor",bfg_site_id "bfg site id",
                               bfg_address_id "bfg address id",
                               bfg_location_id "bfg sub location id"
                         FROM ivpn_bfg_expedio_sites
                         WHERE bfg_customer_id = in_customerid
                           AND UPPER (city) LIKE UPPER (TRIM (in_keyword));
                  END;
               WHEN 'STATE'
               THEN
                  BEGIN
                     OPEN out_site FOR
                         SELECT site_name "site name",street_number "building number",street_name "street name",
                               city "city",county "county",country "country",
                               post_code "zip post code",telephone_area_code "telephone area code",
                               room "room", floor "floor",bfg_site_id "bfg site id",
                               bfg_address_id "bfg address id",
                               bfg_location_id "bfg sub location id"
                         FROM ivpn_bfg_expedio_sites
                         WHERE bfg_customer_id = in_customerid
                           AND UPPER (county) LIKE UPPER (TRIM (in_keyword));
                  END;
               WHEN 'COUNTRY'
               THEN
                  BEGIN
                     OPEN out_site FOR
                        SELECT site_name "site name",street_number "building number",street_name "street name",
                               city "city",county "county",country "country",
                               post_code "zip post code",telephone_area_code "telephone area code",
                               room "room", floor "floor",bfg_site_id "bfg site id",
                               bfg_address_id "bfg address id",
                               bfg_location_id "bfg sub location id"
                         FROM ivpn_bfg_expedio_sites
                         WHERE bfg_customer_id = in_customerid
                           AND UPPER (country) LIKE UPPER (TRIM (in_keyword));
                  END;
               WHEN 'ZIP CODE'
               THEN
                  BEGIN
                     OPEN out_site FOR
                         SELECT site_name "site name",street_number "building number",street_name "street name",
                               city "city",county "county",country "country",
                               post_code "zip post code",telephone_area_code "telephone area code",
                               room "room", floor "floor",bfg_site_id "bfg site id",
                               bfg_address_id "bfg address id",
                               bfg_location_id "bfg sub location id"
                         FROM ivpn_bfg_expedio_sites
                         WHERE bfg_customer_id = in_customerid
                           AND UPPER (post_code) LIKE UPPER (TRIM (in_keyword));
                  END;
            ELSE
                  BEGIN
                     IF (in_searchby IS NULL)
                     THEN
                        OPEN out_site FOR
                        SELECT site_name "site name",street_number "building number",street_name "street name",
                               city "city",county "county",country "country",
                               post_code "zip post code",telephone_area_code "telephone area code",
                               room "room", floor "floor",bfg_site_id "bfg site id",
                               bfg_address_id "bfg address id",
                               bfg_location_id "bfg sub location id"
                         FROM ivpn_bfg_expedio_sites
                         WHERE bfg_customer_id = in_customerid;
                     END IF;
                  END;
            END CASE;
         END;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_sql_errm := substr(SQLERRM,1,150);
         v_sql_code := SQLCODE;
         PKG_COMMON.spi_error_log(
                                  NULL,
                                  NULL,
                                  NULL,
                                  NULL,
                                  'PKG_SITE',
                                  'SPS_BFG_SITE',
                                  v_sql_code,
                                  v_sql_errm
                                 );
   END;

PROCEDURE spi_quote_site_Ghucs (
                              in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
                              in_quote_site_obj  IN       quote_site_tab,
                              in_createdby       IN       quote_site.created_by%TYPE,
                              out_status         OUT      NUMBER,
                              out_errmsg         OUT      VARCHAR2
                                )

AS
v_rowcount  number;
BEGIN

  FOR i IN in_quote_site_obj.FIRST .. in_quote_site_obj.LAST
  LOOP
      BEGIN
           SELECT COUNT (*)
           INTO v_rowcount
           FROM quote_site
           WHERE quote_header_id = in_quoteheaderid
            AND site_id = in_quote_site_obj (i).o_site_id
            AND active = pkg_constants.con_activeflag_yes;

            IF (v_rowcount = 0) THEN
                   INSERT INTO quote_site
                               (quote_site_id,
                                site_id,
                                quote_header_id,
                                active,
                                created_by,
                                created_date,
                                customer_required_date,
                                customer_agreed_date
                               )
                        VALUES (quote_site_id.NEXTVAL,
                                in_quote_site_obj (i).o_site_id,
                                in_quoteheaderid,
                                pkg_constants.con_activeflag_yes,
                                in_createdby,
                                SYSDATE,
                                in_quote_site_obj (i).o_crd,
                                in_quote_site_obj (i).o_cad
                               );
            END IF;
      END ;
  END LOOP;

  out_status := pkg_constants.con_status_success;

EXCEPTION
      WHEN OTHERS THEN
         out_status := pkg_constants.con_status_failure;
         out_errmsg := SQLERRM;
END;

END pkg_site;
/


CREATE OR REPLACE PACKAGE BODY                  pkg_site_g
AS
   PROCEDURE spi_site (
      --modified on 30/12/2009 to insert technical contact details
      in_customerid                 IN       customer.customer_id%TYPE,
      in_quoteheaderid              IN       quote_header.quote_header_id%TYPE,
      in_sitename                   IN       site.NAME%TYPE,
      in_customer_reportsitename    IN       site.customer_report_site_name%TYPE,
      in_buildingno                 IN       address.building_number%TYPE,
      in_addressline1               IN       address.address_line1%TYPE,
      in_city                       IN       address.city%TYPE,
      in_state                      IN       address.state%TYPE,
      in_state_code                 IN       address.state_code%TYPE,
      in_countryid                  IN       country.country_id%TYPE,
      in_postzipcode                IN       address.post_zip_code%TYPE,
      in_telephoneareacode          IN       site.telephone_area_code%TYPE,
      --added for R1
      in_county                     IN       address.county%TYPE,
      -- ##### Change for 904 - B-End validation  begin
      in_local_business_cust_name   IN       site.local_business_customer_name%TYPE,
      -- ##### Change for 904 - B-End validation  end
      in_additionalsite             IN       VARCHAR2,          --for address
      in_pricontact                 IN       VARCHAR2,  --for primary contact
      in_seccontact                 IN       VARCHAR2,
      --for secondary contact
      in_techcontact                IN       VARCHAR2,
      --for technical contact
      in_servassurcontact           IN       VARCHAR2,
      --for service assurance contact details
      in_servicedlvcontact          IN       VARCHAR2,
      --for service delivery contact details
      in_bfgsiteid                  IN       site.bfg_site_id%TYPE,
      -- Ghucs, Added new parameter in_bfgsiteid
      in_bfgsitename                IN       site.bfg_site_name%TYPE,
                                 -- Ghucs, Added new parameter in_bfgsitename
      /*Start : Added for GHUCS R5 by Amit on 16-Aug-2010*/
      in_bfgaddressid               IN       site.bfg_address_id%TYPE,
      in_bfgsublocid                IN       site.bfg_subloc_id%TYPE,
      /*End : Added for GHUCS R5 by Amit on 16-Aug-2010*/
      -- ##### Change for 904 - Call Anywhere  begin
      in_kcidetails                 IN       VARCHAR2,
                                        -- for Keep Customer Informed details
      -- ##### Change for 904 - Call Anywhere  end
      /*line_of_site_billing added on 17/06/2010*/
      in_lineofsitebilling          IN       site.line_of_site_billing%TYPE,
      in_mainsiteflag               IN       site.main_site_flag%TYPE,
      ---Added by SRK on 07Jul2010
      in_createdby                  IN       site.created_by%TYPE,
      out_siteid                    OUT      site.site_id%TYPE,
      out_status                    OUT      NUMBER,
      out_errmsg                    OUT      VARCHAR2
   )
   AS
      v_addrline2              address.address_line2%TYPE;
      v_notes                  site.notes%TYPE;
      v_floor                  address.FLOOR%TYPE;
      v_room                   address.room%TYPE;
      v_classicsiteid          site.classic_site_id%TYPE;
      v_prifirstname           contact.first_name%TYPE;
      v_prilastname            contact.last_name%TYPE;
      v_prijobtitle            contact.job_title%TYPE;
      v_priemail               contact.email%TYPE;
      v_priphone               contact.phone_number%TYPE;
      v_primobile              contact.mobile_number%TYPE;
      v_prifax                 contact.fax%TYPE;
      v_secfirstname           contact.first_name%TYPE;
      v_seclastname            contact.last_name%TYPE;
      v_secjobtitle            contact.job_title%TYPE;
      v_secemail               contact.email%TYPE;
      v_secphone               contact.phone_number%TYPE;
      v_secmobile              contact.mobile_number%TYPE;
      v_secfax                 contact.fax%TYPE;
      v_billingid              site.billing_id%TYPE;
      v_row                    VARCHAR2 (8000);
      v_rowcount               NUMBER;
      v_addressid              address.address_id%TYPE;
      v_pricontactid           site.primary_contact_id%TYPE;
      v_seccontactid           site.secondary_contact_id%TYPE;
      v_siteid                 site.site_id%TYPE;
      v_fldcnt                 NUMBER;
      v_kgiflag                NUMBER                           := 1;
      v_kgitype                VARCHAR2 (100);
      --v_kgitype         kgi_country.kgi_type%TYPE;
      v_techfirstname          contact.first_name%TYPE;
      v_techlastname           contact.last_name%TYPE;
      v_techjobtitle           contact.job_title%TYPE;
      v_techemail              contact.email%TYPE;
      v_techphone              contact.phone_number%TYPE;
      v_techmobile             contact.mobile_number%TYPE;
      v_techfax                contact.fax%TYPE;
      v_techcontactid          contact.contact_id%TYPE;
      v_countryname            country.NAME%TYPE;
      --below variable for service assurance and service delivery addresses.
      v_tempfirstname          contact.first_name%TYPE;
      v_templastname           contact.last_name%TYPE;
      v_tempjobtitle           contact.job_title%TYPE;
      v_tempemail              contact.email%TYPE;
      v_tempphone              contact.phone_number%TYPE;
      v_tempmobile             contact.mobile_number%TYPE;
      v_tempfax                contact.fax%TYPE;
      v_tempcontactid          contact.contact_id%TYPE;
      v_ppsr_notes             site.ppsr_note%TYPE;
      v_cntry_spec_notes_req   site.cntry_spec_notes_req%TYPE;
      v_url                    site.url%TYPE;
      /****R3 */
      v_pstn_number            contact.pstn_number%TYPE;
      v_primary_notes          contact.primary_notes%TYPE;
   BEGIN
--      SET TRANSACTION READ WRITE NAME 'site_page';

      --modified for kgi_check from ppsr
      SELECT NAME
        INTO v_countryname
        FROM country
       WHERE country_id = in_countryid;

--      SELECT COUNT (*)
--        INTO v_rowcount
--        FROM kgi_country
--       WHERE country_id = in_countryid;

      --kgi check from PPSR
      SELECT COUNT (*)
        INTO v_rowcount
        FROM ppsr_owner.ppsr_kgi_data_v@dblink_ppsr
       WHERE UPPER (REPLACE ("Country", '''')) =
                                         UPPER (REPLACE (v_countryname, ''''));

      v_row := in_additionalsite;

--kgi check
      IF (v_rowcount != 0)
      THEN
         BEGIN
--            SELECT kgi_type
--              INTO v_kgitype
--              FROM kgi_country
--             WHERE country_id = in_countryid;

            --kgi check from PPSR
            SELECT DISTINCT "Kgi Type"
                       INTO v_kgitype
                       FROM ppsr_owner.ppsr_kgi_data_v@dblink_ppsr
                      WHERE UPPER (REPLACE ("Country", '''')) =
                                         UPPER (REPLACE (v_countryname, ''''));

            IF (UPPER (v_kgitype) LIKE '%CITY%')
            THEN
               BEGIN
                  IF (in_city IS NULL)
                  THEN
                     v_kgiflag := 0;
                  END IF;
               END;
            END IF;

            IF (UPPER (v_kgitype) LIKE '%POST CODE%')
            THEN
               BEGIN
                  IF (in_postzipcode IS NULL)
                  THEN
                     v_kgiflag := 0;
                  END IF;
               END;
            END IF;

            IF (   UPPER (v_kgitype) LIKE '%STREET NAME%'
                OR UPPER (v_kgitype) LIKE '%STREET NUMBER%'
               )
            THEN
               BEGIN
                  IF (in_addressline1 IS NULL)
                  THEN
                     v_kgiflag := 0;
                  END IF;
               END;
            END IF;

            IF (UPPER (v_kgitype) LIKE '%TELEPHONE AREA CODE%')
            THEN
               BEGIN
                  IF (in_telephoneareacode IS NULL)
                  THEN
                     v_kgiflag := 0;
                  END IF;
               END;
            END IF;

            IF (UPPER (v_kgitype) LIKE '%DISTRICT%')
            THEN
               BEGIN
                  v_addrline2 :=
                     SUBSTR (v_row,
                             INSTR (v_row, '|', 1, 2) + 1,
                               (INSTR (v_row, '|', 1, 3) - 1
                               )
                             - (INSTR (v_row, '|', 1, 2))
                            );

                  IF (v_addrline2 IS NULL)
                  THEN
                     v_kgiflag := 0;
                  END IF;
               END;
            END IF;
         END;
      END IF;

       IF (v_kgiflag = 0)
      THEN
         BEGIN
            out_status := pkg_constants.con_status_failure;
            out_errmsg := 'KGI Error: ' || v_kgitype || ' is mandatory';
         END;

      -- Additional checks for avoiding duplicate bfg_site_id Issue Added by Sandeep on 11-Nov-2010
    ELSIF in_bfgsiteid IS NULL THEN
        out_status := pkg_constants.con_status_failure;
        out_errmsg := 'BFG/Expedio Site Id Is Manadatory';

      ELSE

         BEGIN

           IF in_bfgsiteid IS NOT NULL THEN

             SELECT COUNT(1)
               INTO v_rowcount
               FROM site
              WHERE trim(bfg_site_id) = trim(in_bfgsiteid)
                AND customer_id = in_customerid;

           END IF;



            IF (v_rowcount = 0)
            THEN
               BEGIN
                  SELECT address_id.NEXTVAL
                    INTO v_addressid
                    FROM DUAL;

                  INSERT INTO address
                              (address_id, building_number, address_line1,
                               city, state, country_id,
                               post_zip_code, created_by, created_date,
                               state_code, county
                              )
                       VALUES (v_addressid, in_buildingno, in_addressline1,
                               in_city, in_state, in_countryid,
                               in_postzipcode, in_createdby, SYSDATE (),
                               in_state_code, in_county
                              );

                  SELECT site_id.NEXTVAL
                    INTO v_siteid
                    FROM DUAL;

                  -- ##### Change for 904 - B-End validation  begin
                  INSERT INTO site
                              (site_id, NAME,
                               customer_report_site_name, address_id,
                               telephone_area_code, customer_id,
                               created_by, created_date,
                               local_business_customer_name, bfg_site_id,
                               bfg_site_name, line_of_site_billing,
                               main_site_flag     ---Added by SRK on 07Jul2010
                              /*Start : Added for GHUCS R5 by Amit on 16-Aug-2010*/
                               ,bfg_address_id
                               ,bfg_subloc_id
                               /*End: Added for GHUCS R5 by Amit on 16-Aug-2010*/
                              )
                       VALUES (v_siteid, in_sitename,
                               in_customer_reportsitename, v_addressid,
                               in_telephoneareacode, in_customerid,
                               in_createdby, SYSDATE (),
                               in_local_business_cust_name, in_bfgsiteid,
                               in_bfgsitename, in_lineofsitebilling,
                               in_mainsiteflag ,in_bfgaddressid,
                               in_bfgsublocid
                              );

                          /*INSERT INTO site
                                      (site_id, NAME,
                                       customer_report_site_name, address_id,
                                       telephone_area_code, customer_id,
                                       created_by, created_date
                                      )
                               VALUES (v_siteid, in_sitename,
                                       in_customer_reportsitename, v_addressid,
                                       in_telephoneareacode, in_customerid,
                                       in_createdby, SYSDATE ()
                                      );*/
                  -- ##### Change for 904 - B-End validation  end

                  --quote id is null for cmlite
                  IF (in_quoteheaderid IS NOT NULL)
                  THEN
                     BEGIN
                        INSERT INTO quote_site
                                    (quote_site_id, site_id,
                                     quote_header_id,
                                     active,
                                     created_by, created_date
                                    )
                             VALUES (quote_site_id.NEXTVAL, v_siteid,
                                     in_quoteheaderid,
                                     pkg_constants.con_activeflag_yes,
                                     in_createdby, SYSDATE
                                    );
                     END;
                  END IF;

                  --check number of parameters modified on 30/12/2009
                  IF (in_additionalsite IS NOT NULL)
                  THEN
                     BEGIN
                        v_row := in_additionalsite;

                        SELECT pkg_common.fn_countfields (v_row, '|')
                          INTO v_fldcnt
                          FROM DUAL;

                        IF (v_fldcnt = 8)
                        THEN
                           BEGIN
                              v_floor :=
                                 SUBSTR (v_row,
                                         1,
                                         INSTR (v_row, '|', 1, 1) - 1
                                        );
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_room :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_addrline2 :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_classicsiteid :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_billingid :=
                                 TO_NUMBER (SUBSTR (v_row,
                                                    1,
                                                      INSTR (v_row, '|', 1, 1)
                                                    - 1
                                                   )
                                           );
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              /* Sprint2 Clean order managment SQE904 Starts */
                              v_notes :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_ppsr_notes :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_cntry_spec_notes_req :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_url := v_row;

/* Sprint2 Clean order managment SQE904  end*/
                              UPDATE address
                                 SET FLOOR = v_floor,
                                     room = v_room,
                                     address_line2 = v_addrline2
                               WHERE address_id = v_addressid;

                              UPDATE site
                                 SET classic_site_id = v_classicsiteid,
                                     billing_id = v_billingid,
                                     notes = v_notes,
                                     ppsr_note = v_ppsr_notes,
                                     cntry_spec_notes_req =
                                                        v_cntry_spec_notes_req,
                                     url = v_url
                               WHERE site_id = v_siteid;
                           END;
                        ELSE
                           BEGIN
                              out_errmsg := 'Invalid Additional Site details';
                           END;
                        END IF;                                   --end fldcnt
                     END;
                  END IF;                       --end additional site not null

                  v_row := NULL;

                  --check primary contact details added on 30/12/2009
                  IF (in_pricontact IS NOT NULL)
                  THEN
                     BEGIN
                        v_row := in_pricontact;

                        SELECT pkg_common.fn_countfields (v_row, '|')
                          INTO v_fldcnt
                          FROM DUAL;

                        IF (v_fldcnt = 8)
                        THEN
                           BEGIN
                              v_prifirstname :=
                                 SUBSTR (v_row,
                                         1,
                                         INSTR (v_row, '|', 1, 1) - 1
                                        );
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_prilastname :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_prijobtitle :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_priemail :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_priphone :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_primobile :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              --v_prifax := v_row;

                              /********/
                              /*HVPN Design change R3 (2010) */
                              /*adding PSTN number and Notes in the primary contact section  */
                              v_prifax :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_pstn_number :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_primary_notes := v_row;

                              /*R3 ends */
                              /*******/
                              INSERT INTO contact
                                          (contact_id,
                                           first_name, last_name,
                                           phone_number, mobile_number, fax,
                                           contact_type,
                                           job_title, email,
                                           created_by, created_date,
                                           pstn_number, primary_notes
                                          )
                                   VALUES (contact_id.NEXTVAL,
                                           v_prifirstname, v_prilastname,
                                           v_priphone, v_primobile, v_prifax,
                                           pkg_constants.con_primary_sitecontact,
                                           v_prijobtitle, v_priemail,
                                           in_createdby, SYSDATE (),
                                           v_pstn_number, v_primary_notes
                                          )
                                RETURNING contact_id
                                     INTO v_pricontactid;

                              INSERT INTO site_contact_detail
                                          (site_contact_detail_id,
                                           site_id, contact_id,
                                           created_by, created_date
                                          )
                                   VALUES (site_contact_detail_id.NEXTVAL,
                                           v_siteid, v_pricontactid,
                                           in_createdby, SYSDATE
                                          );
                           END;
                        ELSE
                           BEGIN
                              out_errmsg := 'Invalid Primary Contact details';
                           END;
                        END IF;                                   --end fldcnt
                     END;
                  END IF;                       --end primary contact not null

                  v_row := NULL;

                  --check secondary contact details added on 30/12/2009
                  IF (in_seccontact IS NOT NULL)
                  THEN
                     BEGIN
                        v_row := in_seccontact;

                        SELECT pkg_common.fn_countfields (v_row, '|')
                          INTO v_fldcnt
                          FROM DUAL;

                        IF (v_fldcnt = 6)
                        THEN
                           BEGIN
                              v_secfirstname :=
                                 SUBSTR (v_row,
                                         1,
                                         INSTR (v_row, '|', 1, 1) - 1
                                        );
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_seclastname :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_secjobtitle :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_secemail :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_secphone :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_secmobile :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_secfax := v_row;

                              INSERT INTO contact
                                          (contact_id,
                                           first_name, last_name,
                                           phone_number, mobile_number, fax,
                                           contact_type,
                                           job_title, email,
                                           created_by, created_date
                                          )
                                   VALUES (contact_id.NEXTVAL,
                                           v_secfirstname, v_seclastname,
                                           v_secphone, v_secmobile, v_secfax,
                                           pkg_constants.con_secondary_sitecontact,
                                           v_secjobtitle, v_secemail,
                                           in_createdby, SYSDATE ()
                                          )
                                RETURNING contact_id
                                     INTO v_seccontactid;

                              INSERT INTO site_contact_detail
                                          (site_contact_detail_id,
                                           site_id, contact_id,
                                           created_by, created_date
                                          )
                                   VALUES (site_contact_detail_id.NEXTVAL,
                                           v_siteid, v_seccontactid,
                                           in_createdby, SYSDATE
                                          );
                           END;
                        ELSE
                           BEGIN
                              out_errmsg :=
                                          'Invalid Secondary Contact details';
                           END;
                        END IF;                                   --end fldcnt
                     END;
                  END IF;                 -- end secondary contact is not null

                  v_row := NULL;

                  --check technical contact details added on 30/12/2009
                  IF (in_techcontact IS NOT NULL)
                  THEN
                     BEGIN
                        v_row := in_techcontact;

                        SELECT pkg_common.fn_countfields (v_row, '|')
                          INTO v_fldcnt
                          FROM DUAL;

                        IF (v_fldcnt = 6)
                        THEN
                           BEGIN
                              v_techfirstname :=
                                 SUBSTR (v_row,
                                         1,
                                         INSTR (v_row, '|', 1, 1) - 1
                                        );
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_techlastname :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_techjobtitle :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_techemail :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_techphone :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_techmobile :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_techfax := v_row;

                              INSERT INTO contact
                                          (contact_id,
                                           first_name, last_name,
                                           phone_number, mobile_number,
                                           fax,
                                           contact_type,
                                           job_title, email,
                                           created_by, created_date
                                          )
                                   VALUES (contact_id.NEXTVAL,
                                           v_techfirstname, v_techlastname,
                                           v_techphone, v_techmobile,
                                           v_techfax,
                                           pkg_constants.con_tech_sitecontact,
                                           v_techjobtitle, v_techemail,
                                           in_createdby, SYSDATE ()
                                          )
                                RETURNING contact_id
                                     INTO v_techcontactid;

                              INSERT INTO site_contact_detail
                                          (site_contact_detail_id,
                                           site_id, contact_id,
                                           created_by, created_date
                                          )
                                   VALUES (site_contact_detail_id.NEXTVAL,
                                           v_siteid, v_techcontactid,
                                           in_createdby, SYSDATE
                                          );
                           END;
                        ELSE
                           BEGIN
                              out_errmsg :=
                                          'Invalid Technical Contact details';
                           END;
                        END IF;                              --end of fldcount
                     END;
                  END IF;

                  --check service assurance contact details added on 3rd March 2009
                  IF (in_servassurcontact IS NOT NULL)
                  THEN
                     BEGIN
                        v_row := in_servassurcontact;

                        SELECT pkg_common.fn_countfields (v_row, '|')
                          INTO v_fldcnt
                          FROM DUAL;

                        IF (v_fldcnt = 6)
                        THEN
                           BEGIN
                              v_tempfirstname :=
                                 SUBSTR (v_row,
                                         1,
                                         INSTR (v_row, '|', 1, 1) - 1
                                        );
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_templastname :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_tempjobtitle :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_tempemail :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_tempphone :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_tempmobile :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_tempfax := v_row;

                              INSERT INTO contact
                                          (contact_id,
                                           first_name, last_name,
                                           phone_number, mobile_number,
                                           fax,
                                           contact_type,
                                           job_title, email,
                                           created_by, created_date
                                          )
                                   VALUES (contact_id.NEXTVAL,
                                           v_tempfirstname, v_templastname,
                                           v_tempphone, v_tempmobile,
                                           v_tempfax,
                                           pkg_constants.con_serv_assur_sitecontact,
                                           v_tempjobtitle, v_tempemail,
                                           in_createdby, SYSDATE ()
                                          )
                                RETURNING contact_id
                                     INTO v_tempcontactid;

                              INSERT INTO site_contact_detail
                                          (site_contact_detail_id,
                                           site_id, contact_id,
                                           created_by, created_date
                                          )
                                   VALUES (site_contact_detail_id.NEXTVAL,
                                           v_siteid, v_tempcontactid,
                                           in_createdby, SYSDATE
                                          );
                           END;
                        ELSE
                           BEGIN
                              out_errmsg :=
                                  'Invalid Service Assurance Contact details';
                           END;
                        END IF;                              --end of fldcount
                     END;
                  END IF;                  --end service assurance is not null

                  --check service assurance contact details added on 3rd March 2009
                  IF (in_servicedlvcontact IS NOT NULL)
                  THEN
                     BEGIN
                        v_row := in_servicedlvcontact;

                        SELECT pkg_common.fn_countfields (v_row, '|')
                          INTO v_fldcnt
                          FROM DUAL;

                        IF (v_fldcnt = 6)
                        THEN
                           BEGIN
                              v_tempfirstname :=
                                 SUBSTR (v_row,
                                         1,
                                         INSTR (v_row, '|', 1, 1) - 1
                                        );
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_templastname :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_tempjobtitle :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_tempemail :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_tempphone :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_tempmobile :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_tempfax := v_row;

                              INSERT INTO contact
                                          (contact_id,
                                           first_name, last_name,
                                           phone_number, mobile_number,
                                           fax,
                                           contact_type,
                                           job_title, email,
                                           created_by, created_date
                                          )
                                   VALUES (contact_id.NEXTVAL,
                                           v_tempfirstname, v_templastname,
                                           v_tempphone, v_tempmobile,
                                           v_tempfax,
                                           pkg_constants.con_serv_deli_sitecontact,
                                           v_tempjobtitle, v_tempemail,
                                           in_createdby, SYSDATE ()
                                          )
                                RETURNING contact_id
                                     INTO v_tempcontactid;

                              INSERT INTO site_contact_detail
                                          (site_contact_detail_id,
                                           site_id, contact_id,
                                           created_by, created_date
                                          )
                                   VALUES (site_contact_detail_id.NEXTVAL,
                                           v_siteid, v_tempcontactid,
                                           in_createdby, SYSDATE
                                          );
                           END;
                        ELSE
                           BEGIN
                              out_errmsg :=
                                     'Invalid service option Contact details';
                           END;
                        END IF;                              --end of fldcount
                     END;
                  END IF;             --end service option contact is not null

                  -- ##### Change for 904 - Call Anywhere  begin
                  IF (in_kcidetails IS NOT NULL)
                  THEN
                     BEGIN
                        v_row := in_kcidetails;

                        SELECT pkg_common.fn_countfields (v_row, '|')
                          INTO v_fldcnt
                          FROM DUAL;

                        IF (v_fldcnt = 6)
                        THEN
                           BEGIN
                              v_tempfirstname :=
                                 SUBSTR (v_row,
                                         1,
                                         INSTR (v_row, '|', 1, 1) - 1
                                        );
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_templastname :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_tempjobtitle :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_tempemail :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_tempphone :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_tempmobile :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_tempfax := v_row;

                              INSERT INTO contact
                                          (contact_id,
                                           first_name, last_name,
                                           phone_number, mobile_number,
                                           fax,
                                           contact_type,
                                           job_title, email,
                                           created_by, created_date
                                          )
                                   VALUES (contact_id.NEXTVAL,
                                           v_tempfirstname, v_templastname,
                                           v_tempphone, v_tempmobile,
                                           v_tempfax,
                                           pkg_constants.con_keep_cust_informeddetl,
                                           v_tempjobtitle, v_tempemail,
                                           in_createdby, SYSDATE ()
                                          )
                                RETURNING contact_id
                                     INTO v_tempcontactid;

                              INSERT INTO site_contact_detail
                                          (site_contact_detail_id,
                                           site_id, contact_id,
                                           created_by, created_date
                                          )
                                   VALUES (site_contact_detail_id.NEXTVAL,
                                           v_siteid, v_tempcontactid,
                                           in_createdby, SYSDATE
                                          );
                           END;
                        ELSE
                           BEGIN
                              out_errmsg := 'Invalid KCI details';
                           END;
                        END IF;
                     END;
                  END IF;

                  -- ##### Change for 904 - Call Anywhere  end
                  IF (out_errmsg IS NOT NULL)
                  THEN
                     BEGIN
                        out_status := pkg_constants.con_status_failure;
                        -- ROLLBACK; Commented by Suresh
                     END;
                  ELSE
                     BEGIN
                        --COMMIT; Commented by Suresh
                        out_siteid := v_siteid;
                        out_status := pkg_constants.con_status_success;
                     END;
                  END IF;
               END;
            ELSE
               BEGIN
                  out_status := pkg_constants.con_status_duplicate;

                  SELECT site_id
                    INTO out_siteid
                    FROM site
                   WHERE customer_id = in_customerid AND NAME = in_sitename;
               END;
            END IF;
         END;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         out_errmsg := SQLERRM;
         -- ROLLBACK; Commented by Suresh
   END;

   PROCEDURE spu_site (
      --modified on 30/12/2009 to update technical contact details
      in_customerid                 IN       customer.customer_id%TYPE,
      in_siteid                     IN       site.site_id%TYPE,
      in_customer_reportsitename    IN       site.customer_report_site_name%TYPE,
      in_buildingno                 IN       address.building_number%TYPE,
      in_addressline1               IN       address.address_line1%TYPE,
      in_city                       IN       address.city%TYPE,
      in_state                      IN       address.state%TYPE,
      in_state_code                 IN       address.state_code%TYPE,
      in_countryid                  IN       country.country_id%TYPE,
      in_postzipcode                IN       address.post_zip_code%TYPE,
      in_telephoneareacode          IN       site.telephone_area_code%TYPE,
      --added for R1
      in_county                     IN       address.county%TYPE,
      -- ##### Change for 904 - B-End validation  begin
      in_local_business_cust_name   IN       site.local_business_customer_name%TYPE,
      -- ##### Change for 904 - B-End validation  end
      in_additionalsite             IN       VARCHAR2,           --for address
      in_pricontact                 IN       VARCHAR2,   --for primary contact
      in_seccontact                 IN       VARCHAR2, --for secondary contact
      in_techcontact                IN       VARCHAR2, --for technical contact
      in_servassurcontact           IN       VARCHAR2,
      --for service assurance contact details
      in_servicedlvcontact          IN       VARCHAR2,
      --for service delivery contact details
      in_bfgsiteid                  IN       site.bfg_site_id%TYPE,
      -- Ghucs, Added new parameter in_bfgsiteid
      in_bfgsitename                IN       site.bfg_site_name%TYPE,
                                  -- Ghucs, Added new parameter in_bfgsitename
       /*Start : Added for GHUCS R5 by Amit on 16-Aug-2010*/
      in_bfgaddressid               IN       site.bfg_address_id%TYPE,
      in_bfgsublocid                IN       site.bfg_subloc_id%TYPE,
      /*End : Added for GHUCS R5 by Amit on 16-Aug-2010*/

      -- ##### Change for 904 - Call Anywhere  begin
      in_kcidetails                 IN       VARCHAR2,
                                         -- for Keep Customer Informed details
      -- ##### Change for 904 - Call Anywhere  end
      /*line_of_site_billing added on 17/06/2010*/
      in_lineofsitebilling          IN       site.line_of_site_billing%TYPE,
      in_modifiedby                 IN       site.modified_by%TYPE,
      out_status                    OUT      NUMBER,
      out_errmsg                    OUT      VARCHAR2
   )
   AS
      v_addrline2              address.address_line2%TYPE;
      v_notes                  site.notes%TYPE;
      v_floor                  address.FLOOR%TYPE;
      v_room                   address.room%TYPE;
      v_classicsiteid          site.classic_site_id%TYPE;
      v_prifirstname           contact.first_name%TYPE;
      v_prilastname            contact.last_name%TYPE;
      v_prijobtitle            contact.job_title%TYPE;
      v_priemail               contact.email%TYPE;
      v_priphone               contact.phone_number%TYPE;
      v_primobile              contact.mobile_number%TYPE;
      v_prifax                 contact.fax%TYPE;
      v_secfirstname           contact.first_name%TYPE;
      v_seclastname            contact.last_name%TYPE;
      v_secjobtitle            contact.job_title%TYPE;
      v_secemail               contact.email%TYPE;
      v_secphone               contact.phone_number%TYPE;
      v_secmobile              contact.mobile_number%TYPE;
      v_secfax                 contact.fax%TYPE;
      v_billingid              site.billing_id%TYPE;
      v_row                    VARCHAR2 (2000);
      v_rowcount               NUMBER;
      v_addressid              address.address_id%TYPE;
      v_pricontactid           site.primary_contact_id%TYPE;
      v_seccontactid           site.secondary_contact_id%TYPE;
      v_siteid                 site.site_id%TYPE;
      v_fldcnt                 NUMBER;
      v_kgiflag                NUMBER                           := 1;
      v_flag                   NUMBER                           := 1;
      v_kgitype                VARCHAR2 (100);
      --v_kgitype         kgi_country.kgi_type%TYPE;
      v_techfirstname          contact.first_name%TYPE;
      v_techlastname           contact.last_name%TYPE;
      v_techjobtitle           contact.job_title%TYPE;
      v_techemail              contact.email%TYPE;
      v_techphone              contact.phone_number%TYPE;
      v_techmobile             contact.mobile_number%TYPE;
      v_techfax                contact.fax%TYPE;
      v_techcontactid          contact.contact_id%TYPE;
      v_contactcnt             NUMBER;
      v_countryname            country.NAME%TYPE;
      v_tempfirstname          contact.first_name%TYPE;
      v_templastname           contact.last_name%TYPE;
      v_tempjobtitle           contact.job_title%TYPE;
      v_tempemail              contact.email%TYPE;
      v_tempphone              contact.phone_number%TYPE;
      v_tempmobile             contact.mobile_number%TYPE;
      v_tempfax                contact.fax%TYPE;
      v_tempcontactid          contact.contact_id%TYPE;
      v_sa_contact_count       NUMBER;
      v_so_contact_count       NUMBER;
      v_sa_contactid           contact.contact_id%TYPE;
      v_so_contactid           contact.contact_id%TYPE;
      v_ppsr_notes             site.ppsr_note%TYPE;
      v_cntry_spec_notes_req   site.cntry_spec_notes_req%TYPE;
      v_url                    site.url%TYPE;
      /****R3 */
      v_pstn_number            contact.pstn_number%TYPE;
      v_primary_notes          contact.primary_notes%TYPE;
   BEGIN
      v_row := in_additionalsite;

      --modified for kgi_check from ppsr
      SELECT NAME
        INTO v_countryname
        FROM country
       WHERE country_id = in_countryid;

--      SELECT COUNT (*)
--        INTO v_rowcount
--        FROM kgi_country
--       WHERE country_id = in_countryid;

      --kgi check from PPSR
      SELECT COUNT (*)
        INTO v_rowcount
        FROM ppsr_owner.ppsr_kgi_data_v@dblink_ppsr
       WHERE UPPER (REPLACE ("Country", '''')) =
                                         UPPER (REPLACE (v_countryname, ''''));

--kgi check
      IF (v_rowcount != 0)
      THEN
         BEGIN
--            SELECT kgi_type
--              INTO v_kgitype
--              FROM kgi_country
--             WHERE country_id = in_countryid;

            --kgi check from PPSR
            SELECT DISTINCT "Kgi Type"
                       INTO v_kgitype
                       FROM ppsr_owner.ppsr_kgi_data_v@dblink_ppsr
                      WHERE UPPER (REPLACE ("Country", '''')) =
                                         UPPER (REPLACE (v_countryname, ''''));

            IF (UPPER (v_kgitype) LIKE '%CITY%')
            THEN
               BEGIN
                  IF (in_city IS NULL)
                  THEN
                     v_kgiflag := 0;
                  END IF;
               END;
            END IF;

            IF (UPPER (v_kgitype) LIKE '%POST CODE%')
            THEN
               BEGIN
                  IF (in_postzipcode IS NULL)
                  THEN
                     v_kgiflag := 0;
                  END IF;
               END;
            END IF;

            IF (   UPPER (v_kgitype) LIKE '%STREET NAME%'
                OR UPPER (v_kgitype) LIKE '%STREET NUMBER%'
               )
            THEN
               BEGIN
                  IF (in_addressline1 IS NULL)
                  THEN
                     v_kgiflag := 0;
                  END IF;
               END;
            END IF;

            IF (UPPER (v_kgitype) LIKE '%TELEPHONE AREA CODE%')
            THEN
               BEGIN
                  IF (in_telephoneareacode IS NULL)
                  THEN
                     v_kgiflag := 0;
                  END IF;
               END;
            END IF;

            IF (UPPER (v_kgitype) LIKE '%DISTRICT%')
            THEN
               BEGIN
                  v_addrline2 :=
                     SUBSTR (v_row,
                             INSTR (v_row, '|', 1, 2) + 1,
                               (INSTR (v_row, '|', 1, 3) - 1
                               )
                             - (INSTR (v_row, '|', 1, 2))
                            );

                  IF (v_addrline2 IS NULL)
                  THEN
                     v_kgiflag := 0;
                  END IF;
               END;
            END IF;
         END;
      END IF;

      IF (v_kgiflag = 0)
      THEN
         BEGIN
            out_status := pkg_constants.con_status_failure;
            out_errmsg := 'KGI Error: ' || v_kgitype || ' is mandatory';
         END;
      ELSE
         BEGIN
            SELECT COUNT (*)
              INTO v_rowcount
              FROM site
             WHERE site_id = in_siteid AND customer_id = in_customerid;

            IF (v_rowcount = 1)
            THEN
               BEGIN
                  -- SET TRANSACTION READ WRITE NAME 'site page';

                  --get address_id
                  SELECT address_id
                    INTO v_addressid
                    FROM site s
                   WHERE s.site_id = in_siteid AND customer_id = in_customerid;

                  --get primary_contact_id added on 30/12/2009
                  SELECT COUNT (*)
                    INTO v_contactcnt
                    FROM site s, site_contact_detail sc, contact c
                   WHERE s.site_id = sc.site_id
                     AND sc.contact_id = c.contact_id
                     AND UPPER (c.contact_type) =
                                 UPPER (pkg_constants.con_primary_sitecontact)
                     AND s.site_id = in_siteid
                     AND customer_id = in_customerid;

                  IF (v_contactcnt <> 0)
                  THEN
                     BEGIN
                        SELECT sc.contact_id
                          INTO v_pricontactid
                          FROM site s, site_contact_detail sc, contact c
                         WHERE s.site_id = sc.site_id
                           AND sc.contact_id = c.contact_id
                           AND UPPER (c.contact_type) =
                                  UPPER (pkg_constants.con_primary_sitecontact)
                           AND s.site_id = in_siteid
                           AND customer_id = in_customerid;
                     END;
                  ELSE
                     BEGIN
                        v_pricontactid := NULL;
                     END;
                  END IF;

                  --get secondary_contact_id added on 30/12/2009
                  SELECT COUNT (*)
                    INTO v_contactcnt
                    FROM site s, site_contact_detail sc, contact c
                   WHERE s.site_id = sc.site_id
                     AND sc.contact_id = c.contact_id
                     AND UPPER (c.contact_type) =
                               UPPER (pkg_constants.con_secondary_sitecontact)
                     AND s.site_id = in_siteid
                     AND customer_id = in_customerid;

                  IF (v_contactcnt <> 0)
                  THEN
                     BEGIN
                        SELECT sc.contact_id
                          INTO v_seccontactid
                          FROM site s, site_contact_detail sc, contact c
                         WHERE s.site_id = sc.site_id
                           AND sc.contact_id = c.contact_id
                           AND UPPER (c.contact_type) =
                                  UPPER
                                      (pkg_constants.con_secondary_sitecontact)
                           AND s.site_id = in_siteid
                           AND customer_id = in_customerid;
                     END;
                  ELSE
                     BEGIN
                        v_seccontactid := NULL;
                     END;
                  END IF;

                  --get technical_contact_id added on 30/12/2009
                  SELECT COUNT (*)
                    INTO v_contactcnt
                    FROM site s, site_contact_detail sc, contact c
                   WHERE s.site_id = sc.site_id
                     AND sc.contact_id = c.contact_id
                     AND UPPER (c.contact_type) =
                                    UPPER (pkg_constants.con_tech_sitecontact)
                     AND s.site_id = in_siteid
                     AND customer_id = in_customerid;

                  --get service assurance contact_id added on 3rd March 2010
                  SELECT COUNT (*)
                    INTO v_sa_contact_count
                    FROM site s, site_contact_detail sc, contact c
                   WHERE s.site_id = sc.site_id
                     AND sc.contact_id = c.contact_id
                     AND UPPER (c.contact_type) =
                              UPPER (pkg_constants.con_serv_assur_sitecontact)
                     AND s.site_id = in_siteid
                     AND customer_id = in_customerid;

                  --get service option contact_id added on 3rd march 2010
                  SELECT COUNT (*)
                    INTO v_so_contact_count
                    FROM site s, site_contact_detail sc, contact c
                   WHERE s.site_id = sc.site_id
                     AND sc.contact_id = c.contact_id
                     AND UPPER (c.contact_type) =
                               UPPER (pkg_constants.con_serv_deli_sitecontact)
                     AND s.site_id = in_siteid
                     AND customer_id = in_customerid;

                  IF (v_contactcnt <> 0)
                  THEN
                     BEGIN
                        SELECT sc.contact_id
                          INTO v_techcontactid
                          FROM site s, site_contact_detail sc, contact c
                         WHERE s.site_id = sc.site_id
                           AND sc.contact_id = c.contact_id
                           AND UPPER (c.contact_type) =
                                    UPPER (pkg_constants.con_tech_sitecontact)
                           AND s.site_id = in_siteid
                           AND customer_id = in_customerid;
                     END;
                  ELSE
                     BEGIN
                        v_techcontactid := NULL;
                     END;
                  END IF;

                  IF v_sa_contact_count <> 0
                  THEN
                     BEGIN
                        SELECT sc.contact_id
                          INTO v_sa_contactid
                          FROM site s, site_contact_detail sc, contact c
                         WHERE s.site_id = sc.site_id
                           AND sc.contact_id = c.contact_id
                           AND UPPER (c.contact_type) =
                                  UPPER
                                     (pkg_constants.con_serv_assur_sitecontact)
                           AND s.site_id = in_siteid
                           AND customer_id = in_customerid;
                     END;
                  ELSE
                     BEGIN
                        v_sa_contactid := NULL;
                     END;
                  END IF;

                  IF v_so_contact_count <> 0
                  THEN
                     BEGIN
                        SELECT sc.contact_id
                          INTO v_so_contactid
                          FROM site s, site_contact_detail sc, contact c
                         WHERE s.site_id = sc.site_id
                           AND sc.contact_id = c.contact_id
                           AND UPPER (c.contact_type) =
                                  UPPER
                                      (pkg_constants.con_serv_deli_sitecontact)
                           AND s.site_id = in_siteid
                           AND customer_id = in_customerid;
                     END;
                  ELSE
                     BEGIN
                        v_so_contactid := NULL;
                     END;
                  END IF;

                  --not using primary and secondary contact ids in site
                  UPDATE site
                     SET address_id = NULL,
                         primary_contact_id = NULL,
                         secondary_contact_id = NULL,
                         bfg_site_name = in_bfgsitename,
                         /*Start : Added for GHUCS R5 by Amit on 16-Aug-2010*/
                         bfg_address_id = in_bfgaddressid,
                         bfg_subloc_id = in_bfgsublocid
                         /*End : Added for GHUCS R5 by Amit on 16-Aug-2010*/
                   -- Ghucs, Added new parameter in_bfgsitename to update
                  WHERE  site_id = in_siteid AND customer_id = in_customerid
                      OR bfg_site_id = in_bfgsiteid;

                  -- Ghucs, Added new parameter in_bfgsiteid as OR condition
                  DELETE FROM address
                        WHERE address_id = v_addressid;

                  DELETE FROM site_contact_detail
                        WHERE site_id = in_siteid;

                  DELETE FROM contact
                        WHERE contact_id IN
                                 (v_pricontactid,
                                  v_seccontactid,
                                  v_techcontactid,
                                  v_sa_contactid,
                                  v_so_contactid
                                 );

                  SELECT address_id.NEXTVAL
                    INTO v_addressid
                    FROM DUAL;

                  INSERT INTO address
                              (address_id, country_id, building_number,
                               address_line1, city, state,
                               post_zip_code, created_by, created_date,
                               state_code, county
                              )
                       VALUES (v_addressid, in_countryid, in_buildingno,
                               in_addressline1, in_city, in_state,
                               in_postzipcode, in_modifiedby, SYSDATE (),
                               in_state_code, in_county
                              );

                  -- ##### Change for 904 - B-End validation  begin
                  UPDATE site
                     SET customer_report_site_name =
                                                    in_customer_reportsitename,
                         local_business_customer_name =
                                                   in_local_business_cust_name,
                         address_id = v_addressid,
                         classic_site_id = NULL,
                         billing_id = NULL,
                         telephone_area_code = in_telephoneareacode,
                         line_of_site_billing = in_lineofsitebilling,
                         notes = NULL,
                         modified_by = in_modifiedby,
                         modified_date = SYSDATE ()
                   WHERE site_id = in_siteid AND customer_id = in_customerid;

                  /*UPDATE site
                     SET customer_report_site_name =
                                                    in_customer_reportsitename,
                         address_id = v_addressid,
                         classic_site_id = NULL,
                         billing_id = NULL,
                         telephone_area_code = in_telephoneareacode,
                         notes = NULL,
                         modified_by = in_modifiedby,
                         modified_date = SYSDATE ()
                   WHERE site_id = in_siteid AND customer_id = in_customerid;*/

                  -- ##### Change for 904 - B-End validation  end
                  IF (in_additionalsite IS NOT NULL)
                  THEN
                     BEGIN
                        v_row := in_additionalsite;

                        SELECT pkg_common.fn_countfields (v_row, '|')
                          INTO v_fldcnt
                          FROM DUAL;

                        IF (v_fldcnt = 8)
                        THEN
                           BEGIN
                              v_floor :=
                                 SUBSTR (v_row,
                                         1,
                                         INSTR (v_row, '|', 1, 1) - 1
                                        );
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_room :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_addrline2 :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_classicsiteid :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_billingid :=
                                 TO_NUMBER (SUBSTR (v_row,
                                                    1,
                                                      INSTR (v_row, '|', 1, 1)
                                                    - 1
                                                   )
                                           );
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              /* Sprint2 Clean order managment SQE904 Starts */
                              v_notes :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_ppsr_notes :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_cntry_spec_notes_req :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_url := v_row;

                              /* Sprint2 Clean order managment SQE904  end*/
                              UPDATE address
                                 SET FLOOR = v_floor,
                                     room = v_room,
                                     address_line2 = v_addrline2
                               WHERE address_id = v_addressid;

                              UPDATE site
                                 SET classic_site_id = v_classicsiteid,
                                     billing_id = v_billingid,
                                     notes = v_notes,
                                     ppsr_note = v_ppsr_notes,
                                     cntry_spec_notes_req =
                                                        v_cntry_spec_notes_req,
                                     url = v_url
                               WHERE site_id = in_siteid
                                 AND customer_id = in_customerid;
                           END;
                        ELSE
                           BEGIN
                              out_errmsg := 'Invalid Additional Site details';
                           END;
                        END IF;
                     END;
                  END IF;                              --end in_additionalsite

                  v_row := NULL;

                  IF (in_pricontact IS NOT NULL)
                  THEN
                     BEGIN
                        v_row := in_pricontact;

                        SELECT pkg_common.fn_countfields (v_row, '|')
                          INTO v_fldcnt
                          FROM DUAL;

                        IF (v_fldcnt = 8)
                        THEN
                           BEGIN
                              v_prifirstname :=
                                 SUBSTR (v_row,
                                         1,
                                         INSTR (v_row, '|', 1, 1) - 1
                                        );
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_prilastname :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_prijobtitle :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_priemail :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_priphone :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_primobile :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              --v_prifax := v_row;
/********/
                              /*HVPN Design change R3 (2010) */
                              /*adding PSTN number and Notes in the primary contact section  */
                              v_prifax :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_pstn_number :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_primary_notes := v_row;

                              /*R3 ends */
                              /*******/
                              INSERT INTO contact
                                          (contact_id,
                                           first_name, last_name,
                                           phone_number, mobile_number, fax,
                                           contact_type,
                                           job_title, email,
                                           created_by, created_date,
                                           pstn_number, primary_notes
                                          )
                                   VALUES (contact_id.NEXTVAL,
                                           v_prifirstname, v_prilastname,
                                           v_priphone, v_primobile, v_prifax,
                                           pkg_constants.con_primary_sitecontact,
                                           v_prijobtitle, v_priemail,
                                           in_modifiedby, SYSDATE (),
                                           v_pstn_number, v_primary_notes
                                          )
                                RETURNING contact_id
                                     INTO v_pricontactid;

                              INSERT INTO site_contact_detail
                                          (site_contact_detail_id,
                                           site_id, contact_id,
                                           created_by, created_date
                                          )
                                   VALUES (site_contact_detail_id.NEXTVAL,
                                           in_siteid, v_pricontactid,
                                           in_modifiedby, SYSDATE
                                          );
                           END;
                        ELSE
                           BEGIN
                              out_errmsg := 'Invalid Primary Contact details';
                           END;
                        END IF;                                --end of fldcnt
                     END;
                  END IF;                    --end of primary contact not null

                  v_row := NULL;

                  IF (in_seccontact IS NOT NULL)
                  THEN
                     BEGIN
                        v_row := in_seccontact;

                        SELECT pkg_common.fn_countfields (v_row, '|')
                          INTO v_fldcnt
                          FROM DUAL;

                        IF (v_fldcnt = 6)
                        THEN
                           BEGIN
                              v_secfirstname :=
                                 SUBSTR (v_row,
                                         1,
                                         INSTR (v_row, '|', 1, 1) - 1
                                        );
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_seclastname :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_secjobtitle :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_secemail :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_secphone :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_secmobile :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_secfax := v_row;

                              INSERT INTO contact
                                          (contact_id,
                                           first_name, last_name,
                                           phone_number, mobile_number, fax,
                                           contact_type,
                                           job_title, email,
                                           created_by, created_date
                                          )
                                   VALUES (contact_id.NEXTVAL,
                                           v_secfirstname, v_seclastname,
                                           v_secphone, v_secmobile, v_secfax,
                                           pkg_constants.con_secondary_sitecontact,
                                           v_secjobtitle, v_secemail,
                                           in_modifiedby, SYSDATE ()
                                          )
                                RETURNING contact_id
                                     INTO v_seccontactid;

                              INSERT INTO site_contact_detail
                                          (site_contact_detail_id,
                                           site_id, contact_id,
                                           created_by, created_date
                                          )
                                   VALUES (site_contact_detail_id.NEXTVAL,
                                           in_siteid, v_seccontactid,
                                           in_modifiedby, SYSDATE
                                          );
                           END;
                        ELSE
                           BEGIN
                              out_errmsg :=
                                          'Invalid Secondary Contact details';
                           END;
                        END IF;                                --end of fldcnt
                     END;
                  END IF;                  --end of secondary contact not null

                  v_row := NULL;

                  IF (in_techcontact IS NOT NULL)
                  THEN
                     BEGIN
                        v_row := in_techcontact;

                        SELECT pkg_common.fn_countfields (v_row, '|')
                          INTO v_fldcnt
                          FROM DUAL;

                        IF (v_fldcnt = 6)
                        THEN
                           BEGIN
                              v_techfirstname :=
                                 SUBSTR (v_row,
                                         1,
                                         INSTR (v_row, '|', 1, 1) - 1
                                        );
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_techlastname :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_techjobtitle :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_techemail :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_techphone :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_techmobile :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_techfax := v_row;

                              INSERT INTO contact
                                          (contact_id,
                                           first_name, last_name,
                                           phone_number, mobile_number,
                                           fax,
                                           contact_type,
                                           job_title, email,
                                           created_by, created_date
                                          )
                                   VALUES (contact_id.NEXTVAL,
                                           v_techfirstname, v_techlastname,
                                           v_techphone, v_techmobile,
                                           v_techfax,
                                           pkg_constants.con_tech_sitecontact,
                                           v_techjobtitle, v_techemail,
                                           in_modifiedby, SYSDATE ()
                                          )
                                RETURNING contact_id
                                     INTO v_techcontactid;

                              INSERT INTO site_contact_detail
                                          (site_contact_detail_id,
                                           site_id, contact_id,
                                           created_by, created_date
                                          )
                                   VALUES (site_contact_detail_id.NEXTVAL,
                                           in_siteid, v_techcontactid,
                                           in_modifiedby, SYSDATE
                                          );
                           END;
                        ELSE
                           BEGIN
                              out_errmsg :=
                                          'Invalid Technical Contact details';
                           END;
                        END IF;                              --end of fldcount
                     END;
                  END IF;                  --end of technical contact not null

                  IF (in_servassurcontact IS NOT NULL)
                  THEN
                     BEGIN
                        v_row := in_servassurcontact;

                        SELECT pkg_common.fn_countfields (v_row, '|')
                          INTO v_fldcnt
                          FROM DUAL;

                        IF (v_fldcnt = 6)
                        THEN
                           BEGIN
                              v_tempfirstname :=
                                 SUBSTR (v_row,
                                         1,
                                         INSTR (v_row, '|', 1, 1) - 1
                                        );
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_templastname :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_tempjobtitle :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_tempemail :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_tempphone :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_tempmobile :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_tempfax := v_row;

                              INSERT INTO contact
                                          (contact_id,
                                           first_name, last_name,
                                           phone_number, mobile_number,
                                           fax,
                                           contact_type,
                                           job_title, email,
                                           created_by, created_date
                                          )
                                   VALUES (contact_id.NEXTVAL,
                                           v_tempfirstname, v_templastname,
                                           v_tempphone, v_tempmobile,
                                           v_tempfax,
                                           pkg_constants.con_serv_assur_sitecontact,
                                           v_tempjobtitle, v_tempemail,
                                           in_modifiedby, SYSDATE ()
                                          )
                                RETURNING contact_id
                                     INTO v_tempcontactid;

                              INSERT INTO site_contact_detail
                                          (site_contact_detail_id,
                                           site_id, contact_id,
                                           created_by, created_date
                                          )
                                   VALUES (site_contact_detail_id.NEXTVAL,
                                           in_siteid, v_tempcontactid,
                                           in_modifiedby, SYSDATE
                                          );
                           END;
                        ELSE
                           BEGIN
                              out_errmsg :=
                                  'Invalid service assurance contact details';
                           END;
                        END IF;                              --end of fldcount
                     END;
                  END IF;          --end of service assurance contact not null

                  IF (in_servicedlvcontact IS NOT NULL)
                  THEN
                     BEGIN
                        v_row := in_servicedlvcontact;

                        SELECT pkg_common.fn_countfields (v_row, '|')
                          INTO v_fldcnt
                          FROM DUAL;

                        IF (v_fldcnt = 6)
                        THEN
                           BEGIN
                              v_tempfirstname :=
                                 SUBSTR (v_row,
                                         1,
                                         INSTR (v_row, '|', 1, 1) - 1
                                        );
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_templastname :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_tempjobtitle :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_tempemail :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_tempphone :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_tempmobile :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_tempfax := v_row;

                              INSERT INTO contact
                                          (contact_id,
                                           first_name, last_name,
                                           phone_number, mobile_number,
                                           fax,
                                           contact_type,
                                           job_title, email,
                                           created_by, created_date
                                          )
                                   VALUES (contact_id.NEXTVAL,
                                           v_tempfirstname, v_templastname,
                                           v_tempphone, v_tempmobile,
                                           v_tempfax,
                                           pkg_constants.con_serv_deli_sitecontact,
                                           v_tempjobtitle, v_tempemail,
                                           in_modifiedby, SYSDATE ()
                                          )
                                RETURNING contact_id
                                     INTO v_tempcontactid;

                              INSERT INTO site_contact_detail
                                          (site_contact_detail_id,
                                           site_id, contact_id,
                                           created_by, created_date
                                          )
                                   VALUES (site_contact_detail_id.NEXTVAL,
                                           in_siteid, v_tempcontactid,
                                           in_modifiedby, SYSDATE
                                          );
                           END;
                        ELSE
                           BEGIN
                              out_errmsg :=
                                     'Invalid service option contact details';
                           END;
                        END IF;                              --end of fldcount
                     END;
                  END IF;             --end of service option contact not null

                  -- ##### Change for 904 - Call Anywhere  begin
                  IF (in_kcidetails IS NOT NULL)
                  THEN
                     BEGIN
                        v_row := in_kcidetails;

                        SELECT pkg_common.fn_countfields (v_row, '|')
                          INTO v_fldcnt
                          FROM DUAL;

                        IF (v_fldcnt = 6)
                        THEN
                           BEGIN
                              v_tempfirstname :=
                                 SUBSTR (v_row,
                                         1,
                                         INSTR (v_row, '|', 1, 1) - 1
                                        );
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_templastname :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_tempjobtitle :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_tempemail :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_tempphone :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_tempmobile :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_tempfax := v_row;

                              INSERT INTO contact
                                          (contact_id,
                                           first_name, last_name,
                                           phone_number, mobile_number,
                                           fax,
                                           contact_type,
                                           job_title, email,
                                           created_by, created_date
                                          )
                                   VALUES (contact_id.NEXTVAL,
                                           v_tempfirstname, v_templastname,
                                           v_tempphone, v_tempmobile,
                                           v_tempfax,
                                           pkg_constants.con_keep_cust_informeddetl,
                                           v_tempjobtitle, v_tempemail,
                                           in_modifiedby, SYSDATE ()
                                          )
                                RETURNING contact_id
                                     INTO v_tempcontactid;

                              INSERT INTO site_contact_detail
                                          (site_contact_detail_id,
                                           site_id, contact_id,
                                           created_by, created_date
                                          )
                                   VALUES (site_contact_detail_id.NEXTVAL,
                                           in_siteid, v_tempcontactid,
                                           in_modifiedby, SYSDATE
                                          );
                           END;
                        ELSE
                           BEGIN
                              out_errmsg := 'Invalid KCI details';
                           END;
                        END IF;                              --end of fldcount
                     END;
                  END IF;             --end of service option contact not null
               -- ##### Change for 904 - Call Anywhere  end

               --end of row count
               END;
            END IF;
         END;
      END IF;

      --end kgi flag
      IF (out_errmsg IS NOT NULL)
      THEN
         BEGIN
            out_status := pkg_constants.con_status_failure;
            -- ROLLBACK; Commented by Suresh
         END;
      ELSE
         BEGIN
            out_status := pkg_constants.con_status_success;
            --COMMIT;Commented by Suresh
         END;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         out_errmsg := SQLERRM;
         -- ROLLBACK; Commented by Suresh
   END;

   PROCEDURE sps_site (
      in_customerid   IN       customer.customer_id%TYPE,
      in_searchby     IN       VARCHAR2,
      in_keyword      IN       VARCHAR2,
      out_site        OUT      sys_refcursor
   )
   AS
   BEGIN
      IF (in_keyword IS NULL)
      THEN
         BEGIN
            OPEN out_site FOR
               SELECT   st.site_id "Site ID", st.NAME "Site Name",
                        addr.address_line1 "Address1",
                        addr.address_line2 "Address2", addr.city "City",
                        addr.state "State", cntry.NAME "Country",
                        addr.post_zip_code "Zip/Post Code",
                        addr.state_code "State Code"
                   FROM site st LEFT OUTER JOIN address addr
                        ON st.address_id = addr.address_id
                        LEFT OUTER JOIN country cntry
                        ON addr.country_id = cntry.country_id
                  WHERE st.customer_id = in_customerid
                    AND (   st.NAME IS NOT NULL
                         OR st.main_site_flag !=
                                              pkg_constants.con_activeflag_yes
                        )
               ORDER BY st.site_id;
         END;
      ELSE
         BEGIN
            CASE UPPER (in_searchby)
               WHEN 'SITE NAME'
               THEN
                  BEGIN
                     OPEN out_site FOR
                        SELECT   st.site_id "Site ID", st.NAME "Site Name",
                                 addr.address_line1 "Address1",
                                 addr.address_line2 "Address2",
                                 addr.city "City", addr.state "State",
                                 cntry.NAME "Country",
                                 addr.post_zip_code "Zip/Post Code",
                                 addr.state_code "State Code"
                            FROM site st LEFT OUTER JOIN address addr
                                 ON st.address_id = addr.address_id
                                 LEFT OUTER JOIN country cntry
                                 ON addr.country_id = cntry.country_id
                           WHERE UPPER (st.NAME) LIKE UPPER (in_keyword) ESCAPE '\'
                             AND st.customer_id = in_customerid
                             AND (   st.NAME IS NOT NULL
                                  OR st.main_site_flag !=
                                              pkg_constants.con_activeflag_yes
                                 )
                        ORDER BY st.site_id;
                  END;
               WHEN 'CITY'
               THEN
                  BEGIN
                     OPEN out_site FOR
                        SELECT   st.site_id "Site ID", st.NAME "Site Name",
                                 addr.address_line1 "Address1",
                                 addr.address_line2 "Address2",
                                 addr.city "City", addr.state "State",
                                 cntry.NAME "Country",
                                 addr.post_zip_code "Zip/Post Code",
                                 addr.state_code "State Code"
                            FROM site st LEFT OUTER JOIN address addr
                                 ON st.address_id = addr.address_id
                                 LEFT OUTER JOIN country cntry
                                 ON addr.country_id = cntry.country_id
                           WHERE UPPER (addr.city) LIKE UPPER (in_keyword)
                             AND st.customer_id = in_customerid
                             AND (   st.NAME IS NOT NULL
                                  OR st.main_site_flag !=
                                              pkg_constants.con_activeflag_yes
                                 )
                        ORDER BY st.site_id;
                  END;
               WHEN 'STATE'
               THEN
                  BEGIN
                     OPEN out_site FOR
                        SELECT   st.site_id "Site ID", st.NAME "Site Name",
                                 addr.address_line1 "Address1",
                                 addr.address_line2 "Address2",
                                 addr.city "City", addr.state "State",
                                 cntry.NAME "Country",
                                 addr.post_zip_code "Zip/Post Code",
                                 addr.state_code "State Code"
                            FROM site st LEFT OUTER JOIN address addr
                                 ON st.address_id = addr.address_id
                                 LEFT OUTER JOIN country cntry
                                 ON addr.country_id = cntry.country_id
                           WHERE UPPER (addr.state) LIKE UPPER (in_keyword)
                             AND st.customer_id = in_customerid
                             AND (   st.NAME IS NOT NULL
                                  OR st.main_site_flag !=
                                              pkg_constants.con_activeflag_yes
                                 )
                        ORDER BY st.site_id;
                  END;
               WHEN 'COUNTRY'
               THEN
                  BEGIN
                     OPEN out_site FOR
                        SELECT   st.site_id "Site ID", st.NAME "Site Name",
                                 addr.address_line1 "Address1",
                                 addr.address_line2 "Address2",
                                 addr.city "City", addr.state "State",
                                 cntry.NAME "Country",
                                 addr.post_zip_code "Zip/Post Code",
                                 addr.state_code "State Code"
                            FROM site st LEFT OUTER JOIN address addr
                                 ON st.address_id = addr.address_id
                                 LEFT OUTER JOIN country cntry
                                 ON addr.country_id = cntry.country_id
                           WHERE UPPER (cntry.NAME) LIKE UPPER (in_keyword)
                             AND st.customer_id = in_customerid
                             AND (   st.NAME IS NOT NULL
                                  OR st.main_site_flag !=
                                              pkg_constants.con_activeflag_yes
                                 )
                        ORDER BY st.site_id;
                  END;
               WHEN 'ZIP CODE'
               THEN
                  BEGIN
                     OPEN out_site FOR
                        SELECT   st.site_id "Site ID", st.NAME "Site Name",
                                 addr.address_line1 "Address1",
                                 addr.address_line2 "Address2",
                                 addr.city "City", addr.state "State",
                                 cntry.NAME "Country",
                                 addr.post_zip_code "Zip/Post Code",
                                 addr.state_code "State Code"
                            FROM site st LEFT OUTER JOIN address addr
                                 ON st.address_id = addr.address_id
                                 LEFT OUTER JOIN country cntry
                                 ON addr.country_id = cntry.country_id
                           WHERE UPPER (addr.post_zip_code) LIKE
                                                           UPPER (in_keyword)
                             AND st.customer_id = in_customerid
                             AND (   st.NAME IS NOT NULL
                                  OR st.main_site_flag !=
                                              pkg_constants.con_activeflag_yes
                                 )
                        ORDER BY st.site_id;
                  END;
               ELSE
                  BEGIN
                     IF (in_searchby IS NULL)
                     THEN
                        OPEN out_site FOR
                           SELECT   st.site_id "Site ID",
                                    st.NAME "Site Name",
                                    addr.address_line1 "Address1",
                                    addr.address_line2 "Address2",
                                    addr.city "City", addr.state "State",
                                    cntry.NAME "Country",
                                    addr.post_zip_code "Zip/Post Code",
                                    addr.state_code "State Code"
                               FROM site st LEFT OUTER JOIN address addr
                                    ON st.address_id = addr.address_id
                                    LEFT OUTER JOIN country cntry
                                    ON addr.country_id = cntry.country_id
                              WHERE st.customer_id = in_customerid
                                AND (   st.NAME IS NOT NULL
                                     OR st.main_site_flag !=
                                              pkg_constants.con_activeflag_yes
                                    )
                           ORDER BY st.site_id;
                     END IF;
                  END;
            END CASE;
         END;
      END IF;
   END;

   PROCEDURE spd_quote_site (
      in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
      in_siteid          IN       VARCHAR2,
      in_modifiedby      IN       quote_site.modified_by%TYPE,
      out_status         OUT      NUMBER,
      out_errmsg         OUT      VARCHAR2
   )
   AS
      CURSOR c_siteid
      IS
         SELECT *
           FROM TABLE
                     (CAST (pkg_common.fn_splitdata (in_siteid, '~') AS varchar2_ntt
                           )
                     );

      v_cntqoutesite   NUMBER;
      v_cntaccqref     NUMBER;
      v_cntlineitem    NUMBER;
      v_cntcpeqref     NUMBER;
      v_siteid         site.site_id%TYPE;
      v_quotesiteid    quote_site.quote_site_id%TYPE;
      v_productid      line_item.product_id%TYPE;
      v_count          NUMBER;
   BEGIN
      OPEN c_siteid;

      LOOP
         FETCH c_siteid
          INTO v_siteid;

         EXIT WHEN c_siteid%NOTFOUND;

         SELECT COUNT (*)
           INTO v_cntqoutesite
           FROM quote_site
          WHERE quote_header_id = in_quoteheaderid
            AND site_id = v_siteid
            AND active = pkg_constants.con_activeflag_yes;

         SELECT COUNT (*)
           INTO v_cntlineitem
           FROM line_item
          WHERE quote_header_id = in_quoteheaderid
            AND site_id = v_siteid
            AND active = pkg_constants.con_activeflag_yes;

         IF (v_cntqoutesite != 0)
         THEN
            BEGIN
               SELECT quote_site_id
                 INTO v_quotesiteid
                 FROM quote_site
                WHERE quote_header_id = in_quoteheaderid
                  AND site_id = v_siteid
                  AND active = pkg_constants.con_activeflag_yes;

               SELECT COUNT (*)
                 INTO v_cntaccqref
                 FROM access_qref
                WHERE quote_site_id = v_quotesiteid;

               SELECT COUNT (*)
                 INTO v_cntcpeqref
                 FROM cpe_qref
                WHERE quote_site_id = v_quotesiteid;

               IF (v_cntaccqref != 0)
               THEN
                  BEGIN
                     --delete access_caveat and access_qref
                     DELETE FROM access_caveat
                           WHERE access_qref_id IN (
                                          SELECT access_qref_id
                                            FROM access_qref
                                           WHERE quote_site_id =
                                                                v_quotesiteid);

                     DELETE FROM access_qref
                           WHERE quote_site_id = v_quotesiteid;
                  END;
               END IF;

               IF (v_cntcpeqref != 0)
               THEN
                  BEGIN
                     --delete cpe_caveat and cpe_qref
                     DELETE FROM cpe_caveat
                           WHERE cpe_qref_id IN (
                                          SELECT cpe_qref_id
                                            FROM cpe_qref
                                           WHERE quote_site_id =
                                                                v_quotesiteid);

                     DELETE FROM cpe_qref
                           WHERE quote_site_id = v_quotesiteid;
                  END;
               END IF;
            END;
         END IF;

         IF (v_cntlineitem != 0)
         THEN
            BEGIN
               --update line_item_detail and price_line_item_detail
               UPDATE line_item_detail
                  SET active = pkg_constants.con_activeflag_no,
                      modified_by = in_modifiedby,
                      modified_date = SYSDATE
                WHERE line_item_id IN (
                         SELECT line_item_id
                           FROM line_item
                          WHERE quote_header_id = in_quoteheaderid
                            AND site_id = v_siteid
                            AND active = pkg_constants.con_activeflag_yes);

               UPDATE price_line_item_detail
                  SET active = pkg_constants.con_activeflag_no,
                      modified_by = in_modifiedby,
                      modified_date = SYSDATE
                WHERE line_item_id IN (
                         SELECT line_item_id
                           FROM line_item
                          WHERE quote_header_id = in_quoteheaderid
                            AND site_id = v_siteid
                            AND active = pkg_constants.con_activeflag_yes);
            END;
         END IF;

         --update line_item and quote_site
         UPDATE line_item
            SET active = pkg_constants.con_activeflag_no,
                modified_by = in_modifiedby,
                modified_date = SYSDATE
          WHERE quote_header_id = in_quoteheaderid AND site_id = v_siteid;

         UPDATE quote_site
            SET active = pkg_constants.con_activeflag_no,
                modified_by = in_modifiedby,
                modified_date = SYSDATE
          WHERE quote_header_id = in_quoteheaderid AND site_id = v_siteid;

              --Added by Tanmayi on 03/08/2010 for R5 product_selection
         /*UPDATE product_selection
            SET active = pkg_constants.con_activeflag_no,
                modified_by = in_modifiedby,
                modified_date = SYSDATE
          WHERE quote_header_id = in_quoteheaderid
            AND site_id = v_siteid
            AND active = pkg_constants.con_activeflag_yes;  */

      END LOOP;

      out_status := pkg_constants.con_status_success;
      --COMMIT;Commented by Suresh
   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         out_errmsg := SQLERRM;
         -- ROLLBACK; Commented by Suresh
   END;

   PROCEDURE spi_bulk_upload (
      --returns site id and status for each individual upload
      --modified on 30/12/2009 to insert technical contact details
      in_customerid   IN       customer.customer_id%TYPE,
      in_site         IN       CLOB,
      in_batchid      IN       site_bulk_upload.batch_id%TYPE,
      in_filename     IN       site_bulk_upload.file_name%TYPE,
      in_createdby    IN       site.created_by%TYPE,
      out_batchid     OUT      site_bulk_upload.batch_id%TYPE,
      out_nextsite    OUT      site.NAME%TYPE
   )         --returns the site id and status of insert for each site uploaded
   AS
      CURSOR c_sitedetails
      IS
         SELECT *
           FROM TABLE
                   (CAST
                       (pkg_common.fn_splitbulkupload (in_site, '|') AS varchar2_clob
                       )
                   );

      v_tsitename       t_sitename;
      v_troom           t_room;
      v_tfloor          t_floor;
      v_tbldgno         t_bldgno;
      v_taddrline1      t_addrline1;
      v_taddrline2      t_addrline2;
      v_ttelareacode    t_telareacode;
      v_tcity           t_city;
      v_tstate          t_state;
      v_tcountry        t_country;
      v_tpostcode       t_postcode;
      v_tprilastname    t_prilastname;
      v_tprifirstname   t_prifirstname;
      v_tpriemail       t_priemail;
      v_tprifax         t_prifax;
      v_tpriphone       t_priphone;
      v_tprimobile      t_primobile;
      v_tprijob         t_prijob;
      v_tseclastname    t_seclastname;
      v_tsecfirstname   t_secfirstname;
      v_tsecemail       t_secemail;
      v_tsecfax         t_secfax;
      v_tsecphone       t_secphone;
      v_tsecmobile      t_secmobile;
      v_tsecjob         t_secjob;
      v_addressid       address.address_id%TYPE;
      v_row             VARCHAR2 (4000);
      v_i               NUMBER                           := 0;
      v_rowcount        NUMBER;
      v_countryid       country.country_id%TYPE;
      v_pricontactid    site.primary_contact_id%TYPE;
      v_seccontactid    site.secondary_contact_id%TYPE;
      v_siteid          site.site_id%TYPE;
      v_fldcnt          NUMBER;
      v_batchid         site_bulk_upload.batch_id%TYPE;
      v_currsite        VARCHAR2 (2000);
      -- v_currsite        site.NAME%TYPE;
      v_errmsg          VARCHAR2 (100);
      v_kgiflag         NUMBER                           := 1;
      v_kgitype         VARCHAR2 (100);
      --v_kgitype         kgi_country.kgi_type%TYPE;
      v_ttechfname      t_techfirstname;
      v_ttechlname      t_techlastname;
      v_ttechjob        t_techjob;
      v_ttechemail      t_techemail;
      v_ttechphone      t_techphone;
      v_ttechmobile     t_techmobile;
      v_ttechfax        t_techfax;
      v_techcontactid   contact.contact_id%TYPE;
      v_contactcnt      NUMBER;
      success           SMALLINT                         := 1;
   BEGIN
      OPEN c_sitedetails;

      --if the insert belongs the new batch id or same batch.
      IF (in_batchid IS NULL)
      THEN
         BEGIN
            INSERT INTO site_bulk_upload
                        (batch_id, file_name, created_by, created_date
                        )
                 VALUES (batch_id.NEXTVAL, in_filename, in_createdby, SYSDATE
                        )
              RETURNING batch_id
                   INTO v_batchid;
         END;
      ELSE
         BEGIN
            v_batchid := in_batchid;
         END;
      END IF;

      out_batchid := v_batchid;
      --COMMIT; Commented by Suresh

      IF (in_site IS NOT NULL)
      THEN
         BEGIN
            LOOP
               FETCH c_sitedetails
                INTO v_row;

               EXIT WHEN c_sitedetails%NOTFOUND;

               --check the number of input parameters
               SELECT pkg_common.fn_countbulkupload (v_row, '~')
                 INTO v_fldcnt
                 FROM DUAL;

               v_currsite := SUBSTR (v_row, 1, INSTR (v_row, '~', 1, 1) - 1);

               --if number parameters is incorrect, doesnot insert the values into the
               --table types
               IF (v_fldcnt = 31
                  )               --total 32 parameters modified on 30/12/2009
               THEN
                  BEGIN
                     v_i := v_i + 1;
                     v_tsitename (v_i) :=
                               SUBSTR (v_row, 1, INSTR (v_row, '~', 1, 1) - 1);
                     v_row :=
                        SUBSTR (v_row,
                                INSTR (v_row, '~', 1, 1) + 1,
                                LENGTH (v_row) - INSTR (v_row, '~', 1, 1)
                               );
                     v_tcountry (v_i) :=
                                SUBSTR (v_row, 1, INSTR (v_row, '~', 1, 1) - 1);
                     v_row :=
                        SUBSTR (v_row,
                                INSTR (v_row, '~', 1, 1) + 1,
                                LENGTH (v_row) - INSTR (v_row, '~', 1, 1)
                               );
                     v_tcity (v_i) :=
                                SUBSTR (v_row, 1, INSTR (v_row, '~', 1, 1) - 1);
                     v_row :=
                        SUBSTR (v_row,
                                INSTR (v_row, '~', 1, 1) + 1,
                                LENGTH (v_row) - INSTR (v_row, '~', 1, 1)
                               );
                     v_tbldgno (v_i) :=
                                SUBSTR (v_row, 1, INSTR (v_row, '~', 1, 1) - 1);
                     v_row :=
                        SUBSTR (v_row,
                                INSTR (v_row, '~', 1, 1) + 1,
                                LENGTH (v_row) - INSTR (v_row, '~', 1, 1)
                               );
                     v_taddrline1 (v_i) :=
                                SUBSTR (v_row, 1, INSTR (v_row, '~', 1, 1) - 1);
                     v_row :=
                        SUBSTR (v_row,
                                INSTR (v_row, '~', 1, 1) + 1,
                                LENGTH (v_row) - INSTR (v_row, '~', 1, 1)
                               );
                     v_taddrline2 (v_i) :=
                                SUBSTR (v_row, 1, INSTR (v_row, '~', 1, 1) - 1);
                     v_row :=
                        SUBSTR (v_row,
                                INSTR (v_row, '~', 1, 1) + 1,
                                LENGTH (v_row) - INSTR (v_row, '~', 1, 1)
                               );
                     v_tpostcode (v_i) :=
                                SUBSTR (v_row, 1, INSTR (v_row, '~', 1, 1) - 1);
                     v_row :=
                        SUBSTR (v_row,
                                INSTR (v_row, '~', 1, 1) + 1,
                                LENGTH (v_row) - INSTR (v_row, '~', 1, 1)
                               );
                     v_tstate (v_i) :=
                                SUBSTR (v_row, 1, INSTR (v_row, '~', 1, 1) - 1);
                     v_row :=
                        SUBSTR (v_row,
                                INSTR (v_row, '~', 1, 1) + 1,
                                LENGTH (v_row) - INSTR (v_row, '~', 1, 1)
                               );
                     v_ttelareacode (v_i) :=
                                SUBSTR (v_row, 1, INSTR (v_row, '~', 1, 1) - 1);
                     v_row :=
                        SUBSTR (v_row,
                                INSTR (v_row, '~', 1, 1) + 1,
                                LENGTH (v_row) - INSTR (v_row, '~', 1, 1)
                               );
                     v_troom (v_i) :=
                                SUBSTR (v_row, 1, INSTR (v_row, '~', 1, 1) - 1);
                     v_row :=
                        SUBSTR (v_row,
                                INSTR (v_row, '~', 1, 1) + 1,
                                LENGTH (v_row) - INSTR (v_row, '~', 1, 1)
                               );
                     v_tfloor (v_i) :=
                                SUBSTR (v_row, 1, INSTR (v_row, '~', 1, 1) - 1);
                     v_row :=
                        SUBSTR (v_row,
                                INSTR (v_row, '~', 1, 1) + 1,
                                LENGTH (v_row) - INSTR (v_row, '~', 1, 1)
                               );
                     v_tprilastname (v_i) :=
                                SUBSTR (v_row, 1, INSTR (v_row, '~', 1, 1) - 1);
                     v_row :=
                        SUBSTR (v_row,
                                INSTR (v_row, '~', 1, 1) + 1,
                                LENGTH (v_row) - INSTR (v_row, '~', 1, 1)
                               );
                     v_tprifirstname (v_i) :=
                                SUBSTR (v_row, 1, INSTR (v_row, '~', 1, 1) - 1);
                     v_row :=
                        SUBSTR (v_row,
                                INSTR (v_row, '~', 1, 1) + 1,
                                LENGTH (v_row) - INSTR (v_row, '~', 1, 1)
                               );
                     v_tprijob (v_i) :=
                                SUBSTR (v_row, 1, INSTR (v_row, '~', 1, 1) - 1);
                     v_row :=
                        SUBSTR (v_row,
                                INSTR (v_row, '~', 1, 1) + 1,
                                LENGTH (v_row) - INSTR (v_row, '~', 1, 1)
                               );
                     v_tpriemail (v_i) :=
                                SUBSTR (v_row, 1, INSTR (v_row, '~', 1, 1) - 1);
                     v_row :=
                        SUBSTR (v_row,
                                INSTR (v_row, '~', 1, 1) + 1,
                                LENGTH (v_row) - INSTR (v_row, '~', 1, 1)
                               );
                     v_tpriphone (v_i) :=
                                SUBSTR (v_row, 1, INSTR (v_row, '~', 1, 1) - 1);
                     v_row :=
                        SUBSTR (v_row,
                                INSTR (v_row, '~', 1, 1) + 1,
                                LENGTH (v_row) - INSTR (v_row, '~', 1, 1)
                               );
                     v_tprimobile (v_i) :=
                                SUBSTR (v_row, 1, INSTR (v_row, '~', 1, 1) - 1);
                     v_row :=
                        SUBSTR (v_row,
                                INSTR (v_row, '~', 1, 1) + 1,
                                LENGTH (v_row) - INSTR (v_row, '~', 1, 1)
                               );
                     v_tprifax (v_i) :=
                                SUBSTR (v_row, 1, INSTR (v_row, '~', 1, 1) - 1);
                     v_row :=
                        SUBSTR (v_row,
                                INSTR (v_row, '~', 1, 1) + 1,
                                LENGTH (v_row) - INSTR (v_row, '~', 1, 1)
                               );
                     v_tseclastname (v_i) :=
                                SUBSTR (v_row, 1, INSTR (v_row, '~', 1, 1) - 1);
                     v_row :=
                        SUBSTR (v_row,
                                INSTR (v_row, '~', 1, 1) + 1,
                                LENGTH (v_row) - INSTR (v_row, '~', 1, 1)
                               );
                     v_tsecfirstname (v_i) :=
                                SUBSTR (v_row, 1, INSTR (v_row, '~', 1, 1) - 1);
                     v_row :=
                        SUBSTR (v_row,
                                INSTR (v_row, '~', 1, 1) + 1,
                                LENGTH (v_row) - INSTR (v_row, '~', 1, 1)
                               );
                     v_tsecjob (v_i) :=
                                SUBSTR (v_row, 1, INSTR (v_row, '~', 1, 1) - 1);
                     v_row :=
                        SUBSTR (v_row,
                                INSTR (v_row, '~', 1, 1) + 1,
                                LENGTH (v_row) - INSTR (v_row, '~', 1, 1)
                               );
                     v_tsecemail (v_i) :=
                                SUBSTR (v_row, 1, INSTR (v_row, '~', 1, 1) - 1);
                     v_row :=
                        SUBSTR (v_row,
                                INSTR (v_row, '~', 1, 1) + 1,
                                LENGTH (v_row) - INSTR (v_row, '~', 1, 1)
                               );
                     v_tsecphone (v_i) :=
                                SUBSTR (v_row, 1, INSTR (v_row, '~', 1, 1) - 1);
                     v_row :=
                        SUBSTR (v_row,
                                INSTR (v_row, '~', 1, 1) + 1,
                                LENGTH (v_row) - INSTR (v_row, '~', 1, 1)
                               );
                     v_tsecmobile (v_i) :=
                                SUBSTR (v_row, 1, INSTR (v_row, '~', 1, 1) - 1);
                     v_row :=
                        SUBSTR (v_row,
                                INSTR (v_row, '~', 1, 1) + 1,
                                LENGTH (v_row) - INSTR (v_row, '~', 1, 1)
                               );
                     v_tsecfax (v_i) :=
                                SUBSTR (v_row, 1, INSTR (v_row, '~', 1, 1) - 1);
                     v_row :=
                        SUBSTR (v_row,
                                INSTR (v_row, '~', 1, 1) + 1,
                                LENGTH (v_row) - INSTR (v_row, '~', 1, 1)
                               );
                     v_ttechlname (v_i) :=
                                SUBSTR (v_row, 1, INSTR (v_row, '~', 1, 1) - 1);
                     v_row :=
                        SUBSTR (v_row,
                                INSTR (v_row, '~', 1, 1) + 1,
                                LENGTH (v_row) - INSTR (v_row, '~', 1, 1)
                               );
                     v_ttechfname (v_i) :=
                                SUBSTR (v_row, 1, INSTR (v_row, '~', 1, 1) - 1);
                     v_row :=
                        SUBSTR (v_row,
                                INSTR (v_row, '~', 1, 1) + 1,
                                LENGTH (v_row) - INSTR (v_row, '~', 1, 1)
                               );
                     v_ttechjob (v_i) :=
                                SUBSTR (v_row, 1, INSTR (v_row, '~', 1, 1) - 1);
                     v_row :=
                        SUBSTR (v_row,
                                INSTR (v_row, '~', 1, 1) + 1,
                                LENGTH (v_row) - INSTR (v_row, '~', 1, 1)
                               );
                     v_ttechemail (v_i) :=
                                SUBSTR (v_row, 1, INSTR (v_row, '~', 1, 1) - 1);
                     v_row :=
                        SUBSTR (v_row,
                                INSTR (v_row, '~', 1, 1) + 1,
                                LENGTH (v_row) - INSTR (v_row, '~', 1, 1)
                               );
                     v_ttechphone (v_i) :=
                                SUBSTR (v_row, 1, INSTR (v_row, '~', 1, 1) - 1);
                     v_row :=
                        SUBSTR (v_row,
                                INSTR (v_row, '~', 1, 1) + 1,
                                LENGTH (v_row) - INSTR (v_row, '~', 1, 1)
                               );
                     v_ttechmobile (v_i) :=
                                SUBSTR (v_row, 1, INSTR (v_row, '~', 1, 1) - 1);
                     v_row :=
                        SUBSTR (v_row,
                                INSTR (v_row, '~', 1, 1) + 1,
                                LENGTH (v_row) - INSTR (v_row, '~', 1, 1)
                               );
                     v_ttechfax (v_i) := v_row;
                  END;
               ELSE
                  BEGIN
                     INSERT INTO site_log
                                 (site_log_id, batch_id,
                                  site_name,
                                  status,
                                  reason,
                                  created_by, created_date
                                 )
                          VALUES (site_log_id.NEXTVAL, v_batchid,
                                  SUBSTR (v_currsite, 1, 100),
                                  pkg_constants.con_status_failure,
                                  'Invalid number of parameters',
                                  in_createdby, SYSDATE
                                 );

                     --COMMIT; Commented by Suresh
                  END;
               END IF;
            END LOOP;

            CLOSE c_sitedetails;

            -- SET TRANSACTION READ WRITE NAME 'site_bulk_upload_page';
            BEGIN
               v_i := v_tsitename.FIRST;

               IF (v_i IS NOT NULL)
               THEN
                  BEGIN
                     FOR i IN v_tsitename.FIRST .. v_tsitename.LAST
                     LOOP
                        v_currsite := v_tsitename (i);
                        v_kgiflag := 1;

                        IF (i = v_tsitename.LAST)  --if this is the last site
                        THEN
                           out_nextsite := NULL;
                        ELSE
                           out_nextsite :=
                                         SUBSTR (v_tsitename (i + 1), 1, 100);
                        END IF;

                        SELECT COUNT (*)
                          INTO v_rowcount
                          FROM country
                         WHERE UPPER (REPLACE (NAME, '''')) =
                                        UPPER (REPLACE (v_tcountry (i), ''''));

                        IF (v_rowcount = 0
                           )           --country doesnt exist in country table
                        THEN
                           BEGIN
                              INSERT INTO site_log
                                          (site_log_id, batch_id,
                                           site_name,
                                           status,
                                           reason, created_by,
                                           created_date
                                          )
                                   VALUES (site_log_id.NEXTVAL, v_batchid,
                                           SUBSTR (v_currsite, 1, 100),
                                           pkg_constants.con_status_failure,
                                           'Invalid Country', in_createdby,
                                           SYSDATE
                                          );
                           END;
                        ELSE
                           BEGIN
                              SELECT country_id
                                INTO v_countryid
                                FROM country
                               WHERE UPPER (REPLACE (NAME, '''')) =
                                        UPPER (REPLACE (v_tcountry (i), ''''));

--                              SELECT COUNT (*)
--                                INTO v_rowcount
--                                FROM kgi_country
--                               WHERE country_id = v_countryid;

                              --                                --kgi check from PPSR
                              SELECT COUNT (*)
                                INTO v_rowcount
                                FROM ppsr_owner.ppsr_kgi_data_v@dblink_ppsr
                               WHERE UPPER (REPLACE ("Country", '''')) =
                                        UPPER (REPLACE (v_tcountry (i), ''''));

                              IF (v_rowcount != 0)
                              THEN
                                 BEGIN
                                    --------------KGI Check------------------
--                                    SELECT kgi_type
--                                      INTO v_kgitype
--                                      FROM kgi_country
--                                     WHERE country_id = v_countryid;

                                    --kgi check from PPSR
                                    SELECT DISTINCT "Kgi Type"
                                               INTO v_kgitype
                                               FROM ppsr_owner.ppsr_kgi_data_v@dblink_ppsr
                                              WHERE UPPER (REPLACE ("Country",
                                                                    ''''
                                                                   )
                                                          ) =
                                                       UPPER
                                                          (REPLACE
                                                               (v_tcountry (i),
                                                                ''''
                                                               )
                                                          );

                                    IF (UPPER (v_kgitype) LIKE '%CITY%')
                                    THEN
                                       BEGIN
                                          IF (v_tcity (i) IS NULL)
                                          THEN
                                             v_kgiflag := 0;
                                          END IF;
                                       END;
                                    END IF;

                                    IF (UPPER (v_kgitype) LIKE '%POST CODE%')
                                    THEN
                                       BEGIN
                                          IF (v_tpostcode (i) IS NULL)
                                          THEN
                                             v_kgiflag := 0;
                                          END IF;
                                       END;
                                    END IF;

                                    IF (   UPPER (v_kgitype) LIKE
                                                               '%STREET NAME%'
                                        OR UPPER (v_kgitype) LIKE
                                                             '%STREET NUMBER%'
                                       )
                                    THEN
                                       BEGIN
                                          IF (v_taddrline1 (i) IS NULL)
                                          THEN
                                             v_kgiflag := 0;
                                          END IF;
                                       END;
                                    END IF;

                                    IF (UPPER (v_kgitype) LIKE
                                                       '%TELEPHONE AREA CODE%'
                                       )
                                    THEN
                                       BEGIN
                                          IF (v_ttelareacode (i) IS NULL)
                                          THEN
                                             v_kgiflag := 0;
                                          END IF;
                                       END;
                                    END IF;

                                    IF (UPPER (v_kgitype) LIKE '%DISTRICT%')
                                    THEN
                                       BEGIN
                                          IF (v_taddrline2 (i) IS NULL)
                                          THEN
                                             v_kgiflag := 0;
                                          END IF;
                                       END;
                                    END IF;
                                 END;
                              END IF;

------------------------------------------------
                              IF (v_kgiflag = 1)
                              THEN
                                 success := 1;

                                 BEGIN
                                    SELECT COUNT (*)
                                      INTO v_rowcount
                                      FROM site
                                     WHERE UPPER (NAME) =
                                                       UPPER (v_tsitename (i))
                                       AND customer_id = in_customerid;

                                    IF (v_rowcount = 0)   --site doesnot exist
                                    THEN
                                       BEGIN
                                          INSERT INTO address
                                                      (address_id,
                                                       country_id,
                                                       building_number,
                                                       address_line1,
                                                       city,
                                                       state,
                                                       post_zip_code,
                                                       room,
                                                       FLOOR,
                                                       address_line2,
                                                       created_by,
                                                       created_date
                                                      )
                                               VALUES (address_id.NEXTVAL,
                                                       v_countryid,
                                                       v_tbldgno (i),
                                                       v_taddrline1 (i),
                                                       v_tcity (i),
                                                       v_tstate (i),
                                                       v_tpostcode (i),
                                                       v_troom (i),
                                                       v_tfloor (i),
                                                       v_taddrline2 (i),
                                                       in_createdby,
                                                       SYSDATE ()
                                                      )
                                            RETURNING address_id
                                                 INTO v_addressid;

                                          INSERT INTO site
                                                      (site_id,
                                                       NAME,
                                                       address_id,
                                                       customer_id,
                                                       telephone_area_code,
                                                       created_by,
                                                       created_date,
                                                       customer_report_site_name,
                                                       batch_id
                                                      )
                                               VALUES (site_id.NEXTVAL,
                                                       v_tsitename (i),
                                                       v_addressid,
                                                       in_customerid,
                                                       --  v_pricontactid,
                                                        -- v_seccontactid,
                                                       v_ttelareacode (i),
                                                       in_createdby,
                                                       SYSDATE,
                                                       v_tsitename (i),
                                                       v_batchid
                                                      )
                                            RETURNING site_id
                                                 INTO v_siteid;

                                          --insert primary contact details added on 30/12/2009
                                          IF (   v_tprifirstname (i) IS NOT NULL
                                              OR v_tprilastname (i) IS NOT NULL
                                              OR v_tpriemail (i) IS NOT NULL
                                              OR v_tpriphone (i) IS NOT NULL
                                              OR v_tprifax (i) IS NOT NULL
                                             )
                                          THEN
                                             BEGIN
                                                INSERT INTO contact
                                                            (contact_id,
                                                             first_name,
                                                             last_name,
                                                             phone_number,
                                                             mobile_number,
                                                             fax,
                                                             job_title,
                                                             contact_type,
                                                             created_by,
                                                             created_date,
                                                             email
                                                            )
                                                     VALUES (contact_id.NEXTVAL,
                                                             v_tprifirstname
                                                                           (i),
                                                             v_tprilastname
                                                                           (i),
                                                             v_tpriphone (i),
                                                             v_tprimobile (i),
                                                             v_tprifax (i),
                                                             v_tprijob (i),
                                                             pkg_constants.con_primary_sitecontact,
                                                             in_createdby,
                                                             SYSDATE (),
                                                             v_tpriemail (i)
                                                            )
                                                  RETURNING contact_id
                                                       INTO v_pricontactid;

                                                INSERT INTO site_contact_detail
                                                            (site_contact_detail_id,
                                                             site_id,
                                                             contact_id,
                                                             created_by,
                                                             created_date
                                                            )
                                                     VALUES (site_contact_detail_id.NEXTVAL,
                                                             v_siteid,
                                                             v_pricontactid,
                                                             in_createdby,
                                                             SYSDATE
                                                            );
                                             END;
                                          ELSE
                                             BEGIN
                                                v_pricontactid := NULL;
                                             END;
                                          END IF;

                                          --insert secondary contact details added on 30/12/2009
                                          IF (   v_tsecfirstname (i) IS NOT NULL
                                              OR v_tseclastname (i) IS NOT NULL
                                              OR v_tsecemail (i) IS NOT NULL
                                              OR v_tsecphone (i) IS NOT NULL
                                              OR v_tsecfax (i) IS NOT NULL
                                             )
                                          THEN
                                             BEGIN
                                                INSERT INTO contact
                                                            (contact_id,
                                                             first_name,
                                                             last_name,
                                                             phone_number,
                                                             mobile_number,
                                                             fax,
                                                             job_title,
                                                             contact_type,
                                                             created_by,
                                                             created_date,
                                                             email
                                                            )
                                                     VALUES (contact_id.NEXTVAL,
                                                             v_tsecfirstname
                                                                           (i),
                                                             v_tseclastname
                                                                           (i),
                                                             v_tsecphone (i),
                                                             v_tsecmobile (i),
                                                             v_tsecfax (i),
                                                             v_tsecjob (i),
                                                             pkg_constants.con_secondary_sitecontact,
                                                             in_createdby,
                                                             SYSDATE (),
                                                             v_tsecemail (i)
                                                            )
                                                  RETURNING contact_id
                                                       INTO v_seccontactid;

                                                INSERT INTO site_contact_detail
                                                            (site_contact_detail_id,
                                                             site_id,
                                                             contact_id,
                                                             created_by,
                                                             created_date
                                                            )
                                                     VALUES (site_contact_detail_id.NEXTVAL,
                                                             v_siteid,
                                                             v_seccontactid,
                                                             in_createdby,
                                                             SYSDATE
                                                            );
                                             END;
                                          ELSE
                                             --added on 22/12/2009 to handle null secondary contact details
                                             BEGIN
                                                v_seccontactid := NULL;
                                             END;
                                          END IF;

                                          --insert technical contact details added on 30/12/2009
                                          IF (   v_ttechfname (i) IS NOT NULL
                                              OR v_ttechlname (i) IS NOT NULL
                                              OR v_ttechemail (i) IS NOT NULL
                                              OR v_ttechphone (i) IS NOT NULL
                                              OR v_ttechfax (i) IS NOT NULL
                                             )
                                          THEN
                                             BEGIN
                                                INSERT INTO contact
                                                            (contact_id,
                                                             first_name,
                                                             last_name,
                                                             phone_number,
                                                             mobile_number,
                                                             fax,
                                                             job_title,
                                                             contact_type,
                                                             created_by,
                                                             created_date,
                                                             email
                                                            )
                                                     VALUES (contact_id.NEXTVAL,
                                                             v_ttechfname (i),
                                                             v_ttechlname (i),
                                                             v_ttechphone (i),
                                                             v_ttechmobile (i),
                                                             v_ttechfax (i),
                                                             v_ttechjob (i),
                                                             pkg_constants.con_tech_sitecontact,
                                                             in_createdby,
                                                             SYSDATE (),
                                                             v_ttechemail (i)
                                                            )
                                                  RETURNING contact_id
                                                       INTO v_techcontactid;

                                                INSERT INTO site_contact_detail
                                                            (site_contact_detail_id,
                                                             site_id,
                                                             contact_id,
                                                             created_by,
                                                             created_date
                                                            )
                                                     VALUES (site_contact_detail_id.NEXTVAL,
                                                             v_siteid,
                                                             v_techcontactid,
                                                             in_createdby,
                                                             SYSDATE
                                                            );
                                             END;
                                          ELSE
                                             --added on 22/12/2009 to handle null secondary contact details
                                             BEGIN
                                                v_techcontactid := NULL;
                                             END;
                                          END IF;
                                       END;
                                    ELSE          --update if row is duplicate
                                       BEGIN
                                          v_contactcnt := NULL;

                                          SELECT site_id, address_id
                                            INTO v_siteid, v_addressid
                                            FROM site
                                           WHERE UPPER (NAME) =
                                                       UPPER (v_tsitename (i))
                                             AND customer_id = in_customerid;

                                          --Modified on 23-Jan-2010, do not allow any modification of a site
                                          --if it is associated to a quote.
                                          SELECT COUNT (*)
                                            INTO v_rowcount
                                            FROM quote_site
                                           WHERE site_id = v_siteid
                                             AND active =
                                                    pkg_constants.con_activeflag_yes;

                                          IF (v_rowcount = 0)
                                          THEN
                                             BEGIN
                                                --update primary contact details added on 30/12/2009
                                                SELECT COUNT (*)
                                                  INTO v_contactcnt
                                                  FROM site s,
                                                       site_contact_detail sc,
                                                       contact c
                                                 WHERE s.site_id = sc.site_id
                                                   AND sc.contact_id =
                                                                  c.contact_id
                                                   AND UPPER (c.contact_type) =
                                                          UPPER
                                                             (pkg_constants.con_primary_sitecontact
                                                             )
                                                   AND s.site_id = v_siteid
                                                   AND customer_id =
                                                                 in_customerid;

                                                IF (v_contactcnt <> 0)
                                                THEN
                                                   BEGIN
                                                      SELECT sc.contact_id
                                                        INTO v_pricontactid
                                                        FROM site s,
                                                             site_contact_detail sc,
                                                             contact c
                                                       WHERE s.site_id =
                                                                    sc.site_id
                                                         AND sc.contact_id =
                                                                  c.contact_id
                                                         AND UPPER
                                                                (c.contact_type
                                                                ) =
                                                                UPPER
                                                                   (pkg_constants.con_primary_sitecontact
                                                                   )
                                                         AND s.site_id =
                                                                      v_siteid
                                                         AND customer_id =
                                                                 in_customerid;
                                                   END;
                                                ELSE
                                                   BEGIN
                                                      v_pricontactid := NULL;
                                                   END;
                                                END IF;

                                                --update secondary contact details added on 30/12/2009
                                                SELECT COUNT (*)
                                                  INTO v_contactcnt
                                                  FROM site s,
                                                       site_contact_detail sc,
                                                       contact c
                                                 WHERE s.site_id = sc.site_id
                                                   AND sc.contact_id =
                                                                  c.contact_id
                                                   AND UPPER (c.contact_type) =
                                                          UPPER
                                                             (pkg_constants.con_secondary_sitecontact
                                                             )
                                                   AND s.site_id = v_siteid
                                                   AND customer_id =
                                                                 in_customerid;

                                                IF (v_contactcnt <> 0)
                                                THEN
                                                   BEGIN
                                                      SELECT sc.contact_id
                                                        INTO v_seccontactid
                                                        FROM site s,
                                                             site_contact_detail sc,
                                                             contact c
                                                       WHERE s.site_id =
                                                                    sc.site_id
                                                         AND sc.contact_id =
                                                                  c.contact_id
                                                         AND UPPER
                                                                (c.contact_type
                                                                ) =
                                                                UPPER
                                                                   (pkg_constants.con_secondary_sitecontact
                                                                   )
                                                         AND s.site_id =
                                                                      v_siteid
                                                         AND customer_id =
                                                                 in_customerid;
                                                   END;
                                                ELSE
                                                   BEGIN
                                                      v_seccontactid := NULL;
                                                   END;
                                                END IF;

                                                --update technical contact details added on 30/12/2009
                                                SELECT COUNT (*)
                                                  INTO v_contactcnt
                                                  FROM site s,
                                                       site_contact_detail sc,
                                                       contact c
                                                 WHERE s.site_id = sc.site_id
                                                   AND sc.contact_id =
                                                                  c.contact_id
                                                   AND UPPER (c.contact_type) =
                                                          UPPER
                                                             (pkg_constants.con_tech_sitecontact
                                                             )
                                                   AND s.site_id = v_siteid
                                                   AND customer_id =
                                                                 in_customerid;

                                                IF (v_contactcnt <> 0)
                                                THEN
                                                   BEGIN
                                                      SELECT sc.contact_id
                                                        INTO v_techcontactid
                                                        FROM site s,
                                                             site_contact_detail sc,
                                                             contact c
                                                       WHERE s.site_id =
                                                                    sc.site_id
                                                         AND sc.contact_id =
                                                                  c.contact_id
                                                         AND UPPER
                                                                (c.contact_type
                                                                ) =
                                                                UPPER
                                                                   (pkg_constants.con_tech_sitecontact
                                                                   )
                                                         AND s.site_id =
                                                                      v_siteid
                                                         AND customer_id =
                                                                 in_customerid;
                                                   END;
                                                ELSE
                                                   BEGIN
                                                      v_techcontactid := NULL;
                                                   END;
                                                END IF;

                                                UPDATE site
                                                   SET modified_by =
                                                                  in_createdby,
                                                       modified_date = SYSDATE,
                                                       customer_report_site_name =
                                                               v_tsitename (i),
                                                       telephone_area_code =
                                                            v_ttelareacode (i)
                                                 WHERE site_id = v_siteid;

                                                UPDATE address
                                                   SET country_id =
                                                                   v_countryid,
                                                       building_number =
                                                                 v_tbldgno (i),
                                                       address_line1 =
                                                              v_taddrline1 (i),
                                                       city = v_tcity (i),
                                                       state = v_tstate (i),
                                                       post_zip_code =
                                                               v_tpostcode (i),
                                                       room = v_troom (i),
                                                       FLOOR = v_tfloor (i),
                                                       address_line2 =
                                                              v_taddrline2 (i),
                                                       modified_by =
                                                                  in_createdby,
                                                       modified_date = SYSDATE
                                                 WHERE address_id =
                                                                   v_addressid;

                                                UPDATE site_contact_detail
                                                   SET modified_by =
                                                                  in_createdby,
                                                       modified_date = SYSDATE
                                                 WHERE site_id = v_siteid;

                                                -- update primary contact
                                                IF (v_pricontactid IS NULL)
                                                THEN
                                                   BEGIN
                                                      IF (   v_tprifirstname
                                                                           (i) IS NOT NULL
                                                          OR v_tprilastname
                                                                           (i) IS NOT NULL
                                                          OR v_tpriemail (i) IS NOT NULL
                                                          OR v_tpriphone (i) IS NOT NULL
                                                          OR v_tprifax (i) IS NOT NULL
                                                         )
                                                      THEN
                                                         BEGIN
                                                            INSERT INTO contact
                                                                        (contact_id,
                                                                         first_name,
                                                                         last_name,
                                                                         phone_number,
                                                                         mobile_number,
                                                                         fax,
                                                                         job_title,
                                                                         created_by,
                                                                         created_date,
                                                                         email,
                                                                         contact_type
                                                                        )
                                                                 VALUES (contact_id.NEXTVAL,
                                                                         v_tprifirstname
                                                                            (i),
                                                                         v_tprilastname
                                                                            (i),
                                                                         v_tpriphone
                                                                            (i),
                                                                         v_tprimobile
                                                                            (i),
                                                                         v_tprifax
                                                                            (i),
                                                                         v_tprijob
                                                                            (i),
                                                                         in_createdby,
                                                                         SYSDATE,
                                                                         v_tpriemail
                                                                            (i),
                                                                         pkg_constants.con_primary_sitecontact
                                                                        )
                                                              RETURNING contact_id
                                                                   INTO v_pricontactid;

                                                            INSERT INTO site_contact_detail
                                                                        (site_contact_detail_id,
                                                                         site_id,
                                                                         contact_id,
                                                                         created_by,
                                                                         created_date
                                                                        )
                                                                 VALUES (site_contact_detail_id.NEXTVAL,
                                                                         v_siteid,
                                                                         v_pricontactid,
                                                                         in_createdby,
                                                                         SYSDATE
                                                                        );
                                                         END;
                                                      END IF;
                                                   END;
                                                ELSE
                                                   BEGIN
                                                      UPDATE contact
                                                         SET first_name =
                                                                v_tprifirstname
                                                                           (i),
                                                             last_name =
                                                                v_tprilastname
                                                                           (i),
                                                             phone_number =
                                                                v_tpriphone
                                                                           (i),
                                                             mobile_number =
                                                                v_tprimobile
                                                                           (i),
                                                             fax =
                                                                 v_tprifax (i),
                                                             job_title =
                                                                 v_tprijob (i),
                                                             contact_type =
                                                                pkg_constants.con_primary_sitecontact,
                                                             email =
                                                                v_tpriemail
                                                                           (i),
                                                             modified_by =
                                                                  in_createdby,
                                                             modified_date =
                                                                       SYSDATE
                                                       WHERE contact_id =
                                                                v_pricontactid;
                                                   END;
                                                END IF;

                                                -- update secondary contact
                                                IF (v_seccontactid IS NULL)
                                                THEN
                                                   BEGIN
                                                      IF (   v_tsecfirstname
                                                                           (i) IS NOT NULL
                                                          OR v_tseclastname
                                                                           (i) IS NOT NULL
                                                          OR v_tsecemail (i) IS NOT NULL
                                                          OR v_tsecphone (i) IS NOT NULL
                                                          OR v_tsecfax (i) IS NOT NULL
                                                         )
                                                      THEN
                                                         BEGIN
                                                            INSERT INTO contact
                                                                        (contact_id,
                                                                         first_name,
                                                                         last_name,
                                                                         phone_number,
                                                                         mobile_number,
                                                                         fax,
                                                                         job_title,
                                                                         created_by,
                                                                         created_date,
                                                                         email,
                                                                         contact_type
                                                                        )
                                                                 VALUES (contact_id.NEXTVAL,
                                                                         v_tsecfirstname
                                                                            (i),
                                                                         v_tseclastname
                                                                            (i),
                                                                         v_tsecphone
                                                                            (i),
                                                                         v_tsecmobile
                                                                            (i),
                                                                         v_tsecfax
                                                                            (i),
                                                                         v_tsecjob
                                                                            (i),
                                                                         in_createdby,
                                                                         SYSDATE,
                                                                         v_tsecemail
                                                                            (i),
                                                                         pkg_constants.con_secondary_sitecontact
                                                                        )
                                                              RETURNING contact_id
                                                                   INTO v_seccontactid;

                                                            INSERT INTO site_contact_detail
                                                                        (site_contact_detail_id,
                                                                         site_id,
                                                                         contact_id,
                                                                         created_by,
                                                                         created_date
                                                                        )
                                                                 VALUES (site_contact_detail_id.NEXTVAL,
                                                                         v_siteid,
                                                                         v_seccontactid,
                                                                         in_createdby,
                                                                         SYSDATE
                                                                        );
                                                         END;
                                                      END IF;
                                                   END;
                                                ELSE
                                                   BEGIN
                                                      UPDATE contact
                                                         SET first_name =
                                                                v_tsecfirstname
                                                                           (i),
                                                             last_name =
                                                                v_tseclastname
                                                                           (i),
                                                             phone_number =
                                                                v_tsecphone
                                                                           (i),
                                                             mobile_number =
                                                                v_tsecmobile
                                                                           (i),
                                                             fax =
                                                                 v_tsecfax (i),
                                                             job_title =
                                                                 v_tsecjob (i),
                                                             contact_type =
                                                                pkg_constants.con_secondary_sitecontact,
                                                             email =
                                                                v_tsecemail
                                                                           (i),
                                                             modified_by =
                                                                  in_createdby,
                                                             modified_date =
                                                                       SYSDATE
                                                       WHERE contact_id =
                                                                v_seccontactid;
                                                   END;
                                                END IF;

                                                IF (v_techcontactid IS NULL)
                                                THEN
                                                   BEGIN
                                                      IF (   v_ttechfname (i) IS NOT NULL
                                                          OR v_ttechlname (i) IS NOT NULL
                                                          OR v_ttechemail (i) IS NOT NULL
                                                          OR v_ttechphone (i) IS NOT NULL
                                                          OR v_ttechfax (i) IS NOT NULL
                                                         )
                                                      THEN
                                                         BEGIN
                                                            INSERT INTO contact
                                                                        (contact_id,
                                                                         first_name,
                                                                         last_name,
                                                                         phone_number,
                                                                         mobile_number,
                                                                         fax,
                                                                         job_title,
                                                                         created_by,
                                                                         created_date,
                                                                         email,
                                                                         contact_type
                                                                        )
                                                                 VALUES (contact_id.NEXTVAL,
                                                                         v_ttechfname
                                                                            (i),
                                                                         v_ttechlname
                                                                            (i),
                                                                         v_ttechphone
                                                                            (i),
                                                                         v_ttechmobile
                                                                            (i),
                                                                         v_ttechfax
                                                                            (i),
                                                                         v_ttechjob
                                                                            (i),
                                                                         in_createdby,
                                                                         SYSDATE,
                                                                         v_ttechemail
                                                                            (i),
                                                                         pkg_constants.con_tech_sitecontact
                                                                        )
                                                              RETURNING contact_id
                                                                   INTO v_techcontactid;

                                                            INSERT INTO site_contact_detail
                                                                        (site_contact_detail_id,
                                                                         site_id,
                                                                         contact_id,
                                                                         created_by,
                                                                         created_date
                                                                        )
                                                                 VALUES (site_contact_detail_id.NEXTVAL,
                                                                         v_siteid,
                                                                         v_techcontactid,
                                                                         in_createdby,
                                                                         SYSDATE
                                                                        );
                                                         END;
                                                      END IF;
                                                   END;
                                                ELSE
                                                   BEGIN
                                                      --update technical contact
                                                      UPDATE contact
                                                         SET first_name =
                                                                v_ttechfname
                                                                           (i),
                                                             last_name =
                                                                v_ttechlname
                                                                           (i),
                                                             phone_number =
                                                                v_ttechphone
                                                                           (i),
                                                             mobile_number =
                                                                v_ttechmobile
                                                                           (i),
                                                             fax =
                                                                v_ttechfax (i),
                                                             job_title =
                                                                v_ttechjob (i),
                                                             contact_type =
                                                                pkg_constants.con_tech_sitecontact,
                                                             email =
                                                                v_ttechemail
                                                                           (i),
                                                             modified_by =
                                                                  in_createdby,
                                                             modified_date =
                                                                       SYSDATE
                                                       WHERE contact_id =
                                                                v_techcontactid;
                                                   END;
                                                END IF;
                                             END;
                                          ELSE
                                             BEGIN
                                                success := 0;

                                                INSERT INTO site_log
                                                            (site_log_id,
                                                             batch_id,
                                                             site_name,
                                                             status,
                                                             reason,
                                                             created_by,
                                                             created_date
                                                            )
                                                     VALUES (site_log_id.NEXTVAL,
                                                             v_batchid,
                                                             SUBSTR
                                                                (v_tsitename
                                                                           (i),
                                                                 1,
                                                                 100
                                                                ),
                                                             pkg_constants.con_status_failure,
                                                                'Cannot update site.Site('
                                                             || v_siteid
                                                             || ') is associated to a Quote',
                                                             in_createdby,
                                                             SYSDATE
                                                            );

                                                -- COMMIT; Commented by Suresh
                                             END;
                                          END IF;
                                       END;
                                    END IF;

                                    IF success = 1
                                    THEN
                                       BEGIN
                                          --commonly insert success for insertion/duplicate updation
                                          INSERT INTO site_log
                                                      (site_log_id,
                                                       batch_id,
                                                       site_name,
                                                       status,
                                                       created_by,
                                                       created_date
                                                      )
                                               VALUES (site_log_id.NEXTVAL,
                                                       v_batchid,
                                                       SUBSTR (v_currsite,
                                                               1,
                                                               100
                                                              ),
                                                       pkg_constants.con_status_success,
                                                       in_createdby,
                                                       SYSDATE
                                                      );
                                       END;
                                    END IF;

                                    -- COMMIT; Commented by Suresh
                                 --end of site duplicate rowcount loop
                                 END;             --end of kgi check v_kgiflag
                              ELSE
                                 BEGIN
                                    --insert the kgi error value in site_log table
                                    INSERT INTO site_log
                                                (site_log_id,
                                                 batch_id,
                                                 site_name,
                                                 status,
                                                 reason,
                                                 created_by, created_date
                                                )
                                         VALUES (site_log_id.NEXTVAL,
                                                 v_batchid,
                                                 SUBSTR (v_tsitename (i),
                                                         1,
                                                         100
                                                        ),
                                                 pkg_constants.con_status_failure,
                                                    'KGI Error: '
                                                 || v_kgitype
                                                 || ' is mandatory',
                                                 in_createdby, SYSDATE
                                                );

                                    -- COMMIT; Commented by Suresh
                                 END;
                              END IF;                        --end of kgi flag
                           END;
                        END IF;               ----end of country row count = 0
                     END LOOP;
                  END;
               END IF;
            END;                                          --end of transaction
         END;                                -- end of site_details null check
      ELSE
         BEGIN
            INSERT INTO site_log
                        (site_log_id, batch_id, site_name,
                         status,
                         reason, created_by, created_date
                        )
                 VALUES (site_log_id.NEXTVAL, v_batchid, NULL,
                         pkg_constants.con_status_failure,
                         'No Site details entered', in_createdby, SYSDATE
                        );

            -- COMMIT; Commented by Suresh
         END;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_errmsg := SQLERRM;
         -- ROLLBACK; Commented by Suresh

         INSERT INTO site_log
                     (site_log_id, batch_id,
                      site_name,
                      status, reason,
                      created_by, created_date
                     )
              VALUES (site_log_id.NEXTVAL, v_batchid,
                      SUBSTR (v_currsite, 1, 100),
                      pkg_constants.con_status_failure, v_errmsg,
                      in_createdby, SYSDATE
                     );

         -- COMMIT; Commented by Suresh
   END;

   PROCEDURE spi_quote_site (
      in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
      in_siteid          IN       VARCHAR2,
      in_createdby       IN       quote_site.created_by%TYPE,
      out_status         OUT      NUMBER,
      out_errmsg         OUT      VARCHAR2
   )
   AS
      CURSOR c_siteid
      IS
         SELECT *
           FROM TABLE
                     (CAST (pkg_common.fn_splitdata (in_siteid, '~') AS varchar2_ntt
                           )
                     );

      --v_quoteheaderid   quote_header.quote_header_id%TYPE;
      v_rowcount   NUMBER;
      v_siteid     site.site_id%TYPE;
   BEGIN
      OPEN c_siteid;

      LOOP
         FETCH c_siteid
          INTO v_siteid;

         EXIT WHEN c_siteid%NOTFOUND;

         SELECT COUNT (*)
           INTO v_rowcount
           FROM quote_site
          WHERE quote_header_id = in_quoteheaderid
            AND site_id = v_siteid
            AND active = pkg_constants.con_activeflag_yes;

         IF (v_rowcount = 0)
         THEN
            BEGIN
               INSERT INTO quote_site
                           (quote_site_id, site_id,
                            quote_header_id,
                            active, created_by,
                            created_date
                           )
                    VALUES (quote_site_id.NEXTVAL, v_siteid,
                            in_quoteheaderid,
                            pkg_constants.con_activeflag_yes, in_createdby,
                            SYSDATE
                           );
            END;
         END IF;

         --return status as 1 irrespecitve of new insert or duplicate
         out_status := pkg_constants.con_status_success;
      --COMMIT;
      END LOOP;
   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         out_errmsg := SQLERRM;
         -- ROLLBACK; Commented by Suresh
   END;

   PROCEDURE sps_site_contact (
      --added on 31/12/2009
      in_siteid     IN       site.site_id%TYPE,
      out_contact   OUT      sys_refcursor
   )
   AS
   BEGIN
      OPEN out_contact FOR
         SELECT scd.site_id "Site ID", c.first_name "First Name",
                c.last_name "Last Name", c.job_title "Job Title",
                c.email "Email", c.phone_number "Phone",
                c.mobile_number "Mobile", c.fax "Fax",
                c.contact_type "Contact Type", c.pstn_number "PSTN Number",
                c.primary_notes "Primary Notes"
           FROM site st LEFT OUTER JOIN site_contact_detail scd
                ON st.site_id = scd.site_id
                LEFT OUTER JOIN contact c ON scd.contact_id = c.contact_id
          WHERE st.site_id = in_siteid;
   END;

   PROCEDURE spi_multisite_bulkupload (
      --added on 11/5/2010 for R3
        -- new sites are inserted and all duplicate sites are updated
      in_customerid      IN       site.customer_id%TYPE,
      in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
      in_site            IN       bulkupload_tab,
      in_batchid         IN       site.batch_id%TYPE,
      in_filename        IN       VARCHAR2,
      in_createdby       IN       site.created_by%TYPE,
      out_batchid        OUT      site.batch_id%TYPE,
      out_nextsite       OUT      site.NAME%TYPE
   )
   AS
      v_siteid        site.site_id%TYPE;
      v_batchid       site.batch_id%TYPE;
      v_pricontid     contact.contact_id%TYPE;
      v_seccontid     contact.contact_id%TYPE;
      v_addrid        address.address_id%TYPE;
      v_countryid     address.country_id%TYPE;
      v_currsite      VARCHAR2 (500);
      v_kgiflag       NUMBER;
      v_kgitype       VARCHAR2 (100);
      v_rowcount      NUMBER;
      v_errmsg        VARCHAR2 (200);
      v_pricnt        NUMBER;
      v_seccnt        NUMBER;
      v_qtsitecount   NUMBER;
   BEGIN
      IF (in_batchid IS NULL)
      THEN
         INSERT INTO site_bulk_upload
                     (batch_id, file_name, created_by, created_date
                     )
              VALUES (batch_id.NEXTVAL, in_filename, in_createdby, SYSDATE
                     )
           RETURNING batch_id
                INTO v_batchid;
      ELSE
         v_batchid := in_batchid;
      END IF;

      out_batchid := v_batchid;

      FOR i IN in_site.FIRST .. in_site.LAST
      LOOP
         v_currsite := in_site (i).o_sitename;
         v_kgiflag := 1;

         IF (i = in_site.LAST)
         THEN
            out_nextsite := NULL;
         ELSE
            out_nextsite := in_site (i + 1).o_sitename;
         END IF;

         SELECT COUNT (*)
           INTO v_rowcount
           FROM country
          WHERE UPPER (REPLACE (NAME, '''')) =
                                 UPPER (REPLACE (in_site (i).o_country, ''''));

         IF (v_rowcount = 0)           --country doesnt exist in country table
         THEN
            BEGIN
               INSERT INTO site_log
                           (site_log_id, batch_id,
                            site_name,
                            status,
                            reason, created_by, created_date
                           )
                    VALUES (site_log_id.NEXTVAL, v_batchid,
                            SUBSTR (v_currsite, 1, 100),
                            pkg_constants.con_status_failure,
                            'Invalid Country', in_createdby, SYSDATE
                           );
            END;
         ELSE
            BEGIN
               SELECT country_id
                 INTO v_countryid
                 FROM country
                WHERE UPPER (REPLACE (NAME, '''')) =
                                 UPPER (REPLACE (in_site (i).o_country, ''''));

               --kgi check from PPSR
               SELECT COUNT (*)
                 INTO v_rowcount
                 FROM ppsr_owner.ppsr_kgi_data_v@dblink_ppsr
                WHERE UPPER (REPLACE ("Country", '''')) =
                                 UPPER (REPLACE (in_site (i).o_country, ''''));

               IF (v_rowcount != 0)
               THEN
                  BEGIN
                     SELECT DISTINCT "Kgi Type"
                                INTO v_kgitype
                                FROM ppsr_owner.ppsr_kgi_data_v@dblink_ppsr
                               WHERE UPPER (REPLACE ("Country", '''')) =
                                        UPPER (REPLACE (in_site (i).o_country,
                                                        ''''
                                                       )
                                              );

                     IF (UPPER (v_kgitype) LIKE '%CITY%')
                     THEN
                        BEGIN
                           IF (in_site (i).o_city IS NULL)
                           THEN
                              v_kgiflag := 0;
                           END IF;
                        END;
                     END IF;

                     IF (UPPER (v_kgitype) LIKE '%POST CODE%')
                     THEN
                        BEGIN
                           IF (in_site (i).o_postcode IS NULL)
                           THEN
                              v_kgiflag := 0;
                           END IF;
                        END;
                     END IF;

                     IF (   UPPER (v_kgitype) LIKE '%STREET NAME%'
                         OR UPPER (v_kgitype) LIKE '%STREET NUMBER%'
                        )
                     THEN
                        BEGIN
                           IF (in_site (i).o_addrline1 IS NULL)
                           THEN
                              v_kgiflag := 0;
                           END IF;
                        END;
                     END IF;

                     IF (UPPER (v_kgitype) LIKE '%TELEPHONE AREA CODE%')
                     THEN
                        BEGIN
                           IF (in_site (i).o_telareacode IS NULL)
                           THEN
                              v_kgiflag := 0;
                           END IF;
                        END;
                     END IF;

                     IF (UPPER (v_kgitype) LIKE '%DISTRICT%')
                     THEN
                        BEGIN
                           IF (in_site (i).o_addrline2 IS NULL)
                           THEN
                              v_kgiflag := 0;
                           END IF;
                        END;
                     END IF;
                  END;
               END IF;

               IF (v_kgiflag = 0)
               THEN
                  BEGIN
                     INSERT INTO site_log
                                 (site_log_id, batch_id,
                                  site_name,
                                  status,
                                  reason,
                                  created_by, created_date
                                 )
                          VALUES (site_log_id.NEXTVAL, v_batchid,
                                  SUBSTR (v_currsite, 1, 100),
                                  pkg_constants.con_status_failure,
                                  'KGI Error: ' || v_kgitype || ' mandatory',
                                  in_createdby, SYSDATE
                                 );
                  END;
               ELSE
                  BEGIN
                     --duplication check in site table
                     SELECT COUNT (*)
                       INTO v_rowcount
                       FROM site
                      WHERE UPPER (NAME) = UPPER (in_site (i).o_sitename)
                        -- UPPER (TRIM (in_site (i).o_sitename))
                        AND customer_id = in_customerid;

                     IF (v_rowcount = 0)
                     THEN
                        BEGIN
                           --new insert
                           INSERT INTO address
                                       (address_id, country_id,
                                        building_number,
                                        address_line1,
                                        city,
                                        state,
                                        post_zip_code,
                                        room,
                                        FLOOR,
                                        address_line2,
                                        created_by, created_date
                                       )
                                VALUES (address_id.NEXTVAL, v_countryid,
                                        in_site (i).o_bldgno,
                                        in_site (i).o_addrline1,
                                        in_site (i).o_city,
                                        in_site (i).o_state,
                                        in_site (i).o_postcode,
                                        in_site (i).o_room,
                                        in_site (i).o_floor,
                                        in_site (i).o_addrline2,
                                        in_createdby, SYSDATE ()
                                       )
                             RETURNING address_id
                                  INTO v_addrid;

                           INSERT INTO site
                                       (site_id,
                                        NAME, address_id,
                                        customer_id,
                                        telephone_area_code,
                                        created_by, created_date,
                                        customer_report_site_name, batch_id
                                       )
                                VALUES (site_id.NEXTVAL,
                                        in_site (i).o_sitename, v_addrid,
                                        in_customerid,
                                        in_site (i).o_telareacode,
                                        in_createdby, SYSDATE,
                                        in_site (i).o_sitename, v_batchid
                                       )
                             RETURNING site_id
                                  INTO v_siteid;

                           IF (   in_site (i).o_prilname IS NOT NULL
                               OR in_site (i).o_prifname IS NOT NULL
                               OR in_site (i).o_priphone IS NOT NULL
                               OR in_site (i).o_primobile IS NOT NULL
                               OR in_site (i).o_priemail IS NOT NULL
                               OR in_site (i).o_prijob IS NOT NULL
                               OR in_site (i).o_prifax IS NOT NULL
                              )
                           THEN
                              BEGIN
                                 INSERT INTO contact
                                             (contact_id,
                                              first_name,
                                              last_name,
                                              phone_number,
                                              mobile_number,
                                              fax,
                                              job_title,
                                              email,
                                              contact_type,
                                              created_by, created_date
                                             )
                                      VALUES (contact_id.NEXTVAL,
                                              in_site (i).o_prifname,
                                              in_site (i).o_prilname,
                                              in_site (i).o_priphone,
                                              in_site (i).o_primobile,
                                              in_site (i).o_prifax,
                                              --     in_site (i).o_prifax,
                                              in_site (i).o_prijob,
                                              in_site (i).o_priemail,
                                              pkg_constants.con_primary_sitecontact,
                                              in_createdby, SYSDATE
                                             )
                                   RETURNING contact_id
                                        INTO v_pricontid;

                                 INSERT INTO site_contact_detail
                                             (site_contact_detail_id,
                                              site_id, contact_id,
                                              created_by, created_date
                                             )
                                      VALUES (site_contact_detail_id.NEXTVAL,
                                              v_siteid, v_pricontid,
                                              in_createdby, SYSDATE
                                             );

                                 UPDATE site
                                    SET primary_contact_id = v_pricontid
                                  WHERE site_id = v_siteid;
                              -------Added by SRK on 28Jun2010
                              END;
                           ELSE
                              BEGIN
                                 v_pricontid := NULL;
                              END;
                           END IF;

                           IF (   in_site (i).o_seclname IS NOT NULL
                               OR in_site (i).o_secfname IS NOT NULL
                               OR in_site (i).o_secphone IS NOT NULL
                               OR in_site (i).o_secmobile IS NOT NULL
                               OR in_site (i).o_secemail IS NOT NULL
                               OR in_site (i).o_secjob IS NOT NULL
                               OR in_site (i).o_secfax IS NOT NULL
                              )
                           THEN
                              INSERT INTO contact
                                          (contact_id,
                                           first_name,
                                           last_name,
                                           phone_number,
                                           mobile_number,
                                           fax,
                                           job_title,
                                           email,
                                           contact_type,
                                           created_by, created_date
                                          )
                                   VALUES (contact_id.NEXTVAL,
                                           in_site (i).o_secfname,
                                           in_site (i).o_seclname,
                                           in_site (i).o_secphone,
                                           in_site (i).o_secmobile,
                                           in_site (i).o_secfax,
                                           --         in_site (i).o_secfax,
                                           in_site (i).o_secjob,
                                           in_site (i).o_secemail,
                                           pkg_constants.con_secondary_sitecontact,
                                           in_createdby, SYSDATE
                                          )
                                RETURNING contact_id
                                     INTO v_seccontid;

                              INSERT INTO site_contact_detail
                                          (site_contact_detail_id,
                                           site_id, contact_id,
                                           created_by, created_date
                                          )
                                   VALUES (site_contact_detail_id.NEXTVAL,
                                           v_siteid, v_seccontid,
                                           in_createdby, SYSDATE
                                          );

                              UPDATE site
                                 SET secondary_contact_id = v_seccontid
                               WHERE site_id = v_siteid;
                           -------Added by SRK on 28Jun2010
                           ELSE
                              v_seccontid := NULL;
                           END IF;
                        END;
                     ELSE
                        BEGIN
                           --duplicate row. update
                           SELECT site_id, address_id
                             INTO v_siteid, v_addrid
                             FROM site
                            WHERE UPPER (NAME) =
                                                UPPER (in_site (i).o_sitename)
                              AND customer_id = in_customerid;

                           UPDATE site
                              SET modified_by = in_createdby,
                                  modified_date = SYSDATE,
                                  customer_report_site_name =
                                                        in_site (i).o_sitename,
                                  telephone_area_code =
                                                     in_site (i).o_telareacode
                            WHERE site_id = v_siteid;

                           UPDATE address
                              SET country_id = v_countryid,
                                  building_number = in_site (i).o_bldgno,
                                  address_line1 = in_site (i).o_addrline1,
                                  city = in_site (i).o_city,
                                  state = in_site (i).o_state,
                                  post_zip_code = in_site (i).o_postcode,
                                  room = in_site (i).o_room,
                                  FLOOR = in_site (i).o_floor,
                                  address_line2 = in_site (i).o_addrline2,
                                  modified_by = in_createdby,
                                  modified_date = SYSDATE
                            WHERE address_id = v_addrid;

                           --get row counts of primary, secondary and technical contacts
                           SELECT COUNT (prict.contact_id),
                                  COUNT (secct.contact_id)
                             INTO v_pricnt,
                                  v_seccnt
                             FROM (SELECT scd.site_id, ct.contact_id
                                     FROM site_contact_detail scd, contact ct
                                    WHERE scd.contact_id = ct.contact_id
                                      AND UPPER (ct.contact_type) =
                                             pkg_constants.con_primary_sitecontact) prict
                                  LEFT OUTER JOIN
                                  site st ON prict.site_id = st.site_id
                                  LEFT OUTER JOIN
                                  (SELECT scd.site_id, ct.contact_id
                                     FROM site_contact_detail scd, contact ct
                                    WHERE scd.contact_id = ct.contact_id
                                      AND UPPER (ct.contact_type) =
                                             pkg_constants.con_secondary_sitecontact) secct
                                  ON st.site_id = secct.site_id
                            WHERE st.site_id = v_siteid
                              AND st.customer_id = in_customerid;

                           IF (v_pricnt <> 0)
                           THEN
                              BEGIN
                                 SELECT sc.contact_id
                                   INTO v_pricontid
                                   FROM site s,
                                        site_contact_detail sc,
                                        contact c
                                  WHERE s.site_id = sc.site_id
                                    AND sc.contact_id = c.contact_id
                                    AND UPPER (c.contact_type) =
                                           UPPER
                                              (pkg_constants.con_primary_sitecontact
                                              )
                                    AND s.site_id = v_siteid
                                    AND customer_id = in_customerid;
                              END;
                           ELSE
                              BEGIN
                                 v_pricontid := NULL;
                              END;
                           END IF;

                           --update secondary contact details added on 30/12/2009
                           IF (v_seccnt <> 0)
                           THEN
                              BEGIN
                                 SELECT sc.contact_id
                                   INTO v_seccontid
                                   FROM site s,
                                        site_contact_detail sc,
                                        contact c
                                  WHERE s.site_id = sc.site_id
                                    AND sc.contact_id = c.contact_id
                                    AND UPPER (c.contact_type) =
                                           UPPER
                                              (pkg_constants.con_secondary_sitecontact
                                              )
                                    AND s.site_id = v_siteid
                                    AND customer_id = in_customerid;
                              END;
                           ELSE
                              BEGIN
                                 v_seccontid := NULL;
                              END;
                           END IF;

                           UPDATE site_contact_detail
                              SET modified_by = in_createdby,
                                  modified_date = SYSDATE
                            WHERE site_id = v_siteid;

                           IF (v_pricontid IS NULL)
                           --if primary contact does not exist, check if it is null
                           --and then insert. if it exists, then update.
                           THEN
                              BEGIN
                                 IF (   in_site (i).o_prifname IS NOT NULL
                                     OR in_site (i).o_prilname IS NOT NULL
                                     OR in_site (i).o_priemail IS NOT NULL
                                     OR in_site (i).o_priphone IS NOT NULL
                                     OR in_site (i).o_prifax IS NOT NULL
                                     OR in_site (i).o_prijob IS NOT NULL
                                    )
                                 THEN
                                    BEGIN
                                       INSERT INTO contact
                                                   (contact_id,
                                                    first_name,
                                                    last_name,
                                                    phone_number,
                                                    mobile_number,
                                                    fax,
                                                    job_title,
                                                    created_by,
                                                    created_date,
                                                    email,
                                                    contact_type
                                                   )
                                            VALUES (contact_id.NEXTVAL,
                                                    in_site (i).o_prifname,
                                                    in_site (i).o_prilname,
                                                    in_site (i).o_priphone,
                                                    in_site (i).o_primobile,
                                                    in_site (i).o_prifax,
                                                    in_site (i).o_prijob,
                                                    in_createdby,
                                                    SYSDATE,
                                                    in_site (i).o_priemail,
                                                    pkg_constants.con_primary_sitecontact
                                                   )
                                         RETURNING contact_id
                                              INTO v_pricontid;

                                       INSERT INTO site_contact_detail
                                                   (site_contact_detail_id,
                                                    site_id, contact_id,
                                                    created_by, created_date
                                                   )
                                            VALUES (site_contact_detail_id.NEXTVAL,
                                                    v_siteid, v_pricontid,
                                                    in_createdby, SYSDATE
                                                   );
                                    END;
                                 END IF;
                              END;
                           ELSE
                              BEGIN
                                 UPDATE contact
                                    SET first_name = in_site (i).o_prifname,
                                        last_name = in_site (i).o_prilname,
                                        phone_number = in_site (i).o_priphone,
                                        mobile_number =
                                                       in_site (i).o_primobile,
                                        fax = in_site (i).o_prifax,
                                        job_title = in_site (i).o_prijob,
                                        contact_type =
                                           pkg_constants.con_primary_sitecontact,
                                        email = in_site (i).o_priemail,
                                        modified_by = in_createdby,
                                        modified_date = SYSDATE
                                  WHERE contact_id = v_pricontid;
                              END;
                           END IF;              --end of primary contact check

                           IF (v_seccontid IS NULL)
                           --if secondary contact does not exist, check if it is null
                           --and then insert. if it exists, then update.
                           THEN
                              BEGIN
                                 IF (   in_site (i).o_secfname IS NOT NULL
                                     OR in_site (i).o_seclname IS NOT NULL
                                     OR in_site (i).o_secemail IS NOT NULL
                                     OR in_site (i).o_secphone IS NOT NULL
                                     OR in_site (i).o_secfax IS NOT NULL
                                     OR in_site (i).o_secjob IS NOT NULL
                                    )
                                 THEN
                                    BEGIN
                                       INSERT INTO contact
                                                   (contact_id,
                                                    first_name,
                                                    last_name,
                                                    phone_number,
                                                    mobile_number,
                                                    fax,
                                                    job_title,
                                                    created_by,
                                                    created_date,
                                                    email,
                                                    contact_type
                                                   )
                                            VALUES (contact_id.NEXTVAL,
                                                    in_site (i).o_secfname,
                                                    in_site (i).o_seclname,
                                                    in_site (i).o_secphone,
                                                    in_site (i).o_secmobile,
                                                    in_site (i).o_secfax,
                                                    in_site (i).o_secjob,
                                                    in_createdby,
                                                    SYSDATE,
                                                    in_site (i).o_secemail,
                                                    pkg_constants.con_secondary_sitecontact
                                                   )
                                         RETURNING contact_id
                                              INTO v_seccontid;

                                       INSERT INTO site_contact_detail
                                                   (site_contact_detail_id,
                                                    site_id, contact_id,
                                                    created_by, created_date
                                                   )
                                            VALUES (site_contact_detail_id.NEXTVAL,
                                                    v_siteid, v_seccontid,
                                                    in_createdby, SYSDATE
                                                   );
                                    END;
                                 END IF;
                              END;
                           ELSE
                              BEGIN
                                 UPDATE contact
                                    SET first_name = in_site (i).o_secfname,
                                        last_name = in_site (i).o_seclname,
                                        phone_number = in_site (i).o_secphone,
                                        mobile_number =
                                                       in_site (i).o_secmobile,
                                        fax = in_site (i).o_secfax,
                                        job_title = in_site (i).o_secjob,
                                        contact_type =
                                           pkg_constants.con_secondary_sitecontact,
                                        email = in_site (i).o_secemail,
                                        modified_by = in_createdby,
                                        modified_date = SYSDATE
                                  WHERE contact_id = v_seccontid;
                              END;
                           END IF;            --end of secondary contact check
                        END;
                     END IF;

                     SELECT COUNT (*)
                       INTO v_qtsitecount
                       FROM quote_site
                      WHERE site_id = v_siteid
                        AND quote_header_id = in_quoteheaderid
                        AND active = pkg_constants.con_activeflag_yes;

                     --insert into quote_site on new insert or
                     --site is present but was deleted from quote_site
                     IF (v_qtsitecount = 0)
                     THEN
                        INSERT INTO quote_site
                                    (quote_site_id, site_id,
                                     quote_header_id,
                                     active,
                                     created_by, created_date
                                    )
                             VALUES (quote_site_id.NEXTVAL, v_siteid,
                                     in_quoteheaderid,
                                     pkg_constants.con_activeflag_yes,
                                     in_createdby, SYSDATE
                                    );
                     END IF;

                     --commonly insert success for insertion/duplicate updation
                     INSERT INTO site_log
                                 (site_log_id, batch_id,
                                  site_name,
                                  status,
                                  created_by, created_date
                                 )
                          VALUES (site_log_id.NEXTVAL, v_batchid,
                                  SUBSTR (v_currsite, 1, 100),
                                  pkg_constants.con_status_success,
                                  in_createdby, SYSDATE
                                 );
                  END;
               END IF;                                --country does not exist
            END;                                              --kgi flag check
         END IF;
      END LOOP;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_errmsg := SQLERRM;

         INSERT INTO site_log
                     (site_log_id, batch_id,
                      site_name,
                      status, reason,
                      created_by, created_date
                     )
              VALUES (site_log_id.NEXTVAL, v_batchid,
                      SUBSTR (v_currsite, 1, 100),
                      pkg_constants.con_status_failure, v_errmsg,
                      in_createdby, SYSDATE
                     );
   END;

   PROCEDURE sps_multisite_bulkupload (
      in_customerid        IN       site.customer_id%TYPE,
      in_quoteheaderid     IN       quote_header.quote_header_id%TYPE,
      --  in_siteid          IN       site.site_id%TYPE,
      out_sitebulkupload   OUT      sys_refcursor,
      out_bulk1            OUT      sys_refcursor
   )
   AS
---v_sitecount   NUMBER;
   BEGIN
      /* SELECT COUNT (*)
         INTO v_sitecount
         FROM quote q LEFT OUTER JOIN quote_header qh ON q.quote_id =
                                                                    qh.quote_id
              LEFT OUTER JOIN quote_site qs
              ON qh.quote_header_id = qs.quote_header_id
              INNER JOIN site s ON qs.site_id = s.site_id
        WHERE qh.quote_header_id = in_quoteheaderid
          AND q.quote_id = in_quoteheaderid                       -- in_quoteid
          AND qs.active = 'Y'
          AND (   s.primary_contact_id IS NOT NULL
               OR secondary_contact_id IS NOT NULL
              );*/

      --   IF (v_sitecount > 0)--  THEN
    --  m_j1 (1, in_customerid);
    --  m_j1 (2, in_quoteheaderid);

      BEGIN
         OPEN out_sitebulkupload FOR
            SELECT a1.pri_site_id "Site ID", a1.NAME "Site Name",
                   a1.city "City", a1.country "Country",
                   a1.classic_customer_id "Classic Customer Id",
                   a1.classic_site_id "Classic Site Id",
                   a1.post_zip_code "PostCode",
                   a1.address_line1 "Address Line1",
                   a1.building_number "Bulding Number", a1.state "State",
                   a1.address_line2 "Address Line2",
                   a1.telephone_area_code "Telephone Area Code",
                   a1.room "Room", a1.FLOOR "Floor", a1.address_id,
                   a1.first_name "Primary First Name",
                   a1.last_name "Primary Last Name",
                   a1.job_title "Primary Job Title",
                   a1.email "Primary Email",
                   a1.phone_number "Primary Phone No",
                   a1.mobile_number "Primary Mobile No",
                   a1.fax "Primary Fax",
                   a2.first_name "Secondary First Name",
                   a2.last_name "Secondary Last Name",
                   a2.job_title "Secondary Job Title",
                   a2.email "Secondary Email",
                   a2.phone_number "Secondary Phone No",
                   a2.mobile_number "Secondary Mobile No",
                   a2.fax "Secondary Fax"
              FROM (SELECT s.site_id pri_site_id, s.NAME, ad.city,
                           cou.NAME country, cu.classic_customer_id,
                           s.classic_site_id, ad.post_zip_code,
                           ad.address_line1, ad.building_number, ad.state,
                           ad.address_line2, s.telephone_area_code, ad.room,
                           ad.FLOOR, ad.address_id, co.first_name,
                           co.last_name, co.job_title, co.email,
                           co.phone_number, co.mobile_number, co.fax
                      FROM quote q LEFT OUTER JOIN quote_header qh
                           ON q.quote_id = qh.quote_id
                           LEFT OUTER JOIN quote_site qs
                           ON qh.quote_header_id = qs.quote_header_id
                           INNER JOIN site s ON qs.site_id = s.site_id
                           LEFT OUTER JOIN customer cu
                           ON cu.customer_id = q.customer_id
                           LEFT OUTER JOIN address ad
                           ON s.address_id = ad.address_id
                           LEFT OUTER JOIN country cou
                           ON ad.country_id = cou.country_id
                           LEFT OUTER JOIN site_contact_detail scd
                           ON s.site_id = scd.site_id
                           LEFT OUTER JOIN contact co
                           ON scd.contact_id = co.contact_id
                     WHERE cu.customer_id = in_customerid          --in_custid
                       AND q.quote_id = in_quoteheaderid         -- in_quoteid
                       AND (qs.active = 'Y')
                       AND s.primary_contact_id = co.contact_id
                                                               -- and co.contact_id = 4531
                   ) a1,
                   (SELECT s.site_id sec_site_id, s.NAME, ad.city, cou.NAME,
                           cu.classic_customer_id, s.classic_site_id,
                           ad.post_zip_code, ad.address_line1,
                           ad.building_number, ad.state, ad.address_line2,
                           s.telephone_area_code, ad.room, ad.FLOOR,
                           ad.address_id, co.first_name, co.last_name,
                           co.job_title, co.email, co.phone_number,
                           co.mobile_number, co.fax
                      FROM quote q LEFT OUTER JOIN quote_header qh
                           ON q.quote_id = qh.quote_id
                           LEFT OUTER JOIN quote_site qs
                           ON qh.quote_header_id = qs.quote_header_id
                           INNER JOIN site s ON qs.site_id = s.site_id
                           LEFT OUTER JOIN customer cu
                           ON cu.customer_id = q.customer_id
                           LEFT OUTER JOIN address ad
                           ON s.address_id = ad.address_id
                           LEFT OUTER JOIN country cou
                           ON ad.country_id = cou.country_id
                           LEFT OUTER JOIN site_contact_detail scd
                           ON s.site_id = scd.site_id
                           LEFT OUTER JOIN contact co
                           ON scd.contact_id = co.contact_id
                     WHERE cu.customer_id = in_customerid          --in_custid
                       AND q.quote_id = in_quoteheaderid         -- in_quoteid
                       AND (qs.active = 'Y')
                       AND s.secondary_contact_id = co.contact_id
                                                                 -- and co.contact_id = 4531
                   ) a2
             WHERE NVL (a1.pri_site_id, a2.sec_site_id) =
                                          NVL (a2.sec_site_id, a1.pri_site_id);
      END;

      -- ELSE
      BEGIN
         OPEN out_bulk1 FOR
            SELECT s.site_id "Site ID", s.NAME "Site Name", ad.city "City",
                   cou.NAME "Country",
                   cu.classic_customer_id "Classic Customer Id",
                   s.classic_site_id "Classic Site Id",
                   ad.post_zip_code "PostCode",
                   ad.address_line1 "Address Line1",
                   ad.building_number "Bulding Number", ad.state "State",
                   ad.address_line2 "Address Line2",
                   s.telephone_area_code "Telephone Area Code",
                   ad.room "Room", ad.FLOOR "Floor", ad.address_id
              FROM quote q LEFT OUTER JOIN quote_header qh
                   ON q.quote_id = qh.quote_id
                   LEFT OUTER JOIN quote_site qs
                   ON qh.quote_header_id = qs.quote_header_id
                   INNER JOIN site s ON qs.site_id = s.site_id
                   LEFT OUTER JOIN customer cu ON cu.customer_id =
                                                                q.customer_id
                   LEFT OUTER JOIN address ad ON s.address_id = ad.address_id
                   LEFT OUTER JOIN country cou ON ad.country_id =
                                                               cou.country_id
             WHERE cu.customer_id = in_customerid                 --in_custid
               AND q.quote_id = in_quoteheaderid                 -- in_quoteid
               AND (    s.primary_contact_id IS NULL
                    AND secondary_contact_id IS NULL
                   )
               AND (qs.active = 'Y');
      END;
   --  END IF;
   END;

END pkg_site_g;
/


CREATE OR REPLACE PACKAGE BODY pkg_site_r5
AS
   v_sql_code     NUMBER;        -- Added by Sujana on 23/11/2010 as part of exception handling
   v_sql_errm     VARCHAR2(150); -- Added by Sujana on 23/11/2010 as part of exception handling

   PROCEDURE spi_site (
      --modified on 30/12/2009 to insert technical contact details
      in_customerid                 IN       customer.customer_id%TYPE,
      in_quoteheaderid              IN       quote_header.quote_header_id%TYPE,
      in_sitename                   IN       site.NAME%TYPE,
      in_customer_reportsitename    IN       site.customer_report_site_name%TYPE,
      in_buildingno                 IN       address.building_number%TYPE,
      in_addressline1               IN       address.address_line1%TYPE,
      in_city                       IN       address.city%TYPE,
      in_state                      IN       address.state%TYPE,
      in_state_code                 IN       address.state_code%TYPE,
      in_countryid                  IN       country.country_id%TYPE,
      in_postzipcode                IN       address.post_zip_code%TYPE,
      in_telephoneareacode          IN       site.telephone_area_code%TYPE,
      --added for R1
      in_county                     IN       address.county%TYPE,
      -- ##### Change for 904 - B-End validation  begin
      in_local_business_cust_name   IN       site.local_business_customer_name%TYPE,
      -- ##### Change for 904 - B-End validation  end
      in_additionalsite             IN       VARCHAR2,          --for address
      in_pricontact                 IN       VARCHAR2,  --for primary contact
      in_seccontact                 IN       VARCHAR2,
      --for secondary contact
      in_techcontact                IN       VARCHAR2,
      --for technical contact
      in_servassurcontact           IN       VARCHAR2,
      --for service assurance contact details
      in_servicedlvcontact          IN       VARCHAR2,
      --for service delivery contact details
      in_bfgsiteid                  IN       site.bfg_site_id%TYPE,
      -- Ghucs, Added new parameter in_bfgsiteid
      in_bfgsitename                IN       site.bfg_site_name%TYPE,
      -- Ghucs, Added new parameter in_bfgsitename
      /* Added new parameter in_expedio_site_id as part of R5 */
      in_expedio_site_id            IN       site.expedio_site_id%TYPE,
      --- in_expedio_site_name          IN       site.expedio_site_name%type,

      -- ##### Change for 904 - Call Anywhere  begin
      in_kcidetails                 IN       VARCHAR2,
                                       -- for Keep Customer Informed details
      -- ##### Change for 904 - Call Anywhere  end
      /*line_of_site_billing added on 17/06/2010*/
      in_lineofsitebilling          IN       site.line_of_site_billing%TYPE,
      in_mainsiteflag               IN       site.main_site_flag%TYPE,
      in_createdby                  IN       site.created_by%TYPE,
      in_place_acc_price_rev_order  IN       site.place_acc_price_rev_order%TYPE,
      in_phone_number               IN       site.phone_number%TYPE, -- Added on 15/2/2011 as part of R11 iVPN2
      out_siteid                    OUT      site.site_id%TYPE,
      out_status                    OUT      NUMBER,
      out_errmsg                    OUT      VARCHAR2
   )
   AS
      v_addrline2              address.address_line2%TYPE;
      v_notes                  site.notes%TYPE;
      v_floor                  address.FLOOR%TYPE;
      v_room                   address.room%TYPE;
      v_classicsiteid          site.classic_site_id%TYPE;
      v_prifirstname           contact.first_name%TYPE;
      v_prilastname            contact.last_name%TYPE;
      v_prijobtitle            contact.job_title%TYPE;
      v_priemail               contact.email%TYPE;
      v_priphone               contact.phone_number%TYPE;
      v_primobile              contact.mobile_number%TYPE;
      v_prifax                 contact.fax%TYPE;
      v_secfirstname           contact.first_name%TYPE;
      v_seclastname            contact.last_name%TYPE;
      v_secjobtitle            contact.job_title%TYPE;
      v_secemail               contact.email%TYPE;
      v_secphone               contact.phone_number%TYPE;
      v_secmobile              contact.mobile_number%TYPE;
      v_secfax                 contact.fax%TYPE;
      v_billingid              site.billing_id%TYPE;
      v_row                    VARCHAR2 (8000);
      v_rowcount               NUMBER;
      v_addressid              address.address_id%TYPE;
      v_pricontactid           site.primary_contact_id%TYPE;
      v_seccontactid           site.secondary_contact_id%TYPE;
      v_siteid                 site.site_id%TYPE;
      v_fldcnt                 NUMBER;
      v_kgiflag                NUMBER                           := 1;
      v_kgitype                VARCHAR2 (100);
      --v_kgitype         kgi_country.kgi_type%TYPE;
      v_techfirstname          contact.first_name%TYPE;
      v_techlastname           contact.last_name%TYPE;
      v_techjobtitle           contact.job_title%TYPE;
      v_techemail              contact.email%TYPE;
      v_techphone              contact.phone_number%TYPE;
      v_techmobile             contact.mobile_number%TYPE;
      v_techfax                contact.fax%TYPE;
      v_techcontactid          contact.contact_id%TYPE;
      v_countryname            country.NAME%TYPE;
      --below variable for service assurance and service delivery addresses.
      v_tempfirstname          contact.first_name%TYPE;
      v_templastname           contact.last_name%TYPE;
      v_tempjobtitle           contact.job_title%TYPE;
      v_tempemail              contact.email%TYPE;
      v_tempphone              contact.phone_number%TYPE;
      v_tempmobile             contact.mobile_number%TYPE;
      v_tempfax                contact.fax%TYPE;
      v_tempcontactid          contact.contact_id%TYPE;
      v_ppsr_notes             site.ppsr_note%TYPE;
      v_cntry_spec_notes_req   site.cntry_spec_notes_req%TYPE;
      v_url                    site.url%TYPE;
      /****R3 */
      v_pstn_number            contact.pstn_number%TYPE;
      v_primary_notes          contact.primary_notes%TYPE;
      v_sql_code               NUMBER; -- Added by Sujana on 23/11/2010 as part of exception handling
   BEGIN
      --modified for kgi_check from ppsr
      SELECT NAME
        INTO v_countryname
        FROM country
       WHERE country_id = in_countryid;

      IF upper(in_mainsiteflag) <>'Y' Then
      --kgi check from PPSR
      SELECT COUNT (*)
        INTO v_rowcount
        FROM ppsr_owner.ppsr_kgi_data_v@dblink_ppsr
       WHERE UPPER (REPLACE ("Country", '''')) =
                                         UPPER (REPLACE (v_countryname, ''''));

      v_row := in_additionalsite;

--kgi check
      IF (v_rowcount != 0)
      THEN
         BEGIN
            --kgi check from PPSR
            SELECT DISTINCT "Kgi Type"
                       INTO v_kgitype
                       FROM ppsr_owner.ppsr_kgi_data_v@dblink_ppsr
                      WHERE UPPER (REPLACE ("Country", '''')) =
                                         UPPER (REPLACE (v_countryname, ''''));

            IF (UPPER (v_kgitype) LIKE '%CITY%')
            THEN
               BEGIN
                  IF (in_city IS NULL)
                  THEN
                     v_kgiflag := 0;
                  END IF;
               END;
            END IF;

            IF (UPPER (v_kgitype) LIKE '%POST CODE%')
            THEN
               BEGIN
                  IF (in_postzipcode IS NULL)
                  THEN
                     v_kgiflag := 0;
                  END IF;
               END;
            END IF;

            IF (   UPPER (v_kgitype) LIKE '%STREET NAME%'
                OR UPPER (v_kgitype) LIKE '%STREET NUMBER%'
               )
            THEN
               BEGIN
                  IF (in_addressline1 IS NULL)
                  THEN
                     v_kgiflag := 0;
                  END IF;
               END;
            END IF;

            IF (UPPER (v_kgitype) LIKE '%TELEPHONE AREA CODE%')
            THEN
               BEGIN
                  IF (in_telephoneareacode IS NULL)
                  THEN
                     v_kgiflag := 0;
                  END IF;
               END;
            END IF;

            IF (UPPER (v_kgitype) LIKE '%DISTRICT%')
            THEN
               BEGIN
                  v_addrline2 :=
                     SUBSTR (v_row,
                             INSTR (v_row, '|', 1, 2) + 1,
                               (INSTR (v_row, '|', 1, 3) - 1
                               )
                             - (INSTR (v_row, '|', 1, 2))
                            );

                  IF (v_addrline2 IS NULL)
                  THEN
                     v_kgiflag := 0;
                  END IF;
               END;
            END IF;
         END;
      END IF;
      ELSE
      v_kgiflag := 1;
      END IF;

      IF (v_kgiflag = 0) THEN
         BEGIN
            out_status := pkg_constants.con_status_failure;
            out_errmsg := 'KGI Error: ' || v_kgitype || ' is mandatory';
            -- Added by Sujana on 24/11/2010 as part of exception handling
            PKG_COMMON.spi_error_log(
                                     NULL,
                                     in_quoteheaderid,
                                     out_siteid,
                                     NULL,
                                     'PKG_SITE_R5',
                                     'SPI_SITE',
                                     out_status,
                                     out_errmsg
                                    );
         END;
      -- Additional checks for avoiding duplicate bfg_site_id Issue Added by Sandeep on 11-Nov-2010
      ELSIF (in_bfgsiteid IS NULL AND in_expedio_site_id IS NULL) THEN
        out_status := pkg_constants.con_status_failure;
        out_errmsg := 'BFG/Expedio Site Id Is Manadatory';
      ELSE
         BEGIN

          IF in_bfgsiteid IS NOT NULL THEN
             SELECT COUNT(1)
               INTO v_rowcount
               FROM site
              WHERE trim(bfg_site_id) = trim(in_bfgsiteid)
                AND customer_id = in_customerid;
           ELSIF in_expedio_site_id IS NOT NULL THEN
             SELECT COUNT(1)
               INTO v_rowcount
               FROM site
              WHERE trim(expedio_site_id) =trim(in_expedio_site_id)
              AND customer_id = in_customerid;
           END IF;

           IF (v_rowcount = 0) THEN
               BEGIN
                  SELECT address_id.NEXTVAL
                    INTO v_addressid
                    FROM DUAL;

                  INSERT INTO address
                              (address_id, building_number, address_line1,
                               city, state, country_id,
                               post_zip_code, created_by, created_date,
                               state_code, county
                              )
                       VALUES (v_addressid, in_buildingno, in_addressline1,
                               in_city, in_state, in_countryid,
                               in_postzipcode, in_createdby, SYSDATE (),
                               in_state_code, in_county
                              );

                  SELECT site_id.NEXTVAL
                    INTO v_siteid
                    FROM DUAL;

                  -- ##### Change for 904 - B-End validation  begin
                  INSERT INTO site
                              (site_id, NAME,
                               customer_report_site_name, address_id,
                               telephone_area_code, customer_id,
                               created_by, created_date,
                               local_business_customer_name, bfg_site_id,
                               bfg_site_name, line_of_site_billing,
                               expedio_site_id,
                               main_site_flag,        -- Added as part of R5
                               place_acc_price_rev_order, -- Added for R9 IVPN2
                               phone_number-- Added on 15/2/2011 as part of R11 iVPN2
                              )
                       VALUES (v_siteid, in_sitename,
                               in_customer_reportsitename, v_addressid,
                               in_telephoneareacode, in_customerid,
                               in_createdby, SYSDATE (),
                               in_local_business_cust_name, in_bfgsiteid,
                               in_bfgsitename, in_lineofsitebilling,
                               in_expedio_site_id,
                               in_mainsiteflag,          -- Added as part of R5
                               in_place_acc_price_rev_order,
                               in_phone_number-- Added on 15/2/2011 as part of R11 iVPN2
                              );

                  --quote id is null for cmlite
                  IF (in_quoteheaderid IS NOT NULL)
                  THEN
                     BEGIN
                        INSERT INTO quote_site
                                    (quote_site_id, site_id,
                                     quote_header_id,
                                     active,
                                     created_by, created_date
                                    )
                             VALUES (quote_site_id.NEXTVAL, v_siteid,
                                     in_quoteheaderid,
                                     pkg_constants.con_activeflag_yes,
                                     in_createdby, SYSDATE
                                    );
                     END;
                  END IF;

                  --check number of parameters modified on 30/12/2009
                  IF (in_additionalsite IS NOT NULL)
                  THEN
                     BEGIN
                        v_row := in_additionalsite;

                        SELECT pkg_common.fn_countfields (v_row, '|')
                          INTO v_fldcnt
                          FROM DUAL;

                        IF (v_fldcnt = 8)
                        THEN
                           BEGIN
                              v_floor :=
                                 SUBSTR (v_row,
                                         1,
                                         INSTR (v_row, '|', 1, 1) - 1
                                        );
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_room :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_addrline2 :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_classicsiteid :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_billingid :=
                                 TO_NUMBER (SUBSTR (v_row,
                                                    1,
                                                      INSTR (v_row, '|', 1, 1)
                                                    - 1
                                                   )
                                           );
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              /* Sprint2 Clean order managment SQE904 Starts */
                              v_notes :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_ppsr_notes :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_cntry_spec_notes_req :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_url := v_row;

/* Sprint2 Clean order managment SQE904  end*/
                              UPDATE address
                                 SET FLOOR = v_floor,
                                     room = v_room,
                                     address_line2 = v_addrline2
                               WHERE address_id = v_addressid;

                              UPDATE site
                                 SET classic_site_id = v_classicsiteid,
                                     billing_id = v_billingid,
                                     notes = v_notes,
                                     ppsr_note = v_ppsr_notes,
                                     cntry_spec_notes_req =
                                                        v_cntry_spec_notes_req,
                                     url = v_url
                               WHERE site_id = v_siteid;
                           END;
                        ELSE
                           BEGIN
                               out_status := pkg_constants.con_status_failure; -- Added as part of exception handling
                              out_errmsg := 'Invalid Additional Site details';
                           END;
                        END IF;                                   --end fldcnt
                     END;
                  END IF;                       --end additional site not null

                  v_row := NULL;

                  --check primary contact details added on 30/12/2009
                  IF (in_pricontact IS NOT NULL)
                  THEN
                     BEGIN
                        v_row := in_pricontact;

                        SELECT pkg_common.fn_countfields (v_row, '|')
                          INTO v_fldcnt
                          FROM DUAL;

                        IF (v_fldcnt = 8)
                        THEN
                           BEGIN
                              v_prifirstname :=
                                 SUBSTR (v_row,
                                         1,
                                         INSTR (v_row, '|', 1, 1) - 1
                                        );
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_prilastname :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_prijobtitle :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_priemail :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_priphone :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_primobile :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              --v_prifax := v_row;

                              /********/
                              /*HVPN Design change R3 (2010) */
                              /*adding PSTN number and Notes in the primary contact section  */
                              v_prifax :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_pstn_number :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_primary_notes := v_row;

                              /*R3 ends */
                              /*******/
                              INSERT INTO contact
                                          (contact_id,
                                           first_name, last_name,
                                           phone_number, mobile_number, fax,
                                           contact_type,
                                           job_title, email,
                                           created_by, created_date,
                                           pstn_number, primary_notes
                                          )
                                   VALUES (contact_id.NEXTVAL,
                                           v_prifirstname, v_prilastname,
                                           v_priphone, v_primobile, v_prifax,
                                           pkg_constants.con_primary_sitecontact,
                                           v_prijobtitle, v_priemail,
                                           in_createdby, SYSDATE (),
                                           v_pstn_number, v_primary_notes
                                          )
                                RETURNING contact_id
                                     INTO v_pricontactid;

                              INSERT INTO site_contact_detail
                                          (site_contact_detail_id,
                                           site_id, contact_id,
                                           created_by, created_date
                                          )
                                   VALUES (site_contact_detail_id.NEXTVAL,
                                           v_siteid, v_pricontactid,
                                           in_createdby, SYSDATE
                                          );
                           END;
                        ELSE
                           BEGIN
                               out_status := pkg_constants.con_status_failure; -- Added as part of exception handling
                              out_errmsg := 'Invalid Primary Contact details';
                           END;
                        END IF;                                   --end fldcnt
                     END;
                  END IF;                       --end primary contact not null

                  v_row := NULL;

                  --check secondary contact details added on 30/12/2009
                  IF (in_seccontact IS NOT NULL)
                  THEN
                     BEGIN
                        v_row := in_seccontact;

                        SELECT pkg_common.fn_countfields (v_row, '|')
                          INTO v_fldcnt
                          FROM DUAL;

                        IF (v_fldcnt = 6)
                        THEN
                           BEGIN
                              v_secfirstname :=
                                 SUBSTR (v_row,
                                         1,
                                         INSTR (v_row, '|', 1, 1) - 1
                                        );
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_seclastname :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_secjobtitle :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_secemail :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_secphone :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_secmobile :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_secfax := v_row;

                              INSERT INTO contact
                                          (contact_id,
                                           first_name, last_name,
                                           phone_number, mobile_number, fax,
                                           contact_type,
                                           job_title, email,
                                           created_by, created_date
                                          )
                                   VALUES (contact_id.NEXTVAL,
                                           v_secfirstname, v_seclastname,
                                           v_secphone, v_secmobile, v_secfax,
                                           pkg_constants.con_secondary_sitecontact,
                                           v_secjobtitle, v_secemail,
                                           in_createdby, SYSDATE ()
                                          )
                                RETURNING contact_id
                                     INTO v_seccontactid;

                              INSERT INTO site_contact_detail
                                          (site_contact_detail_id,
                                           site_id, contact_id,
                                           created_by, created_date
                                          )
                                   VALUES (site_contact_detail_id.NEXTVAL,
                                           v_siteid, v_seccontactid,
                                           in_createdby, SYSDATE
                                          );
                           END;
                        ELSE
                           BEGIN
                              out_status := pkg_constants.con_status_failure; -- Added as part of exception handling
                              out_errmsg :='Invalid Secondary Contact details';
                           END;
                        END IF;                                   --end fldcnt
                     END;
                  END IF;                 -- end secondary contact is not null

                  v_row := NULL;

                  --check technical contact details added on 30/12/2009
                  IF (in_techcontact IS NOT NULL)
                  THEN
                     BEGIN
                        v_row := in_techcontact;

                        SELECT pkg_common.fn_countfields (v_row, '|')
                          INTO v_fldcnt
                          FROM DUAL;

                        IF (v_fldcnt = 6)
                        THEN
                           BEGIN
                              v_techfirstname :=
                                 SUBSTR (v_row,
                                         1,
                                         INSTR (v_row, '|', 1, 1) - 1
                                        );
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_techlastname :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_techjobtitle :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_techemail :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_techphone :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_techmobile :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_techfax := v_row;

                              INSERT INTO contact
                                          (contact_id,
                                           first_name, last_name,
                                           phone_number, mobile_number,
                                           fax,
                                           contact_type,
                                           job_title, email,
                                           created_by, created_date
                                          )
                                   VALUES (contact_id.NEXTVAL,
                                           v_techfirstname, v_techlastname,
                                           v_techphone, v_techmobile,
                                           v_techfax,
                                           pkg_constants.con_tech_sitecontact,
                                           v_techjobtitle, v_techemail,
                                           in_createdby, SYSDATE ()
                                          )
                                RETURNING contact_id
                                     INTO v_techcontactid;

                              INSERT INTO site_contact_detail
                                          (site_contact_detail_id,
                                           site_id, contact_id,
                                           created_by, created_date
                                          )
                                   VALUES (site_contact_detail_id.NEXTVAL,
                                           v_siteid, v_techcontactid,
                                           in_createdby, SYSDATE
                                          );
                           END;
                        ELSE
                           BEGIN
                               out_status := pkg_constants.con_status_failure;
                              out_errmsg :='Invalid Technical Contact details';
                           END;
                        END IF;                              --end of fldcount
                     END;
                  END IF;

                  --check service assurance contact details added on 3rd March 2009
                  IF (in_servassurcontact IS NOT NULL)
                  THEN
                     BEGIN
                        v_row := in_servassurcontact;

                        SELECT pkg_common.fn_countfields (v_row, '|')
                          INTO v_fldcnt
                          FROM DUAL;

                        IF (v_fldcnt = 6)
                        THEN
                           BEGIN
                              v_tempfirstname :=
                                 SUBSTR (v_row,
                                         1,
                                         INSTR (v_row, '|', 1, 1) - 1
                                        );
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_templastname :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_tempjobtitle :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_tempemail :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_tempphone :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_tempmobile :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_tempfax := v_row;

                              INSERT INTO contact
                                          (contact_id,
                                           first_name, last_name,
                                           phone_number, mobile_number,
                                           fax,
                                           contact_type,
                                           job_title, email,
                                           created_by, created_date
                                          )
                                   VALUES (contact_id.NEXTVAL,
                                           v_tempfirstname, v_templastname,
                                           v_tempphone, v_tempmobile,
                                           v_tempfax,
                                           pkg_constants.con_serv_assur_sitecontact,
                                           v_tempjobtitle, v_tempemail,
                                           in_createdby, SYSDATE ()
                                          )
                                RETURNING contact_id
                                     INTO v_tempcontactid;

                              INSERT INTO site_contact_detail
                                          (site_contact_detail_id,
                                           site_id, contact_id,
                                           created_by, created_date
                                          )
                                   VALUES (site_contact_detail_id.NEXTVAL,
                                           v_siteid, v_tempcontactid,
                                           in_createdby, SYSDATE
                                          );
                           END;
                        ELSE
                           BEGIN
                              out_status := pkg_constants.con_status_failure; -- Added as part of exception handling
                              out_errmsg :='Invalid Service Assurance Contact details';
                           END;
                        END IF;                              --end of fldcount
                     END;
                  END IF;                  --end service assurance is not null

                  --check service assurance contact details added on 3rd March 2009
                  IF (in_servicedlvcontact IS NOT NULL)
                  THEN
                     BEGIN
                        v_row := in_servicedlvcontact;

                        SELECT pkg_common.fn_countfields (v_row, '|')
                          INTO v_fldcnt
                          FROM DUAL;

                        IF (v_fldcnt = 6)
                        THEN
                           BEGIN
                              v_tempfirstname :=
                                 SUBSTR (v_row,
                                         1,
                                         INSTR (v_row, '|', 1, 1) - 1
                                        );
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_templastname :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_tempjobtitle :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_tempemail :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_tempphone :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_tempmobile :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_tempfax := v_row;

                              INSERT INTO contact
                                          (contact_id,
                                           first_name, last_name,
                                           phone_number, mobile_number,
                                           fax,
                                           contact_type,
                                           job_title, email,
                                           created_by, created_date
                                          )
                                   VALUES (contact_id.NEXTVAL,
                                           v_tempfirstname, v_templastname,
                                           v_tempphone, v_tempmobile,
                                           v_tempfax,
                                           pkg_constants.con_serv_deli_sitecontact,
                                           v_tempjobtitle, v_tempemail,
                                           in_createdby, SYSDATE ()
                                          )
                                RETURNING contact_id
                                     INTO v_tempcontactid;

                              INSERT INTO site_contact_detail
                                          (site_contact_detail_id,
                                           site_id, contact_id,
                                           created_by, created_date
                                          )
                                   VALUES (site_contact_detail_id.NEXTVAL,
                                           v_siteid, v_tempcontactid,
                                           in_createdby, SYSDATE
                                          );
                           END;
                        ELSE
                           BEGIN
                               out_status := pkg_constants.con_status_failure; -- Added as part of exception handling
                              out_errmsg :='Invalid service option Contact details';
                           END;
                        END IF;                              --end of fldcount
                     END;
                  END IF;             --end service option contact is not null

                  -- ##### Change for 904 - Call Anywhere  begin
                  IF (in_kcidetails IS NOT NULL)
                  THEN
                     BEGIN
                        v_row := in_kcidetails;

                        SELECT pkg_common.fn_countfields (v_row, '|')
                          INTO v_fldcnt
                          FROM DUAL;

                        IF (v_fldcnt = 6)
                        THEN
                           BEGIN
                              v_tempfirstname :=
                                 SUBSTR (v_row,
                                         1,
                                         INSTR (v_row, '|', 1, 1) - 1
                                        );
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_templastname :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_tempjobtitle :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_tempemail :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_tempphone :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_tempmobile :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_tempfax := v_row;

                              INSERT INTO contact
                                          (contact_id,
                                           first_name, last_name,
                                           phone_number, mobile_number,
                                           fax,
                                           contact_type,
                                           job_title, email,
                                           created_by, created_date
                                          )
                                   VALUES (contact_id.NEXTVAL,
                                           v_tempfirstname, v_templastname,
                                           v_tempphone, v_tempmobile,
                                           v_tempfax,
                                           pkg_constants.con_keep_cust_informeddetl,
                                           v_tempjobtitle, v_tempemail,
                                           in_createdby, SYSDATE ()
                                          )
                                RETURNING contact_id
                                     INTO v_tempcontactid;

                              INSERT INTO site_contact_detail
                                          (site_contact_detail_id,
                                           site_id, contact_id,
                                           created_by, created_date
                                          )
                                   VALUES (site_contact_detail_id.NEXTVAL,
                                           v_siteid, v_tempcontactid,
                                           in_createdby, SYSDATE
                                          );
                           END;
                        ELSE
                           BEGIN
                              out_status := pkg_constants.con_status_failure; -- Added as part of exception handling
                              out_errmsg := 'Invalid KCI details';
                           END;
                        END IF;
                     END;
                  END IF;

                  -- ##### Change for 904 - Call Anywhere  end
                  IF (out_errmsg IS NOT NULL)
                  THEN
                     BEGIN
                        out_status := pkg_constants.con_status_failure;
                        --ROLLBACK;
                     END;
                  ELSE
                     BEGIN
                        -- COMMIT;
                        out_siteid := v_siteid;
                        out_status := pkg_constants.con_status_success;
                     END;
                  END IF;
               END;
            ELSE
               BEGIN
               IF in_bfgsiteid IS NOT NULL THEN
    SELECT site_id
    INTO out_siteid
    FROM site
    WHERE bfg_site_id       = in_bfgsiteid
    AND customer_id         = in_customerid;
  ELSIF in_expedio_site_id IS NOT NULL THEN
    SELECT site_id
    INTO out_siteid
    FROM site
    WHERE to_number(TO_CHAR(expedio_site_id)) =to_number(trim(TO_CHAR(in_expedio_site_id)))
    AND REGEXP_LIKE(expedio_site_id,'^[0-9]')
    AND customer_id = in_customerid;
  END IF;
EXCEPTION
WHEN no_data_found then
out_errmsg := 'no site found'||SQLCODE||sqlerrm;
  out_status                  := pkg_constants.con_status_failure;
  RETURN;
WHEN too_many_rows THEN
  out_errmsg := 'found more than one site for the given bfg or expedio site id'||SQLCODE||sqlerrm;
  out_status := pkg_constants.con_status_failure;
  RETURN;
WHEN OTHERS THEN
  out_errmsg := 'other error while searching for sqe site id'||SQLCODE||sqlerrm;
  out_status := pkg_constants.con_status_failure;
  RETURN;
END ;

                  out_status := pkg_constants.con_status_duplicate;
                  out_errmsg := SUBSTR (SQLERRM, 1, 100);

            END IF;
         END;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         -- Added by Sujana on 23/11/2010 as part of exception handling
         out_errmsg := substr(SQLERRM,1,150);
         v_sql_code := SQLCODE;
         PKG_COMMON.spi_error_log(
                                  NULL,
                                  in_quoteheaderid,
                                  out_siteid,
                                  NULL,
                                  'PKG_SITE_R5',
                                  'SPI_SITE',
                                  v_sql_code,
                                  out_errmsg
                                 );

   END;

   PROCEDURE spu_site (
      --modified on 30/12/2009 to update technical contact details
      in_customerid                 IN       customer.customer_id%TYPE,
      in_siteid                     IN       site.site_id%TYPE,
      in_customer_reportsitename    IN       site.customer_report_site_name%TYPE,
      in_buildingno                 IN       address.building_number%TYPE,
      in_addressline1               IN       address.address_line1%TYPE,
      in_city                       IN       address.city%TYPE,
      in_state                      IN       address.state%TYPE,
      in_state_code                 IN       address.state_code%TYPE,
      in_countryid                  IN       country.country_id%TYPE,
      in_postzipcode                IN       address.post_zip_code%TYPE,
      in_telephoneareacode          IN       site.telephone_area_code%TYPE,
      --added for R1
      in_county                     IN       address.county%TYPE,
      -- ##### Change for 904 - B-End validation  begin
      in_local_business_cust_name   IN       site.local_business_customer_name%TYPE,
      -- ##### Change for 904 - B-End validation  end
      in_additionalsite             IN       VARCHAR2,           --for address
      in_pricontact                 IN       VARCHAR2,   --for primary contact
      in_seccontact                 IN       VARCHAR2, --for secondary contact
      in_techcontact                IN       VARCHAR2, --for technical contact
      in_servassurcontact           IN       VARCHAR2,
      --for service assurance contact details
      in_servicedlvcontact          IN       VARCHAR2,
      --for service delivery contact details
      in_bfgsiteid                  IN       site.bfg_site_id%TYPE,
      -- Ghucs, Added new parameter in_bfgsiteid
      in_bfgsitename                IN       site.bfg_site_name%TYPE,
      -- Ghucs, Added new parameter in_bfgsitename
      -- ##### Change for 904 - Call Anywhere  begin
      in_kcidetails                 IN       VARCHAR2,
                                         -- for Keep Customer Informed details
      -- ##### Change for 904 - Call Anywhere  end
      /*line_of_site_billing added on 17/06/2010*/
      in_lineofsitebilling          IN       site.line_of_site_billing%TYPE,
      in_modifiedby                 IN       site.modified_by%TYPE,
      in_place_acc_price_rev_order  IN       site.place_acc_price_rev_order%TYPE,
      in_phone_number               IN       site.phone_number%TYPE, -- Added on 3/2/2011 as part of R11 iVPN2
      out_status                    OUT      NUMBER,
      out_errmsg                    OUT      VARCHAR2
   )
   AS
      v_addrline2              address.address_line2%TYPE;
      v_notes                  site.notes%TYPE;
      v_floor                  address.FLOOR%TYPE;
      v_room                   address.room%TYPE;
      v_classicsiteid          site.classic_site_id%TYPE;
      v_prifirstname           contact.first_name%TYPE;
      v_prilastname            contact.last_name%TYPE;
      v_prijobtitle            contact.job_title%TYPE;
      v_priemail               contact.email%TYPE;
      v_priphone               contact.phone_number%TYPE;
      v_primobile              contact.mobile_number%TYPE;
      v_prifax                 contact.fax%TYPE;
      v_secfirstname           contact.first_name%TYPE;
      v_seclastname            contact.last_name%TYPE;
      v_secjobtitle            contact.job_title%TYPE;
      v_secemail               contact.email%TYPE;
      v_secphone               contact.phone_number%TYPE;
      v_secmobile              contact.mobile_number%TYPE;
      v_secfax                 contact.fax%TYPE;
      v_billingid              site.billing_id%TYPE;
      v_row                    VARCHAR2 (2000);
      v_rowcount               NUMBER;
      v_addressid              address.address_id%TYPE;
      v_pricontactid           site.primary_contact_id%TYPE;
      v_seccontactid           site.secondary_contact_id%TYPE;
      v_siteid                 site.site_id%TYPE;
      v_fldcnt                 NUMBER;
      v_kgiflag                NUMBER                           := 1;
      v_flag                   NUMBER                           := 1;
      v_kgitype                VARCHAR2 (100);
      --v_kgitype         kgi_country.kgi_type%TYPE;
      v_techfirstname          contact.first_name%TYPE;
      v_techlastname           contact.last_name%TYPE;
      v_techjobtitle           contact.job_title%TYPE;
      v_techemail              contact.email%TYPE;
      v_techphone              contact.phone_number%TYPE;
      v_techmobile             contact.mobile_number%TYPE;
      v_techfax                contact.fax%TYPE;
      v_techcontactid          contact.contact_id%TYPE;
      v_contactcnt             NUMBER;
      v_countryname            country.NAME%TYPE;
      v_tempfirstname          contact.first_name%TYPE;
      v_templastname           contact.last_name%TYPE;
      v_tempjobtitle           contact.job_title%TYPE;
      v_tempemail              contact.email%TYPE;
      v_tempphone              contact.phone_number%TYPE;
      v_tempmobile             contact.mobile_number%TYPE;
      v_tempfax                contact.fax%TYPE;
      v_tempcontactid          contact.contact_id%TYPE;
      v_sa_contact_count       NUMBER;
      v_so_contact_count       NUMBER;
      v_sa_contactid           contact.contact_id%TYPE;
      v_so_contactid           contact.contact_id%TYPE;
      v_ppsr_notes             site.ppsr_note%TYPE;
      v_cntry_spec_notes_req   site.cntry_spec_notes_req%TYPE;
      v_url                    site.url%TYPE;
      /****R3 */
      v_pstn_number            contact.pstn_number%TYPE;
      v_primary_notes          contact.primary_notes%TYPE;
      v_main_site_flag           site.main_site_flag%TYPE :='';

   BEGIN
      v_row := in_additionalsite;

      --modified for kgi_check from ppsr
      SELECT NAME
        INTO v_countryname
        FROM country
       WHERE country_id = in_countryid;

--      SELECT COUNT (*)
--        INTO v_rowcount
--        FROM kgi_country
--       WHERE country_id = in_countryid;
      SELECT main_site_flag
        INTO v_main_site_flag
        FROM site
       WHERE site_id = in_siteid;

      if v_main_site_flag    <>'Y' then
      --kgi check from PPSR
      SELECT COUNT (*)
        INTO v_rowcount
        FROM ppsr_owner.ppsr_kgi_data_v@dblink_ppsr
       WHERE UPPER (REPLACE ("Country", '''')) =
                                         UPPER (REPLACE (v_countryname, ''''));

--kgi check
      IF (v_rowcount != 0)
      THEN
         BEGIN
--            SELECT kgi_type
--              INTO v_kgitype
--              FROM kgi_country
--             WHERE country_id = in_countryid;

            --kgi check from PPSR
            SELECT DISTINCT "Kgi Type"
                       INTO v_kgitype
                       FROM ppsr_owner.ppsr_kgi_data_v@dblink_ppsr
                      WHERE UPPER (REPLACE ("Country", '''')) =
                                         UPPER (REPLACE (v_countryname, ''''));

            IF (UPPER (v_kgitype) LIKE '%CITY%')
            THEN
               BEGIN
                  IF (in_city IS NULL)
                  THEN
                     v_kgiflag := 0;
                  END IF;
               END;
            END IF;

            IF (UPPER (v_kgitype) LIKE '%POST CODE%')
            THEN
               BEGIN
                  IF (in_postzipcode IS NULL)
                  THEN
                     v_kgiflag := 0;
                  END IF;
               END;
            END IF;

            IF (   UPPER (v_kgitype) LIKE '%STREET NAME%'
                OR UPPER (v_kgitype) LIKE '%STREET NUMBER%'
               )
            THEN
               BEGIN
                  IF (in_addressline1 IS NULL)
                  THEN
                     v_kgiflag := 0;
                  END IF;
               END;
            END IF;

            IF (UPPER (v_kgitype) LIKE '%TELEPHONE AREA CODE%')
            THEN
               BEGIN
                  IF (in_telephoneareacode IS NULL)
                  THEN
                     v_kgiflag := 0;
                  END IF;
               END;
            END IF;

            IF (UPPER (v_kgitype) LIKE '%DISTRICT%')
            THEN
               BEGIN
                  v_addrline2 :=
                     SUBSTR (v_row,
                             INSTR (v_row, '|', 1, 2) + 1,
                               (INSTR (v_row, '|', 1, 3) - 1
                               )
                             - (INSTR (v_row, '|', 1, 2))
                            );

                  IF (v_addrline2 IS NULL)
                  THEN
                     v_kgiflag := 0;
                  END IF;
               END;
            END IF;
         END;
      END IF;
      ELSE
      v_kgiflag:=1;
      END IF;

      IF (v_kgiflag = 0)
      THEN
         BEGIN
            out_status := pkg_constants.con_status_failure; -- Added as part of exception handling
            out_errmsg := 'KGI Error: ' || v_kgitype || ' is mandatory';
         END;
      ELSE
         dbms_output.put_line('Inside KGI check'); --**
         BEGIN
            SELECT COUNT (*)
              INTO v_rowcount
              FROM site
             WHERE site_id = in_siteid AND customer_id = in_customerid;

            IF (v_rowcount = 1)
            THEN
               BEGIN
                  -- SET TRANSACTION READ WRITE NAME 'site page';

                  --get address_id
                  SELECT address_id
                    INTO v_addressid
                    FROM site s
                   WHERE s.site_id = in_siteid AND customer_id = in_customerid;

                  --get primary_contact_id added on 30/12/2009
                  SELECT COUNT (*)
                    INTO v_contactcnt
                    FROM site s, site_contact_detail sc, contact c
                   WHERE s.site_id = sc.site_id
                     AND sc.contact_id = c.contact_id
                     AND UPPER (c.contact_type) =
                                 UPPER (pkg_constants.con_primary_sitecontact)
                     AND s.site_id = in_siteid
                     AND customer_id = in_customerid;

                  IF (v_contactcnt <> 0)
                  THEN
                     BEGIN
                        SELECT sc.contact_id
                          INTO v_pricontactid
                          FROM site s, site_contact_detail sc, contact c
                         WHERE s.site_id = sc.site_id
                           AND sc.contact_id = c.contact_id
                           AND UPPER (c.contact_type) =
                                  UPPER (pkg_constants.con_primary_sitecontact)
                           AND s.site_id = in_siteid
                           AND customer_id = in_customerid;
                     END;
                  ELSE
                     BEGIN
                        v_pricontactid := NULL;
                     END;
                  END IF;

                  --get secondary_contact_id added on 30/12/2009
                  SELECT COUNT (*)
                    INTO v_contactcnt
                    FROM site s, site_contact_detail sc, contact c
                   WHERE s.site_id = sc.site_id
                     AND sc.contact_id = c.contact_id
                     AND UPPER (c.contact_type) =
                               UPPER (pkg_constants.con_secondary_sitecontact)
                     AND s.site_id = in_siteid
                     AND customer_id = in_customerid;

                  IF (v_contactcnt <> 0)
                  THEN
                     BEGIN
                        SELECT sc.contact_id
                          INTO v_seccontactid
                          FROM site s, site_contact_detail sc, contact c
                         WHERE s.site_id = sc.site_id
                           AND sc.contact_id = c.contact_id
                           AND UPPER (c.contact_type) =
                                  UPPER
                                      (pkg_constants.con_secondary_sitecontact)
                           AND s.site_id = in_siteid
                           AND customer_id = in_customerid;
                     END;
                  ELSE
                     BEGIN
                        v_seccontactid := NULL;
                     END;
                  END IF;

                  --get technical_contact_id added on 30/12/2009
                  SELECT COUNT (*)
                    INTO v_contactcnt
                    FROM site s, site_contact_detail sc, contact c
                   WHERE s.site_id = sc.site_id
                     AND sc.contact_id = c.contact_id
                     AND UPPER (c.contact_type) =
                                    UPPER (pkg_constants.con_tech_sitecontact)
                     AND s.site_id = in_siteid
                     AND customer_id = in_customerid;

                  --get service assurance contact_id added on 3rd March 2010
                  SELECT COUNT (*)
                    INTO v_sa_contact_count
                    FROM site s, site_contact_detail sc, contact c
                   WHERE s.site_id = sc.site_id
                     AND sc.contact_id = c.contact_id
                     AND UPPER (c.contact_type) =
                              UPPER (pkg_constants.con_serv_assur_sitecontact)
                     AND s.site_id = in_siteid
                     AND customer_id = in_customerid;

                  --get service option contact_id added on 3rd march 2010
                  SELECT COUNT (*)
                    INTO v_so_contact_count
                    FROM site s, site_contact_detail sc, contact c
                   WHERE s.site_id = sc.site_id
                     AND sc.contact_id = c.contact_id
                     AND UPPER (c.contact_type) =
                               UPPER (pkg_constants.con_serv_deli_sitecontact)
                     AND s.site_id = in_siteid
                     AND customer_id = in_customerid;

                  IF (v_contactcnt <> 0)
                  THEN
                     BEGIN
                        SELECT sc.contact_id
                          INTO v_techcontactid
                          FROM site s, site_contact_detail sc, contact c
                         WHERE s.site_id = sc.site_id
                           AND sc.contact_id = c.contact_id
                           AND UPPER (c.contact_type) =
                                    UPPER (pkg_constants.con_tech_sitecontact)
                           AND s.site_id = in_siteid
                           AND customer_id = in_customerid;
                     END;
                  ELSE
                     BEGIN
                        v_techcontactid := NULL;
                     END;
                  END IF;

                  IF v_sa_contact_count <> 0
                  THEN
                     BEGIN
                        SELECT sc.contact_id
                          INTO v_sa_contactid
                          FROM site s, site_contact_detail sc, contact c
                         WHERE s.site_id = sc.site_id
                           AND sc.contact_id = c.contact_id
                           AND UPPER (c.contact_type) =
                                  UPPER
                                     (pkg_constants.con_serv_assur_sitecontact)
                           AND s.site_id = in_siteid
                           AND customer_id = in_customerid;
                     END;
                  ELSE
                     BEGIN
                        v_sa_contactid := NULL;
                     END;
                  END IF;

                  IF v_so_contact_count <> 0
                  THEN
                     BEGIN
                        SELECT sc.contact_id
                          INTO v_so_contactid
                          FROM site s, site_contact_detail sc, contact c
                         WHERE s.site_id = sc.site_id
                           AND sc.contact_id = c.contact_id
                           AND UPPER (c.contact_type) =
                                  UPPER
                                      (pkg_constants.con_serv_deli_sitecontact)
                           AND s.site_id = in_siteid
                           AND customer_id = in_customerid;
                     END;
                  ELSE
                     BEGIN
                        v_so_contactid := NULL;
                     END;
                  END IF;

                  --not using primary and secondary contact ids in site
                  UPDATE site
                     SET address_id = NULL,
                         primary_contact_id = NULL,
                         secondary_contact_id = NULL,
                         bfg_site_name = in_bfgsitename
                   -- Ghucs, Added new parameter in_bfgsitename to update
                  WHERE  site_id = in_siteid AND customer_id = in_customerid
                      OR bfg_site_id = in_bfgsiteid;


                  -- Added as part of R5

                  -- Ghucs, Added new parameter in_bfgsiteid as OR condition
                  DELETE FROM address
                        WHERE address_id = v_addressid;

                  DELETE FROM site_contact_detail
                        WHERE site_id = in_siteid;

                  DELETE FROM contact
                        WHERE contact_id IN
                                 (v_pricontactid,
                                  v_seccontactid,
                                  v_techcontactid,
                                  v_sa_contactid,
                                  v_so_contactid
                                 );

                  SELECT address_id.NEXTVAL
                    INTO v_addressid
                    FROM DUAL;

                  INSERT INTO address
                              (address_id, country_id, building_number,
                               address_line1, city, state,
                               post_zip_code, created_by, created_date,
                               state_code, county
                              )
                       VALUES (v_addressid, in_countryid, in_buildingno,
                               in_addressline1, in_city, in_state,
                               in_postzipcode, in_modifiedby, SYSDATE (),
                               in_state_code, in_county
                              );

                  -- ##### Change for 904 - B-End validation  begin
                  UPDATE site
                     SET customer_report_site_name =
                                                    in_customer_reportsitename,
                         local_business_customer_name =
                                                   in_local_business_cust_name,
                         address_id = v_addressid,
                         classic_site_id = NULL,
                         billing_id = NULL,
                         telephone_area_code = in_telephoneareacode,
                         line_of_site_billing = in_lineofsitebilling,
                         notes = NULL,
                         modified_by = in_modifiedby,
                         modified_date = SYSDATE (),
                         place_acc_price_rev_order = in_place_acc_price_rev_order,--Added for R9 IVPN2
                         phone_number = in_phone_number  -- Added on 15/2/2011 as part of R11 iVPN2
                   WHERE site_id = in_siteid AND customer_id = in_customerid;

                  /*UPDATE site
                     SET customer_report_site_name =
                                                    in_customer_reportsitename,
                         address_id = v_addressid,
                         classic_site_id = NULL,
                         billing_id = NULL,
                         telephone_area_code = in_telephoneareacode,
                         notes = NULL,
                         modified_by = in_modifiedby,
                         modified_date = SYSDATE ()
                   WHERE site_id = in_siteid AND customer_id = in_customerid;*/

                  -- ##### Change for 904 - B-End validation  end
                  IF (in_additionalsite IS NOT NULL)
                  THEN
                     BEGIN

                       v_row := in_additionalsite;

                       SELECT pkg_common.fn_countfields (v_row, '|')
                          INTO v_fldcnt
                          FROM DUAL;

                        IF (v_fldcnt = 8)
                        THEN
                           BEGIN
                              v_floor :=
                                 SUBSTR (v_row,
                                         1,
                                         INSTR (v_row, '|', 1, 1) - 1
                                        );
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_room :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_addrline2 :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_classicsiteid :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);

                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_billingid :=
                                 TO_NUMBER (SUBSTR (v_row,
                                                    1,
                                                      INSTR (v_row, '|', 1, 1)
                                                    - 1
                                                   )
                                           );
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              /* Sprint2 Clean order managment SQE904 Starts */
                              v_notes :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_ppsr_notes :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_cntry_spec_notes_req :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_url := v_row;

                              /* Sprint2 Clean order managment SQE904  end*/
                              UPDATE address
                                 SET FLOOR = v_floor,
                                     room = v_room,
                                     address_line2 = v_addrline2
                               WHERE address_id = v_addressid;

                              UPDATE site
                                 SET classic_site_id = v_classicsiteid,
                                     billing_id = v_billingid,
                                     notes = v_notes,
                                     ppsr_note = v_ppsr_notes,
                                     cntry_spec_notes_req =
                                                        v_cntry_spec_notes_req,
                                     url = v_url
                               WHERE site_id = in_siteid
                                 AND customer_id = in_customerid;
                           END;
                        ELSE
                           BEGIN
                              out_status := pkg_constants.con_status_failure; -- Added as part of exception handling
                              out_errmsg := 'Invalid Additional Site details';
                           END;
                        END IF;
                     END;
                  END IF;                              --end in_additionalsite

                  v_row := NULL;

                  IF (in_pricontact IS NOT NULL)
                  THEN
                     BEGIN
                        v_row := in_pricontact;

                        SELECT pkg_common.fn_countfields (v_row, '|')
                          INTO v_fldcnt
                          FROM DUAL;

                        IF (v_fldcnt = 8)
                        THEN
                           BEGIN
                              v_prifirstname :=
                                 SUBSTR (v_row,
                                         1,
                                         INSTR (v_row, '|', 1, 1) - 1
                                        );
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_prilastname :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_prijobtitle :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_priemail :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_priphone :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_primobile :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              --v_prifax := v_row;
/********/
                              /*HVPN Design change R3 (2010) */
                              /*adding PSTN number and Notes in the primary contact section  */
                              v_prifax :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_pstn_number :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_primary_notes := v_row;

                              /*R3 ends */
                              /*******/
                              INSERT INTO contact
                                          (contact_id,
                                           first_name, last_name,
                                           phone_number, mobile_number, fax,
                                           contact_type,
                                           job_title, email,
                                           created_by, created_date,
                                           pstn_number, primary_notes
                                          )
                                   VALUES (contact_id.NEXTVAL,
                                           v_prifirstname, v_prilastname,
                                           v_priphone, v_primobile, v_prifax,
                                           pkg_constants.con_primary_sitecontact,
                                           v_prijobtitle, v_priemail,
                                           in_modifiedby, SYSDATE (),
                                           v_pstn_number, v_primary_notes
                                          )
                                RETURNING contact_id
                                     INTO v_pricontactid;

                              INSERT INTO site_contact_detail
                                          (site_contact_detail_id,
                                           site_id, contact_id,
                                           created_by, created_date
                                          )
                                   VALUES (site_contact_detail_id.NEXTVAL,
                                           in_siteid, v_pricontactid,
                                           in_modifiedby, SYSDATE
                                          );
                           END;
                        ELSE
                           BEGIN
                              out_status := pkg_constants.con_status_failure; -- Added as part of exception handling
                              out_errmsg := 'Invalid Primary Contact details';
                           END;
                        END IF;                                --end of fldcnt
                     END;
                  END IF;                    --end of primary contact not null

                  v_row := NULL;

                  IF (in_seccontact IS NOT NULL)
                  THEN
                     BEGIN
                        v_row := in_seccontact;

                        SELECT pkg_common.fn_countfields (v_row, '|')
                          INTO v_fldcnt
                          FROM DUAL;

                        IF (v_fldcnt = 6)
                        THEN
                           BEGIN
                              v_secfirstname :=
                                 SUBSTR (v_row,
                                         1,
                                         INSTR (v_row, '|', 1, 1) - 1
                                        );
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_seclastname :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_secjobtitle :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_secemail :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_secphone :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_secmobile :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_secfax := v_row;

                              INSERT INTO contact
                                          (contact_id,
                                           first_name, last_name,
                                           phone_number, mobile_number, fax,
                                           contact_type,
                                           job_title, email,
                                           created_by, created_date
                                          )
                                   VALUES (contact_id.NEXTVAL,
                                           v_secfirstname, v_seclastname,
                                           v_secphone, v_secmobile, v_secfax,
                                           pkg_constants.con_secondary_sitecontact,
                                           v_secjobtitle, v_secemail,
                                           in_modifiedby, SYSDATE ()
                                          )
                                RETURNING contact_id
                                     INTO v_seccontactid;

                              INSERT INTO site_contact_detail
                                          (site_contact_detail_id,
                                           site_id, contact_id,
                                           created_by, created_date
                                          )
                                   VALUES (site_contact_detail_id.NEXTVAL,
                                           in_siteid, v_seccontactid,
                                           in_modifiedby, SYSDATE
                                          );
                           END;
                        ELSE
                           BEGIN
                              out_status := pkg_constants.con_status_failure; -- Added as part of exception handling
                              out_errmsg :=
                                          'Invalid Secondary Contact details';
                           END;
                        END IF;                                --end of fldcnt
                     END;
                  END IF;                  --end of secondary contact not null

                  v_row := NULL;

                  IF (in_techcontact IS NOT NULL)
                  THEN
                     BEGIN
                        v_row := in_techcontact;

                        SELECT pkg_common.fn_countfields (v_row, '|')
                          INTO v_fldcnt
                          FROM DUAL;

                        IF (v_fldcnt = 6)
                        THEN
                           BEGIN
                              v_techfirstname :=
                                 SUBSTR (v_row,
                                         1,
                                         INSTR (v_row, '|', 1, 1) - 1
                                        );
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_techlastname :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_techjobtitle :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_techemail :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_techphone :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_techmobile :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_techfax := v_row;

                              INSERT INTO contact
                                          (contact_id,
                                           first_name, last_name,
                                           phone_number, mobile_number,
                                           fax,
                                           contact_type,
                                           job_title, email,
                                           created_by, created_date
                                          )
                                   VALUES (contact_id.NEXTVAL,
                                           v_techfirstname, v_techlastname,
                                           v_techphone, v_techmobile,
                                           v_techfax,
                                           pkg_constants.con_tech_sitecontact,
                                           v_techjobtitle, v_techemail,
                                           in_modifiedby, SYSDATE ()
                                          )
                                RETURNING contact_id
                                     INTO v_techcontactid;

                              INSERT INTO site_contact_detail
                                          (site_contact_detail_id,
                                           site_id, contact_id,
                                           created_by, created_date
                                          )
                                   VALUES (site_contact_detail_id.NEXTVAL,
                                           in_siteid, v_techcontactid,
                                           in_modifiedby, SYSDATE
                                          );
                           END;
                        ELSE
                           BEGIN
                              out_status := pkg_constants.con_status_failure; -- Added as part of exception handling
                              out_errmsg :=
                                          'Invalid Technical Contact details';
                           END;
                        END IF;                              --end of fldcount
                     END;
                  END IF;                  --end of technical contact not null

                  IF (in_servassurcontact IS NOT NULL)
                  THEN
                     BEGIN
                        v_row := in_servassurcontact;

                        SELECT pkg_common.fn_countfields (v_row, '|')
                          INTO v_fldcnt
                          FROM DUAL;

                        IF (v_fldcnt = 6)
                        THEN
                           BEGIN
                              v_tempfirstname :=
                                 SUBSTR (v_row,
                                         1,
                                         INSTR (v_row, '|', 1, 1) - 1
                                        );
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_templastname :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_tempjobtitle :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_tempemail :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_tempphone :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_tempmobile :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_tempfax := v_row;

                              INSERT INTO contact
                                          (contact_id,
                                           first_name, last_name,
                                           phone_number, mobile_number,
                                           fax,
                                           contact_type,
                                           job_title, email,
                                           created_by, created_date
                                          )
                                   VALUES (contact_id.NEXTVAL,
                                           v_tempfirstname, v_templastname,
                                           v_tempphone, v_tempmobile,
                                           v_tempfax,
                                           pkg_constants.con_serv_assur_sitecontact,
                                           v_tempjobtitle, v_tempemail,
                                           in_modifiedby, SYSDATE ()
                                          )
                                RETURNING contact_id
                                     INTO v_tempcontactid;

                              INSERT INTO site_contact_detail
                                          (site_contact_detail_id,
                                           site_id, contact_id,
                                           created_by, created_date
                                          )
                                   VALUES (site_contact_detail_id.NEXTVAL,
                                           in_siteid, v_tempcontactid,
                                           in_modifiedby, SYSDATE
                                          );
                           END;
                        ELSE
                           BEGIN
                              out_status := pkg_constants.con_status_failure; -- Added as part of exception handling
                              out_errmsg :=
                                  'Invalid service assurance contact details';
                           END;
                        END IF;                              --end of fldcount
                     END;
                  END IF;          --end of service assurance contact not null

                  IF (in_servicedlvcontact IS NOT NULL)
                  THEN
                     BEGIN
                        v_row := in_servicedlvcontact;

                        SELECT pkg_common.fn_countfields (v_row, '|')
                          INTO v_fldcnt
                          FROM DUAL;

                        IF (v_fldcnt = 6)
                        THEN
                           BEGIN
                              v_tempfirstname :=
                                 SUBSTR (v_row,
                                         1,
                                         INSTR (v_row, '|', 1, 1) - 1
                                        );
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_templastname :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_tempjobtitle :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_tempemail :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_tempphone :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_tempmobile :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_tempfax := v_row;

                              INSERT INTO contact
                                          (contact_id,
                                           first_name, last_name,
                                           phone_number, mobile_number,
                                           fax,
                                           contact_type,
                                           job_title, email,
                                           created_by, created_date
                                          )
                                   VALUES (contact_id.NEXTVAL,
                                           v_tempfirstname, v_templastname,
                                           v_tempphone, v_tempmobile,
                                           v_tempfax,
                                           pkg_constants.con_serv_deli_sitecontact,
                                           v_tempjobtitle, v_tempemail,
                                           in_modifiedby, SYSDATE ()
                                          )
                                RETURNING contact_id
                                     INTO v_tempcontactid;

                              INSERT INTO site_contact_detail
                                          (site_contact_detail_id,
                                           site_id, contact_id,
                                           created_by, created_date
                                          )
                                   VALUES (site_contact_detail_id.NEXTVAL,
                                           in_siteid, v_tempcontactid,
                                           in_modifiedby, SYSDATE
                                          );
                           END;
                        ELSE
                           BEGIN
                              out_status := pkg_constants.con_status_failure; -- Added as part of exception handling
                              out_errmsg :=
                                     'Invalid service option contact details';
                           END;
                        END IF;                              --end of fldcount
                     END;
                  END IF;             --end of service option contact not null

                  -- ##### Change for 904 - Call Anywhere  begin
                  IF (in_kcidetails IS NOT NULL)
                  THEN
                     BEGIN
                        v_row := in_kcidetails;

                        SELECT pkg_common.fn_countfields (v_row, '|')
                          INTO v_fldcnt
                          FROM DUAL;

                        IF (v_fldcnt = 6)
                        THEN
                           BEGIN
                              v_tempfirstname :=
                                 SUBSTR (v_row,
                                         1,
                                         INSTR (v_row, '|', 1, 1) - 1
                                        );
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_templastname :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_tempjobtitle :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_tempemail :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_tempphone :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_tempmobile :=
                                 SUBSTR (v_row, 1,
                                         INSTR (v_row, '|', 1, 1) - 1);
                              v_row :=
                                 SUBSTR (v_row,
                                         INSTR (v_row, '|', 1, 1) + 1,
                                           LENGTH (v_row)
                                         - INSTR (v_row, '|', 1, 1)
                                        );
                              v_tempfax := v_row;

                              INSERT INTO contact
                                          (contact_id,
                                           first_name, last_name,
                                           phone_number, mobile_number,
                                           fax,
                                           contact_type,
                                           job_title, email,
                                           created_by, created_date
                                          )
                                   VALUES (contact_id.NEXTVAL,
                                           v_tempfirstname, v_templastname,
                                           v_tempphone, v_tempmobile,
                                           v_tempfax,
                                           pkg_constants.con_keep_cust_informeddetl,
                                           v_tempjobtitle, v_tempemail,
                                           in_modifiedby, SYSDATE ()
                                          )
                                RETURNING contact_id
                                     INTO v_tempcontactid;

                              INSERT INTO site_contact_detail
                                          (site_contact_detail_id,
                                           site_id, contact_id,
                                           created_by, created_date
                                          )
                                   VALUES (site_contact_detail_id.NEXTVAL,
                                           in_siteid, v_tempcontactid,
                                           in_modifiedby, SYSDATE
                                          );
                           END;
                        ELSE
                           BEGIN
                              out_status := pkg_constants.con_status_failure; -- Added as part of exception handling
                              out_errmsg := 'Invalid KCI details';
                           END;
                        END IF;                              --end of fldcount
                     END;
                  END IF;             --end of service option contact not null
               -- ##### Change for 904 - Call Anywhere  end

               --end of row count
               END;
            END IF;
         END;
      END IF;

      --end kgi flag
      IF (out_errmsg IS NOT NULL)
      THEN
         BEGIN
            out_status := pkg_constants.con_status_failure;
--            ROLLBACK;
         END;
      ELSE
         BEGIN
            out_status := pkg_constants.con_status_success;
--            COMMIT;
         END;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         -- Added by Sujana on 23/11/2010 as part of exception handling
         out_errmsg := substr(SQLERRM,1,150);
         v_sql_code := SQLCODE;
         PKG_COMMON.spi_error_log(
                                  NULL,
                                  NULL,
                                  in_siteid,
                                  NULL,
                                  'PKG_SITE_R5',
                                  'SPU_SITE',
                                  v_sql_code,
                                  out_errmsg
                                 );
   END;


   PROCEDURE sps_site (
      in_bfgcustomerid   IN       customer.bfg_customer_id%TYPE,
      in_searchby        IN       VARCHAR2,
      in_keyword         IN OUT   VARCHAR2,          -- Modified as part of R5
      out_site           OUT      sys_refcursor                            --,
   )
   AS
      v_cust_id      NUMBER (10);
      out_exp_site   sys_refcursor;

   BEGIN
      IF TRIM (in_keyword) = 'null'
      THEN
         in_keyword := NULL;
      END IF;

      BEGIN
         SELECT customer_id
           INTO v_cust_id
           FROM customer
          WHERE bfg_customer_id = TRIM (in_bfgcustomerid);
      EXCEPTION
         WHEN OTHERS
         THEN
            DBMS_OUTPUT.put_line (SQLCODE || SQLERRM);
            v_cust_id := 0;
      END;

      IF (TRIM (in_keyword) IS NULL)
      THEN
         BEGIN
            OPEN out_site FOR
               SELECT   /* Modified the select clause as part of Re-eng R5 */
                      st.bfg_site_id "BFG Site ID",
                      st.expedio_site_id "Expedio Site ID",
                      st.site_id "SQE Site ID", st.NAME "Site Name",
                      st.customer_report_site_name
                                                 "Customer Report Site Name",
                      addr.building_number "Building Number",
                      addr.address_line1 "Address1",
                      addr.address_line2 "Address2", addr.city "City",
                      addr.county "County", addr.state "State Province",
                      addr.post_zip_code "Zip Post Code",
                      cntry.NAME "Country",
                      st.telephone_area_code "Telephone Area Code",
                      st.local_business_customer_name
                                              "Local Business Customer Name",
                      addr.room "Room", addr.FLOOR "Floor",
                      --added Site_Type by Tanmayi on 9/9/2010
                      NULL "Site Type",
                      -- Added by Sujana on 20/10/2010 as part of defect 83494
                      CAST(st.bfg_address_id as NUMBER) "BFG Address ID",
                      CAST(st.bfg_subloc_id  as NUMBER) "BFG Sub Location ID",
                      --
                      st.phone_number "Phone Number" -- Added on 15/2/2011 as part of R11 iVPN
                 --addr.state_code "State Code" -- Removed as part of Re-eng R5
               FROM   site st LEFT OUTER JOIN address addr
                      ON st.address_id = addr.address_id
                      LEFT OUTER JOIN country cntry
                      ON addr.country_id = cntry.country_id
                WHERE st.customer_id = v_cust_id    -- Modified as part of R5
                  AND (   st.NAME IS NOT NULL
                       OR st.main_site_flag !=
                                              pkg_constants.con_activeflag_yes
                      )
                  --Added by Tanmayi on 24/08/2010
                  AND (expedio_site_id IS NULL AND bfg_site_id IS NULL)
               ---- ORDER BY st.site_id
               UNION
               -- Added by Sujana on 20/7/2010 as part of R5 - Start
               --OPEN OUT_EXP_SITE FOR
               SELECT bfg_site_id "BFG Site ID",
                      expedio_site_id "Expedio Site ID",
                      NVL (NULL, -1) "SQE Site ID", site_name "Site Name",
                      sit_reference "Customer Report Site Name",
                      street_number "Building Number",
                      premise_name "Address1", street_name "Address2",
                      city "City", county "County", county "State Province",
                      post_code "Zip Post Code", country "Country",
                      telephone_area_code "Telephone Area Code",
                      bfg_cus_name "Local Business Customer Name",
                      room "Room", FLOOR "Floor",
                      --added Site_Type by Tanmayi on 9/9/2010
                      sit_type "Site Type",
                      -- Added by Sujana on 20/10/2010 as part of defect 83494
                      bfg_address_id "BFG Address ID",
                      bfg_location_id "BFG Sub Location ID",
                      --
                      phone_number "Phone Number" -- Added on 15/2/2011 as part of R11 iVPN
                 FROM ivpn_bfg_expedio_sites
                WHERE bfg_customer_id = in_bfgcustomerid;
        COMMIT;
         -- Added by Sujana on 20/7/2010 as part of R5 - End
         END;
      ELSE
         BEGIN
            CASE UPPER (in_searchby)
               WHEN 'SITE NAME'
               THEN
                  BEGIN
                     OPEN out_site FOR
                        SELECT
                               /* Modified the select clause as part of Re-eng R5 */
                               st.bfg_site_id "BFG Site ID",
                               st.expedio_site_id "Expedio Site ID",
                               st.site_id "SQE Site ID", st.NAME "Site Name",
                               st.customer_report_site_name
                                                 "Customer Report Site Name",
                               addr.building_number "Building Number",
                               addr.address_line1 "Address1",
                               addr.address_line2 "Address2",
                               addr.city "City", addr.county "County",
                               addr.state "State Province",
                               addr.post_zip_code "Zip Post Code",
                               cntry.NAME "Country",
                               st.telephone_area_code "Telephone Area Code",
                               st.local_business_customer_name
                                              "Local Business Customer Name",
                               addr.room "Room", addr.FLOOR "Floor",

                               --added Site_Type by Tanmayi on 9/9/2010
                               NULL "Site Type",
                               -- Added by Sujana on 20/10/2010 as part of defect 83494
                               CAST(st.bfg_address_id as NUMBER) "BFG Address ID",
                               CAST(st.bfg_subloc_id  as NUMBER) "BFG Sub Location ID",
                               --
                               st.phone_number "Phone Number" -- Added on 15/2/2011 as part of R11 iVPN
                        FROM   site st LEFT OUTER JOIN address addr
                               ON st.address_id = addr.address_id
                               LEFT OUTER JOIN country cntry
                               ON addr.country_id = cntry.country_id
                         WHERE UPPER (st.NAME) LIKE UPPER (TRIM (in_keyword)) ESCAPE '\'
                           AND st.customer_id = v_cust_id
                           -- Modified as part of R5
                           AND (   st.NAME IS NOT NULL
                                OR st.main_site_flag !=
                                              pkg_constants.con_activeflag_yes
                               )
                           --Added by Tanmayi on 24/08/2010
                           AND (expedio_site_id IS NULL
                                AND bfg_site_id IS NULL
                               )
                        ----  ORDER BY st.site_id
                        UNION
                        -- Added by Sujana on 20/7/2010 as part of R5 - Start
                        --OPEN OUT_EXP_SITE FOR
                        SELECT bfg_site_id "BFG Site ID",
                               expedio_site_id "Expedio Site ID",
                               NVL (NULL, -1) "SQE Site ID",
                               site_name "Site Name",
                               sit_reference "Customer Report Site Name",
                               street_number "Building Number",
                               premise_name "Address1",
                               street_name "Address2", city "City",
                               county "County", county "State Province",
                               post_code "Zip Post Code", country "Country",
                               telephone_area_code "Telephone Area Code",
                               bfg_cus_name "Local Business Customer Name",
                               room "Room", FLOOR "Floor",
                               --added Site_Type by Tanmayi on 9/9/2010
                               sit_type "Site Type",
                               -- Added by Sujana on 20/10/2010 as part of defect 83494
                               bfg_address_id "BFG Address ID",
                               bfg_location_id "BFG Sub Location ID",
                               --
                               phone_number "Phone Number" -- Added on 15/2/2011 as part of R11 iVPN
                        FROM   ivpn_bfg_expedio_sites
                         WHERE bfg_customer_id = in_bfgcustomerid
                           AND UPPER (site_name) LIKE
                                                     UPPER (TRIM (in_keyword)) ESCAPE '\';
            commit;

                  -- Added by Sujana on 20/7/2010 as part of R5 - End
                  END;
               WHEN 'CITY'
               THEN
                  BEGIN
                     OPEN out_site FOR
                        SELECT
                               /* Modified the select clause as part of Re-eng R5 */
                               st.bfg_site_id "BFG Site ID",
                               st.expedio_site_id "Expedio Site ID",
                               st.site_id "SQE Site ID", st.NAME "Site Name",
                               st.customer_report_site_name
                                                 "Customer Report Site Name",
                               addr.building_number "Building Number",
                               addr.address_line1 "Address1",
                               addr.address_line2 "Address2",
                               addr.city "City", addr.county "County",
                               addr.state "State Province",
                               addr.post_zip_code "Zip Post Code",
                               cntry.NAME "Country",
                               st.telephone_area_code "Telephone Area Code",
                               st.local_business_customer_name
                                              "Local Business Customer Name",
                               addr.room "Room", addr.FLOOR "Floor",

                               --added Site_Type by Tanmayi on 9/9/2010
                               NULL "Site Type",
                               -- Added by Sujana on 20/10/2010 as part of defect 83494
                               CAST(st.bfg_address_id as NUMBER) "BFG Address ID",
                               CAST(st.bfg_subloc_id  as NUMBER) "BFG Sub Location ID",
                               --
                               st.phone_number "Phone Number" -- Added on 15/2/2011 as part of R11 iVPN
                        FROM   site st LEFT OUTER JOIN address addr
                               ON st.address_id = addr.address_id
                               LEFT OUTER JOIN country cntry
                               ON addr.country_id = cntry.country_id
                         WHERE UPPER (addr.city) LIKE
                                                    UPPER (TRIM (in_keyword))
                           AND st.customer_id = v_cust_id
                           AND (   st.NAME IS NOT NULL
                                OR st.main_site_flag !=
                                              pkg_constants.con_activeflag_yes
                               )
                           --Added by Tanmayi on 24/08/2010
                           AND (expedio_site_id IS NULL
                                AND bfg_site_id IS NULL
                               )
                        --- ORDER BY ST.SITE_ID
                        UNION
                        -- Added by Sujana on 20/7/2010 as part of R5 - Start
                        --OPEN OUT_EXP_SITE FOR
                        SELECT bfg_site_id "BFG Site ID",
                               expedio_site_id "Expedio Site ID",
                               NVL (NULL, -1) "SQE Site ID",
                               site_name "Site Name",
                               sit_reference "Customer Report Site Name",
                               street_number "Building Number",
                               premise_name "Address1",
                               street_name "Address2", city "City",
                               county "County", county "State Province",
                               post_code "Zip Post Code", country "Country",
                               telephone_area_code "Telephone Area Code",
                               bfg_cus_name "Local Business Customer Name",
                               room "Room", FLOOR "Floor",

--added Site_Type by Tanmayi on 9/9/2010
                               sit_type "Site Type",
                               -- Added by Sujana on 20/10/2010 as part of defect 83494
                               bfg_address_id "BFG Address ID",
                               bfg_location_id "BFG Sub Location ID",
                               --
                               phone_number "Phone Number" -- Added on 15/2/2011 as part of R11 iVPN
                          FROM ivpn_bfg_expedio_sites
                         WHERE bfg_customer_id = in_bfgcustomerid
                           AND UPPER (city) LIKE UPPER (TRIM (in_keyword));
             COMMIT;

                  -- Added by Sujana on 20/7/2010 as part of R5 - End
                  END;
               -- Commented as part of R5
               /* WHEN 'STATE'
                THEN
                   BEGIN
                      OPEN out_site FOR
                         SELECT   st.site_id "Site ID", st.NAME "Site Name",
                                  addr.address_line1 "Address1",
                                  addr.address_line2 "Address2",
                                  addr.city "City", addr.state "State",
                                  cntry.NAME "Country",
                                  addr.post_zip_code "Zip/Post Code",
                                  addr.state_code "State Code"
                             FROM site st LEFT OUTER JOIN address addr
                                  ON st.address_id = addr.address_id
                                  LEFT OUTER JOIN country cntry
                                  ON addr.country_id = cntry.country_id
                            WHERE UPPER (addr.state) LIKE UPPER (in_keyword)
                              AND st.customer_id = in_bfgcustomerid
                              AND (   st.NAME IS NOT NULL
                                   OR st.main_site_flag !=
                                               pkg_constants.con_activeflag_yes
                                  )
                         order by st.site_id;
                   END; */
                 -- Commented as part of R5
            WHEN 'COUNTRY'
               THEN
                  BEGIN
                     OPEN out_site FOR
                        SELECT
                               /* Modified the select clause as part of Re-eng R5 */
                               st.bfg_site_id "BFG Site ID",
                               st.expedio_site_id "Expedio Site ID",
                               st.site_id "SQE Site ID", st.NAME "Site Name",
                               st.customer_report_site_name
                                                 "Customer Report Site Name",
                               addr.building_number "Building Number",
                               addr.address_line1 "Address1",
                               addr.address_line2 "Address2",
                               addr.city "City", addr.county "County",
                               addr.state "State Province",
                               addr.post_zip_code "Zip Post Code",
                               cntry.NAME "Country",
                               st.telephone_area_code "Telephone Area Code",
                               st.local_business_customer_name
                                              "Local Business Customer Name",
                               addr.room "Room", addr.FLOOR "Floor",

                               --added Site_Type by Tanmayi on 9/9/2010
                               NULL "Site Type",
                               -- Added by Sujana on 20/10/2010 as part of defect 83494
                               CAST(st.bfg_address_id as NUMBER) "BFG Address ID",
                               CAST(st.bfg_subloc_id  as NUMBER) "BFG Sub Location ID",
                               --
                               st.phone_number "Phone Number" -- Added on 15/2/2011 as part of R11 iVPN
                        FROM   site st LEFT OUTER JOIN address addr
                               ON st.address_id = addr.address_id
                               LEFT OUTER JOIN country cntry
                               ON addr.country_id = cntry.country_id
                         WHERE UPPER (cntry.NAME) LIKE
                                                    UPPER (TRIM (in_keyword))
                           AND st.customer_id = v_cust_id
                           AND (   st.NAME IS NOT NULL
                                OR st.main_site_flag !=
                                              pkg_constants.con_activeflag_yes
                               )
                           --Added by Tanmayi on 24/08/2010
                           AND (expedio_site_id IS NULL
                                AND bfg_site_id IS NULL
                               )
                        --- ORDER BY st.site_id
                        UNION
                        -- Added by Sujana on 20/7/2010 as part of R5 - Start
                        --OPEN OUT_EXP_SITE FOR
                        SELECT bfg_site_id "BFG Site ID",
                               expedio_site_id "Expedio Site ID",
                               NVL (NULL, -1) "SQE Site ID",
                               site_name "Site Name",
                               sit_reference "Customer Report Site Name",
                               street_number "Building Number",
                               premise_name "Address1",
                               street_name "Address2", city "City",
                               county "County", county "State Province",
                               post_code "Zip Post Code", country "Country",
                               telephone_area_code "Telephone Area Code",
                               bfg_cus_name "Local Business Customer Name",
                               room "Room", FLOOR "Floor",
                               --added Site_Type by Tanmayi on 9/9/2010
                               sit_type "Site Type",
                               -- Added by Sujana on 20/10/2010 as part of defect 83494
                               bfg_address_id "BFG Address ID",
                               bfg_location_id "BFG Sub Location ID",
                               --
                               phone_number "Phone Number" -- Added on 15/2/2011 as part of R11 iVPN
                          FROM ivpn_bfg_expedio_sites
                         WHERE bfg_customer_id = in_bfgcustomerid
                           AND UPPER (country) LIKE UPPER (TRIM (in_keyword));
             COMMIT;

                  -- Added by Sujana on 20/7/2010 as part of R5 - End
                  END;
               -- Commented as part of R5
               /*WHEN 'ZIP CODE'
               THEN
                  BEGIN
                     OPEN out_site FOR
                        SELECT   st.site_id "Site ID", st.NAME "Site Name",
                                 addr.address_line1 "Address1",
                                 addr.address_line2 "Address2",
                                 addr.city "City", addr.state "State",
                                 cntry.NAME "Country",
                                 addr.post_zip_code "Zip/Post Code",
                                 addr.state_code "State Code"
                            FROM site st LEFT OUTER JOIN address addr
                                 ON st.address_id = addr.address_id
                                 LEFT OUTER JOIN country cntry
                                 ON addr.country_id = cntry.country_id
                           WHERE UPPER (addr.post_zip_code) LIKE
                                                           UPPER (in_keyword)
                             AND st.customer_id = in_bfgcustomerid
                             AND (   st.NAME IS NOT NULL
                                  OR st.main_site_flag !=
                                              pkg_constants.con_activeflag_yes
                                 )
                        order by st.site_id;
                  END; */
               -- Commented as part of R5
            ELSE
                  BEGIN
                     IF (in_searchby IS NULL)
                     THEN
                        OPEN out_site FOR
                           SELECT
                                  /* Modified the select clause as part of Re-eng R5 */
                                  st.bfg_site_id "BFG Site ID",
                                  st.expedio_site_id "Expedio Site ID",
                                  st.site_id "SQE Site ID",
                                  st.NAME "Site Name",
                                  st.customer_report_site_name
                                                 "Customer Report Site Name",
                                  addr.building_number "Building Number",
                                  addr.address_line1 "Address1",
                                  addr.address_line2 "Address2",
                                  addr.city "City", addr.county "County",
                                  addr.state "State Province",
                                  addr.post_zip_code "Zip Post Code",
                                  cntry.NAME "Country",
                                  st.telephone_area_code
                                                       "Telephone Area Code",
                                  st.local_business_customer_name
                                              "Local Business Customer Name",
                                  addr.room "Room", addr.FLOOR "Floor",

                                  --added Site_Type by Tanmayi on 9/9/2010
                                  NULL "Site Type",

                                  -- Added by Sujana on 20/10/2010 as part of defect 83494
                                  CAST(st.bfg_address_id as NUMBER) "BFG Address ID",
                                  CAST(st.bfg_subloc_id  as NUMBER) "BFG Sub Location ID",
                                  --
                                  st.phone_number "Phone Number" -- Added on 15/2/2011 as part of R11 iVPN
                           FROM   site st LEFT OUTER JOIN address addr
                                  ON st.address_id = addr.address_id
                                  LEFT OUTER JOIN country cntry
                                  ON addr.country_id = cntry.country_id
                            WHERE st.customer_id = v_cust_id
                              -- Modified as part of R5
                              AND (   st.NAME IS NOT NULL
                                   OR st.main_site_flag !=
                                              pkg_constants.con_activeflag_yes
                                  )
                              --Added by Tanmayi on 24/08/2010
                              AND (    expedio_site_id IS NULL
                                   AND bfg_site_id IS NULL
                                  )
                           --- ORDER BY st.site_id
                           UNION
                           -- Added by Sujana on 20/7/2010 as part of R5 - Start
                           --OPEN OUT_EXP_SITE FOR
                           SELECT bfg_site_id "BFG Site ID",
                                  expedio_site_id "Expedio Site ID",
                                  NVL (NULL, -1) "SQE Site ID",
                                  site_name "Site Name",
                                  sit_reference "Customer Report Site Name",
                                  street_number "Building Number",
                                  premise_name "Address1",
                                  street_name "Address2", city "City",
                                  county "County", county "State Province",
                                  post_code "Zip Post Code",
                                  country "Country",
                                  telephone_area_code "Telephone Area Code",
                                  bfg_cus_name "Local Business Customer Name",
                                  room "Room", FLOOR "Floor",
                                  --added Site_Type by Tanmayi on 9/9/2010
                                  sit_type "Site Type",
                                  -- Added by Sujana on 20/10/2010 as part of defect 83494
                                  bfg_address_id "BFG Address ID",
                                  bfg_location_id "BFG Sub Location ID",
                                  --
                                  phone_number "Phone Number" -- Added on 15/2/2011 as part of R11 iVPN
                             FROM ivpn_bfg_expedio_sites
                            WHERE bfg_customer_id = in_bfgcustomerid;

                            COMMIT;
                     -- Added by Sujana on 20/7/2010 as part of R5 - End
                     END IF;
                  END;
            END CASE;
         END;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         DBMS_OUTPUT.put_line ('Exception');
         -- Added by Sujana on 23/11/2010 as part of exception handling
         v_sql_errm := substr(SQLERRM,1,150);
         v_sql_code := SQLCODE;
         PKG_COMMON.spi_error_log(
                                  NULL,
                                  NULL,
                                  NULL,
                                  NULL,
                                  'PKG_SITE_R5',
                                  'SPS_SITE',
                                  v_sql_code,
                                  v_sql_errm
                                 );
   END;


   PROCEDURE spd_quote_site (
      in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
      in_siteid          IN       VARCHAR2,
      in_modifiedby      IN       quote_site.modified_by%TYPE,
      out_status         OUT      NUMBER,
      out_errmsg         OUT      VARCHAR2
   )
   AS
      CURSOR c_siteid
      IS
         SELECT *
           FROM TABLE
                     (CAST (pkg_common.fn_splitdata (in_siteid, '~') AS varchar2_ntt
                           )
                     );

      v_cntqoutesite   NUMBER;
      v_cntaccqref     NUMBER;
      v_cntlineitem    NUMBER;
      v_cntcpeqref     NUMBER;
      v_siteid         site.site_id%TYPE;
      v_quotesiteid    quote_site.quote_site_id%TYPE;

   BEGIN
      OPEN c_siteid;

      LOOP
         FETCH c_siteid
          INTO v_siteid;

         EXIT WHEN c_siteid%NOTFOUND;

         SELECT COUNT (*)
           INTO v_cntqoutesite
           FROM quote_site
          WHERE quote_header_id = in_quoteheaderid
            AND site_id = v_siteid
            AND active = pkg_constants.con_activeflag_yes;

         SELECT COUNT (*)
           INTO v_cntlineitem
           FROM line_item
          WHERE quote_header_id = in_quoteheaderid
            AND site_id = v_siteid
            AND active = pkg_constants.con_activeflag_yes;

         IF (v_cntqoutesite != 0)
         THEN
            BEGIN
               SELECT quote_site_id
                 INTO v_quotesiteid
                 FROM quote_site
                WHERE quote_header_id = in_quoteheaderid
                  AND site_id = v_siteid
                  AND active = pkg_constants.con_activeflag_yes;

               SELECT COUNT (*)
                 INTO v_cntaccqref
                 FROM access_qref
                WHERE quote_site_id = v_quotesiteid;

               SELECT COUNT (*)
                 INTO v_cntcpeqref
                 FROM cpe_qref
                WHERE quote_site_id = v_quotesiteid;

               IF (v_cntaccqref != 0)
               THEN
                  BEGIN
                     --delete access_caveat and access_qref
                     DELETE FROM access_caveat
                           WHERE access_qref_id IN (
                                          SELECT access_qref_id
                                            FROM access_qref
                                           WHERE quote_site_id =
                                                                v_quotesiteid);

                     DELETE FROM access_qref
                           WHERE quote_site_id = v_quotesiteid;
                  END;
               END IF;

               IF (v_cntcpeqref != 0)
               THEN
                  BEGIN
                     --delete cpe_caveat and cpe_qref
                     DELETE FROM cpe_caveat
                           WHERE cpe_qref_id IN (
                                          SELECT cpe_qref_id
                                            FROM cpe_qref
                                           WHERE quote_site_id =
                                                                v_quotesiteid);

                     DELETE FROM cpe_qref
                           WHERE quote_site_id = v_quotesiteid;
                  END;
               END IF;
            END;
         END IF;

         IF (v_cntlineitem != 0)
         THEN
            BEGIN
               --update line_item_detail and price_line_item_detail
               UPDATE line_item_detail
                  SET active = pkg_constants.con_activeflag_no,
                      modified_by = in_modifiedby,
                      modified_date = SYSDATE
                WHERE line_item_id IN (
                         SELECT line_item_id
                           FROM line_item
                          WHERE quote_header_id = in_quoteheaderid
                            AND site_id = v_siteid
                            AND active = pkg_constants.con_activeflag_yes);

               UPDATE price_line_item_detail
                  SET active = pkg_constants.con_activeflag_no,
                      modified_by = in_modifiedby,
                      modified_date = SYSDATE
                WHERE line_item_id IN (
                         SELECT line_item_id
                           FROM line_item
                          WHERE quote_header_id = in_quoteheaderid
                            AND site_id = v_siteid
                            AND active = pkg_constants.con_activeflag_yes);
            END;
         END IF;

         --update line_item and quote_site
         UPDATE line_item
            SET active = pkg_constants.con_activeflag_no,
                modified_by = in_modifiedby,
                modified_date = SYSDATE
          WHERE quote_header_id = in_quoteheaderid AND site_id = v_siteid;

         UPDATE quote_site
            SET active = pkg_constants.con_activeflag_no,
                modified_by = in_modifiedby,
                modified_date = SYSDATE
          WHERE quote_header_id = in_quoteheaderid AND site_id = v_siteid;

         --Added by Tanmayi on 03/08/2010 for R5 product_selection
         UPDATE product_selection
            SET active = pkg_constants.con_activeflag_no,
                modified_by = in_modifiedby,
                modified_date = SYSDATE
          WHERE quote_header_id = in_quoteheaderid
            AND site_id = v_siteid
            AND active = pkg_constants.con_activeflag_yes;

         --added by tanmayi on 03/08/2010 for R5 product_selection modification
         UPDATE product_selection
            SET active = pkg_constants.con_activeflag_no,
                modified_by = in_modifiedby,
                modified_date = SYSDATE
          WHERE quote_header_id = in_quoteheaderid AND site_id = v_siteid;

          --update bid_request_status this code is added on 24-Mar-2011 by Nagendra
          UPDATE bid_request_status
             SET active = pkg_constants.con_activeflag_no,
                 modified_by = in_modifiedby,
                 modified_date = SYSDATE
           WHERE quote_header_id = in_quoteheaderid AND site_id = v_siteid;

      END LOOP;

      out_status := pkg_constants.con_status_success;
--      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;

         -- Added by Sujana on 23/11/2010 as part of exception handling
         out_errmsg := substr(SQLERRM,1,150);
         v_sql_code := SQLCODE;
         PKG_COMMON.spi_error_log(
                                  NULL,
                                  in_quoteheaderid,
                                  in_siteid,
                                  NULL,
                                  'PKG_SITE_R5',
                                  'SPD_QUOTE_SITE',
                                  v_sql_code,
                                  out_errmsg
                                 );
   END;

   PROCEDURE spi_quote_site (
      in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
      in_siteid          IN       VARCHAR2,
      in_createdby       IN       quote_site.created_by%TYPE,
      out_status         OUT      NUMBER,
      out_errmsg         OUT      VARCHAR2
   )
   AS
      CURSOR c_siteid
      IS
         SELECT *
           FROM TABLE
                     (CAST (pkg_common.fn_splitdata (in_siteid, '~') AS varchar2_ntt
                           )
                     );

      --v_quoteheaderid   quote_header.quote_header_id%TYPE;
      v_rowcount   NUMBER;
      v_siteid     site.site_id%TYPE;

   BEGIN
      OPEN c_siteid;

      LOOP
         FETCH c_siteid
          INTO v_siteid;

         EXIT WHEN c_siteid%NOTFOUND;

         SELECT COUNT (*)
           INTO v_rowcount
           FROM quote_site
          WHERE quote_header_id = in_quoteheaderid
            AND site_id = v_siteid
            AND active = pkg_constants.con_activeflag_yes;

         IF (v_rowcount = 0)
         THEN
            BEGIN
               INSERT INTO quote_site
                           (quote_site_id, site_id,
                            quote_header_id,
                            active, created_by,
                            created_date
                           )
                    VALUES (quote_site_id.NEXTVAL, v_siteid,
                            in_quoteheaderid,
                            pkg_constants.con_activeflag_yes, in_createdby,
                            SYSDATE
                           );
            END;
         END IF;

         --return status as 1 irrespecitve of new insert or duplicate
         out_status := pkg_constants.con_status_success;
--         COMMIT;
      END LOOP;
   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;

         -- Added by Sujana on 23/11/2010 as part of exception handling
         out_errmsg := substr(SQLERRM,1,150);
         v_sql_code := SQLCODE;
         PKG_COMMON.spi_error_log(
                                  NULL,
                                  in_quoteheaderid,
                                  in_siteid,
                                  NULL,
                                  'PKG_SITE_R5',
                                  'SPD_QUOTE_SITE',
                                  v_sql_code,
                                  out_errmsg
                                 );
   END;

   PROCEDURE spi_quote_site_r5 (
      --added by tanmayi on 29/07/2010 for bfg and expedio add to quote
      in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
      in_siteid          IN       VARCHAR2,                     --sqe site ids
      in_bfgsite         IN       VARCHAR2,                -- bfg site details
      in_expsite         IN       VARCHAR2,             --expedio site details
      in_createdby       IN       NUMBER,
      out_status         OUT      NUMBER,
      out_errmsg         OUT      VARCHAR2
   )
   AS
      CURSOR c_siteid
      IS
         SELECT *
           FROM TABLE
                     (CAST (pkg_common.fn_splitdata (in_siteid, '~') AS varchar2_ntt
                           )
                     );

      CURSOR c_bfgsite
      IS
         SELECT *
           FROM TABLE
                    (CAST (pkg_common.fn_splitdata (in_bfgsite, '~') AS varchar2_ntt
                          )
                    );

      CURSOR c_expsite
      IS
         SELECT *
           FROM TABLE
                    (CAST (pkg_common.fn_splitdata (in_expsite, '~') AS varchar2_ntt
                          )
                    );

      v_rowcount       NUMBER;
      v_siteid         site.site_id%TYPE;
      v_row            VARCHAR2 (4000);
      v_tbfgsiteid     t_bfgsiteid;
      v_tbfgsitename   t_bfgsitename;
      v_tbfgcity       t_bfgcity;
      v_tbfgcntry      t_bfgcountry;
      v_texpsiteid     t_expsiteid;
      v_texpsitename   t_expsitename;
      v_texpcity       t_expcity;
      v_texpcntry      t_expcountry;
      v_fldcnt         NUMBER;
      v_i              NUMBER                    := 0;
      v_count          NUMBER;
      v_bfgsiteid      site.site_id%TYPE;
      v_bfgaddrid      site.address_id%TYPE;
      v_bfgcntryid     address.country_id%TYPE;
      v_expsiteid      site.site_id%TYPE;
      v_expaddrid      site.address_id%TYPE;
      v_expcntryid     address.country_id%TYPE;

   BEGIN
      IF (in_siteid IS NOT NULL)
      THEN
         BEGIN
            OPEN c_siteid;

            LOOP
               FETCH c_siteid
                INTO v_siteid;

               EXIT WHEN c_siteid%NOTFOUND;

               --insert sqe site_id into quote_site after duplication check
               SELECT COUNT (*)
                 INTO v_rowcount
                 FROM quote_site
                WHERE quote_header_id = in_quoteheaderid
                  AND site_id = v_siteid
                  AND active = pkg_constants.con_activeflag_yes;

               IF (v_rowcount = 0)
               THEN
                  BEGIN
                     INSERT INTO quote_site
                                 (quote_site_id, site_id,
                                  quote_header_id,
                                  active,
                                  created_by, created_date
                                 )
                          VALUES (quote_site_id.NEXTVAL, v_siteid,
                                  in_quoteheaderid,
                                  pkg_constants.con_activeflag_yes,
                                  in_createdby, SYSDATE
                                 );
                  END;
               END IF;
            END LOOP;

            CLOSE c_siteid;
         END;
      END IF;

      IF in_bfgsite IS NOT NULL
      THEN
         BEGIN
            OPEN c_bfgsite;

            LOOP
               FETCH c_bfgsite
                INTO v_row;

               EXIT WHEN c_bfgsite%NOTFOUND;

               SELECT pkg_common.fn_countbulkupload (v_row, '#')
                 INTO v_fldcnt
                 FROM DUAL;

               IF (v_fldcnt != 3)           --total 4 parameters in in_bfgsite
               THEN
                  BEGIN
                     out_status := pkg_constants.con_status_failure;
                     out_errmsg := 'Invalid number of BFG site details';
                  END;
               ELSE
                  BEGIN
                     v_i := v_i + 1;
                     v_tbfgsiteid (v_i) :=
                               SUBSTR (v_row, 1, INSTR (v_row, '#', 1, 1) - 1);
                     v_row :=
                        SUBSTR (v_row,
                                INSTR (v_row, '#', 1, 1) + 1,
                                LENGTH (v_row) - INSTR (v_row, '#', 1, 1)
                               );
                     v_tbfgsitename (v_i) :=
                                SUBSTR (v_row, 1, INSTR (v_row, '#', 1, 1) - 1);
                     v_row :=
                        SUBSTR (v_row,
                                INSTR (v_row, '#', 1, 1) + 1,
                                LENGTH (v_row) - INSTR (v_row, '#', 1, 1)
                               );
                     v_tbfgcity (v_i) :=
                                SUBSTR (v_row, 1, INSTR (v_row, '#', 1, 1) - 1);
                     v_row :=
                        SUBSTR (v_row,
                                INSTR (v_row, '#', 1, 1) + 1,
                                LENGTH (v_row) - INSTR (v_row, '#', 1, 1)
                               );
                     v_tbfgcntry (v_i) := v_row;
                  END;
               END IF;                                     --  end fldcnt != 3
            END LOOP;                                        --end cursor loop

            CLOSE c_bfgsite;

            FOR i IN v_tbfgsiteid.FIRST .. v_tbfgsiteid.LAST
            LOOP
               --check if bfg_site_id already present in site
               SELECT COUNT (*)
                 INTO v_count
                 FROM site
                WHERE bfg_site_id = TO_NUMBER (v_tbfgsiteid (i));

               IF (v_count = 0)
               THEN
                  BEGIN
                     SELECT country_id
                       INTO v_bfgcntryid
                       FROM country
                      WHERE UPPER (REPLACE (NAME, '''')) =
                                       UPPER (REPLACE (v_tbfgcntry (i), ''''));

                     INSERT INTO address
                                 (address_id, country_id,
                                  city, created_by, created_date
                                 )
                          VALUES (address_id.NEXTVAL, v_bfgcntryid,
                                  v_tbfgcity (i), in_createdby, SYSDATE
                                 )
                       RETURNING address_id
                            INTO v_bfgaddrid;

                     INSERT INTO site
                                 (site_id, NAME,
                                  address_id, bfg_site_id,
                                  bfg_site_name, created_by, created_date
                                 )
                          VALUES (site_id.NEXTVAL, v_tbfgsitename (i),
                                  v_bfgaddrid, v_tbfgsiteid (i),
                                  v_tbfgsitename (i), in_createdby, SYSDATE
                                 )
                       RETURNING site_id
                            INTO v_bfgsiteid;
                  END;
               ELSE
                  --select sqe site_id for existing bfg_site_id
                  SELECT site_id
                    INTO v_bfgsiteid
                    FROM site
                   WHERE bfg_site_id = TO_NUMBER (v_tbfgsiteid (i));
               END IF;

               --check if   bfg_site_id is added to quote
               SELECT COUNT (*)
                 INTO v_rowcount
                 FROM quote_site
                WHERE quote_header_id = in_quoteheaderid
                  AND site_id = v_bfgsiteid
                  AND active = pkg_constants.con_activeflag_yes;

               IF (v_rowcount = 0)
               THEN
                  INSERT INTO quote_site
                              (quote_site_id, site_id,
                               quote_header_id,
                               active,
                               created_by, created_date
                              )
                       VALUES (quote_site_id.NEXTVAL, v_bfgsiteid,
                               in_quoteheaderid,
                               pkg_constants.con_activeflag_yes,
                               in_createdby, SYSDATE
                              );
               END IF;
            END LOOP;
         END;
      END IF;

      v_i := 0;
      v_row := '';

      IF in_expsite IS NOT NULL
      THEN
         BEGIN
            OPEN c_expsite;

            LOOP
               FETCH c_expsite
                INTO v_row;

               EXIT WHEN c_expsite%NOTFOUND;

               SELECT pkg_common.fn_countbulkupload (v_row, '#')
                 INTO v_fldcnt
                 FROM DUAL;

               IF (v_fldcnt != 3)           --total 4 parameters in in_expsite
               THEN
                  BEGIN
                     out_status := pkg_constants.con_status_failure;
                     out_errmsg :=
                           out_errmsg
                        || ' Invalid number of Expedio site details';
                  END;
               ELSE
                  BEGIN
                     v_i := v_i + 1;
                     v_texpsiteid (v_i) :=
                               SUBSTR (v_row, 1, INSTR (v_row, '#', 1, 1) - 1);
                     v_row :=
                        SUBSTR (v_row,
                                INSTR (v_row, '#', 1, 1) + 1,
                                LENGTH (v_row) - INSTR (v_row, '#', 1, 1)
                               );
                     v_texpsitename (v_i) :=
                                SUBSTR (v_row, 1, INSTR (v_row, '#', 1, 1) - 1);
                     v_row :=
                        SUBSTR (v_row,
                                INSTR (v_row, '#', 1, 1) + 1,
                                LENGTH (v_row) - INSTR (v_row, '#', 1, 1)
                               );
                     v_texpcity (v_i) :=
                                SUBSTR (v_row, 1, INSTR (v_row, '#', 1, 1) - 1);
                     v_row :=
                        SUBSTR (v_row,
                                INSTR (v_row, '#', 1, 1) + 1,
                                LENGTH (v_row) - INSTR (v_row, '#', 1, 1)
                               );
                     v_texpcntry (v_i) := v_row;
                  END;
               END IF;                                     --  end fldcnt != 3
            END LOOP;                                        --end cursor loop

            CLOSE c_expsite;

            FOR i IN v_texpsiteid.FIRST .. v_texpsiteid.LAST
            LOOP
               --check if expedio_site_id already exists in site
               SELECT COUNT (*)
                 INTO v_count
                 FROM site
                WHERE UPPER (expedio_site_id) = UPPER (v_texpsiteid (i));

               IF (v_count = 0)
               THEN
                  BEGIN
                     SELECT country_id
                       INTO v_expcntryid
                       FROM country
                      WHERE UPPER (REPLACE (NAME, '''')) =
                                       UPPER (REPLACE (v_texpcntry (i), ''''));

                     INSERT INTO address
                                 (address_id, country_id,
                                  city, created_by, created_date
                                 )
                          VALUES (address_id.NEXTVAL, v_expcntryid,
                                  v_texpcity (i), in_createdby, SYSDATE
                                 )
                       RETURNING address_id
                            INTO v_expaddrid;

                     INSERT INTO site
                                 (site_id, NAME,
                                  address_id, expedio_site_id,
                                  created_by, created_date
                                 )
                          VALUES (site_id.NEXTVAL, v_texpsitename (i),
                                  v_expaddrid, v_texpsiteid (i),
                                  in_createdby, SYSDATE
                                 )
                       RETURNING site_id
                            INTO v_expsiteid;
                  END;
               ELSE
                  --select sqe site_id for existing bfg_site_id
                  SELECT site_id
                    INTO v_expsiteid
                    FROM site
                   WHERE UPPER (expedio_site_id) = UPPER (v_texpsiteid (i));
               END IF;

               --check if expedio_site_id is added to quote
               SELECT COUNT (*)
                 INTO v_rowcount
                 FROM quote_site
                WHERE quote_header_id = in_quoteheaderid
                  AND site_id = v_expsiteid
                  AND active = pkg_constants.con_activeflag_yes;

               IF (v_rowcount = 0)
               THEN
                  INSERT INTO quote_site
                              (quote_site_id, site_id,
                               quote_header_id,
                               active,
                               created_by, created_date
                              )
                       VALUES (quote_site_id.NEXTVAL, v_expsiteid,
                               in_quoteheaderid,
                               pkg_constants.con_activeflag_yes,
                               in_createdby, SYSDATE
                              );
               END IF;
            END LOOP;
         END;
      END IF;

      --return 1 only if out_status has not been set to 0 due to invalid no. of parameters
      IF (out_status IS NULL)
      THEN
         out_status := pkg_constants.con_status_success;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;

         -- Added by Sujana on 23/11/2010 as part of exception handling
         out_errmsg := substr(SQLERRM,1,150);
         v_sql_code := SQLCODE;
         PKG_COMMON.spi_error_log(
                                  NULL,
                                  in_quoteheaderid,
                                  in_siteid,
                                  NULL,
                                  'PKG_SITE_R5',
                                  'SPI_QUOTE_SITE_R5',
                                  v_sql_code,
                                  out_errmsg
                                 );

   end;

     --Begins , added new sp for SSL site search for MX on 13/08/10
   PROCEDURE sps_ssl_site (
      in_bfgcustomerid   IN       customer.bfg_customer_id%TYPE,
      in_searchby        IN       VARCHAR2,
      in_country        IN       VARCHAR2,
      in_keyword         IN OUT   VARCHAR2,
      out_site           OUT      sys_refcursor
   )
   AS
      v_cust_id      NUMBER (10);
      v_sql_code     NUMBER;
      v_sql_errm     VARCHAR2(150);
   begin
 open out_site for
    SELECT
        NVL(DECODE(ibes.bfg_site_id,NULL,ibes.expedio_site_id),ibes.bfg_site_id) AS "BFG Site ID",
        ibes.site_name                                                           AS "Site Name",
        ibes.premise_name                                                        AS "Premise Name",
        ibes.sub_premise                                                         AS "Sub Premise",
        ibes.street_name                                                         AS "Street Name",
        ibes.street_number                                                       AS "Street Number",
        ibes.city                                                                AS "City",
        ibes.country                                                             AS "Country",
        ibes.post_code                                                           AS "Post Code",
        ibes.county                                                              AS "County"
      FROM ivpn_bfg_expedio_sites ibes,
           ivpn_bfg_expedio_contacts ibec
      WHERE (ibes.bfg_site_id  = ibec.bfg_site_id
          OR IBES.expedio_SITE_ID  = IBEC.expedio_SITE_ID)
      AND ibes.bfg_customer_id = in_bfgcustomerid
      AND ibec.ROLE            = 'Site Primary Contact'
      AND UPPER (ibes.country) LIKE UPPER (TRIM (in_country))
      AND UPPER (IBES.SITE_NAME) LIKE NVL(UPPER (TRIM (IN_KEYWORD)),'%')
      AND sit_type <> 'CENTRAL'
      ORDER BY ibes.county;

   EXCEPTION
      WHEN OTHERS
      THEN
         DBMS_OUTPUT.put_line ('Exception');
         v_sql_errm := substr(SQLERRM,1,150);
         v_sql_code := SQLCODE;
         PKG_COMMON.spi_error_log(
                                  NULL,
                                  NULL,
                                  NULL,
                                  in_country,
                                  'in_bfgcustomerid'||in_bfgcustomerid||'in_country'||in_country||'in_keyword'||in_keyword,
                                  'PKG_SITE_R5.SPS_SSL_SITE',
                                  v_sql_code,
                                  v_sql_errm
                                 );
   END;
   --Ends ,added new sp for SSL site search for MX on 13/08/10

PROCEDURE spi_quotesite_bfgexpedio_r5 (
      in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
      in_sitedetails     IN       site_bfgexpedio_tab,
      in_createdby       IN       site.created_by%TYPE,
      out_batchid        OUT      site.batch_id%TYPE,
      out_errmsg         OUT      VARCHAR2
   )
   AS
      v_batchid      site.batch_id%TYPE;
      v_rowcount     NUMBER;
      v_countryid    address.country_id%TYPE;
      v_cntrycount   NUMBER;
      v_kgiflag      NUMBER                    := 1;
      v_kgitype      VARCHAR2 (100);
      v_expaddrid    site.address_id%TYPE;
      v_expsiteid    site.site_id%TYPE;
      v_bfgaddrid    site.address_id%TYPE;
      v_bfgsiteid    site.site_id%TYPE;
      v_currsite     site.NAME%TYPE;
      v_customerid   site.customer_id%TYPE;
      v_addressid    site.address_id%TYPE;

   BEGIN
      INSERT INTO site_bulk_upload
                  (batch_id, created_by, created_date
                  )
           VALUES (batch_id.NEXTVAL, in_createdby, SYSDATE
                  )
        RETURNING batch_id
             INTO v_batchid;

      out_batchid := v_batchid;

--      COMMIT;

      --added customer_id by Tanmayi on 24/08/2010
      SELECT qt.customer_id
        INTO v_customerid
        FROM quote_header qh, quote qt
       WHERE qh.quote_header_id = in_quoteheaderid
         AND qh.quote_id = qt.quote_id;

      FOR i IN in_sitedetails.FIRST .. in_sitedetails.LAST
      LOOP
         v_currsite := in_sitedetails (i).site_name;
         v_kgiflag := 1;

         IF (
--            in_sitedetails (i).site_id IS NOT NULL
--             OR
             in_sitedetails (i).site_id <> 0)
         --if the input is sqe_site_id
         THEN
            BEGIN
               SELECT COUNT (*)
                 INTO v_rowcount
                 FROM quote_site
                WHERE site_id = in_sitedetails (i).site_id
                  AND quote_header_id = in_quoteheaderid
                  AND active = pkg_constants.con_activeflag_yes;

               IF (v_rowcount = 0)
               THEN
                  BEGIN
                     INSERT INTO quote_site
                                 (quote_site_id,
                                  site_id,
                                  quote_header_id,
                                  active,
                                  created_by, created_date
                                 )
                          VALUES (quote_site_id.NEXTVAL,
                                  in_sitedetails (i).site_id,
                                  in_quoteheaderid,
                                  pkg_constants.con_activeflag_yes,
                                  in_createdby, SYSDATE
                                 );

                     --insert into site log table
                     INSERT INTO site_log
                                 (site_log_id, batch_id,
                                  site_name,
                                  status,
                                  created_by, created_date
                                 )
                          VALUES (site_log_id.NEXTVAL, v_batchid,
                                  SUBSTR (v_currsite, 1, 100),
                                  pkg_constants.con_status_success,
                                  in_createdby, SYSDATE
                                 );
                  END;
               ELSE
                  BEGIN
                     --insert into site_log table for duplicate entry
                     INSERT INTO site_log
                                 (site_log_id, batch_id,
                                  site_name,
                                  status,
                                  reason,
                                  created_by, created_date
                                 )
                          VALUES (site_log_id.NEXTVAL, v_batchid,
                                  SUBSTR (v_currsite, 1, 100),
                                  pkg_constants.con_status_duplicate,
                                  'Site already exists for Quote, updated bfg_subloc_id and bfg_address_id',
                                  in_createdby, SYSDATE
                                 );

                     /* added below update site for defect 86705(R9 IVPN2) */
                    /* UPDATE site
                     SET bfg_subloc_id = in_sitedetails (i).bfg_subloc_id,
                         bfg_address_id = in_sitedetails (i).bfg_address_id,
                         phone_number   = in_sitedetails (i).phone_number, -- Added on 17/3/2011

                     WHERE site_id = in_sitedetails (i).site_id;*/
                  /* Fixed for defect  number 86320(R7 Defect) */
                  SELECT address_id
                  INTO v_addressid
                  FROM site s
                  WHERE site_id =
                  in_sitedetails (i).site_id;
                /*Changes done for defects 3751,2578 - on 5th April 2011. changes done by Jay changes start*/
                  UPDATE site
                    set name = IN_SITEDETAILS (I).SITE_NAME,
                      ADDRESS_ID =v_addressid,
                      customer_id = v_customerid,
                      expedio_site_id              = in_sitedetails (i).expedio_site_id,
                      telephone_area_code          = in_sitedetails (i).tele_area_code,
                      customer_report_site_name    = in_sitedetails (i).cust_repsitename,
                      local_business_customer_name = in_sitedetails (i).local_business_custname,
                      created_by                   = in_createdby,
                      created_date                 = SYSDATE,
                      main_site_flag               = DECODE(UPPER (in_sitedetails (i).site_type ), 'CENTRAL', 'Y', NULL ),
                      bfg_address_id               = in_sitedetails (i).bfg_address_id,
                      bfg_subloc_id                = in_sitedetails (i).bfg_subloc_id,
                      PHONE_NUMBER                 = IN_SITEDETAILS (I).PHONE_NUMBER
                  WHERE site_id                  = in_sitedetails (i).site_id;


                  BEGIN
                  SELECT country_id
                       INTO v_countryid
                       FROM country
                      WHERE UPPER (REPLACE (NAME, '''')) =
                               UPPER (REPLACE (in_sitedetails (i).country,
                                               ''''
                                              )
                                     );
                  exception when no_data_found then
                  v_countryid := null;
                  when others then
                  v_countryid := null;
                  ENd;


                  UPDATE address
                  SET country_id    = v_countryid,
                  building_number = in_sitedetails (i).building_no,
                  city            = in_sitedetails (i).city,
                  state           = in_sitedetails (i).state,
                  post_zip_code   = in_sitedetails (i).post_zip_code,
                  room            = in_sitedetails (i).room,
                  FLOOR           = in_sitedetails (i).FLOOR,
                  address_line2   = in_sitedetails (i).address_line2,
                  address_line1   = in_sitedetails (i).address_line1,
                  county          = in_sitedetails (i).county
                  where address_id  = v_addressid;
                 /* Fixed for defect  number 86320 ends */

                  v_countryid := null;

                  /* Fixed for defect  number 86320 ends */



                  END;
               END IF;                 --end if for quote_site duplicate check
            END;                                    -- end if sqe_site is null
         --  END IF;
         ELSIF (in_sitedetails (i).expedio_site_id IS NOT NULL)
         --if input is expedio_site_id
         THEN
            BEGIN
               SELECT COUNT (*)
                 INTO v_rowcount
                 FROM site
                WHERE expedio_site_id =
                                    TRIM (in_sitedetails (i).expedio_site_id);
                     --and customer_id=v_customerid;

               IF (v_rowcount = 0)
               THEN
                  BEGIN
                  IF in_sitedetails (i).Site_Type<>'CENTRAL' THEN
                     SELECT country_id
                       INTO v_countryid
                       FROM country
                      WHERE UPPER (REPLACE (NAME, '''')) =
                               UPPER (REPLACE (in_sitedetails (i).country,
                                               ''''
                                              )
                                     );

                     SELECT COUNT (*)
                       INTO v_cntrycount
                       FROM ppsr_owner.ppsr_kgi_data_v@dblink_ppsr
                      WHERE UPPER (REPLACE ("Country", '''')) =
                               UPPER (REPLACE (in_sitedetails (i).country,
                                               ''''
                                              )
                                     );

                     --kgi check
                     IF (v_cntrycount != 0)
                     THEN
                        BEGIN
                           --kgi check from PPSR
                           SELECT DISTINCT "Kgi Type"
                                      INTO v_kgitype
                                      FROM ppsr_owner.ppsr_kgi_data_v@dblink_ppsr
                                     WHERE UPPER (REPLACE ("Country", '''')) =
                                              UPPER
                                                 (REPLACE
                                                     (in_sitedetails (i).country,
                                                      ''''
                                                     )
                                                 );

                           IF (UPPER (v_kgitype) LIKE '%CITY%')
                           THEN
                              BEGIN
                                 IF (in_sitedetails (i).city IS NULL)
                                 THEN
                                    v_kgiflag := 0;
                                 END IF;
                              END;
                           END IF;

                           IF (UPPER (v_kgitype) LIKE '%POST CODE%')
                           THEN
                              BEGIN
                                 IF (in_sitedetails (i).post_zip_code IS NULL
                                    )
                                 THEN
                                    v_kgiflag := 0;
                                 END IF;
                              END;
                           END IF;

                           IF (   UPPER (v_kgitype) LIKE '%STREET NAME%'
                               OR UPPER (v_kgitype) LIKE '%STREET NUMBER%'
                              )
                           THEN
                              BEGIN
                                 IF (in_sitedetails (i).address_line1 IS NULL
                                    )
                                 THEN
                                    v_kgiflag := 0;
                                 END IF;
                              END;
                           END IF;

                           IF (UPPER (v_kgitype) LIKE '%TELEPHONE AREA CODE%'
                              )
                           THEN
                              BEGIN
                                 IF (in_sitedetails (i).tele_area_code IS NULL
                                    )
                                 THEN
                                    v_kgiflag := 0;
                                 END IF;
                              END;
                           END IF;

                           IF (UPPER (v_kgitype) LIKE '%DISTRICT%')
                           THEN
                              BEGIN
                                 IF (in_sitedetails (i).address_line2 IS NULL
                                    )
                                 THEN
                                    v_kgiflag := 0;
                                 END IF;
                              END;
                           END IF;
                        END;
                     END IF;
                     ELSE
                     v_kgiflag:=1;
                     END IF;


                     IF (v_kgiflag = 0)
                     THEN
                        BEGIN
                           -- out_status := pkg_constants.con_status_failure;
                           --insert into site_log table

                           out_errmsg :=
                                'KGI Error: ' || v_kgitype || ' is mandatory';

                           INSERT INTO site_log
                                       (site_log_id, batch_id,
                                        site_name,
                                        status,
                                        reason, created_by, created_date
                                       )
                                VALUES (site_log_id.NEXTVAL, v_batchid,
                                        SUBSTR (v_currsite, 1, 100),
                                        pkg_constants.con_status_failure,
                                        out_errmsg, in_createdby, SYSDATE
                                       );
                        END;
                     ELSE
                        BEGIN
                           INSERT INTO address
                                       (address_id, country_id,
                                        building_number,
                                        city,
                                        state,
                                        post_zip_code,
                                        room,
                                        FLOOR,
                                        address_line2,
                                        address_line1,
                                        county,
                                        created_by, created_date
                                       )
                                VALUES (address_id.NEXTVAL, v_countryid,
                                        in_sitedetails (i).building_no,
                                        in_sitedetails (i).city,
                                        in_sitedetails (i).state,
                                        in_sitedetails (i).post_zip_code,
                                        in_sitedetails (i).room,
                                        in_sitedetails (i).FLOOR,
                                        in_sitedetails (i).address_line2,
                                        in_sitedetails (i).address_line1,
                                        in_sitedetails (i).county,
                                        in_createdby, SYSDATE
                                       )
                             RETURNING address_id
                                  INTO v_expaddrid;

                           INSERT INTO site
                                       (site_id,
                                        NAME,
                                        address_id, customer_id,
                                        expedio_site_id,
                                        telephone_area_code,
                                        customer_report_site_name,
                                        local_business_customer_name,
                                        created_by, created_date,
                                        main_site_flag,
                                        -- Added by Sujana on 27/10/2010 as part of defect 83494
                                        bfg_address_id,
                                        bfg_subloc_id,
                                        phone_number  -- Added on 15/2/2011 as part of R11 iVPN2
                                       )
                                VALUES (site_id.NEXTVAL,
                                        in_sitedetails (i).site_name,
                                        v_expaddrid, v_customerid,
                                        trim(in_sitedetails (i).expedio_site_id),
                                        in_sitedetails (i).tele_area_code,
                                        in_sitedetails (i).cust_repsitename,
                                        in_sitedetails (i).local_business_custname,
                                        in_createdby, SYSDATE,
                                        --added central main site flag by Tanmayi on 9/9/2010 for Central site
                                        DECODE
                                           (UPPER (in_sitedetails (i).site_type
                                                  ),
                                            'CENTRAL', 'Y',
                                            NULL
                                           ),
                                        -- Added by Sujana on 27/10/2010 as part of defect 83494
                                        in_sitedetails (i).bfg_address_id,
                                        in_sitedetails (i).bfg_subloc_id,
                                        in_sitedetails (i).phone_number  -- Added on 15/2/2011 as part of R11 iVPN2
                                       )
                             RETURNING site_id
                                  INTO v_expsiteid;
                        END;
                     END IF;                                  --kgi_flag check
                  END;
               ELSE
                  BEGIN
                     SELECT site_id
                       INTO v_expsiteid
                       FROM site
                      WHERE expedio_site_id =
                                    trim (in_sitedetails (i).expedio_site_id);
                                    --and customer_id=v_customerid;
                  END;                   --if duplication check for quote_site

                  --Start R7 changes for defect id 83051 These chages done by Nagendra on 12-Nov-2010
                  SELECT address_id
                  INTO v_addressid
                  FROM site s
                  WHERE expedio_site_id =trim (in_sitedetails (i).expedio_site_id);
                   --and customer_id=v_customerid;

                  /*UPDATE address
                  SET FLOOR = in_sitedetails (i).FLOOR,
                        room = in_sitedetails (i).room,
                        address_line2 = in_sitedetails (i).address_line2,
                        state=in_sitedetails (i).state
                  WHERE address_id = v_addressid; */
                  /*Changes done for defects 3751,2578 - on 5th April 2011. changes done by Jay- Changes start*/

                  UPDATE address
                  SET building_number = in_sitedetails (i).building_no,
                  city            = in_sitedetails (i).city,
                  state           = in_sitedetails (i).state,
                  post_zip_code   = in_sitedetails (i).post_zip_code,
                  room            = in_sitedetails (i).room,
                  FLOOR           = in_sitedetails (i).FLOOR,
                  address_line2   = in_sitedetails (i).address_line2,
                  address_line1   = in_sitedetails (i).address_line1,
                  county          = in_sitedetails (i).county
                  where address_id  = v_addressid;

                  /* added below update site for defect 86705(R9 IVPN2) */
                  /* update site set
                     BFG_SUBLOC_ID = in_sitedetails (i).BFG_SUBLOC_ID,
                     BFG_ADDRESS_ID = in_sitedetails (i).BFG_Address_ID,
                     phone_number   = in_sitedetails (i).phone_number -- Added on 17/3/2011
                   where UPPER (expedio_site_id) =UPPER (in_sitedetails (i).expedio_site_id);*/

                    UPDATE site
                    set name = IN_SITEDETAILS (I).SITE_NAME,
                      ADDRESS_ID =v_addressid,
                      customer_id = v_customerid,
                      expedio_site_id              = in_sitedetails (i).expedio_site_id,
                      telephone_area_code          = in_sitedetails (i).tele_area_code,
                      customer_report_site_name    = in_sitedetails (i).cust_repsitename,
                      local_business_customer_name = in_sitedetails (i).local_business_custname,
                      created_by                   = in_createdby,
                      created_date                 = SYSDATE,
                      main_site_flag               = DECODE(UPPER (in_sitedetails (i).site_type ), 'CENTRAL', 'Y', NULL ),
                      bfg_address_id               = in_sitedetails (i).bfg_address_id,
                      bfg_subloc_id                = in_sitedetails (i).bfg_subloc_id,
                      PHONE_NUMBER                 = IN_SITEDETAILS (I).PHONE_NUMBER
                  WHERE expedio_site_id =trim (in_sitedetails (i).expedio_site_id);
                   --and customer_id=v_customerid;

                  /*Changes done for defects 3751,2578 - on 5th April 2011. changes done by Jay - Changes end*/
                  --End R7 changes

               END IF;

               IF (v_kgiflag <> 0)
               THEN
                  BEGIN
                     SELECT COUNT (*)
                       INTO v_rowcount
                       FROM quote_site
                      WHERE quote_header_id = in_quoteheaderid
                        AND site_id = v_expsiteid
                        AND active = pkg_constants.con_activeflag_yes;

                    --Start R7 changes for defect id 83051 These chages done by Nagendra on 12-Nov-2010
                  SELECT address_id
                  INTO v_addressid
                  FROM site s
                  WHERE expedio_site_id =trim (in_sitedetails (i).expedio_site_id);
                   --and customer_id=v_customerid;

                  /*Changes done for defects 3751,2578 - on 5th April 2011. changes done by Jay changes start*/
                  UPDATE address
                  SET building_number = in_sitedetails (i).building_no,
                  city            = in_sitedetails (i).city,
                  state           = in_sitedetails (i).state,
                  post_zip_code   = in_sitedetails (i).post_zip_code,
                  room            = in_sitedetails (i).room,
                  FLOOR           = in_sitedetails (i).FLOOR,
                  address_line2   = in_sitedetails (i).address_line2,
                  address_line1   = in_sitedetails (i).address_line1,
                  county          = in_sitedetails (i).county
                  WHERE address_id = v_addressid;

                  /* added below update site for defect 86705(R9 IVPN2) */
                   UPDATE site
                    set name = IN_SITEDETAILS (I).SITE_NAME,
                      ADDRESS_ID =v_addressid,
                      customer_id = v_customerid,
                      expedio_site_id              = in_sitedetails (i).expedio_site_id,
                      telephone_area_code          = in_sitedetails (i).tele_area_code,
                      customer_report_site_name    = in_sitedetails (i).cust_repsitename,
                      local_business_customer_name = in_sitedetails (i).local_business_custname,
                      created_by                   = in_createdby,
                      created_date                 = SYSDATE,
                      main_site_flag               = DECODE(UPPER (in_sitedetails (i).site_type ), 'CENTRAL', 'Y', NULL ),
                      bfg_address_id               = in_sitedetails (i).bfg_address_id,
                      bfg_subloc_id                = in_sitedetails (i).bfg_subloc_id,
                      PHONE_NUMBER                 = IN_SITEDETAILS (I).PHONE_NUMBER
                  where expedio_site_id =trim (in_sitedetails (i).expedio_site_id);
                   --and customer_id=v_customerid;
                  --End R7 changes
                  /*Changes done for defects 3751,2578 - on 5th April 2011. changes done by Jay- changes end*/
                     IF (v_rowcount = 0)
                     THEN
                        BEGIN
                           INSERT INTO quote_site
                                       (quote_site_id, site_id,
                                        quote_header_id,
                                        active,
                                        created_by, created_date
                                       )
                                VALUES (quote_site_id.NEXTVAL, v_expsiteid,
                                        in_quoteheaderid,
                                        pkg_constants.con_activeflag_yes,
                                        in_createdby, SYSDATE
                                       );

                           --insert into site log table
                           INSERT INTO site_log
                                       (site_log_id, batch_id,
                                        site_name,
                                        status,
                                        created_by, created_date
                                       )
                                VALUES (site_log_id.NEXTVAL, v_batchid,
                                        SUBSTR (v_currsite, 1, 100),
                                        pkg_constants.con_status_success,
                                        in_createdby, SYSDATE
                                       );
                        END;
                     ELSE
                        BEGIN
                           --insert into site_log table for duplicate entry of expedio_site_id
                           INSERT INTO site_log
                                       (site_log_id, batch_id,
                                        site_name,
                                        status,
                                        reason,
                                        created_by, created_date
                                       )
                                VALUES (site_log_id.NEXTVAL, v_batchid,
                                        SUBSTR (v_currsite, 1, 100),
                                        pkg_constants.con_status_duplicate,
                                        'Expedio Site already exists for Quote',
                                        in_createdby, SYSDATE
                                       );
                        END;
                     END IF;           --end if for quote_site duplicate check
                  END;
               END IF;                             --end if for kgi_flag check
            END;                          --end if expedio_site_id is not null
         --  END IF;

         /*********** bfg_site_details ***********/
         ELSIF (
--         in_sitedetails (i).bfg_site_id IS NOT NULL
--                OR
                in_sitedetails (i).bfg_site_id <> 0)
         --if input is bfg_site_id
         THEN
            BEGIN
               SELECT COUNT (*)
                 INTO v_rowcount
                 FROM site
                WHERE bfg_site_id = TO_NUMBER (in_sitedetails (i).bfg_site_id);
                 --and customer_id=v_customerid;

               IF (v_rowcount = 0)
               THEN
                  BEGIN
                  IF in_sitedetails (i).Site_Type<>'CENTRAL' THEN
                     SELECT country_id
                       INTO v_countryid
                       FROM country
                      WHERE UPPER (REPLACE (NAME, '''')) =
                               UPPER (REPLACE (in_sitedetails (i).country,
                                               ''''
                                              )
                                     );

                     SELECT COUNT (*)
                       INTO v_cntrycount
                       FROM ppsr_owner.ppsr_kgi_data_v@dblink_ppsr
                      WHERE UPPER (REPLACE ("Country", '''')) =
                               UPPER (REPLACE (in_sitedetails (i).country,
                                               ''''
                                              )
                                     );

                     --kgi check
                     IF (v_cntrycount != 0)
                     THEN
                        BEGIN
                           --kgi check from PPSR
                           SELECT DISTINCT "Kgi Type"
                                      INTO v_kgitype
                                      FROM ppsr_owner.ppsr_kgi_data_v@dblink_ppsr
                                     WHERE UPPER (REPLACE ("Country", '''')) =
                                              UPPER
                                                 (REPLACE
                                                     (in_sitedetails (i).country,
                                                      ''''
                                                     )
                                                 );

                           IF (UPPER (v_kgitype) LIKE '%CITY%')
                           THEN
                              BEGIN
                                 IF (in_sitedetails (i).city IS NULL)
                                 THEN
                                    v_kgiflag := 0;
                                 END IF;
                              END;
                           END IF;

                           IF (UPPER (v_kgitype) LIKE '%POST CODE%')
                           THEN
                              BEGIN
                                 IF (in_sitedetails (i).post_zip_code IS NULL
                                    )
                                 THEN
                                    v_kgiflag := 0;
                                 END IF;
                              END;
                           END IF;

                           IF (   UPPER (v_kgitype) LIKE '%STREET NAME%'
                               OR UPPER (v_kgitype) LIKE '%STREET NUMBER%'
                              )
                           THEN
                              BEGIN
                                 IF (in_sitedetails (i).address_line1 IS NULL
                                    )
                                 THEN
                                    v_kgiflag := 0;
                                 END IF;
                              END;
                           END IF;

                           IF (UPPER (v_kgitype) LIKE '%TELEPHONE AREA CODE%'
                              )
                           THEN
                              BEGIN
                                 IF (in_sitedetails (i).tele_area_code IS NULL
                                    )
                                 THEN
                                    v_kgiflag := 0;
                                 END IF;
                              END;
                           END IF;

                           IF (UPPER (v_kgitype) LIKE '%DISTRICT%')
                           THEN
                              BEGIN
                                 IF (in_sitedetails (i).address_line2 IS NULL
                                    )
                                 THEN
                                    v_kgiflag := 0;
                                 END IF;
                              END;
                           END IF;
                        END;
                     END IF;
                     ELSE
                     v_kgiflag:=1;
                     END IF;

                     IF (v_kgiflag = 0)
                     THEN
                        BEGIN
                           -- out_status := pkg_constants.con_status_failure;
                           --insert into site_log table
                           out_errmsg :=
                                'KGI Error: ' || v_kgitype || ' is mandatory';

                           INSERT INTO site_log
                                       (site_log_id, batch_id,
                                        site_name,
                                        status,
                                        reason, created_by, created_date
                                       )
                                VALUES (site_log_id.NEXTVAL, v_batchid,
                                        SUBSTR (v_currsite, 1, 100),
                                        pkg_constants.con_status_failure,
                                        out_errmsg, in_createdby, SYSDATE
                                       );
                        END;
                     ELSE
                        BEGIN
                           INSERT INTO address
                                       (address_id, country_id,
                                        building_number,
                                        city,
                                        state,
                                        post_zip_code,
                                        room,
                                        FLOOR,
                                        address_line2,
                                        address_line1,
                                        county,
                                        created_by, created_date

                                       )
                                VALUES (address_id.NEXTVAL, v_countryid,
                                        in_sitedetails (i).building_no,
                                        in_sitedetails (i).city,
                                        in_sitedetails (i).state,
                                        in_sitedetails (i).post_zip_code,
                                        in_sitedetails (i).room,
                                        in_sitedetails (i).FLOOR,
                                        in_sitedetails (i).address_line2,
                                        in_sitedetails (i).address_line1,
                                        in_sitedetails (i).county,
                                        in_createdby, SYSDATE
                                       )
                             RETURNING address_id
                                  INTO v_bfgaddrid;

                           INSERT INTO site
                                       (site_id,
                                        NAME,
                                        address_id, customer_id,
                                        bfg_site_id,
                                        bfg_site_name,
                                        telephone_area_code,
                                        customer_report_site_name,
                                        local_business_customer_name,
                                        created_by, created_date,
                                        main_site_flag,
                                        -- Added by Sujana on 27/10/2010 as part of defect 83494
                                        bfg_address_id,
                                        bfg_subloc_id,
                                        phone_number  -- Added on 15/2/2011 as part of R11 iVPN2
                                       )
                                VALUES (site_id.NEXTVAL,
                                        in_sitedetails (i).site_name,
                                        v_bfgaddrid, v_customerid,
                                        TO_NUMBER
                                                (in_sitedetails (i).bfg_site_id
                                                ),
                                        in_sitedetails (i).site_name,
                                        in_sitedetails (i).tele_area_code,
                                        in_sitedetails (i).cust_repsitename,
                                        in_sitedetails (i).local_business_custname,
                                        in_createdby, SYSDATE,
                                        --added central main site flag by Tanmayi on 9/9/2010 for Central site
                                        DECODE
                                           (UPPER (in_sitedetails (i).site_type
                                                  ),
                                            'CENTRAL', 'Y',
                                            NULL
                                           ),
                                        -- Added by Sujana on 27/10/2010 as part of defect 83494
                                        in_sitedetails (i).bfg_address_id,
                                        in_sitedetails (i).bfg_subloc_id,
                                        in_sitedetails (i).phone_number  -- Added on 15/2/2011 as part of R11 iVPN2
                                       )
                             RETURNING site_id
                                  INTO v_bfgsiteid;
                        END;
                     END IF;                                  --kgi_flag check
                  END;
               ELSE
                  BEGIN
                     SELECT site_id
                       INTO v_bfgsiteid
                       FROM site
                      WHERE bfg_site_id =
                                    TO_NUMBER (in_sitedetails (i).bfg_site_id);
                                     --and customer_id=v_customerid;
                  END;                   --if duplication check for quote_site

                   --Start R7 changes for defect id 83051 These chages done by Nagendra on 12-Nov-2010
                  SELECT address_id
                  INTO v_addressid
                  FROM site s
                  WHERE bfg_site_id = TO_NUMBER (in_sitedetails (i).bfg_site_id);
                   --and customer_id=v_customerid;

                  /*Changes done for defects 3751,2578 - on 5th April 2011. changes done by Jay. Changes start*/
                  UPDATE address
                  SET building_number = in_sitedetails (i).building_no,
                  city            = in_sitedetails (i).city,
                  state           = in_sitedetails (i).state,
                  post_zip_code   = in_sitedetails (i).post_zip_code,
                  room            = in_sitedetails (i).room,
                  floor           = in_sitedetails (i).floor,
                  address_line2   = in_sitedetails (i).address_line2,
                  address_line1   = in_sitedetails (i).address_line1,
                  county          = in_sitedetails (i).county
                  WHERE address_id = v_addressid;

                  /* added below update site for defect 86705(R9 IVPN2) */

                   UPDATE site
                    set name = in_sitedetails (i).site_name,
                      address_id =v_addressid,
                      customer_id = v_customerid,
                      expedio_site_id              = in_sitedetails (i).expedio_site_id,
                      telephone_area_code          = in_sitedetails (i).tele_area_code,
                      customer_report_site_name    = in_sitedetails (i).cust_repsitename,
                      local_business_customer_name = in_sitedetails (i).local_business_custname,
                      created_by                   = in_createdby,
                      created_date                 = sysdate,
                      main_site_flag               = decode(upper (in_sitedetails (i).site_type ), 'CENTRAL', 'Y', null ),
                      bfg_address_id               = in_sitedetails (i).bfg_address_id,
                      bfg_subloc_id                = in_sitedetails (i).bfg_subloc_id,
                      phone_number                 = in_sitedetails (i).phone_number
                  where bfg_site_id = TO_NUMBER (in_sitedetails (i).bfg_site_id);
                   --and customer_id=v_customerid;
                  --End R7 changes
                /*Changes done for defects 3751,2578 - on 5th April 2011. changes done by Jay - changes end*/
               END IF;

               IF (v_kgiflag <> 0)
               THEN
                  BEGIN
                     SELECT COUNT (*)
                       INTO v_rowcount
                       FROM quote_site
                      WHERE quote_header_id = in_quoteheaderid
                        AND site_id = v_bfgsiteid
                        AND active = pkg_constants.con_activeflag_yes;

                     IF (v_rowcount = 0)
                     THEN
                        BEGIN
                           INSERT INTO quote_site
                                       (quote_site_id, site_id,
                                        quote_header_id,
                                        active,
                                        created_by, created_date
                                       )
                                VALUES (quote_site_id.NEXTVAL, v_bfgsiteid,
                                        in_quoteheaderid,
                                        pkg_constants.con_activeflag_yes,
                                        in_createdby, SYSDATE
                                       );

                           --insert into site log table
                           INSERT INTO site_log
                                       (site_log_id, batch_id,
                                        site_name,
                                        status,
                                        created_by, created_date
                                       )
                                VALUES (site_log_id.NEXTVAL, v_batchid,
                                        SUBSTR (v_currsite, 1, 100),
                                        pkg_constants.con_status_success,
                                        in_createdby, SYSDATE
                                       );
                        END;
                     ELSE
                        BEGIN
                           --insert into site_log table for duplicate entry of BFG_site_id
                           INSERT INTO site_log
                                       (site_log_id, batch_id,
                                        site_name,
                                        status,
                                        reason,
                                        created_by, created_date
                                       )
                                VALUES (site_log_id.NEXTVAL, v_batchid,
                                        SUBSTR (v_currsite, 1, 100),
                                        pkg_constants.con_status_duplicate,
                                        'BFG Site already exists for Quote',
                                        in_createdby, SYSDATE
                                       );
                        END;
                     END IF;           --end if for quote_site duplicate check
                  END;
               END IF;                             --end if for kgi flag check
            END;                              --end if bfg_site_id is not null
--         ELSE
--            out_errmsg := 'Invalid Input';
         END IF;

         /*********** bfg_site_details ***********/
--         COMMIT;
      END LOOP;                                                 --end for loop
   EXCEPTION
      WHEN OTHERS
      THEN
         --out_status := pkg_constants.con_status_failure;
         out_errmsg := SQLERRM;
--         ROLLBACK;

         INSERT INTO site_log
                     (site_log_id, batch_id,
                      site_name,
                      status, reason,
                      created_by, created_date
                     )
              VALUES (site_log_id.NEXTVAL, v_batchid,
                      SUBSTR (v_currsite, 1, 100),
                      pkg_constants.con_status_failure, out_errmsg,
                      in_createdby, SYSDATE
                     );

         -- Added by Sujana on 23/11/2010 as part of exception handling
         out_errmsg := substr(SQLERRM,1,150);
         v_sql_code := SQLCODE;
         PKG_COMMON.spi_error_log(
                                  NULL,
                                  NULL,
                                  NULL,
                                  NULL,
                                  'PKG_SITE_R5',
                                  'SPI_QUOTESITE_BFGEXPEDIO_R5',
                                  v_sql_code,
                                  out_errmsg
                                 );

--         COMMIT;
   END;


PROCEDURE spu_lineofsitebilling (
      in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
      in_lnbillingflag   IN       site.line_of_site_billing%TYPE,
      in_billingid       IN       billing.billing_id%TYPE,
      out_status         OUT      NUMBER,
      out_errmsg         OUT      VARCHAR2
   )
   AS
      v_siteid   site.site_id%TYPE;
--- v_sitebillingid   site.billing_id%TYPE;
   BEGIN
       SELECT s.site_id
        INTO v_siteid
        FROM customer c, site s, quote_site qs, quote_header qh
       WHERE c.customer_id = s.customer_id
         AND S.site_id = qs.site_id
         AND qs.active = 'Y'
         AND qs.quote_header_id = qh.quote_header_id
         AND qh.quote_header_id = in_quoteheaderid
         AND S.main_site_flag = 'Y';

      IF (v_siteid = 0)
      THEN
         out_status := pkg_constants.con_status_duplicate;
      ELSE
         BEGIN
            UPDATE site
               SET line_of_site_billing = in_lnbillingflag,
                   billing_id = in_billingid
             WHERE site_id = v_siteid;

            out_status := pkg_constants.con_status_success;
--            COMMIT;
         END;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         out_errmsg := SQLERRM;
   END;

   --------Stating MX Order Configuration
PROCEDURE sps_site_sslipsec_repop (
      in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
      in_orderheaderid   IN       order_header.order_header_id%type,
      in_productname     in       line_item.product_name%type,
      in_searchby        IN       VARCHAR2,
      in_bfgcustomerid   IN       customer.bfg_customer_id%TYPE,
      out_site_conf      OUT      sys_refcursor,
      out_status         out      number,
      out_errmsg         out      varchar2

   )
   as
   v_sql_code varchar2(22);
   BEGIN   -------FOR SSL Provide first time AND IPSEC Provide and Modify First time
    IF upper(in_searchby)='PROVIDE' THEN
          BEGIN
          OPEN out_site_conf  for
          select
            null  as site_id,
            nvl(s.bfg_site_id, s.expedio_site_id) as "bfg_site_id",
            cou.name as "Country Name",
            ad.city  as "City",
            s.name as "Site Name",
            null as "First Name",
            null as "Last Name",
            null as "Job Title",
            null as "Address Line1",
            null as "Address Line2",
            null as "State",
            null as "Post Zip Code",
            null AS "Phone Number",
            null as "Email",
            null as "BFG Contact",
            null as "Managed Firewall" ,
            null as "Billing Id",
            null AS "Site Newly Added",
            null AS "Org Name",
            null as "Org ID"
          FROM
            site s,
            customer c,
            address ad,
            country cou,
            quote_header qh,
            line_item li
          WHERE
            c.customer_id = s.customer_id AND
            s.address_id    = ad.address_id and
            ad.country_id   = cou.country_id and
            li.site_id        = s.site_id AND
            li.quote_header_id = qh.quote_header_id
            AND qh.quote_header_id    = in_quoteheaderid
            AND li.active             ='Y'
            AND upper(LI.product_name)=upper(in_productname);
              END;
    ELSE
    BEGIN--------------------For SSL MOdifiy Fist time.
     CASE UPPER(in_searchby)
         WHEN  'MODIFY_SSL1' THEN
         BEGIN
          OPEN out_site_conf FOR
           SELECT
              null  as site_id,
              nvl(s.bfg_site_id, s.expedio_site_id) as "bfg_site_id",
              cou.name as "Country Name",
              ad.city  as "City",
              s.name  as "Site Name",
              lid.value AS "Site Newly Added",
              null as "First Name",
              null as "Last Name",
              null as "Job Title",
              null as "Address Line1",
              null as "Address Line2",
              null as "State",
              null as "Post Zip Code",
              null AS "Phone Number",
              null as "Email",
              null as "BFG Contact",
              null as "Managed Firewall" ,
              null as "Billing Id",
              null AS "Org Name",
              null as "Org ID"
              FROM
              site s,
              customer c,
              address ad,
              country cou,
              quote_header qh,
              line_item li,
              line_item_detail lid
              WHERE
              c.customer_id = s.customer_id AND
              s.address_id    = ad.address_id and
              ad.country_id   = cou.country_id and
              li.site_id        = s.site_id AND
              li.quote_header_id = qh.quote_header_id and
              li.line_item_id    = lid.line_item_id and
              lid.attribute_mapping_id= 5109
              AND qh.quote_header_id    = in_quoteheaderid
              AND li.active             ='Y'
              AND upper(LI.product_name)=upper(in_productname);
        END;
       WHEN  'MODIFY_SSL2' THEN -----------For SSL Modifiy,provid Second Time.
         BEGIN
          OPEN out_site_conf FOR
                SELECT DISTINCT
                          oli.site_id,
                          NVL (s.bfg_site_id, s.expedio_site_id) AS "bfg_site_id",
                          s.NAME                                 AS "Site Name",
                          co.first_name                          AS "First Name",
                          co.last_name                           AS "Last Name",
                          co.job_title                           AS "Job Title",
                          ad.address_line1                       AS "Address Line1",
                          ad.address_line2                       AS "Address Line2",
                          ad.city                                AS "City",
                          ad.state                               AS "State",
                          ad.post_zip_code                       AS "Post Zip Code",
                          cou.NAME                               AS "Country Name",
                          co.phone_number                        AS "Phone Number",
                          co.email                               AS "Email",
                          oli_2.bfgcontact                       as "BFG Contact",
                          oli_3.managedfirewall                  AS "Managed Firewall" ,
                          S.MX_BFG_BILL_ACCOUNT_ID               AS "Billing Id",
                          (SELECT LID.VALUE
                          FROM LINE_ITEM LI,
                            LINE_ITEM_DETAIL LID
                          WHERE LI.LINE_ITEM_ID        = LID.LINE_ITEM_ID
                          AND LI.QUOTE_HEADER_ID       = OH.QUOTE_HEADER_ID
                          AND LI.SITE_ID               = S.SITE_ID
                          AND LID.ATTRIBUTE_MAPPING_ID = 5109
                          AND LID.ACTIVE               = 'Y'
                          AND LI.ACTIVE                = 'Y'
                          and upper(LI.product_name)    =upper(in_productname)
                          AND OH.QUOTE_HEADER_ID       =in_quoteheaderid
                          )                                     AS "Site Newly Added",
                          null                                  AS "Org Name",
                          null                                  As "Org ID"
                        FROM ORDER_HEADER OH
                        INNER JOIN order_line_item oli
                        ON OH.ORDER_HEADER_ID=OLI.ORDER_HEADER_ID
                        INNER JOIN order_contact_detail ocd
                        ON ocd.order_header_id=oli.order_header_id
                        AND ocd.site_id       =oli.site_id
                        INNER JOIN site s
                        ON s.site_id= oli.site_id
                        LEFT OUTER JOIN address ad
                        ON ad.address_id=ocd.address_id ---s.address_id
                        LEFT OUTER JOIN country cou
                        ON cou.country_id= ad.country_id
                        INNER JOIN contact co
                        ON ocd.contact_id = co.contact_id
                        LEFT OUTER JOIN
                          (SELECT site_id,
                            max(decode(rn,1,value)) as bfgcontact
                          FROM
                            (SELECT oli.site_id,
                              olid.VALUE,
                              olid.attribute_mapping_id,
                              olid.order_line_item_det_id,
                              row_number() OVER ( PARTITION BY oli.site_id ORDER BY olid.attribute_mapping_id) rn
                            FROM order_line_item oli ,
                              order_line_item_detail olid
                            WHERE oli.order_line_item_id   =olid.order_line_item_id
                            AND oli.active                 ='Y'
                            AND olid.active                ='Y'
                            AND oli.order_header_id        =in_orderheaderid
                            and upper(oli.product_name)    =upper(in_productname)
                            AND olid.attribute_mapping_id IN (3069)
                            )
                          GROUP BY site_id
                          ) oli_2
                        on oli_2.site_id            =oli.site_id
                        LEFT OUTER JOIN
                          (SELECT site_id,
                            max(decode(rn,1,value)) as managedfirewall
                          FROM
                            (SELECT oli.site_id,
                              olid.VALUE,
                              olid.attribute_mapping_id,
                              olid.order_line_item_det_id,
                              row_number() OVER ( PARTITION BY oli.site_id ORDER BY olid.attribute_mapping_id) rn
                            FROM order_line_item oli ,
                              order_line_item_detail olid
                            WHERE oli.order_line_item_id   =olid.order_line_item_id
                            AND oli.active                 ='Y'
                            AND olid.active                ='Y'
                            AND oli.order_header_id        =in_orderheaderid
                            and upper(oli.product_name)    =upper(in_productname)
                            AND olid.attribute_mapping_id =4913
                            )
                          group by site_id
                          ) oli_3
                        ON oli_3.site_id            =oli.site_id
                        WHERE oli.order_header_id   =in_orderheaderid
                        AND upper(oli.product_name) = upper(in_productname)
                        AND oli.product_id          = 1012437
                        AND oli.active              = 'Y'
                        AND co.contact_type         ='PRIMARY SITE CONTACT'
                union
               SELECT
                         oli.site_id,
                          NVL (s.bfg_site_id, s.expedio_site_id) AS "bfg_site_id",
                          s.NAME                                 AS "Site Name",
                          NULL                                   AS "First Name",
                          NULL                                  AS "Last Name",
                          NULL                                  AS "Job Title",
                          NULL                                  AS "Address Line1",
                          null                                  AS "Address Line2",
                          ad.city                               AS "City",
                          NULL                                  AS "State",
                          null                                  AS "Post Zip Code",
                          cou.NAME                              AS "Country Name",
                          NULL                                  AS "Phone Number",
                          NULL                                  AS "Email",
                          null                                  as "BFG Contact",
                          oli_3.managedfirewall                 AS "Managed Firewall" ,
                          NULL                                  AS "Billing Id",
                          (SELECT LID2.VALUE
                          FROM LINE_ITEM LI2,
                            LINE_ITEM_DETAIL LID2
                          WHERE LI2.LINE_ITEM_ID        = LID2.LINE_ITEM_ID
                          AND LI2.QUOTE_HEADER_ID       = OH.QUOTE_HEADER_ID
                          AND LI2.SITE_ID               = S.SITE_ID
                          AND LID2.ATTRIBUTE_MAPPING_ID = 5109
                          AND LID2.ACTIVE               = 'Y'
                          AND LI2.ACTIVE                = 'Y'
                          and upper(LI2.product_name)    =upper(in_productname)
                          AND OH.QUOTE_HEADER_ID       =in_quoteheaderid )  AS "Site Newly Added",
                          NULL                                  AS "Org Name",
                          null                                  As "Org ID"
                 FROM ORDER_HEADER OH
                  INNER JOIN order_line_item oli
                    ON OH.ORDER_HEADER_ID=OLI.ORDER_HEADER_ID
                  INNER JOIN site s
                  ON oli.site_id=s.site_id
                  INNER JOIN address ad
                  ON ad.address_id=s.address_id
                  INNER JOIN country cou
                  on cou.country_id       = ad.country_id
                   LEFT OUTER JOIN
                          (SELECT site_id,
                            max(decode(rn,1,value)) as managedfirewall
                          FROM
                            (SELECT oli.site_id,
                              olid.VALUE,
                              olid.attribute_mapping_id,
                              olid.order_line_item_det_id,
                              row_number() OVER ( PARTITION BY oli.site_id ORDER BY olid.attribute_mapping_id) rn
                            FROM order_line_item oli ,
                              order_line_item_detail olid
                            WHERE oli.order_line_item_id   =olid.order_line_item_id
                            AND oli.active                 ='Y'
                            AND olid.active                ='Y'
                            AND oli.order_header_id        =in_orderheaderid
                            and upper(oli.product_name)    =upper(in_productname)
                            AND olid.attribute_mapping_id =4913
                            )
                          group by site_id
                          ) oli_3
                        ON oli_3.site_id            =oli.site_id
                  WHERE oli.order_header_id   =in_orderheaderid
                    AND oli.ACTIVE          ='Y'
                    and upper(oli.product_name) = upper(in_productname)
                    AND oli.site_id NOT IN
                    (SELECT DISTINCT
                          oli.site_id
                        FROM ORDER_HEADER OH
                        INNER JOIN order_line_item oli
                        ON OH.ORDER_HEADER_ID=OLI.ORDER_HEADER_ID
                        INNER JOIN order_contact_detail ocd
                        ON ocd.order_header_id=oli.order_header_id
                        AND ocd.site_id       =oli.site_id
                        INNER JOIN site s
                        ON s.site_id= oli.site_id
                        LEFT OUTER JOIN address ad
                        ON ad.address_id=s.address_id
                        LEFT OUTER JOIN country cou
                        ON cou.country_id= ad.country_id
                        INNER JOIN contact co
                        ON ocd.contact_id = co.contact_id
                        WHERE oli.order_header_id   =in_orderheaderid
                        AND upper(oli.product_name) = upper(in_productname)
                        AND oli.product_id          = 1012437
                        AND oli.active              = 'Y'
                        AND co.contact_type         ='PRIMARY SITE CONTACT'
                    );


        END;
       -----------For IPSEC PROVID AND  Modifiy .
        WHEN  'MODIFY_IPSEC1' THEN
         BEGIN
          OPEN out_site_conf FOR
        select
            NVL(S.BFG_SITE_ID,S.EXPEDIO_SITE_ID)      AS "bfg_site_id",
            S.NAME                                    AS "Site Name",
            CO.FIRST_NAME                             AS "First Name",
            CO.LAST_NAME                              AS "Last Name",
            CO.JOB_TITLE                              AS "Job Title",
            AD.ADDRESS_LINE1                          AS "Address Line1",
            AD.ADDRESS_LINE2                          AS "Address Line2",
            AD.CITY                                   AS "City",
            AD.STATE                                  AS "State",
            AD.POST_ZIP_CODE                          AS "Post Zip Code",
            COU.NAME                                  AS "Country Name",
            CO.CONTACT_TYPE                           AS "contact role",
            CO.PHONE_NUMBER                           AS "Phone Number",
            CO.EMAIL                                  AS "Email" ,
            S.MX_BFG_BILL_ACCOUNT_ID                  AS "Billing Id",
            CO.ORGA_NAME                              AS "Org Name",
            co.org_id                                 AS "Org ID" ,
            oi.VALUE                                  AS "BFG Contact",
            NULL                                      AS "Site Newly Added",
            null                                      AS "Managed Firewall"
          FROM order_line_item oli
          INNER JOIN ORDER_CONTACT_DETAIL OCD
          ON OCD.ORDER_HEADER_ID=OLI.ORDER_HEADER_ID
          AND OCD.SITE_ID       =OLI.SITE_ID
          INNER JOIN SITE S
          ON S.SITE_ID= OLI.SITE_ID
          INNER JOIN ADDRESS AD
          ON AD.ADDRESS_ID=S.ADDRESS_ID
          INNER JOIN COUNTRY COU
          ON COU.COUNTRY_ID= AD.COUNTRY_ID
          INNER JOIN contact co
          ON ocd.contact_id  = co.contact_id
          AND co.contact_type='IPSEC CONTACT'
          LEFT OUTER JOIN
            (SELECT DISTINCT OLID2.VALUE,
              OLID2.ORDER_LINE_ITEM_ID AS "order_line_item_id",
              OLI2.ORDER_LINE_ITEM_ID
            FROM ORDER_LINE_ITEM OLI2
            INNER JOIN ORDER_LINE_ITEM_DETAIL OLID2
            ON OLI2.ORDER_LINE_ITEM_ID     = OLID2.ORDER_LINE_ITEM_ID
            AND OLID2.ATTRIBUTE_MAPPING_ID = 3069
            WHERE OLI2.ORDER_HEADER_ID     = in_orderheaderid
            AND OLI2.ACTIVE                ='Y'
            AND OLID2.ACTIVE               ='Y'
            ) OI ON OI.ORDER_LINE_ITEM_ID  = OLI.ORDER_LINE_ITEM_ID
          WHERE OLI.ORDER_HEADER_ID        =in_orderheaderid
          AND upper(oli.product_name)      = upper(in_productname)
          AND CO.CONTACT_TYPE              ='IPSEC CONTACT'
          AND OLI.PRODUCT_ID               = 1012437
          AND OLI.ACTIVE                   = 'Y'
          AND oli.site_id                 IS NOT NULL
          UNION
          SELECT NVL(S.BFG_SITE_ID,S.EXPEDIO_SITE_ID) AS "bfg_site_id",
            S.NAME                                    AS "Site Name",
            NULL                                      AS "First Name",
            NULL                                      AS "Last Name",
            NULL                                      AS "Job Title",
            NULL                                      AS "Address Line1",
            NULL                                      AS "Address Line2",
            AD.CITY                                   AS "City",
            NULL                                      AS "State",
            NULL                                      AS "Post Zip Code",
            COU.NAME                                  AS "Country Name",
            NULL                                      AS "contact role",
            NULL                                      AS "Phone Number",
            NULL                                      AS "Email" ,
            NULL                                      AS "Billing Id",
            NULL                                      AS "Org Name",
            NULL                                      AS "Org ID" ,
            oi.value                                  AS "BFG Contact",
            NULL                                      AS "Site Newly Added",
            null                                      AS "Managed Firewall"
          FROM order_line_item oli
          INNER JOIN site s
          ON oli.site_id=s.site_id
          INNER JOIN address ad
          ON ad.address_id=s.address_id
          INNER JOIN country cou
          on cou.country_id       = ad.country_id
          LEFT OUTER JOIN
            (SELECT DISTINCT OLID2.VALUE,
              OLID2.ORDER_LINE_ITEM_ID AS "order_line_item_id",
              OLI2.ORDER_LINE_ITEM_ID
            FROM ORDER_LINE_ITEM OLI2
            INNER JOIN ORDER_LINE_ITEM_DETAIL OLID2
            ON OLI2.ORDER_LINE_ITEM_ID     = OLID2.ORDER_LINE_ITEM_ID
            AND OLID2.ATTRIBUTE_MAPPING_ID = 3069
            WHERE OLI2.ORDER_HEADER_ID     = in_orderheaderid
            AND OLI2.ACTIVE                ='Y'
            AND OLID2.ACTIVE               ='Y'
            ) OI ON OI.ORDER_LINE_ITEM_ID  = OLI.ORDER_LINE_ITEM_ID
          WHERE order_header_id   =in_orderheaderid
          AND ACTIVE              ='Y'
          and upper(product_name) = upper(in_productname)
          AND oli.site_id NOT IN
            (SELECT S.site_id
            FROM order_line_item oli
            INNER JOIN ORDER_CONTACT_DETAIL OCD
            ON OCD.ORDER_HEADER_ID=OLI.ORDER_HEADER_ID
            AND OCD.SITE_ID       =OLI.SITE_ID
            INNER JOIN SITE S
            ON s.site_id= oli.site_id
            INNER JOIN ADDRESS AD
            ON AD.ADDRESS_ID=S.ADDRESS_ID
            INNER JOIN COUNTRY COU
            ON COU.COUNTRY_ID= AD.COUNTRY_ID
            INNER JOIN contact co
            ON ocd.contact_id           = co.contact_id
            AND co.contact_type         ='IPSEC CONTACT'
            WHERE OLI.ORDER_HEADER_ID   =in_orderheaderid
            AND upper(oli.product_name) = upper(in_productname)
            AND OLI.PRODUCT_ID          = 1012437
            AND oli.active              = 'Y'
            AND OLI.SITE_ID            IS NOT NULL
            );
        END;  -----------------Re-Po and After saving query
       WHEN  'IFC_IPSEC1' THEN
         BEGIN
          OPEN out_site_conf FOR
          select
            NVL(S.BFG_SITE_ID,S.EXPEDIO_SITE_ID)      AS "bfg_site_id",
            S.NAME                                    AS "Site Name",
            CO.FIRST_NAME                             AS "First Name",
            CO.LAST_NAME                              AS "Last Name",
            CO.JOB_TITLE                              AS "Job Title",
            AD.ADDRESS_LINE1                          AS "Address Line1",
            AD.ADDRESS_LINE2                          AS "Address Line2",
            AD.CITY                                   AS "City",
            AD.STATE                                  AS "State",
            AD.POST_ZIP_CODE                          AS "Post Zip Code",
            COU.NAME                                  AS "Country Name",
            CO.CONTACT_TYPE                           AS "contact role",
            CO.PHONE_NUMBER                           AS "Phone Number",
            CO.EMAIL                                  AS "Email" ,
            S.MX_BFG_BILL_ACCOUNT_ID                  AS "Billing Id",
            CO.ORGA_NAME                              AS "Org Name",
            co.org_id                                 AS "Org ID" ,
            oi.VALUE                                  AS "BFG Contact",
            NULL                                      AS "Site Newly Added",
            null                                      AS "Managed Firewall"
          FROM order_line_item oli
          INNER JOIN ORDER_CONTACT_DETAIL OCD
          ON OCD.ORDER_HEADER_ID=OLI.ORDER_HEADER_ID
          AND OCD.SITE_ID       =OLI.SITE_ID
          INNER JOIN SITE S
          ON S.SITE_ID= OLI.SITE_ID
          INNER JOIN ADDRESS AD
          ON AD.ADDRESS_ID=S.ADDRESS_ID
          INNER JOIN COUNTRY COU
          ON COU.COUNTRY_ID= AD.COUNTRY_ID
          INNER JOIN contact co
          ON ocd.contact_id  = co.contact_id
          AND co.contact_type='IPSEC CONTACT'
          LEFT OUTER JOIN
            (SELECT DISTINCT OLID2.VALUE,
              OLID2.ORDER_LINE_ITEM_ID AS "order_line_item_id",
              OLI2.ORDER_LINE_ITEM_ID
            FROM ORDER_LINE_ITEM OLI2
            INNER JOIN ORDER_LINE_ITEM_DETAIL OLID2
            ON OLI2.ORDER_LINE_ITEM_ID     = OLID2.ORDER_LINE_ITEM_ID
            AND OLID2.ATTRIBUTE_MAPPING_ID = 3069
            WHERE OLI2.ORDER_HEADER_ID     = in_orderheaderid
            AND OLI2.ACTIVE                ='Y'
            AND OLID2.ACTIVE               ='Y'
            ) OI ON OI.ORDER_LINE_ITEM_ID  = OLI.ORDER_LINE_ITEM_ID
          WHERE OLI.ORDER_HEADER_ID        =in_orderheaderid
          AND upper(oli.product_name)      = upper(in_productname)
          AND CO.CONTACT_TYPE              ='IPSEC CONTACT'
          AND OLI.PRODUCT_ID               = 1012437
          AND OLI.ACTIVE                   = 'Y'
          AND oli.site_id                 IS NOT NULL
              UNION
              SELECT nvl(s.bfg_site_id,s.expedio_site_id) AS "bfg_site_id",
                s.NAME                                    AS "Site Name",
                NULL                                      AS "First Name",
                NULL                                      AS "Last Name",
                NULL                                      AS "Job Title",
                NULL                                      AS "Address Line1",
                NULL                                      AS "Address Line2",
                ad.city                                   AS "City",
                NULL                                      AS "State",
                NULL                                      AS "Post Zip Code",
                cou.NAME                                  AS "Country Name",
                NULL                                      AS "contact role",
                NULL                                      AS "Phone Number",
                NULL                                      AS "Email" ,
                NULL                                      AS "Billing Id",
                NULL                                      AS "Org Name",
                NULL                                      AS "Org ID" ,
                NULL                                      AS "BFG Contact",
                NULL                                      AS "Site Newly Added",
                NULL                                      AS "Managed Firewall"
              FROM quote_header qh INNER JOIN
              line_item li ON qh.quote_header_id=li.quote_header_id
              INNER JOIN site s
              ON s.site_id               =li.site_id
              AND li.active              ='Y'
              AND li.quote_header_id     =in_quoteheaderid
              AND upper(li.product_name) = upper(in_productname)
              INNER JOIN address ad
              ON ad.address_id = s.address_id
              INNER JOIN country cou
              ON cou.country_id   = ad.country_id
              AND li.site_id NOT IN
                (SELECT site_id
                FROM order_line_item oli
                WHERE oli.order_header_id   =in_orderheaderid
                AND upper(oli.product_name) = upper(in_productname)
                AND oli.product_id          = 1012437
                AND oli.active              = 'Y'
                AND oli.site_id            IS NOT NULL
                );
        END;
        WHEN  'IFC_SSL1' THEN
         BEGIN
          OPEN out_site_conf FOR
          SELECT DISTINCT NVL (s.bfg_site_id, s.expedio_site_id) AS "bfg_site_id",
              s.NAME                                               AS "Site Name",
              co.first_name                                        AS "First Name",
              co.last_name                                         AS "Last Name",
              co.job_title                                         AS "Job Title",
              ad.address_line1                                     AS "Address Line1",
              ad.address_line2                                     AS "Address Line2",
              ad.city                                              AS "City",
              ad.state                                             AS "State",
              ad.post_zip_code                                     AS "Post Zip Code",
              cou.NAME                                             AS "Country Name",
              co.phone_number                                      AS "Phone Number",
              co.email                                             AS "Email",
              oli_2.bfgcontact                                     AS "BFG Contact",
              oli_3.managedfirewall                                AS "Managed Firewall" ,
              S.MX_BFG_BILL_ACCOUNT_ID                             AS "Billing Id",
              (SELECT LID.VALUE
              FROM LINE_ITEM LI,
                LINE_ITEM_DETAIL LID
              WHERE LI.LINE_ITEM_ID        = LID.LINE_ITEM_ID
              AND LI.QUOTE_HEADER_ID       = OH.QUOTE_HEADER_ID
              AND LI.SITE_ID               = S.SITE_ID
              AND LID.ATTRIBUTE_MAPPING_ID = 5109
              AND LID.ACTIVE               = 'Y'
              AND LI.ACTIVE                = 'Y'
              AND upper(LI.product_name)   =upper(in_productname)
              AND OH.QUOTE_HEADER_ID       =in_quoteheaderid
              )    AS "Site Newly Added",
              NULL AS "Org Name",
              NULL AS "Org ID"
            FROM ORDER_HEADER OH
            INNER JOIN order_line_item oli
            ON OH.ORDER_HEADER_ID=OLI.ORDER_HEADER_ID
            INNER JOIN order_contact_detail ocd
            ON ocd.order_header_id=oli.order_header_id
            AND ocd.site_id       =oli.site_id
            INNER JOIN site s
            ON s.site_id= oli.site_id
            LEFT OUTER JOIN address ad
            ON ad.address_id=ocd.address_id
            LEFT OUTER JOIN country cou
            ON cou.country_id= ad.country_id
            INNER JOIN contact co
            ON ocd.contact_id = co.contact_id
            LEFT OUTER JOIN
              (SELECT site_id,
                MAX(DECODE(rn,1,value)) AS bfgcontact
              FROM
                (SELECT oli.site_id,
                  olid.VALUE,
                  olid.attribute_mapping_id,
                  olid.order_line_item_det_id,
                  row_number() OVER ( PARTITION BY oli.site_id ORDER BY olid.attribute_mapping_id) rn
                FROM order_line_item oli ,
                  order_line_item_detail olid
                WHERE oli.order_line_item_id   =olid.order_line_item_id
                AND oli.active                 ='Y'
                AND olid.active                ='Y'
                AND oli.order_header_id        =in_orderheaderid
                AND UPPER(oli.product_name)    = UPPER('BT MobileXpress Mobile SSL VPN') --R15 change
                AND olid.attribute_mapping_id =3069
                )
              GROUP BY site_id
              ) oli_2
            ON oli_2.site_id =oli.site_id
            LEFT OUTER JOIN
              (SELECT site_id,
                MAX(DECODE(rn,1,value)) AS managedfirewall
              FROM
                (SELECT oli.site_id,
                  olid.VALUE,
                  olid.attribute_mapping_id,
                  olid.order_line_item_det_id,
                  row_number() OVER ( PARTITION BY oli.site_id ORDER BY olid.attribute_mapping_id) rn
                FROM order_line_item oli ,
                  order_line_item_detail olid
                WHERE oli.order_line_item_id  =olid.order_line_item_id
                AND oli.active                ='Y'
                AND olid.active               ='Y'
                AND oli.order_header_id       =in_orderheaderid
                AND upper(oli.product_name)   =upper(in_productname)
                AND olid.attribute_mapping_id =4913
                )
              GROUP BY site_id
              ) oli_3
            ON oli_3.site_id            =oli.site_id
            WHERE oli.order_header_id   =in_orderheaderid
            AND upper(oli.product_name) = upper(in_productname)
            AND oli.product_id          = 1012437
            AND oli.active              = 'Y'
            AND co.contact_type         ='PRIMARY SITE CONTACT'
            UNION
            SELECT NVL (s.bfg_site_id, s.expedio_site_id) AS "bfg_site_id",
              s.NAME                                      AS "Site Name",
              NULL                                        AS "First Name",
              NULL                                        AS "Last Name",
              NULL                                        AS "Job Title",
              NULL                                        AS "Address Line1",
              NULL                                        AS "Address Line2",
              ad.city                                     AS "City",
              NULL                                        AS "State",
              NULL                                        AS "Post Zip Code",
              cou.NAME                                    AS "Country Name",
              NULL                                        AS "Phone Number",
              NULL                                        AS "Email",
              NULL                                        AS "BFG Contact",
              NULL                                        AS "Managed Firewall" ,
              NULL                                        AS "Billing Id",
              NULL                                        AS "Site Newly Added",
              NULL                                        AS "Org Name",
              NULL                                        AS "Org ID"
            FROM quote_header qh
            INNER JOIN line_item li
            ON qh.quote_header_id=li.quote_header_id
            INNER JOIN site s
            ON s.site_id               =li.site_id
            AND li.active              ='Y'
            AND li.quote_header_id     =in_quoteheaderid
            AND upper(li.product_name) = upper(in_productname)
            INNER JOIN address ad
            ON ad.address_id = s.address_id
            INNER JOIN country cou
            ON cou.country_id   = ad.country_id
            AND li.site_id NOT IN
              (SELECT site_id
              FROM order_line_item oli
              WHERE oli.order_header_id   =in_orderheaderid
              AND upper(oli.product_name) = upper(in_productname)
              AND oli.product_id          = 1012437
              AND oli.active              = 'Y'
              AND oli.site_id            IS NOT NULL
              );
        END;
      WHEN  'BFG_CONTACT' THEN  ----------THIS Query for Fetching the Primary Site Contact
         BEGIN
          open out_site_conf for
               SELECT
                nvl(ibes.bfg_site_id,ibes.expedio_site_id) AS "BFG_SITE_ID",
                ibes.site_name              AS "Site Name",
                ibes.bfg_location_id,
                ibes.bfg_address_id,
                ibes.street_name            AS "Address Line2",
                ibes.premise_name           AS "Address Line1",
                ibes.city                   AS "City",
                ibes.county                 AS "State",
                ibes.country                AS "Country Name",
               ibes.post_code              as "Post Zip Code",
               ibes.phone_number,
               ibes.expedio_site_id,
               ibec.bfg_contact_id,
                ibec.first_name             AS "First Name",
                ibec.last_name              AS "Last Name",
                ibec.phone_number           AS "Phone Number",
                ibec.job_title              AS "Job Title",
                ibec.email                  AS "Email",
                ibec.contact_type          AS "contact role",
                NULL                       AS "Billing Id",
                NULL                       AS "Org Name",
                NULL                       AS "Org ID" ,
                NULL                       AS "BFG Contact",
                NULL                       AS "Managed Firewall",
                ( SELECT
                    lid.VALUE
                    FROM site s,
                         line_item li,
                         line_item_detail lid
                    WHERE
                        li.site_id                  = s.site_id
                        AND LI.LINE_ITEM_ID         = LID.LINE_ITEM_ID
                        AND li.active               ='Y' AND lid.active='Y'
                        AND (nvl(s.bfg_site_id,s.expedio_site_id)=nvl(ibes.bfg_site_id,ibes.expedio_site_id)
                           OR  nvl(s.bfg_site_id,s.expedio_site_id)=nvl(ibec.bfg_site_id,ibec.expedio_site_id))
                        AND lid.attribute_mapping_id= 5109
                        AND li.quote_header_id      = in_quoteheaderid
                        AND li.active               ='Y' AND lid.active='Y'
                        AND upper(li.product_name)  =upper(in_productname)
                   )                       AS "Site Newly Added"
              FROM ivpn_bfg_expedio_sites ibes,
                   ivpn_bfg_expedio_contacts ibec
              WHERE (ibes.bfg_site_id                         = ibec.bfg_site_id
                OR ibes.expedio_site_id                         = ibec.expedio_site_id)
                AND ibes.bfg_customer_id                        = in_bfgcustomerid
                AND ibec.ROLE                                   = 'Site Primary Contact'
                AND nvl(ibes.bfg_site_id,ibes.expedio_site_id) IN
                ( SELECT DISTINCT nvl(s.bfg_site_id,s.expedio_site_id)
                FROM site s,
                     line_item li
                WHERE li.site_id           =s.site_id
                AND li.product_id          = 1012437
                AND upper(li.product_name) = upper(in_productname)
                AND li.quote_header_id     =in_quoteheaderid
                AND li.active              ='Y');

          end;
   END CASE;
    end;
    end if;
    out_status:=1;
exception when others then
   out_errmsg := SQLERRM;
         v_sql_code := SQLCODE;
         PKG_COMMON.spi_error_log(
                                  NULL,
                                  NULL,
                                  NULL,
                                  NULL,
                                  'PKG_SITE_R5',
                                  'sps_site_sslipsec_repop',
                                  v_sql_code,
                                  out_errmsg
                                 );
   END;
--Ends ,SPI_QUOTESITE_BFGEXPEDIO_R5 for MX on 13/08/10


PROCEDURE SPI_EXPEDIO_MAIN_SITE (
   in_bfg_customer_id    IN       customer.bfg_customer_id%TYPE,
   in_quoteheaderid      IN       quote_header.quote_header_id%TYPE,
   in_createdby          IN       site.created_by%TYPE,
   out_sqesiteid         OUT      site.site_id%TYPE,
   out_add_id            OUT      site.bfg_address_id%TYPE,
   out_expedio_site_id   OUT      site.expedio_site_id%TYPE,
   out_bfg_subloc_id     OUT      site.bfg_subloc_id%TYPE,
   out_bfg_site_id       OUT      site.bfg_site_id%TYPE,
   out_status            OUT      NUMBER,
   out_errmsg            OUT      VARCHAR2
)
AS
/******************************************************************************
   NAME:        Creating Centeral Site
   PURPOSE:
   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0      1/03/2011     Suman          1.Create Centerl site
   2.0      8/2/2011      Suman          2. Modification about Add1 and Addr2 mapping
 ******************************************************************************/
   v_local_central_site   site.site_id%TYPE;
   v_sqe_customer_id      customer.customer_id%TYPE;
   v_bfg_site_id          site.bfg_site_id%TYPE;
   v_site_name            site.NAME%TYPE;
   v_bfg_location_id      site.bfg_subloc_id%TYPE;
   v_bfg_address_id       site.bfg_address_id%TYPE;
   v_address_line1        address.address_line1%TYPE;
   v_address_line2        address.address_line2%TYPE;
   v_floor                address.FLOOR%TYPE;
   v_room                 address.room%TYPE;
   v_city                 address.city%TYPE;
   v_state                address.state%TYPE;
   v_country              country.NAME%TYPE;
   v_post                 address.post_zip_code%TYPE;
   v_phone                contact.phone_number%TYPE;
   v_email                contact.email%TYPE;
   v_expedio_site_id      site.expedio_site_id%TYPE;
   v_bfg_contact_id       site.bfg_site_contact_id%TYPE;
   v_first_name           contact.first_name%TYPE;
   v_last_name            contact.last_name%TYPE;
   v_phone_number         contact.phone_number%TYPE;
   v_job_title            contact.job_title%TYPE;
   v_fax                  contact.fax%TYPE;
   v_contact_type         contact.contact_type%TYPE;
   v_country_id           country.country_id%TYPE;
   v_mobile_number        contact.mobile_number%TYPE;
   v_primary_contacts     VARCHAR2 (2000)                 := '';
   v_quote_site_id        quote_site.site_id%TYPE;
   e_invalid_product      EXCEPTION;
   v_sql_code             NUMBER;
BEGIN
--get local(SQE) customer id
   SELECT customer_id
     INTO v_sqe_customer_id
     FROM customer
    WHERE bfg_customer_id = in_bfg_customer_id;
--check for local main site
   BEGIN
      SELECT site_id, bfg_subloc_id, expedio_site_id,
             bfg_address_id, bfg_site_id, bfg_site_contact_id
        INTO v_local_central_site, v_bfg_location_id, v_expedio_site_id,
             v_bfg_address_id, v_bfg_site_id, v_bfg_contact_id
        FROM site s, customer c
       WHERE c.bfg_customer_id = in_bfg_customer_id
         AND s.customer_id = c.customer_id
         AND s.main_site_flag = 'Y';
   EXCEPTION
      WHEN NO_DATA_FOUND
      THEN
         v_local_central_site := NULL;
      WHEN TOO_MANY_ROWS
      THEN
         v_local_central_site := NULL;
         out_status := pkg_constants.con_status_failure;
         out_errmsg := 'More than one central site exists for this customer';
         RETURN;
   END;
   IF v_local_central_site IS NULL
   THEN
      v_bfg_location_id := NULL;
      v_expedio_site_id := NULL;
      BEGIN
         select IBES.BFG_SITE_ID, IBES.SITE_NAME, IBES.BFG_LOCATION_ID,
                ibes.bfg_address_id, ibes.street_name AS "Address_line1",
                ibes.premise_name AS "Address_line2", ibes.FLOOR, ibes.room,
                ibes.city, ibes.county AS "State", ibes.country,
                ibes.post_code, ibes.phone_number, ibec.email,
                ibes.expedio_site_id, ibec.bfg_contact_id, ibec.first_name,
                ibec.last_name, ibec.phone_number, ibec.job_title, ibec.fax,
                ibec.email, ibec.contact_type, ibec.mobile_number
           INTO v_bfg_site_id, v_site_name, v_bfg_location_id,
                v_bfg_address_id, v_address_line1,
                v_address_line2, v_floor, v_room,
                v_city, v_state, v_country,
                v_post, v_phone, v_email,
                v_expedio_site_id, v_bfg_contact_id, v_first_name,
                v_last_name, v_phone_number, v_job_title, v_fax,
                v_email, v_contact_type, v_mobile_number
           FROM ivpn_bfg_expedio_sites ibes, ivpn_bfg_expedio_contacts ibec
          WHERE (   ibes.bfg_site_id = ibec.bfg_site_id
                 OR ibes.expedio_site_id = ibec.expedio_site_id
                )
            AND ibes.bfg_customer_id = in_bfg_customer_id
            AND ibec.ROLE = 'Site Primary Contact'
            AND sit_type = 'CENTRAL';
      EXCEPTION
         WHEN OTHERS
         THEN
            out_status := pkg_constants.con_status_failure;
            out_errmsg := SQLERRM;
            pkg_common.spi_error_log (in_bfg_customer_id,
                                      in_quoteheaderid,
                                      NULL,
                                      NULL,
                                      NULL,
                                      'spi_expedio_main_site',
                                      v_sql_code,
                                      out_errmsg
                                     );
      end;
      IF     v_bfg_location_id IS NULL AND v_bfg_address_id IS NULL AND v_bfg_contact_id IS NULL
      THEN
         RAISE e_invalid_product;
      end if;

      SELECT country_id
        INTO v_country_id
        FROM country
       where UPPER (name) = UPPER (V_COUNTRY);

      v_primary_contacts :=
            v_first_name
         || '|'
         || v_last_name
         || '|'
         || v_job_title
         || '|'
         || v_email
         || '|'
         || v_phone_number
         || '|'
         || v_mobile_number
         || '|'
         || v_fax
         || '||';

      pkg_site_r5.spi_site (v_sqe_customer_id,
                            in_quoteheaderid,
                            v_site_name,
                            v_site_name,
                            NULL,
                            v_address_line1,
                            v_city,
                            v_state,
                            NULL,
                            v_country_id,
                            v_post,
                            '',
                            v_state,
                            NULL,
                            '',
                            v_primary_contacts,
                            NULL,                --'', --for secondary contact
                            NULL,                --'', --for technical contact
                            NULL,
                                 --'', --for service assurance contact details
                            NULL, --'', --for service delivery contact details
                            v_bfg_site_id,
                            v_site_name,
                            v_expedio_site_id,
                            '',
                            '',
                            'Y',
                            in_createdby,
                            NULL,
                            NULL,
                            out_sqesiteid,
                            out_status,
                            out_errmsg
                           );
      IF out_status = 1
      THEN
         UPDATE site
            SET bfg_subloc_id = v_bfg_location_id,
                bfg_address_id = v_bfg_address_id,
                bfg_site_contact_id = v_bfg_contact_id
          WHERE site_id = out_sqesiteid;
         out_add_id := v_bfg_address_id;
         out_expedio_site_id := v_expedio_site_id;
         out_bfg_subloc_id := v_bfg_location_id;
         out_add_id := v_bfg_address_id;
         out_bfg_site_id := v_bfg_site_id;
         RETURN;
      ELSE
         out_errmsg :=
               'Central Site could not be created because of the following error'
            || out_errmsg;
         RAISE e_invalid_product;
         RETURN;
      END IF;
   ELSE
      BEGIN
         SELECT DISTINCT qs.site_id
           INTO v_quote_site_id
           FROM quote_site qs, site s
          WHERE qs.site_id = s.site_id
            AND s.main_site_flag = 'Y'
            AND qs.active = 'Y'
            AND s.site_id = v_local_central_site
            AND quote_header_id = in_quoteheaderid;
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            v_quote_site_id := NULL;
            IF v_quote_site_id IS NULL
            THEN
               PKG_SITE_R5.spi_quote_site (in_quoteheaderid      => in_quoteheaderid,
                                        in_siteid             => v_local_central_site,
                                        in_createdby          => in_createdby,
                                        out_status            => out_status,
                                        out_errmsg            => out_errmsg
                                       );
            END IF;
      END;
      IF    v_bfg_address_id IS NULL
         OR v_bfg_location_id IS NULL
         OR v_bfg_contact_id IS NULL
      THEN
         SELECT ibes.bfg_address_id, ibes.bfg_location_id,
                ibec.bfg_contact_id
           INTO v_bfg_address_id, v_bfg_location_id,
                v_bfg_contact_id
           FROM ivpn_bfg_expedio_sites ibes, ivpn_bfg_expedio_contacts ibec
          WHERE (   ibes.bfg_site_id = ibec.bfg_site_id
                 OR ibes.expedio_site_id = ibec.expedio_site_id
                )
            AND ibes.bfg_customer_id = in_bfg_customer_id
            AND ibec.ROLE = 'Site Primary Contact'
            AND sit_type = 'CENTRAL';
      ELSIF    v_bfg_address_id IS NOT NULL
            OR v_bfg_location_id IS NOT NULL
            OR v_bfg_contact_id IS NOT NULL
      THEN
         UPDATE site
            SET bfg_address_id = v_bfg_address_id,
                bfg_subloc_id = v_bfg_location_id,
                bfg_site_contact_id = v_bfg_contact_id
          WHERE site_id = v_local_central_site;
      ELSE
         RAISE e_invalid_product;
      END IF;
      out_sqesiteid := v_local_central_site;
      out_errmsg := 'SQE Central site available';
      out_status := 1;
      out_add_id := v_bfg_address_id;
      out_expedio_site_id := v_expedio_site_id;
      out_bfg_subloc_id := v_bfg_location_id;
      out_bfg_site_id := v_bfg_site_id;
      COMMIT;
--      RETURN; --Commet return stmt
   END IF;
EXCEPTION
   WHEN e_invalid_product
   THEN
      out_status := pkg_constants.con_status_failure;
      out_errmsg := 'BFG CONTACT IS NULL';
      pkg_common.spi_error_log (in_bfg_customer_id,
                                in_quoteheaderid,
                                NULL,
                                NULL,
                                NULL,
                                'spi_expedio_main_site',
                                v_sql_code,
                                out_errmsg
                               );
   WHEN OTHERS
   THEN
      out_status := pkg_constants.con_status_failure;
      out_errmsg := SQLERRM;
      pkg_common.spi_error_log (in_bfg_customer_id,
                                in_quoteheaderid,
                                NULL,
                                NULL,
                                NULL,
                                'spi_expedio_main_site',
                                v_sql_code,
                                out_errmsg
                               );
END spi_expedio_main_site;

procedure SPS_CRD_ORDER_SITE (
      IN_QUOTEHEADERID   in       QUOTE_HEADER.QUOTE_HEADER_ID%type,
      IN_PRODUCT_ID      in       PRODUCT_MASTER_DETAILS.PRODUCT_ID%type,
      IN_ORDERHEADERID   IN       ORDER_HEADER.ORDER_HEADER_ID%TYPE,
      out_site           OUT      sys_refcursor
   )
   AS
      v_cust_id      NUMBER (10);
      v_sql_code     NUMBER;
      v_sql_errm     VARCHAR2(150);
 begin
     open OUT_SITE for
          SELECT DISTINCT
            CASE
              WHEN S.BFG_SITE_ID IS NULL
              THEN S.EXPEDIO_SITE_ID
              ELSE TO_CHAR(S.BFG_SITE_ID)
            END AS "BFG_EXP_SITE ID",
            CASE
              WHEN UPPER(S.MAIN_SITE_FLAG)='Y'
              THEN 'Network Service'
              ELSE S.NAME
            END "SITE_NAME",
            S.SITE_ID AS "SQE_SITEID",
            LI.PRODUCT_NAME,
            TO_CHAR(OSD.CUSTOMER_REQUIRED_DATE,'DD-Mon-YYYY') AS CUSTOMER_REQUIRED_DATE
          FROM LINE_ITEM LI
          INNER JOIN PRODUCT_MASTER_DETAILS PMD
          ON UPPER(PMD.PRODUCT_NAME) =UPPER(LI.PRODUCT_NAME)
          AND LI.QUOTE_HEADER_ID     =IN_QUOTEHEADERID
          AND LI.ACTIVE              ='Y'
          AND PMD.PRODUCT_ID         =IN_PRODUCT_ID
          AND PMD.PARENT_GROUP_ID    =2
          AND PMD.ACTIVE             ='Y'
          AND PMD.PROD_FRIENDLY_ID  IN (350848,350845,350862,350864,350841,350860)
          INNER JOIN SITE S
          ON S.SITE_ID = LI.SITE_ID
          INNER JOIN ORDER_HEADER OH
          ON OH.QUOTE_HEADER_ID      = LI.QUOTE_HEADER_ID
          AND UPPER(OH.PRODUCT_NAME) ='BT MOBILEXPRESS'
          LEFT OUTER JOIN ORDER_SITE_DETAIL OSD
          ON OSD.SITE_ID         = LI.SITE_ID
          AND OH.ORDER_HEADER_ID = OSD.ORDER_HEADER_ID
          UNION
          SELECT DISTINCT
            CASE
              WHEN S.BFG_SITE_ID IS NULL
              THEN S.EXPEDIO_SITE_ID
              ELSE TO_CHAR(S.BFG_SITE_ID)
            END               AS "BFG_EXP_SITE ID",
            'Network Service' AS "SITE_NAME",
            S.SITE_ID         AS "SQE_SITEID",
            CASE
              WHEN LID.ATTRIBUTE_MAPPING_ID=3003
              THEN 'BT MobileXpress Toolkit'
              WHEN LID.ATTRIBUTE_MAPPING_ID=3005
              THEN 'BT MobileXpress Proxy RADIUS'
            END                                               AS "PRODUCT_NAME"
            ,TO_CHAR(OSD.CUSTOMER_REQUIRED_DATE,'DD-Mon-yyyy') as "CUSTOMER_REQUIRED_DATE"
          FROM LINE_ITEM LI
          INNER JOIN SITE S
          ON S.SITE_ID = LI.SITE_ID
          AND UPPER(LI.PRODUCT_NAME) ='BT MOBILEXPRESS' AND LI.ACTIVE='Y' AND QUOTE_HEADER_ID=IN_QUOTEHEADERID
          AND LI.ACTIVE='Y'
          INNER JOIN LINE_ITEM_DETAIL LID
          ON LID.LINE_ITEM_ID = LI.LINE_ITEM_ID AND LID.ACTIVE='Y' AND LID.ATTRIBUTE_MAPPING_ID IN(3003,3005)
          INNER JOIN ATTRIBUTE_MAPPING AM
          ON AM.ATTRIBUTE_MAPPING_ID = LID.ATTRIBUTE_MAPPING_ID AND AM.ACTIVE='Y'
          LEFT OUTER JOIN ORDER_SITE_DETAIL OSD
          ON OSD.SITE_ID=LI.SITE_ID AND OSD.ORDER_HEADER_ID=IN_ORDERHEADERID;
      EXCEPTION
                WHEN OTHERS
                THEN
                   DBMS_OUTPUT.put_line ('Exception');
         v_sql_errm := substr(SQLERRM,1,150);
         v_sql_code := SQLCODE;
         PKG_COMMON.spi_error_log(
                                  NULL,
                                  NULL,
                                  NULL,
                                  IN_QUOTEHEADERID,
                                  null,
                                  'PKG_SITE_R5.SPS_SSL_ORDER_SITE',
                                  v_sql_code,
                                  v_sql_errm
                                 );
   END SPS_CRD_ORDER_SITE;


END pkg_site_r5;
/


CREATE OR REPLACE PACKAGE PKG_ACTION_CODE_IVPN2
AS
/*------------------------------------------------------------------------------
   Name       : PKG_ACTION_CODE_IVPN2

   Purpose    : This package contains procedures for updating TECHNICAL
                ACTION CODES.
                The procedure updates the ACTION_CODE column in
                To_Be (LINE_ITEM, ORDER_LINE_ITEM,LINE_ITEM_DETAIL,
                ORDER_LINE_ITEM_DETAIL) and As_Is (QUOTE_LINE_ITEM_AS_IS,
                ORDER_LINE_ITEM_AS_IS, QUOTE_LINE_ITEM_DETAIL_AS_IS,
                ORDER_LINE_ITEM_DETAIL_AS_IS) tables for Technical Elements
                for Physical, Logical, Cease, Resilience, Resign scenarios

   Created on : 27-12-2010

   Reference  : SQE Action Code Logic_V1.5g.xls

  Modification History:
-------------------------------------------------------------------------------
  Ver                         Date                     Comments
-------------------------------------------------------------------------------
  1.0                      27-12-2010                Base Version

------------------------------------------------------------------------------*/

PROCEDURE spu_action_code (
   in_quote_header_id   IN       line_item.quote_header_id%TYPE,
   out_status           OUT      NUMBER,
   out_errmsg           OUT      VARCHAR2
   );

PROCEDURE spu_action_code_fallback (
   in_quote_header_id   IN       line_item.quote_header_id%TYPE,
   in_site_id           IN       line_item.site_id%TYPE,
   in_fallbck_asis      IN       VARCHAR2,
   in_fallbck_tobe      IN       VARCHAR2,
   out_status           OUT      NUMBER,
   out_errmsg           OUT      VARCHAR2,
   in_LOSB_flag         IN       VARCHAR2 DEFAULT 'N'  -- V1.5g implementation
   );

END PKG_ACTION_CODE_IVPN2;
/


CREATE OR REPLACE PACKAGE pkg_BCM_EXPORT
IS
/******************************************************************************
   NAME:       PRODSQE
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0      19/04/2010    Mahim         1. New SP SP_BCM_EXPORT

******************************************************************************/
Procedure SPI_BCM_EXPORT( in_quoteid NUMBER,in_quoteheaderid
NUMBER ,in_site_tbl IN    alList );

PROCEDURE sps_bcmexport (
      in_quoteid          IN       quote.quote_id%TYPE,
      in_quoteheaderid    IN       quote_header.quote_header_id%type,
      --in_siteid         IN       site.site_id%TYPE,
      out_values1         OUT      sys_refcursor,
      out_values21        OUT      sys_refcursor,
      out_values22        OUT      sys_refcursor,
      out_values3         OUT      sys_refcursor,
      -- Added below 2 out cursors on 7/9/2011
      out_bid_netw_serv   OUT      sys_refcursor,
      out_bid_non_std     OUT      sys_refcursor
   );


END pkg_BCM_EXPORT;
/


CREATE OR REPLACE package pkg_biddetail
as
PROCEDURE spi_bid_detail (
      in_quoteheaderid    IN       quote_header.quote_header_id%TYPE,
      in_siteid           IN       site.site_id%TYPE,
      in_productid        IN       bid_detail.product_id%TYPE,
      in_productname      IN       bid_detail.product_name%TYPE,
      in_requestname      IN       bid_detail.request_name%TYPE,
      in_custcommitted    IN       bid_detail.customer_committed%TYPE,
      in_custrequested    IN       bid_detail.customer_requested%TYPE,
      in_volforfeatures   IN       bid_detail.volume_for_features%TYPE,
      in_tier             IN       bid_detail.tier%TYPE,
      in_bidmgrname       IN       bid_detail.bid_manager_name%TYPE,
      in_winchance        IN       bid_detail.win_chance%TYPE,
      in_custvalue        IN       bid_detail.customer_value%TYPE,
      in_nsoc             IN       bid_detail.nsoc%TYPE,
      in_siebelid         IN       bid_detail.siebel_id%TYPE,
      in_ipnspocname      IN       bid_detail.ipn_spoc_name%TYPE,
      in_comments         IN       bid_detail.comments%TYPE,
      in_nonstdflag       IN       bid_detail.non_standard_flag%TYPE,
      in_createdby        IN       bid_detail.created_by%TYPE,
      in_no_of_ISDN_channels IN    bid_detail.no_of_ISDN_channels%TYPE,
      -- Added the below param on 28/7/2011 as part of R16
      in_currency         IN       bid_detail.currency%TYPE,
      out_status          OUT      NUMBER,
      out_errmsg          OUT      VARCHAR2
   );

    PROCEDURE spi_bid_request_status (
      in_quoteheaderid          IN       quote_header.quote_header_id%TYPE,
      in_siteid                 IN       site.site_id%TYPE,
      in_productid              IN       bid_detail.product_id%TYPE,
      in_productname            IN       bid_detail.product_name%TYPE,
      in_special_bid_number     IN       bid_request_status.special_bid_number%TYPE,
      in_BID_STATUS             IN       bid_request_status.BID_STATUS%TYPE,
      in_ACTIVATION_DUE_DATE   IN       bid_request_status.ACTIVATION_DUE_DATE%TYPE,
      in_ONE_TIME_INSTALL_COST  IN       bid_request_status.ONE_TIME_INSTALL_COST%TYPE,
      in_DATA_BUILD_DONE        IN       bid_request_status.DATA_BUILD_DONE%TYPE ,
      in_BID_EXPIRY_DATE        IN       bid_request_status.BID_EXPIRY_DATE%TYPE,
      in_MONTHLY_RECURRING_COST IN       bid_request_status.MONTHLY_RECURRING_COST%TYPE,
      in_non_std_bid_items      IN       bid_request_status.non_std_bid_items%TYPE,
      in_tpp_url                IN       bid_request_status.tpp_url%TYPE,
      in_ROW_ID                 IN       bid_request_status.row_id%TYPE,
      in_non_std_comp           IN       bid_request_status.non_std_comp%TYPE,
      in_instructions           IN       bid_request_status.instructions%TYPE,
    in_fallback_type_pri    IN     bid_request_status.fallback_type%TYPE,
      in_fallback_type_sec    IN     bid_request_status.fallback_type%TYPE,
      in_createdby              IN       bid_detail.created_by%TYPE,
      out_status                OUT      NUMBER,
      out_errmsg                OUT      VARCHAR2
      );

      PROCEDURE spd_bid_request_status (
       in_quoteheaderid          IN       quote_header.quote_header_id%TYPE,
      in_siteid                 IN       site.site_id%TYPE,
      in_productid              IN       bid_detail.product_id%TYPE,
      in_productname            IN       bid_detail.product_name%TYPE,
      in_non_std_bid_items      IN       bid_request_status.non_std_bid_items%TYPE,
      in_ROW_ID                 IN       bid_request_status.row_id%TYPE,
    in_non_std_comp           IN       bid_request_status.non_std_comp%TYPE,
      in_createdby              IN       bid_detail.created_by%TYPE,
      out_status                OUT      NUMBER,
      out_errmsg                OUT      VARCHAR2
      );

PROCEDURE spi_nonstd_configuration(
      in_quoteheaderid    IN       quote_header.quote_header_id%TYPE,
      in_siteid           IN       site.site_id%TYPE,
      in_attributelist    IN       CLOB,
      in_attributelevel   IN       attribute_mapping.attribute_level%TYPE,
      in_createdby        IN       line_item.created_by%TYPE,
      out_status          OUT      NUMBER,
      out_errmsg          OUT      VARCHAR2
   )  ;

PROCEDURE spi_nonstd_pricing (
      in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
      in_siteid          IN       line_item.site_id%TYPE,
      in_prodname        IN       line_item.product_name%TYPE,
      in_pricelinitm     IN       VARCHAR2,
      in_createdby       IN       price_line_item_detail.created_by%TYPE,
      out_status         OUT      NUMBER,
      out_errmsg         OUT      VARCHAR2
   );

-- Added on 30/3/2011 as part of multisite non-standard data bulkupload
PROCEDURE spi_bulkupload_bid_req_status (
      in_quoteheaderid       IN       quote_header.quote_header_id%TYPE,
      in_bid_req_stat        IN       bulkupload_bid_req_stat_tab,
      in_createdby           IN       bid_request_status.created_by%TYPE,
      out_status             OUT      NUMBER,
      out_errmsg             OUT      VARCHAR2
      );
END;
/


CREATE OR REPLACE PACKAGE PKG_BOM_GEN
AS
/******************************************************************************
   NAME:       SQE
   PURPOSE:

   REVISIONS:
   Ver        Date        Author          Description
   ---------  ----------  ---------------  ------------------------------------
   1.0      22/07/2009    SRK            1. Package for Generating the BOM which will submit the order to Expedio
                                            and receiving the response from Expedio
 ******************************************************************************/

   PROCEDURE sps_order_request (
      in_quoteid          IN       quote.quote_id%TYPE,
      in_quoteheaderid    IN       quote_header.quote_header_id%TYPE,
      in_qhversion        IN       quote_header.VERSION%TYPE,
      out_order_request   OUT      sys_refcursor
   );

   PROCEDURE sps_site_request (
      in_quoteid         IN       quote.quote_id%TYPE,
      in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
      in_qhversion       IN       quote_header.VERSION%TYPE,
      in_site_list       IN       VARCHAR2,  -- added for fetch info based on selected sites- BK-
      out_site_request   OUT      sys_refcursor
   );

     PROCEDURE sps_ivpn2_attr_request (
   in_quoteid               IN       quote.quote_id%TYPE,
   in_quoteheaderid         IN       quote_header.quote_header_id%TYPE,
   in_qhversion             IN       quote_header.VERSION%TYPE,
  --- in_productid             IN       line_item.product_id%TYPE,
  in_site_list       IN       VARCHAR2,-- added for fetch info based on selected sites- BK-
   in_productname           IN       line_item.product_name%TYPE,
   out_ivpn2_attr_request   OUT      sys_refcursor
);

   PROCEDURE sps_ivpn2_pricing (
      in_quoteid          IN       quote.quote_id%TYPE,
      in_quoteheaderid    IN       quote_header.quote_header_id%TYPE,
      in_qhversion             IN       quote_header.VERSION%TYPE,
      in_site_list             IN       VARCHAR2 ,-- added for fetch info based on selected sites
      --in_productid        IN       line_item.product_id%TYPE,
      in_productname      IN       line_item.product_name%TYPE,
      out_ivpn2_pricing   OUT      sys_refcursor
   );

   PROCEDURE sps_billdetailsinfo (
      in_quoteid         IN       quote.quote_id%TYPE,
      in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
      in_qhversion        IN       quote_header.VERSION%TYPE,
      out_core           OUT      sys_refcursor,
      out_access         OUT      sys_refcursor,
      out_cpe            OUT      sys_refcursor,
      out_port           OUT      sys_refcursor,
      out_servicewrap    OUT      sys_refcursor
   );
     PROCEDURE sps_ivpn2_special_bid_details (
   in_quoteid               IN       quote.quote_id%TYPE,
   in_quoteheaderid         IN       quote_header.quote_header_id%TYPE,
   in_qhversion             IN       quote_header.VERSION%TYPE,
   in_site_list             IN       VARCHAR2 ,-- added for fetch info based on selected sites
  --- in_productid             IN       line_item.product_id%TYPE,
   in_productname           IN       line_item.product_name%TYPE,
   out_ivpn2_special_bid   OUT      sys_refcursor
);

PROCEDURE sps_ivpn2_nni_order_info  (
   in_quoteid                     IN       quote.quote_id%TYPE,
   in_quoteheaderid               IN       quote_header.quote_header_id%TYPE,
   in_qhversion                   IN       quote_header.VERSION%TYPE,
   in_site_list                   IN       VARCHAR2 ,-- added for fetch info based on selected sites- BK-
   out_ivpn2_nni_order_info       OUT      sys_refcursor
);


END pkg_bom_gen;
/


CREATE OR REPLACE package pkg_bom_gen_mx as
/******************************************************************************
   NAME:       SQE
   PURPOSE:
   REVISIONS:
   Ver        Date        Author          Description
   ---------  ----------  ---------------  ------------------------------------
   1.0      16/03/2011    Suman            1. Package for Generating the BOM which will submit the order to Expedio
                                            and receiving the response from Expedio sps_mg_attr,sps_mg_pricing,sps_contact_info_mx
 ******************************************************************************/

  PROCEDURE sps_order_request (
      in_quoteid         IN       quote.quote_id%TYPE,
      in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
      in_qhversion      IN       quote_header.VERSION%TYPE,
      in_main_site_flag  IN       site.main_site_flag%TYPE,
      out_order_request  out      sys_refcursor
   );



 PROCEDURE sps_mg_attr (
      in_quoteid         IN       quote.quote_id%TYPE,
      in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
      in_productid       IN       line_item.product_id%TYPE,
      in_productname     IN       line_item.product_name%TYPE,
      out_mg_attr        OUT      sys_refcursor
   );

  PROCEDURE sps_mg_pricing (
      in_quoteid         IN       quote.quote_id%TYPE,
      in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
      in_productid       IN       line_item.product_id%TYPE,
      in_productname     IN       line_item.product_name%TYPE,
      out_mg_pricing     OUT      sys_refcursor
   );

  PROCEDURE sps_contact_info_mx (
      in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
      in_order_header_id IN       order_header.order_header_id%TYPE,
      in_bfg_customer_id IN       customer.bfg_customer_id%TYPE,
      in_productid       IN       line_item.product_id%TYPE,
      in_productname     IN       line_item.product_name%TYPE,
      OUT_CONT_INFO_MX   OUT      SYS_REFCURSOR
   );

   PROCEDURE sps_getorderconfflag (
      in_quoteid         IN       quote.quote_id%TYPE,
      in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
      in_order_header_id IN       order_header.order_header_id%TYPE,
      GETINFOSELECT      OUT      SYS_REFCURSOR
   );

   procedure SPS_SITE_REQUEST (
        in_quoteid           IN       quote.quote_id%type,
        in_quoteheaderid     IN       quote_header.quote_header_id%type,
        IN_QHVERSION         in       QUOTE_HEADER.version%type,
        OUT_SITE_REQUEST     OUT      SYS_REFCURSOR
   );

   PROCEDURE sps_usage_base_price (
      in_quoteid         IN       quote.quote_id%TYPE,
      in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
      in_productid       IN       line_item.product_id%TYPE,
      in_productname     IN       line_item.product_name%TYPE,
      OUT_USAGE_PRICING     OUT      SYS_REFCURSOR
   );

	 PROCEDURE SPU_ORDER_CONTACT_MX_ROLE_ID (
    IN_QUOTE_HEADER_ID      IN VARCHAR2,
    IN_QUOTE_VERSION_ID     IN VARCHAR2,
    IN_PRODUCT_NAME             IN VARCHAR2,
    IN_CONTACT_ROLE             IN VARCHAR2,
    IN_BFG_SITE_ID             IN NUMBER,
    IN_BFG_ADDRESS_ID         IN VARCHAR2,
    IN_BFG_CNT_ID                 IN NUMBER,
    IN_BFG_CNR_ID                 IN NUMBER,
    OUT_STATUS              OUT      NUMBER,
    OUT_ERRMSG              OUT      VARCHAR2
    );
end pkg_bom_gen_mx;
/


CREATE OR REPLACE PACKAGE BODY PKG_ACTION_CODE_IVPN2
AS
/*------------------------------------------------------------------------------
   Name       : PKG_ACTION_CODE_IVPN2

   Purpose    : This package contains procedures for updating TECHNICAL
                ACTION CODES.
                The procedure updates the ACTION_CODE column in
                To_Be (LINE_ITEM, ORDER_LINE_ITEM,LINE_ITEM_DETAIL,
                ORDER_LINE_ITEM_DETAIL) and As_Is (QUOTE_LINE_ITEM_AS_IS,
                ORDER_LINE_ITEM_AS_IS, QUOTE_LINE_ITEM_DETAIL_AS_IS,
                ORDER_LINE_ITEM_DETAIL_AS_IS) tables for Technical Elements
                for Physical, Logical, Cease, Resilience, Resign scenarios

   Created on : 27-12-2010

   Reference  : SQE Action Code Logic_V1.5g.xls

  Modification History:
-------------------------------------------------------------------------------
  Ver                         Date                     Comments
-------------------------------------------------------------------------------
  1.0                      27-12-2010                Base Version

------------------------------------------------------------------------------*/

PROCEDURE spu_action_code (
   in_quote_header_id   IN       line_item.quote_header_id%TYPE,
   out_status           OUT      NUMBER,
   out_errmsg           OUT      VARCHAR2
)
AS

   v_count                         NUMBER;
   v_site_id                       line_item.site_id%TYPE;
   v_resilient_option_tobe         VARCHAR2 (5);
   v_resilient_option_asis         VARCHAR2 (5);
   v_resiliency_asis               VARCHAR2 (250);
   v_resiliency_tobe               VARCHAR2 (250);
   v_lid_asis                      quote_line_item_as_is.line_item_id%TYPE;
   v_lid_tobe                      line_item.line_item_id%TYPE;
   v_resilency_flag                NUMBER    := 0;
   v_order_header_id               order_header.order_header_id%TYPE;
   v_sql_code                      VARCHAR2 (2000);

   -- Site_Id
   CURSOR c_site_id
   IS
      SELECT DISTINCT site_id
       FROM line_item
       WHERE quote_header_id = in_quote_header_id
       AND active            = 'Y'
       AND site_id           IS NOT NULL;

   -- Resiliency  - As_Is - 1
   CURSOR cur_resiliency_asis
   IS
      SELECT qld.VALUE
       FROM quote_line_item_detail_as_is qld
       WHERE active = 'Y'
       AND line_item_id IN (SELECT l.line_item_id
                            FROM quote_line_item_as_is l
                            WHERE l.active        = 'Y'
                            AND l.quote_header_id = in_quote_header_id
                            AND l.site_id         = v_site_id)
       AND attribute_mapping_id = 1 -- Standard, Standard Unbundled, Secure, Secure+, Access Backup
       AND qld.VALUE IS NOT NULL;

BEGIN

   FOR site_id_rec IN c_site_id
   LOOP
      v_site_id := site_id_rec.site_id;
      BEGIN
         -- To_Be
         SELECT NVL(lid.VALUE, 'NO')
           INTO v_resilient_option_tobe
           FROM line_item_detail lid,
                line_item li
          WHERE lid.line_item_id         = li.line_item_id
            AND li.quote_header_id       = in_quote_header_id
            AND li.site_id               = v_site_id
            AND li.active                = 'Y'
            AND lid.active               = 'Y'
            AND lid.attribute_mapping_id = 1213; -- Yes, No

      EXCEPTION
         WHEN OTHERS THEN
            out_status := pkg_constants.con_status_failure;
            out_errmsg := SUBSTR (SQLERRM, 1, 150);
            v_sql_code := SQLCODE;
            pkg_common.spi_error_log (NULL,
                                      in_quote_header_id,
                                      v_site_id,
                                      'Resilient_Option_tobe is NULL',
                                      'PKG_ACTION_CODE_IVPN2',
                                      'SPU_ACTION_CODE',
                                      v_sql_code,
                                      out_errmsg
                                      );
      END;


      BEGIN

          SELECT lid.VALUE
           INTO v_resiliency_tobe
           FROM line_item_detail lid,
                line_item li
          WHERE lid.line_item_id         = li.line_item_id
            AND li.quote_header_id       = in_quote_header_id
            AND li.site_id               = v_site_id
            AND li.active                = 'Y'
            AND lid.active               = 'Y'
            AND lid.attribute_mapping_id = 1; -- Standard, Standard Unbundled, Secure, Secure+, Access Backup

      EXCEPTION
         WHEN OTHERS THEN
            out_status := pkg_constants.con_status_failure;
            out_errmsg := SUBSTR (SQLERRM, 1, 150);
            v_sql_code := SQLCODE;
            pkg_common.spi_error_log (NULL,
                                      in_quote_header_id,
                                      v_site_id,
                                      'resiliency is NULL',
                                      'PKG_ACTION_CODE_IVPN2',
                                      'SPU_ACTION_CODE',
                                      v_sql_code,
                                      out_errmsg
                                      );
      END;

      IF UPPER (v_resilient_option_tobe) = 'NO' THEN
          FOR rec_resiliency_asis IN cur_resiliency_asis
          LOOP
              IF UPPER(rec_resiliency_asis.value) IN ('STANDARD', 'STANDARD - UNBUNDLED') THEN
                  IF UPPER(v_resiliency_tobe) IN ('SECURE', 'SECURE+', 'ACCESS BACKUP') THEN

                      UPDATE line_item l
                      SET action_code           = 'Add'
                      WHERE l.active            = 'Y'
                      AND l.quote_header_id     = in_quote_header_id
                      AND l.site_id             = v_site_id
                      AND UPPER (product_name)  <> 'BT IVPN2 GLOBAL'
                      AND UPPER (fallback_type) = 'SECONDARY'
                      AND active                = 'Y';


                       UPDATE order_line_item l
                       SET  l.action_code = 'Add'
                      WHERE l.active      = 'Y'
                       AND l.order_header_id IN ( SELECT DISTINCT order_header_id
                                                 FROM order_header
                                                WHERE quote_header_id = in_quote_header_id)
                       AND l.site_id              = v_site_id
                       AND UPPER (l.product_name) <> 'BT IVPN2 GLOBAL'
                       AND UPPER (l.fallback_type) = 'SECONDARY';

                       UPDATE line_item_detail lid
                         SET lid.action_code = 'Add'
                       WHERE lid.line_item_id IN (
                                SELECT DISTINCT li.line_item_id
                                           FROM line_item li
                                          WHERE UPPER (li.action_code)  = 'ADD'
                                            AND li.active               = 'Y'
                                            AND li.quote_header_id      = in_quote_header_id
                                            AND li.site_id              = v_site_id
                                            AND UPPER (li.product_name) <> 'BT IVPN2 GLOBAL'
                                            AND UPPER (li.fallback_type) = 'SECONDARY');

                       UPDATE order_line_item_detail
                       SET  action_code = 'Add'
                        WHERE order_line_item_id IN (SELECT DISTINCT order_line_item_id
                                                    FROM order_line_item l
                                                    WHERE l.active      = 'Y'
                                                    AND l.order_header_id IN
                                                        (SELECT DISTINCT order_header_id
                                                          FROM order_header
                                                          WHERE quote_header_id = in_quote_header_id)
                                                    AND l.site_id              = v_site_id
                                                    AND UPPER (l.product_name) <> 'BT IVPN2 GLOBAL'
                                                    AND UPPER (l.fallback_type) = 'SECONDARY'
                                                    AND UPPER (l.action_code)  = 'ADD')
                       AND active = 'Y';

                      spu_action_code_fallback (in_quote_header_id,
                                   v_site_id,
                                   'PRIMARY',  -- as_is fallback_type
                                   'PRIMARY',  -- to_be fallback_type
                                   out_status,
                                   out_errmsg);

                    END IF;
                END IF;
          END LOOP;



      ELSIF UPPER (v_resilient_option_tobe) = 'YES' THEN

          FOR rec_resiliency_asis IN cur_resiliency_asis
          LOOP
              IF UPPER(rec_resiliency_asis.value) IN ('STANDARD', 'STANDARD - UNBUNDLED') THEN
                  IF UPPER(v_resiliency_tobe) IN ('SECURE', 'SECURE+', 'ACCESS BACKUP') THEN

                     UPDATE line_item l
                      SET action_code           = 'Add'
                      WHERE l.active            = 'Y'
                      AND l.quote_header_id     = in_quote_header_id
                      AND l.site_id             = v_site_id
                      AND UPPER (product_name)  <> 'BT IVPN2 GLOBAL'
                      AND UPPER (fallback_type) = 'PRIMARY'
                      AND active                = 'Y';


                      UPDATE order_line_item l
                       SET     l.action_code = 'Add'
                      WHERE l.active      = 'Y'
                       AND l.order_header_id IN ( SELECT DISTINCT order_header_id
                                                 FROM order_header
                                                WHERE quote_header_id = in_quote_header_id)
                       AND l.site_id              = v_site_id
                       AND UPPER (l.product_name) <> 'BT IVPN2 GLOBAL'
                       AND UPPER (l.fallback_type) = 'PRIMARY';


                       UPDATE line_item_detail lid
                         SET lid.action_code = 'Add'
                       WHERE lid.line_item_id IN (
                                SELECT DISTINCT li.line_item_id
                                           FROM line_item li
                                          WHERE UPPER (li.action_code)  = 'ADD'
                                            AND li.active               = 'Y'
                                            AND li.quote_header_id      = in_quote_header_id
                                            AND li.site_id              = v_site_id
                                            AND UPPER (li.product_name) <> 'BT IVPN2 GLOBAL'
                                            AND UPPER (li.fallback_type) = 'PRIMARY')
                       AND lid.active = 'Y';

                       UPDATE order_line_item_detail
                       SET  action_code = 'Add'
                        WHERE order_line_item_id IN (SELECT DISTINCT order_line_item_id
                                                    FROM order_line_item l
                                                    WHERE l.active      = 'Y'
                                                    AND l.order_header_id IN
                                                        (SELECT DISTINCT order_header_id
                                                          FROM order_header
                                                          WHERE quote_header_id = in_quote_header_id)
                                                    AND l.site_id              = v_site_id
                                                    AND UPPER (l.product_name) <> 'BT IVPN2 GLOBAL'
                                                    AND UPPER (l.fallback_type) = 'PRIMARY'
                                                    AND UPPER (l.action_code)  = 'ADD')
                       AND active = 'Y';

                       spu_action_code_fallback (in_quote_header_id,
                                                  v_site_id,
                                                 'PRIMARY',   -- as_is fallback_type
                                                 'SECONDARY', -- to_be fallback_type
                                                  out_status,
                                                  out_errmsg,
                                                  'Y');       -- V1.5g implementation

                  END IF;
              END IF;
          END LOOP;
      END IF;


      FOR rec_resiliency_asis IN cur_resiliency_asis
      LOOP

          IF UPPER(rec_resiliency_asis.value) IN ('SECURE', 'SECURE+', 'ACCESS BACKUP') THEN
              IF UPPER(v_resiliency_tobe) IN ('STANDARD', 'STANDARD - UNBUNDLED')  THEN

                  UPDATE quote_line_item_as_is l
                  SET action_code           = 'Delete'
                  WHERE l.active            = 'Y'
                  AND l.quote_header_id     = in_quote_header_id
                  AND l.site_id             = v_site_id
                  AND UPPER (product_name)  <> 'BT IVPN2 GLOBAL'
                  AND UPPER (fallback_type) = 'SECONDARY'
                  AND active                = 'Y';


                   UPDATE order_line_item_as_is li
                     SET action_code     = 'Delete'
                   WHERE quote_header_id = in_quote_header_id
                   AND li.site_id              = v_site_id
                   AND UPPER (li.product_name) <> 'BT IVPN2 GLOBAL'
                   AND UPPER (li.fallback_type) = 'SECONDARY'
                   AND li.active                = 'Y';


                  UPDATE quote_line_item_detail_as_is qlid
                   SET action_code  = 'Delete'
                   WHERE line_item_id IN (SELECT DISTINCT li.line_item_id
                                          FROM quote_line_item_as_is li
                                          WHERE li.quote_header_id    = in_quote_header_id
                                          AND li.site_id              = v_site_id
                                          AND UPPER (li.product_name) <> 'BT IVPN2 GLOBAL'
                                          AND UPPER (li.fallback_type) = 'SECONDARY'
                                          AND active                   = 'Y'
                                          AND UPPER (li.action_code)  = 'DELETE')
                     AND qlid.active = 'Y';

                  UPDATE order_line_item_detail_as_is qlid
                     SET action_code = 'Delete'
                   WHERE order_line_item_id IN (SELECT DISTINCT order_line_item_id
                                                FROM order_line_item_as_is li
                                                WHERE quote_header_id       = in_quote_header_id
                                                AND li.site_id              = v_site_id
                                                AND UPPER (li.product_name) <> 'BT IVPN2 GLOBAL'
                                                AND li.active               = 'Y'
                                                AND UPPER(li.fallback_type) = 'SECONDARY'
                                                AND UPPER (li.action_code)  = 'DELETE')
                     AND qlid.active = 'Y';

                  spu_action_code_fallback (in_quote_header_id,
                                            v_site_id,
                                            'PRIMARY', -- as_is fallback_type
                                            'PRIMARY', -- to_be fallback_type
                                            out_status,
                                            out_errmsg,
                                            'Y');      -- V1.5g implementation

                END IF;
            END IF;
      END LOOP;

      FOR rec_resiliency_asis IN cur_resiliency_asis
      LOOP

          IF ( UPPER(rec_resiliency_asis.value) IN ('STANDARD', 'STANDARD - UNBUNDLED') AND
               UPPER(v_resiliency_tobe) IN ('STANDARD', 'STANDARD - UNBUNDLED')) THEN

                spu_action_code_fallback (in_quote_header_id,
                             v_site_id,
                             'PRIMARY', -- as_is fallback_type
                             'PRIMARY', -- to_be fallback_type
                             out_status,
                             out_errmsg);

          ELSIF ( UPPER(rec_resiliency_asis.value) IN ('SECURE', 'SECURE+', 'ACCESS BACKUP') AND
                  UPPER(v_resiliency_tobe) IN ('SECURE', 'SECURE+', 'ACCESS BACKUP') )  THEN

                spu_action_code_fallback (in_quote_header_id,
                              v_site_id,
                              'PRIMARY', -- as_is fallback_type
                              'PRIMARY', -- to_be fallback_type
                              out_status,
                              out_errmsg);

                spu_action_code_fallback (in_quote_header_id,
                              v_site_id,
                              'SECONDARY', -- as_is fallback_type
                              'SECONDARY', -- to_be fallback_type
                              out_status,
                              out_errmsg);
          END IF;
      END LOOP;

   END LOOP;-- site_id

   COMMIT;
   out_status := 1;
   out_errmsg := 'Success';

EXCEPTION
   WHEN OTHERS THEN
      out_status := pkg_constants.con_status_failure;
      out_errmsg := SUBSTR (SQLERRM, 1, 150);
      v_sql_code := SQLCODE;
      pkg_common.spi_error_log (NULL,
                                in_quote_header_id,
                                v_site_id,
                                NULL,
                                'PKG_ACTION_CODE_IVPN2',
                                'SPU_ACTION_CODE',
                                v_sql_code,
                                out_errmsg
                               );
END spu_action_code;

PROCEDURE spu_action_code_fallback (
   in_quote_header_id   IN       line_item.quote_header_id%TYPE,
   in_site_id           IN       line_item.site_id%TYPE,
   in_fallbck_asis      IN       VARCHAR2,
   in_fallbck_tobe      IN       VARCHAR2,
   out_status           OUT      NUMBER,
   out_errmsg           OUT      VARCHAR2,
   in_LOSB_flag         IN       VARCHAR2 DEFAULT 'N')
AS
   v_count                         NUMBER;
   v_site_id                       line_item.site_id%TYPE;
   v_vpn                           NUMBER;
   v_rout_type                     NUMBER;
   v_ckt                           NUMBER;
   v_lid                           line_item.line_item_id%TYPE;
   v_lid_asis                      quote_line_item_as_is.line_item_id%TYPE;
   v_cos                           NUMBER;
   v_cos1                          NUMBER;
   v_port                          NUMBER                                := 0;
   v_cosattr                       NUMBER                                := 0;
   v_cosattr_order                 NUMBER                                := 0;
   v_bundl                         NUMBER                                := 0;
   v_bandwth                       NUMBER                                := 0;
   v_dsl                           NUMBER                                := 0;
   v_dsl_typ                       NUMBER                                := 0;
   v_dsl_ratio                     NUMBER                                := 0;
   v_dsl_var                       NUMBER                                := 0;
   v_router_bndl                   NUMBER                                := 0;
   v_mss_vpn_id                    NUMBER                                := 0;
   v_cpe_count                     NUMBER                                := 0;
   v_order_type                    NUMBER                                := 0;
   v_portspeed_coscust_count       NUMBER                                := 0;
   v_cos_ass_att_action_code_cnt   NUMBER                                := 0;
   v_cos_ass_att_action_code_cnt1  NUMBER                                := 0;
   v_cos_ass_att_action_code_cnt2  NUMBER                                := 0;
   v_cos_ass_att_action_code_cnt3  NUMBER                                := 0;
   v_as_is_vpn_count               NUMBER                                := 0;
   v_to_be_vpn_count               NUMBER                                := 0;
   v_max_to_be_row_id              NUMBER                                := 0;
   v_max_as_is_row_id              NUMBER                                := 0;
   v_mmsvpn_id_count               NUMBER;
   v_order_header_id               NUMBER;
   v_access_tech                   NUMBER                                := 0;
   v_access_tech1                  NUMBER                                := 0;
   v_bgp_prefix                    NUMBER                                := 0;
   v_routing_bgp_prefix            NUMBER                                := 0;
   v_total_no_vpn                  NUMBER                                := 0;
   v_global_cos_attr               NUMBER                                := 0;
   v_access_tech2                  NUMBER                                := 0;
   v_port_pricing                  NUMBER                                := 0;
   v_port_pricing_type             NUMBER                                := 0;
   v_MPLS_session                  NUMBER                                := 0;
   v_MPLS                          NUMBER                                := 0;
   v_portspeed_totvpn_dsl_count    NUMBER                                := 0;
   v_reach_nni_count               NUMBER                                := 0;
   v_port_dsl_count                NUMBER                                := 0;
   v_access_tech3                  NUMBER                                := 0;
   v_portspeed_totvpn              NUMBER                                := 0;
   v_port_cos_attr1                NUMBER                                := 0;
   v_port_cos_attr2                NUMBER                                := 0;
   v_vpn_cos_attr1                 NUMBER                                := 0;
   v_vpn_cos_attr2                 NUMBER                                := 0;
   v_LOSB                          NUMBER                                := 0;
   v_Resign                        NUMBER                                := 0;
   v_port_reconfig                 NUMBER                                := 0;
   v_access_tech4                  NUMBER                                := 0;
   v_access_tech5                  NUMBER                                := 0;
   v_access_tech6                  NUMBER                                := 0;
   v_num_e1_or_t1                  NUMBER                                := 0;
   v_access_type_count             NUMBER                                := 0;
   v_frf_16                        NUMBER                                := 0;
   v_access_service_id1            NUMBER                                := 0;
   v_access_service_id1_asis       NUMBER                                := 0;
   v_access_service_id2            NUMBER                                := 0;
   v_access_service_id2_asis       NUMBER                                := 0;
   v_access_service_id3            NUMBER                                := 0;
   v_access_service_id3_asis       NUMBER                                := 0;
   v_global_cos_attr1              NUMBER                                := 0;
   v_bundle_degradation            NUMBER                                := 0;
   v_access_type                   NUMBER                                := 0;
   v_access_type_cnt1              NUMBER                                := 0;
   v_frf_port                      NUMBER                                := 0;
   v_sql_code                      VARCHAR2 (2000);

   -- Site_Id
   CURSOR c_site_id
   IS
      SELECT DISTINCT site_id
        FROM line_item
       WHERE quote_header_id = in_quote_header_id
         AND site_id         = in_site_id
         AND active          = 'Y'
         AND site_id         IS NOT NULL
         AND UPPER(fallback_type) = in_fallbck_tobe;


   -- Access Circuit - 1214
   CURSOR cur_acc_ckt
   IS
      SELECT qld.VALUE
        FROM quote_line_item_detail_as_is qld
       WHERE active = 'Y'
         AND line_item_id IN (
                SELECT l.line_item_id
                  FROM quote_line_item_as_is l
                 WHERE l.active = 'Y'
                   AND l.quote_header_id = in_quote_header_id
                   AND l.site_id = v_site_id
                   AND UPPER(l.fallback_type) = in_fallbck_asis)
         AND attribute_mapping_id = 1214
         AND qld.VALUE IS NOT NULL;

   -- CoS Assignment - 203
   CURSOR cur_cos
   IS
      SELECT qld.VALUE
        FROM quote_line_item_detail_as_is qld
       WHERE active = 'Y'
         AND line_item_id IN (
                SELECT l.line_item_id
                  FROM quote_line_item_as_is l
                 WHERE l.active = 'Y'
                   AND UPPER (l.product_name) IN
                                 ('BT IVPN2 PORT', 'BT IVPN2 VPN CONNECTION')
                   AND l.quote_header_id = in_quote_header_id
                   AND l.site_id = v_site_id
                   AND UPPER(l.fallback_type) = in_fallbck_asis)
         AND attribute_mapping_id = 203
         AND qld.VALUE IS NOT NULL;

   -- CoS Assignment_to_be - 203
   CURSOR cur_cos_to_be
   IS
      SELECT qld.VALUE
        FROM line_item_detail qld
       WHERE active = 'Y'
         AND line_item_id IN (
                SELECT l.line_item_id
                  FROM line_item l
                 WHERE l.active = 'Y'
                   AND UPPER (l.product_name) IN ('BT IVPN2 PORT', 'BT IVPN2 VPN CONNECTION')
                   AND l.quote_header_id = in_quote_header_id
                   AND l.site_id         = v_site_id
                   AND UPPER(fallback_type)     = in_fallbck_tobe)
         AND attribute_mapping_id = 203
         AND qld.VALUE IS NOT NULL;


   -- BT MPLS NO. OF BGP SESSIONS - 242
   CURSOR cur_MPLS_sessions
   IS
      SELECT qld.VALUE
        FROM quote_line_item_detail_as_is qld
       WHERE active = 'Y'
         AND line_item_id IN (
                SELECT l.line_item_id
                  FROM quote_line_item_as_is l
                 WHERE l.active = 'Y'
                   AND l.quote_header_id      = in_quote_header_id
                   AND l.site_id              = v_site_id
                   AND UPPER(l.fallback_type) = in_fallbck_asis)
         AND attribute_mapping_id = 242
         AND qld.VALUE IS NOT NULL;


   -- PORT PRICING TYPE - 2
   CURSOR cur_port_pricing_type
   IS
      SELECT qld.VALUE
        FROM quote_line_item_detail_as_is qld
       WHERE active = 'Y'
         AND line_item_id IN (
                SELECT l.line_item_id
                  FROM quote_line_item_as_is l
                 WHERE l.active               = 'Y'
                   AND l.quote_header_id      = in_quote_header_id
                   AND l.site_id              = v_site_id
                   AND UPPER(l.fallback_type) = in_fallbck_asis)
         AND attribute_mapping_id = 2
         AND qld.VALUE IS NOT NULL;

   -- PORT Speed - 8 -- 11
   CURSOR cur_port
   IS
      SELECT qld.VALUE
        FROM quote_line_item_detail_as_is qld
       WHERE active = 'Y'
         AND line_item_id IN (
                SELECT l.line_item_id
                  FROM quote_line_item_as_is l
                 WHERE l.active = 'Y'
                   AND l.quote_header_id = in_quote_header_id
                   AND l.site_id         = v_site_id
                   AND UPPER(l.fallback_type)   = in_fallbck_asis)
         AND attribute_mapping_id = 11 --8
         AND qld.VALUE IS NOT NULL;

   -- CoS Attributes - (1104,1105, 1106,1107,1108,1109,210,211,212,213,
                    -- 1110,1111,1112,1113,209,1103,1114,1102,215,202,1101,1125, 1126, 1127, 1128, 1129)
   CURSOR cur_cosattr
   IS
      SELECT qld.attribute_mapping_id, qld.VALUE, row_id
        FROM quote_line_item_detail_as_is qld
       WHERE active = 'Y'
         AND line_item_id IN (
                SELECT l.line_item_id
                  FROM quote_line_item_as_is l
                 WHERE l.active = 'Y'
                   AND l.quote_header_id        = in_quote_header_id
                   AND l.site_id                = v_site_id
                   AND UPPER(l.fallback_type)   = in_fallbck_asis)
         AND attribute_mapping_id IN (210, 211, 212, 213, 209, 215, 202,214)
         AND qld.VALUE IS NOT NULL
      UNION ALL
      SELECT qld.attribute_mapping_id, qld.VALUE, l.row_id
        FROM order_line_item_detail_as_is qld, order_line_item_as_is l
       WHERE qld.active             = 'Y'
         AND qld.order_line_item_id = l.order_line_item_id
         AND l.active               = 'Y'
         AND l.quote_header_id      = in_quote_header_id
         AND l.site_id              = v_site_id
         AND UPPER(l.fallback_type) = in_fallbck_asis
         AND attribute_mapping_id IN
                (1104,1105,1106,1107,1108,1109,1110,1111,1112,1113,1103,1114,1102,1101,1125, 1126, 1127, 1128, 1129, 1115, 1130)
         AND qld.VALUE IS NOT NULL;

   /*
   CURSOR cur_cosattr
   IS
      SELECT qld.attribute_mapping_id, qld.VALUE
        FROM quote_line_item_detail_as_is qld
       WHERE active = 'Y'
         AND line_item_id IN (
                SELECT l.line_item_id
                  FROM quote_line_item_as_is l
                 WHERE l.active = 'Y'
                   AND l.quote_header_id = in_quote_header_id
                   AND l.site_id         = v_site_id
                   AND UPPER(l.fallback_type)   = in_fallbck_asis)
         AND attribute_mapping_id IN (210, 211, 212, 213, 209, 215, 202,214)
         AND qld.VALUE IS NOT NULL
      UNION
      SELECT qld.attribute_mapping_id, qld.VALUE
        FROM order_line_item_detail_as_is qld
       WHERE active = 'Y'
         AND order_line_item_id IN (
                SELECT l.order_line_item_id
                  FROM order_line_item_as_is l
                 WHERE l.active = 'Y'
                   AND l.quote_header_id = in_quote_header_id
                   AND l.site_id         = v_site_id
                   AND UPPER(l.fallback_type)   = in_fallbck_asis)
         AND attribute_mapping_id IN
                (1104,1105,1106,1107,1108,1109,1110,1111,1112,1113,1103,1114,1102,1101,1125, 1126, 1127, 1128, 1129, 1115, 1130)
         AND qld.VALUE IS NOT NULL;

    */

   -- Router Bundle Prod Key - 14
   CURSOR cur_rout_prod
   IS
      SELECT qld.attribute_mapping_id, qld.VALUE
        FROM quote_line_item_detail_as_is qld
       WHERE active = 'Y'
         AND line_item_id IN (
                SELECT l.line_item_id
                  FROM quote_line_item_as_is l
                 WHERE l.active = 'Y'
                   AND l.quote_header_id = in_quote_header_id
                   AND l.site_id         = v_site_id
                   AND UPPER(l.fallback_type) = in_fallbck_asis)
         AND attribute_mapping_id = 14
         AND qld.VALUE IS NOT NULL;


   -- Routing Type - 216
   CURSOR cur_rout_type
   IS
      SELECT qld.line_item_id,qld.VALUE
        FROM quote_line_item_detail_as_is qld
       WHERE active = 'Y'
         AND line_item_id IN (
                SELECT l.line_item_id
                  FROM quote_line_item_as_is l
                 WHERE l.active = 'Y'
                   AND l.quote_header_id = in_quote_header_id
                   AND l.site_id         = v_site_id
                   AND UPPER(l.fallback_type)   = in_fallbck_asis)
         AND attribute_mapping_id IN (216)
         AND qld.VALUE IS NOT NULL
         AND UPPER(qld.action_code) <> 'DELETE';

   -- Routing Type_To_Be - 216
   CURSOR cur_rout_type_tobe
   IS
      SELECT qld.line_item_id,qld.VALUE
        FROM line_item_detail qld
       WHERE active = 'Y'
         AND line_item_id IN (
                SELECT l.line_item_id
                  FROM line_item l
                 WHERE l.active = 'Y'
                   AND l.quote_header_id = in_quote_header_id
                   AND l.site_id         = v_site_id
                   AND UPPER(l.fallback_type)   = in_fallbck_tobe)
         AND attribute_mapping_id IN (216)
         AND qld.VALUE IS NOT NULL
         AND UPPER(qld.action_code) <> 'ADD';

   -- Routing Type - As_Is - 216
   CURSOR cur_rout_type_as_is
   IS
      SELECT qld.VALUE
        FROM quote_line_item_detail_as_is qld
       WHERE active = 'Y'
         AND line_item_id IN (
                SELECT l.line_item_id
                  FROM quote_line_item_as_is l
                 WHERE l.active = 'Y'
                   AND l.quote_header_id = in_quote_header_id
                   AND l.site_id         = v_site_id
                   AND UPPER(l.fallback_type)   = in_fallbck_asis)
         AND attribute_mapping_id IN (216)
         AND qld.VALUE IS NOT NULL;


   -- VPN Bandwidth - 207
--   CURSOR cur_vpn_bw
--   IS
--      SELECT qld.VALUE
--        FROM quote_line_item_detail_as_is qld
--       WHERE active = 'Y'
--         AND line_item_id IN (
--                SELECT l.line_item_id
--                  FROM quote_line_item_as_is l
--                 WHERE l.active = 'Y'
--                   AND l.quote_header_id = in_quote_header_id
--                   AND l.site_id         = v_site_id
--                   AND UPPER(l.fallback_type)   = in_fallbck_asis)
--         AND attribute_mapping_id = 207
--         AND qld.VALUE IS NOT NULL;

     -- VPN Bandwidth - 1123
      CURSOR cur_vpn_bw
      IS
      SELECT qld.attribute_mapping_id, qld.VALUE
        FROM order_line_item_detail_as_is qld
       WHERE active = 'Y'
         AND order_line_item_id IN (
                SELECT l.order_line_item_id
                  FROM order_line_item_as_is l
                 WHERE l.active = 'Y'
                   AND l.quote_header_id = in_quote_header_id
                   AND l.site_id         = v_site_id
                   AND UPPER(l.fallback_type) = in_fallbck_asis)
         AND attribute_mapping_id = 1123
         AND qld.VALUE IS NOT NULL;

   -- DSL Access Speed - 222
   --changed access speed attribute_mapping_id 222 to 12
   CURSOR cur_dsl_speed
   IS
      SELECT qld.VALUE
        FROM quote_line_item_detail_as_is qld
       WHERE active = 'Y'
         AND line_item_id IN (
                SELECT l.line_item_id
                  FROM quote_line_item_as_is l
                 WHERE l.active = 'Y'
                   AND l.quote_header_id = in_quote_header_id
                   AND l.site_id         = v_site_id
                   AND UPPER(l.fallback_type)   = in_fallbck_asis)
         AND attribute_mapping_id = 12
         AND qld.VALUE IS NOT NULL;

   -- DSL Type - 102
   CURSOR cur_dsl_typ
   IS
      SELECT qld.VALUE
        FROM quote_line_item_detail_as_is qld
       WHERE active = 'Y'
         AND line_item_id IN (
                SELECT l.line_item_id
                  FROM quote_line_item_as_is l
                 WHERE l.active = 'Y'
                   AND l.quote_header_id = in_quote_header_id
                   AND l.site_id         = v_site_id
                   AND UPPER(l.fallback_type)   = in_fallbck_asis)
         AND attribute_mapping_id = 102
         AND qld.VALUE IS NOT NULL;


   -- DSL Contention Ratio - 103
   CURSOR cur_dsl_ratio
   IS
      SELECT qld.VALUE
        FROM quote_line_item_detail_as_is qld
       WHERE active = 'Y'
         AND line_item_id IN (
                SELECT l.line_item_id
                  FROM quote_line_item_as_is l
                 WHERE l.active = 'Y'
                   AND l.quote_header_id = in_quote_header_id
                   AND l.site_id         = v_site_id
                   AND UPPER(l.fallback_type)   = in_fallbck_asis)
         AND attribute_mapping_id = 103
         AND qld.VALUE IS NOT NULL;


   -- DSL Service Variant - 4
   CURSOR cur_dsl_variant
   IS
      SELECT qld.VALUE
        FROM quote_line_item_detail_as_is qld
       WHERE active = 'Y'
         AND line_item_id IN (
                SELECT l.line_item_id
                  FROM quote_line_item_as_is l
                 WHERE l.active = 'Y'
                   AND l.quote_header_id = in_quote_header_id
                   AND l.site_id         = v_site_id
                   AND UPPER(l.fallback_type)   = in_fallbck_asis)
         AND attribute_mapping_id = 4
         AND qld.VALUE IS NOT NULL;

   -- CPE PARTS
   CURSOR cur_cpe_parts
    IS
     SELECT line_item_id FROM (SELECT tobe.line_item_id, asis.row_id FROM
    (SELECT lm.line_item_id,lm.part_type, ld.value,row_number() OVER (PARTITION BY lm.part_type, ld.value ORDER BY lm.part_type) rno
        FROM line_item lm, line_item_detail ld
        WHERE lm.line_item_id       = ld.line_item_id
        AND lm.quote_header_id      = in_quote_header_id
        AND lm.site_id              = v_site_id
        AND lm.active               = 'Y'
        AND ld.active               = 'Y'
        AND product_name            = 'BT CPE'
        AND UPPER(part_type)        <> 'BUNDLE'
        AND attribute_mapping_id    = 310
        AND UPPER(lm.fallback_type) = in_fallbck_tobe
    )tobe
    LEFT OUTER JOIN
    (SELECT lm.part_type, ld.value,lm.row_id,row_number() OVER (PARTITION BY lm.part_type, ld.value ORDER BY lm.part_type) rno
        FROM quote_line_item_as_is lm, quote_line_item_detail_as_is ld
        WHERE lm.line_item_id       = ld.line_item_id
        AND lm.quote_header_id      = in_quote_header_id
        AND lm.site_id              = v_site_id
        AND lm.active               = 'Y'
        AND ld.active               = 'Y'
        AND product_name            = 'BT CPE'
        AND UPPER(part_type)        <> 'BUNDLE'
        AND attribute_mapping_id    = 310
        AND UPPER(lm.fallback_type) = in_fallbck_asis
    )asis
    ON tobe.part_type = asis.part_type
    AND tobe.value    = asis.value
    AND tobe.rno      = asis.rno)
    WHERE row_id      IS NULL;

  --BT GLOBAL COS ATTRIBUTES
   CURSOR cur_global_cos_attr
   IS
      SELECT qld.attribute_mapping_id, qld.VALUE
        FROM quote_line_item_detail_as_is qld
       WHERE active = 'Y'
         AND line_item_id IN (
                SELECT l.line_item_id
                  FROM quote_line_item_as_is l
                 WHERE l.active = 'Y'
                   AND l.quote_header_id = in_quote_header_id
                   AND l.site_id         = v_site_id
                   AND UPPER(l.fallback_type)   = in_fallbck_asis)
         AND attribute_mapping_id IN (1144,1145,1146,1147,1148,1149,1150,1151,1152,1153,1154,1155,203,204,602,
                                      28, 30, 135) -- included NNI, LOSB
         AND qld.VALUE IS NOT NULL;

    CURSOR cur_chk_attr
    IS
    SELECT qld.attribute_mapping_id, qld.VALUE
    FROM quote_line_item_detail_as_is qld
       WHERE active = 'Y'
         AND line_item_id IN (
                SELECT l.line_item_id
                  FROM quote_line_item_as_is l
                 WHERE l.active               = 'Y'
                   AND l.quote_header_id      = in_quote_header_id
                   AND l.site_id              = v_site_id
                   AND UPPER (product_name)   = 'BT CPE'
                   AND UPPER (part_type)      = 'BUNDLE'
                   AND UPPER(l.fallback_type) = in_fallbck_asis)
         AND attribute_mapping_id IN (320, 318, 319, 307,301)
         AND qld.VALUE IS NOT NULL;

    CURSOR cur_VPN_COS
    IS
    SELECT lid.row_id, lid.attribute_mapping_id, lid.value
    FROM quote_line_item_as_is li, quote_line_item_detail_as_is lid
    WHERE li.quote_header_id    = in_quote_header_id
    AND li.site_id              = in_site_id
    AND UPPER(li.fallback_type) = in_fallbck_asis
    AND UPPER(li.product_name)  = 'BT IVPN2 VPN CONNECTION'
    AND li.active               = 'Y'
    AND lid.active              = 'Y'
    AND lid.line_item_id        = li.line_item_id
    AND lid.attribute_mapping_id IN (210, 211, 212, 213, 209, 215, 202, 214);

    CURSOR cur_VPN_COS_ord
    IS
    SELECT qld.row_id, qld.attribute_mapping_id, qld.value
    FROM order_line_item_detail_as_is qld
    WHERE active = 'Y'
     AND order_line_item_id IN (SELECT l.order_line_item_id
                                  FROM order_line_item_as_is l
                                 WHERE l.active               = 'Y'
                                   AND l.quote_header_id      = in_quote_header_id
                                   AND l.site_id              = v_site_id
                                   AND UPPER(l.fallback_type) = in_fallbck_asis
                                   AND UPPER(l.product_name) = 'BT IVPN2 VPN CONNECTION'
                                   AND UPPER(l.action_code)  <> 'ADD')
     AND attribute_mapping_id IN (1104,1105,1106,1107,1108,1109,1110,1111,1112,1113,
                                  1103,1114,1102,1101,1125, 1126, 1127, 1128, 1129, 1115, 1130);

   -- NUMBER OF E1 OR T1 - 6
   CURSOR cur_num_e1_or_t1
   IS
      SELECT qld.VALUE
        FROM quote_line_item_detail_as_is qld
       WHERE active = 'Y'
         AND line_item_id IN (
                SELECT l.line_item_id
                  FROM quote_line_item_as_is l
                 WHERE l.active = 'Y'
                   AND l.quote_header_id = in_quote_header_id
                   AND l.site_id         = v_site_id
                   AND UPPER(l.fallback_type)   = in_fallbck_asis)
         AND attribute_mapping_id = 6
         AND qld.VALUE IS NOT NULL;

BEGIN
    -- CEASE - Start
   SELECT order_header_id
     INTO v_order_header_id
     FROM order_header
    WHERE quote_header_id = in_quote_header_id;

    -- Replace "NULL" string with NULL
    UPDATE line_item_detail
    SET value          = NULL
    WHERE UPPER(value) = 'NULL'
    AND active         = 'Y'
    AND line_item_id IN (SELECT l.line_item_id
                          FROM line_item l
                          WHERE l.active             = 'Y'
                           AND l.quote_header_id     = in_quote_header_id);

    -- Replace "NULL" string with NULL
    UPDATE quote_line_item_detail_as_is
    SET value          = NULL
    WHERE UPPER(value) = 'NULL'
    AND active         = 'Y'
    AND line_item_id IN (SELECT l.line_item_id
                          FROM quote_line_item_as_is l
                          WHERE l.active             = 'Y'
                           AND l.quote_header_id     = in_quote_header_id);

    -- Replace "NULL" string with NULL
    UPDATE order_line_item_detail
    SET value          = NULL
    WHERE UPPER(value) = 'NULL'
    AND active         = 'Y'
    AND order_line_item_id IN (SELECT l.order_line_item_id
                                FROM order_line_item l
                               WHERE l.active            = 'Y'
                               AND l.order_header_id     = v_order_header_id);

    -- Replace "NULL" string with NULL
    UPDATE order_line_item_detail_as_is
    SET value          = NULL
    WHERE UPPER(value) = 'NULL'
    AND active         = 'Y'
    AND order_line_item_id IN (SELECT order_line_item_id
                                FROM order_line_item_as_is li
                                WHERE quote_header_id     = in_quote_header_id
                                AND active                = 'Y');

/*
    -- CEASE - Start
   SELECT order_header_id
     INTO v_order_header_id
     FROM order_header
    WHERE quote_header_id = in_quote_header_id;
*/

   SELECT COUNT (*)
     INTO v_order_type
     FROM quote_header qh,
          bundle_selection bs
    WHERE qh.quote_header_id     = bs.quote_header_id
      AND UPPER (bs.order_type)  = 'CEASE'
      AND qh.quote_header_id     = in_quote_header_id
      AND UPPER(bs.product_name) ='BT IVPN2 GLOBAL'
      AND bs.active              = 'Y';

   IF v_order_type = 1 THEN

      -- Quote - Line_Item  - AS_IS
      UPDATE quote_line_item_as_is qli
         SET action_code     = 'Delete'
       WHERE quote_header_id = in_quote_header_id
       AND qli.active        = 'Y'
       AND UPPER(qli.fallback_type) = in_fallbck_asis;

      -- Quote - Line_Item Detail - AS_IS
      UPDATE quote_line_item_detail_as_is qlid
         SET action_code  = 'Delete'
       WHERE line_item_id IN (SELECT DISTINCT line_item_id
                              FROM quote_line_item_as_is li
                              WHERE quote_header_id = in_quote_header_id
                               AND active           = 'Y'
                               AND UPPER(li.fallback_type) = in_fallbck_asis)
         AND qlid.active = 'Y';

      UPDATE order_line_item_as_is qli
         SET action_code     = 'Delete'
       WHERE quote_header_id = in_quote_header_id
       AND qli.active        = 'Y'
       AND UPPER(qli.fallback_type) = in_fallbck_asis;

      -- Quote - Line_Item Detail - AS_IS
      UPDATE order_line_item_detail_as_is qlid
         SET action_code = 'Delete'
       WHERE order_line_item_id IN (SELECT DISTINCT order_line_item_id
                                    FROM order_line_item_as_is li
                                    WHERE quote_header_id = in_quote_header_id
                                    AND active            = 'Y'
                                    AND UPPER(li.fallback_type)  = in_fallbck_asis)
         AND qlid.active = 'Y';

      -- ACCESS QREF  - as_is
      UPDATE access_qref_as_is
         SET action_code = 'Delete'
       WHERE quote_site_id IN (SELECT quote_site_id
                                FROM quote_site
                                WHERE quote_header_id = in_quote_header_id
                                AND active = 'Y')
        AND active = 'Y';

     -- For To_Be - Quote & Order tables set AC = NULL instead of 'Delete' for CEASE
     UPDATE line_item l
         SET action_code       = NULL
       WHERE l.active          = 'Y'
         AND l.quote_header_id = in_quote_header_id
         AND UPPER(l.fallback_type)   = in_fallbck_tobe;

      UPDATE line_item_detail lid
         SET action_code = NULL
       WHERE active = 'Y'
         AND line_item_id IN (SELECT l.line_item_id
                              FROM line_item l
                              WHERE l.active         = 'Y'
                               AND l.quote_header_id = in_quote_header_id
                               AND UPPER(l.fallback_type)   = in_fallbck_tobe);

     UPDATE order_line_item l
         SET action_code = NULL
       WHERE l.active          = 'Y'
         AND l.order_header_id = v_order_header_id
         AND UPPER(l.fallback_type)   = in_fallbck_tobe;


      UPDATE order_line_item_detail lid
         SET action_code = NULL
       WHERE active = 'Y'
         AND order_line_item_id IN (SELECT l.order_line_item_id
                                      FROM order_line_item l
                                     WHERE l.active = 'Y'
                                       AND l.order_header_id = v_order_header_id
                                       AND UPPER(l.fallback_type)   = in_fallbck_tobe);
      out_status := 1;
      out_errmsg := 'Success';

      COMMIT;
      RETURN;

   END IF; -- CEASE - End

   FOR site_id_rec IN c_site_id
   LOOP
      v_site_id := site_id_rec.site_id;

      -- Update all LineItems to 'NONE' initially
      UPDATE line_item l
         SET action_code       = 'None'
       WHERE l.active          = 'Y'
         AND l.quote_header_id = in_quote_header_id
         AND l.site_id         = v_site_id
         AND UPPER(l.fallback_type)   = in_fallbck_tobe;

      --  Update all attrs to 'NONE' initially
      UPDATE line_item_detail lid
         SET action_code = 'None'
       WHERE active = 'Y'
         AND line_item_id IN (
                SELECT l.line_item_id
                  FROM line_item l
                 WHERE l.active          = 'Y'
                   AND l.quote_header_id = in_quote_header_id
                   AND l.site_id         = v_site_id
                   AND UPPER(l.fallback_type)   = in_fallbck_tobe);

      UPDATE quote_line_item_as_is l
         SET action_code       = 'None'
       WHERE l.active          = 'Y'
         AND l.quote_header_id = in_quote_header_id
         AND l.site_id         = v_site_id
         AND UPPER(l.fallback_type)   = in_fallbck_asis;

      --  Update all attrs to 'NONE' initially
      UPDATE quote_line_item_detail_as_is lid
         SET action_code = 'None'
       WHERE active = 'Y'
         AND line_item_id IN (SELECT l.line_item_id
                              FROM quote_line_item_as_is l
                             WHERE l.active          = 'Y'
                               AND l.quote_header_id = in_quote_header_id
                               AND l.site_id         = v_site_id
                               AND UPPER(l.fallback_type)   = in_fallbck_asis);

      UPDATE order_line_item_as_is l
         SET action_code       = 'None'
       WHERE l.active          = 'Y'
         AND l.quote_header_id = in_quote_header_id
         AND l.site_id         = v_site_id
         AND UPPER(l.fallback_type)   = in_fallbck_asis;

      --  Update all attrs to 'NONE' initially
      UPDATE order_line_item_detail_as_is lid
         SET action_code = 'None'
       WHERE active = 'Y'
         AND order_line_item_id IN (
                SELECT l.order_line_item_id
                  FROM order_line_item_as_is l
                 WHERE l.active          = 'Y'
                   AND l.quote_header_id = in_quote_header_id
                   AND l.site_id         = v_site_id
                   AND UPPER(l.fallback_type)   = in_fallbck_asis);

      UPDATE order_line_item l
         SET action_code       = 'None'
       WHERE l.active          = 'Y'
         AND l.order_header_id = v_order_header_id
         AND l.site_id         = v_site_id
         AND UPPER(l.fallback_type)   = in_fallbck_tobe;

      --  Update all attrs to 'NONE' initially
      UPDATE order_line_item_detail lid
         SET action_code = 'None'
       WHERE active      = 'Y'
         AND order_line_item_id IN (SELECT l.order_line_item_id
                                      FROM order_line_item l
                                     WHERE l.active          = 'Y'
                                       AND l.order_header_id = v_order_header_id
                                       AND l.site_id         = v_site_id
                                       AND UPPER(l.fallback_type)   = in_fallbck_tobe);

       -- Access_Qref - To_Be
       UPDATE access_qref
       SET action_code = 'None'
       WHERE quote_site_id IN(SELECT quote_site_id
                               FROM quote_site
                               WHERE quote_header_id = in_quote_header_id
                               AND site_id     = v_site_id
                               AND active      = 'Y');

       -- Access_Qref - As_Is
       UPDATE access_qref_as_is
       SET action_code = 'None'
       WHERE quote_site_id IN(SELECT quote_site_id
                               FROM quote_site
                               WHERE quote_header_id = in_quote_header_id
                               AND site_id      = v_site_id
                               AND active       = 'Y');


      -- PHYSICAL - Start

      -- MSS VPN ID - 1116
      -- Add VPN and Delete VPN (ORDER level) logic starts

      SELECT a.val1 - b.val2
        INTO v_mmsvpn_id_count
        FROM (SELECT COUNT (1) AS val1
                FROM order_line_item_detail_as_is qld
               WHERE active = 'Y'
                 AND order_line_item_id IN (
                        SELECT l.order_line_item_id
                          FROM order_line_item_as_is l
                         WHERE l.active = 'Y'
                           AND l.quote_header_id = in_quote_header_id
                           AND l.site_id         = v_site_id
                           AND UPPER(l.fallback_type)   = in_fallbck_asis)
                 AND attribute_mapping_id = 1116) a,
             (SELECT COUNT (1) AS val2
                FROM order_line_item_detail qld
               WHERE active = 'Y'
                 AND order_line_item_id IN (
                        SELECT l.order_line_item_id
                          FROM order_line_item l
                         WHERE l.active = 'Y'
                           AND l.order_header_id = v_order_header_id
                           AND l.site_id         = v_site_id
                           AND UPPER(l.fallback_type)  = in_fallbck_tobe)
                 AND attribute_mapping_id = 1116) b;

      IF v_mmsvpn_id_count = 0  THEN
         NULL;
      ELSIF v_mmsvpn_id_count < 0 THEN -- To_Be - Add VPN scenario
         FOR i IN
            (SELECT order_line_item_id
               FROM order_line_item_detail
              WHERE order_line_item_id IN (
                       SELECT l.order_line_item_id
                         FROM order_line_item l
                        WHERE l.active = 'Y'
                          AND l.order_header_id = v_order_header_id
                          AND l.site_id         = v_site_id
                          AND UPPER(l.fallback_type)   = in_fallbck_tobe
                          AND VALUE IN (
                                 SELECT VALUE
                                   FROM order_line_item_detail qld
                                  WHERE active = 'Y'
                                    AND order_line_item_id IN (
                                           SELECT l.order_line_item_id
                                             FROM order_line_item l
                                            WHERE l.active = 'Y'
                                              AND l.order_header_id = v_order_header_id
                                              AND l.site_id         = v_site_id
                                              AND UPPER(l.fallback_type)   = in_fallbck_tobe)
                                    AND attribute_mapping_id = 1116
                                 MINUS
                                 SELECT VALUE
                                   FROM order_line_item_detail_as_is qld
                                  WHERE active = 'Y'
                                    AND order_line_item_id IN (
                                           SELECT l.order_line_item_id
                                             FROM order_line_item_as_is l
                                            WHERE l.active = 'Y'
                                              AND l.quote_header_id = in_quote_header_id
                                              AND l.site_id         = v_site_id
                                              AND UPPER(l.fallback_type)   = in_fallbck_asis)
                                    AND attribute_mapping_id = 1116)))
         LOOP

            UPDATE order_line_item
               SET action_code          = 'Add'
             WHERE order_line_item_id   = i.order_line_item_id
               AND site_id              = v_site_id
               AND UPPER (product_name) = 'BT IVPN2 VPN CONNECTION'
               AND active               = 'Y'
               AND UPPER(fallback_type) = in_fallbck_tobe;

         END LOOP;

      ELSIF v_mmsvpn_id_count > 0 THEN  -- As_Is - Delete VPN scenario

         FOR i IN
            (SELECT order_line_item_id
               FROM order_line_item_detail_as_is
              WHERE order_line_item_id IN (
                       SELECT l.order_line_item_id
                         FROM order_line_item_as_is l
                        WHERE l.active = 'Y'
                          AND l.quote_header_id = in_quote_header_id
                          AND l.site_id         = v_site_id
                          AND UPPER(l.fallback_type)   = in_fallbck_asis
                          AND VALUE IN (
                                 SELECT VALUE
                                   FROM order_line_item_detail_as_is qld
                                  WHERE active = 'Y'
                                    AND order_line_item_id IN (
                                           SELECT l.order_line_item_id
                                             FROM order_line_item_as_is l
                                            WHERE l.active = 'Y'
                                              AND l.quote_header_id = in_quote_header_id
                                              AND l.site_id         = v_site_id
                                              AND UPPER(l.fallback_type)   = in_fallbck_asis)
                                    AND attribute_mapping_id = 1116
                                 MINUS
                                 SELECT VALUE
                                   FROM order_line_item_detail qld
                                  WHERE active = 'Y'
                                    AND order_line_item_id IN (
                                           SELECT l.order_line_item_id
                                             FROM order_line_item l
                                            WHERE l.active = 'Y'
                                              AND l.order_header_id = v_order_header_id
                                              AND l.site_id         = v_site_id
                                              AND UPPER(l.fallback_type)   = in_fallbck_tobe)
                                    AND attribute_mapping_id = 1116)))
         LOOP

           UPDATE order_line_item_as_is
               SET action_code          = 'Delete'
             WHERE quote_header_id      = in_quote_header_id
               AND site_id              = v_site_id
               AND order_line_item_id   = i.order_line_item_id
               AND UPPER (product_name) = 'BT IVPN2 VPN CONNECTION'
               AND active               = 'Y'
               AND UPPER(fallback_type) = in_fallbck_asis;

         END LOOP;
      END IF;
      --Add VPN and Delete VPN (ORDER level) logic Ends


      -- MSS VPN ID - 1116

      --Add VPN and Delete VPN (QUOTE level) logic starts

        SELECT MAX(lid.row_id)
        INTO v_as_is_vpn_count
        FROM quote_line_item_as_is li, quote_line_item_detail_as_is lid
        WHERE li.quote_header_id     = in_quote_header_id
          AND li.site_id             = in_site_id
          AND UPPER(li.fallback_type)= in_fallbck_asis
          AND UPPER(li.product_name) = 'BT IVPN2 VPN CONNECTION'
          AND li.active              = 'Y'
          AND lid.active             = 'Y'
          AND lid.line_item_id       = li.line_item_id;

        SELECT MAX(lid.row_id)
        INTO v_to_be_vpn_count
        FROM line_item li,line_item_detail lid
        WHERE li.quote_header_id      = in_quote_header_id
          AND li.site_id              = in_site_id
          AND UPPER(li.fallback_type) = in_fallbck_tobe
          AND UPPER(li.product_name)  = 'BT IVPN2 VPN CONNECTION'
          AND li.active               = 'Y'
          AND lid.active              = 'Y'
          AND lid.line_item_id        = li.line_item_id;

       IF v_as_is_vpn_count > v_to_be_vpn_count THEN  -- As_Is - Delete VPN scenario

           UPDATE quote_line_item_detail_as_is
           SET action_code = 'Delete'
           WHERE line_item_id IN (
                    SELECT li.line_item_id
                      FROM quote_line_item_as_is li,
                           quote_line_item_detail_as_is lid
                     WHERE li.quote_header_id      = in_quote_header_id
                       AND li.site_id              = in_site_id
                       AND UPPER(li.fallback_type) = in_fallbck_asis
                       AND li.active               = 'Y'
                       AND lid.active              = 'Y'
                       AND lid.line_item_id        = li.line_item_id
                       AND UPPER(li.product_name)  = 'BT IVPN2 VPN CONNECTION')
               AND row_id > v_to_be_vpn_count;

       ELSIF v_as_is_vpn_count < v_to_be_vpn_count THEN --  To_Be - Add VPN scenario

           UPDATE line_item_detail
           SET action_code = 'Add'
           WHERE line_item_id IN (
                    SELECT li.line_item_id
                      FROM line_item li,
                           line_item_detail lid
                     WHERE li.quote_header_id      = in_quote_header_id
                       AND li.site_id              = in_site_id
                       AND UPPER(li.fallback_type) = in_fallbck_tobe
                       AND li.active               = 'Y'
                       AND lid.active              = 'Y'
                       AND lid.line_item_id        = li.line_item_id
                       AND UPPER(li.product_name)  = 'BT IVPN2 VPN CONNECTION')
             AND row_id > v_as_is_vpn_count;

       END IF;

       --Add VPN and Delete VPN (QUOTE level) logic ends




      -- Access_Circuit - 1214
      FOR rec_acc_ckt IN cur_acc_ckt
      LOOP
         v_count := 0;
         v_cos   := 0;

         SELECT COUNT (1)
           INTO v_count
           FROM line_item_detail
          WHERE active = 'Y'
            AND line_item_id IN (
                   SELECT l.line_item_id
                     FROM line_item l
                    WHERE l.active = 'Y'
                      AND l.quote_header_id = in_quote_header_id
                      AND l.site_id         = v_site_id
                      AND UPPER(l.fallback_type) = in_fallbck_tobe)
            AND attribute_mapping_id IN (1214)
            AND VALUE IS NULL;

         BEGIN
            SELECT 0
              INTO v_cos
              FROM DUAL
             WHERE EXISTS (
                      SELECT lid.line_item_id
                        FROM line_item_detail lid, line_item l
                       WHERE lid.active             = 'Y'
                         AND l.active               = 'Y'
                         AND l.quote_header_id      = in_quote_header_id
                         AND l.site_id              = v_site_id
                         AND l.line_item_id         = lid.line_item_id
                         AND attribute_mapping_id   IN (1214)
                         AND UPPER(l.fallback_type) = in_fallbck_tobe);
         EXCEPTION
            WHEN NO_DATA_FOUND THEN
               v_cos := 1;
            WHEN OTHERS THEN
               out_status := pkg_constants.con_status_failure;
               out_errmsg := SUBSTR (SQLERRM, 1, 100);
         END;

         IF (v_count = 1 OR v_cos = 1) THEN

            --FRF 16 (v1.5 g changes) for Access_Ckt_id - START
             BEGIN
                   v_access_type := 0;

                   SELECT 1 INTO v_access_type
                   FROM quote_line_item_detail_as_is qld
                   WHERE active = 'Y'
                   AND line_item_id IN (
                                       SELECT l.line_item_id
                                        FROM quote_line_item_as_is l
                                        WHERE l.active               = 'Y'
                                          AND l.quote_header_id      = in_quote_header_id
                                          AND l.site_id              = v_site_id
                                          AND UPPER(l.fallback_type) = in_fallbck_asis)
                   AND attribute_mapping_id = 5
                   AND UPPER(qld.VALUE) NOT IN ('N X E1', 'N X T1')
                   AND qld.VALUE IS NOT NULL;
             EXCEPTION
                   WHEN NO_DATA_FOUND THEN
                      v_access_type := 0;
                   WHEN OTHERS THEN
                      out_status := pkg_constants.con_status_failure;
                      out_errmsg := SUBSTR (SQLERRM, 1, 100);
             END;


                BEGIN
                    v_access_type_cnt1 := 0;

                    SELECT 1 INTO v_access_type_cnt1 FROM line_item_detail lid
                    WHERE active      = 'Y'
                    AND line_item_id IN (
                                          SELECT l.line_item_id
                                            FROM line_item l
                                           WHERE l.active               = 'Y'
                                             AND l.quote_header_id      = in_quote_header_id
                                             AND l.site_id              = v_site_id
                                             AND UPPER(l.fallback_type) = in_fallbck_tobe)
                    AND attribute_mapping_id  = 5
                    AND lid.VALUE <>
                          (SELECT qld.VALUE
                             FROM quote_line_item_detail_as_is qld
                            WHERE active = 'Y'
                              AND line_item_id IN (
                                     SELECT l.line_item_id
                                       FROM quote_line_item_as_is l
                                      WHERE l.active               = 'Y'
                                        AND l.quote_header_id      = in_quote_header_id
                                        AND l.site_id              = v_site_id
                                        AND UPPER(l.fallback_type) = in_fallbck_asis)
                              AND attribute_mapping_id = 5
                              AND UPPER(qld.VALUE) IN ('N X E1', 'N X T1')
                           );
                EXCEPTION
                   WHEN NO_DATA_FOUND THEN
                      v_access_type_cnt1 := 0;
                   WHEN OTHERS THEN
                      out_status := pkg_constants.con_status_failure;
                      out_errmsg := SUBSTR (SQLERRM, 1, 100);
                END;

            --FRF 16 (v1.5 g changes) for Access_Ckt_id - END

            IF (v_access_type = 1 OR v_access_type_cnt1 = 1) THEN

                -- As_Is Line Item table
                UPDATE quote_line_item_as_is qli
                   SET action_code         = 'Delete'
                 WHERE qli.active          = 'Y'
                   AND UPPER (product_name)IN ('BT IVPN2 ACCESS', 'BT IVPN2 PORT')
                   AND qli.quote_header_id = in_quote_header_id
                   AND qli.site_id         = v_site_id
                   AND UPPER(qli.fallback_type)   = in_fallbck_asis;

                UPDATE order_line_item_as_is qli
                   SET action_code         = 'Delete'
                 WHERE qli.active          = 'Y'
                   AND UPPER (product_name)IN('BT IVPN2 ACCESS', 'BT IVPN2 PORT')
                   AND qli.quote_header_id = in_quote_header_id
                   AND qli.site_id         = v_site_id
                   AND UPPER(qli.fallback_type)   = in_fallbck_asis;

                -- ACCESS QREF - AS_IS
                UPDATE access_qref_as_is
                   SET action_code = 'Delete'
                 WHERE quote_site_id IN (
                          SELECT quote_site_id
                            FROM quote_site
                           WHERE quote_header_id = in_quote_header_id
                             AND site_id         = v_site_id
                             AND active          = 'Y');

                -- To_Be Line Item table
                UPDATE line_item l
                   SET action_code ='Add'
                 WHERE l.active             = 'Y'
                   AND UPPER (product_name) IN('BT IVPN2 ACCESS','BT IVPN2 PORT')
                   AND l.quote_header_id    = in_quote_header_id
                   AND l.site_id            = v_site_id
                   AND UPPER(l.fallback_type) = in_fallbck_tobe;


                --to be order line item table
                 UPDATE order_line_item l
                   SET action_code ='Add'
                  WHERE l.active         = 'Y'
                   AND UPPER (product_name) IN('BT IVPN2 ACCESS','BT IVPN2 PORT')
                   AND l.order_header_id = v_order_header_id
                   AND l.site_id         = v_site_id
                   AND UPPER(l.fallback_type) = in_fallbck_tobe;

                -- ACCESS QREF  - TO_BE
                UPDATE access_qref
                   SET action_code = 'Add'
                 WHERE quote_site_id IN (
                          SELECT quote_site_id
                            FROM quote_site
                           WHERE quote_header_id = in_quote_header_id
                             AND site_id = v_site_id
                             AND active = 'Y');

            END IF;

            -- CoS Assignment - 203
            FOR cos_rec IN cur_cos
            LOOP
               BEGIN
                  v_cos := 0;

                  SELECT 1
                    INTO v_cos
                    FROM line_item_detail
                   WHERE active = 'Y'
                     AND line_item_id IN (
                            SELECT l.line_item_id
                              FROM line_item l
                             WHERE l.active = 'Y'
                               AND l.quote_header_id = in_quote_header_id
                               AND l.site_id         = v_site_id
                               AND UPPER(l.fallback_type) = in_fallbck_tobe)
                     AND VALUE <> cos_rec.VALUE
                     AND attribute_mapping_id = 203; -- CoS Assignment attr
               EXCEPTION
                  WHEN NO_DATA_FOUND THEN
                     v_cos := 0;
                  WHEN OTHERS THEN
                     out_status := pkg_constants.con_status_failure;
                     out_errmsg := SUBSTR (SQLERRM, 1, 100);
               END;

               IF v_cos = 1 THEN -- Not Equal
                  IF UPPER (cos_rec.VALUE) = 'COS APPLIED PER ACCESS' THEN

                    --Line Item
                        UPDATE line_item li
                           SET action_code          = 'Update'
                         WHERE li.active            = 'Y'
                           AND UPPER (product_name) = 'BT IVPN2 VPN CONNECTION'
                           AND li.quote_header_id   = in_quote_header_id
                           AND li.site_id           = v_site_id
                           AND UPPER(li.fallback_type) = in_fallbck_tobe
                           AND line_item_id IN (SELECT DISTINCT li.line_item_id
                                                FROM line_item li,line_item_detail lid
                                                WHERE li.quote_header_id      = in_quote_header_id
                                                  AND li.site_id              = in_site_id
                                                  AND UPPER(li.fallback_type) = in_fallbck_tobe
                                                  AND UPPER(li.product_name)  = 'BT IVPN2 VPN CONNECTION'
                                                  AND UPPER (lid.action_code) <> 'ADD'
                                                  AND li.active               = 'Y'
                                                  AND lid.active              = 'Y'
                                                  AND lid.line_item_id        = li.line_item_id)
                           AND EXISTS (
                                       SELECT 1 FROM line_item
                                        WHERE quote_header_id          = in_quote_header_id
                                          AND site_id                  = v_site_id
                                          AND active                   = 'Y'
                                          AND UPPER(fallback_type)     = in_fallbck_tobe
                                          AND (UPPER(action_code)      = 'ADD'
                                               AND UPPER(product_name) ='BT IVPN2 ACCESS'
                                              ));

                        UPDATE order_line_item li
                           SET action_code          = 'Update'
                         WHERE li.active            = 'Y'
                           AND UPPER (product_name) = 'BT IVPN2 VPN CONNECTION'
                           AND li.order_header_id   = v_order_header_id
                           AND li.site_id           = v_site_id
                           AND UPPER(li.fallback_type)     = in_fallbck_tobe
                           AND UPPER(li.action_code) <> 'ADD'
                           AND EXISTS (
                                       SELECT 1
                                         FROM order_line_item
                                        WHERE order_header_id = v_order_header_id
                                          AND site_id         = v_site_id
                                          AND UPPER(fallback_type)   = in_fallbck_tobe
                                          AND active            = 'Y'
                                          AND (UPPER(action_code)    = 'ADD'
                                               AND UPPER(product_name) ='BT IVPN2 ACCESS'
                                              ));

                     UPDATE line_item_detail
                        SET action_code = 'Add'
                      WHERE active = 'Y'
                        AND line_item_id IN (
                               SELECT l.line_item_id
                                 FROM line_item l
                                WHERE l.active = 'Y'
                                  AND l.quote_header_id    = in_quote_header_id
                                  AND l.site_id            = v_site_id
                                  AND UPPER (product_name) = 'BT IVPN2 VPN CONNECTION'
                                  AND UPPER(l.fallback_type) = in_fallbck_tobe)
                        AND UPPER(action_code) <> 'ADD'
                        AND EXISTS ( SELECT 1
                                     FROM line_item_detail
                                    WHERE active = 'Y'
                                      AND line_item_id IN (
                                             SELECT l.line_item_id
                                               FROM line_item l
                                              WHERE l.active = 'Y'
                                                AND l.quote_header_id = in_quote_header_id
                                                AND l.site_id         = v_site_id
                                                AND UPPER(l.fallback_type)   = in_fallbck_tobe
                                                )
                                      AND UPPER (VALUE) ='COS APPLIED PER VPN CONNECTION'
                                      AND attribute_mapping_id = 203)
                        AND attribute_mapping_id IN(1104,1105,1106,1107,1108,1109,210,211,212,213,
                                                    1110,1111,1112,1113,209,1103,1114,1102, 215,202,
                                                    1101,1125, 1126, 1127, 1128, 1129, 1115, 1130)
                        AND EXISTS (
                                   SELECT 1
                                     FROM line_item
                                    WHERE quote_header_id         = in_quote_header_id
                                      AND site_id                 = v_site_id
                                      AND UPPER(fallback_type)    = in_fallbck_tobe
                                      AND active                  = 'Y'
                                      AND (UPPER(action_code)      = 'ADD'
                                           AND UPPER(product_name) ='BT IVPN2 PORT'
                                          ));

                     --order update
                     UPDATE order_line_item_detail
                        SET action_code = 'Add'
                      WHERE active      = 'Y'
                        AND order_line_item_id IN (
                               SELECT l.order_line_item_id
                                 FROM order_line_item l
                                WHERE l.active             = 'Y'
                                  AND l.order_header_id    = v_order_header_id
                                  AND l.site_id            = v_site_id
                                  AND UPPER (product_name) = 'BT IVPN2 VPN CONNECTION'
                                  AND UPPER(l.fallback_type)= in_fallbck_tobe
                                  AND UPPER(l.action_code) <> 'ADD')
                        AND attribute_mapping_id IN(1104,1105,1106,1107,1108,1109,1110,1111,1112,1113,
                                                    1103,1114,1102,1101,1125, 1126, 1127, 1128, 1129, 1115, 1130)
                        AND EXISTS (
                                   SELECT 1
                                     FROM order_line_item
                                    WHERE order_header_id = v_order_header_id
                                      AND site_id         = v_site_id
                                      AND UPPER(fallback_type) = in_fallbck_tobe
                                      AND active            = 'Y'
                                      AND (UPPER(action_code) = 'ADD'
                                           AND UPPER(product_name) ='BT IVPN2 PORT'
                                          ));

                  -- CPPC to CPA
                  ELSIF UPPER (cos_rec.VALUE) = 'COS APPLIED PER VPN CONNECTION' THEN

                     -- Update As_Is to DELETE
                     FOR rec_cos_to_be IN cur_cos_to_be
                     LOOP
                        --Line Item
                        UPDATE line_item li
                           SET action_code          = 'Update'
                         WHERE li.active            = 'Y'
                           AND UPPER (product_name) = 'BT IVPN2 VPN CONNECTION'
                           AND li.quote_header_id   = in_quote_header_id
                           AND li.site_id           = v_site_id
                           AND UPPER(li.fallback_type)     = in_fallbck_tobe
                           AND line_item_id IN (SELECT DISTINCT Li.line_item_id
                                                FROM line_item li,line_item_detail lid
                                                WHERE li.quote_header_id      = in_quote_header_id
                                                  AND li.site_id              = in_site_id
                                                  AND UPPER(li.fallback_type) = in_fallbck_tobe
                                                  AND UPPER(li.product_name)  = 'BT IVPN2 VPN CONNECTION'
                                                  AND UPPER (lid.action_code) <> 'ADD'
                                                  AND li.active               = 'Y'
                                                  AND lid.active              = 'Y'
                                                  AND lid.line_item_id        = li.line_item_id)
                           AND EXISTS (
                                       SELECT 1
                                         FROM line_item
                                        WHERE quote_header_id = in_quote_header_id
                                          AND site_id         = v_site_id
                                          AND UPPER(fallback_type)     = in_fallbck_tobe
                                          AND active            = 'Y'
                                          AND (UPPER(action_code)    = 'ADD'
                                               AND UPPER(product_name) ='BT IVPN2 ACCESS'
                                              ));

                        UPDATE order_line_item li
                           SET action_code          = 'Update'
                         WHERE li.active            = 'Y'
                           AND UPPER (product_name) = 'BT IVPN2 VPN CONNECTION'
                           AND li.order_header_id   = v_order_header_id
                           AND li.site_id           = v_site_id
                           AND UPPER(li.fallback_type)     = in_fallbck_tobe
                           AND UPPER(li.action_code) <> 'ADD'
                           AND EXISTS (
                                       SELECT 1
                                         FROM order_line_item
                                        WHERE order_header_id = v_order_header_id
                                          AND site_id         = v_site_id
                                          AND UPPER(fallback_type)   = in_fallbck_tobe
                                          AND active            = 'Y'
                                          AND (UPPER(action_code)    = 'ADD'
                                               AND UPPER(product_name) ='BT IVPN2 ACCESS'
                                              ));

                        UPDATE quote_line_item_detail_as_is
                           SET action_code = 'Delete'
                         WHERE active = 'Y'
                           AND line_item_id IN (
                               SELECT l.line_item_id
                                 FROM quote_line_item_as_is l
                                WHERE l.active = 'Y'
                                  AND l.quote_header_id    = in_quote_header_id
                                  AND l.site_id            = v_site_id
                                  AND UPPER (product_name) = 'BT IVPN2 VPN CONNECTION'
                                  AND UPPER(l.fallback_type)      = in_fallbck_asis)
                        AND UPPER(action_code) <> 'ADD'
                        AND EXISTS (
                               SELECT 1
                                 FROM quote_line_item_detail_as_is
                                WHERE active = 'Y'
                                  AND line_item_id IN (
                                         SELECT l.line_item_id
                                           FROM quote_line_item_as_is l
                                          WHERE l.active = 'Y'
                                            AND l.quote_header_id = in_quote_header_id
                                            AND l.site_id         = v_site_id
                                            AND UPPER(l.fallback_type)   = in_fallbck_asis
                                            )
                                  AND UPPER (VALUE) ='COS APPLIED PER VPN CONNECTION'
                                  and attribute_mapping_id = 203)
                        AND attribute_mapping_id IN(1104,1105,1106,1107,1108,1109,210,211,212,213,
                                                    1110,1111,1112,1113,209,1103,1114,1102, 215,202,
                                                    1101,1125, 1126, 1127, 1128, 1129, 1115, 1130)
                        AND EXISTS (SELECT 1
                                     FROM quote_line_item_as_is
                                    WHERE quote_header_id      = in_quote_header_id
                                      AND site_id              = v_site_id
                                      AND UPPER(fallback_type) = in_fallbck_asis
                                      AND active               = 'Y'
                                      AND UPPER(product_name)  ='BT IVPN2 PORT');

                        --order update
                        UPDATE order_line_item_detail_as_is
                           SET action_code = 'Delete'
                             WHERE active  = 'Y'
                               AND order_line_item_id IN (
                                   SELECT l.order_line_item_id
                                     FROM order_line_item_as_is l
                                    WHERE l.active             = 'Y'
                                      AND l.quote_header_id    = in_quote_header_id
                                      AND l.site_id            = v_site_id
                                      AND UPPER (product_name) = 'BT IVPN2 VPN CONNECTION'
                                      AND UPPER(l.fallback_type) = in_fallbck_asis)
                            AND UPPER(action_code) <> 'ADD'
                            AND attribute_mapping_id IN(1104,1105,1106,1107,1108,1109,210,211,212,213,
                                                        1110,1111,1112,1113,209,1103,1114,1102, 215,202,
                                                        1101,1125, 1126, 1127, 1128, 1129, 1115, 1130)
                            AND EXISTS (SELECT 1
                                         FROM order_line_item_as_is
                                        WHERE quote_header_id      = in_quote_header_id
                                          AND site_id              = v_site_id
                                          AND UPPER(fallback_type) = in_fallbck_asis
                                          AND active               = 'Y'
                                          AND UPPER(product_name)  ='BT IVPN2 PORT');
                     END LOOP;
                  END IF;


               ELSIF UPPER (cos_rec.VALUE) = 'COS APPLIED PER ACCESS' THEN   -- v_cos = 0  -- EQUAL --(CPA = CPA)

                  BEGIN
                     v_access_tech2 := 0;

                     SELECT 1 INTO v_access_tech2
                      FROM line_item_detail
                     WHERE active = 'Y'
                      AND line_item_id IN (SELECT l.line_item_id
                                            FROM line_item l
                                           WHERE l.active               = 'Y'
                                             AND l.quote_header_id      = in_quote_header_id
                                             AND l.site_id              = v_site_id
                                             AND UPPER(l.fallback_type) = in_fallbck_tobe)
                       AND attribute_mapping_id = 3 -- Access Tech
                       AND UPPER(value)         IN ('HVPN', 'DSL');

                  EXCEPTION
                       WHEN OTHERS THEN
                            v_access_tech2 := 0;
                  END;

                  --Line Item
                  IF v_access_tech2 > 0 THEN

                      UPDATE line_item li
                       SET action_code             = 'Update'
                      WHERE li.active              = 'Y'
                       AND UPPER (product_name)    = 'BT IVPN2 VPN CONNECTION'
                       AND li.quote_header_id      = in_quote_header_id
                       AND li.site_id              = v_site_id
                       AND UPPER(li.fallback_type) = in_fallbck_tobe
                       AND line_item_id IN (SELECT DISTINCT Li.line_item_id
                                            FROM line_item li,line_item_detail lid
                                            WHERE li.quote_header_id      = in_quote_header_id
                                              AND li.site_id              = in_site_id
                                              AND UPPER(li.fallback_type) = in_fallbck_tobe
                                              AND UPPER(li.product_name)  = 'BT IVPN2 VPN CONNECTION'
                                              AND UPPER (lid.action_code) <> 'ADD'
                                              AND li.active               = 'Y'
                                              AND lid.active              = 'Y'
                                              AND lid.line_item_id        = li.line_item_id)
                       AND EXISTS (SELECT 1
                                     FROM line_item_detail
                                    WHERE active = 'Y'
                                      AND line_item_id IN (
                                             SELECT l.line_item_id
                                               FROM line_item l
                                              WHERE l.active          = 'Y'
                                                AND l.quote_header_id = in_quote_header_id
                                                AND l.site_id         = v_site_id
                                                AND UPPER(l.fallback_type) = in_fallbck_asis
                                                )
                                  AND UPPER (VALUE)        = 'COS APPLIED PER ACCESS'
                                  AND attribute_mapping_id = 203)
                       AND EXISTS (
                                   SELECT 1
                                     FROM line_item
                                    WHERE quote_header_id      = in_quote_header_id
                                      AND site_id              = v_site_id
                                      AND UPPER(fallback_type) = in_fallbck_tobe
                                      AND active               = 'Y'
                                      AND (UPPER(action_code)  = 'ADD'
                                           AND UPPER(product_name) ='BT IVPN2 ACCESS'
                                          ));

                    UPDATE order_line_item li
                       SET action_code             = 'Update'
                     WHERE li.active               = 'Y'
                       AND UPPER (product_name)    = 'BT IVPN2 VPN CONNECTION'
                       AND li.order_header_id      = v_order_header_id
                       AND li.site_id              = v_site_id
                       AND UPPER(li.fallback_type) = in_fallbck_tobe
                       AND UPPER(li.action_code)   <> 'ADD'
                       AND EXISTS (
                                   SELECT 1
                                     FROM order_line_item
                                    WHERE order_header_id      = v_order_header_id
                                      AND site_id              = v_site_id
                                      AND UPPER(fallback_type) = in_fallbck_tobe
                                      AND active               = 'Y'
                                      AND (UPPER(action_code)  = 'ADD'
                                           AND UPPER(product_name) ='BT IVPN2 ACCESS'
                                          ));
                  END IF;
               END IF;
            END LOOP;
         END IF;
      END LOOP;

      -- Router Bundle Prod Key - 14
      FOR rec_rout_prod IN cur_rout_prod
      LOOP
         BEGIN
            v_router_bndl := 0;

            SELECT 1
              INTO v_router_bndl
              FROM line_item_detail
             WHERE active = 'Y'
               AND line_item_id IN (
                      SELECT l.line_item_id
                        FROM line_item l
                       WHERE l.active          = 'Y'
                         AND l.quote_header_id = in_quote_header_id
                         AND l.site_id         = v_site_id
                         AND UPPER(l.fallback_type) = in_fallbck_tobe)
               AND value <> rec_rout_prod.value
               AND attribute_mapping_id = 14;
         EXCEPTION
            WHEN NO_DATA_FOUND THEN
               v_router_bndl := 0;
            WHEN OTHERS THEN
               out_status := pkg_constants.con_status_failure;
               out_errmsg := SUBSTR (SQLERRM, 1, 100);
         END;

         IF v_router_bndl = 1 THEN
            -- As_Is Line Item table - BT CPE
            UPDATE quote_line_item_as_is qli
               SET action_code              = 'Delete'
             WHERE qli.active               = 'Y'
               AND UPPER (product_name)     = 'BT CPE'
               AND qli.quote_header_id      = in_quote_header_id
               AND qli.site_id              = v_site_id
               AND UPPER(qli.fallback_type) = in_fallbck_asis;

            UPDATE order_line_item_as_is qli
               SET action_code              = 'Delete'
             WHERE qli.active               = 'Y'
               AND UPPER (product_name)     = 'BT CPE'
               AND qli.quote_header_id      = in_quote_header_id
               AND qli.site_id              = v_site_id
               AND UPPER(qli.fallback_type) = in_fallbck_asis;

            -- To_Be Line Item table - CPE parts
            UPDATE line_item li
               SET action_code              = 'Add'
             WHERE li.active                = 'Y'
               AND UPPER (product_name)     = 'BT CPE'
               AND li.quote_header_id       = in_quote_header_id
               AND li.site_id               = v_site_id
               AND UPPER(li.fallback_type)  = in_fallbck_tobe;

            UPDATE order_line_item li
               SET action_code              = 'Add'
             WHERE li.active                = 'Y'
               AND UPPER (product_name)     = 'BT CPE'
               AND li.order_header_id       = v_order_header_id
               AND li.site_id               = v_site_id
               AND UPPER(li.fallback_type)  = in_fallbck_tobe;

            UPDATE line_item_detail lid
               SET action_code = 'Add'
             WHERE active      = 'Y'
               AND line_item_id IN (
                      SELECT l.line_item_id
                        FROM line_item l
                       WHERE l.active               = 'Y'
                         AND l.quote_header_id      = in_quote_header_id
                         AND l.site_id              = v_site_id
                         AND UPPER(l.fallback_type) = in_fallbck_tobe)
               AND attribute_mapping_id IN (301, 305, 306, 307, 318, 319, 320); -- CPE attrs
         END IF;
      END LOOP;

      -- PHYSICAL - End

      -- LOGICAL  - Start

       --BT GLOBAL COS ATTRIBUTES
       FOR rec_cur_global_cos_attr IN cur_global_cos_attr
       LOOP
           BEGIN
                v_global_cos_attr       := 0;

                SELECT COUNT (1)
                  INTO v_global_cos_attr
                  FROM line_item_detail
                 WHERE active = 'Y'
                   AND line_item_id IN (
                                          SELECT l.line_item_id
                                            FROM line_item l
                                           WHERE l.active          = 'Y'
                                             AND l.quote_header_id = in_quote_header_id
                                             AND l.site_id         = v_site_id
                                             AND UPPER(l.fallback_type) = in_fallbck_tobe)
                   AND NVL (VALUE, '-1') <> nvl(rec_cur_global_cos_attr.VALUE, '-1')
                   AND attribute_mapping_id = rec_cur_global_cos_attr.attribute_mapping_id;

           EXCEPTION
                WHEN NO_DATA_FOUND THEN
                    v_global_cos_attr        := 0;
                WHEN OTHERS THEN
                    v_global_cos_attr        := 0;
                    out_status := pkg_constants.con_status_failure;
                    out_errmsg := SUBSTR (SQLERRM, 1, 100);
           END;

           IF v_global_cos_attr  = 1 THEN

                UPDATE line_item_detail lid
                 SET action_code = 'Update'
                WHERE active = 'Y'
                AND line_item_id IN (
                                      SELECT l.line_item_id
                                        FROM line_item l
                                       WHERE l.active             = 'Y'
                                         AND l.quote_header_id    = in_quote_header_id
                                         AND l.site_id            = v_site_id
                                         AND UPPER(l.fallback_type) = in_fallbck_tobe)
                AND NVL (lid.VALUE, '-1') <> nvl(rec_cur_global_cos_attr.VALUE, '-1')
                AND attribute_mapping_id = rec_cur_global_cos_attr.attribute_mapping_id
                AND attribute_mapping_id IN  (1144,1145,1146,1147,1148,1149,1150,1151,1152,1153,1154,1155,203,204,602,28,30,135);

           END IF;
       END LOOP;

        --This code moved from botton to here for defect id =111360 fix
        --Total no of VPNs
        UPDATE line_item_detail lid
        SET action_code = 'Update'
        WHERE active      = 'Y'
        AND line_item_id IN (
                              SELECT l.line_item_id
                                FROM line_item l
                               WHERE l.active               = 'Y'
                                 AND l.quote_header_id      = in_quote_header_id
                                 AND l.site_id              = v_site_id
                                 AND UPPER(l.fallback_type) = in_fallbck_tobe
                                 AND UPPER (l.product_name) = 'BT IVPN2 PORT'
                                 AND UPPER (l.action_code)  <> 'ADD')
        AND attribute_mapping_id  = 204
        AND lid.VALUE <>
              (SELECT qld.VALUE
                 FROM quote_line_item_detail_as_is qld
                WHERE active = 'Y'
                  AND line_item_id IN (
                         SELECT l.line_item_id
                           FROM quote_line_item_as_is l
                          WHERE l.active = 'Y'
                            AND UPPER (l.product_name) = 'BT IVPN2 PORT'
                            AND l.quote_header_id      = in_quote_header_id
                            AND l.site_id              = v_site_id
                            AND UPPER(l.fallback_type) = in_fallbck_asis)
                  AND attribute_mapping_id = 204);

      -- Port Speed - 11
      --option1 and option2
      FOR port_rec IN cur_port
      LOOP
         BEGIN
            v_port := 0;

            SELECT 1 INTO v_port
              FROM line_item_detail
             WHERE active = 'Y'
               AND line_item_id IN (
                      SELECT l.line_item_id
                        FROM line_item l
                       WHERE l.active               = 'Y'
                         AND l.quote_header_id      = in_quote_header_id
                         AND l.site_id              = v_site_id
                         AND UPPER(l.fallback_type) = in_fallbck_tobe)
               AND value  <> port_rec.value
               AND attribute_mapping_id = 11; -- PortSpeed attribute
         EXCEPTION
            WHEN NO_DATA_FOUND THEN
               v_port := 0;
            WHEN OTHERS THEN
               out_status := pkg_constants.con_status_failure;
               out_errmsg := SUBSTR (SQLERRM, 1, 100);
         END;

         IF v_port = 1 THEN

            UPDATE line_item_detail lid
             SET action_code = 'Update'
             WHERE active    = 'Y'
               AND port_rec.value <> lid.value
               AND line_item_id IN (
                      SELECT l.line_item_id
                        FROM line_item l
                       WHERE l.active              = 'Y'
                         AND l.quote_header_id     = in_quote_header_id
                         AND l.site_id             = v_site_id
                         AND UPPER (product_name)  = 'BT IVPN2 PORT'
                         AND UPPER (l.action_code) <> 'ADD'
                        AND UPPER(l.fallback_type) = in_fallbck_tobe)
               AND attribute_mapping_id IN (11);
         END IF;
      END LOOP;

      -- CoS Assignment - 203
      FOR cos_rec IN cur_cos
      LOOP
         BEGIN
            v_cos := 0;

            SELECT 1
              INTO v_cos
              FROM line_item_detail
             WHERE active = 'Y'
               AND line_item_id IN (
                      SELECT l.line_item_id
                        FROM line_item l
                       WHERE l.active          = 'Y'
                         AND l.quote_header_id = in_quote_header_id
                         AND l.site_id         = v_site_id
                         AND UPPER(l.fallback_type)   = in_fallbck_tobe)
               AND VALUE <> cos_rec.VALUE
               AND attribute_mapping_id = 203;
         EXCEPTION
            WHEN NO_DATA_FOUND THEN
               v_cos := 0;
            WHEN OTHERS THEN
               out_status := pkg_constants.con_status_failure;
               out_errmsg := SUBSTR (SQLERRM, 1, 100);
         END;

         -- CoS Assignment
         IF v_cos = 1 THEN -- Not Equal
            IF UPPER (cos_rec.VALUE) = 'COS APPLIED PER ACCESS' THEN

                --Line Item
                UPDATE line_item li
                   SET action_code          = 'Update'
                 WHERE li.active            = 'Y'
                   AND UPPER (product_name) = 'BT IVPN2 VPN CONNECTION'
                   AND li.quote_header_id   = in_quote_header_id
                   AND li.site_id           = v_site_id
                   AND UPPER(li.fallback_type)     = in_fallbck_tobe
                   AND line_item_id IN (SELECT DISTINCT Li.line_item_id
                                        FROM line_item li,line_item_detail lid
                                        WHERE li.quote_header_id = in_quote_header_id
                                          AND li.site_id = in_site_id
                                          AND UPPER(li.fallback_type) = in_fallbck_tobe
                                          AND UPPER(li.product_name)  = 'BT IVPN2 VPN CONNECTION'
                                          AND UPPER (lid.action_code) <> 'ADD'
                                          AND li.active               = 'Y'
                                          AND lid.active              = 'Y'
                                          AND lid.line_item_id        = li.line_item_id)
                      AND EXISTS (
                               SELECT 1
                                 FROM line_item
                                WHERE quote_header_id      = in_quote_header_id
                                  AND site_id              = v_site_id
                                  AND UPPER(fallback_type) = in_fallbck_tobe
                                  AND active               = 'Y'
                                  AND (UPPER(action_code)  <> 'ADD'
                                       AND UPPER(product_name) ='BT IVPN2 PORT'
                                      ));

                --Order Line Item
                UPDATE order_line_item li
                   SET action_code          = 'Update'
                 WHERE li.active            = 'Y'
                   AND UPPER (product_name) = 'BT IVPN2 VPN CONNECTION'
                   AND li.order_header_id   = v_order_header_id
                   AND li.site_id           = v_site_id
                   AND UPPER(li.fallback_type) = in_fallbck_tobe
                   AND UPPER(li.action_code) <> 'ADD'
                   AND EXISTS (
                               SELECT 1
                                 FROM order_line_item
                                WHERE order_header_id      = v_order_header_id
                                  AND site_id              = v_site_id
                                  AND active               = 'Y'
                                  AND UPPER(fallback_type) = in_fallbck_tobe
                                  AND (UPPER(action_code)  <> 'ADD'
                                       AND UPPER(product_name) ='BT IVPN2 PORT'
                                      ));

                UPDATE quote_line_item_detail_as_is
                  SET action_code = 'Delete'
                WHERE active = 'Y'
                  AND line_item_id IN (
                         SELECT l.line_item_id
                           FROM quote_line_item_as_is l
                          WHERE l.active              = 'Y'
                            AND UPPER (product_name)  IN ('BT IVPN2 PORT')
                            AND l.quote_header_id     = in_quote_header_id
                            AND l.site_id             = v_site_id
                            AND UPPER (l.action_code) <> 'ADD'
                            AND UPPER(l.fallback_type) = in_fallbck_asis)
                 AND attribute_mapping_id IN(210, 211, 212, 213, 209, 215, 202, 214);

                UPDATE order_line_item_detail_as_is
                  SET action_code = 'Delete'
                WHERE active = 'Y'
                  AND order_line_item_id IN (
                         SELECT l.order_line_item_id
                           FROM order_line_item_as_is l
                          WHERE l.active              = 'Y'
                            AND UPPER (product_name)  IN ('BT IVPN2 PORT')
                            AND l.quote_header_id     = in_quote_header_id
                            AND l.site_id             = v_site_id
                            AND UPPER (l.action_code) <> 'ADD'
                            AND UPPER(l.fallback_type) = in_fallbck_asis)
                  AND attribute_mapping_id IN(1104,1105,1106,1107,1108,1109,1110,1111,1112,1113,1103,1114,1102,
                                                1101,1125, 1126, 1127, 1128, 1129, 1115, 1130);


               UPDATE line_item_detail
                  SET action_code = 'Update'
                WHERE active = 'Y'
                  AND line_item_id IN (
                         SELECT l.line_item_id
                           FROM line_item l
                          WHERE l.active              = 'Y'
                            AND UPPER (product_name)  IN ('BT IVPN2 PORT')
                            AND l.quote_header_id     = in_quote_header_id
                            AND l.site_id             = v_site_id
                            AND UPPER (l.action_code) <> 'ADD'
                            AND UPPER(l.fallback_type) = in_fallbck_tobe)
                  AND attribute_mapping_id IN (203);


               UPDATE line_item_detail
                  SET action_code = 'Add'
                WHERE active = 'Y'
                  AND line_item_id IN (
                         SELECT l.line_item_id
                           FROM line_item l
                          WHERE l.active             = 'Y'
                            AND UPPER (product_name) IN('BT IVPN2 VPN CONNECTION')
                            AND l.quote_header_id    = in_quote_header_id
                            AND l.site_id            = v_site_id
                            AND UPPER(l.fallback_type) = in_fallbck_tobe)
                AND UPPER (action_code)<> 'ADD'
                AND EXISTS (
                               SELECT 1
                                 FROM line_item_detail
                                WHERE active = 'Y'
                                  AND line_item_id IN (
                                         SELECT l.line_item_id
                                           FROM line_item l
                                          WHERE l.active = 'Y'
                                            AND l.quote_header_id = in_quote_header_id
                                            AND l.site_id         = v_site_id
                                            AND UPPER(l.fallback_type) = in_fallbck_tobe
                                            )
                                  AND UPPER (VALUE) ='COS APPLIED PER VPN CONNECTION'
                                  and attribute_mapping_id = 203)
                  AND attribute_mapping_id IN (210, 211, 212, 213, 209, 215, 202, 214)
                  AND EXISTS ( SELECT 1
                               FROM line_item l
                              WHERE l.active             = 'Y'
                                AND UPPER (product_name) IN ('BT IVPN2 PORT')
                                AND l.quote_header_id    = in_quote_header_id
                                AND l.site_id            = v_site_id
                                AND UPPER (l.action_code) <> 'ADD'
                                AND UPPER(l.fallback_type) = in_fallbck_tobe);

               ---order level
               UPDATE order_line_item_detail
                  SET action_code = 'Add'
                WHERE active = 'Y'
                  AND order_line_item_id IN (
                         SELECT l.order_line_item_id
                           FROM order_line_item l
                          WHERE l.active              = 'Y'
                            AND UPPER (product_name)  IN('BT IVPN2 VPN CONNECTION')
                            AND l.order_header_id     = v_order_header_id
                            AND l.site_id             = v_site_id
                            AND UPPER (l.action_code) <> 'ADD'
                            AND UPPER(l.fallback_type) = in_fallbck_tobe)
                  AND EXISTS (
                         SELECT 1
                           FROM order_line_item l
                          WHERE l.active              = 'Y'
                            AND UPPER (product_name)  IN ('BT IVPN2 PORT')
                            AND l.order_header_id     = v_order_header_id
                            AND l.site_id             = v_site_id
                            AND UPPER (l.action_code) <> 'ADD'
                            AND UPPER(l.fallback_type) = in_fallbck_tobe)
                  AND attribute_mapping_id IN (1104,1105,1106,1107,1108,1109,1110,1111,1112,1113,1103,1114,1102,
                                                1101,1125, 1126, 1127, 1128, 1129, 1115, 1130);-- COS


            ELSIF UPPER (cos_rec.VALUE) = 'COS APPLIED PER VPN CONNECTION'  THEN

               --Line Item
                UPDATE line_item li
                   SET action_code          = 'Update'
                 WHERE li.active            = 'Y'
                   AND UPPER (product_name) = 'BT IVPN2 VPN CONNECTION'
                   AND li.quote_header_id   = in_quote_header_id
                   AND li.site_id           = v_site_id
                   AND UPPER(li.fallback_type) = in_fallbck_tobe
                   AND li.line_item_id IN (SELECT DISTINCT Li.line_item_id
                                            FROM line_item li,line_item_detail lid
                                            WHERE li.quote_header_id      = in_quote_header_id
                                              AND li.site_id              = in_site_id
                                              AND UPPER(li.fallback_type) = in_fallbck_tobe
                                              AND UPPER(li.product_name)  = 'BT IVPN2 VPN CONNECTION'
                                              AND UPPER (lid.action_code) <> 'ADD'
                                              AND li.active               = 'Y'
                                              AND lid.active              = 'Y'
                                              AND lid.line_item_id        = li.line_item_id)
                   AND EXISTS (
                               SELECT 1
                                 FROM line_item
                                WHERE quote_header_id        = in_quote_header_id
                                  AND site_id                = v_site_id
                                  AND active                 = 'Y'
                                  AND UPPER(fallback_type)   = in_fallbck_tobe
                                  AND (UPPER(action_code)    <> 'ADD'
                                       AND UPPER(product_name) ='BT IVPN2 PORT'
                                      ));

                --Order Line Item
                UPDATE order_line_item li
                   SET action_code          = 'Update'
                 WHERE li.active            = 'Y'
                   AND UPPER (product_name) = 'BT IVPN2 VPN CONNECTION'
                   AND li.order_header_id   = v_order_header_id
                   AND li.site_id           = v_site_id
                   AND UPPER(li.fallback_type) = in_fallbck_tobe
                   AND UPPER(li.action_code) <> 'ADD'
                   AND EXISTS (
                               SELECT 1
                                 FROM order_line_item
                                WHERE order_header_id = v_order_header_id
                                  AND site_id         = v_site_id
                                  AND active          = 'Y'
                                  AND UPPER(fallback_type)   = in_fallbck_tobe
                                  AND (UPPER(action_code)    <> 'ADD'
                                       AND UPPER(product_name) ='BT IVPN2 PORT'
                                      ));

               UPDATE line_item_detail
                  SET action_code = 'Add'
                WHERE active = 'Y'
                  AND line_item_id IN (
                         SELECT l.line_item_id
                           FROM line_item l
                          WHERE l.active              = 'Y'
                            AND UPPER (product_name)  IN ('BT IVPN2 PORT')
                            AND l.quote_header_id     = in_quote_header_id
                            AND l.site_id             = v_site_id
                            AND UPPER (l.action_code) <> 'ADD'
                            AND UPPER(l.fallback_type) = in_fallbck_tobe)
                  AND EXISTS (
                               SELECT 1
                                 FROM line_item_detail
                                WHERE active = 'Y'
                                  AND line_item_id IN (
                                         SELECT l.line_item_id
                                           FROM line_item l
                                          WHERE l.active = 'Y'
                                            AND l.quote_header_id = in_quote_header_id
                                            AND l.site_id         = v_site_id
                                            AND UPPER(l.fallback_type) = in_fallbck_tobe
                                            )
                                  AND UPPER (VALUE) ='COS APPLIED PER ACCESS'
                                  and attribute_mapping_id = 203)
                  AND attribute_mapping_id IN (210, 211, 212, 213, 209, 215, 202, 214); -- COS

               --order level
               UPDATE order_line_item_detail
                  SET action_code = 'Add'
                WHERE active = 'Y'
                  AND order_line_item_id IN (
                         SELECT l.order_line_item_id
                           FROM order_line_item l
                          WHERE l.active              = 'Y'
                            AND UPPER (product_name)  IN ('BT IVPN2 PORT')
                            AND l.order_header_id     = v_order_header_id
                            AND l.site_id             = v_site_id
                            AND UPPER (l.action_code) <> 'ADD'
                            AND UPPER(l.fallback_type) = in_fallbck_tobe)
                  AND attribute_mapping_id IN(1104,1105,1106,1107,1108,1109,1110,1111,1112,1113,1103,1114,1102,
                                                1101,1125, 1126, 1127, 1128, 1129, 1115, 1130);


               UPDATE line_item_detail
                  SET action_code = 'Update'
                WHERE active = 'Y'
                  AND line_item_id IN (
                         SELECT l.line_item_id
                           FROM line_item l
                          WHERE l.active              = 'Y'
                            AND UPPER (product_name)  IN ('BT IVPN2 PORT')
                            AND l.quote_header_id     = in_quote_header_id
                            AND l.site_id             = v_site_id
                            AND UPPER (l.action_code) <> 'ADD'
                            AND UPPER(l.fallback_type) = in_fallbck_tobe)
                  AND attribute_mapping_id IN (203);

               UPDATE quote_line_item_detail_as_is
                  SET action_code = 'Delete'
                WHERE active = 'Y'
                  AND line_item_id IN (
                         SELECT l.line_item_id
                           FROM quote_line_item_as_is l
                          WHERE l.active              = 'Y'
                            AND UPPER (product_name)  IN('BT IVPN2 VPN CONNECTION')
                            AND l.quote_header_id     = in_quote_header_id
                            AND l.site_id             = v_site_id
                            AND UPPER(l.fallback_type) = in_fallbck_asis)
                  AND UPPER (action_code) <> 'ADD'
                  AND EXISTS (
                               SELECT 1
                                 FROM quote_line_item_detail_as_is
                                WHERE active = 'Y'
                                  AND line_item_id IN (
                                         SELECT l.line_item_id
                                           FROM quote_line_item_as_is l
                                          WHERE l.active = 'Y'
                                            AND l.quote_header_id = in_quote_header_id
                                            AND l.site_id         = v_site_id
                                            AND UPPER(l.fallback_type) = in_fallbck_asis
                                            )
                                  AND UPPER (VALUE) ='COS APPLIED PER ACCESS'
                                  and attribute_mapping_id = 203)
                  AND EXISTS (
                         SELECT 1
                           FROM quote_line_item_as_is l
                          WHERE l.active              = 'Y'
                            AND UPPER (product_name)  IN ('BT IVPN2 PORT')
                            AND l.quote_header_id     = in_quote_header_id
                            AND l.site_id             = v_site_id
                            AND UPPER (l.action_code) <> 'ADD'
                            AND UPPER(l.fallback_type) = in_fallbck_asis)
                  AND attribute_mapping_id IN (210, 211, 212, 213, 209, 215, 202, 214);


               --order level
               UPDATE order_line_item_detail_as_is
                  SET action_code = 'Delete'
                WHERE active = 'Y'
                  AND order_line_item_id IN (
                         SELECT l.order_line_item_id
                           FROM order_line_item_as_is l
                          WHERE l.active              = 'Y'
                            AND UPPER (product_name)  IN('BT IVPN2 VPN CONNECTION')
                            AND l.quote_header_id     = in_quote_header_id
                            AND l.site_id             = v_site_id
                            AND UPPER (l.action_code) <> 'ADD'
                            AND UPPER(l.fallback_type) = in_fallbck_asis)
-- Defect id 108023 fixed on 27-May-2011
--                  AND EXISTS (
--                         SELECT 1
--                           FROM order_line_item_as_is l
--                          WHERE l.active              = 'Y'
--                            AND UPPER (product_name)  IN ('BT IVPN2 PORT')
--                            AND l.quote_header_id     = in_quote_header_id
--                            AND l.site_id             = v_site_id
--                            AND UPPER (l.action_code) <> 'ADD'
--                            AND UPPER(l.fallback_type) = in_fallbck_asis)
                  AND attribute_mapping_id IN (1104,1105,1106,1107,1108,1109,1110,1111,1112,1113,1103,1114,1102,
                                                1101,1125, 1126, 1127, 1128, 1129, 1115, 1130);
            END IF;

         END IF;
      END LOOP;


      -- CoS attributes
      FOR rec_cosattr IN cur_cosattr
      LOOP
         BEGIN
            v_cosattr       := 0;
            v_cosattr_order := 0;

            SELECT COUNT (1)
              INTO v_cosattr
              FROM line_item_detail
             WHERE active = 'Y'
               AND line_item_id IN (
                      SELECT l.line_item_id
                        FROM line_item l
                       WHERE l.active          = 'Y'
                         AND l.quote_header_id = in_quote_header_id
                         AND l.site_id         = v_site_id
                         AND UPPER(l.fallback_type)   = in_fallbck_tobe)
               AND NVL (VALUE, '-1') <> nvl(rec_cosattr.VALUE, '-1')
               AND attribute_mapping_id = rec_cosattr.attribute_mapping_id;

            SELECT COUNT (1)
              INTO v_cosattr_order
              FROM order_line_item_detail
             WHERE active = 'Y'
               AND order_line_item_id IN (
                      SELECT l.order_line_item_id
                        FROM order_line_item l
                       WHERE l.active          = 'Y'
                         AND l.order_header_id = v_order_header_id
                         AND l.site_id         = v_site_id
                         AND UPPER(l.fallback_type) = in_fallbck_tobe)
               AND NVL (VALUE, '-1') <> nvl(rec_cosattr.VALUE, '-1')
               AND attribute_mapping_id = rec_cosattr.attribute_mapping_id;
         EXCEPTION
            WHEN NO_DATA_FOUND THEN
               v_cosattr       := 0;
               v_cosattr_order := 0;
            WHEN OTHERS THEN
               v_cosattr       := 0;
               v_cosattr_order := 0;
               out_status := pkg_constants.con_status_failure;
               out_errmsg := SUBSTR (SQLERRM, 1, 100);
         END;

        -- For PORT CoS Attr
         IF v_cosattr = 1 OR v_cosattr_order = 1 THEN

            --select cost assigment attribute action code
            v_cos_ass_att_action_code_cnt  := 0;

            BEGIN
               SELECT COUNT (1)
                 INTO v_cos_ass_att_action_code_cnt
                 FROM line_item li, line_item_detail lid
                WHERE li.active                = 'Y'
                  AND lid.active               = 'Y'
                  AND li.quote_header_id       = in_quote_header_id
                  AND li.site_id               = v_site_id
                  AND lid.line_item_id         = li.line_item_id
                  AND lid.attribute_mapping_id IN (203)
                  AND UPPER(lid.value)         = 'COS APPLIED PER ACCESS'
                  AND UPPER (lid.action_code)  = 'NONE'
                  AND UPPER(li.fallback_type)  = in_fallbck_tobe;

            EXCEPTION
               WHEN OTHERS THEN
                  v_cos_ass_att_action_code_cnt  := 0;
            END;

             UPDATE line_item_detail lid
               SET action_code = 'Update'
             WHERE active = 'Y'
               AND line_item_id IN (
                      SELECT l.line_item_id
                        FROM line_item l
                       WHERE l.active             = 'Y'
                         AND l.quote_header_id    = in_quote_header_id
                         AND l.site_id            = v_site_id
                         AND UPPER (product_name) IN('BT IVPN2 PORT')
                         AND UPPER(l.action_code) <> 'ADD'
                         AND UPPER(l.fallback_type) = in_fallbck_tobe)
               AND attribute_mapping_id IN (210, 211, 212, 213, 209, 215, 202, 214)
               AND v_cos_ass_att_action_code_cnt > 0;


             UPDATE order_line_item_detail lid
               SET action_code = 'Update'
             WHERE active = 'Y'
               AND order_line_item_id IN (
                      SELECT l.order_line_item_id
                        FROM order_line_item l
                       WHERE l.active             = 'Y'
                         AND l.order_header_id    = v_order_header_id
                         AND l.site_id            = v_site_id
                         AND UPPER (product_name) IN ('BT IVPN2 PORT')
                         AND UPPER(l.action_code) <> 'ADD'
                         AND UPPER(l.fallback_type) = in_fallbck_tobe)
               AND attribute_mapping_id IN (1104,1105,1106,1107,1108,1109,1110,1111,1112,1113,1103,1114,1102,
                                            1101,1125, 1126, 1127, 1128, 1129, 1115, 1130)
               AND v_cos_ass_att_action_code_cnt > 0;

-- For VPN Connection CoS Attr
              BEGIN
                v_cos_ass_att_action_code_cnt1 := 0;

                SELECT COUNT (DISTINCT lid.action_code)
                 INTO v_cos_ass_att_action_code_cnt1
                 FROM line_item li, line_item_detail lid
                WHERE li.active                = 'Y'
                  AND lid.active               = 'Y'
                  AND li.quote_header_id       = in_quote_header_id
                  AND li.site_id               = v_site_id
                  AND lid.line_item_id         = li.line_item_id
                  AND lid.attribute_mapping_id IN (203)
                  AND UPPER(lid.value)         = 'COS APPLIED PER VPN CONNECTION'
                  AND UPPER (lid.action_code)  <> 'UPDATE'
                  AND UPPER(li.fallback_type)  = in_fallbck_tobe;
              EXCEPTION
                  WHEN OTHERS THEN
                    v_cos_ass_att_action_code_cnt1 := 0;
              END;

              --Line Item_Detail
                UPDATE line_item_detail
                SET action_code = 'Update'
                WHERE line_item_id IN ( SELECT li.line_item_id
                                       FROM line_item li, line_item_detail lid
                                       WHERE li.quote_header_id    = in_quote_header_id
                                       AND li.site_id              = in_site_id
                                       AND UPPER(li.fallback_type) = in_fallbck_tobe
                                       AND li.active               = 'Y'
                                       AND lid.active              = 'Y'
                                       AND lid.line_item_id        = li.line_item_id
                                       AND UPPER(li.product_name)  = 'BT IVPN2 VPN CONNECTION'
                                       AND UPPER(lid.action_code)  NOT IN ('ADD'))
                 AND attribute_mapping_id IN (210, 211, 212, 213, 209, 215, 202, 214)
                 AND v_cos_ass_att_action_code_cnt1 > 0
                 AND row_id = rec_cosattr.row_id;


                --Line Item
                UPDATE line_item li
                   SET action_code          = 'Update'
                 WHERE li.active            = 'Y'
                   AND UPPER (product_name) = 'BT IVPN2 VPN CONNECTION'
                   AND li.quote_header_id   = in_quote_header_id
                   AND li.site_id           = v_site_id
                   AND UPPER(li.fallback_type) = in_fallbck_tobe
                   AND EXISTS (SELECT 1
                                FROM line_item li,line_item_detail lid
                                WHERE li.quote_header_id      = in_quote_header_id
                                  AND li.site_id              = in_site_id
                                  AND UPPER(li.fallback_type) = in_fallbck_tobe
                                  AND UPPER(li.product_name)  = 'BT IVPN2 VPN CONNECTION'
                                  AND UPPER(lid.action_code)  = 'UPDATE'
                                  AND li.active               = 'Y'
                                  AND lid.active              = 'Y'
                                  AND lid.line_item_id        = li.line_item_id);


                --Order Line Item_Detail
                UPDATE order_line_item_detail
                SET action_code = 'Update'
                WHERE order_line_item_id IN (SELECT l.order_line_item_id
                                               FROM order_line_item l
                                               WHERE l.active             = 'Y'
                                               AND l.order_header_id      = v_order_header_id
                                               AND l.site_id              = v_site_id
                                               AND UPPER(l.fallback_type) = in_fallbck_tobe
                                               AND UPPER(l.product_name)  = 'BT IVPN2 VPN CONNECTION'
                                               AND UPPER(l.action_code)   <> 'ADD'
                                               AND row_id                 = rec_cosattr.row_id)
                 AND attribute_mapping_id IN (1104,1105,1106,1107,1108,1109,1110,1111,1112,1113,1103,1114,1102,
                                              1101,1125, 1126, 1127, 1128, 1129, 1115, 1130)
                 AND v_cos_ass_att_action_code_cnt1 > 0;


                -- Order Line Item
                UPDATE order_line_item li
                SET action_code             = 'Update'
                WHERE li.active             = 'Y'
                AND UPPER (product_name)    = 'BT IVPN2 VPN CONNECTION'
                AND li.order_header_id      = v_order_header_id
                AND li.site_id              = v_site_id
                AND UPPER(li.fallback_type) = in_fallbck_tobe
                AND li.row_id               = rec_cosattr.row_id
                AND EXISTS (SELECT 1
                            FROM order_line_item li, order_line_item_detail lid
                            WHERE li.order_header_id      = v_order_header_id
                              AND li.site_id              = in_site_id
                              AND UPPER(li.fallback_type) = in_fallbck_tobe
                              AND UPPER(li.product_name)  = 'BT IVPN2 VPN CONNECTION'
                              AND UPPER(lid.action_code)  = 'UPDATE'
                              AND li.active               = 'Y'
                              AND lid.active              = 'Y'
                              AND lid.order_line_item_id  = li.order_line_item_id);
   END IF;
END LOOP;

      /*
      -- For VPN Connection CoS Attr
      BEGIN
        v_cos_ass_att_action_code_cnt1 := 0;

        SELECT COUNT (DISTINCT lid.action_code)
         INTO v_cos_ass_att_action_code_cnt1
         FROM line_item li, line_item_detail lid
        WHERE li.active                = 'Y'
          AND lid.active               = 'Y'
          AND li.quote_header_id       = in_quote_header_id
          AND li.site_id               = v_site_id
          AND lid.line_item_id         = li.line_item_id
          AND lid.attribute_mapping_id IN (203)
          AND UPPER(lid.value)         = 'COS APPLIED PER VPN CONNECTION'
          AND UPPER (lid.action_code)  <> 'UPDATE'
          AND UPPER(li.fallback_type)  = in_fallbck_tobe;
      EXCEPTION
       WHEN OTHERS THEN
          v_cos_ass_att_action_code_cnt1 := 0;
      END;


        IF v_cos_ass_att_action_code_cnt1 >= 1 THEN
            FOR rec_VPN_COS IN cur_VPN_COS
            LOOP
                --Line Item_Detail
                UPDATE line_item_detail
                SET action_code = 'Update'
                WHERE line_item_id IN ( SELECT li.line_item_id
                                       FROM line_item li, line_item_detail lid
                                       WHERE li.quote_header_id    = in_quote_header_id
                                       AND li.site_id              = in_site_id
                                       AND UPPER(li.fallback_type) = in_fallbck_tobe
                                       AND li.active               = 'Y'
                                       AND lid.active              = 'Y'
                                       AND lid.line_item_id        = li.line_item_id
                                       AND UPPER(li.product_name)  = 'BT IVPN2 VPN CONNECTION'
                                       AND UPPER(lid.action_code)  NOT IN ('ADD'))
                 AND row_id   = rec_VPN_COS.row_id
                 AND attribute_mapping_id = rec_VPN_COS.attribute_mapping_id
                 AND value   <> rec_VPN_COS.value;
            END LOOP;

            --Line Item
            UPDATE line_item li
               SET action_code          = 'Update'
             WHERE li.active            = 'Y'
               AND UPPER (product_name) = 'BT IVPN2 VPN CONNECTION'
               AND li.quote_header_id   = in_quote_header_id
               AND li.site_id           = v_site_id
               AND UPPER(li.fallback_type) = in_fallbck_tobe
               AND EXISTS (SELECT 1
                            FROM line_item li,line_item_detail lid
                            WHERE li.quote_header_id      = in_quote_header_id
                              AND li.site_id              = in_site_id
                              AND UPPER(li.fallback_type) = in_fallbck_tobe
                              AND UPPER(li.product_name)  = 'BT IVPN2 VPN CONNECTION'
                              AND UPPER(lid.action_code)  = 'UPDATE'
                              AND li.active               = 'Y'
                              AND lid.active              = 'Y'
                              AND lid.line_item_id        = li.line_item_id);

            FOR rec_VPN_COS_ord IN cur_VPN_COS_ord
            LOOP
                --Order Line Item_Detail
                UPDATE order_line_item_detail
                SET action_code = 'Update'
                WHERE order_line_item_id IN (SELECT l.order_line_item_id
                                       FROM order_line_item l
                                       WHERE l.active             = 'Y'
                                       AND l.order_header_id      = v_order_header_id
                                       AND l.site_id              = v_site_id
                                       AND UPPER(l.fallback_type) = in_fallbck_tobe
                                       AND UPPER(l.product_name)  = 'BT IVPN2 VPN CONNECTION'
                                       AND UPPER(l.action_code)   <> 'ADD')
                 AND row_id   = rec_VPN_COS_ord.row_id
                 AND attribute_mapping_id = rec_VPN_COS_ord.attribute_mapping_id
                 AND value   <> rec_VPN_COS_ord.value;


                -- Order Line Item
                UPDATE order_line_item li
                SET action_code             = 'Update'
                WHERE li.active             = 'Y'
                AND UPPER (product_name)    = 'BT IVPN2 VPN CONNECTION'
                AND li.order_header_id      = v_order_header_id
                AND li.site_id              = v_site_id
                AND UPPER(li.fallback_type) = in_fallbck_tobe
                AND li.row_id               = rec_VPN_COS_ord.row_id
                AND EXISTS (SELECT 1
                            FROM order_line_item li, order_line_item_detail lid
                            WHERE li.order_header_id      = v_order_header_id
                              AND li.site_id              = in_site_id
                              AND UPPER(li.fallback_type) = in_fallbck_tobe
                              AND UPPER(li.product_name)  = 'BT IVPN2 VPN CONNECTION'
                              AND UPPER(lid.action_code)  = 'UPDATE'
                              AND li.active               = 'Y'
                              AND lid.active              = 'Y'
                              AND lid.order_line_item_id  = li.order_line_item_id);
            END LOOP;
        END IF;
      */

     -- PORT PRICING TYPE
     FOR rec_port_pricing IN cur_port_pricing_type
      LOOP
         BEGIN
            v_port_pricing := 0;

            SELECT 1 INTO v_port_pricing
              FROM line_item_detail
             WHERE active = 'Y'
               AND line_item_id IN (
                      SELECT l.line_item_id
                        FROM line_item l
                       WHERE l.active               = 'Y'
                         AND l.quote_header_id      = in_quote_header_id
                         AND l.site_id              = v_site_id
                         AND UPPER(l.fallback_type) = in_fallbck_tobe)
               AND VALUE <> rec_port_pricing.VALUE
               AND attribute_mapping_id = 2; -- Port Pricing Type attribute
         EXCEPTION
            WHEN NO_DATA_FOUND THEN
               v_port_pricing := 0;
            WHEN OTHERS THEN
               out_status := pkg_constants.con_status_failure;
               out_errmsg := SUBSTR (SQLERRM, 1, 100);
         END;


         IF v_port_pricing = 1 THEN

            --Quote
            UPDATE line_item_detail
            SET action_code = 'Update'
            WHERE active    = 'Y'
              AND line_item_id IN (
                     SELECT l.line_item_id
                       FROM line_item l
                      WHERE l.active               = 'Y'
                        AND l.quote_header_id      = in_quote_header_id
                        AND l.site_id              = v_site_id
                        AND UPPER (product_name)   = 'BT IVPN2 PORT'
                        AND UPPER(action_code)     <> 'ADD'
                        AND UPPER(l.fallback_type) = in_fallbck_tobe)
              AND attribute_mapping_id = 2;

           --Order
            UPDATE order_line_item_detail
            SET action_code = 'Update'
            WHERE active    = 'Y'
              AND order_line_item_id IN (
                     SELECT l.order_line_item_id
                       FROM order_line_item l
                      WHERE l.active               = 'Y'
                        AND l.order_header_id      = v_order_header_id
                        AND l.site_id              = v_site_id
                        AND UPPER (product_name)   = 'BT IVPN2 PORT'
                        AND UPPER(action_code)     <> 'ADD'
                        AND UPPER(l.fallback_type) = in_fallbck_tobe)
              AND attribute_mapping_id = 2; -- Port Pricing Type
         END IF;
      END LOOP;


     --BT MPLS NO. OF BGP SESSIONS'-- 242
     FOR rec_MPLS IN cur_MPLS_sessions
      LOOP
         BEGIN
            v_MPLS := 0;

            SELECT 1 INTO v_MPLS
              FROM line_item_detail
             WHERE active = 'Y'
               AND line_item_id IN (
                      SELECT l.line_item_id
                        FROM line_item l
                       WHERE l.active               = 'Y'
                         AND l.quote_header_id      = in_quote_header_id
                         AND l.site_id              = v_site_id
                         AND UPPER(l.fallback_type) = in_fallbck_tobe)
               AND VALUE <> rec_MPLS.VALUE
               AND attribute_mapping_id = 242;
         EXCEPTION
            WHEN NO_DATA_FOUND THEN
               v_MPLS := 0;
            WHEN OTHERS THEN
               out_status := pkg_constants.con_status_failure;
               out_errmsg := SUBSTR (SQLERRM, 1, 100);
         END;


         IF v_MPLS = 1 THEN

            --Quote
            UPDATE line_item_detail
            SET action_code = 'Update'
            WHERE active    = 'Y'
              AND line_item_id IN (
                     SELECT l.line_item_id
                       FROM line_item l
                      WHERE l.active               = 'Y'
                        AND l.quote_header_id      = in_quote_header_id
                        AND l.site_id              = v_site_id
                        AND UPPER (product_name)   = 'BT IVPN2 PORT'
                        AND UPPER(action_code)     <> 'ADD'
                        AND UPPER(l.fallback_type) = in_fallbck_tobe)
              AND attribute_mapping_id = 242;

           --Order
            UPDATE order_line_item_detail
            SET action_code = 'Update'
            WHERE active    = 'Y'
              AND order_line_item_id IN (
                     SELECT l.order_line_item_id
                       FROM order_line_item l
                      WHERE l.active               = 'Y'
                        AND l.order_header_id      = v_order_header_id
                        AND l.site_id              = v_site_id
                        AND UPPER (product_name)   = 'BT IVPN2 PORT'
                        AND UPPER(action_code)     <> 'ADD'
                        AND UPPER(l.fallback_type) = in_fallbck_tobe)
              AND attribute_mapping_id = 242;
         END IF;
      END LOOP;



     --PORT SPEED  -- option1 to option1
      FOR port_rec IN cur_port
      LOOP
         BEGIN
            v_port := 0;

            SELECT 1
              INTO v_port
              FROM line_item_detail
             WHERE active = 'Y'
               AND line_item_id IN (
                      SELECT l.line_item_id
                        FROM line_item l
                       WHERE l.active               = 'Y'
                         AND l.quote_header_id      = in_quote_header_id
                         AND l.site_id              = v_site_id
                         AND UPPER(l.fallback_type) = in_fallbck_tobe)
               AND VALUE = port_rec.VALUE
               AND attribute_mapping_id = 11; -- PortSpeed attribute
         EXCEPTION
            WHEN NO_DATA_FOUND THEN
               v_port := 0;
            WHEN OTHERS THEN
               out_status := pkg_constants.con_status_failure;
               out_errmsg := SUBSTR (SQLERRM, 1, 100);
         END;

         IF v_port = 1 THEN
            BEGIN
               --Quote
                SELECT 1 into v_port_cos_attr1 FROM line_item_detail
                WHERE active = 'Y'
                  AND line_item_id IN (
                         SELECT l.line_item_id
                           FROM line_item l
                          WHERE l.active               = 'Y'
                            AND l.quote_header_id      = in_quote_header_id
                            AND l.site_id              = v_site_id
                            AND UPPER (product_name)   = 'BT IVPN2 PORT'
                            AND UPPER(action_code)     <> 'ADD'
                            AND UPPER(l.fallback_type) = in_fallbck_tobe)
                  AND UPPER(action_code) <> 'NONE'
                  AND attribute_mapping_id IN(1104,1105,1106,1107,1108,1109,210,211,212,213,214,
                                              1110,1111,1112,1113,209,1103,1114,1102, 215,202,
                                              1101,1125, 1126, 1127, 1128, 1129, 1115, 1130);


               --Order
                SELECT 1 into v_port_cos_attr2 FROM order_line_item_detail
                WHERE active = 'Y'
                  AND order_line_item_id IN (
                         SELECT l.order_line_item_id
                           FROM order_line_item l
                          WHERE l.active               = 'Y'
                            AND l.order_header_id      = v_order_header_id
                            AND l.site_id              = v_site_id
                            AND UPPER (product_name)   = 'BT IVPN2 PORT'
                            AND UPPER(l.fallback_type) = in_fallbck_tobe
                            AND UPPER(action_code)     <> 'ADD')
                  AND UPPER(action_code) <> 'NONE'
                  AND attribute_mapping_id IN(1104,1105,1106,1107,1108,1109,1110,1111,1112,1113,
                                              1103,1114,1102,1101,1125, 1126, 1127, 1128, 1129, 1115, 1130);
            EXCEPTION
               WHEN NO_DATA_FOUND THEN
                  v_port_cos_attr1 := 0;
                  v_port_cos_attr2 := 0;
                WHEN OTHERS THEN
                   out_status := pkg_constants.con_status_failure;
                   out_errmsg := SUBSTR (SQLERRM, 1, 100);
            END;


            BEGIN
                -- Quote
                SELECT 1 into v_vpn_cos_attr1 FROM line_item_detail
                WHERE active = 'Y'
                  AND line_item_id IN (
                         SELECT l.line_item_id
                           FROM line_item l
                          WHERE l.active               = 'Y'
                            AND l.quote_header_id      = in_quote_header_id
                            AND l.site_id              = v_site_id
                            AND UPPER (product_name)   = 'BT IVPN2 VPN CONNECTION'
                            AND UPPER(l.fallback_type) = in_fallbck_tobe)
                  AND UPPER(action_code) <> 'NONE'
                  AND attribute_mapping_id IN(1104,1105,1106,1107,1108,1109,210,211,212,213,214,
                                              1110,1111,1112,1113,209,1103,1114,1102, 215,202,
                                              1101,1125, 1126, 1127, 1128, 1129, 1115, 1130);

               -- Order
                SELECT 1 into v_vpn_cos_attr2 FROM order_line_item_detail
                WHERE active      = 'Y'
                  AND order_line_item_id IN (
                         SELECT l.order_line_item_id
                           FROM order_line_item l
                          WHERE l.active               = 'Y'
                            AND l.order_header_id      = v_order_header_id
                            AND l.site_id              = v_site_id
                            AND UPPER (product_name)   = 'BT IVPN2 VPN CONNECTION'
                            AND UPPER(l.fallback_type) = in_fallbck_tobe)
                  AND UPPER(action_code) <> 'NONE'
                  AND attribute_mapping_id IN(1104,1105,1106,1107,1108,1109,1110,1111,1112,1113,
                                              1103,1114,1102,1101,1125, 1126, 1127, 1128, 1129, 1115, 1130);
            EXCEPTION
               WHEN NO_DATA_FOUND THEN
                  v_vpn_cos_attr1 := 0;
                  v_vpn_cos_attr2 := 0;
                WHEN OTHERS THEN
                   out_status := pkg_constants.con_status_failure;
                   out_errmsg := SUBSTR (SQLERRM, 1, 100);
            END;

            -- Port Pricing Type
            BEGIN
                SELECT 1 INTO v_port_pricing_type
                FROM line_item_detail
                WHERE active    = 'Y'
                  AND line_item_id IN (
                         SELECT l.line_item_id
                           FROM line_item l
                          WHERE l.active               = 'Y'
                            AND l.quote_header_id      = in_quote_header_id
                            AND l.site_id              = v_site_id
                            AND UPPER (product_name)   = 'BT IVPN2 PORT'
                            --AND UPPER(action_code)     <> 'ADD'
                            AND UPPER(l.fallback_type) = in_fallbck_tobe)
                  AND attribute_mapping_id = 2
                  AND UPPER(action_code)   = 'UPDATE';

            EXCEPTION
               WHEN NO_DATA_FOUND THEN
                  v_port_pricing_type := 0;
                WHEN OTHERS THEN
                   out_status := pkg_constants.con_status_failure;
                   out_errmsg := SUBSTR (SQLERRM, 1, 100);

            END;

           -- BT MPLS sessions
            BEGIN
                SELECT 1 INTO v_MPLS_session
                FROM line_item_detail
                WHERE active    = 'Y'
                  AND line_item_id IN (
                         SELECT l.line_item_id
                           FROM line_item l
                          WHERE l.active               = 'Y'
                            AND l.quote_header_id      = in_quote_header_id
                            AND l.site_id              = v_site_id
                            AND UPPER (product_name)   = 'BT IVPN2 PORT'
                            --AND UPPER(action_code)     <> 'ADD'
                            AND UPPER(l.fallback_type) = in_fallbck_tobe)
                  AND attribute_mapping_id = 242
                  AND UPPER(action_code)   = 'UPDATE';

            EXCEPTION
               WHEN NO_DATA_FOUND THEN
                  v_MPLS_session := 0;
                WHEN OTHERS THEN
                   out_status := pkg_constants.con_status_failure;
                   out_errmsg := SUBSTR (SQLERRM, 1, 100);

            END;

           -- Port/CoS Reconfiguration CE (TO BE) = ADD (EXISTS)
           v_port_reconfig:=0;
           SELECT COUNT(action_code)
           INTO v_port_reconfig
           FROM price_line_item_detail
            WHERE price_line_item_id IN (SELECT DISTINCT price_line_item_id
                                          FROM price_line_item
                                          WHERE line_item_id IN
                                         (SELECT DISTINCT line_item_id FROM line_item l
                                          WHERE l.active             = 'Y'
                                          AND UPPER (l.product_name) = 'BT IVPN2 PORT'
                                          AND l.quote_header_id      = in_quote_header_id
                                          AND l.site_id              = v_site_id
                                          AND UPPER(l.fallback_type) = in_fallbck_tobe
                                          ))
            AND price_line_item_id = (CASE in_fallbck_tobe WHEN 'PRIMARY'   THEN 2012
                                                           WHEN 'SECONDARY' THEN 2013
                                      END)
            AND UPPER(action_code) = 'ADD';

            --Total no.of VPN's
            v_total_no_vpn := 0;
            BEGIN
                SELECT count(1) into  v_total_no_vpn FROM line_item_detail
                WHERE active = 'Y'
                  AND line_item_id IN (
                         SELECT l.line_item_id
                           FROM line_item l
                          WHERE l.active               = 'Y'
                            AND l.quote_header_id      = in_quote_header_id
                            AND l.site_id              = v_site_id
                            AND UPPER (product_name)   = 'BT IVPN2 PORT'
                            AND UPPER(l.fallback_type) = in_fallbck_tobe)
                  AND UPPER(action_code) = 'UPDATE'
                  AND attribute_mapping_id =204;
            EXCEPTION
               WHEN NO_DATA_FOUND THEN
                  v_total_no_vpn := 0;
                WHEN OTHERS THEN
                   out_status := pkg_constants.con_status_failure;
                   out_errmsg := SUBSTR (SQLERRM, 1, 100);
            END;

            IF (v_port_cos_attr1 = 1 OR  v_port_cos_attr2 = 1 OR v_vpn_cos_attr1 = 1 OR v_vpn_cos_attr2 = 1 OR v_port_pricing_type = 1 OR
                v_MPLS_session = 1 OR v_port_reconfig = 1 OR v_total_no_vpn = 1)THEN
             UPDATE line_item_detail lid
                   SET action_code = 'Update'
                 WHERE active = 'Y'
                   AND line_item_id IN (
                          SELECT l.line_item_id
                            FROM line_item l
                           WHERE l.active              = 'Y'
                             AND l.quote_header_id     = in_quote_header_id
                             AND l.site_id             = v_site_id
                             AND UPPER (product_name)  = 'BT IVPN2 PORT'
                             AND UPPER (l.action_code) <> 'ADD'
                             AND UPPER(l.fallback_type) = in_fallbck_tobe)
                   AND attribute_mapping_id IN (11);
            END IF;

         END IF;
     END LOOP;


      -- Router Bundle Prod Key  -  14
      FOR rec_rout_prod IN cur_rout_prod
      LOOP
         BEGIN
            v_bundl := 0;

            SELECT 1 INTO v_bundl
              FROM line_item_detail
             WHERE active = 'Y'
               AND line_item_id IN (
                      SELECT l.line_item_id
                        FROM line_item l
                       WHERE l.active = 'Y'
                         AND l.quote_header_id  = in_quote_header_id
                         AND l.site_id          = v_site_id
                         AND UPPER(l.fallback_type) = in_fallbck_tobe)
               AND NVL (VALUE, '-1') = NVL(rec_rout_prod.VALUE, '-1')
               AND attribute_mapping_id = 14;
         EXCEPTION
            WHEN NO_DATA_FOUND THEN
               v_bundl := 0;
            WHEN OTHERS THEN
               out_status := pkg_constants.con_status_failure;
               out_errmsg := SUBSTR (SQLERRM, 1, 100);
         END;

         IF v_bundl = 1 THEN -- NO CHANGE - OPTION1 = OPTION1

            -- implemented for CPE parts
            BEGIN
               v_cpe_count := 0;

               SELECT a - b
                 INTO v_cpe_count
                 FROM (SELECT COUNT (1) AS a
                         FROM line_item
                        WHERE quote_header_id = in_quote_header_id
                          AND site_id         = v_site_id
                          AND product_name    = 'BT CPE'
                          AND active          = 'Y'
                          AND UPPER(fallback_type) = in_fallbck_tobe) c,
                      (SELECT COUNT (1) AS b
                         FROM quote_line_item_as_is
                        WHERE quote_header_id = in_quote_header_id
                          AND site_id         = v_site_id
                          AND product_name    = 'BT CPE'
                          AND active          = 'Y'
                          AND UPPER(fallback_type) = in_fallbck_asis) d;

               IF v_cpe_count > 0 THEN

                  FOR rec_cpe_parts IN cur_cpe_parts
                  LOOP
                     UPDATE line_item li
                        SET action_code     = 'Add'
                      WHERE active          = 'Y'
                        AND line_item_id    = rec_cpe_parts.line_item_id
                        AND UPPER(li.fallback_type) = in_fallbck_tobe;

                      UPDATE line_item_detail lid
                        SET action_code  = 'Add'
                      WHERE active       = 'Y'
                        AND line_item_id = rec_cpe_parts.line_item_id;
                  END LOOP;

                  -- Line Item table  BT CPE
                  UPDATE line_item l
                     SET action_code            = 'Update'
                   WHERE l.active               = 'Y'
                     AND l.quote_header_id      = in_quote_header_id
                     AND l.site_id              = v_site_id
                     AND UPPER (l.action_code)  <> 'ADD'
                     AND UPPER (product_name)   = 'BT CPE'
                     AND UPPER (part_type)      = 'BUNDLE'
                     AND UPPER(l.fallback_type) = in_fallbck_tobe;

                  UPDATE order_line_item l
                     SET action_code            = 'Update'
                   WHERE l.active               = 'Y'
                     AND l.order_header_id      = v_order_header_id
                     AND l.site_id              = v_site_id
                     AND UPPER (l.action_code)  <> 'ADD'
                     AND UPPER (product_name)   = 'BT CPE'
                     AND UPPER(l.fallback_type) = in_fallbck_tobe;
                    --AND UPPER (part_type)     = 'BUNDLE';
               END IF;
            END;


           --Installation Hours and Site Survey set AC = 'Add'
           UPDATE line_item_detail lid
               SET action_code = 'Add'
             WHERE active = 'Y'
               AND line_item_id IN (
                      SELECT l.line_item_id
                        FROM line_item l
                       WHERE l.active               = 'Y'
                         AND l.quote_header_id      = in_quote_header_id
                         AND l.site_id              = v_site_id
                         AND UPPER (l.action_code)  = 'UPDATE'
                         AND UPPER (product_name)   = 'BT CPE'
                         AND UPPER (part_type)      = 'BUNDLE'
                         AND UPPER(l.fallback_type) = in_fallbck_tobe)
               AND attribute_mapping_id IN (305,306);


            FOR rec_cur_chk IN cur_chk_attr
            LOOP

                -- Line Item_details table  CPE ATTRIBUTES
                UPDATE line_item_detail lid
                   SET action_code = 'Update'
                 WHERE active = 'Y'
                   AND line_item_id IN (
                          SELECT l.line_item_id
                            FROM line_item l
                           WHERE l.active               = 'Y'
                             AND l.quote_header_id      = in_quote_header_id
                             AND l.site_id              = v_site_id
                             AND UPPER (l.action_code)  = 'UPDATE'
                             AND UPPER (product_name)   = 'BT CPE'
                             AND UPPER (part_type)      = 'BUNDLE'
                             AND UPPER(l.fallback_type) = in_fallbck_tobe)
                   AND attribute_mapping_id IN (320, 318, 319, 307,301)
                   AND lid.value <> rec_cur_chk.value
                   AND lid.attribute_mapping_id = rec_cur_chk.attribute_mapping_id;
            END LOOP;

         END IF;
      END LOOP;

      -- Routing Type  - 216
      FOR rec_rout_type IN cur_rout_type
      LOOP
            v_rout_type := 0;

         FOR rec_rout_type_tobe IN cur_rout_type_tobe
         LOOP

             IF rec_rout_type.value <> rec_rout_type_tobe.value THEN
                    v_rout_type := 1;
             END IF;

             IF v_rout_type = 1 THEN  -- Not Equal

                -- STATIC to BGP
                IF UPPER (rec_rout_type.VALUE) = 'STATIC' THEN

--                   UPDATE line_item_detail lid
--                      SET action_code = 'Update'
--                    WHERE active      = 'Y'
--                      AND line_item_id IN (
--                             SELECT l.line_item_id
--                               FROM line_item l
--                              WHERE l.active            = 'Y'
--                                AND l.quote_header_id   = in_quote_header_id
--                                AND l.site_id           = v_site_id
--                                AND UPPER (product_name)  IN ('BT IVPN2 VPN CONNECTION')
--                                AND UPPER(l.fallback_type) = in_fallbck_tobe)
--                      AND UPPER (action_code)   <> 'ADD'
--                      AND attribute_mapping_id IN (216,217);

                    UPDATE line_item_detail lid
                     SET action_code = 'Update'
                      WHERE active   = 'Y'
                      AND row_id IN (SELECT DISTINCT row_id
                                        FROM order_line_item l
                                        WHERE l.active      = 'Y'
                                        AND l.order_header_id IN
                                            (SELECT DISTINCT order_header_id
                                              FROM order_header
                                              WHERE quote_header_id = in_quote_header_id)
                                        AND l.site_id              = v_site_id
                                        AND UPPER (l.product_name) = 'BT IVPN2 VPN CONNECTION'
                                        AND UPPER (l.fallback_type)= in_fallbck_tobe
                                        AND UPPER (l.action_code)  <> 'ADD')
                      AND attribute_mapping_id IN (216,217)
                      AND lid.line_item_id IN (
                                           SELECT l.line_item_id
                                             FROM line_item l
                                            WHERE l.active = 'Y'
                                              AND l.quote_header_id = in_quote_header_id
                                              AND l.site_id         = v_site_id
                                              AND UPPER(l.fallback_type) = in_fallbck_tobe
                                              AND UPPER (l.product_name) = 'BT IVPN2 VPN CONNECTION');

                -- BGP to STATIC
                ELSIF UPPER (rec_rout_type.VALUE) = 'BGP' THEN

--                    UPDATE line_item_detail lid
--                      SET action_code = 'Update'
--                    WHERE active = 'Y'
--                      AND line_item_id IN (
--                             SELECT l.line_item_id
--                               FROM line_item l
--                              WHERE l.active          = 'Y'
--                                AND l.quote_header_id = in_quote_header_id
--                                AND l.site_id         = v_site_id
--                                AND UPPER (product_name)  IN ('BT IVPN2 VPN CONNECTION')
--                                AND UPPER(l.fallback_type) = in_fallbck_tobe)
--                      AND UPPER (action_code)   <> 'ADD'
--                      AND attribute_mapping_id IN (216);

                    UPDATE line_item_detail lid
                     SET action_code = 'Update'
                      WHERE active   = 'Y'
                      AND row_id IN (SELECT DISTINCT row_id
                                        FROM order_line_item l
                                        WHERE l.active      = 'Y'
                                        AND l.order_header_id IN
                                            (SELECT DISTINCT order_header_id
                                              FROM order_header
                                              WHERE quote_header_id = in_quote_header_id)
                                        AND l.site_id              = v_site_id
                                        AND UPPER (l.product_name) = 'BT IVPN2 VPN CONNECTION'
                                        AND UPPER (l.fallback_type)= in_fallbck_tobe
                                        AND UPPER (l.action_code)  <> 'ADD')
                      AND attribute_mapping_id IN (216)
                      AND lid.line_item_id IN (
                                           SELECT l.line_item_id
                                             FROM line_item l
                                            WHERE l.active = 'Y'
                                              AND l.quote_header_id = in_quote_header_id
                                              AND l.site_id         = v_site_id
                                              AND UPPER(l.fallback_type) = in_fallbck_tobe
                                              AND UPPER (l.product_name) = 'BT IVPN2 VPN CONNECTION');

                END IF;

             -- BGP = BGP  -- v_rout_type = 0
             ELSE
                IF UPPER (rec_rout_type.VALUE) = 'BGP' THEN

                     v_bgp_prefix:=0;

                    /* SELECT  COUNT (1) INTO v_bgp_prefix
                     FROM line_item_detail lid
                     WHERE active      = 'Y'
                       AND line_item_id IN (
                              SELECT l.line_item_id
                                FROM line_item l
                               WHERE l.active = 'Y'
                                 AND l.quote_header_id = in_quote_header_id
                                 AND l.site_id         = v_site_id
                                 AND UPPER(l.fallback_type) = in_fallbck_tobe
                                 AND UPPER (l.product_name) = 'BT IVPN2 VPN CONNECTION'
                                 )
                       AND UPPER (lid.action_code)  <> 'ADD'
                       AND lid.value IS NOT NULL
                       AND attribute_mapping_id = 217
                       AND lid.line_item_id=rec_rout_type_tobe.line_item_id
                       AND lid.VALUE NOT IN
                              (SELECT qld.VALUE
                                 FROM quote_line_item_detail_as_is qld
                                WHERE active = 'Y'
                                  AND line_item_id IN (
                                         SELECT l.line_item_id
                                           FROM quote_line_item_as_is l
                                          WHERE l.active = 'Y'
                                            AND l.quote_header_id = in_quote_header_id
                                            AND l.site_id         = v_site_id
                                            AND UPPER(l.fallback_type) = in_fallbck_asis)
                                  AND attribute_mapping_id = 217
                                  AND qld.line_item_id=rec_rout_type.line_item_id
                                  AND qld.value IS NOT NULL); */

                    SELECT  COUNT (1) INTO v_bgp_prefix
                     FROM line_item_detail lid
                     WHERE active      = 'Y'
                       AND row_id IN (SELECT DISTINCT row_id
                                            FROM order_line_item l
                                            WHERE l.active      = 'Y'
                                            AND l.order_header_id IN
                                                (SELECT DISTINCT order_header_id
                                                  FROM order_header
                                                  WHERE quote_header_id = in_quote_header_id)
                                            AND l.site_id              = v_site_id
                                            AND UPPER (l.product_name) = 'BT IVPN2 VPN CONNECTION'
                                            AND UPPER (l.fallback_type)= in_fallbck_tobe
                                            AND UPPER (l.action_code)  <> 'ADD')
                       AND lid.value IS NOT NULL
                       AND attribute_mapping_id = 217
                       AND lid.line_item_id=rec_rout_type_tobe.line_item_id
                       AND lid.VALUE NOT IN
                              (SELECT qld.VALUE
                                 FROM quote_line_item_detail_as_is qld
                                WHERE active = 'Y'
                                  AND row_id IN
                                              (SELECT DISTINCT row_id
                                                FROM order_line_item_as_is li
                                                WHERE quote_header_id       = in_quote_header_id
                                                AND li.site_id              = v_site_id
                                                AND UPPER (li.product_name) = 'BT IVPN2 VPN CONNECTION'
                                                AND li.active               = 'Y'
                                                AND UPPER(li.fallback_type) = in_fallbck_asis)
                                  AND attribute_mapping_id = 217
                                  AND qld.line_item_id=rec_rout_type.line_item_id
                                  AND qld.value IS NOT NULL);

                    IF v_bgp_prefix = 1 THEN

                        UPDATE line_item_detail lid
                           SET action_code = 'Update'
                         WHERE active      = 'Y'
                           AND row_id IN (SELECT DISTINCT row_id
                                            FROM order_line_item l
                                            WHERE l.active      = 'Y'
                                            AND l.order_header_id IN
                                                (SELECT DISTINCT order_header_id
                                                  FROM order_header
                                                  WHERE quote_header_id = in_quote_header_id)
                                            AND l.site_id              = v_site_id
                                            AND UPPER (l.product_name) = 'BT IVPN2 VPN CONNECTION'
                                            AND UPPER (l.fallback_type)= in_fallbck_tobe
                                            AND UPPER (l.action_code)  <> 'ADD')
                           AND attribute_mapping_id IN (216,217)
                           AND lid.line_item_id IN (
                                                     SELECT l.line_item_id
                                                     FROM line_item l
                                                     WHERE l.active = 'Y'
                                                      AND l.quote_header_id      = in_quote_header_id
                                                      AND l.site_id              = v_site_id
                                                      AND UPPER(l.fallback_type) = in_fallbck_tobe
                                                      AND UPPER (l.product_name) = 'BT IVPN2 VPN CONNECTION');
                    END IF;
                END IF;
             END IF;
         END LOOP;
      END LOOP;

      BEGIN
         v_routing_bgp_prefix := 0;

         SELECT COUNT (DISTINCT lid.action_code)
                INTO v_routing_bgp_prefix
         FROM line_item_detail lid
         WHERE active      = 'Y'
         AND line_item_id IN (SELECT DISTINCT Li.line_item_id
                                FROM line_item li, line_item_detail lid
                                WHERE li.quote_header_id      = in_quote_header_id
                                  AND li.site_id              = in_site_id
                                  AND UPPER(li.fallback_type) = in_fallbck_tobe
                                  AND UPPER(li.product_name)  = 'BT IVPN2 VPN CONNECTION'
                                  AND UPPER (lid.action_code) <> 'ADD'
                                  AND li.active               = 'Y'
                                  AND lid.active              = 'Y'
                                  AND lid.line_item_id        = li.line_item_id)
           AND UPPER (lid.action_code)  = 'UPDATE'
           AND attribute_mapping_id IN (216,217);
      EXCEPTION
           WHEN OTHERS THEN
           v_routing_bgp_prefix := 0;
      END;

       IF v_routing_bgp_prefix >= 1 THEN
             /*
             UPDATE line_item l
               SET action_code           = 'Update'
             WHERE l.active              = 'Y'
               AND l.quote_header_id     = in_quote_header_id
               AND l.site_id             = v_site_id
               AND UPPER (product_name)  IN ('BT IVPN2 VPN CONNECTION')
               AND UPPER(l.fallback_type) = in_fallbck_tobe
               AND line_item_id IN (SELECT DISTINCT Li.line_item_id
                            FROM line_item li,line_item_detail lid
                            WHERE li.quote_header_id = in_quote_header_id
                              AND li.site_id = in_site_id
                              AND UPPER(li.fallback_type) = in_fallbck_tobe
                              AND UPPER(li.product_name)  = 'BT IVPN2 VPN CONNECTION'
                              AND UPPER (lid.action_code) <> 'ADD'
                              AND li.active               = 'Y'
                              AND lid.active              = 'Y'
                              AND lid.line_item_id        = li.line_item_id);
             */

             UPDATE line_item l
               SET action_code           = 'Update'
             WHERE l.active              = 'Y'
               AND l.quote_header_id     = in_quote_header_id
               AND l.site_id             = v_site_id
               AND UPPER (product_name)  IN ('BT IVPN2 VPN CONNECTION')
               AND UPPER(l.fallback_type) = in_fallbck_tobe
               AND row_id IN (SELECT DISTINCT row_id
                                FROM order_line_item l
                                WHERE l.active      = 'Y'
                                AND l.order_header_id IN
                                    (SELECT DISTINCT order_header_id
                                      FROM order_header
                                      WHERE quote_header_id = in_quote_header_id)
                                AND l.site_id               = v_site_id
                                AND UPPER (l.product_name)  = 'BT IVPN2 VPN CONNECTION'
                                AND UPPER (l.fallback_type) = in_fallbck_tobe
                                AND UPPER (l.action_code)   <> 'ADD');


             UPDATE order_line_item l
               SET action_code           = 'Update'
             WHERE l.active              = 'Y'
               AND l.order_header_id     = v_order_header_id
               AND l.site_id             = v_site_id
               AND UPPER (product_name)  IN ('BT IVPN2 VPN CONNECTION')
               AND UPPER (action_code)   <> 'ADD'
               AND UPPER(l.fallback_type) = in_fallbck_tobe;
       END IF;


      -- Access Speed - 222 changed as 12
      FOR rec_dsl_speed IN cur_dsl_speed
      LOOP
         BEGIN
            v_dsl := 0;

            SELECT 1 INTO v_dsl
              FROM line_item_detail
             WHERE active = 'Y'
               AND line_item_id IN (
                      SELECT l.line_item_id
                        FROM line_item l
                       WHERE l.active           = 'Y'
                         AND l.quote_header_id  = in_quote_header_id
                         AND l.site_id          = v_site_id
                         AND UPPER(l.fallback_type) = in_fallbck_tobe)
               AND VALUE <> rec_dsl_speed.VALUE
               AND attribute_mapping_id = 12;
         EXCEPTION
            WHEN NO_DATA_FOUND THEN
               v_dsl := 0;
            WHEN OTHERS THEN
               out_status := pkg_constants.con_status_failure;
               out_errmsg := SUBSTR (SQLERRM, 1, 100);
         END;

         IF v_dsl = 1 THEN

             v_access_tech5:=0;
             BEGIN
               SELECT 1
               INTO v_access_tech5
               FROM line_item_detail
               WHERE active = 'Y'
                AND line_item_id IN (SELECT l.line_item_id
                                     FROM line_item l
                                    WHERE l.active               = 'Y'
                                      AND l.quote_header_id      = in_quote_header_id
                                      AND l.site_id              = v_site_id
                                      AND UPPER (product_name)   IN ('BT IVPN2 ACCESS')
                                      AND UPPER(action_code)   <> 'ADD'
                                      AND UPPER(l.fallback_type) = in_fallbck_tobe)
                AND attribute_mapping_id = 3 -- Access Tech
                AND UPPER(value) = 'DSL';

             EXCEPTION
               WHEN OTHERS THEN
                   v_access_tech5                 := 0;
             END;

             UPDATE line_item li
             SET action_code           = 'Update'
             WHERE li.active           = 'Y'
              AND UPPER (product_name) IN('BT IVPN2 VPN CONNECTION')
              AND li.quote_header_id   = in_quote_header_id
              AND li.site_id           = v_site_id
              AND UPPER(li.fallback_type) = in_fallbck_tobe
              AND v_access_tech5>=1;


             UPDATE order_line_item li
              SET action_code          = 'Update'
             WHERE li.active           = 'Y'
              AND UPPER (product_name) IN('BT IVPN2 VPN CONNECTION')
              AND li.order_header_id   = v_order_header_id
              AND li.site_id           = v_site_id
              AND UPPER(li.fallback_type) = in_fallbck_tobe
              AND v_access_tech5>=1;


            UPDATE line_item_detail lid
               SET action_code  ='Update'
             WHERE active       = 'Y'
               AND line_item_id IN (
                                    SELECT l.line_item_id
                                    FROM line_item l
                                    WHERE l.active           = 'Y'
                                     AND l.quote_header_id  = in_quote_header_id
                                     AND l.site_id          = v_site_id
                                     AND UPPER (l.action_code) <> 'ADD'
                                     AND UPPER (l.product_name) = 'BT IVPN2 ACCESS'
                                     AND UPPER(l.fallback_type) = in_fallbck_tobe)
               AND attribute_mapping_id IN (5, 12);

             BEGIN
                SELECT 1
                INTO v_access_tech6
                FROM line_item_detail
                WHERE active = 'Y'
                 AND line_item_id IN (SELECT l.line_item_id
                                      FROM line_item l
                                     WHERE l.active               = 'Y'
                                       AND l.quote_header_id      = in_quote_header_id
                                       AND l.site_id              = v_site_id
                                       AND UPPER (product_name)   IN ('BT IVPN2 ACCESS')
                                       AND UPPER(action_code)   <> 'ADD'
                                       AND UPPER(l.fallback_type) = in_fallbck_tobe)
                 AND attribute_mapping_id = 3 -- Access Tech
                 AND UPPER(value) = 'LEASED LINE';

             EXCEPTION
                 WHEN OTHERS THEN
                     v_access_tech6                 := 0;
             END;

            -- NUMBER OF E1 OR T1 - 6
            FOR rec_num_e1_or_t1 IN cur_num_e1_or_t1
            LOOP
               BEGIN
                  v_num_e1_or_t1:= 0;

                  SELECT 1 INTO v_num_e1_or_t1
                    FROM line_item_detail
                   WHERE active = 'Y'
                     AND line_item_id IN (
                            SELECT l.line_item_id
                              FROM line_item l
                             WHERE l.active           = 'Y'
                               AND l.quote_header_id  = in_quote_header_id
                               AND l.site_id          = v_site_id
                               AND UPPER(l.fallback_type) = in_fallbck_tobe)
                     AND VALUE <> rec_num_e1_or_t1.VALUE
                     AND attribute_mapping_id = 6;
               EXCEPTION
                  WHEN NO_DATA_FOUND THEN
                     v_num_e1_or_t1 := 0;
                  WHEN OTHERS THEN
                     out_status := pkg_constants.con_status_failure;
                     out_errmsg := SUBSTR (SQLERRM, 1, 100);
               END;
            END LOOP;

            IF (v_access_tech6 = 1 AND v_num_e1_or_t1=1) THEN
                 UPDATE line_item_detail lid
                   SET action_code  ='Update'
                 WHERE active       = 'Y'
                   AND line_item_id IN (
                                        SELECT l.line_item_id
                                        FROM line_item l
                                        WHERE l.active           = 'Y'
                                         AND l.quote_header_id  = in_quote_header_id
                                         AND l.site_id          = v_site_id
                                         AND UPPER (l.action_code) <> 'ADD'
                                         AND UPPER (l.product_name) = 'BT IVPN2 ACCESS'
                                         AND UPPER(l.fallback_type) = in_fallbck_tobe)
                   AND attribute_mapping_id IN (6);
            END IF;

         END IF;
      END LOOP;

          --FRF 16.X  FRF 16.1 to FRF 16.1
      BEGIN
            v_frf_16:= 0;

            SELECT 1 INTO v_frf_16
            FROM order_line_item_detail
            WHERE active = 'Y'
            AND order_line_item_id IN (
                     SELECT l.order_line_item_id
                       FROM order_line_item l
                      WHERE l.active              = 'Y'
                        AND UPPER (product_name)  IN('BT IVPN2 ACCESS')
                        AND l.order_header_id     = v_order_header_id
                        AND l.site_id             = v_site_id
                        AND UPPER (l.action_code) <> 'ADD'
                        AND UPPER(l.fallback_type) = in_fallbck_tobe)
            AND attribute_mapping_id  = 1002
            AND UPPER(VALUE)='FRF16.1'
            AND VALUE =
                           (SELECT VALUE
                            FROM order_line_item_detail_as_is
                            WHERE active = 'Y'
                              AND order_line_item_id IN (
                                     SELECT l.order_line_item_id
                                       FROM order_line_item_as_is l
                                      WHERE l.active              = 'Y'
                                        AND UPPER (product_name)  IN ('BT IVPN2 ACCESS')
                                        AND l.quote_header_id     = in_quote_header_id
                                        AND l.site_id             = v_site_id
                                        AND UPPER (l.action_code) <> 'ADD'
                                        AND UPPER(l.fallback_type) = in_fallbck_asis)
                              AND attribute_mapping_id IN(1002));
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
           v_frf_16 := 0;
        WHEN OTHERS THEN
           out_status := pkg_constants.con_status_failure;
           out_errmsg := SUBSTR (SQLERRM, 1, 100);
      END;

      IF v_frf_16 = 1 THEN

            BEGIN
               SELECT 1
               INTO v_access_tech6
               FROM line_item_detail
               WHERE active = 'Y'
                AND line_item_id IN (SELECT l.line_item_id
                                     FROM line_item l
                                    WHERE l.active               = 'Y'
                                      AND l.quote_header_id      = in_quote_header_id
                                      AND l.site_id              = v_site_id
                                      AND UPPER (product_name)   IN ('BT IVPN2 ACCESS')
                                      AND UPPER(action_code)   <> 'ADD'
                                      AND UPPER(l.fallback_type) = in_fallbck_tobe)
                AND attribute_mapping_id = 3 -- Access Tech
                AND UPPER(value) = 'LEASED LINE';

            EXCEPTION
                WHEN OTHERS THEN
                    v_access_tech6                 := 0;
            END;

           -- NUMBER OF E1 OR T1 - 6
           FOR rec_num_e1_or_t1 IN cur_num_e1_or_t1
           LOOP
              BEGIN
                 v_num_e1_or_t1:= 0;

                 SELECT 1 INTO v_num_e1_or_t1
                   FROM line_item_detail
                  WHERE active = 'Y'
                    AND line_item_id IN (
                           SELECT l.line_item_id
                             FROM line_item l
                            WHERE l.active           = 'Y'
                              AND l.quote_header_id  = in_quote_header_id
                              AND l.site_id          = v_site_id
                              AND UPPER(l.fallback_type) = in_fallbck_tobe)
                    AND VALUE <> rec_num_e1_or_t1.VALUE
                    AND attribute_mapping_id = 6;
              EXCEPTION
                 WHEN NO_DATA_FOUND THEN
                    v_num_e1_or_t1 := 0;
                 WHEN OTHERS THEN
                    out_status := pkg_constants.con_status_failure;
                    out_errmsg := SUBSTR (SQLERRM, 1, 100);
              END;
           END LOOP;


           -- PORT SPEED
          FOR port_rec IN cur_port
          LOOP
             BEGIN
                v_frf_port := 0;

                SELECT 1 INTO v_frf_port
                  FROM line_item_detail
                 WHERE active = 'Y'
                   AND line_item_id IN (
                          SELECT l.line_item_id
                            FROM line_item l
                           WHERE l.active               = 'Y'
                             AND l.quote_header_id      = in_quote_header_id
                             AND l.site_id              = v_site_id
                             AND UPPER(l.fallback_type) = in_fallbck_tobe)
                   AND value  <> port_rec.value
                   AND attribute_mapping_id = 11; -- PortSpeed attribute
             EXCEPTION
                WHEN NO_DATA_FOUND THEN
                   v_frf_port := 0;
                WHEN OTHERS THEN
                   out_status := pkg_constants.con_status_failure;
                   out_errmsg := SUBSTR (SQLERRM, 1, 100);
             END;
          END LOOP;


           IF ((v_access_tech6 = 1) AND (v_num_e1_or_t1=1 OR v_frf_port = 1)) THEN
                UPDATE order_line_item_detail
                SET action_code='UPDATE'
                WHERE active = 'Y'
                AND order_line_item_id IN (
                         SELECT l.order_line_item_id
                           FROM order_line_item l
                          WHERE l.active              = 'Y'
                            AND UPPER (product_name)  IN('BT IVPN2 ACCESS')
                            AND l.order_header_id     = v_order_header_id
                            AND l.site_id             = v_site_id
                            AND UPPER (l.action_code) <> 'ADD'
                            AND UPPER(l.fallback_type) = in_fallbck_tobe)
                AND attribute_mapping_id  = 1002;
           END IF;

      END IF;

      --ACCESS SERVICE ID1 --157
      BEGIN
        v_access_service_id1:=0;
        SELECT 1 INTO v_access_service_id1
        FROM line_item_detail lid
        WHERE active      = 'Y'
        AND line_item_id IN (
                              SELECT l.line_item_id
                                FROM line_item l
                               WHERE l.active               = 'Y'
                                 AND l.quote_header_id      = in_quote_header_id
                                 AND l.site_id              = v_site_id
                                 AND UPPER(l.fallback_type) = in_fallbck_tobe
                                 AND UPPER (l.product_name) = 'BT IVPN2 ACCESS')
        AND attribute_mapping_id  = 157
        AND lid.VALUE IS NOT NULL
        AND lid.VALUE =
              ( SELECT qld.VALUE
                FROM quote_line_item_detail_as_is qld
                WHERE active = 'Y'
                AND line_item_id IN (
                                   SELECT l.line_item_id
                                   FROM quote_line_item_as_is l
                                   WHERE l.active = 'Y'
                                        AND UPPER (l.product_name) = 'BT IVPN2 ACCESS'
                                        AND l.quote_header_id      = in_quote_header_id
                                        AND l.site_id              = v_site_id
                                        AND UPPER(l.fallback_type) = in_fallbck_asis)
                AND attribute_mapping_id = 157
                AND qld.VALUE IS NOT NULL );
      EXCEPTION
         WHEN NO_DATA_FOUND THEN
            v_access_service_id1 := 0;
         WHEN OTHERS THEN
            out_status := pkg_constants.con_status_failure;
            out_errmsg := SUBSTR (SQLERRM, 1, 100);
      END;



      IF v_access_service_id1 = 1 THEN

         BEGIN
            v_frf_16 := 0;
            SELECT 1 INTO v_frf_16
            FROM order_line_item_detail
            WHERE active = 'Y'
            AND order_line_item_id IN (
                     SELECT l.order_line_item_id
                       FROM order_line_item l
                      WHERE l.active              = 'Y'
                        AND UPPER (product_name)  IN('BT IVPN2 ACCESS')
                        AND l.order_header_id     = v_order_header_id
                        AND l.site_id             = v_site_id
                        AND UPPER(l.fallback_type) = in_fallbck_tobe)
            AND attribute_mapping_id  = 1002
            AND UPPER (action_code) = 'UPDATE';
         EXCEPTION
             WHEN NO_DATA_FOUND THEN
                v_frf_16 := 0;
             WHEN OTHERS THEN
                out_status := pkg_constants.con_status_failure;
                out_errmsg := SUBSTR (SQLERRM, 1, 100);
         END;

         BEGIN
             v_access_service_id1_asis:=0;
             SELECT 1 INTO v_access_service_id1_asis
             FROM order_line_item_detail_as_is
             WHERE active = 'Y'
              AND order_line_item_id IN (
                     SELECT l.order_line_item_id
                       FROM order_line_item_as_is l
                      WHERE l.active              = 'Y'
                        AND UPPER (product_name)  IN ('BT IVPN2 ACCESS')
                        AND l.quote_header_id     = in_quote_header_id
                        AND l.site_id             = v_site_id
                        AND UPPER(l.fallback_type) = in_fallbck_asis)
              AND attribute_mapping_id =157
              AND UPPER (action_code) <> 'DELETE';
         EXCEPTION
             WHEN NO_DATA_FOUND THEN
                v_access_service_id1_asis := 0;
             WHEN OTHERS THEN
                out_status := pkg_constants.con_status_failure;
                out_errmsg := SUBSTR (SQLERRM, 1, 100);
         END;

         BEGIN
            v_global_cos_attr1 := 0;
            SELECT 1 INTO v_global_cos_attr1
            FROM line_item_detail lid
            WHERE active = 'Y'
            AND line_item_id IN (
                                  SELECT l.line_item_id
                                    FROM line_item l
                                   WHERE l.active             = 'Y'
                                     AND UPPER (l.product_name)   = 'BT IVPN2 GLOBAL'
                                     AND l.quote_header_id    = in_quote_header_id
                                     AND l.site_id            = v_site_id
                                     AND UPPER(l.fallback_type) = in_fallbck_tobe)
            AND attribute_mapping_id IN  (1144,1145,1146,1147,1148,1149,1150,1151,1152,1153,1154,1155,203,204,602,28,30,135)
            AND UPPER (action_code) = 'UPDATE';
         EXCEPTION
             WHEN NO_DATA_FOUND THEN
                v_global_cos_attr1 := 0;
             WHEN OTHERS THEN
                out_status := pkg_constants.con_status_failure;
                out_errmsg := SUBSTR (SQLERRM, 1, 100);
         END;

         IF ( (v_frf_16=1) AND (v_access_service_id1_asis=1 OR v_global_cos_attr1=1))THEN

            UPDATE line_item_detail lid
            SET action_code='UPDATE'
            WHERE active      = 'Y'
            AND line_item_id IN (
                                  SELECT l.line_item_id
                                    FROM line_item l
                                   WHERE l.active               = 'Y'
                                     AND l.quote_header_id      = in_quote_header_id
                                     AND l.site_id              = v_site_id
                                     AND UPPER(l.fallback_type) = in_fallbck_tobe
                                     AND UPPER (l.product_name) = 'BT IVPN2 ACCESS')
            AND attribute_mapping_id  = 157;
         END IF;

      END IF;


      --ACCESS SERVICE ID2 --158
      BEGIN
        v_access_service_id2:=0;
        SELECT 1 INTO v_access_service_id2
        FROM line_item_detail lid
        WHERE active      = 'Y'
        AND line_item_id IN (
                              SELECT l.line_item_id
                                FROM line_item l
                               WHERE l.active               = 'Y'
                                 AND l.quote_header_id      = in_quote_header_id
                                 AND l.site_id              = v_site_id
                                 AND UPPER(l.fallback_type) = in_fallbck_tobe
                                 AND UPPER (l.product_name) = 'BT IVPN2 ACCESS')
        AND attribute_mapping_id  = 158
        AND lid.VALUE =
              ( SELECT qld.VALUE
                FROM quote_line_item_detail_as_is qld
                WHERE active = 'Y'
                AND line_item_id IN (
                                   SELECT l.line_item_id
                                   FROM quote_line_item_as_is l
                                   WHERE l.active = 'Y'
                                        AND UPPER (l.product_name) = 'BT IVPN2 ACCESS'
                                        AND l.quote_header_id      = in_quote_header_id
                                        AND l.site_id              = v_site_id
                                        AND UPPER(l.fallback_type) = in_fallbck_asis)
                AND attribute_mapping_id = 158);
      EXCEPTION
         WHEN NO_DATA_FOUND THEN
            v_access_service_id2 := 0;
         WHEN OTHERS THEN
            out_status := pkg_constants.con_status_failure;
            out_errmsg := SUBSTR (SQLERRM, 1, 100);
      END;



      IF v_access_service_id2 = 1 THEN

         BEGIN
            v_frf_16 := 0;
            SELECT 1 INTO v_frf_16
            FROM order_line_item_detail
            WHERE active = 'Y'
            AND order_line_item_id IN (
                     SELECT l.order_line_item_id
                       FROM order_line_item l
                      WHERE l.active              = 'Y'
                        AND UPPER (product_name)  IN('BT IVPN2 ACCESS')
                        AND l.order_header_id     = v_order_header_id
                        AND l.site_id             = v_site_id
                        AND UPPER(l.fallback_type) = in_fallbck_tobe)
            AND attribute_mapping_id  = 1002
            AND UPPER (action_code) = 'UPDATE';
         EXCEPTION
             WHEN NO_DATA_FOUND THEN
                v_frf_16 := 0;
             WHEN OTHERS THEN
                out_status := pkg_constants.con_status_failure;
                out_errmsg := SUBSTR (SQLERRM, 1, 100);
         END;

         BEGIN
             v_access_service_id2_asis:=0;
             SELECT 1 INTO v_access_service_id2_asis
             FROM order_line_item_detail_as_is
             WHERE active = 'Y'
              AND order_line_item_id IN (
                     SELECT l.order_line_item_id
                       FROM order_line_item_as_is l
                      WHERE l.active              = 'Y'
                        AND UPPER (product_name)  IN ('BT IVPN2 ACCESS')
                        AND l.quote_header_id     = in_quote_header_id
                        AND l.site_id             = v_site_id
                        AND UPPER(l.fallback_type) = in_fallbck_asis)
              AND attribute_mapping_id =158
              AND UPPER (action_code) <> 'DELETE';
         EXCEPTION
             WHEN NO_DATA_FOUND THEN
                v_access_service_id2_asis := 0;
             WHEN OTHERS THEN
                out_status := pkg_constants.con_status_failure;
                out_errmsg := SUBSTR (SQLERRM, 1, 100);
         END;

         BEGIN
            v_global_cos_attr1 := 0;
            SELECT 1 INTO v_global_cos_attr1
            FROM line_item_detail lid
            WHERE active = 'Y'
            AND line_item_id IN (
                                  SELECT l.line_item_id
                                    FROM line_item l
                                   WHERE l.active             = 'Y'
                                     AND UPPER (l.product_name)   = 'BT IVPN2 GLOBAL'
                                     AND l.quote_header_id    = in_quote_header_id
                                     AND l.site_id            = v_site_id
                                     AND UPPER(l.fallback_type) = in_fallbck_tobe)
            AND attribute_mapping_id IN  (1144,1145,1146,1147,1148,1149,1150,1151,1152,1153,1154,1155,203,204,602,28,30,135)
            AND UPPER (action_code) = 'UPDATE';
         EXCEPTION
             WHEN NO_DATA_FOUND THEN
                v_global_cos_attr1 := 0;
             WHEN OTHERS THEN
                out_status := pkg_constants.con_status_failure;
                out_errmsg := SUBSTR (SQLERRM, 1, 100);
         END;

         IF ( (v_frf_16=1) AND (v_access_service_id2_asis=1 OR v_global_cos_attr1=1))THEN

            UPDATE line_item_detail lid
            SET action_code='UPDATE'
            WHERE active      = 'Y'
            AND line_item_id IN (
                                  SELECT l.line_item_id
                                    FROM line_item l
                                   WHERE l.active               = 'Y'
                                     AND l.quote_header_id      = in_quote_header_id
                                     AND l.site_id              = v_site_id
                                     AND UPPER(l.fallback_type) = in_fallbck_tobe
                                     AND UPPER (l.product_name) = 'BT IVPN2 ACCESS')
            AND attribute_mapping_id  = 158;
         END IF;

      END IF;


      --ACCESS SERVICE ID3 --159
      BEGIN
        v_access_service_id3:=0;
        SELECT 1 INTO v_access_service_id3
        FROM line_item_detail lid
        WHERE active      = 'Y'
        AND line_item_id IN (
                              SELECT l.line_item_id
                                FROM line_item l
                               WHERE l.active               = 'Y'
                                 AND l.quote_header_id      = in_quote_header_id
                                 AND l.site_id              = v_site_id
                                 AND UPPER(l.fallback_type) = in_fallbck_tobe
                                 AND UPPER (l.product_name) = 'BT IVPN2 ACCESS')
        AND attribute_mapping_id  = 159
        AND lid.VALUE =
              ( SELECT qld.VALUE
                FROM quote_line_item_detail_as_is qld
                WHERE active = 'Y'
                AND line_item_id IN (
                                   SELECT l.line_item_id
                                   FROM quote_line_item_as_is l
                                   WHERE l.active = 'Y'
                                        AND UPPER (l.product_name) = 'BT IVPN2 ACCESS'
                                        AND l.quote_header_id      = in_quote_header_id
                                        AND l.site_id              = v_site_id
                                        AND UPPER(l.fallback_type) = in_fallbck_asis)
                AND attribute_mapping_id = 159);
      EXCEPTION
         WHEN NO_DATA_FOUND THEN
            v_access_service_id3 := 0;
         WHEN OTHERS THEN
            out_status := pkg_constants.con_status_failure;
            out_errmsg := SUBSTR (SQLERRM, 1, 100);
      END;



      IF v_access_service_id3 = 1 THEN

         BEGIN
            v_frf_16 := 0;
            SELECT 1 INTO v_frf_16
            FROM order_line_item_detail
            WHERE active = 'Y'
            AND order_line_item_id IN (
                     SELECT l.order_line_item_id
                       FROM order_line_item l
                      WHERE l.active              = 'Y'
                        AND UPPER (product_name)  IN('BT IVPN2 ACCESS')
                        AND l.order_header_id     = v_order_header_id
                        AND l.site_id             = v_site_id
                        AND UPPER(l.fallback_type) = in_fallbck_tobe)
            AND attribute_mapping_id  = 1002
            AND UPPER (action_code) = 'UPDATE';
         EXCEPTION
             WHEN NO_DATA_FOUND THEN
                v_frf_16 := 0;
             WHEN OTHERS THEN
                out_status := pkg_constants.con_status_failure;
                out_errmsg := SUBSTR (SQLERRM, 1, 100);
         END;

         BEGIN
             v_access_service_id3_asis:=0;
             SELECT 1 INTO v_access_service_id3_asis
             FROM order_line_item_detail_as_is
             WHERE active = 'Y'
              AND order_line_item_id IN (
                     SELECT l.order_line_item_id
                       FROM order_line_item_as_is l
                      WHERE l.active              = 'Y'
                        AND UPPER (product_name)  IN ('BT IVPN2 ACCESS')
                        AND l.quote_header_id     = in_quote_header_id
                        AND l.site_id             = v_site_id
                        AND UPPER(l.fallback_type) = in_fallbck_asis)
              AND attribute_mapping_id =159
              AND UPPER (action_code) <> 'DELETE';
         EXCEPTION
             WHEN NO_DATA_FOUND THEN
                v_access_service_id3_asis := 0;
             WHEN OTHERS THEN
                out_status := pkg_constants.con_status_failure;
                out_errmsg := SUBSTR (SQLERRM, 1, 100);
         END;

         BEGIN
            v_global_cos_attr1 := 0;
            SELECT 1 INTO v_global_cos_attr1
            FROM line_item_detail lid
            WHERE active = 'Y'
            AND line_item_id IN (
                                  SELECT l.line_item_id
                                    FROM line_item l
                                   WHERE l.active             = 'Y'
                                     AND UPPER (l.product_name)   = 'BT IVPN2 GLOBAL'
                                     AND l.quote_header_id    = in_quote_header_id
                                     AND l.site_id            = v_site_id
                                     AND UPPER(l.fallback_type) = in_fallbck_tobe)
            AND attribute_mapping_id IN  (1144,1145,1146,1147,1148,1149,1150,1151,1152,1153,1154,1155,203,204,602,28,30,135)
            AND UPPER (action_code) = 'UPDATE';
         EXCEPTION
             WHEN NO_DATA_FOUND THEN
                v_global_cos_attr1 := 0;
             WHEN OTHERS THEN
                out_status := pkg_constants.con_status_failure;
                out_errmsg := SUBSTR (SQLERRM, 1, 100);
         END;

         IF ( (v_frf_16=1) AND (v_access_service_id3_asis=1 OR v_global_cos_attr1=1))THEN

            UPDATE line_item_detail lid
            SET action_code='UPDATE'
            WHERE active      = 'Y'
            AND line_item_id IN (
                                  SELECT l.line_item_id
                                    FROM line_item l
                                   WHERE l.active               = 'Y'
                                     AND l.quote_header_id      = in_quote_header_id
                                     AND l.site_id              = v_site_id
                                     AND UPPER(l.fallback_type) = in_fallbck_tobe
                                     AND UPPER (l.product_name) = 'BT IVPN2 ACCESS')
            AND attribute_mapping_id  = 159;
         END IF;

      END IF;


      -- THRESHOLD
      /*
      BEGIN
        v_threshold := 0;

        SELECT 1 INTO v_threshold
        FROM order_line_item_detail
        WHERE active = 'Y'
        AND order_line_item_id IN (
                 SELECT l.order_line_item_id
                   FROM order_line_item l
                  WHERE l.active              = 'Y'
                    AND UPPER (product_name)  IN('BT IVPN2 ACCESS')
                    AND l.order_header_id     = v_order_header_id
                    AND l.site_id             = v_site_id
                    AND UPPER (l.action_code) <> 'ADD'
                    AND UPPER(l.fallback_type) = in_fallbck_tobe)
        AND attribute_mapping_id  = 000 -- Need to change later
        AND VALUE <>
                       (SELECT VALUE
                        FROM order_line_item_detail_as_is
                        WHERE active = 'Y'
                          AND order_line_item_id IN (
                                 SELECT l.order_line_item_id
                                   FROM order_line_item_as_is l
                                  WHERE l.active              = 'Y'
                                    AND UPPER (product_name)  IN ('BT IVPN2 ACCESS')
                                    AND l.quote_header_id     = in_quote_header_id
                                    AND l.site_id             = v_site_id
                                    AND UPPER (l.action_code) <> 'ADD'
                                    AND UPPER(l.fallback_type) = in_fallbck_asis)
                          AND attribute_mapping_id IN(000)); -- Need to change later
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
           v_threshold := 0;
        WHEN OTHERS THEN
           out_status := pkg_constants.con_status_failure;
           out_errmsg := SUBSTR (SQLERRM, 1, 100);
      END;

      IF v_threshold = 1 THEN

         BEGIN
            v_frf_16 := 0;
            SELECT 1 INTO v_frf_16
            FROM order_line_item_detail
            WHERE active = 'Y'
            AND order_line_item_id IN (
                     SELECT l.order_line_item_id
                       FROM order_line_item l
                      WHERE l.active              = 'Y'
                        AND UPPER (product_name)  IN('BT IVPN2 ACCESS')
                        AND l.order_header_id     = v_order_header_id
                        AND l.site_id             = v_site_id
                        AND UPPER(l.fallback_type) = in_fallbck_tobe)
            AND attribute_mapping_id  = 1002
            AND UPPER (action_code) = 'UPDATE';
         EXCEPTION
             WHEN NO_DATA_FOUND THEN
                v_frf_16 := 0;
             WHEN OTHERS THEN
                out_status := pkg_constants.con_status_failure;
                out_errmsg := SUBSTR (SQLERRM, 1, 100);
         END;

         IF (v_frf_16 = 1) THEN
               UPDATE order_line_item_detail
               SET action_code='UPDATE'
               WHERE active = 'Y'
               AND order_line_item_id IN (
                        SELECT l.order_line_item_id
                          FROM order_line_item l
                         WHERE l.active              = 'Y'
                           AND UPPER (product_name)  IN('BT IVPN2 ACCESS')
                           AND l.order_header_id     = v_order_header_id
                           AND l.site_id             = v_site_id
                           AND UPPER (l.action_code) <> 'ADD'
                           AND UPPER(l.fallback_type) = in_fallbck_tobe)
               AND attribute_mapping_id  = 000;   -- Need to change later
         END IF;

      END IF;
      */



      --BUNDLE DEGRADATION option1 and option2
      BEGIN
            v_bundle_degradation:= 0;

            SELECT 1 INTO v_bundle_degradation
            FROM order_line_item_detail
            WHERE active = 'Y'
            AND order_line_item_id IN (
                     SELECT l.order_line_item_id
                       FROM order_line_item l
                      WHERE l.active              = 'Y'
                        AND UPPER (product_name)  IN('BT IVPN2 ACCESS')
                        AND l.order_header_id     = v_order_header_id
                        AND l.site_id             = v_site_id
                        AND UPPER (l.action_code) <> 'ADD'
                        AND UPPER(l.fallback_type) = in_fallbck_tobe)
            AND attribute_mapping_id  = 1003
            AND VALUE <>
                           (SELECT VALUE
                            FROM order_line_item_detail_as_is
                            WHERE active = 'Y'
                              AND order_line_item_id IN (
                                     SELECT l.order_line_item_id
                                       FROM order_line_item_as_is l
                                      WHERE l.active              = 'Y'
                                        AND UPPER (product_name)  IN ('BT IVPN2 ACCESS')
                                        AND l.quote_header_id     = in_quote_header_id
                                        AND l.site_id             = v_site_id
                                        AND UPPER (l.action_code) <> 'ADD'
                                        AND UPPER(l.fallback_type) = in_fallbck_asis)
                              AND attribute_mapping_id IN(1003));
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
           v_bundle_degradation := 0;
        WHEN OTHERS THEN
           out_status := pkg_constants.con_status_failure;
           out_errmsg := SUBSTR (SQLERRM, 1, 100);
      END;

      IF v_bundle_degradation = 1 THEN

         BEGIN
            v_frf_16 := 0;
            SELECT 1 INTO v_frf_16
            FROM order_line_item_detail
            WHERE active = 'Y'
            AND order_line_item_id IN (
                     SELECT l.order_line_item_id
                       FROM order_line_item l
                      WHERE l.active              = 'Y'
                        AND UPPER (product_name)  IN('BT IVPN2 ACCESS')
                        AND l.order_header_id     = v_order_header_id
                        AND l.site_id             = v_site_id
                        AND UPPER(l.fallback_type) = in_fallbck_tobe)
            AND attribute_mapping_id  = 1002
            AND UPPER (action_code) = 'UPDATE';
         EXCEPTION
             WHEN NO_DATA_FOUND THEN
                v_frf_16 := 0;
             WHEN OTHERS THEN
                out_status := pkg_constants.con_status_failure;
                out_errmsg := SUBSTR (SQLERRM, 1, 100);
         END;

         IF (v_frf_16 = 1) THEN
               UPDATE order_line_item_detail
               SET action_code='UPDATE'
               WHERE active = 'Y'
               AND order_line_item_id IN (
                        SELECT l.order_line_item_id
                          FROM order_line_item l
                         WHERE l.active              = 'Y'
                           AND UPPER (product_name)  IN('BT IVPN2 ACCESS')
                           AND l.order_header_id     = v_order_header_id
                           AND l.site_id             = v_site_id
                           AND UPPER (l.action_code) <> 'ADD'
                           AND UPPER(l.fallback_type) = in_fallbck_tobe)
               AND attribute_mapping_id  = 1003;
         END IF;

      END IF;

      -- DSL Type  - 102
      FOR rec_dsl_typ IN cur_dsl_typ
      LOOP
         BEGIN
            v_dsl_typ := 0;

            SELECT 1 INTO v_dsl_typ
              FROM line_item_detail
             WHERE active = 'Y'
               AND line_item_id IN (
                                    SELECT l.line_item_id
                                    FROM line_item l
                                    WHERE l.active           = 'Y'
                                     AND l.quote_header_id  = in_quote_header_id
                                     AND l.site_id          = v_site_id
                                     AND UPPER(l.fallback_type) = in_fallbck_tobe)
               AND nvl(VALUE,'-1') <> nvl(rec_dsl_typ.VALUE,'-1')
               AND attribute_mapping_id = 102;
         EXCEPTION
            WHEN NO_DATA_FOUND THEN
               v_dsl_typ := 0;
            WHEN OTHERS THEN
               out_status := pkg_constants.con_status_failure;
               out_errmsg := SUBSTR (SQLERRM, 1, 100);
         END;

         IF v_dsl_typ = 1 THEN

            UPDATE line_item_detail lid
               SET action_code  ='Update'
             WHERE active       = 'Y'
               AND line_item_id IN (
                                    SELECT l.line_item_id
                                    FROM line_item l
                                    WHERE l.active           = 'Y'
                                     AND l.quote_header_id  = in_quote_header_id
                                     AND l.site_id          = v_site_id
                                     AND UPPER (l.action_code) <> 'ADD'
                                     AND UPPER (l.product_name) = 'BT IVPN2 ACCESS'
                                     AND UPPER(l.fallback_type) = in_fallbck_tobe)
               AND attribute_mapping_id IN (5, 102,124);
         END IF;

      END LOOP;

      -- DSL Contention Ratio  - 103
      FOR rec_dsl_ratio IN cur_dsl_ratio
      LOOP
         BEGIN
            v_dsl_ratio := 0;

            SELECT 1 INTO v_dsl_ratio
              FROM line_item_detail
             WHERE active = 'Y'
               AND line_item_id IN (SELECT l.line_item_id
                                     FROM line_item l
                                     WHERE l.active           = 'Y'
                                     AND l.quote_header_id  = in_quote_header_id
                                     AND l.site_id          = v_site_id
                                     AND UPPER(l.fallback_type) = in_fallbck_tobe)
               AND nvl(VALUE,'-1') <> nvl(rec_dsl_ratio.VALUE,'-1')
               AND attribute_mapping_id = 103;
         EXCEPTION
            WHEN NO_DATA_FOUND THEN
               v_dsl_ratio := 0;
            WHEN OTHERS THEN
               out_status := pkg_constants.con_status_failure;
               out_errmsg := SUBSTR (SQLERRM, 1, 100);
         END;

         IF v_dsl_ratio = 1  THEN

            UPDATE line_item_detail lid
               SET action_code  ='Update'
             WHERE active       = 'Y'
               AND line_item_id IN (SELECT l.line_item_id
                                    FROM line_item l
                                    WHERE l.active           = 'Y'
                                     AND l.quote_header_id  = in_quote_header_id
                                     AND l.site_id          = v_site_id
                                     AND UPPER (l.action_code) <> 'ADD'
                                     AND UPPER (l.product_name) = 'BT IVPN2 ACCESS'
                                     AND UPPER(l.fallback_type) = in_fallbck_tobe)
               AND attribute_mapping_id IN (5, 103,124);
         END IF;
      END LOOP;

      -- DSL Service Variant - 4
      FOR rec_dsl_variant IN cur_dsl_variant
      LOOP
         BEGIN
            v_dsl_var := 0;

            SELECT 1 INTO v_dsl_var
              FROM line_item_detail
             WHERE active = 'Y'
               AND line_item_id IN (SELECT l.line_item_id
                                    FROM line_item l
                                     WHERE l.active           = 'Y'
                                     AND l.quote_header_id  = in_quote_header_id
                                     AND l.site_id          = v_site_id
                                     AND UPPER(l.fallback_type) = in_fallbck_tobe)
               AND NVL(VALUE,'-1') <> NVL(rec_dsl_variant.VALUE,'-1')
               AND attribute_mapping_id = 4;
         EXCEPTION
            WHEN NO_DATA_FOUND THEN
               v_dsl_var := 0;
            WHEN OTHERS  THEN
               out_status := pkg_constants.con_status_failure;
               out_errmsg := SUBSTR (SQLERRM, 1, 100);
         END;

         IF v_dsl_var = 1 THEN
            UPDATE line_item_detail lid
               SET action_code  ='Update'
             WHERE active       = 'Y'
               AND line_item_id IN (SELECT l.line_item_id
                                    FROM line_item l
                                    WHERE l.active           = 'Y'
                                     AND l.quote_header_id  = in_quote_header_id
                                     AND l.site_id          = v_site_id
                                     AND UPPER (l.action_code) <> 'ADD'
                                     AND UPPER (l.product_name) = 'BT IVPN2 ACCESS'
                                     AND UPPER(l.fallback_type) = in_fallbck_tobe)
               AND attribute_mapping_id IN (5, 4,124);
         END IF;
      END LOOP;


      --  DSL COMMERCIAL PORT SPEED UPDATE
        BEGIN
           SELECT 1
           INTO v_access_tech4
           FROM line_item_detail
           WHERE active = 'Y'
            AND line_item_id IN (SELECT l.line_item_id
                                 FROM line_item l
                                WHERE l.active               = 'Y'
                                  AND l.quote_header_id      = in_quote_header_id
                                  AND l.site_id              = v_site_id
                                  AND UPPER (product_name)   IN ('BT IVPN2 ACCESS')
                                  AND UPPER(l.fallback_type) = in_fallbck_tobe)
            AND attribute_mapping_id = 3 -- Access Tech
            AND UPPER(value) = 'DSL';

       SELECT COUNT (*)
       INTO v_access_type_count
       FROM line_item li, line_item_detail lid
       WHERE li.active                 = 'Y'
          AND lid.active               = 'Y'
          AND li.quote_header_id       = in_quote_header_id
          AND li.site_id               = v_site_id
          AND lid.line_item_id         = li.line_item_id
          AND lid.attribute_mapping_id = 5
          AND UPPER(lid.action_code)   = 'UPDATE'
          AND UPPER (li.product_name)  = 'BT IVPN2 ACCESS'
          AND UPPER(li.fallback_type)  = in_fallbck_tobe;

       EXCEPTION
           WHEN OTHERS THEN
               v_access_tech4                 := 0;
               v_access_type_count            := 0;
       END;


       IF v_access_tech4 =1 AND v_access_type_count = 1 THEN

            UPDATE line_item_detail lid
               SET action_code  ='Update'
             WHERE active       = 'Y'
               AND line_item_id IN (
                                    SELECT l.line_item_id
                                    FROM line_item l
                                    WHERE l.active           = 'Y'
                                     AND l.quote_header_id  = in_quote_header_id
                                     AND l.site_id          = v_site_id
                                     AND UPPER (l.product_name) = 'BT IVPN2 PORT'
                                     AND UPPER(l.fallback_type) = in_fallbck_tobe)
               AND attribute_mapping_id IN (246);
       END IF;


      -- VPN Bandwidth - 1123
      FOR rec_vpn_bw IN cur_vpn_bw
      LOOP
         BEGIN
            v_bandwth := 0;
            SELECT 1 INTO v_bandwth
              FROM line_item_detail
             WHERE active       = 'Y'
               AND line_item_id IN (SELECT l.line_item_id
                                    FROM line_item l
                                    WHERE l.active              = 'Y'
                                     AND l.quote_header_id      = in_quote_header_id
                                     AND l.site_id              = v_site_id
                                     AND UPPER(l.fallback_type) = in_fallbck_tobe)
               AND NVL (VALUE, '-1') <> NVL (rec_vpn_bw.VALUE, '-1')
               AND attribute_mapping_id = 1123;
         EXCEPTION
            WHEN NO_DATA_FOUND THEN
               v_bandwth := 0;
            WHEN OTHERS THEN
               out_status := pkg_constants.con_status_failure;
               out_errmsg := SUBSTR (SQLERRM, 1, 100);
         END;

         IF v_bandwth = 1 THEN
             -- Order_Line Item table
            UPDATE order_line_item l
               SET action_code       = 'Update'
             WHERE l.active          = 'Y'
               AND l.order_header_id = v_order_header_id
               AND l.site_id         = v_site_id
               AND UPPER(l.fallback_type) = in_fallbck_tobe
               AND ((UPPER (l.action_code) <> 'ADD' AND UPPER (product_name) = 'BT IVPN2 VPN CONNECTION'));

               -- Order_Line Item_Detail  table
            UPDATE order_line_item_detail li
                SET action_code            = 'Update'
               WHERE li.active             = 'Y'
               AND order_line_item_id     IN (SELECT l.order_line_item_id
                                              FROM order_line_item l
                                              WHERE l.active             = 'Y'
                                              AND UPPER (product_name)   = 'BT IVPN2 VPN CONNECTION'
                                              AND UPPER (li.action_code) <> 'ADD'
                                              AND l.order_header_id      = v_order_header_id
                                              AND l.site_id              = v_site_id
                                              AND UPPER(l.fallback_type) = in_fallbck_tobe)
                AND attribute_mapping_id = 1123;
         END IF;
      END LOOP;



      /*
      -- VPN Bandwidth -- 1123

      FOR rec_vpn_bw IN cur_vpn_bw
      LOOP
         BEGIN
            v_bandwth := 0;

            SELECT 1 INTO v_bandwth
              FROM order_line_item_detail
             WHERE active = 'Y'
                AND order_line_item_id IN (SELECT l.order_line_item_id
                                           FROM order_line_item l
                                           WHERE l.active             = 'Y'
                                           AND l.order_header_id      = v_order_header_id
                                           AND l.site_id              = v_site_id
                                           AND UPPER(l.fallback_type) = in_fallbck_tobe)
               AND attribute_mapping_id = 1123;
         EXCEPTION
            WHEN NO_DATA_FOUND THEN
               v_bandwth := 0;
            WHEN OTHERS THEN
               out_status := pkg_constants.con_status_failure;
               out_errmsg := SUBSTR (SQLERRM, 1, 100);
         END;

         IF v_bandwth = 1 THEN

            -- Order_Line Item table
            UPDATE order_line_item l
               SET action_code       = 'Update'
             WHERE l.active          = 'Y'
               AND l.order_header_id = v_order_header_id
               AND l.site_id         = v_site_id
               AND UPPER(l.fallback_type) = in_fallbck_tobe
               AND ((UPPER (l.action_code) <> 'ADD' AND UPPER (product_name) = 'BT IVPN2 VPN CONNECTION'));

               -- Order_Line Item_Detail  table
            UPDATE order_line_item_detail li
                SET action_code            = 'Update'
               WHERE li.active             = 'Y'
               AND order_line_item_id     IN (SELECT l.order_line_item_id
                                              FROM order_line_item l
                                              WHERE l.active             = 'Y'
                                              AND UPPER (product_name)   = 'BT IVPN2 VPN CONNECTION'
                                              AND UPPER (li.action_code) <> 'ADD'
                                              AND l.order_header_id      = v_order_header_id
                                              AND l.site_id              = v_site_id
                                              AND UPPER(l.fallback_type) = in_fallbck_tobe)
                AND attribute_mapping_id = 1123;
         END IF;
      END LOOP;
      */


        --BT iVPN2 PORT Update
       SELECT COUNT (DISTINCT lid.action_code)
       INTO v_portspeed_totvpn_dsl_count
       FROM line_item li, line_item_detail lid
       WHERE li.active                 = 'Y'
          AND lid.active               = 'Y'
          AND li.quote_header_id       = in_quote_header_id
          AND li.site_id               = v_site_id
          AND lid.line_item_id         = li.line_item_id
          AND lid.attribute_mapping_id IN (11,204,246) -- replaced 12 with 246
          AND UPPER(lid.action_code)   = 'UPDATE'
          AND UPPER (li.product_name)  = 'BT IVPN2 PORT'
          AND UPPER(li.action_code)    <> 'ADD'
          AND UPPER(li.fallback_type)  = in_fallbck_tobe;


       SELECT COUNT(action_code)
       INTO v_port_reconfig
       FROM price_line_item_detail
        WHERE price_line_item_id IN (SELECT DISTINCT price_line_item_id
                                      FROM price_line_item
                                      WHERE line_item_id IN
                                     (SELECT DISTINCT line_item_id FROM line_item l
                                      WHERE l.active             = 'Y'
                                      AND UPPER (l.product_name) = 'BT IVPN2 PORT'
                                      AND UPPER (l.action_code)  <> 'ADD'
                                      AND l.quote_header_id      = in_quote_header_id
                                      AND l.site_id              = v_site_id
                                      AND UPPER(l.fallback_type) = in_fallbck_tobe
                                      ))
        AND price_line_item_id = (CASE in_fallbck_tobe WHEN 'PRIMARY'   THEN 2012
                                                       WHEN 'SECONDARY' THEN 2013
                                  END)
        AND UPPER(action_code) = 'ADD';


        IF (v_portspeed_totvpn_dsl_count >= 1 OR v_port_reconfig = 1) THEN

              UPDATE line_item l
                SET action_code             = 'Update'
               WHERE l.active               = 'Y'
                 AND UPPER (product_name)   ='BT IVPN2 PORT'
                 AND UPPER (l.action_code)  <> 'ADD'
                 AND l.quote_header_id      = in_quote_header_id
                 AND l.site_id              = v_site_id
                 AND UPPER(l.fallback_type) = in_fallbck_tobe;
                -- AND v_portspeed_totvpn_dsl_count >= 1;


              UPDATE order_line_item l
                SET action_code            = 'Update'
              WHERE l.active               = 'Y'
                AND UPPER (product_name)   ='BT IVPN2 PORT'
                AND UPPER (l.action_code)  <> 'ADD'
                AND l.order_header_id      = v_order_header_id
                AND l.site_id              = v_site_id
                AND UPPER(l.fallback_type) = in_fallbck_tobe;
                --AND v_portspeed_totvpn_dsl_count >= 1;
          END IF;

        --BT IVPN2 ACCESS Update
         BEGIN

            SELECT COUNT(1)
            INTO v_reach_nni_count
            FROM line_item_detail
            WHERE active = 'Y'
            AND line_item_id IN (SELECT l.line_item_id
                                 FROM line_item l
                                WHERE l.active              = 'Y'
                                  AND l.quote_header_id     = in_quote_header_id
                                  AND l.site_id             = v_site_id
                                  AND UPPER (product_name)  IN ('BT IVPN2 PORT')
                                  AND UPPER(l.action_code)   = 'UPDATE'
                                  AND UPPER(l.fallback_type) = in_fallbck_tobe)
            AND attribute_mapping_id = 135 -- Reach in NNI
            AND UPPER(value) ='Y';

            SELECT COUNT (DISTINCT lid.action_code)
            INTO v_port_dsl_count
            FROM line_item li, line_item_detail lid
            WHERE li.active              = 'Y'
            AND lid.active               = 'Y'
            AND li.quote_header_id       = in_quote_header_id
            AND li.site_id               = v_site_id
            AND lid.line_item_id         = li.line_item_id
            AND lid.attribute_mapping_id IN (6,246)
            AND UPPER(lid.action_code)   = 'UPDATE'
            AND UPPER(li.fallback_type)  = in_fallbck_tobe;

         EXCEPTION
            WHEN OTHERS THEN
               v_reach_nni_count  := 0;
               v_port_dsl_count   := 0;

         END;

         IF v_reach_nni_count = 1 OR v_port_dsl_count = 1 THEN
           UPDATE line_item l
              SET action_code            = 'Update'
             WHERE l.active              = 'Y'
               AND UPPER (product_name)  IN ('BT IVPN2 ACCESS')
               AND UPPER (l.action_code) <> 'ADD'
               AND l.quote_header_id     = in_quote_header_id
               AND l.site_id             = v_site_id
               AND UPPER(l.fallback_type) = in_fallbck_tobe;

           UPDATE order_line_item l
                SET action_code          = 'Update'
             WHERE l.active              = 'Y'
              AND UPPER (product_name)   IN ('BT IVPN2 ACCESS')
              AND UPPER (l.action_code)  <> 'ADD'
              AND l.order_header_id      = v_order_header_id
              AND l.site_id              = v_site_id
              AND UPPER(l.fallback_type) = in_fallbck_tobe;
         END IF;


      --  BT IVPN2 VPN CONNECTION Update
       BEGIN
           SELECT 1
           INTO v_access_tech3
           FROM line_item_detail
           WHERE active = 'Y'
            AND line_item_id IN (SELECT l.line_item_id
                                 FROM line_item l
                                WHERE l.active               = 'Y'
                                  AND l.quote_header_id      = in_quote_header_id
                                  AND l.site_id              = v_site_id
                                  AND UPPER (product_name)   IN ('BT IVPN2 VPN CONNECTION')
                                  AND UPPER(l.fallback_type) = in_fallbck_tobe)
            AND UPPER(action_code)  <> 'ADD'
            AND attribute_mapping_id = 3 -- Access Tech
            AND UPPER(value) IN ('HVPN', 'DSL');

            SELECT COUNT (DISTINCT lid.action_code)
            INTO v_portspeed_totvpn
            FROM line_item li, line_item_detail lid
                WHERE li.active              = 'Y'
                AND lid.active               = 'Y'
                AND li.quote_header_id       = in_quote_header_id
                AND li.site_id               = v_site_id
                AND lid.line_item_id         = li.line_item_id
                AND lid.attribute_mapping_id IN (11, 12)
                AND UPPER(lid.action_code)   = 'UPDATE'
                AND UPPER(li.fallback_type)  = in_fallbck_tobe;

       EXCEPTION
           WHEN OTHERS THEN
               v_access_tech3                 := 0;
               v_portspeed_totvpn             := 0;
       END;

       IF  v_access_tech3 = 1 AND v_portspeed_totvpn = 1 THEN

            UPDATE line_item l
            SET action_code              = 'Update'
            WHERE l.active               = 'Y'
            AND UPPER (product_name)     IN ('BT IVPN2 VPN CONNECTION')
            AND l.quote_header_id        = in_quote_header_id
            AND l.site_id                = v_site_id
            AND UPPER(l.fallback_type)   = in_fallbck_tobe
            AND line_item_id IN (SELECT DISTINCT Li.line_item_id
                                 FROM line_item li,line_item_detail lid
                                 WHERE li.quote_header_id      = in_quote_header_id
                                   AND li.site_id              = in_site_id
                                   AND UPPER(li.fallback_type) = in_fallbck_tobe
                                   AND UPPER(li.product_name)  = 'BT IVPN2 VPN CONNECTION'
                                   AND UPPER (lid.action_code) <> 'ADD'
                                   AND li.active               = 'Y'
                                   AND lid.active              = 'Y'
                                   AND lid.line_item_id        = li.line_item_id);

            UPDATE order_line_item l
            SET action_code            = 'Update'
            WHERE l.active             = 'Y'
            AND UPPER (product_name)   IN ('BT IVPN2 VPN CONNECTION')
            AND UPPER (l.action_code)  <> 'ADD'
            AND l.order_header_id      = v_order_header_id
            AND l.site_id              = v_site_id
            AND UPPER(l.fallback_type) = in_fallbck_tobe;
       END IF;


       -- ACCESS RESILENCY SUMMARY always 'Update' as per AC Spec v1.5i
       UPDATE line_item_detail lid
        SET action_code = 'Update'
       WHERE active = 'Y'
       AND line_item_id IN (
                              SELECT l.line_item_id
                                FROM line_item l
                               WHERE l.active                = 'Y'
                                 AND UPPER (l.product_name)  = 'BT IVPN2 GLOBAL'
                                 AND l.quote_header_id       = in_quote_header_id
                                 AND l.site_id               = v_site_id
                                 AND UPPER(l.fallback_type)  = in_fallbck_tobe)
       AND attribute_mapping_id = 1;

     -- LOGICAL  - End


      --NOTES 1  BT iVPN2 GLOBAL Line item should always be Update

      -- QUOTE level
      UPDATE line_item l
       SET action_code              = 'Update'
      WHERE l.active                = 'Y'
       AND UPPER (l.product_name)   = 'BT IVPN2 GLOBAL'
       AND l.quote_header_id        = in_quote_header_id
       AND l.site_id                = v_site_id
       AND UPPER(l.fallback_type)   = in_fallbck_tobe;


       --ORDER level
       UPDATE order_line_item l
       SET action_code              = 'Update'
      WHERE l.active                = 'Y'
       AND UPPER (l.product_name)   = 'BT IVPN2 GLOBAL'
       AND l.order_header_id        = v_order_header_id
       AND l.site_id                = v_site_id
       AND UPPER(l.fallback_type)   = in_fallbck_tobe;

      /*
      --  NOTES 1 Update Cos Model attr to 'UPDATE '
       UPDATE line_item_detail lid
          SET action_code = 'Update'
       WHERE active = 'Y'
       AND line_item_id IN (
                              SELECT l.line_item_id
                                FROM line_item l
                               WHERE l.active                = 'Y'
                                 AND UPPER (l.product_name)  = 'BT IVPN2 GLOBAL'
                                 AND l.quote_header_id       = in_quote_header_id
                                 AND l.site_id               = v_site_id
                                 AND UPPER(l.fallback_type)  = in_fallbck_tobe)
       AND attribute_mapping_id = 401;
       */

      -- NOTES 4 implementation  AS_IS  Detail
      UPDATE quote_line_item_detail_as_is qlid
         SET action_code = 'Delete'
       WHERE line_item_id IN (SELECT DISTINCT oli.line_item_id
                                FROM quote_line_item_as_is oli
                                WHERE UPPER (oli.action_code) = 'DELETE'
                                AND oli.active                = 'Y'
                                AND oli.quote_header_id       = in_quote_header_id
                                AND oli.site_id               = v_site_id
                                AND UPPER(oli.fallback_type)  = in_fallbck_asis)
         AND qlid.active = 'Y';

       UPDATE order_line_item_detail_as_is qlid
         SET action_code = 'Delete'
       WHERE order_line_item_id IN (SELECT DISTINCT oli.order_line_item_id
                                FROM order_line_item_as_is oli
                                WHERE UPPER (oli.action_code) = 'DELETE'
                                AND oli.active                = 'Y'
                                AND oli.quote_header_id       = in_quote_header_id
                                AND oli.site_id               = v_site_id
                                AND UPPER(oli.fallback_type)  = in_fallbck_asis)
         AND qlid.active = 'Y';

      -- NOTES 4 implementation
      --TO_BE Detail
      UPDATE line_item_detail lid
         SET lid.action_code = 'Add'
       WHERE lid.line_item_id IN (SELECT DISTINCT li.line_item_id
                                   FROM line_item li
                                  WHERE UPPER (li.action_code)  = 'ADD'
                                    AND li.active               = 'Y'
                                    AND li.quote_header_id      = in_quote_header_id
                                    AND li.site_id              = v_site_id
                                    AND UPPER(li.fallback_type) = in_fallbck_tobe)
         AND lid.active = 'Y';

       -- TO BE Order Detail
       UPDATE order_line_item_detail
       SET  action_code = 'Add'
       WHERE order_line_item_id IN (SELECT DISTINCT order_line_item_id
                                    FROM order_line_item l
                                    WHERE l.active      = 'Y'
                                    AND l.order_header_id IN
                                        (SELECT DISTINCT order_header_id
                                          FROM order_header
                                         WHERE quote_header_id = in_quote_header_id)
                                    AND l.site_id              = v_site_id
                                    AND UPPER (l.action_code)  = 'ADD'
                                    AND UPPER(l.fallback_type) = in_fallbck_tobe)
       AND active = 'Y';

        -- Set AC ='Update' always for Resilency attribute - QUOTE level
        UPDATE line_item_detail lid
        SET lid.action_code = 'Update'
        WHERE active        = 'Y'
        AND lid.line_item_id IN (SELECT DISTINCT li.line_item_id
                                   FROM line_item li
                                  WHERE li.active                = 'Y'
                                    AND li.quote_header_id       = in_quote_header_id
                                    AND li.site_id               = v_site_id
                                    AND UPPER (li.fallback_type) = in_fallbck_tobe)
        AND lid.attribute_mapping_id = 1; --Resilency attribute


       -- RESIGN -- Start
       BEGIN

            v_Resign := 0;

            SELECT 1 INTO v_Resign
            FROM line_item_detail
            WHERE active     = 'Y'
            AND line_item_id IN (
                              SELECT l.line_item_id
                                FROM line_item l
                               WHERE l.active               = 'Y'
                                 AND l.quote_header_id      = in_quote_header_id
                                 AND l.site_id              = v_site_id
                                 AND UPPER(l.fallback_type) = in_fallbck_tobe)
            AND attribute_mapping_id = 32
            AND UPPER(value)         IN ('COMMERCIAL TECHNICAL', 'COMMERCIAL ONLY', 'COMMERCIAL MIGRATION');

       EXCEPTION
            WHEN NO_DATA_FOUND THEN
                v_Resign     := 0;
            WHEN OTHERS THEN
                out_status := pkg_constants.con_status_failure;
                out_errmsg := SUBSTR (SQLERRM, 1, 100);
       END;

       IF (v_Resign = 1 OR in_LOSB_flag = 'Y') THEN

            -- LOSB update
            UPDATE line_item_detail
            SET action_code = 'Update'
            WHERE active     = 'Y'
            AND line_item_id IN (
                              SELECT l.line_item_id
                                FROM line_item l
                               WHERE l.active               = 'Y'
                                 AND l.quote_header_id      = in_quote_header_id
                                 AND l.site_id              = v_site_id
                                 AND UPPER(l.fallback_type) = in_fallbck_tobe)
            AND attribute_mapping_id = 30
            AND UPPER(value)         = 'YES';


            -- CUSTOMER_RESIGN option action_code as 'Update'
               UPDATE line_item_detail
            SET action_code = 'Update'
            WHERE active     = 'Y'
            AND line_item_id IN (
                              SELECT l.line_item_id
                                FROM line_item l
                               WHERE l.active               = 'Y'
                                 AND l.quote_header_id      = in_quote_header_id
                                 AND l.site_id              = v_site_id
                                 AND UPPER(l.fallback_type) = in_fallbck_tobe)
            AND attribute_mapping_id = 32;


            -- LINE ITEM
            UPDATE line_item l
            SET action_code =
                (CASE
                   WHEN l.classic_element_id IS NOT NULL AND UPPER (l.product_name) = 'BT IVPN2 GLOBAL' THEN 'Update'
                   WHEN l.classic_element_id IS NOT NULL AND UPPER (l.product_name) = 'BT IVPN2 ACCESS' THEN 'Update'
                   WHEN l.classic_element_id IS NOT NULL AND UPPER (l.product_name) = 'BT IVPN2 PORT'   THEN 'Update'
                   WHEN l.classic_element_id IS NOT NULL AND UPPER (l.product_name) = 'BT IVPN2 VPN CONNECTION' THEN 'Update'
                   WHEN l.classic_element_id IS NOT NULL AND UPPER (l.product_name) = 'BT CPE' AND UPPER (l.part_type) = 'BUNDLE' THEN 'Update'
                END)
             WHERE l.active               = 'Y'
               AND l.quote_header_id      = in_quote_header_id
               AND l.site_id              = v_site_id
               AND UPPER(l.fallback_type) = in_fallbck_tobe
               AND UPPER(l.action_code)   = 'NONE';


            -- ORDER LINE ITEM
            UPDATE order_line_item l
            SET l.action_code =
                (CASE
                   WHEN l.classic_element_id IS NOT NULL AND UPPER (l.product_name) = 'BT IVPN2 GLOBAL' THEN 'Update'
                   WHEN l.classic_element_id IS NOT NULL AND UPPER (l.product_name) = 'BT IVPN2 ACCESS' THEN 'Update'
                   WHEN l.classic_element_id IS NOT NULL AND UPPER (l.product_name) = 'BT IVPN2 PORT'   THEN 'Update'
                   WHEN l.classic_element_id IS NOT NULL AND UPPER (l.product_name) = 'BT IVPN2 VPN CONNECTION' THEN 'Update'
                   WHEN l.classic_element_id IS NOT NULL AND UPPER (l.product_name) = 'BT CPE'          THEN 'Update'
                END)
             WHERE l.active               = 'Y'
               AND l.order_header_id      = v_order_header_id
               AND l.site_id              = v_site_id
               AND UPPER(l.fallback_type) = in_fallbck_tobe
               AND UPPER(l.action_code)   = 'NONE';


            -- LINE ITEM DETAIL
            UPDATE line_item_detail lid
            SET action_code =
                 (CASE
                    WHEN lid.classic_element_id IS NOT NULL AND lid.attribute_mapping_id = 124  THEN 'Update'
                    WHEN lid.classic_element_id IS NOT NULL AND lid.attribute_mapping_id = 125  THEN 'Update'
                    WHEN lid.classic_element_id IS NOT NULL AND lid.attribute_mapping_id = 2    THEN 'Update'
                    WHEN lid.classic_element_id IS NOT NULL AND lid.attribute_mapping_id = 1006 THEN 'Update'
                    WHEN lid.classic_element_id IS NOT NULL AND lid.attribute_mapping_id = 3    THEN 'Update'
                    WHEN lid.classic_element_id IS NOT NULL AND lid.attribute_mapping_id = 5    THEN 'Update'
                    WHEN lid.classic_element_id IS NOT NULL AND lid.attribute_mapping_id = 12   THEN 'Update'
                    WHEN lid.classic_element_id IS NOT NULL AND lid.attribute_mapping_id = 11   THEN 'Update'
                    WHEN lid.classic_element_id IS NOT NULL AND lid.attribute_mapping_id = 216  THEN 'Update'
                    -- Version 1.5g implementation changes
                    WHEN lid.value IS NOT NULL AND lid.attribute_mapping_id = 157  THEN 'Update'
                    WHEN lid.value IS NOT NULL AND lid.attribute_mapping_id = 158  THEN 'Update'
                    WHEN lid.value IS NOT NULL AND lid.attribute_mapping_id = 159  THEN 'Update'
                 END)
            WHERE active      = 'Y'
              AND line_item_id IN (SELECT l.line_item_id
                                   FROM line_item l
                                   WHERE l.active              = 'Y'
                                    AND l.quote_header_id      = in_quote_header_id
                                    AND l.site_id              = v_site_id
                                    AND UPPER(l.fallback_type) = in_fallbck_tobe)
              AND UPPER (lid.action_code)  = 'NONE'
              AND lid.attribute_mapping_id IN (124,125,2,1006,3,5,12,11,216, 157, 158, 159); -- Version 1.5g implementation changes

            -- ORDER LINE ITEM DETAIL
            UPDATE order_line_item_detail lid
            SET action_code =
                 (CASE
                    WHEN lid.classic_element_id IS NOT NULL AND lid.attribute_mapping_id = 124  THEN 'Update'
                    WHEN lid.classic_element_id IS NOT NULL AND lid.attribute_mapping_id = 125  THEN 'Update'
                    WHEN lid.classic_element_id IS NOT NULL AND lid.attribute_mapping_id = 2    THEN 'Update'
                    WHEN lid.classic_element_id IS NOT NULL AND lid.attribute_mapping_id = 1006 THEN 'Update'
                    WHEN lid.classic_element_id IS NOT NULL AND lid.attribute_mapping_id = 3    THEN 'Update'
                    WHEN lid.classic_element_id IS NOT NULL AND lid.attribute_mapping_id = 5    THEN 'Update'
                    WHEN lid.classic_element_id IS NOT NULL AND lid.attribute_mapping_id = 12   THEN 'Update'
                    WHEN lid.classic_element_id IS NOT NULL AND lid.attribute_mapping_id = 11   THEN 'Update'
                    WHEN lid.classic_element_id IS NOT NULL AND lid.attribute_mapping_id = 216  THEN 'Update'
                    -- Version 1.5g implementation changes
                    WHEN lid.value IS NOT NULL AND lid.attribute_mapping_id = 157  THEN 'Update'
                    WHEN lid.value IS NOT NULL AND lid.attribute_mapping_id = 158  THEN 'Update'
                    WHEN lid.value IS NOT NULL AND lid.attribute_mapping_id = 159  THEN 'Update'
                 END)
            WHERE active      = 'Y'
              AND order_line_item_id IN (SELECT l.order_line_item_id
                                   FROM order_line_item l
                                   WHERE l.active              = 'Y'
                                    AND l.order_header_id      = v_order_header_id
                                    AND l.site_id              = v_site_id
                                    AND UPPER(l.fallback_type) = in_fallbck_tobe)
              AND UPPER (lid.action_code)  = 'NONE'
              AND lid.attribute_mapping_id IN (124,125,2,1006,3,5,12,11,216, 157, 158, 159); -- Version 1.5g implementation changes
       END IF;

       -- RESIGN -- End

   END LOOP; -- SITE_ID

   COMMIT;
   out_status := 1;
   out_errmsg := 'Success';

EXCEPTION
   WHEN OTHERS THEN
      out_status := pkg_constants.con_status_failure;
      out_errmsg := SUBSTR (SQLERRM, 1, 150);
      v_sql_code := SQLCODE;
      pkg_common.spi_error_log (NULL,
                                in_quote_header_id,
                                v_site_id,
                                NULL,
                                'PKG_ACTION_CODE_IVPN2',
                                'SPU_ACTION_CODE_FALLBACK',
                                v_sql_code,
                                out_errmsg
                               );
END spu_action_code_fallback;

END PKG_ACTION_CODE_IVPN2;
/


CREATE OR REPLACE PACKAGE BODY PKG_BCM_EXPORT
IS

   v_sql_code     NUMBER;        -- Added by Sujana on 23/11/2010 as part of exception handling
   v_sql_errm     VARCHAR2(150); -- Added by Sujana on 23/11/2010 as part of exception handling

PROCEDURE SPI_BCM_EXPORT
  (
    in_quoteid       NUMBER,
    in_quoteheaderid NUMBER ,
    in_site_tbl IN alList )
AS

  V_SITE_STATUS                  VARCHAR2(20);
  V_SITE_ID                      NUMBER(10);
  V_SITE                         VARCHAR2(100);
  V_COUNTRY                      VARCHAR2(50) ;
  V_CITY                         VARCHAR2(50);
  V_RESILIENCE_TYPE              VARCHAR2(100);
  V_PRIMARY_CONNECTION_STATUS    VARCHAR2(100);
  V_PRIMARY_REACH_IN_NNI_PORT    VARCHAR2(10) ;
  V_PRIM_RCH_IN_NNI_PRT_NAME     VARCHAR2(100);
  V_PRIMARY_TARRIF_ZONE          VARCHAR2(100);
  V_PRIMARY_GPoP                 VARCHAR2(100);
  V_PRIMARY_APoP                 VARCHAR2(100);
  V_PRIMARY_TRAFFIC_TYPE         VARCHAR2(100);
  V_PRIMARY_ACCESS_TECHNOLOGY    VARCHAR2(100);
  V_PRIMARY_N_E1_T1              VARCHAR2(100);
  V_PRIMARY_ACCESS_SPEED         VARCHAR2(100);
  V_PRIMARY_PORT_SPEED           VARCHAR2(100);
  V_PRIMARY_DSL_SUPPLIER_ID      VARCHAR2(100);
  V_PRIMARY_DSL_SUPP_OFFER_NAME  VARCHAR2(100);
  V_PRIMARY_DSL_TYPE             VARCHAR2(100);
  V_PRIMARY_DSL_CONTENTION       VARCHAR2(100);
  V_PRIMARY_DSL_ACCESS_UPSTREAM  VARCHAR2(100);
  V_PRIM_DSL_ACCESS_DWNSTRM      VARCHAR2(100);
  V_PRIMARY_DSL_PORT_SPEED       VARCHAR2(100);
  V_PRIM_DSL_LCL_LOOP_ACES       VARCHAR2(100);
  V_PRIM_hVPN_ACES_PRD_TYPE      VARCHAR2(100);
  V_PRIM_hVPN_ACES_SRVCE_ID      VARCHAR2(100);
  V_PRIM_hVPN_PRT_DWNSTRM_SPD    VARCHAR2(100);
  V_PRIM_hVPN_PRT_UPSTRM_SPD     VARCHAR2(100);
  V_PRIM_hVPN_LCL_LOOP_ACES      VARCHAR2(100);
  V_PRIMARY_TOTAL_AF             VARCHAR2(100);
  V_PRIMARY_AF_MULTIMEDIA        VARCHAR2(100);
  V_PRIMARY_EF_SPEED             VARCHAR2(100);
  V_PRIMARY_DE_SPEED             VARCHAR2(100);
  V_NO_OF_ADDI_VPN_PRMRY_PORT    VARCHAR2(100);
  V_NO_OFBGP_PRFXES_PRM_PRT      VARCHAR2(100);
  V_PRIMARY_CPE_PROGRAM_NAME     VARCHAR2(100);
  V_PRIMARY_CPE_INSTALL_EUP      VARCHAR2(100);
  V_PRIMARY_CPE_INST_EUP_DISCT   VARCHAR2(100);
  V_PRIM_CPE_MNTHL_RNTL_EUP      VARCHAR2(100);
  V_PRIM_CPE_MTHLY_RNT_EUP_DIS   VARCHAR2(100);
  V_PRIMARY_CPE_MONT_MAINT_EUP   VARCHAR2(100);
  V_PRIMARY_CPE_INSTALL_COST     VARCHAR2(100);
  V_PRIM_CPE_MNTH_RECUR_CST      VARCHAR2(100);
  V_PRIMARY_CPE_COST_CURRENCY    VARCHAR2(100) :='USD' ;
  V_PRIMARY_CPE_PRICING_STATUS   VARCHAR2(100);
  V_PRIMARY_ACCESS_INSTALL_EUP   VARCHAR2(100);
  V_PRIM_ACES_INSTL_EUP_DIS      VARCHAR2(100);
  V_PRIM_ACES_MNTHLY_RNT_EUP     VARCHAR2(100);
  V_PRIM_ACES_MNTH_RNT_EUP_DIS   VARCHAR2(100);
  V_PRIMARY_ACCESS_INSTALL_COST  VARCHAR2(100);
  V_PRIMARY_ACCESS_MONTHLY_COST  VARCHAR2(100);
  V_PRIMARY_ACCESS_COST_CURRENCY VARCHAR2(100);
  V_PRIM_ACES_PRICING_STATS      VARCHAR2(100);
  V_PRIMARY_PORT_INSTALL_EUP     VARCHAR2(100);
  V_PRIM_PRT_INSTL_EUP_DIS       VARCHAR2(100);
  V_PRIM_PRT_RECNFG_ONE_TIM      VARCHAR2(100);
  V_PRIM_PRT_RECNFIG_OT_DIS      VARCHAR2(100);
  V_PRIMARY_DSL_UPGRD_DWNGRD_OT  VARCHAR2(100);
  V_PRIM_DSL_UP_DWN_GRD_OT_DIS   VARCHAR2(100);
  V_PRIMARY_PORT_MNTHLY_RNTL_EUP VARCHAR2(100);
  V_PRM_PRT_MNTH_RNTL_EUP_DIS    VARCHAR2(100);
  V_PRIMARY_LLA_INSTALL_EUP      VARCHAR2(100);
  V_PRIMARY_LLA_INSTALL_EUP_DISC VARCHAR2(100);
  V_PRIMARY_LLA_MNTHL_RENTAL_EUP VARCHAR2(100);
  V_PRIM_LLA_MNTH_RNT_EUP_DIS    VARCHAR2(100);
  V_PRIMARY_LLA_INSTALL_COST     VARCHAR2(100);
  V_PRIMARY_LLA_MONTHLY_COST     VARCHAR2(100);
  V_PRIMARY_LLA_COST_CURRENCY    VARCHAR2(100);
  V_PRIMARY_mVPN_ONE_TIME_EUP    VARCHAR2(100);
  V_PRI_mVPN_MNTRNT_EUP_PRPRT    VARCHAR2(100);
  V_PRI_mVPN_MNTRN_EU_PRPRT_DIS  VARCHAR2(100);
  V_PR_mVP_MNTRN_EUP_TTAD_VPN    VARCHAR2(100);
  V_PR_mVPN_MNRN_NT_EUP_ADVPN    VARCHAR2(100);
  V_PRIM_BGP_PRFX_ONETME_EUP     VARCHAR2(100);
  V_PRIM_BGP_PRFX_OT_EUP_DIS     VARCHAR2(100);
  V_PRI_BGP_PRFX_MNT_RNT_EUP     VARCHAR2(100);
  V_PR_BGP_PRFX_MNT_RNT_EUP_DIS  VARCHAR2(100);--V_PRIMARY
  V_SECONDRY_CONNECTION_STATUS   VARCHAR2(100);
  V_SECONDRY_NNI_PORT            VARCHAR2(10) ;
  V_SCNDRY_REACH_IN_NNI_PRT_NAME VARCHAR2(100);
  V_SECONDRY_TARRIF_ZONE         VARCHAR2(100);
  V_SECONDRY_GPoP                VARCHAR2(100);
  V_SECONDRY_APoP                VARCHAR2(100);
  V_SECONDRY_TRAFFIC_TYPE        VARCHAR2(100);
  V_SECONDRY_ACCESS_TYPE         VARCHAR2(100);
  V_SECONDRY_N_E1_T1             VARCHAR2(100);
  V_SECONDRY_ACCESS_SPEED        VARCHAR2(100);
  V_SECONDRY_PORT_SPEED          VARCHAR2(100);
  V_SECONDRY_DSL_SUPPLIER_ID     VARCHAR2(100);
  V_SECONDRY_DSL_SUPP_OFFR_NAME  VARCHAR2(100);
  V_SECONDRY_DSL_TYPE            VARCHAR2(100);
  V_SECONDRY_DSL_CONTENTION      VARCHAR2(100);
  V_SECONDRY_DSL_ACCESS_UPSTREAM VARCHAR2(100);
  V_SEC_DSL_ACES_DWNSTRM         VARCHAR2(100);
  V_SECONDRY_DSL_PORT_SPEED      VARCHAR2(100);
  V_SEC_DSL_LCAL_LP_ACES         VARCHAR2(100);
  V_SEC_hVPN_ACES_PRD_TYP        VARCHAR2(100);
  V_SECND_hVPN_ACCESS_SERVICE_ID VARCHAR2(100);
  V_SECND_hVPN_PRT_DWNSTRM_SPEED VARCHAR2(100);
  V_SEC_hVPN_PRT_UPSTRM_SPD      VARCHAR2(100);
  V_SECND_hVPN_LOCAL_LOOP_ACCESS VARCHAR2(100);
  V_SECONDRY_TOTAL_AF            VARCHAR2(100);
  V_SECONDRY_AF_MULTIMEDIA       VARCHAR2(100);
  V_SECONDRY_EF_SPEED            VARCHAR2(100);
  V_SECONDRY_DE_SPEED            VARCHAR2(100);--error2
  V_NO_OF_ADDI_VPN_SCNDRY_PORT   VARCHAR2(100);
  V_NO_OF_BGP_PRFXE_SCDRY_PRT    VARCHAR2(100);
  V_SECONDRY_CPE_PROGRAM_NAME    VARCHAR2(100);
  V_SECONDRY_CPE_INSTALL_EUP     VARCHAR2(100);
  V_SECONDRY_CPE_INST_EUP_DISCT  VARCHAR2(100);--error1
  V_SECND_CPE_MONTHLY_RENTAL_EUP VARCHAR2(100);
  V_SECND_CPE_MTHLY_RNT_EUP_DISC VARCHAR2(100);
  V_SECONDRY_CPE_MONT_MAINT_EUP  VARCHAR2(100);
  V_SECONDRY_CPE_INSTALL_COST    VARCHAR2(100);
  V_SECND_CPE_MONTH_RECURR_COST  VARCHAR2(100);
  V_SECONDRY_CPE_COST_CURRENCY   VARCHAR2(100) :='USD';
  V_SECONDRY_CPE_PRICING_STATUS  VARCHAR2(100);
  V_SECONDRY_ACCESS_INSTALL_EUP  VARCHAR2(100);
  V_SEC_ACES_INSTL_EUP_DIS       VARCHAR2(100);
  V_SECND_ACCESS_MNTHLY_RENT_EUP VARCHAR2(100);
  V_SEC_ACES_MNT_RNT_EUP_DIS     VARCHAR2(100);
  V_SECONDRY_ACCESS_INSTALL_COST VARCHAR2(100);
  V_SECONDRY_ACCESS_MONTHLY_COST VARCHAR2(100);
  V_SEC_ACES_CST_CURR            VARCHAR2(100);
  V_SEC_ACCES_PRIC_STAT          VARCHAR2(100);
  V_SECONDRY_PORT_INSTALL_EUP    VARCHAR2(100);
  V_SEC_PRT_INSTL_EUP_DIS        VARCHAR2(100);
  V_SECNDRY_PRT_RECNFIG_OT       VARCHAR2(100);
  V_SEC_PRT_RECNFIG_OT_DIS       VARCHAR2(100);
  V_SECONDRY_DSL_UPGRD_DWNGRD_OT VARCHAR2(100);
  V_SECND_DSL_UP_DWN_GRD_OT_DISC VARCHAR2(100);
  V_SEC_PRT_MNTH_RNT_EUP         VARCHAR2(100);
  V_SECND_PORT_MNTH_RNTL_EUP_DIS VARCHAR2(100);
  V_SECONDRY_LLA_INSTALL_EUP     VARCHAR2(100);
  V_SEC_LLA_INSTL_EUP_DIS        VARCHAR2(100);
  V_SEC_LLA_MNT_RNTL_EUP         VARCHAR2(100);
  V_SEC_LLA_MNT_RNT_EUP_DIS      VARCHAR2(100);
  V_SECONDRY_LLA_INSTALL_COST    VARCHAR2(100);
  V_SECONDRY_LLA_MONTHLY_COST    VARCHAR2(100);
  V_SECONDRY_LLA_COST_CURRENCY   VARCHAR2(100);
  V_SECONDRY_mVPN_ONE_TIME_EUP   VARCHAR2(100);
  V_SECND_mVPN_ONE_TIME_NET_EUP  VARCHAR2(100);
  V_SEC_mVPN_MNTRNT_EUP_PERRT    VARCHAR2(100);
  V_SE_mVPN_MNRNT_EUP_PERRT_DIS  VARCHAR2(100);
  V_SE_mVP_MNRNT_EUP_TT_AD_VPN   VARCHAR2(100);
  V_SE_mVPN_MNRNT_NT_EUP_ADVPN   VARCHAR2(100);
  V_SECONDRY_BGP_PRFX_OT_EUP     VARCHAR2(100);
  V_SEC_BGP_PRFX_OT_EUP_DIS      VARCHAR2(100);
  V_SEC_BGP_PRFX_MNT_RNT_EUP     VARCHAR2(100);
  V_SEC_BGP_PRFX_MN_RN_EUP_DIS   VARCHAR2(100);
  V_CHANGE_MANAGEMENT            VARCHAR2(100);
  V_CHANGE_MANAGEMENT_DISCOUNT   VARCHAR2(100);
  V_CHANGE_MANAGEMENT_LIGHT_EUP  VARCHAR2(100);
  V_CHNGE_MGMT_LGHT_EUP_DIS      VARCHAR2(100);
  V_PROACTIVE_CE_MONITORINGS_EUP VARCHAR2(100);
  V_PRACTVE_CE_MNTR_EUP_DIS      VARCHAR2(100);
  V_SNMP_RDN_ACES_PRM_CPET_EUP   VARCHAR2(100);
  V_SNMP_RD_ACE_PR_CPT_EUP_DIS   VARCHAR2(100);
  V_OOH_TRNUP_MN_CPE_OT_EUP      VARCHAR2(100);
  V_OOH_TRNUP_MN_CPE_OT_EUP_DIS  VARCHAR2(100);
  V_SNMP_RDN_ACE_SEC_CPET_EUP    VARCHAR2(100);
  V_SNMP_RD_ACE_SE_CPET_EUP_DIS  VARCHAR2(100);
  V_OOH_TRNUP_SEC_CPE_OT_EUP     VARCHAR2(100);
  V_OOH_TRNUP_SEC_CPE_OT_EUP_DIS VARCHAR2(100);
  V_PR_AF1_CIPR                  VARCHAR2(100);
  V_PR_AF2_CIPR                  VARCHAR2(100);
  V_PR_AF3_CIPR                  VARCHAR2(100);
  V_PR_AF4_CIPR                  VARCHAR2(100);
  V_SE_AF1_CIPR                  VARCHAR2(100);
  V_SE_AF2_CIPR                  VARCHAR2(100);
  V_SE_AF3_CIPR                  VARCHAR2(100);
  V_SE_AF4_CIPR                  VARCHAR2(100);
  v_errcode                      NUMBER;
  v_errmsg                       VARCHAR2(200);
  v_rowcount                     NUMBER;
  V_PRIMARY_GPoP_attribute       VARCHAR2(100);
  V_PRIMARY_GPoP_accessqref      VARCHAR2(100);
  V_SECONDRY_GPoP_attribute      VARCHAR2(100);
  V_SECONDRY_GPoP_accessqref     VARCHAR2(100);
  v_PRIMARY_ACCESS_SPEED_text    VARCHAR2(200);
  v_SEC_ACCESS_SPEED_text        VARCHAR2(200);
  v_primary_access_type          VARCHAR2(100);
  V_SEC_ACCESS_TYPE              VARCHAR2(100);
  V_Prim_DSL_hVPN_acces_upstream VARCHAR2(100);
  V_prim_DSL_hVPN_acces_dwnstrm  VARCHAR2(100);
  V_sec_DSL_hVPN_acces_upstrm    VARCHAR2(100);
  V_sec_DSL_hVPN_acces_dwnstrm   VARCHAR2(100);
  V_prim_access_speed            VARCHAR2(100);
  V_sec_access_speed             VARCHAR2(100);
  V_BGP_PRIM_ONETIME_COST        VARCHAR2(100);
  V_BGP_PRIM_RECUR_COST          VARCHAR2(100);
  V_BGP_SEC_ONETIME_COST         VARCHAR2(100);
  V_BGP_SEC_RECURRING_COST       VARCHAR2(100);
  V_PRIMARY_MVPN_NET_EUP         VARCHAR2(100);
  V_HELPDESK_TYPE                VARCHAR2(100);
  V_HELPDESK_ONETIME_EUP         VARCHAR2(100);
  V_Helpdesk_One_Time_Dis        VARCHAR2(100);
  V_Helpdesk_Mon_Recur_EUP       VARCHAR2(100);
  V_Helpdesk_Mon_Recur_Dis       VARCHAR2(100);
  V_Sec_cpe_Chg_Mgmt_Mnth_EUP    VARCHAR2(100);
  V_Sec_cpe_Chg_Mgmt_Mnth_Dis    VARCHAR2(100);
  V_Sec_cpe_Pro_CE_Mntr_Mnth_EUP VARCHAR2(100);
  V_Sec_cpe_Pro_CE_Mntr_Mnth_Dis VARCHAR2(100);
  v_hvpn_a                       VARCHAR2(100);
  v_hvpn_b                       VARCHAR2(100);
  --for R7
  V_Prim_cpe_Ins_PTP             VARCHAR2(100);
  V_Prim_cpe_mon_Rntal_PTP       VARCHAR2(100);
  V_Prim_accss_ins_PTP           VARCHAR2(100);
  V_Prim_accss_Mon_rntal_PTP     VARCHAR2(100);
  V_Prim_port_Ins_PTP            VARCHAR2(100);
  V_Prim_port_reconfig_One_time  VARCHAR2(100);
  V_Prim_DSL_Up_Down_One_time    VARCHAR2(100);
  V_Prim_port_Mon_rntal_PTP      VARCHAR2(100);
  V_Prim_LLA_Ins_PTP             VARCHAR2(100);
  V_Prim_LLA_Mon_rntal_PTP       VARCHAR2(100);
  V_Prim_mVPN_One_Time_PTP       VARCHAR2(100);
  V_Prim_mVPN_One_Time_Net_PTP   VARCHAR2(100);
  V_Prim_mVPN_Mon_Rntal_PTP_Port VARCHAR2(100);
  V_Pr_mVPN_MnRnt_PTP_taddVPN    VARCHAR2(100);
  V_Pr_mVPN_Mnrnt_nt_PTP_tVPN    VARCHAR2(100);
  V_Pr_BGP_Prefx_One_Time_PTP    VARCHAR2(100);
  V_Prim_BGP_Prefx_Monrnt_PTP    VARCHAR2(100);
  V_Sec_CPE_Ins_PTP              VARCHAR2(100);
  V_Sec_CPE_Mon_Rntal_PTP        VARCHAR2(100);
  V_Sec_accss_Ins_PTP            VARCHAR2(100);
  V_Sec_accss_mon_rntal_PTP      VARCHAR2(100);
  V_Sec_port_Ins_PTP             VARCHAR2(100);
  V_Sec_port_reconfig_One_time   VARCHAR2(100);
  V_Sec_DSL_Up_Down_One_time     VARCHAR2(100);
  V_Sec_Port_mon_rntal_PTP       VARCHAR2(100);
  V_Sec_LLA_Ins_PTP              VARCHAR2(100);
  V_Sec_LLA_Mon_rntal_PTP        VARCHAR2(100);
  V_Sec_mVPN_One_Time_PTP        VARCHAR2(100);
  V_Sec_mVPN_One_Time_Net_PTP    VARCHAR2(100);
  V_Se_mVPN_mon_rntl_PTP_Port    VARCHAR2(100);
  V_Sec_mVPN_mon_rnt_PTP_VPN     VARCHAR2(100);
  V_Se_mVPN_mn_rnt_Nt_PTP_VPN    VARCHAR2(100);
  V_Sec_BGP_Prfx_One_Time_PTP    VARCHAR2(100);
  V_Se_BGP_Prefx_mon_rntl_PTP    VARCHAR2(100);
  V_Chnge_Mgmt_PTP               VARCHAR2(100);
  V_Proactv_CE_Monitoring_PTP    VARCHAR2(100);
  V_SNMP_RdAcs_Pr_CPE_OnTm_PTP   VARCHAR2(100);
  V_OOH_trn_up_Mn_CPE_OneTm_PTP  VARCHAR2(100);
  V_SNMP_RdAcs_Se_CPE_OnTm_PTP   VARCHAR2(100);
  V_OOH_trn_up_Se_CPE_OnTm_PTP   VARCHAR2(100);
  V_Helpdesk_One_Time_PTP        VARCHAR2(100);
  V_Helpdesk_Mon_Recurring_PTP   VARCHAR2(100);
  V_Sec_CPE_Chnge_Mgmt_PTP       VARCHAR2(100);
  V_Se_CPE_Practv_CE_Mntr_PTP    VARCHAR2(100);


  -- Added on 4/8/2011 as part of R16
  vPrim_cpe_Ins_PTP_DS              VARCHAR2(100);
  vPrim_cpe_mon_Rntal_PTP_DS        VARCHAR2(100);
  vprim_accss_ins_PTP_DS            VARCHAR2(100);
  vPrim_accss_Mon_rntal_PTP_DS      VARCHAR2(100);
  vPrim_port_Ins_PTP_DS             VARCHAR2(100);
  vPrim_port_reconfig_onetime_DS    VARCHAR2(100);
  vPrim_DSL_Up_Down_One_time_DS     VARCHAR2(100);
  vPrim_port_Mon_rntal_PTP_DS       VARCHAR2(100);
  vPrim_LLA_Ins_PTP_DS              VARCHAR2(100);
  vPrim_LLA_Mon_rntal_PTP_DS        VARCHAR2(100);
  vPrim_mVPN_Mon_Rnt_PTP_Port_DS    VARCHAR2(100);
  vPr_BGP_Prefx_One_Time_PTP_DS     VARCHAR2(100);
  vPrim_BGP_Prefx_Mon_rnt_PTP_DS    VARCHAR2(100);
  vSec_CPE_Ins_PTP_DS               VARCHAR2(100);
  vSec_CPE_Mon_Rntal_PTP_DS         VARCHAR2(100);
  vSec_accss_Ins_PTP_DS             VARCHAR2(100);
  vSec_accss_mon_rntal_PTP_DS       VARCHAR2(100);
  vSec_port_Ins_PTP_DS              VARCHAR2(100);
  vSec_port_reconfig_One_time_DS    VARCHAR2(100);
  vSec_DSL_Up_Down_One_time_DS      VARCHAR2(100);
  vSec_Port_mon_rntal_PTP_DS        VARCHAR2(100);
  vSec_LLA_Ins_PTP_DS               VARCHAR2(100);
  vSec_LLA_Mon_rntal_PTP_DS         VARCHAR2(100);
  vSec_mVPN_mon_rnt_PTP_Port_DS     VARCHAR2(100);
  vSec_BGP_Prefx_OneTime_PTP_DS     VARCHAR2(100);
  vSec_BGP_Prefx_mon_rnt_PTP_DS     VARCHAR2(100);
  vChnge_Mgmt_PTP_DS                VARCHAR2(100);
  vProactive_CE_Monitor_PTP_DS      VARCHAR2(100);
  vSNMP_RdAcsPr_CPE_OneTm_PTP_DS    VARCHAR2(100);
  vOOH_trnupMn_CPE_OneTm_PTP_DS     VARCHAR2(100);
  vSNMP_RdAcsSe_CPE_OneTm_PTP_DS    VARCHAR2(100);
  vOOH_trnupSe_CPE_OneTm_PTP_DS     VARCHAR2(100);
  vHelpdesk_One_Time_PTP_DS         VARCHAR2(100);
  vHelpdesk_Mon_Recurring_PTP_DS    VARCHAR2(100);
  vSec_CPE_Chnge_Mgmt_PTP_DS        VARCHAR2(100);
  vSec_CPE_Proact_CEMntrg_PTP_DS    VARCHAR2(100);
  --start added on 11/08/2011
  V_Pri_Acc_Optm_Rental_Cost_Y2 VARCHAR2(100);
  V_Pri_Acc_Optm_Rental_Cost_Y3 VARCHAR2(100);
  V_Pri_Acc_Optm_Rental_Cost_Y4 VARCHAR2(100);
  V_Pri_Acc_Optm_Rental_Cost_Y5 VARCHAR2(100);
  V_Sec_Acc_Optm_Rental_Cost_Y2 VARCHAR2(100);
  V_Sec_Acc_Optm_Rental_Cost_Y3 VARCHAR2(100);
  V_Sec_Acc_Optm_Rental_Cost_Y4 VARCHAR2(100);
  V_Sec_Acc_Optm_Rental_Cost_Y5 VARCHAR2(100);
  V_Pri_Workflow_Status         VARCHAR2(100);
  V_Sec_Workflow_Status         VARCHAR2(100);
  --end
    in_site_id site.site_id%TYPE;

TYPE SQE_VAL_REC
IS
  RECORD
  (
    sqe_display_TXT1 ATTRIBUTE_MAPPING.SQE_DISPLAY_TEXT%TYPE,
    VALUE1 LINE_ITEM_DETAIL.VALUE%TYPE );
TYPE sqe_display_tbl
IS
  TABLE OF SQE_VAL_REC INDEX BY BINARY_INTEGER;
  sqe_display_tbl_TE sqe_display_tbl;
TYPE SQE_PRICE_REC
IS
  RECORD
  (
    price_line_description VARCHAR2(500),
    price                  NUMBER(10,2) ,
    discount               NUMBER(10,2) );
TYPE sqe_PRICE_tbl
IS
  TABLE OF SQE_PRICE_REC INDEX BY BINARY_INTEGER;
  sqe_PRICE_tbl_TE sqe_PRICE_tbl ;
BEGIN
  /*FOR j in in_bcm_export_tbl.FIRST..in_bcm_export_tbl.LAST
  LOOP
  IF (in_bcm_export_tbl(j).o_site_tbl is not null)
  THEN*/
  FOR j IN in_site_tbl.FIRST..in_site_tbl.LAST
  LOOP
    --  in_quoteid :=  in_bcm_export_tbl(j).o_quoteid;
    -- in_quoteheaderid := in_bcm_export_tbl(j).o_quoteheaderid;
    in_site_id                     := in_site_tbl(j).o_site_id;
    V_SITE_STATUS                  := NULL ;
    V_SITE_ID                      := NULL ;
    V_SITE                         := NULL ;
    V_COUNTRY                      := NULL ;
    V_CITY                         := NULL ;
    V_RESILIENCE_TYPE              := NULL ;
    V_PRIMARY_CONNECTION_STATUS    := NULL ;
    V_PRIMARY_REACH_IN_NNI_PORT    := NULL ;
    V_PRIM_RCH_IN_NNI_PRT_NAME     := NULL ;
    V_PRIMARY_TARRIF_ZONE          := NULL ;
    V_PRIMARY_GPoP                 := NULL ;
    V_PRIMARY_APoP                 := NULL ;
    V_PRIMARY_TRAFFIC_TYPE         := NULL ;
    V_PRIMARY_ACCESS_TECHNOLOGY    := NULL ;
    V_PRIMARY_N_E1_T1              := NULL ;
    V_PRIMARY_ACCESS_SPEED         := NULL ;
    V_PRIMARY_PORT_SPEED           := NULL ;
    V_PRIMARY_DSL_SUPPLIER_ID      := NULL ;
    V_PRIMARY_DSL_SUPP_OFFER_NAME  := NULL ;
    V_PRIMARY_DSL_TYPE             := NULL ;
    V_PRIMARY_DSL_CONTENTION       := NULL ;
    V_PRIMARY_DSL_ACCESS_UPSTREAM  := NULL ;
    V_PRIM_DSL_ACCESS_DWNSTRM      := NULL ;
    V_PRIMARY_DSL_PORT_SPEED       := NULL ;
    V_PRIM_DSL_LCL_LOOP_ACES       := NULL ;
    V_PRIM_hVPN_ACES_PRD_TYPE      := NULL ;
    V_PRIM_hVPN_ACES_SRVCE_ID      := NULL ;
    V_PRIM_hVPN_PRT_DWNSTRM_SPD    := NULL ;
    V_PRIM_hVPN_PRT_UPSTRM_SPD     := NULL ;
    V_PRIM_hVPN_LCL_LOOP_ACES      := NULL ;
    V_PRIMARY_TOTAL_AF             := NULL ;
    V_PRIMARY_AF_MULTIMEDIA        := NULL ;
    V_PRIMARY_EF_SPEED             := NULL ;
    V_PRIMARY_DE_SPEED             := NULL ;
    V_NO_OF_ADDI_VPN_PRMRY_PORT    := NULL ;
    V_NO_OFBGP_PRFXES_PRM_PRT      := NULL ;
    V_PRIMARY_CPE_PROGRAM_NAME     := NULL ;
    V_PRIMARY_CPE_INSTALL_EUP      := NULL ;
    V_PRIMARY_CPE_INST_EUP_DISCT   := NULL ;
    V_PRIM_CPE_MNTHL_RNTL_EUP      := NULL ;
    V_PRIM_CPE_MTHLY_RNT_EUP_DIS   := NULL ;
    V_PRIMARY_CPE_MONT_MAINT_EUP   := NULL ;
    V_PRIMARY_CPE_INSTALL_COST     := NULL ;
    V_PRIM_CPE_MNTH_RECUR_CST      := NULL ;
    V_PRIMARY_CPE_COST_CURRENCY    :='USD' ;
    V_PRIMARY_CPE_PRICING_STATUS   := NULL ;
    V_PRIMARY_ACCESS_INSTALL_EUP   := NULL ;
    V_PRIM_ACES_INSTL_EUP_DIS      := NULL ;
    V_PRIM_ACES_MNTHLY_RNT_EUP     := NULL ;
    V_PRIM_ACES_MNTH_RNT_EUP_DIS   := NULL ;
    V_PRIMARY_ACCESS_INSTALL_COST  := NULL ;
    V_PRIMARY_ACCESS_MONTHLY_COST  := NULL ;
    V_PRIMARY_ACCESS_COST_CURRENCY := NULL ;
    V_PRIM_ACES_PRICING_STATS      := NULL ;
    V_PRIMARY_PORT_INSTALL_EUP     := NULL ;
    V_PRIM_PRT_INSTL_EUP_DIS       := NULL ;
    V_PRIM_PRT_RECNFG_ONE_TIM      := NULL ;
    V_PRIM_PRT_RECNFIG_OT_DIS      := NULL ;
    V_PRIMARY_DSL_UPGRD_DWNGRD_OT  := NULL ;
    V_PRIM_DSL_UP_DWN_GRD_OT_DIS   := NULL ;
    V_PRIMARY_PORT_MNTHLY_RNTL_EUP := NULL ;
    V_PRM_PRT_MNTH_RNTL_EUP_DIS    := NULL ;
    V_PRIMARY_LLA_INSTALL_EUP      := NULL ;
    V_PRIMARY_LLA_INSTALL_EUP_DISC := NULL ;
    V_PRIMARY_LLA_MNTHL_RENTAL_EUP := NULL ;
    V_PRIM_LLA_MNTH_RNT_EUP_DIS    := NULL ;
    V_PRIMARY_LLA_INSTALL_COST     := NULL ;
    V_PRIMARY_LLA_MONTHLY_COST     := NULL ;
    V_PRIMARY_LLA_COST_CURRENCY    := NULL ;
    V_PRIMARY_mVPN_ONE_TIME_EUP    := NULL ;
    V_PRI_mVPN_MNTRNT_EUP_PRPRT    := NULL ;
    V_PRI_mVPN_MNTRN_EU_PRPRT_DIS  := NULL ;
    V_PR_mVP_MNTRN_EUP_TTAD_VPN    := NULL ;
    V_PR_mVPN_MNRN_NT_EUP_ADVPN    := NULL ;
    V_PRIM_BGP_PRFX_ONETME_EUP     := NULL ;
    V_PRIM_BGP_PRFX_OT_EUP_DIS     := NULL ;
    V_PRI_BGP_PRFX_MNT_RNT_EUP     := NULL ;
    V_PR_BGP_PRFX_MNT_RNT_EUP_DIS  := NULL ;--V_PRIMARY
    V_SECONDRY_CONNECTION_STATUS   := NULL ;
    V_SECONDRY_NNI_PORT            := NULL ;
    V_SCNDRY_REACH_IN_NNI_PRT_NAME := NULL ;
    V_SECONDRY_TARRIF_ZONE         := NULL ;
    V_SECONDRY_GPoP                := NULL ;
    V_SECONDRY_APoP                := NULL ;
    V_SECONDRY_TRAFFIC_TYPE        := NULL ;
    V_SECONDRY_ACCESS_TYPE         := NULL ;
    V_SECONDRY_N_E1_T1             := NULL ;
    V_SECONDRY_ACCESS_SPEED        := NULL ;
    V_SECONDRY_PORT_SPEED          := NULL ;
    V_SECONDRY_DSL_SUPPLIER_ID     := NULL ;
    V_SECONDRY_DSL_SUPP_OFFR_NAME  := NULL ;
    V_SECONDRY_DSL_TYPE            := NULL ;
    V_SECONDRY_DSL_CONTENTION      := NULL ;
    V_SECONDRY_DSL_ACCESS_UPSTREAM := NULL ;
    V_SEC_DSL_ACES_DWNSTRM         := NULL ;
    V_SECONDRY_DSL_PORT_SPEED      := NULL ;
    V_SEC_DSL_LCAL_LP_ACES         := NULL ;
    V_SEC_hVPN_ACES_PRD_TYP        := NULL ;
    V_SECND_hVPN_ACCESS_SERVICE_ID := NULL ;
    V_SECND_hVPN_PRT_DWNSTRM_SPEED := NULL ;
    V_SEC_hVPN_PRT_UPSTRM_SPD      := NULL ;
    V_SECND_hVPN_LOCAL_LOOP_ACCESS := NULL ;
    V_SECONDRY_TOTAL_AF            := NULL ;
    V_SECONDRY_AF_MULTIMEDIA       := NULL ;
    V_SECONDRY_EF_SPEED            := NULL ;
    V_SECONDRY_DE_SPEED            := NULL ;--error2
    V_NO_OF_ADDI_VPN_SCNDRY_PORT   := NULL ;
    V_NO_OF_BGP_PRFXE_SCDRY_PRT    := NULL ;
    V_SECONDRY_CPE_PROGRAM_NAME    := NULL ;
    V_SECONDRY_CPE_INSTALL_EUP     := NULL ;
    V_SECONDRY_CPE_INST_EUP_DISCT  := NULL ;--error1
    V_SECND_CPE_MONTHLY_RENTAL_EUP := NULL ;
    V_SECND_CPE_MTHLY_RNT_EUP_DISC := NULL ;
    V_SECONDRY_CPE_MONT_MAINT_EUP  := NULL ;
    V_SECONDRY_CPE_INSTALL_COST    := NULL ;
    V_SECND_CPE_MONTH_RECURR_COST  := NULL ;
    V_SECONDRY_CPE_COST_CURRENCY   :='USD';
    V_SECONDRY_CPE_PRICING_STATUS  := NULL ;
    V_SECONDRY_ACCESS_INSTALL_EUP  := NULL ;
    V_SEC_ACES_INSTL_EUP_DIS       := NULL ;
    V_SECND_ACCESS_MNTHLY_RENT_EUP := NULL ;
    V_SEC_ACES_MNT_RNT_EUP_DIS     := NULL ;
    V_SECONDRY_ACCESS_INSTALL_COST := NULL ;
    V_SECONDRY_ACCESS_MONTHLY_COST := NULL ;
    V_SEC_ACES_CST_CURR            := NULL ;
    V_SEC_ACCES_PRIC_STAT          := NULL ;
    V_SECONDRY_PORT_INSTALL_EUP    := NULL ;
    V_SEC_PRT_INSTL_EUP_DIS        := NULL ;
    V_SECNDRY_PRT_RECNFIG_OT       := NULL ;
    V_SEC_PRT_RECNFIG_OT_DIS       := NULL ;
    V_SECONDRY_DSL_UPGRD_DWNGRD_OT := NULL ;
    V_SECND_DSL_UP_DWN_GRD_OT_DISC := NULL ;
    V_SEC_PRT_MNTH_RNT_EUP         := NULL ;
    V_SECND_PORT_MNTH_RNTL_EUP_DIS := NULL ;
    V_SECONDRY_LLA_INSTALL_EUP     := NULL ;
    V_SEC_LLA_INSTL_EUP_DIS        := NULL ;
    V_SEC_LLA_MNT_RNTL_EUP         := NULL ;
    V_SEC_LLA_MNT_RNT_EUP_DIS      := NULL ;
    V_SECONDRY_LLA_INSTALL_COST    := NULL ;
    V_SECONDRY_LLA_MONTHLY_COST    := NULL ;
    V_SECONDRY_LLA_COST_CURRENCY   := NULL ;
    V_SECONDRY_mVPN_ONE_TIME_EUP   := NULL ;
    V_SECND_mVPN_ONE_TIME_NET_EUP  := NULL ;
    V_SEC_mVPN_MNTRNT_EUP_PERRT    := NULL ;
    V_SE_mVPN_MNRNT_EUP_PERRT_DIS  := NULL ;
    V_SE_mVP_MNRNT_EUP_TT_AD_VPN   := NULL ;
    V_SE_mVPN_MNRNT_NT_EUP_ADVPN   := NULL ;
    V_SECONDRY_BGP_PRFX_OT_EUP     := NULL ;
    V_SEC_BGP_PRFX_OT_EUP_DIS      := NULL ;
    V_SEC_BGP_PRFX_MNT_RNT_EUP     := NULL ;
    V_SEC_BGP_PRFX_MN_RN_EUP_DIS   := NULL ;
    V_CHANGE_MANAGEMENT            := NULL ;
    V_CHANGE_MANAGEMENT_DISCOUNT   := NULL ;
    V_CHANGE_MANAGEMENT_LIGHT_EUP  := NULL ;
    V_CHNGE_MGMT_LGHT_EUP_DIS      := NULL ;
    V_PROACTIVE_CE_MONITORINGS_EUP := NULL ;
    V_PRACTVE_CE_MNTR_EUP_DIS      := NULL ;
    V_SNMP_RDN_ACES_PRM_CPET_EUP   := NULL ;
    V_SNMP_RD_ACE_PR_CPT_EUP_DIS   := NULL ;
    V_OOH_TRNUP_MN_CPE_OT_EUP      := NULL ;
    V_OOH_TRNUP_MN_CPE_OT_EUP_DIS  := NULL ;
    V_SNMP_RDN_ACE_SEC_CPET_EUP    := NULL ;
    V_SNMP_RD_ACE_SE_CPET_EUP_DIS  := NULL ;
    V_OOH_TRNUP_SEC_CPE_OT_EUP     := NULL ;
    V_OOH_TRNUP_SEC_CPE_OT_EUP_DIS := NULL ;
    V_PR_AF1_CIPR                  := NULL ;
    V_PR_AF2_CIPR                  := NULL ;
    V_PR_AF3_CIPR                  := NULL ;
    V_PR_AF4_CIPR                  := NULL ;
    V_SE_AF1_CIPR                  := NULL ;
    V_SE_AF2_CIPR                  := NULL ;
    V_SE_AF3_CIPR                  := NULL ;
    V_SE_AF4_CIPR                  := NULL ;
    v_rowcount                     := NULL ;
    v_PRIMARY_ACCESS_SPEED_text    := NULL ;
    v_SEC_ACCESS_SPEED_text        := NULL ;
    V_PRIMARY_GPoP_attribute       := NULL ;
    V_PRIMARY_GPoP_accessqref      := NULL ;
    V_SECONDRY_GPoP_attribute      := NULL ;
    V_SECONDRY_GPoP_accessqref     := NULL ;
    v_primary_access_type          := NULL ;
    V_SEC_ACCESS_TYPE              := NULL ;
    V_Prim_DSL_hVPN_acces_upstream := NULL ;
    V_prim_DSL_hVPN_acces_dwnstrm  := NULL ;
    V_sec_DSL_hVPN_acces_upstrm    := NULL ;
    V_sec_DSL_hVPN_acces_dwnstrm   := NULL ;
    V_prim_access_speed            := NULL ;
    V_sec_access_speed             := NULL ;
    V_BGP_PRIM_ONETIME_COST        := NULL ;
    v_BGP_PRIM_RECUR_COST          := NULL ;
    v_BGP_SEC_ONETIME_COST         := NULL ;
    v_BGP_SEC_RECURRING_COST       := NULL ;
    V_PRIMARY_MVPN_NET_EUP         := NULL ;
    v_HELPDESK_TYPE                := NULL ;
    v_HELPDESK_ONETIME_EUP         := NULL ;
    v_Helpdesk_One_Time_Dis        := NULL ;
    v_Helpdesk_Mon_Recur_EUP       := NULL ;
    v_Helpdesk_Mon_Recur_Dis       := NULL ;
    v_Sec_cpe_Chg_Mgmt_Mnth_EUP    := NULL ;
    v_Sec_cpe_Chg_Mgmt_Mnth_Dis    := NULL ;
    v_Sec_cpe_Pro_CE_Mntr_Mnth_EUP := NULL ;
    v_Sec_cpe_Pro_CE_Mntr_Mnth_Dis := NULL ;
    v_hvpn_a                       := NULL ;
    v_hvpn_b                       := NULL ;
    V_Prim_cpe_Ins_PTP             := NULL ;
    V_Prim_cpe_mon_Rntal_PTP       := NULL ;
    V_Prim_accss_ins_PTP           := NULL ;
    V_Prim_accss_Mon_rntal_PTP     := NULL ;
    V_Prim_port_Ins_PTP            := NULL ;
    V_Prim_port_reconfig_One_time  := NULL ;
    V_Prim_DSL_Up_Down_One_time    := NULL ;
    V_Prim_port_Mon_rntal_PTP      := NULL ;
    V_Prim_LLA_Ins_PTP             := NULL ;
    V_Prim_LLA_Mon_rntal_PTP       := NULL ;
    V_Prim_mVPN_One_Time_PTP       := NULL ;
    V_Prim_mVPN_One_Time_Net_PTP   := NULL ;
    V_Prim_mVPN_Mon_Rntal_PTP_Port := NULL ;
    V_Pr_mVPN_MnRnt_PTP_taddVPN    := NULL ;
    V_Pr_mVPN_Mnrnt_nt_PTP_tVPN    := NULL ;
    V_Pr_BGP_Prefx_One_Time_PTP    := NULL ;
    V_Prim_BGP_Prefx_Monrnt_PTP    := NULL ;
    V_Sec_CPE_Ins_PTP              := NULL ;
    V_Sec_CPE_Mon_Rntal_PTP        := NULL ;
    V_Sec_accss_Ins_PTP            := NULL ;
    V_Sec_accss_mon_rntal_PTP      := NULL ;
    V_Sec_port_Ins_PTP             := NULL ;
    V_Sec_port_reconfig_One_time   := NULL ;
    V_Sec_DSL_Up_Down_One_time     := NULL ;
    V_Sec_Port_mon_rntal_PTP       := NULL ;
    V_Sec_LLA_Ins_PTP              := NULL ;
    V_Sec_LLA_Mon_rntal_PTP        := NULL ;
    V_Sec_mVPN_One_Time_PTP        := NULL ;
    V_Sec_mVPN_One_Time_Net_PTP    := NULL ;
    V_Se_mVPN_mon_rntl_PTP_Port    := NULL ;
    V_Sec_mVPN_mon_rnt_PTP_VPN     := NULL ;
    V_Se_mVPN_mn_rnt_Nt_PTP_VPN    := NULL ;
    V_Sec_BGP_Prfx_One_Time_PTP    := NULL ;
    V_Se_BGP_Prefx_mon_rntl_PTP    := NULL ;
    V_Chnge_Mgmt_PTP               := NULL ;
    V_Proactv_CE_Monitoring_PTP    := NULL ;
    V_SNMP_RdAcs_Pr_CPE_OnTm_PTP   := NULL ;
    V_OOH_trn_up_Mn_CPE_OneTm_PTP  := NULL ;
    V_SNMP_RdAcs_Se_CPE_OnTm_PTP   := NULL ;
    V_OOH_trn_up_Se_CPE_OnTm_PTP   := NULL ;
    V_Helpdesk_One_Time_PTP        := NULL ;
    V_Helpdesk_Mon_Recurring_PTP   := NULL ;
    V_Sec_CPE_Chnge_Mgmt_PTP       := NULL ;
    V_Se_CPE_Practv_CE_Mntr_PTP    := NULL ;

    -- Added on 4/8/2011 as part of R16
    vPrim_cpe_Ins_PTP_DS             := NULL ;
    vPrim_cpe_mon_Rntal_PTP_DS       := NULL ;
    vprim_accss_ins_PTP_DS           := NULL ;
    vPrim_accss_Mon_rntal_PTP_DS     := NULL ;
    vPrim_port_Ins_PTP_DS            := NULL ;
    vPrim_port_reconfig_onetime_DS   := NULL ;
    vPrim_DSL_Up_Down_One_time_DS    := NULL ;
    vPrim_port_Mon_rntal_PTP_DS      := NULL ;
    vPrim_LLA_Ins_PTP_DS             := NULL ;
    vPrim_LLA_Mon_rntal_PTP_DS       := NULL ;
    vPrim_mVPN_Mon_Rnt_PTP_Port_DS   := NULL ;
    vPr_BGP_Prefx_One_Time_PTP_DS    := NULL ;
    vPrim_BGP_Prefx_Mon_rnt_PTP_DS   := NULL ;
    vSec_CPE_Ins_PTP_DS              := NULL ;
    vSec_CPE_Mon_Rntal_PTP_DS        := NULL ;
    vSec_accss_Ins_PTP_DS            := NULL ;
    vSec_accss_mon_rntal_PTP_DS      := NULL ;
    vSec_port_Ins_PTP_DS             := NULL ;
    vSec_port_reconfig_One_time_DS   := NULL ;
    vSec_DSL_Up_Down_One_time_DS     := NULL ;
    vSec_Port_mon_rntal_PTP_DS       := NULL ;
    vSec_LLA_Ins_PTP_DS              := NULL ;
    vSec_LLA_Mon_rntal_PTP_DS        := NULL ;
    vSec_mVPN_mon_rnt_PTP_Port_DS    := NULL ;
    vSec_BGP_Prefx_OneTime_PTP_DS    := NULL ;
    vSec_BGP_Prefx_mon_rnt_PTP_DS    := NULL ;
    vChnge_Mgmt_PTP_DS               := NULL ;
    vProactive_CE_Monitor_PTP_DS     := NULL ;
    vSNMP_RdAcsPr_CPE_OneTm_PTP_DS   := NULL ;
    vOOH_trnupMn_CPE_OneTm_PTP_DS    := NULL ;
    vSNMP_RdAcsSe_CPE_OneTm_PTP_DS   := NULL ;
    vOOH_trnupSe_CPE_OneTm_PTP_DS    := NULL ;
    vHelpdesk_One_Time_PTP_DS        := NULL ;
    vHelpdesk_Mon_Recurring_PTP_DS   := NULL ;
    vSec_CPE_Chnge_Mgmt_PTP_DS       := NULL ;
    vSec_CPE_Proact_CEMntrg_PTP_DS   := NULL ;
    -- Added on 4/8/2011 as part of R16
       --Added on 11th August 11  START
    V_Pri_Acc_Optm_Rental_Cost_Y2  := NULL ;
    V_Pri_Acc_Optm_Rental_Cost_Y3  := NULL ;
    V_Pri_Acc_Optm_Rental_Cost_Y4  := NULL ;
    V_Pri_Acc_Optm_Rental_Cost_Y5  := NULL ;
    V_Sec_Acc_Optm_Rental_Cost_Y2  := NULL ;
    V_Sec_Acc_Optm_Rental_Cost_Y3  := NULL ;
    V_Sec_Acc_Optm_Rental_Cost_Y4  := NULL ;
    V_Sec_Acc_Optm_Rental_Cost_Y5  := NULL ;
    V_Pri_Workflow_Status := NULL  ;
    V_Sec_Workflow_Status := NULL  ;
    --Added on 11th August 11  END

    BEGIN
      SELECT DISTINCT S.name,
        cu.name,
        ad.city
      INTO v_site,
        v_country,
        V_CITY
      FROM quote q
      LEFT OUTER JOIN customer c
      ON c.customer_id = q.customer_id
      LEFT OUTER JOIN quote_header qh
      ON q.quote_id = qh.quote_id
      LEFT OUTER JOIN order_header oh
      ON qh.quote_header_id = oh.quote_header_id
      LEFT OUTER JOIN site s
      ON c.customer_id = s.customer_id
        --      AND s.main_site_flag = 'Y'
      LEFT OUTER JOIN address ad
      ON ad.address_id = s.address_id
      LEFT OUTER JOIN country cu
      ON ad.country_id       = cu.country_id
      WHERE q.quote_id       = in_quoteid
      AND s.site_id          = in_site_id;
    EXCEPTION
    WHEN NO_DATA_FOUND THEN
      NULL;
    END;
    SELECT DISTINCT am.sqe_display_text ,
      ld.value BULK COLLECT
    INTO sqe_display_tbl_TE
    FROM quote q
    LEFT OUTER JOIN quote_header qh
    ON q.quote_id = qh.quote_id
    LEFT OUTER JOIN quote_site qs
    ON qh.quote_header_id = qs.quote_header_id
    INNER JOIN site s
    ON qs.site_id = s.site_id
    INNER JOIN line_item lm
    ON s.site_id           = lm.site_id
    AND lm.quote_header_id = in_quoteheaderid
    INNER JOIN line_item_detail ld
    ON lm.line_item_id = ld.line_item_id
    LEFT OUTER JOIN attribute_mapping am
    ON ld.attribute_mapping_id = am.attribute_mapping_id
    LEFT OUTER JOIN price_line_item_detail pd
    ON lm.line_item_id = pd.line_item_id
    LEFT OUTER JOIN price_line_item pl
    ON pd.price_line_item_id = pl.price_line_item_id
    LEFT OUTER JOIN access_qref aq
    ON (pd.external_qref) = UPPER (aq.access_qref)
    LEFT OUTER JOIN cpe_qref cpeq
    ON qs.quote_site_id    = cpeq.quote_site_id
    WHERE q.quote_id       = in_quoteid
    AND qh.quote_header_id = in_quoteheaderid
    AND s.site_id          = in_site_id
      -- and upper(sqe_display_text) like '%VALUE OF N%'
    AND upper(lm.fallback_type) = 'PRIMARY'
    AND (qs.active              = 'Y')
    AND (lm.active              = 'Y')
    AND (ld.active              = 'Y')
    AND ( pd.active             = 'Y'
    OR pd.active               IS NULL)
    ORDER BY am.sqe_display_text;
    IF sqe_display_tbl_TE.count!=0 THEN
      FOR I                    IN sqe_display_tbl_TE.FIRST..sqe_display_tbl_TE.LAST
      LOOP
        CASE
        WHEN sqe_display_tbl_TE(i).sqe_display_TXT1 = 'GPoP' THEN
          V_PRIMARY_GPoP_attribute                 := sqe_display_tbl_TE(i).VALUE1;
        WHEN sqe_display_tbl_TE(i).sqe_display_TXT1 = 'APoP' THEN
          v_PRIMARY_APoP                           := sqe_display_tbl_TE(i).VALUE1;
        WHEN sqe_display_tbl_TE(i).sqe_display_TXT1 = 'Port Pricing Type' THEN
          v_PRIMARY_TRAFFIC_TYPE                   := sqe_display_tbl_TE(i).VALUE1;
        WHEN sqe_display_tbl_TE(i).sqe_display_TXT1 = 'Access Technology' THEN
          v_PRIMARY_ACCESS_TECHNOLOGY              := sqe_display_tbl_TE(i).VALUE1;
          IF v_PRIMARY_ACCESS_TECHNOLOGY            ='DSL' THEN
            V_PRIMARY_DSL_SUPPLIER_ID              := V_PRIMARY_DSL_SUPPLIER_ID ;
            V_PRIM_DSL_ACCESS_DWNSTRM              := SUBSTR(v_PRIMARY_ACCESS_SPEED_text,1,instr(v_PRIMARY_ACCESS_SPEED_text,'K')-1);
            v_PRIMARY_DSL_ACCESS_UPSTREAM          := SUBSTR(v_PRIMARY_ACCESS_SPEED_text, (instr(v_PRIMARY_ACCESS_SPEED_text,'/')+1),instr(v_PRIMARY_ACCESS_SPEED_text,'K')-1);
            V_PRIM_DSL_ACCESS_DWNSTRM              := REPLACE(V_PRIM_DSL_ACCESS_DWNSTRM,'K');
            v_PRIMARY_DSL_ACCESS_UPSTREAM          := REPLACE(v_PRIMARY_DSL_ACCESS_UPSTREAM,'K');
            V_Prim_DSL_hVPN_acces_upstream         := v_PRIMARY_DSL_ACCESS_UPSTREAM;
            V_prim_DSL_hVPN_acces_dwnstrm          := V_PRIM_DSL_ACCESS_DWNSTRM;
       /*   ELSE
            V_PRIMARY_DSL_SUPPLIER_ID := NULL; */
          END IF;
        WHEN sqe_display_tbl_TE(i).sqe_display_TXT1 = 'Value of N' THEN
          v_PRIMARY_N_E1_T1                        := sqe_display_tbl_TE(i).VALUE1;
        WHEN sqe_display_tbl_TE(i).sqe_display_TXT1 = 'Access Speed' THEN
          v_PRIMARY_ACCESS_SPEED                   := sqe_display_tbl_TE(i).VALUE1;
        WHEN sqe_display_tbl_TE(i).sqe_display_TXT1 = 'Access Speed Text Value'
          /*'Access Speed'*/
          THEN
          v_PRIMARY_ACCESS_SPEED_text           := sqe_display_tbl_TE(i).VALUE1;
          IF v_PRIMARY_ACCESS_SPEED             IS NULL OR UPPER(v_PRIMARY_ACCESS_SPEED) ='NULL' THEN
            v_PRIMARY_ACCESS_SPEED              := sqe_display_tbl_TE(i).VALUE1;
            IF instr(v_PRIMARY_ACCESS_SPEED,'M') > 0 THEN
              v_PRIMARY_ACCESS_SPEED            := SUBSTR(v_PRIMARY_ACCESS_SPEED,1,instr(v_PRIMARY_ACCESS_SPEED,'M')-1)*1024;
              IF v_PRIMARY_ACCESS_SPEED         IS NULL THEN
                v_PRIMARY_ACCESS_SPEED          := 1000;
              END IF;
            END IF;
            IF instr(v_PRIMARY_ACCESS_SPEED,'K') > 0 THEN
              v_PRIMARY_ACCESS_SPEED            := SUBSTR(v_PRIMARY_ACCESS_SPEED,1,instr(v_PRIMARY_ACCESS_SPEED,'K')-1)*1000;
              IF v_PRIMARY_ACCESS_SPEED         IS NULL THEN
                v_PRIMARY_ACCESS_SPEED          := 1000;
              END IF;
              END IF;
          END IF;
        WHEN sqe_display_tbl_TE(i).sqe_display_TXT1 ='Port Speed' THEN
          v_PRIMARY_PORT_SPEED                     := sqe_display_tbl_TE(i).VALUE1;
          /* IF v_PRIMARY_ACCESS_TECHNOLOGY            ='DSL' THEN
          V_PRIM_DSL_ACCESS_DWNSTRM              :=
          SUBSTR(sqe_display_tbl_TE(i).VALUE1,1,instr(sqe_display_tbl_TE(i).VALUE1,'/')-1);
          v_PRIMARY_DSL_ACCESS_UPSTREAM          :=
          SUBSTR(sqe_display_tbl_TE(i).VALUE1,instr(sqe_display_tbl_TE(i).VALUE1,'/')  +1 );
          els*/
          IF v_PRIMARY_ACCESS_TECHNOLOGY              ='HVPN' THEN
            V_PRIM_hVPN_PRT_DWNSTRM_SPD              := SUBSTR(sqe_display_tbl_TE(i).VALUE1,1,instr(sqe_display_tbl_TE(i).VALUE1,'/')-1);
            V_PRIM_hVPN_PRT_UPSTRM_SPD               := SUBSTR(sqe_display_tbl_TE(i).VALUE1,instr(sqe_display_tbl_TE(i).VALUE1,'/')  +1 );
            IF instr(V_PRIM_hVPN_PRT_DWNSTRM_SPD,'M') > 0 THEN
              V_PRIM_hVPN_PRT_DWNSTRM_SPD            := SUBSTR(V_PRIM_hVPN_PRT_DWNSTRM_SPD,1,instr(V_PRIM_hVPN_PRT_DWNSTRM_SPD,'M')-1)*1000;
            END IF;
            IF instr(V_PRIM_hVPN_PRT_UPSTRM_SPD,'M') > 0 THEN
              V_PRIM_hVPN_PRT_UPSTRM_SPD            := SUBSTR(V_PRIM_hVPN_PRT_UPSTRM_SPD,1,instr(V_PRIM_hVPN_PRT_UPSTRM_SPD,'M')-1)*1000;
            END IF;
            V_PRIM_hVPN_PRT_DWNSTRM_SPD := REPLACE(V_PRIM_hVPN_PRT_DWNSTRM_SPD,'K');
            V_PRIM_hVPN_PRT_UPSTRM_SPD  := REPLACE(V_PRIM_hVPN_PRT_UPSTRM_SPD ,'K');
          END IF;
        WHEN sqe_display_tbl_TE(i).sqe_display_TXT1 ='Offer Name (Supplier Product Name)' THEN
          v_PRIMARY_DSL_SUPP_OFFER_NAME            := sqe_display_tbl_TE(i).VALUE1;
        WHEN sqe_display_tbl_TE(i).sqe_display_TXT1 ='Service Variant'
          /*'DSL Type '*/
          THEN
          v_PRIMARY_DSL_TYPE                       := sqe_display_tbl_TE(i).VALUE1;
        WHEN sqe_display_tbl_TE(i).sqe_display_TXT1 ='Contention Ratio' THEN
          v_PRIMARY_DSL_CONTENTION                 := SUBSTR(sqe_display_tbl_TE(i).VALUE1,instr(sqe_display_tbl_TE(i).VALUE1,':')+1);
        WHEN sqe_display_tbl_TE(i).sqe_display_TXT1 ='Local Loop' THEN
          V_PRIM_DSL_LCL_LOOP_ACES                 := sqe_display_tbl_TE(i).VALUE1;
          IF upper(V_PRIM_DSL_LCL_LOOP_ACES)        = 'YES' THEN
            V_PRIM_DSL_LCL_LOOP_ACES               := 'Y';
          Elsif UPPER( V_PRIM_DSL_LCL_LOOP_ACES)    = 'NO' THEN
            V_PRIM_DSL_LCL_LOOP_ACES               := 'N';
          END IF;
        WHEN sqe_display_tbl_TE(i).sqe_display_TXT1 ='AF Multimedia' THEN
          v_PRIMARY_AF_MULTIMEDIA                  := sqe_display_tbl_TE(i).VALUE1;
        WHEN sqe_display_tbl_TE(i).sqe_display_TXT1 ='EF CIPR' THEN
          v_PRIMARY_EF_SPEED                       := sqe_display_tbl_TE(i).VALUE1;
        WHEN sqe_display_tbl_TE(i).sqe_display_TXT1 ='DE CIPR' THEN
          v_PRIMARY_DE_SPEED                       := sqe_display_tbl_TE(i).VALUE1;
          IF UPPER(V_PRIMARY_DE_SPEED) LIKE '%PLEASE%SELECT%' THEN
            V_PRIMARY_DE_SPEED := NULL;
          END IF;
        WHEN sqe_display_tbl_TE(i).sqe_display_TXT1 ='Total No. of VPNs' THEN
          IF sqe_display_tbl_TE(i).VALUE1           >1 THEN
            v_NO_OF_ADDI_VPN_PRMRY_PORT            := sqe_display_tbl_TE(i).VALUE1 ;
          END IF;
        WHEN sqe_display_tbl_TE(i).sqe_display_TXT1 ='BGP Prefix Range' THEN
          V_NO_OFBGP_PRFXES_PRM_PRT                := sqe_display_tbl_TE(i).VALUE1;
          IF UPPER(V_NO_OFBGP_PRFXES_PRM_PRT) LIKE '%NULL' THEN
            V_NO_OFBGP_PRFXES_PRM_PRT := NULL;
          END IF;
        WHEN sqe_display_tbl_TE(i).sqe_display_TXT1 ='AF1 CIPR' THEN
          V_PR_AF1_CIPR                            := sqe_display_tbl_TE(i).VALUE1;
        WHEN sqe_display_tbl_TE(i).sqe_display_TXT1 ='AF2 CIPR' THEN
          V_PR_AF2_CIPR                            := sqe_display_tbl_TE(i).VALUE1;
        WHEN sqe_display_tbl_TE(i).sqe_display_TXT1 ='AF3 CIPR' THEN
          V_PR_AF3_CIPR                            := sqe_display_tbl_TE(i).VALUE1;
        WHEN sqe_display_tbl_TE(i).sqe_display_TXT1 ='AF4 CIPR' THEN
          V_PR_AF4_CIPR                            := sqe_display_tbl_TE(i).VALUE1;
        WHEN sqe_display_tbl_TE(i).sqe_display_TXT1 ='Resiliency' THEN
          V_RESILIENCE_TYPE                        := sqe_display_tbl_TE(i).VALUE1;
            V_RESILIENCE_TYPE                        := sqe_display_tbl_TE(i).VALUE1;
              IF upper(V_RESILIENCE_TYPE) = 'STANDARD' THEN
                  V_SECONDRY_CPE_COST_CURRENCY:= NULL;
              END IF;
        WHEN sqe_display_tbl_TE(i).sqe_display_TXT1 ='NNI Flag' THEN
          V_PRIMARY_REACH_IN_NNI_PORT              := sqe_display_tbl_TE(i).VALUE1;
          IF upper(V_PRIMARY_REACH_IN_NNI_PORT)     = 'YES' THEN
            V_PRIMARY_REACH_IN_NNI_PORT            := 'Y';
          Elsif UPPER( V_PRIMARY_REACH_IN_NNI_PORT) = 'NO' THEN
            V_PRIMARY_REACH_IN_NNI_PORT            := 'N';
          END IF;
          IF UPPER(V_PRIMARY_REACH_IN_NNI_PORT) ='Y' THEN
            V_PRIM_RCH_IN_NNI_PRT_NAME         := V_PRIMARY_DSL_SUPPLIER_ID ;
            V_PRIMARY_DSL_SUPPLIER_ID          := NULL;
          END IF;
        WHEN sqe_display_tbl_TE(i).sqe_display_TXT1 ='Access Supplier  ' THEN
          V_PRIMARY_DSL_SUPPLIER_ID                := sqe_display_tbl_TE(i).VALUE1;
        WHEN sqe_display_tbl_TE(i).sqe_display_TXT1 ='Commercial Marketing Speed' THEN
          V_PRIMARY_DSL_PORT_SPEED                 := sqe_display_tbl_TE(i).VALUE1;
        WHEN sqe_display_tbl_TE(i).sqe_display_TXT1 = 'Access Type' THEN
          v_primary_access_type                    := sqe_display_tbl_TE(i).VALUE1;
          IF v_PRIMARY_ACCESS_TECHNOLOGY            ='DSL' AND v_primary_access_type ='SDSL' THEN
            V_PRIM_DSL_ACCESS_DWNSTRM              := v_PRIMARY_ACCESS_SPEED_text;
            v_PRIMARY_DSL_ACCESS_UPSTREAM          := v_PRIMARY_ACCESS_SPEED_text;
            V_PRIM_DSL_ACCESS_DWNSTRM              := REPLACE(V_PRIM_DSL_ACCESS_DWNSTRM,'K');
            v_PRIMARY_DSL_ACCESS_UPSTREAM          := REPLACE(v_PRIMARY_DSL_ACCESS_UPSTREAM,'K');
            V_prim_DSL_hVPN_acces_dwnstrm          := V_PRIM_DSL_ACCESS_DWNSTRM;
            V_Prim_DSL_hVPN_acces_upstream         := v_PRIMARY_DSL_ACCESS_UPSTREAM;
          END IF;
          IF upper(V_PRIMARY_ACCESS_TECHNOLOGY) = 'HVPN' THEN
            -- V_PRIM_hVPN_ACES_PRD_TYPE      :=V_PRIM_hVPN_ACES_PRD_TYPE ;
            IF instr(v_PRIMARY_ACCESS_SPEED_text,'M') > 0 THEN
              v_PRIMARY_ACCESS_SPEED                 := SUBSTR(v_PRIMARY_ACCESS_SPEED_text,1,instr(v_PRIMARY_ACCESS_SPEED_text,'M')-1)*1000;
            END IF;
            IF instr(v_PRIMARY_ACCESS_SPEED_text,'/')      > 0 THEN
              IF instr(v_PRIMARY_ACCESS_SPEED_text,'K')    > 0 THEN
                v_hvpn_a                                  := SUBSTR(v_PRIMARY_ACCESS_SPEED_text,1,instr(v_PRIMARY_ACCESS_SPEED_text,'K')-1);
                v_hvpn_b                                  := SUBSTR(v_PRIMARY_ACCESS_SPEED_text, (instr(v_PRIMARY_ACCESS_SPEED_text,'/')+1),instr(v_PRIMARY_ACCESS_SPEED_text,'K')-1);
              elsif instr(v_PRIMARY_ACCESS_SPEED_text,'M') > 0 THEN
                v_hvpn_a                                  := SUBSTR(v_PRIMARY_ACCESS_SPEED_text,1,instr(v_PRIMARY_ACCESS_SPEED_text,'M')-1) *1000;
                v_hvpn_b                                  := SUBSTR(v_PRIMARY_ACCESS_SPEED_text, (instr(v_PRIMARY_ACCESS_SPEED_text,'/')+1),instr(v_PRIMARY_ACCESS_SPEED_text,'M')-1) * 1000;
              END IF;
            ELSE
              v_hvpn_a := v_PRIMARY_ACCESS_SPEED_text;
              v_hvpn_b := v_PRIMARY_ACCESS_SPEED_text;
            END IF;
            IF instr(v_hvpn_a,'M')    >0 THEN
              v_hvpn_a               := SUBSTR(v_hvpn_a,1,instr(v_hvpn_a,'M')-1)*1000;
            elsif instr(v_hvpn_a,'K') >0 THEN
              v_hvpn_a               := SUBSTR(v_hvpn_a,1,instr(v_hvpn_a,'K')-1);
            END IF;
            IF instr(v_hvpn_b,'M')    >0 THEN
              v_hvpn_b               := SUBSTR(v_hvpn_b,1,instr(v_hvpn_b,'M')-1)*1000;
            elsif instr(v_hvpn_b,'K') >0 THEN
              v_hvpn_b               := SUBSTR(v_hvpn_b,1,instr(v_hvpn_b,'K')-1);
            END IF;
            V_prim_DSL_hVPN_acces_dwnstrm  := v_hvpn_a ;
            V_Prim_DSL_hVPN_acces_upstream :=v_hvpn_b;
          END IF;
        WHEN Upper(sqe_display_tbl_TE(i).sqe_display_TXT1) = Upper('Help Desk Option') THEN
          v_HELPDESK_TYPE                                 := sqe_display_tbl_TE(i).VALUE1;
        ELSE
          NULL;
        END CASE;
      END LOOP;
    END IF;
    IF v_PRIMARY_ACCESS_TECHNOLOGY ='DSL'--AND INSTR(v_PRIMARY_ACCESS_SPEED_text, '/') = 0 THEN
      THEN
      V_PRIMARY_ACCESS_SPEED := NULL;
    END IF;
    IF v_PRIMARY_ACCESS_TECHNOLOGY    ='DSL' AND v_primary_access_type ='DSL ETH' AND upper(V_PRIMARY_DSL_TYPE) IN ('PREMIUM','PLUS') THEN
      V_PRIM_DSL_ACCESS_DWNSTRM      := v_PRIMARY_ACCESS_SPEED_text;
      v_PRIMARY_DSL_ACCESS_UPSTREAM  := v_PRIMARY_ACCESS_SPEED_text;
      V_PRIM_DSL_ACCESS_DWNSTRM      := REPLACE(V_PRIM_DSL_ACCESS_DWNSTRM,'K');
      v_PRIMARY_DSL_ACCESS_UPSTREAM  := REPLACE(v_PRIMARY_DSL_ACCESS_UPSTREAM,'K');
      V_prim_DSL_hVPN_acces_dwnstrm  := V_PRIM_DSL_ACCESS_DWNSTRM;    -- renaming V_PRIM_DSL_ACCESS_DWNSTRM to V_prim_DSL_hVPN_acces_dwnstrm becuase now same variable will hold both DSL and HVPN access speed
      V_Prim_DSL_hVPN_acces_upstream := v_PRIMARY_DSL_ACCESS_UPSTREAM;--renaming  same logic as for downstream
    END IF;
    IF v_PRIMARY_ACCESS_TECHNOLOGY ='HVPN'--AND INSTR(v_PRIMARY_ACCESS_SPEED_text, '/') = 0 THEN
      THEN
      V_PRIMARY_PORT_SPEED := NULL;
    END IF;
    V_PRIMARY_TOTAL_AF := NVL(V_PR_AF1_CIPR ,0) + NVL(V_PR_AF2_CIPR,0) + NVL(V_PR_AF3_CIPR,0)+ NVL(V_PR_AF4_CIPR,0);
    --Strating of Pricing detials for Primary----------
    SELECT DISTINCT pl.price_line_description ,
      pd.price ,
      pd.discount BULK COLLECT
    INTO sqe_PRICE_tbl_TE
    FROM quote q
    LEFT OUTER JOIN quote_header qh
    ON q.quote_id = qh.quote_id
    LEFT OUTER JOIN quote_site qs
    ON qh.quote_header_id = qs.quote_header_id
    INNER JOIN site s
    ON qs.site_id = s.site_id
    INNER JOIN line_item lm
    ON s.site_id           = lm.site_id
    AND lm.quote_header_id =in_quoteheaderid
    INNER JOIN line_item_detail ld
    ON lm.line_item_id = ld.line_item_id
    LEFT OUTER JOIN attribute_mapping am
    ON ld.attribute_mapping_id = am.attribute_mapping_id
      /* LEFT OUTER JOIN edca_interface_mapping edca
      ON edca.attribute_mapping_id = am.attribute_mapping_id*/
    LEFT OUTER JOIN price_line_item_detail pd
    ON lm.line_item_id = pd.line_item_id
    LEFT OUTER JOIN price_line_item pl
    ON pd.price_line_item_id = pl.price_line_item_id
    LEFT OUTER JOIN access_qref aq
    ON (pd.external_qref) = UPPER (aq.access_qref)
    LEFT OUTER JOIN cpe_qref cpeq
    ON qs.quote_site_id         = cpeq.quote_site_id
    WHERE q.quote_id            = in_quoteid
    AND qh.quote_header_id      = in_quoteheaderid
    AND s.site_id               =in_site_id
    AND upper(lm.fallback_type) ='PRIMARY'
    --and upper(pd.ptp_eup)       = 'EUP'
    AND (qs.active              = 'Y')
    AND (lm.active              = 'Y')
    AND (ld.active              = 'Y')
    AND ( pd.active             = 'Y'
    OR pd.active               IS NULL )
    ORDER BY price_line_description DESC;
    IF sqe_display_tbl_TE.count!=0 THEN
      FOR i                    IN sqe_PRICE_tbl_TE.FIRST..sqe_PRICE_tbl_TE.LAST
      LOOP
        CASE
        WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'Router - Primary - Install-non-recurring' THEN
          V_PRIMARY_CPE_INSTALL_EUP                    := sqe_PRICE_tbl_TE(i).price ;
          V_PRIMARY_CPE_INST_EUP_DISCT                 := sqe_PRICE_tbl_TE(i).discount/100;
          IF instr(V_PRIMARY_CPE_INST_EUP_DISCT,'.')    >0 AND instr(V_PRIMARY_CPE_INST_EUP_DISCT,'.')<=1 THEN
            V_PRIMARY_CPE_INST_EUP_DISCT               := 0||V_PRIMARY_CPE_INST_EUP_DISCT;
          END IF;
          IF INSTR(V_PRIMARY_CPE_INSTALL_EUP,'.') = 0 THEN
            V_PRIMARY_CPE_INSTALL_EUP            := V_PRIMARY_CPE_INSTALL_EUP ||'.00';
          END IF;
        WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'Router - Primary - Mthly-recurring' THEN
          V_PRIM_CPE_MNTHL_RNTL_EUP                    := sqe_PRICE_tbl_TE(i).price;
          V_PRIM_CPE_MTHLY_RNT_EUP_DIS                 := sqe_PRICE_tbl_TE(i).discount/100;
          IF instr(V_PRIM_CPE_MTHLY_RNT_EUP_DIS,'.')    >0 AND instr(V_PRIM_CPE_MTHLY_RNT_EUP_DIS,'.')<=1 THEN
            V_PRIM_CPE_MTHLY_RNT_EUP_DIS               := 0||V_PRIM_CPE_MTHLY_RNT_EUP_DIS;
          END IF;
          IF INSTR(V_PRIM_CPE_MNTHL_RNTL_EUP,'.') = 0 THEN
            V_PRIM_CPE_MNTHL_RNTL_EUP            := V_PRIM_CPE_MNTHL_RNTL_EUP ||'.00';
          END IF;
        WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'Leased Line Access - Primary - Install-non-recurring' THEN
          V_PRIMARY_ACCESS_INSTALL_EUP                 := sqe_PRICE_tbl_TE(i).price ;
          V_PRIM_ACES_INSTL_EUP_DIS                    := sqe_PRICE_tbl_TE(i).discount/100;
          IF instr(V_PRIM_ACES_INSTL_EUP_DIS,'.')       >0 AND instr(V_PRIM_ACES_INSTL_EUP_DIS,'.')<=1 THEN
            V_PRIM_ACES_INSTL_EUP_DIS                  := 0||V_PRIM_ACES_INSTL_EUP_DIS;
          END IF;
          IF INSTR(V_PRIMARY_ACCESS_INSTALL_EUP,'.') = 0 THEN
            V_PRIMARY_ACCESS_INSTALL_EUP            := V_PRIMARY_ACCESS_INSTALL_EUP ||'.00';
          END IF;
        WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'DSL Access - Primary - Install-non-recurring' THEN
          IF upper(v_PRIMARY_ACCESS_TECHNOLOGY )        = 'DSL' THEN
            V_PRIMARY_ACCESS_INSTALL_EUP               := sqe_PRICE_tbl_TE(i).price ;
            V_PRIM_ACES_INSTL_EUP_DIS                  := sqe_PRICE_tbl_TE(i).discount/100;
            IF instr(V_PRIM_ACES_INSTL_EUP_DIS,'.')     >0 AND instr(V_PRIM_ACES_INSTL_EUP_DIS,'.')<=1 THEN
              V_PRIM_ACES_INSTL_EUP_DIS                := 0||V_PRIM_ACES_INSTL_EUP_DIS;
            END IF;
            IF INSTR(V_PRIMARY_ACCESS_INSTALL_EUP,'.') = 0 THEN
              V_PRIMARY_ACCESS_INSTALL_EUP            := V_PRIMARY_ACCESS_INSTALL_EUP ||'.00';
            END IF;
          END IF;
        WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'HVPN Access - Primary - Install-non-recurring' THEN
          IF upper(v_PRIMARY_ACCESS_TECHNOLOGY )        = 'HVPN' THEN
            V_PRIMARY_ACCESS_INSTALL_EUP               := sqe_PRICE_tbl_TE(i).price ;
            V_PRIM_ACES_INSTL_EUP_DIS                  := sqe_PRICE_tbl_TE(i).discount/100;
            IF instr(V_PRIM_ACES_INSTL_EUP_DIS,'.')     >0 AND instr(V_PRIM_ACES_INSTL_EUP_DIS,'.')<=1 THEN
              V_PRIM_ACES_INSTL_EUP_DIS                := 0||V_PRIM_ACES_INSTL_EUP_DIS;
            END IF;
            IF INSTR(V_PRIMARY_ACCESS_INSTALL_EUP,'.') = 0 THEN
              V_PRIMARY_ACCESS_INSTALL_EUP            := V_PRIMARY_ACCESS_INSTALL_EUP ||'.00';
            END IF;
          END IF;
        WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'Ethernet Access - Primary - Install-non-recurring' THEN
          IF upper(v_PRIMARY_ACCESS_TECHNOLOGY )        = 'ETHERNET' THEN
            V_PRIMARY_ACCESS_INSTALL_EUP               := sqe_PRICE_tbl_TE(i).price ;
            V_PRIM_ACES_INSTL_EUP_DIS                  := sqe_PRICE_tbl_TE(i).discount/100;
            IF instr(V_PRIM_ACES_INSTL_EUP_DIS,'.')     >0 AND instr(V_PRIM_ACES_INSTL_EUP_DIS,'.')<=1 THEN
              V_PRIM_ACES_INSTL_EUP_DIS                := 0||V_PRIM_ACES_INSTL_EUP_DIS;
            END IF;
            IF INSTR(V_PRIMARY_ACCESS_INSTALL_EUP,'.') = 0 THEN
              V_PRIMARY_ACCESS_INSTALL_EUP            := V_PRIMARY_ACCESS_INSTALL_EUP ||'.00';
            END IF;
          END IF;
        WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'Leased Line Access - Primary - Mthly-recurring' THEN
          V_PRIM_ACES_MNTHLY_RNT_EUP                   := sqe_PRICE_tbl_TE(i).price ;
          V_PRIM_ACES_MNTH_RNT_EUP_DIS                 := sqe_PRICE_tbl_TE(i).discount/100;
          IF instr(V_PRIM_ACES_MNTH_RNT_EUP_DIS,'.')    >0 AND instr(V_PRIM_ACES_MNTH_RNT_EUP_DIS,'.')<=1 THEN
            V_PRIM_ACES_MNTH_RNT_EUP_DIS               := 0||V_PRIM_ACES_MNTH_RNT_EUP_DIS;
          END IF;
          IF INSTR(V_PRIM_ACES_MNTHLY_RNT_EUP,'.') = 0 THEN
            V_PRIM_ACES_MNTHLY_RNT_EUP            := V_PRIM_ACES_MNTHLY_RNT_EUP ||'.00';
          END IF;
        WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'DSL Access - Primary - Mthly-recurring' THEN
          IF upper(v_PRIMARY_ACCESS_TECHNOLOGY )        = 'DSL' THEN
            V_PRIM_ACES_MNTHLY_RNT_EUP                 := sqe_PRICE_tbl_TE(i).price ;
            V_PRIM_ACES_MNTH_RNT_EUP_DIS               := sqe_PRICE_tbl_TE(i).discount/100;
            IF instr(V_PRIM_ACES_MNTH_RNT_EUP_DIS,'.')  >0 AND instr(V_PRIM_ACES_MNTH_RNT_EUP_DIS,'.')<=1 THEN
              V_PRIM_ACES_MNTH_RNT_EUP_DIS             := 0||V_PRIM_ACES_MNTH_RNT_EUP_DIS;
            END IF;
            IF INSTR(V_PRIM_ACES_MNTHLY_RNT_EUP,'.') = 0 THEN
              V_PRIM_ACES_MNTHLY_RNT_EUP            := V_PRIM_ACES_MNTHLY_RNT_EUP ||'.00';
            END IF;
          END IF;
        WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'Ethernet Access - Primary - Mthly-recurring' THEN
          IF upper(v_PRIMARY_ACCESS_TECHNOLOGY )        = 'ETHERNET' THEN
            V_PRIM_ACES_MNTHLY_RNT_EUP                 := sqe_PRICE_tbl_TE(i).price ;
            V_PRIM_ACES_MNTH_RNT_EUP_DIS               := sqe_PRICE_tbl_TE(i).discount/100;
            IF instr(V_PRIM_ACES_MNTH_RNT_EUP_DIS,'.')  >0 AND instr(V_PRIM_ACES_MNTH_RNT_EUP_DIS,'.')<=1 THEN
              V_PRIM_ACES_MNTH_RNT_EUP_DIS             := 0||V_PRIM_ACES_MNTH_RNT_EUP_DIS;
            END IF;
            IF INSTR(V_PRIM_ACES_MNTHLY_RNT_EUP,'.') = 0 THEN
              V_PRIM_ACES_MNTHLY_RNT_EUP            := V_PRIM_ACES_MNTHLY_RNT_EUP ||'.00';
            END IF;
          END IF;
        WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'HVPN Access - Primary - Mthly-recurring' THEN
          IF upper(v_PRIMARY_ACCESS_TECHNOLOGY )        = 'HVPN' THEN
            V_PRIM_ACES_MNTHLY_RNT_EUP                 := sqe_PRICE_tbl_TE(i).price ;
            V_PRIM_ACES_MNTH_RNT_EUP_DIS               := sqe_PRICE_tbl_TE(i).discount/100;
            IF instr(V_PRIM_ACES_MNTH_RNT_EUP_DIS,'.')  >0 AND instr(V_PRIM_ACES_MNTH_RNT_EUP_DIS,'.')<=1 THEN
              V_PRIM_ACES_MNTH_RNT_EUP_DIS             := 0||V_PRIM_ACES_MNTH_RNT_EUP_DIS;
            END IF;
            IF INSTR(V_PRIM_ACES_MNTHLY_RNT_EUP,'.') = 0 THEN
              V_PRIM_ACES_MNTHLY_RNT_EUP            := V_PRIM_ACES_MNTHLY_RNT_EUP ||'.00';
            END IF;
          END IF;
        WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'MPLS Port - Primary-Install' THEN
          V_PRIMARY_PORT_INSTALL_EUP                   := sqe_PRICE_tbl_TE(i).price ;
          V_PRIM_PRT_INSTL_EUP_DIS                     := sqe_PRICE_tbl_TE(i).discount/100;
          IF instr(V_PRIM_PRT_INSTL_EUP_DIS,'.')        >0 AND instr(V_PRIM_PRT_INSTL_EUP_DIS,'.')<=1 THEN
            V_PRIM_PRT_INSTL_EUP_DIS                   := 0||V_PRIM_PRT_INSTL_EUP_DIS;
          END IF;
          IF INSTR(V_PRIMARY_PORT_INSTALL_EUP,'.') = 0 THEN
            V_PRIMARY_PORT_INSTALL_EUP            := V_PRIMARY_PORT_INSTALL_EUP ||'.00';
          END IF;
        WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'iVPN Port - Primary-Install' THEN
          V_PRIMARY_PORT_INSTALL_EUP                   := sqe_PRICE_tbl_TE(i).price ;
          V_PRIM_PRT_INSTL_EUP_DIS                     := sqe_PRICE_tbl_TE(i).discount/100;
          IF instr(V_PRIM_PRT_INSTL_EUP_DIS,'.')        >0 AND instr(V_PRIM_PRT_INSTL_EUP_DIS,'.')<=1 THEN
            V_PRIM_PRT_INSTL_EUP_DIS                   := 0||V_PRIM_PRT_INSTL_EUP_DIS;
          END IF;
        --Begin added by nagendra on 1-APR-2011 If it is DSL order
        WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'DSL Port - Primary-Install' THEN
          V_PRIMARY_PORT_INSTALL_EUP                   := sqe_PRICE_tbl_TE(i).price ;
          V_PRIM_PRT_INSTL_EUP_DIS                     := sqe_PRICE_tbl_TE(i).discount/100;
          IF instr(V_PRIM_PRT_INSTL_EUP_DIS,'.')        >0 AND instr(V_PRIM_PRT_INSTL_EUP_DIS,'.')<=1 THEN
            V_PRIM_PRT_INSTL_EUP_DIS                   := 0||V_PRIM_PRT_INSTL_EUP_DIS;
          END IF;
        --End
          IF INSTR(V_PRIMARY_PORT_INSTALL_EUP,'.') = 0 THEN
            V_PRIMARY_PORT_INSTALL_EUP            := V_PRIMARY_PORT_INSTALL_EUP ||'.00';
          END IF;


        WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'MPLS Port - Primary-Mthly' THEN
          V_PRIMARY_PORT_MNTHLY_RNTL_EUP               := sqe_PRICE_tbl_TE(i).price ;
          V_PRM_PRT_MNTH_RNTL_EUP_DIS                  := sqe_PRICE_tbl_TE(i).discount/100;
          IF instr(V_PRM_PRT_MNTH_RNTL_EUP_DIS,'.')     >0 AND instr(V_PRM_PRT_MNTH_RNTL_EUP_DIS,'.')<=1 THEN
            V_PRM_PRT_MNTH_RNTL_EUP_DIS                := 0||V_PRM_PRT_MNTH_RNTL_EUP_DIS;
          END IF;
          IF INSTR(V_PRIMARY_PORT_MNTHLY_RNTL_EUP,'.') = 0 THEN
            V_PRIMARY_PORT_MNTHLY_RNTL_EUP            := V_PRIMARY_PORT_MNTHLY_RNTL_EUP ||'.00';
          END IF;
        WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'iVPN Port - Primary-Mthly' THEN
          V_PRIMARY_PORT_MNTHLY_RNTL_EUP               := sqe_PRICE_tbl_TE(i).price ;
          V_PRM_PRT_MNTH_RNTL_EUP_DIS                  := sqe_PRICE_tbl_TE(i).discount/100;
          IF instr(V_PRM_PRT_MNTH_RNTL_EUP_DIS,'.')     >0 AND instr(V_PRM_PRT_MNTH_RNTL_EUP_DIS,'.')<=1 THEN
            V_PRM_PRT_MNTH_RNTL_EUP_DIS                := 0||V_PRM_PRT_MNTH_RNTL_EUP_DIS;
          END IF;
          IF INSTR(V_PRIMARY_PORT_MNTHLY_RNTL_EUP,'.') = 0 THEN
            V_PRIMARY_PORT_MNTHLY_RNTL_EUP            := V_PRIMARY_PORT_MNTHLY_RNTL_EUP ||'.00';
          END IF;
        -- Added on 8/4/2011 for DSL scenario - Start
        WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'DSL Port - Primary-Mthly' THEN
          V_PRIMARY_PORT_MNTHLY_RNTL_EUP               := sqe_PRICE_tbl_TE(i).price ;
          V_PRM_PRT_MNTH_RNTL_EUP_DIS                  := sqe_PRICE_tbl_TE(i).discount/100;
          IF instr(V_PRM_PRT_MNTH_RNTL_EUP_DIS,'.')     >0 AND instr(V_PRM_PRT_MNTH_RNTL_EUP_DIS,'.')<=1 THEN
            V_PRM_PRT_MNTH_RNTL_EUP_DIS                := 0||V_PRM_PRT_MNTH_RNTL_EUP_DIS;
          END IF;
          IF INSTR(V_PRIMARY_PORT_MNTHLY_RNTL_EUP,'.') = 0 THEN
            V_PRIMARY_PORT_MNTHLY_RNTL_EUP            := V_PRIMARY_PORT_MNTHLY_RNTL_EUP ||'.00';
          END IF;
        -- Added on 8/4/2011 for DSL scenario - End
        WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'DSL Local Loop - Primary - Install-non-recurring' THEN
          V_PRIMARY_LLA_INSTALL_EUP                    := sqe_PRICE_tbl_TE(i).price ;
          V_PRIMARY_LLA_INSTALL_EUP_DISC               := sqe_PRICE_tbl_TE(i).discount/100;
          IF instr(V_PRIMARY_LLA_INSTALL_EUP_DISC,'.')  >0 AND instr(V_PRIMARY_LLA_INSTALL_EUP_DISC,'.')<=1 THEN
            V_PRIMARY_LLA_INSTALL_EUP_DISC             := 0||V_PRIMARY_LLA_INSTALL_EUP_DISC;
          END IF;
          IF INSTR(V_PRIMARY_LLA_INSTALL_EUP,'.') = 0 THEN
            V_PRIMARY_LLA_INSTALL_EUP            := V_PRIMARY_LLA_INSTALL_EUP ||'.00';
          END IF;
        WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'DSL Local Loop - Primary - Mthly-recurring' THEN
          V_PRIMARY_LLA_MNTHL_RENTAL_EUP               := sqe_PRICE_tbl_TE(i).price ;
          V_PRIM_LLA_MNTH_RNT_EUP_DIS                  := sqe_PRICE_tbl_TE(i).discount/100;
          IF instr(V_PRIM_LLA_MNTH_RNT_EUP_DIS,'.')     >0 AND instr(V_PRIM_LLA_MNTH_RNT_EUP_DIS,'.')<=1 THEN
            V_PRIM_LLA_MNTH_RNT_EUP_DIS                := 0||V_PRIM_LLA_MNTH_RNT_EUP_DIS;
          END IF;
          IF INSTR(V_PRIMARY_LLA_MNTHL_RENTAL_EUP,'.') = 0 THEN
            V_PRIMARY_LLA_MNTHL_RENTAL_EUP            := V_PRIMARY_LLA_MNTHL_RENTAL_EUP ||'.00';
          END IF;
        WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'Additional VPN Connection - Primary - Install'
          /*'Additional VPN Connection-Install-non-recurring'*/
          THEN
          V_PRIMARY_mVPN_ONE_TIME_EUP   := sqe_PRICE_tbl_TE(i).price ;
          IF V_PRIMARY_mVPN_ONE_TIME_EUP = 0 THEN
            V_PRIMARY_mVPN_ONE_TIME_EUP := NULL;
          END IF;
          IF INSTR(V_PRIMARY_mVPN_ONE_TIME_EUP,'.') = 0 THEN
            V_PRIMARY_mVPN_ONE_TIME_EUP            := V_PRIMARY_mVPN_ONE_TIME_EUP ||'.00';
          END IF;
        WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'Additional VPN Connection - Primary - Mthly' THEN
          V_PR_mVP_MNTRN_EUP_TTAD_VPN                  := sqe_PRICE_tbl_TE(i).price ;
          V_PR_mVPN_MNRN_NT_EUP_ADVPN                  := NVL(V_PR_mVP_MNTRN_EUP_TTAD_VPN,0) -
          (NVL(sqe_PRICE_tbl_TE(i).discount,0)                                               /100);
          IF V_PR_mVP_MNTRN_EUP_TTAD_VPN = 0 THEN
            V_PR_mVP_MNTRN_EUP_TTAD_VPN := NULL;
          END IF;
          IF V_PR_mVPN_MNRN_NT_EUP_ADVPN = 0 THEN
            V_PR_mVPN_MNRN_NT_EUP_ADVPN := NULL;
          END IF;
          IF INSTR(V_PR_mVP_MNTRN_EUP_TTAD_VPN,'.') = 0 THEN
            V_PR_mVP_MNTRN_EUP_TTAD_VPN            := V_PR_mVP_MNTRN_EUP_TTAD_VPN ||'.00';
          END IF;
          IF INSTR(V_PR_mVPN_MNRN_NT_EUP_ADVPN,'.') = 0 THEN
            V_PR_mVPN_MNRN_NT_EUP_ADVPN            := V_PR_mVPN_MNRN_NT_EUP_ADVPN ||'.00';
          END IF;
           --WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'Change Management - Recurring Charge' THEN
           WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'Change Management - PTP - Primary - Mthly-recurring' THEN
           V_CHANGE_MANAGEMENT                   := sqe_PRICE_tbl_TE(i).price ;
            IF INSTR(V_CHANGE_MANAGEMENT,'.') = 0 THEN
            V_CHANGE_MANAGEMENT            := V_CHANGE_MANAGEMENT ||'.00';
          END IF;
           WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'Change Management - Recurring Discount' THEN
           V_CHANGE_MANAGEMENT_DISCOUNT                   := sqe_PRICE_tbl_TE(i).discount/100;
          IF instr( V_CHANGE_MANAGEMENT_DISCOUNT,'.')      >0 AND instr( V_CHANGE_MANAGEMENT_DISCOUNT,'.')<=1 THEN
             V_CHANGE_MANAGEMENT_DISCOUNT                 := 0|| V_CHANGE_MANAGEMENT_DISCOUNT;
             end if;
        WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'BGP Configuration Charge - Primary - Install' THEN
          V_PRIM_BGP_PRFX_ONETME_EUP                   := sqe_PRICE_tbl_TE(i).price ;
          V_PRIM_BGP_PRFX_OT_EUP_DIS                   := sqe_PRICE_tbl_TE(i).discount/100;
          IF instr(V_PRIM_BGP_PRFX_OT_EUP_DIS,'.')      >0 AND instr(V_PRIM_BGP_PRFX_OT_EUP_DIS,'.')<=1 THEN
            V_PRIM_BGP_PRFX_OT_EUP_DIS                 := 0||V_PRIM_BGP_PRFX_OT_EUP_DIS;
          END IF;
          IF INSTR(V_PRIM_BGP_PRFX_ONETME_EUP,'.') = 0 THEN
            V_PRIM_BGP_PRFX_ONETME_EUP            := V_PRIM_BGP_PRFX_ONETME_EUP ||'.00';
          END IF;
         WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'BGP Configuration Charge - Primary - Mthly-recurring' THEN
          V_PRI_BGP_PRFX_MNT_RNT_EUP                   := sqe_PRICE_tbl_TE(i).price ;
          V_PR_BGP_PRFX_MNT_RNT_EUP_DIS                := sqe_PRICE_tbl_TE(i).discount/100;
          IF instr(V_PR_BGP_PRFX_MNT_RNT_EUP_DIS,'.')      >0 AND instr(V_PR_BGP_PRFX_MNT_RNT_EUP_DIS,'.')<=1 THEN
            V_PR_BGP_PRFX_MNT_RNT_EUP_DIS                 := 0||V_PR_BGP_PRFX_MNT_RNT_EUP_DIS;
          END IF;
          IF INSTR(V_PRI_BGP_PRFX_MNT_RNT_EUP,'.') = 0 THEN
            V_PRI_BGP_PRFX_MNT_RNT_EUP            := V_PRI_BGP_PRFX_MNT_RNT_EUP ||'.00';
          END IF;
           --WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'PFM - Recurring Charge' THEN
           WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'Proactive CE Monitorings - PTP - Primary - Mthly-recurring' THEN
           V_PROACTIVE_CE_MONITORINGS_EUP                   := sqe_PRICE_tbl_TE(i).price ;
          IF INSTR(V_PROACTIVE_CE_MONITORINGS_EUP,'.') = 0 THEN
            V_PROACTIVE_CE_MONITORINGS_EUP            := V_PROACTIVE_CE_MONITORINGS_EUP ||'.00';
          END IF;
           V_PRACTVE_CE_MNTR_EUP_DIS                   := sqe_PRICE_tbl_TE(i).discount/100;
          IF INSTR(V_PRACTVE_CE_MNTR_EUP_DIS,'.')      >0 AND INSTR(V_PRACTVE_CE_MNTR_EUP_DIS,'.')<=1 THEN
            V_PRACTVE_CE_MNTR_EUP_DIS                 := 0||V_PRACTVE_CE_MNTR_EUP_DIS;
          END IF;
          IF V_PRACTVE_CE_MNTR_EUP_DIS IS NOT NULL THEN
            V_PROACTIVE_CE_MONITORINGS_EUP := V_PROACTIVE_CE_MONITORINGS_EUP * V_PRACTVE_CE_MNTR_EUP_DIS;
          END IF;
--           WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'PFM - Recurring Discount' THEN
--          V_PRACTVE_CE_MNTR_EUP_DIS                   := sqe_PRICE_tbl_TE(i).discount/100;
--          IF instr(V_PRACTVE_CE_MNTR_EUP_DIS,'.')      >0 AND instr(V_PRACTVE_CE_MNTR_EUP_DIS,'.')<=1 THEN
--            V_PRACTVE_CE_MNTR_EUP_DIS                 := 0||V_PRACTVE_CE_MNTR_EUP_DIS;
--            end if;
        WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'SNMP Read only charge' THEN
          V_SNMP_RDN_ACES_PRM_CPET_EUP                 := sqe_PRICE_tbl_TE(i).price ;
          V_SNMP_RD_ACE_PR_CPT_EUP_DIS                 := sqe_PRICE_tbl_TE(i).discount/100;
          IF instr(V_SNMP_RD_ACE_PR_CPT_EUP_DIS,'.')    >0 AND instr(V_SNMP_RD_ACE_PR_CPT_EUP_DIS,'.')<=1 THEN
            V_SNMP_RD_ACE_PR_CPT_EUP_DIS               := 0||V_SNMP_RD_ACE_PR_CPT_EUP_DIS;
          END IF;
          IF V_SNMP_RDN_ACES_PRM_CPET_EUP = 0 THEN
            V_SNMP_RDN_ACES_PRM_CPET_EUP := NULL;
          END IF;
          IF V_SNMP_RD_ACE_PR_CPT_EUP_DIS = 0 THEN
            V_SNMP_RD_ACE_PR_CPT_EUP_DIS := NULL;
          END IF;
          IF INSTR(V_SNMP_RDN_ACES_PRM_CPET_EUP,'.') = 0 THEN
            V_SNMP_RDN_ACES_PRM_CPET_EUP            := V_SNMP_RDN_ACES_PRM_CPET_EUP ||'.00';
          END IF;
          IF INSTR(V_SNMP_RD_ACE_PR_CPT_EUP_DIS,'.') = 0 THEN
            V_SNMP_RD_ACE_PR_CPT_EUP_DIS            := V_SNMP_RD_ACE_PR_CPT_EUP_DIS ||'.00';
          END IF;
        WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'Out of office Installation charge' THEN
          V_OOH_TRNUP_MN_CPE_OT_EUP                    := sqe_PRICE_tbl_TE(i).price ;
          V_OOH_TRNUP_MN_CPE_OT_EUP_DIS                := sqe_PRICE_tbl_TE(i).discount/100;
          IF instr(V_OOH_TRNUP_MN_CPE_OT_EUP_DIS,'.')   >0 AND instr(V_OOH_TRNUP_MN_CPE_OT_EUP_DIS,'.')<=1 THEN
            V_OOH_TRNUP_MN_CPE_OT_EUP_DIS              := 0||V_OOH_TRNUP_MN_CPE_OT_EUP_DIS;
          END IF;
          IF V_OOH_TRNUP_MN_CPE_OT_EUP = 0 THEN
            V_OOH_TRNUP_MN_CPE_OT_EUP := NULL;
          END IF;
          IF V_OOH_TRNUP_MN_CPE_OT_EUP_DIS = 0 THEN
            V_OOH_TRNUP_MN_CPE_OT_EUP_DIS := NULL;
          END IF;
          IF INSTR(V_OOH_TRNUP_MN_CPE_OT_EUP,'.') = 0 THEN
            V_OOH_TRNUP_MN_CPE_OT_EUP            := V_OOH_TRNUP_MN_CPE_OT_EUP ||'.00';
          END IF;
        WHEN sqe_PRICE_tbl_TE(i).price_line_description        = 'Primary MVPN OneTime Charge' THEN
          V_PRIMARY_MVPN_NET_EUP                              := sqe_PRICE_tbl_TE(i).price;
        WHEN UPPER(sqe_PRICE_tbl_TE(i).price_line_description) = UPPER('Helpdesk option One time Install Charge') THEN
          V_HELPDESK_ONETIME_EUP                              := sqe_PRICE_tbl_TE(i).price;
          v_Helpdesk_One_Time_Dis                             := sqe_PRICE_tbl_TE(i).discount/100;
          IF instr(v_Helpdesk_One_Time_Dis,'.')                >0 AND instr(v_Helpdesk_One_Time_Dis,'.')<=1 THEN
            v_Helpdesk_One_Time_Dis                           := 0||v_Helpdesk_One_Time_Dis;
          END IF;
          IF INSTR(V_HELPDESK_ONETIME_EUP,'.') = 0 THEN
            V_HELPDESK_ONETIME_EUP            := V_HELPDESK_ONETIME_EUP ||'.00';
          END IF;

          WHEN UPPER(sqe_PRICE_tbl_TE(i).price_line_description) = 'CALL LOCAL NON RECURRING PRICE' THEN
            IF upper(V_HELPDESK_TYPE)                           = 'CALL LOCAL' THEN
          V_HELPDESK_ONETIME_EUP                              := sqe_PRICE_tbl_TE(i).price;
          v_Helpdesk_One_Time_Dis                             := sqe_PRICE_tbl_TE(i).discount/100;
          IF instr(v_Helpdesk_One_Time_Dis,'.')                >0 AND instr(v_Helpdesk_One_Time_Dis,'.')<=1 THEN
            v_Helpdesk_One_Time_Dis                           := 0||v_Helpdesk_One_Time_Dis;
          END IF;
          IF INSTR(V_HELPDESK_ONETIME_EUP,'.') = 0 THEN
            V_HELPDESK_ONETIME_EUP            := V_HELPDESK_ONETIME_EUP ||'.00';
          END IF;
          END IF;

          WHEN UPPER(sqe_PRICE_tbl_TE(i).price_line_description) = 'CALL HOME NON RECURRING PRICE' THEN
            IF  upper(V_HELPDESK_TYPE)                           = 'CALL HOME' THEN
          V_HELPDESK_ONETIME_EUP                              := sqe_PRICE_tbl_TE(i).price;
          v_Helpdesk_One_Time_Dis                             := sqe_PRICE_tbl_TE(i).discount/100;
          IF instr(v_Helpdesk_One_Time_Dis,'.')                >0 AND instr(v_Helpdesk_One_Time_Dis,'.')<=1 THEN
            v_Helpdesk_One_Time_Dis                           := 0||v_Helpdesk_One_Time_Dis;
          END IF;
          IF INSTR(V_HELPDESK_ONETIME_EUP,'.') = 0 THEN
            V_HELPDESK_ONETIME_EUP            := V_HELPDESK_ONETIME_EUP ||'.00';
          END IF;
          END IF;

          WHEN UPPER(sqe_PRICE_tbl_TE(i).price_line_description) = 'CALL CENTRAL NON RECURRING PRICE' THEN
              IF  upper(V_HELPDESK_TYPE)                           = 'CALL CENTRAL' THEN
          V_HELPDESK_ONETIME_EUP                              := sqe_PRICE_tbl_TE(i).price;
          v_Helpdesk_One_Time_Dis                             := sqe_PRICE_tbl_TE(i).discount/100;
          IF instr(v_Helpdesk_One_Time_Dis,'.')                >0 AND instr(v_Helpdesk_One_Time_Dis,'.')<=1 THEN
            v_Helpdesk_One_Time_Dis                           := 0||v_Helpdesk_One_Time_Dis;
          END IF;
          IF INSTR(V_HELPDESK_ONETIME_EUP,'.') = 0 THEN
            V_HELPDESK_ONETIME_EUP            := V_HELPDESK_ONETIME_EUP ||'.00';
          END IF;
          END IF;

        WHEN UPPER(sqe_PRICE_tbl_TE(i).price_line_description) = 'HELPDESK OPTION MONTHLY RECURRING CHARGE' THEN
          v_Helpdesk_Mon_Recur_EUP                            := sqe_PRICE_tbl_TE(i).price;
          v_Helpdesk_Mon_Recur_Dis                            := sqe_PRICE_tbl_TE(i).discount/100;
          IF instr(v_Helpdesk_Mon_Recur_Dis,'.')               >0 AND instr(v_Helpdesk_Mon_Recur_Dis,'.')<=1 THEN
            v_Helpdesk_Mon_Recur_Dis                          := 0||v_Helpdesk_Mon_Recur_Dis;
          END IF;
          IF INSTR(v_Helpdesk_Mon_Recur_EUP,'.') = 0 THEN
            v_Helpdesk_Mon_Recur_EUP            := v_Helpdesk_Mon_Recur_EUP ||'.00';
          END IF;

               WHEN UPPER(sqe_PRICE_tbl_TE(i).price_line_description) = 'CALL LOCAL RECURRING PRICE' THEN
          IF upper(V_HELPDESK_TYPE)                           = 'CALL LOCAL' THEN
          v_Helpdesk_Mon_Recur_EUP                            := sqe_PRICE_tbl_TE(i).price;
          v_Helpdesk_Mon_Recur_Dis                            := sqe_PRICE_tbl_TE(i).discount/100;
          IF instr(v_Helpdesk_Mon_Recur_Dis,'.')               >0 AND instr(v_Helpdesk_Mon_Recur_Dis,'.')<=1 THEN
            v_Helpdesk_Mon_Recur_Dis                          := 0||v_Helpdesk_Mon_Recur_Dis;
          END IF;
          IF INSTR(v_Helpdesk_Mon_Recur_EUP,'.') = 0 THEN
            v_Helpdesk_Mon_Recur_EUP            := v_Helpdesk_Mon_Recur_EUP ||'.00';
          END IF;
          END IF;

          WHEN UPPER(sqe_PRICE_tbl_TE(i).price_line_description) = 'CALL HOME RECURRING PRICE' THEN
          IF  upper(V_HELPDESK_TYPE)                           = 'CALL HOME' THEN
          v_Helpdesk_Mon_Recur_EUP                            := sqe_PRICE_tbl_TE(i).price;
          v_Helpdesk_Mon_Recur_Dis                            := sqe_PRICE_tbl_TE(i).discount/100;
          IF instr(v_Helpdesk_Mon_Recur_Dis,'.')               >0 AND instr(v_Helpdesk_Mon_Recur_Dis,'.')<=1 THEN
            v_Helpdesk_Mon_Recur_Dis                          := 0||v_Helpdesk_Mon_Recur_Dis;
          END IF;
          IF INSTR(v_Helpdesk_Mon_Recur_EUP,'.') = 0 THEN
            v_Helpdesk_Mon_Recur_EUP            := v_Helpdesk_Mon_Recur_EUP ||'.00';
          END IF;
          END IF;

          WHEN UPPER(sqe_PRICE_tbl_TE(i).price_line_description) = 'CALL CENTRAL RECURRING PRICE' THEN
           IF  upper(V_HELPDESK_TYPE)                           = 'CALL CENTRAL' THEN
          v_Helpdesk_Mon_Recur_EUP                            := sqe_PRICE_tbl_TE(i).price;
          v_Helpdesk_Mon_Recur_Dis                            := sqe_PRICE_tbl_TE(i).discount/100;
          IF instr(v_Helpdesk_Mon_Recur_Dis,'.')               >0 AND instr(v_Helpdesk_Mon_Recur_Dis,'.')<=1 THEN
            v_Helpdesk_Mon_Recur_Dis                          := 0||v_Helpdesk_Mon_Recur_Dis;
          END IF;
          IF INSTR(v_Helpdesk_Mon_Recur_EUP,'.') = 0 THEN
            v_Helpdesk_Mon_Recur_EUP            := v_Helpdesk_Mon_Recur_EUP ||'.00';
          END IF;
          END IF;

      WHEN UPPER(sqe_PRICE_tbl_TE(i).price_line_description) = 'CPE CHARGE PTP - PRIMARY - INSTALL-NON-RECURRING' THEN
          V_Prim_cpe_Ins_PTP                                  := sqe_PRICE_tbl_TE(i).price;
          -- Added on 4/8/2011 as part of R16 - Start
          vPrim_cpe_Ins_PTP_DS                                := sqe_PRICE_tbl_TE(i).discount/100;
          IF instr(vPrim_cpe_Ins_PTP_DS,'.')                  >0 AND instr(vPrim_cpe_Ins_PTP_DS,'.')<=1 THEN
            vPrim_cpe_Ins_PTP_DS                              := 0||vPrim_cpe_Ins_PTP_DS;
          END IF;
          -- Added on 4/8/2011 as part of R16 - End
           IF INSTR(V_Prim_cpe_Ins_PTP,'.') = 0 THEN
            V_Prim_cpe_Ins_PTP            := V_Prim_cpe_Ins_PTP ||'.00';
            end if;
        WHEN UPPER(sqe_PRICE_tbl_TE(i).price_line_description) = 'CPE CHARGE PTP - PRIMARY - MTHLY-RECURRING' THEN
          V_Prim_cpe_mon_Rntal_PTP                            := sqe_PRICE_tbl_TE(i).price;
          -- Added on 4/8/2011 as part of R16 - Start
          vPrim_cpe_mon_Rntal_PTP_DS                                := sqe_PRICE_tbl_TE(i).discount/100;
          IF instr(vPrim_cpe_mon_Rntal_PTP_DS,'.')                  >0 AND instr(vPrim_cpe_mon_Rntal_PTP_DS,'.')<=1 THEN
            vPrim_cpe_mon_Rntal_PTP_DS                              := 0||vPrim_cpe_mon_Rntal_PTP_DS;
          END IF;
          -- Added on 4/8/2011 as part of R16 - End

           IF INSTR(V_Prim_cpe_mon_Rntal_PTP,'.') = 0 THEN
            V_Prim_cpe_mon_Rntal_PTP            := V_Prim_cpe_mon_Rntal_PTP ||'.00';
            end if;
        WHEN UPPER(sqe_PRICE_tbl_TE(i).price_line_description) = 'LEASED LINE ACCESS PTP - PRIMARY - INSTALL-NON-RECURRING' THEN
          V_Prim_accss_ins_PTP                                := sqe_PRICE_tbl_TE(i).price;
          -- Added on 4/8/2011 as part of R16 - Start
          vprim_accss_ins_PTP_DS                                         := sqe_PRICE_tbl_TE(i).discount/100;
          IF instr(vprim_accss_ins_PTP_DS         ,'.')                  >0 AND instr(vprim_accss_ins_PTP_DS,'.')<=1 THEN
            vprim_accss_ins_PTP_DS                                       := 0||vprim_accss_ins_PTP_DS;
          END IF;
          -- Added on 4/8/2011 as part of R16 - End

           IF INSTR(V_Prim_accss_ins_PTP,'.') = 0 THEN
            V_Prim_accss_ins_PTP            := V_Prim_accss_ins_PTP ||'.00';
            end if;
       WHEN UPPER(sqe_PRICE_tbl_TE(i).price_line_description) = 'ETHERNET ACCESS PTP - PRIMARY - INSTALL-NON-RECURRING' THEN
          V_Prim_accss_ins_PTP                                := sqe_PRICE_tbl_TE(i).price;
           IF INSTR(V_Prim_accss_ins_PTP,'.') = 0 THEN
            V_Prim_accss_ins_PTP            := V_Prim_accss_ins_PTP ||'.00';
            end if;
       WHEN UPPER(sqe_PRICE_tbl_TE(i).price_line_description) = 'HVPN ACCESS PTP - PRIMARY - INSTALL-NON-RECURRING' THEN
          V_Prim_accss_ins_PTP                                := sqe_PRICE_tbl_TE(i).price;
           IF INSTR(V_Prim_accss_ins_PTP,'.') = 0 THEN
            V_Prim_accss_ins_PTP            := V_Prim_accss_ins_PTP ||'.00';
            end if;
        WHEN UPPER(sqe_PRICE_tbl_TE(i).price_line_description) ='LEASED LINE ACCESS PTP - PRIMARY - MTHLY-RECURRING' THEN
          V_Prim_accss_Mon_rntal_PTP                          := sqe_PRICE_tbl_TE(i).price;
          -- Added on 4/8/2011 as part of R16 - Start
          vPrim_accss_Mon_rntal_PTP_DS                                            := sqe_PRICE_tbl_TE(i).discount/100;
          IF instr(vPrim_accss_Mon_rntal_PTP_DS            ,'.')                  >0 AND instr(vPrim_accss_Mon_rntal_PTP_DS ,'.')<=1 THEN
            vPrim_accss_Mon_rntal_PTP_DS                                          := 0||vPrim_accss_Mon_rntal_PTP_DS;
          END IF;
          -- Added on 4/8/2011 as part of R16 - End

           IF INSTR(V_Prim_accss_Mon_rntal_PTP,'.') = 0 THEN
            V_Prim_accss_Mon_rntal_PTP            := V_Prim_accss_Mon_rntal_PTP ||'.00';
            end if;
          WHEN UPPER(sqe_PRICE_tbl_TE(i).price_line_description) = 'ETHERNET ACCESS PTP - PRIMARY - MTHLY-RECURRING' THEN
          V_Prim_accss_Mon_rntal_PTP                          := sqe_PRICE_tbl_TE(i).price;
           IF INSTR(V_Prim_accss_Mon_rntal_PTP,'.') = 0 THEN
            V_Prim_accss_Mon_rntal_PTP            := V_Prim_accss_Mon_rntal_PTP ||'.00';
            end if;
          WHEN UPPER(sqe_PRICE_tbl_TE(i).price_line_description) = 'HVPN ACCESS PTP - PRIMARY - MTHLY-RECURRING' THEN
          V_Prim_accss_Mon_rntal_PTP                          := sqe_PRICE_tbl_TE(i).price;
           IF INSTR(V_Prim_accss_Mon_rntal_PTP,'.') = 0 THEN
            V_Prim_accss_Mon_rntal_PTP            := V_Prim_accss_Mon_rntal_PTP ||'.00';
            end if;
        --WHEN UPPER(sqe_PRICE_tbl_TE(i).price_line_description) = 'PORT PTP - PRIMARY - INSTALL-NON-RECURRING' THEN
        WHEN UPPER(sqe_PRICE_tbl_TE(i).price_line_description) = 'IVPN PORT PTP - PRIMARY-INSTALL' THEN
          V_Prim_port_Ins_PTP                                 := sqe_PRICE_tbl_TE(i).price;
          -- Added on 4/8/2011 as part of R16 - Start
          vPrim_port_Ins_PTP_DS                                 := sqe_PRICE_tbl_TE(i).discount/100;
          IF instr(vPrim_port_Ins_PTP_DS ,'.')                  >0 AND instr(vPrim_port_Ins_PTP_DS ,'.')<=1 THEN
            vPrim_port_Ins_PTP_DS                               := 0||vPrim_port_Ins_PTP_DS;
          END IF;
          -- Added on 4/8/2011 as part of R16 - End

           IF INSTR(V_Prim_port_Ins_PTP,'.') = 0 THEN
            V_Prim_port_Ins_PTP            := V_Prim_port_Ins_PTP ||'.00';
            end if;
        WHEN UPPER(sqe_PRICE_tbl_TE(i).price_line_description) = 'PORT RECONFIG - PRIMARY - INSTALL-NON-RECURRING' THEN
          V_Prim_port_reconfig_One_time                       := sqe_PRICE_tbl_TE(i).price;
          -- Added on 4/8/2011 as part of R16 - Start
          vPrim_port_reconfig_onetime_DS                       := sqe_PRICE_tbl_TE(i).discount/100;
          IF instr(vPrim_port_reconfig_onetime_DS ,'.')        >0 AND instr(vPrim_port_reconfig_onetime_DS ,'.')<=1 THEN
            vPrim_port_reconfig_onetime_DS                     := 0||vPrim_port_reconfig_onetime_DS ;
          END IF;
          -- Added on 4/8/2011 as part of R16 - End

           IF INSTR(V_Prim_port_reconfig_One_time,'.') = 0 THEN
            V_Prim_port_reconfig_One_time            := V_Prim_port_reconfig_One_time ||'.00';
            end if;
        WHEN UPPER(sqe_PRICE_tbl_TE(i).price_line_description) = 'DSL UPGRADSL UPGRADE-DOWNGRADEDE-DOWNGRADE - PRIMARY - INSTALL-NON-RECURRING' THEN
          V_Prim_DSL_Up_Down_One_time                         := sqe_PRICE_tbl_TE(i).price;
          -- Added on 4/8/2011 as part of R16 - Start
          vPrim_DSL_Up_Down_One_time_DS                      := sqe_PRICE_tbl_TE(i).discount/100;
          IF instr(vPrim_DSL_Up_Down_One_time_DS ,'.')       >0 AND instr(vPrim_DSL_Up_Down_One_time_DS ,'.')<=1 THEN
            vPrim_DSL_Up_Down_One_time_DS                    := 0||vPrim_DSL_Up_Down_One_time_DS;
          END IF;
          -- Added on 4/8/2011 as part of R16 - End

           IF INSTR(V_Prim_cpe_Ins_PTP,'.') = 0 THEN
            V_Prim_cpe_Ins_PTP            := V_Prim_cpe_Ins_PTP ||'.00';
            end if;
        --WHEN UPPER(sqe_PRICE_tbl_TE(i).price_line_description) = 'PORT PTP - PRIMARY - MTHLY-RECURRING' THEN
        WHEN UPPER(sqe_PRICE_tbl_TE(i).price_line_description) = 'IVPN PORT PTP - PRIMARY-MTHLY' THEN
          V_Prim_port_Mon_rntal_PTP                           := sqe_PRICE_tbl_TE(i).price;
          -- Added on 4/8/2011 as part of R16 - Start
          vPrim_port_Mon_rntal_PTP_DS                    := sqe_PRICE_tbl_TE(i).discount/100;
          IF instr(vPrim_port_Mon_rntal_PTP_DS ,'.')     >0 AND instr(vPrim_port_Mon_rntal_PTP_DS,'.')<=1 THEN
            vPrim_port_Mon_rntal_PTP_DS                  := 0||vPrim_port_Mon_rntal_PTP_DS ;
          END IF;
          -- Added on 4/8/2011 as part of R16 - End

           IF INSTR(V_Prim_cpe_Ins_PTP,'.') = 0 THEN
            V_Prim_cpe_Ins_PTP            := V_Prim_cpe_Ins_PTP ||'.00';
            end if;
        WHEN UPPER(sqe_PRICE_tbl_TE(i).price_line_description) = 'LLA PTP - PRIMARY - INSTALL-NON-RECURRING' THEN
          V_Prim_LLA_Ins_PTP                                  := sqe_PRICE_tbl_TE(i).price;
          -- Added on 4/8/2011 as part of R16 - Start
          vPrim_LLA_Ins_PTP_DS                   := sqe_PRICE_tbl_TE(i).discount/100;
          IF instr(vPrim_LLA_Ins_PTP_DS,'.')     >0 AND instr(vPrim_LLA_Ins_PTP_DS ,'.')<=1 THEN
            vPrim_LLA_Ins_PTP_DS                 := 0||vPrim_LLA_Ins_PTP_DS;
          END IF;
          -- Added on 4/8/2011 as part of R16 - End

           IF INSTR(V_Prim_LLA_Ins_PTP,'.') = 0 THEN
            V_Prim_LLA_Ins_PTP            := V_Prim_LLA_Ins_PTP ||'.00';
            end if;
        WHEN UPPER(sqe_PRICE_tbl_TE(i).price_line_description) = 'LLA RENTAL PTP - PRIMARY - MTHLY-RECURRING' THEN
          V_Prim_LLA_Mon_rntal_PTP                            := sqe_PRICE_tbl_TE(i).price;
          -- Added on 4/8/2011 as part of R16 - Start
          vPrim_LLA_Mon_rntal_PTP_DS                    := sqe_PRICE_tbl_TE(i).discount/100;
          IF instr(vPrim_LLA_Mon_rntal_PTP_DS ,'.')     >0 AND instr(vPrim_LLA_Mon_rntal_PTP_DS,'.')<=1 THEN
            vPrim_LLA_Mon_rntal_PTP_DS                  := 0||vPrim_LLA_Mon_rntal_PTP_DS;
          END IF;
          -- Added on 4/8/2011 as part of R16 - End

           IF INSTR(V_Prim_LLA_Mon_rntal_PTP,'.') = 0 THEN
            V_Prim_LLA_Mon_rntal_PTP            := V_Prim_LLA_Mon_rntal_PTP ||'.00';
            end if;
        WHEN UPPER(sqe_PRICE_tbl_TE(i).price_line_description) = 'MVPN PTP - PRIMARY - INSTALL-NON-RECURRING' THEN
          V_Prim_mVPN_One_Time_PTP                            := sqe_PRICE_tbl_TE(i).price;
           IF INSTR(V_Prim_mVPN_One_Time_PTP,'.') = 0 THEN
            V_Prim_mVPN_One_Time_PTP            := V_Prim_mVPN_One_Time_PTP ||'.00';
            end if;
        WHEN UPPER(sqe_PRICE_tbl_TE(i).price_line_description) = 'PRIMARY MVPN ONE TIME NET PTP' THEN
          V_Prim_mVPN_One_Time_Net_PTP                        := sqe_PRICE_tbl_TE(i).price;
           IF INSTR(V_Prim_mVPN_One_Time_Net_PTP,'.') = 0 THEN
            V_Prim_mVPN_One_Time_Net_PTP            := V_Prim_mVPN_One_Time_Net_PTP ||'.00';
            end if;
        WHEN UPPER(sqe_PRICE_tbl_TE(i).price_line_description) ='MVPN PER PORT RENTAL PTP - PRIMARY - MTHLY-RECURRING' THEN
          V_Prim_mVPN_Mon_Rntal_PTP_Port                      := sqe_PRICE_tbl_TE(i).price;
          -- Added on 4/8/2011 as part of R16 - Start
          vPrim_mVPN_Mon_Rnt_PTP_Port_DS                          := sqe_PRICE_tbl_TE(i).discount/100;
          IF instr(vPrim_mVPN_Mon_Rnt_PTP_Port_DS       ,'.')     >0 AND instr(vPrim_mVPN_Mon_Rnt_PTP_Port_DS,'.')<=1 THEN
            vPrim_mVPN_Mon_Rnt_PTP_Port_DS                        := 0||vPrim_mVPN_Mon_Rnt_PTP_Port_DS;
          END IF;
          -- Added on 4/8/2011 as part of R16 - End

           IF INSTR(V_Prim_mVPN_Mon_Rntal_PTP_Port,'.') = 0 THEN
            V_Prim_mVPN_Mon_Rntal_PTP_Port            := V_Prim_mVPN_Mon_Rntal_PTP_Port ||'.00';
            end if;
        WHEN UPPER(sqe_PRICE_tbl_TE(i).price_line_description) = 'MVPN RENTAL PTP - TOTAL PER ADDITION VPN - PRIMARY - MTHLY-RECURRING' THEN
          V_Pr_mVPN_MnRnt_PTP_taddVPN                         := sqe_PRICE_tbl_TE(i).price;
           IF INSTR(V_Pr_mVPN_MnRnt_PTP_taddVPN,'.') = 0 THEN
            V_Pr_mVPN_MnRnt_PTP_taddVPN            := V_Pr_mVPN_MnRnt_PTP_taddVPN ||'.00';
            end if;
        WHEN UPPER(sqe_PRICE_tbl_TE(i).price_line_description) = 'MVPN RENTAL PTP - TOTAL PER ADDITION VPN - PRIMARY - MTHLY-RECURRING' THEN
          V_Pr_BGP_Prefx_One_Time_PTP                         := sqe_PRICE_tbl_TE(i).price;
          -- Added on 4/8/2011 as part of R16 - Start
          vPr_BGP_Prefx_One_Time_PTP_DS                      := sqe_PRICE_tbl_TE(i).discount/100;
          IF instr(vPr_BGP_Prefx_One_Time_PTP_DS   ,'.')     >0 AND instr(vPr_BGP_Prefx_One_Time_PTP_DS  ,'.')<=1 THEN
            vPr_BGP_Prefx_One_Time_PTP_DS                              := 0||vPr_BGP_Prefx_One_Time_PTP_DS ;
          END IF;
          -- Added on 4/8/2011 as part of R16 - End

           IF INSTR(V_Pr_BGP_Prefx_One_Time_PTP,'.') = 0 THEN
            V_Pr_BGP_Prefx_One_Time_PTP            := V_Pr_BGP_Prefx_One_Time_PTP ||'.00';
            end if;
        WHEN UPPER(sqe_PRICE_tbl_TE(i).price_line_description) = 'BGP PREFIXES PTP - PRIMARY - INSTALL-NON-RECURRING' THEN
          V_Pr_BGP_Prefx_One_Time_PTP                         := sqe_PRICE_tbl_TE(i).price;
           IF INSTR(V_Pr_BGP_Prefx_One_Time_PTP,'.') = 0 THEN
            V_Pr_BGP_Prefx_One_Time_PTP            := V_Pr_BGP_Prefx_One_Time_PTP ||'.00';
            end if;
        WHEN UPPER(sqe_PRICE_tbl_TE(i).price_line_description) = 'BGP PREFIXES RENTAL PTP - PRIMARY - MTHLY-RECURRING' THEN
          V_Prim_BGP_Prefx_Monrnt_PTP                         := sqe_PRICE_tbl_TE(i).price;
          -- Added on 4/8/2011 as part of R16 - Start
          vPrim_BGP_Prefx_Mon_rnt_PTP_DS                      := sqe_PRICE_tbl_TE(i).discount/100;
          IF instr(vPrim_BGP_Prefx_Mon_rnt_PTP_DS   ,'.')     >0 AND instr(vPrim_BGP_Prefx_Mon_rnt_PTP_DS  ,'.')<=1 THEN
            vPrim_BGP_Prefx_Mon_rnt_PTP_DS                              := 0||vPrim_BGP_Prefx_Mon_rnt_PTP_DS ;
          END IF;
          -- Added on 4/8/2011 as part of R16 - End

           IF INSTR(V_Prim_BGP_Prefx_Monrnt_PTP,'.') = 0 THEN
            V_Prim_BGP_Prefx_Monrnt_PTP            := V_Prim_BGP_Prefx_Monrnt_PTP ||'.00';
            end if;
        WHEN UPPER(sqe_PRICE_tbl_TE(i).price_line_description) = 'SNMP CPE NET PRICE PTP - PRIMARY' THEN
          V_SNMP_RdAcs_Pr_CPE_OnTm_PTP                        := sqe_PRICE_tbl_TE(i).price;
          -- Added on 4/8/2011 as part of R16 - Start
          vSNMP_RdAcsPr_CPE_OneTm_PTP_DS                      := sqe_PRICE_tbl_TE(i).discount/100;
          IF instr(vSNMP_RdAcsPr_CPE_OneTm_PTP_DS   ,'.')     >0 AND instr(vSNMP_RdAcsPr_CPE_OneTm_PTP_DS  ,'.')<=1 THEN
            vSNMP_RdAcsPr_CPE_OneTm_PTP_DS                              := 0||vSNMP_RdAcsPr_CPE_OneTm_PTP_DS ;
          END IF;
          -- Added on 4/8/2011 as part of R16 - End

           IF INSTR(V_SNMP_RdAcs_Pr_CPE_OnTm_PTP,'.') = 0 THEN
            V_SNMP_RdAcs_Pr_CPE_OnTm_PTP            := V_SNMP_RdAcs_Pr_CPE_OnTm_PTP ||'.00';
            end if;
        WHEN UPPER(sqe_PRICE_tbl_TE(i).price_line_description) = 'OUT OF OFFICE CPE PRICE PTP - PRIMARY' THEN
          V_OOH_trn_up_Mn_CPE_OneTm_PTP                       := sqe_PRICE_tbl_TE(i).price;
          -- Added on 4/8/2011 as part of R16 - Start
          vOOH_trnupMn_CPE_OneTm_PTP_DS                      := sqe_PRICE_tbl_TE(i).discount/100;
          IF instr(vOOH_trnupMn_CPE_OneTm_PTP_DS   ,'.')     >0 AND instr(vOOH_trnupMn_CPE_OneTm_PTP_DS  ,'.')<=1 THEN
            vOOH_trnupMn_CPE_OneTm_PTP_DS                              := 0||vOOH_trnupMn_CPE_OneTm_PTP_DS ;
          END IF;
          -- Added on 4/8/2011 as part of R16 - End

           IF INSTR(V_OOH_trn_up_Mn_CPE_OneTm_PTP,'.') = 0 THEN
            V_OOH_trn_up_Mn_CPE_OneTm_PTP            := V_OOH_trn_up_Mn_CPE_OneTm_PTP ||'.00';
            end if;
        WHEN UPPER(sqe_PRICE_tbl_TE(i).price_line_description) = 'HELPDESK PTP - INSTALL-NON-RECURRING' THEN
          V_Helpdesk_One_Time_PTP                             := sqe_PRICE_tbl_TE(i).price;
          -- Added on 4/8/2011 as part of R16 - Start
          vHelpdesk_One_Time_PTP_DS                      := sqe_PRICE_tbl_TE(i).discount/100;
          IF instr(vHelpdesk_One_Time_PTP_DS   ,'.')     >0 AND instr(vHelpdesk_One_Time_PTP_DS  ,'.')<=1 THEN
            vHelpdesk_One_Time_PTP_DS                              := 0||vHelpdesk_One_Time_PTP_DS ;
          END IF;
          -- Added on 4/8/2011 as part of R16 - End

           IF INSTR(V_Helpdesk_One_Time_PTP,'.') = 0 THEN
            V_Helpdesk_One_Time_PTP            := V_Helpdesk_One_Time_PTP ||'.00';
            end if;
        WHEN UPPER(sqe_PRICE_tbl_TE(i).price_line_description) = 'HELPDESK PTP - MTHLY-RECURRING' THEN
          V_Helpdesk_Mon_Recurring_PTP                        := sqe_PRICE_tbl_TE(i).price;
          -- Added on 4/8/2011 as part of R16 - Start
          vHelpdesk_Mon_Recurring_PTP_DS                      := sqe_PRICE_tbl_TE(i).discount/100;
          IF instr(vHelpdesk_Mon_Recurring_PTP_DS   ,'.')     >0 AND instr(vHelpdesk_Mon_Recurring_PTP_DS  ,'.')<=1 THEN
            vHelpdesk_Mon_Recurring_PTP_DS                              := 0||vHelpdesk_Mon_Recurring_PTP_DS ;
          END IF;
          -- Added on 4/8/2011 as part of R16 - End

           IF INSTR(V_Helpdesk_Mon_Recurring_PTP,'.') = 0 THEN
            V_Helpdesk_Mon_Recurring_PTP            := V_Helpdesk_Mon_Recurring_PTP ||'.00';
            end if;
        WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'Change Management - PTP' THEN
            V_Chnge_Mgmt_PTP                             := sqe_PRICE_tbl_TE(i).price ;
            IF INSTR(V_Chnge_Mgmt_PTP,'.') = 0 THEN
              V_Chnge_Mgmt_PTP            := V_Chnge_Mgmt_PTP ||'.00';
            END IF;

          WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'Proactive CE Monitorings - PTP' THEN
            V_Proactv_CE_Monitoring_PTP                  := sqe_PRICE_tbl_TE(i).price ;
            -- Added on 4/8/2011 as part of R16 - Start
            vProactive_CE_Monitor_PTP_DS                      := sqe_PRICE_tbl_TE(i).discount/100;
            IF instr(vProactive_CE_Monitor_PTP_DS   ,'.')     >0 AND instr(vProactive_CE_Monitor_PTP_DS  ,'.')<=1 THEN
              vProactive_CE_Monitor_PTP_DS                              := 0||vProactive_CE_Monitor_PTP_DS ;
            END IF;
            -- Added on 4/8/2011 as part of R16 - End

            IF INSTR(V_Proactv_CE_Monitoring_PTP,'.') = 0 THEN
              V_Proactv_CE_Monitoring_PTP            := V_Proactv_CE_Monitoring_PTP ||'.00';
            END IF;


        ELSE
          NULL;
        END CASE;
      END LOOP;
    END IF;

 /*      SELECT DISTINCT pl.price_line_description ,
      pd.price ,
      pd.discount BULK COLLECT
    INTO sqe_PRICE_tbl_TE
    FROM quote q
    LEFT OUTER JOIN quote_header qh
    ON q.quote_id = qh.quote_id
    LEFT OUTER JOIN quote_site qs
    ON qh.quote_header_id = qs.quote_header_id
    INNER JOIN site s
    ON qs.site_id = s.site_id
    INNER JOIN line_item lm
    ON s.site_id           = lm.site_id
    AND lm.quote_header_id =in_quoteheaderid
    INNER JOIN line_item_detail ld
    ON lm.line_item_id = ld.line_item_id
    LEFT OUTER JOIN attribute_mapping am
    ON ld.attribute_mapping_id = am.attribute_mapping_id
      /* LEFT OUTER JOIN edca_interface_mapping edca
      ON edca.attribute_mapping_id = am.attribute_mapping_id*/
  /*  LEFT OUTER JOIN price_line_item_detail pd
    ON lm.line_item_id = pd.line_item_id
    LEFT OUTER JOIN price_line_item pl
    ON pd.price_line_item_id = pl.price_line_item_id
    LEFT OUTER JOIN access_qref aq
    ON (pd.external_qref) = UPPER (aq.access_qref)
    LEFT OUTER JOIN cpe_qref cpeq
    ON qs.quote_site_id         = cpeq.quote_site_id
    WHERE q.quote_id            = in_quoteid
    AND qh.quote_header_id      = in_quoteheaderid
    AND s.site_id               =in_site_id
    AND upper(lm.fallback_type) ='PRIMARY'
    and upper(pd.ptp_eup)       = 'PTP'
    AND (qs.active              = 'Y')
    AND (lm.active              = 'Y')
    AND (ld.active              = 'Y')
    AND ( pd.active             = 'Y'
    OR pd.active               IS NULL )
    ORDER BY price_line_description DESC;

     IF sqe_display_tbl_TE.count!=0 THEN
      FOR i                    IN sqe_PRICE_tbl_TE.FIRST..sqe_PRICE_tbl_TE.LAST
      LOOP
        CASE

          WHEN UPPER(sqe_PRICE_tbl_TE(i).price_line_description) = 'ROUTER - PRIMARY - INSTALL-NON-RECURRING' THEN
          V_Prim_cpe_Ins_PTP                                  := sqe_PRICE_tbl_TE(i).price;
           IF INSTR(V_Prim_cpe_Ins_PTP,'.') = 0 THEN
            V_Prim_cpe_Ins_PTP            := V_Prim_cpe_Ins_PTP ||'.00';
            end if;
        WHEN UPPER(sqe_PRICE_tbl_TE(i).price_line_description) = 'ROUTER - PRIMARY - MTHLY-RECURRING' THEN
          V_Prim_cpe_mon_Rntal_PTP                            := sqe_PRICE_tbl_TE(i).price;
           IF INSTR(V_Prim_cpe_mon_Rntal_PTP,'.') = 0 THEN
            V_Prim_cpe_mon_Rntal_PTP            := V_Prim_cpe_mon_Rntal_PTP ||'.00';
            end if;
        WHEN UPPER(sqe_PRICE_tbl_TE(i).price_line_description) = 'LEASED LINE ACCESS - PRIMARY - INSTALL-NON-RECURRING' THEN
          V_Prim_accss_ins_PTP                                := sqe_PRICE_tbl_TE(i).price;
           IF INSTR(V_Prim_accss_ins_PTP,'.') = 0 THEN
            V_Prim_accss_ins_PTP            := V_Prim_accss_ins_PTP ||'.00';
            end if;
        WHEN UPPER(sqe_PRICE_tbl_TE(i).price_line_description) = 'DSL ACCESS - PRIMARY - INSTALL-NON-RECURRING' THEN
        IF upper(v_PRIMARY_ACCESS_TECHNOLOGY )        = 'DSL' THEN
          V_Prim_accss_ins_PTP                                := sqe_PRICE_tbl_TE(i).price;
           IF INSTR(V_Prim_accss_ins_PTP,'.') = 0 THEN
            V_Prim_accss_ins_PTP            := V_Prim_accss_ins_PTP ||'.00';
            end if;
            END IF;
        WHEN UPPER(sqe_PRICE_tbl_TE(i).price_line_description) = 'HVPN ACCESS - PRIMARY - INSTALL-NON-RECURRING' THEN
         IF upper(v_PRIMARY_ACCESS_TECHNOLOGY )        = 'HVPN' THEN
          V_Prim_accss_ins_PTP                                := sqe_PRICE_tbl_TE(i).price;
           IF INSTR(V_Prim_accss_ins_PTP,'.') = 0 THEN
            V_Prim_accss_ins_PTP            := V_Prim_accss_ins_PTP ||'.00';
            end if;
            end if;
        WHEN UPPER(sqe_PRICE_tbl_TE(i).price_line_description) = 'ETHERNET ACCESS - PRIMARY - INSTALL-NON-RECURRING' THEN
         IF upper(v_PRIMARY_ACCESS_TECHNOLOGY )        = 'ETHERNET' THEN
          V_Prim_accss_ins_PTP                                := sqe_PRICE_tbl_TE(i).price;
           IF INSTR(V_Prim_accss_ins_PTP,'.') = 0 THEN
            V_Prim_accss_ins_PTP            := V_Prim_accss_ins_PTP ||'.00';
            end if;
            end if;
        WHEN UPPER(sqe_PRICE_tbl_TE(i).price_line_description) = 'LEASED LINE ACCESS - PRIMARY - MTHLY-RECURRING' THEN
            V_Prim_accss_Mon_rntal_PTP                          := sqe_PRICE_tbl_TE(i).price;
           IF INSTR(V_Prim_accss_Mon_rntal_PTP,'.') = 0 THEN
            V_Prim_accss_Mon_rntal_PTP            := V_Prim_accss_Mon_rntal_PTP ||'.00';
            end if;
        WHEN UPPER(sqe_PRICE_tbl_TE(i).price_line_description) = 'DSL ACCESS - PRIMARY - MTHLY-RECURRING' THEN
          IF upper(v_PRIMARY_ACCESS_TECHNOLOGY )        = 'DSL' THEN
          V_Prim_accss_Mon_rntal_PTP                          := sqe_PRICE_tbl_TE(i).price;
           IF INSTR(V_Prim_accss_Mon_rntal_PTP,'.') = 0 THEN
            V_Prim_accss_Mon_rntal_PTP            := V_Prim_accss_Mon_rntal_PTP ||'.00';
            end if;
            END IF;
        WHEN UPPER(sqe_PRICE_tbl_TE(i).price_line_description) = 'ETHERNET ACCESS - PRIMARY - MTHLY-RECURRING' THEN
         IF upper(v_PRIMARY_ACCESS_TECHNOLOGY )        = 'ETHERNET' THEN
          V_Prim_accss_Mon_rntal_PTP                          := sqe_PRICE_tbl_TE(i).price;
           IF INSTR(V_Prim_accss_Mon_rntal_PTP,'.') = 0 THEN
            V_Prim_accss_Mon_rntal_PTP            := V_Prim_accss_Mon_rntal_PTP ||'.00';
            end if;
            END IF;
        WHEN UPPER(sqe_PRICE_tbl_TE(i).price_line_description) = 'HVPN ACCESS - PRIMARY - MTHLY-RECURRING' THEN
          IF upper(v_PRIMARY_ACCESS_TECHNOLOGY )        = 'HVPN' THEN
          V_Prim_accss_Mon_rntal_PTP                          := sqe_PRICE_tbl_TE(i).price;
           IF INSTR(V_Prim_accss_Mon_rntal_PTP,'.') = 0 THEN
            V_Prim_accss_Mon_rntal_PTP            := V_Prim_accss_Mon_rntal_PTP ||'.00';
            end if;
            END IF;

        WHEN UPPER(sqe_PRICE_tbl_TE(i).price_line_description) = 'MPLS PORT - PRIMARY-INSTALL' THEN
          V_Prim_port_Ins_PTP                                 := sqe_PRICE_tbl_TE(i).price;
           IF INSTR(V_Prim_port_Ins_PTP,'.') = 0 THEN
            V_Prim_port_Ins_PTP            := V_Prim_port_Ins_PTP ||'.00';
            end if;
        WHEN UPPER(sqe_PRICE_tbl_TE(i).price_line_description) = 'PORT RECONFIG - PRIMARY - INSTALL-NON-RECURRING' THEN
          V_Prim_port_reconfig_One_time                       := sqe_PRICE_tbl_TE(i).price;
           IF INSTR(V_Prim_port_reconfig_One_time,'.') = 0 THEN
            V_Prim_port_reconfig_One_time            := V_Prim_port_reconfig_One_time ||'.00';
            end if;
        WHEN UPPER(sqe_PRICE_tbl_TE(i).price_line_description) = 'DSL UPGRADE-DOWNGRADE - PRIMARY - INSTALL-NON-RECURRING' THEN
          V_Prim_DSL_Up_Down_One_time                         := sqe_PRICE_tbl_TE(i).price;
           IF INSTR(V_Prim_cpe_Ins_PTP,'.') = 0 THEN
            V_Prim_cpe_Ins_PTP            := V_Prim_cpe_Ins_PTP ||'.00';
            end if;
        WHEN UPPER(sqe_PRICE_tbl_TE(i).price_line_description) = 'MPLS PORT - PRIMARY-MTHLY' THEN
          V_Prim_port_Mon_rntal_PTP                           := sqe_PRICE_tbl_TE(i).price;
           IF INSTR(V_Prim_cpe_Ins_PTP,'.') = 0 THEN
            V_Prim_cpe_Ins_PTP            := V_Prim_cpe_Ins_PTP ||'.00';
            end if;
        WHEN UPPER(sqe_PRICE_tbl_TE(i).price_line_description) = 'DSL LOCAL LOOP - PRIMARY - INSTALL-NON-RECURRING' THEN
          V_Prim_LLA_Ins_PTP                                  := sqe_PRICE_tbl_TE(i).price;
           IF INSTR(V_Prim_LLA_Ins_PTP,'.') = 0 THEN
            V_Prim_LLA_Ins_PTP            := V_Prim_LLA_Ins_PTP ||'.00';
            end if;
        WHEN UPPER(sqe_PRICE_tbl_TE(i).price_line_description) = 'DSL LOCAL LOOP - PRIMARY - MTHLY-RECURRING' THEN
          V_Prim_LLA_Mon_rntal_PTP                            := sqe_PRICE_tbl_TE(i).price;
           IF INSTR(V_Prim_LLA_Mon_rntal_PTP,'.') = 0 THEN
            V_Prim_LLA_Mon_rntal_PTP            := V_Prim_LLA_Mon_rntal_PTP ||'.00';
            end if;
        WHEN UPPER(sqe_PRICE_tbl_TE(i).price_line_description) = 'ADDITIONAL VPN CONNECTION - PRIMARY - INSTALL' THEN
          V_Prim_mVPN_One_Time_PTP                            := sqe_PRICE_tbl_TE(i).price;
           IF INSTR(V_Prim_mVPN_One_Time_PTP,'.') = 0 THEN
            V_Prim_mVPN_One_Time_PTP            := V_Prim_mVPN_One_Time_PTP ||'.00';
            end if;
        WHEN UPPER(sqe_PRICE_tbl_TE(i).price_line_description) = 'PRIMARY MVPN ONETIME CHARGE' THEN
          V_Prim_mVPN_One_Time_Net_PTP                        := sqe_PRICE_tbl_TE(i).price;
           IF INSTR(V_Prim_mVPN_One_Time_Net_PTP,'.') = 0 THEN
            V_Prim_mVPN_One_Time_Net_PTP            := V_Prim_mVPN_One_Time_Net_PTP ||'.00';
            end if;
        WHEN UPPER(sqe_PRICE_tbl_TE(i).price_line_description) = 'ADDITIONAL VPN CONNECTION - PRIMARY - MTHLY' THEN
          V_Prim_mVPN_Mon_Rntal_PTP_Port                      := sqe_PRICE_tbl_TE(i).price;
           IF INSTR(V_Prim_mVPN_Mon_Rntal_PTP_Port,'.') = 0 THEN
            V_Prim_mVPN_Mon_Rntal_PTP_Port            := V_Prim_mVPN_Mon_Rntal_PTP_Port ||'.00';
            end if;
        WHEN UPPER(sqe_PRICE_tbl_TE(i).price_line_description) = 'MVPN RENTAL PTP - TOTAL PER ADDITION VPN - PRIMARY - MTHLY-RECURRING' THEN
          V_Pr_mVPN_MnRnt_PTP_taddVPN                         := sqe_PRICE_tbl_TE(i).price;
           IF INSTR(V_Pr_mVPN_MnRnt_PTP_taddVPN,'.') = 0 THEN
            V_Pr_mVPN_MnRnt_PTP_taddVPN            := V_Pr_mVPN_MnRnt_PTP_taddVPN ||'.00';
            end if;
        WHEN UPPER(sqe_PRICE_tbl_TE(i).price_line_description) = 'MVPN RENTAL PTP - TOTAL PER ADDITION VPN - PRIMARY - MTHLY-RECURRING' THEN
          V_Pr_BGP_Prefx_One_Time_PTP                         := sqe_PRICE_tbl_TE(i).price;
           IF INSTR(V_Pr_BGP_Prefx_One_Time_PTP,'.') = 0 THEN
            V_Pr_BGP_Prefx_One_Time_PTP            := V_Pr_BGP_Prefx_One_Time_PTP ||'.00';
            end if;
        WHEN UPPER(sqe_PRICE_tbl_TE(i).price_line_description) = 'BGP CONFIGURATION CHARGE - PRIMARY - INSTALL' THEN
          V_Pr_BGP_Prefx_One_Time_PTP                         := sqe_PRICE_tbl_TE(i).price;
           IF INSTR(V_Pr_BGP_Prefx_One_Time_PTP,'.') = 0 THEN
            V_Pr_BGP_Prefx_One_Time_PTP            := V_Pr_BGP_Prefx_One_Time_PTP ||'.00';
            end if;
        WHEN UPPER(sqe_PRICE_tbl_TE(i).price_line_description) = 'BGP PREFIXES RENTAL PTP - PRIMARY - MTHLY-RECURRING' THEN
          V_Prim_BGP_Prefx_Monrnt_PTP                         := sqe_PRICE_tbl_TE(i).price;
           IF INSTR(V_Prim_BGP_Prefx_Monrnt_PTP,'.') = 0 THEN
            V_Prim_BGP_Prefx_Monrnt_PTP            := V_Prim_BGP_Prefx_Monrnt_PTP ||'.00';
            end if;
        WHEN UPPER(sqe_PRICE_tbl_TE(i).price_line_description) = 'SNMP READ ONLY CHARGE' THEN
          V_SNMP_RdAcs_Pr_CPE_OnTm_PTP                        := sqe_PRICE_tbl_TE(i).price;
           IF INSTR(V_SNMP_RdAcs_Pr_CPE_OnTm_PTP,'.') = 0 THEN
            V_SNMP_RdAcs_Pr_CPE_OnTm_PTP            := V_SNMP_RdAcs_Pr_CPE_OnTm_PTP ||'.00';
            end if;
        WHEN UPPER(sqe_PRICE_tbl_TE(i).price_line_description) = 'OUT OF OFFICE INSTALLATION CHARGE' THEN
          V_OOH_trn_up_Mn_CPE_OneTm_PTP                       := sqe_PRICE_tbl_TE(i).price;
           IF INSTR(V_OOH_trn_up_Mn_CPE_OneTm_PTP,'.') = 0 THEN
            V_OOH_trn_up_Mn_CPE_OneTm_PTP            := V_OOH_trn_up_Mn_CPE_OneTm_PTP ||'.00';
            end if;
        WHEN UPPER(sqe_PRICE_tbl_TE(i).price_line_description) = 'HELPDESK OPTION ONE TIME INSTALL CHARGE' THEN
          V_Helpdesk_One_Time_PTP                             := sqe_PRICE_tbl_TE(i).price;
           IF INSTR(V_Helpdesk_One_Time_PTP,'.') = 0 THEN
            V_Helpdesk_One_Time_PTP            := V_Helpdesk_One_Time_PTP ||'.00';
            end if;
        WHEN UPPER(sqe_PRICE_tbl_TE(i).price_line_description) = 'HELPDESK OPTION MONTHLY RECURRING CHARGE' THEN
          V_Helpdesk_Mon_Recurring_PTP                        := sqe_PRICE_tbl_TE(i).price;
           IF INSTR(V_Helpdesk_Mon_Recurring_PTP,'.') = 0 THEN
            V_Helpdesk_Mon_Recurring_PTP            := V_Helpdesk_Mon_Recurring_PTP ||'.00';
            end if;
         WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'Change Management - PTP' THEN
            V_Chnge_Mgmt_PTP                             := sqe_PRICE_tbl_TE(i).price ;
            IF INSTR(V_Chnge_Mgmt_PTP,'.') = 0 THEN
              V_Chnge_Mgmt_PTP            := V_Chnge_Mgmt_PTP ||'.00';
            END IF;

          WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'Proactive CE Monitorings - PTP' THEN
            V_Proactv_CE_Monitoring_PTP                  := sqe_PRICE_tbl_TE(i).price ;
            IF INSTR(V_Proactv_CE_Monitoring_PTP,'.') = 0 THEN
              V_Proactv_CE_Monitoring_PTP            := V_Proactv_CE_Monitoring_PTP ||'.00';
            END IF;
         ELSE
          NULL;
        END CASE;
      END LOOP;
    END IF;   */
    ---------End of Pricing detials for Primary ----------
    -- For Secondary--------
    SELECT DISTINCT am.sqe_display_text ,
      ld.value BULK COLLECT
    INTO sqe_display_tbl_TE
    FROM quote q
    LEFT OUTER JOIN quote_header qh
    ON q.quote_id = qh.quote_id
    LEFT OUTER JOIN quote_site qs
    ON qh.quote_header_id = qs.quote_header_id
    INNER JOIN site s
    ON qs.site_id = s.site_id
    INNER JOIN line_item lm
    ON s.site_id           = lm.site_id
    AND lm.quote_header_id = in_quoteheaderid
    INNER JOIN line_item_detail ld
    ON lm.line_item_id = ld.line_item_id
    LEFT OUTER JOIN attribute_mapping am
    ON ld.attribute_mapping_id = am.attribute_mapping_id
    LEFT OUTER JOIN price_line_item_detail pd
    ON lm.line_item_id = pd.line_item_id
    LEFT OUTER JOIN price_line_item pl
    ON pd.price_line_item_id = pl.price_line_item_id
    LEFT OUTER JOIN access_qref aq
    ON (pd.external_qref) = UPPER (aq.access_qref)
    LEFT OUTER JOIN cpe_qref cpeq
    ON qs.quote_site_id    = cpeq.quote_site_id
    WHERE q.quote_id       = in_quoteid
    AND qh.quote_header_id = in_quoteheaderid
    AND s.site_id          =in_site_id
      -- and upper(sqe_display_text) like '%VALUE OF N%'
    AND upper(lm.fallback_type) = 'SECONDARY'
    AND (qs.active              = 'Y')
    AND (lm.active              = 'Y')
    AND (ld.active              = 'Y')
    AND ( pd.active             = 'Y'
    OR pd.active               IS NULL)
    ORDER BY am.sqe_display_text;
    IF sqe_display_tbl_TE.count!=0 THEN
      FOR I                    IN sqe_display_tbl_TE.FIRST..sqe_display_tbl_TE.LAST
      LOOP
        IF (i =50) THEN
          NULL;
          dbms_output.put_line('i'||i||'sqe_display_tbl_TE(i).sqe_display_TXT1'||sqe_display_tbl_TE(i).sqe_display_TXT1|| 'VALUE1'||sqe_display_tbl_TE(i).VALUE1);
        END IF;
        dbms_output.put_line('i'||i||'sqe_display_tbl_TE(i).sqe_display_TXT1'||sqe_display_tbl_TE(i).sqe_display_TXT1|| 'VALUE1'||sqe_display_tbl_TE(i).VALUE1);
        CASE
        WHEN sqe_display_tbl_TE(i).sqe_display_TXT1 = 'GPoP' THEN
          v_SECONDRY_GPoP_attribute                := sqe_display_tbl_TE(i).VALUE1;
        WHEN sqe_display_tbl_TE(i).sqe_display_TXT1 = 'APoP' THEN
          v_SECONDRY_APoP                          := sqe_display_tbl_TE(i).VALUE1;
        WHEN sqe_display_tbl_TE(i).sqe_display_TXT1 = 'Port Pricing Type' THEN
          v_SECONDRY_TRAFFIC_TYPE                  := sqe_display_tbl_TE(i).VALUE1;
        WHEN sqe_display_tbl_TE(i).sqe_display_TXT1 = 'Access Technology' THEN
          v_SECONDRY_ACCESS_TYPE                   := sqe_display_tbl_TE(i).VALUE1;
          /* IF UPPER(v_SECONDRY_ACCESS_TYPE) ='DSL' THEN
          V_SECONDRY_DSL_SUPPLIER_ID               := V_SECONDRY_DSL_SUPPLIER_ID;
          ELSE
          V_SECONDRY_DSL_SUPPLIER_ID := NULL;
          END IF;*/
          IF UPPER(v_SECONDRY_ACCESS_TYPE)  ='DSL' THEN
            V_SECONDRY_DSL_SUPPLIER_ID     := V_SECONDRY_DSL_SUPPLIER_ID ;
            V_SEC_DSL_ACES_DWNSTRM         := SUBSTR(v_SEC_ACCESS_SPEED_text,1,instr(v_SEC_ACCESS_SPEED_text,'/')-1);
            V_SECONDRY_DSL_ACCESS_UPSTREAM := SUBSTR(v_SEC_ACCESS_SPEED_text,instr(v_SEC_ACCESS_SPEED_text,'/')  +1 );
            V_SEC_DSL_ACES_DWNSTRM         := REPLACE(V_SEC_DSL_ACES_DWNSTRM,'K');
            V_SECONDRY_DSL_ACCESS_UPSTREAM := REPLACE(v_SECONDRY_DSL_ACCESS_UPSTREAM ,'K');
            V_sec_DSL_hVPN_acces_upstrm    := V_SECONDRY_DSL_ACCESS_UPSTREAM;
            V_sec_DSL_hVPN_acces_dwnstrm   := V_SEC_DSL_ACES_DWNSTRM;
        /*  ELSE
            V_SECONDRY_DSL_SUPPLIER_ID := NULL; */
          END IF;
        WHEN sqe_display_tbl_TE(i).sqe_display_TXT1 = 'Value of N' THEN
          v_SECONDRY_N_E1_T1                       := sqe_display_tbl_TE(i).VALUE1;
        WHEN sqe_display_tbl_TE(i).sqe_display_TXT1 ='Access Speed' THEN
          v_SECONDRY_ACCESS_SPEED                  := sqe_display_tbl_TE(i).VALUE1;
        WHEN sqe_display_tbl_TE(i).sqe_display_TXT1 ='Access Speed Text Value'
          /*'Access Speed'*/
          THEN
          v_SEC_ACCESS_SPEED_text                := sqe_display_tbl_TE(i).VALUE1;
          IF v_SECONDRY_ACCESS_SPEED             IS NULL OR UPPER(v_SECONDRY_ACCESS_SPEED) ='NULL' THEN
            v_SECONDRY_ACCESS_SPEED              := sqe_display_tbl_TE(i).VALUE1;
            IF instr(v_SECONDRY_ACCESS_SPEED,'M') > 0 THEN
              v_SECONDRY_ACCESS_SPEED            := SUBSTR(v_SECONDRY_ACCESS_SPEED,1,instr(v_PRIMARY_ACCESS_SPEED,'M')-1)*1024;
              IF v_SECONDRY_ACCESS_SPEED         IS NULL THEN
                v_SECONDRY_ACCESS_SPEED          := 1000;
              END IF;
            END IF;
            IF instr(v_SECONDRY_ACCESS_SPEED,'K') > 0 THEN
              v_SECONDRY_ACCESS_SPEED            := SUBSTR(v_SECONDRY_ACCESS_SPEED,1,instr(v_PRIMARY_ACCESS_SPEED,'K')-1)*1000;
              IF v_SECONDRY_ACCESS_SPEED         IS NULL THEN
                v_SECONDRY_ACCESS_SPEED          := 1000;
              END IF;
            END IF;
          END IF;
        WHEN sqe_display_tbl_TE(i).sqe_display_TXT1 ='Port Speed' THEN
          v_SECONDRY_PORT_SPEED                    := sqe_display_tbl_TE(i).VALUE1;
          /*IF v_SECONDRY_ACCESS_TYPE                 ='DSL' THEN
          V_SEC_DSL_ACES_DWNSTRM                 :=
          SUBSTR(sqe_display_tbl_TE(i).VALUE1,1,instr(sqe_display_tbl_TE(i).VALUE1,'/')-1);
          V_SECONDRY_DSL_ACCESS_UPSTREAM         :=
          SUBSTR(sqe_display_tbl_TE(i).VALUE1,instr(sqe_display_tbl_TE(i).VALUE1,'/')  +1 );
          els*/
          IF Upper(v_SECONDRY_ACCESS_TYPE)               = 'HVPN' THEN
            V_SECND_hVPN_PRT_DWNSTRM_SPEED              := SUBSTR(sqe_display_tbl_TE(i).VALUE1,1,instr(sqe_display_tbl_TE(i).VALUE1,'/')-1);
            V_SEC_hVPN_PRT_UPSTRM_SPD                   := SUBSTR(sqe_display_tbl_TE(i).VALUE1,instr(sqe_display_tbl_TE(i).VALUE1,'/')  +1 );
            IF instr(V_SECND_hVPN_PRT_DWNSTRM_SPEED,'M') > 0 THEN
              V_SECND_hVPN_PRT_DWNSTRM_SPEED            := SUBSTR(V_SECND_hVPN_PRT_DWNSTRM_SPEED,1,instr(V_SECND_hVPN_PRT_DWNSTRM_SPEED,'M')-1)*1000;
            END IF;
            IF instr(V_SEC_hVPN_PRT_UPSTRM_SPD,'M') > 0 THEN
              V_SEC_hVPN_PRT_UPSTRM_SPD            := SUBSTR(V_SEC_hVPN_PRT_UPSTRM_SPD,1,instr(V_SEC_hVPN_PRT_UPSTRM_SPD,'M')-1)*1000;
            END IF;
            V_SECND_hVPN_PRT_DWNSTRM_SPEED := REPLACE(V_SECND_hVPN_PRT_DWNSTRM_SPEED,'K');
            V_SEC_hVPN_PRT_UPSTRM_SPD      := REPLACE(V_SEC_hVPN_PRT_UPSTRM_SPD,'K');
          END IF;
        WHEN sqe_display_tbl_TE(i).sqe_display_TXT1 ='Offer Name (Supplier Product Name)' THEN
          v_SECONDRY_DSL_SUPP_OFFR_NAME            := sqe_display_tbl_TE(i).VALUE1;
        WHEN sqe_display_tbl_TE(i).sqe_display_TXT1 ='Service Variant'
          /*'DSL Type '*/
          THEN
          v_SECONDRY_DSL_TYPE                      := sqe_display_tbl_TE(i).VALUE1;
        WHEN sqe_display_tbl_TE(i).sqe_display_TXT1 ='Contention Ratio' THEN
          v_SECONDRY_DSL_CONTENTION                := SUBSTR(sqe_display_tbl_TE(i).VALUE1,instr(sqe_display_tbl_TE(i).VALUE1,':')+1);
        WHEN sqe_display_tbl_TE(i).sqe_display_TXT1 ='Local Loop' THEN
          V_SEC_DSL_LCAL_LP_ACES                   := sqe_display_tbl_TE(i).VALUE1;
          IF upper(V_SEC_DSL_LCAL_LP_ACES)          = 'YES' THEN
            V_SEC_DSL_LCAL_LP_ACES                 := 'Y';
          Elsif UPPER( V_SEC_DSL_LCAL_LP_ACES)      = 'NO' THEN
            V_SEC_DSL_LCAL_LP_ACES                 := 'N';
          END IF;
        WHEN sqe_display_tbl_TE(i).sqe_display_TXT1 ='AF Multimedia' THEN
          v_SECONDRY_AF_MULTIMEDIA                 := sqe_display_tbl_TE(i).VALUE1;
        WHEN sqe_display_tbl_TE(i).sqe_display_TXT1 ='EF CIPR' THEN
          v_SECONDRY_EF_SPEED                      := sqe_display_tbl_TE(i).VALUE1;
        WHEN sqe_display_tbl_TE(i).sqe_display_TXT1 ='DE CIPR' THEN
          v_SECONDRY_DE_SPEED                      :=sqe_display_tbl_TE(i).VALUE1;
          IF UPPER(v_SECONDRY_DE_SPEED) LIKE '%PLEASE%SELECT%' THEN
            v_SECONDRY_DE_SPEED := NULL;
          END IF;
        WHEN sqe_display_tbl_TE(i).sqe_display_TXT1 ='Total No. of VPNs' THEN
          --  IF sqe_display_tbl_TE(i).sqe_display_TXT1 >1 THEN
          --Commented by Jay assuming the check above is to be done on value.
          IF sqe_display_tbl_TE(i).VALUE1 >1 THEN
            v_NO_OF_ADDI_VPN_SCNDRY_PORT := sqe_display_tbl_TE(i).VALUE1 ;
          END IF;
        WHEN sqe_display_tbl_TE(i).sqe_display_TXT1 ='BGP Prefix Range' THEN
          V_NO_OF_BGP_PRFXE_SCDRY_PRT              := sqe_display_tbl_TE(i).VALUE1;
          IF UPPER(V_NO_OF_BGP_PRFXE_SCDRY_PRT) LIKE '%NULL' THEN
            V_NO_OF_BGP_PRFXE_SCDRY_PRT := NULL;
          END IF;
        WHEN sqe_display_tbl_TE(i).sqe_display_TXT1 ='AF1 CIPR' THEN
          V_SE_AF1_CIPR                            := sqe_display_tbl_TE(i).VALUE1;
        WHEN sqe_display_tbl_TE(i).sqe_display_TXT1 ='AF2 CIPR' THEN
          V_SE_AF2_CIPR                            := sqe_display_tbl_TE(i).VALUE1;
        WHEN sqe_display_tbl_TE(i).sqe_display_TXT1 ='AF3 CIPR' THEN
          V_SE_AF3_CIPR                            := sqe_display_tbl_TE(i).VALUE1;
        WHEN sqe_display_tbl_TE(i).sqe_display_TXT1 ='AF4 CIPR' THEN
          V_SE_AF4_CIPR                            := sqe_display_tbl_TE(i).VALUE1;
        WHEN sqe_display_tbl_TE(i).sqe_display_TXT1 ='Resiliency' THEN--Not needed here becuse java passing this attribute only in Primary
          V_RESILIENCE_TYPE                        := sqe_display_tbl_TE(i).VALUE1;
        WHEN sqe_display_tbl_TE(i).sqe_display_TXT1 ='NNI Flag' THEN
          V_SECONDRY_NNI_PORT                      := sqe_display_tbl_TE(i).VALUE1;
          IF upper(V_SECONDRY_NNI_PORT)             = 'YES' THEN
            V_SECONDRY_NNI_PORT                    := 'Y';
          Elsif UPPER( V_SECONDRY_NNI_PORT)         = 'NO' THEN
            V_SECONDRY_NNI_PORT                    := 'N';
          END IF;
          IF UPPER(V_SECONDRY_NNI_PORT)     ='Y' THEN
            V_SCNDRY_REACH_IN_NNI_PRT_NAME := V_SECONDRY_DSL_SUPPLIER_ID ;
            V_SECONDRY_DSL_SUPPLIER_ID     := NULL;
          END IF;
        WHEN sqe_display_tbl_TE(i).sqe_display_TXT1 ='Access Supplier  ' THEN
          V_SECONDRY_DSL_SUPPLIER_ID               := sqe_display_tbl_TE(i).VALUE1;
        WHEN sqe_display_tbl_TE(i).sqe_display_TXT1 ='Commercial Marketing Speed' THEN
          V_SECONDRY_DSL_PORT_SPEED                := sqe_display_tbl_TE(i).VALUE1;
        WHEN sqe_display_tbl_TE(i).sqe_display_TXT1 = 'Access Type' THEN
          V_SEC_ACCESS_TYPE                        := sqe_display_tbl_TE(i).VALUE1;
          IF v_SECONDRY_ACCESS_TYPE                 ='DSL' AND V_SEC_ACCESS_TYPE ='SDSL' THEN
            V_SEC_DSL_ACES_DWNSTRM                 := v_SEC_ACCESS_SPEED_text;
            V_SECONDRY_DSL_ACCESS_UPSTREAM         := v_SEC_ACCESS_SPEED_text;
            V_SEC_DSL_ACES_DWNSTRM                 := REPLACE(V_SEC_DSL_ACES_DWNSTRM,'K') ;
            V_SECONDRY_DSL_ACCESS_UPSTREAM         := REPLACE(V_SECONDRY_DSL_ACCESS_UPSTREAM,'K');
            V_sec_DSL_hVPN_acces_upstrm            := V_SECONDRY_DSL_ACCESS_UPSTREAM;
            V_sec_DSL_hVPN_acces_dwnstrm           := V_SEC_DSL_ACES_DWNSTRM;
          END IF;
          IF upper(v_SECONDRY_ACCESS_TYPE) = 'HVPN' THEN
            -- V_PRIM_hVPN_ACES_PRD_TYPE      :=V_PRIM_hVPN_ACES_PRD_TYPE ;
            IF instr(v_SEC_ACCESS_SPEED_text,'M') > 0 THEN
              v_SECONDRY_ACCESS_SPEED            := SUBSTR(v_SEC_ACCESS_SPEED_text,1,instr(v_SEC_ACCESS_SPEED_text,'M')-1)*1000;
            END IF;
            IF instr(v_SEC_ACCESS_SPEED_text,'/')      > 0 THEN
              IF instr(v_SEC_ACCESS_SPEED_text,'K')    > 0 THEN
                v_hvpn_a                              := SUBSTR(v_SEC_ACCESS_SPEED_text,1,instr(v_SEC_ACCESS_SPEED_text,'K')-1);
                v_hvpn_b                              := SUBSTR(v_SEC_ACCESS_SPEED_text, (instr(v_SEC_ACCESS_SPEED_text,'/')+1),instr(v_SEC_ACCESS_SPEED_text,'K')-1);
              elsif instr(v_SEC_ACCESS_SPEED_text,'M') > 0 THEN
                v_hvpn_a                              := SUBSTR(v_SEC_ACCESS_SPEED_text,1,instr(v_SEC_ACCESS_SPEED_text,'M')-1) *1000;
                v_hvpn_b                              := SUBSTR(v_SEC_ACCESS_SPEED_text, (instr(v_SEC_ACCESS_SPEED_text,'/')+1),instr(v_SEC_ACCESS_SPEED_text,'M')-1) * 1000;
              END IF;
            ELSE
              v_hvpn_a := v_SEC_ACCESS_SPEED_text;
              v_hvpn_b := v_SEC_ACCESS_SPEED_text;
            END IF;
            IF instr(v_hvpn_a,'M')    >0 THEN
              v_hvpn_a               := SUBSTR(v_hvpn_a,1,instr(v_hvpn_a,'M')-1)*1000;
            elsif instr(v_hvpn_a,'K') >0 THEN
              v_hvpn_a               := SUBSTR(v_hvpn_a,1,instr(v_hvpn_a,'K')-1);
            END IF;
            IF instr(v_hvpn_b,'M')    >0 THEN
              v_hvpn_b               := SUBSTR(v_hvpn_b,1,instr(v_hvpn_b,'M')-1)*1000;
            elsif instr(v_hvpn_b,'K') >0 THEN
              v_hvpn_b               := SUBSTR(v_hvpn_b,1,instr(v_hvpn_b,'K')-1);
            END IF;
            V_sec_DSL_hVPN_acces_dwnstrm := v_hvpn_a ;
            V_sec_DSL_hVPN_acces_upstrm  :=v_hvpn_b;
          END IF;
        ELSE
          NULL;
        END CASE;
      END LOOP;
    END IF;
    IF v_SECONDRY_ACCESS_TYPE ='DSL' --AND INSTR(v_SEC_ACCESS_SPEED_text, '/') = 0 THEN
      THEN
      V_SECONDRY_ACCESS_SPEED := NULL;
    END IF;
    IF v_SECONDRY_ACCESS_TYPE         ='DSL' AND V_SEC_ACCESS_TYPE ='DSL ETH' AND UPPER(v_SECONDRY_DSL_TYPE) IN ('PLUS','PREMIUM') THEN
      V_SEC_DSL_ACES_DWNSTRM         := v_SEC_ACCESS_SPEED_text;
      V_SECONDRY_DSL_ACCESS_UPSTREAM := v_SEC_ACCESS_SPEED_text;
      V_SEC_DSL_ACES_DWNSTRM         := REPLACE(V_SEC_DSL_ACES_DWNSTRM,'K') ;
      V_SECONDRY_DSL_ACCESS_UPSTREAM := REPLACE(V_SECONDRY_DSL_ACCESS_UPSTREAM,'K');
      V_sec_DSL_hVPN_acces_upstrm    := V_SECONDRY_DSL_ACCESS_UPSTREAM;
      V_sec_DSL_hVPN_acces_dwnstrm   := V_SEC_DSL_ACES_DWNSTRM;
    END IF;
    /*   IF v_SECONDRY_ACCESS_TYPE ='HVPN' --AND INSTR(v_SEC_ACCESS_SPEED_text, '/') = 0 THEN
    then   V_SECONDRY_PORT_SPEED := Null;
    End If;*/
    V_SECONDRY_TOTAL_AF := NVL(V_SE_AF1_CIPR ,0) + NVL(V_SE_AF2_CIPR,0) + NVL(V_SE_AF3_CIPR,0)+ NVL(V_SE_AF4_CIPR,0);
    --Strating of Pricing detials for Secondary----------
    BEGIN
      SELECT DISTINCT pl.price_line_description,
        pd.price ,
        pd.discount BULK COLLECT
      INTO sqe_PRICE_tbl_TE
      FROM quote q
      LEFT OUTER JOIN quote_header qh
      ON q.quote_id = qh.quote_id
      LEFT OUTER JOIN quote_site qs
      ON qh.quote_header_id = qs.quote_header_id
      INNER JOIN site s
      ON qs.site_id = s.site_id
      INNER JOIN line_item lm
      ON s.site_id           = lm.site_id
      AND lm.quote_header_id =in_quoteheaderid
      INNER JOIN line_item_detail ld
      ON lm.line_item_id = ld.line_item_id
      LEFT OUTER JOIN attribute_mapping am
      ON ld.attribute_mapping_id = am.attribute_mapping_id
        /*  LEFT OUTER JOIN edca_interface_mapping edca
        ON edca.attribute_mapping_id = am.attribute_mapping_id*/
      LEFT OUTER JOIN price_line_item_detail pd
      ON lm.line_item_id = pd.line_item_id
      LEFT OUTER JOIN price_line_item pl
      ON pd.price_line_item_id = pl.price_line_item_id
      LEFT OUTER JOIN access_qref aq
      ON (pd.external_qref) = UPPER (aq.access_qref)
      LEFT OUTER JOIN cpe_qref cpeq
      ON qs.quote_site_id         = cpeq.quote_site_id
      WHERE q.quote_id            = in_quoteid
      AND qh.quote_header_id      = in_quoteheaderid
      AND s.site_id               =in_site_id
      AND upper(lm.fallback_type) = 'SECONDARY'
    --  and upper(pd.ptp_eup)       = 'EUP'
      AND (qs.active              = 'Y')
      AND (lm.active              = 'Y')
      AND (ld.active              = 'Y')
      AND ( pd.active             = 'Y'
      OR pd.active               IS NULL )
      ORDER BY PRICE_LINE_DESCRIPTION DESC;
      IF sqe_PRICE_tbl_TE.count!=0 THEN
        FOR i                  IN sqe_PRICE_tbl_TE.FIRST..sqe_PRICE_tbl_TE.LAST
        LOOP
          CASE
          WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'Router - Secondary - Install-non-recurring' THEN
            V_SECONDRY_CPE_INSTALL_EUP                   := sqe_PRICE_tbl_TE(i).price ;
            V_SECONDRY_CPE_INST_EUP_DISCT                := sqe_PRICE_tbl_TE(i).discount/100;
            IF instr(V_SECONDRY_CPE_INST_EUP_DISCT,'.')   >0 AND instr(V_SECONDRY_CPE_INST_EUP_DISCT,'.')<=1 THEN
              V_SECONDRY_CPE_INST_EUP_DISCT              := 0||V_SECONDRY_CPE_INST_EUP_DISCT;
            END IF;
            IF INSTR(V_SECONDRY_CPE_INSTALL_EUP,'.') = 0 THEN
              V_SECONDRY_CPE_INSTALL_EUP            := V_SECONDRY_CPE_INSTALL_EUP ||'.00';
            END IF;
          WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'Router - Secondary - Mthly-recurring' THEN
            V_SECND_CPE_MONTHLY_RENTAL_EUP               := sqe_PRICE_tbl_TE(i).price;
            V_SECND_CPE_MTHLY_RNT_EUP_DISC               := sqe_PRICE_tbl_TE(i).discount/100;
            IF instr(V_SECND_CPE_MTHLY_RNT_EUP_DISC,'.')  >0 AND instr(V_SECND_CPE_MTHLY_RNT_EUP_DISC,'.')<=1 THEN
              V_SECND_CPE_MTHLY_RNT_EUP_DISC             := 0||V_SECND_CPE_MTHLY_RNT_EUP_DISC;
            END IF;
            IF INSTR(V_SECND_CPE_MONTHLY_RENTAL_EUP,'.') = 0 THEN
              V_SECND_CPE_MONTHLY_RENTAL_EUP            := V_SECND_CPE_MONTHLY_RENTAL_EUP ||'.00';
            END IF;
          WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'Leased Line Access - Secondary - Install-non-recurring' THEN
            V_SECONDRY_ACCESS_INSTALL_EUP                := sqe_PRICE_tbl_TE(i).price ;
            V_SEC_ACES_INSTL_EUP_DIS                     := sqe_PRICE_tbl_TE(i).discount/100;
            IF instr(V_SEC_ACES_INSTL_EUP_DIS,'.')        >0 AND instr(V_SEC_ACES_INSTL_EUP_DIS,'.')<=1 THEN
              V_SEC_ACES_INSTL_EUP_DIS                   := 0||V_SEC_ACES_INSTL_EUP_DIS;
            END IF;
            IF INSTR(V_SECONDRY_ACCESS_INSTALL_EUP,'.') = 0 THEN
              V_SECONDRY_ACCESS_INSTALL_EUP            := V_SECONDRY_ACCESS_INSTALL_EUP ||'.00';
            END IF;
          WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'DSL Access - Secondary - Install-non-recurring' THEN
            IF UPPER(V_SECONDRY_ACCESS_INSTALL_EUP)       = 'DSL' THEN
              V_SECONDRY_ACCESS_INSTALL_EUP              := sqe_PRICE_tbl_TE(i).price ;
              V_SEC_ACES_INSTL_EUP_DIS                   := sqe_PRICE_tbl_TE(i).discount/100;
              IF instr(V_SEC_ACES_INSTL_EUP_DIS,'.')      >0 AND instr(V_SEC_ACES_INSTL_EUP_DIS,'.')<=1 THEN
                V_SEC_ACES_INSTL_EUP_DIS                 := 0||V_SEC_ACES_INSTL_EUP_DIS;
              END IF;
              IF INSTR(V_SECONDRY_ACCESS_INSTALL_EUP,'.') = 0 THEN
                V_SECONDRY_ACCESS_INSTALL_EUP            := V_SECONDRY_ACCESS_INSTALL_EUP ||'.00';
              END IF;
            END IF;
          WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'Ethernet Access - Secondary -
Install-non-recurring' THEN
            IF UPPER(V_SECONDRY_ACCESS_INSTALL_EUP)       = 'ETHERNET' THEN
              V_SECONDRY_ACCESS_INSTALL_EUP              := sqe_PRICE_tbl_TE(i).price ;
              V_SEC_ACES_INSTL_EUP_DIS                   := sqe_PRICE_tbl_TE(i).discount/100;
              IF instr(V_SEC_ACES_INSTL_EUP_DIS,'.')      >0 AND instr(V_SEC_ACES_INSTL_EUP_DIS,'.')<=1 THEN
                V_SEC_ACES_INSTL_EUP_DIS                 := 0||V_SEC_ACES_INSTL_EUP_DIS;
              END IF;
              IF INSTR(V_SECONDRY_ACCESS_INSTALL_EUP,'.') = 0 THEN
                V_SECONDRY_ACCESS_INSTALL_EUP            := V_SECONDRY_ACCESS_INSTALL_EUP ||'.00';
              END IF;
            END IF;
          WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'HVPN Access - Secondary - Install-non-recurring' THEN
            IF UPPER(V_SECONDRY_ACCESS_INSTALL_EUP)       = 'HVPN' THEN
              V_SECONDRY_ACCESS_INSTALL_EUP              := sqe_PRICE_tbl_TE(i).price ;
              V_SEC_ACES_INSTL_EUP_DIS                   := sqe_PRICE_tbl_TE(i).discount/100;
              IF instr(V_SEC_ACES_INSTL_EUP_DIS,'.')      >0 AND instr(V_SEC_ACES_INSTL_EUP_DIS,'.')<=1 THEN
                V_SEC_ACES_INSTL_EUP_DIS                 := 0||V_SEC_ACES_INSTL_EUP_DIS;
              END IF;
              IF INSTR(V_SECONDRY_ACCESS_INSTALL_EUP,'.') = 0 THEN
                V_SECONDRY_ACCESS_INSTALL_EUP            := V_SECONDRY_ACCESS_INSTALL_EUP ||'.00';
              END IF;
            END IF;
          WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'Leased Line Access - Secondary - Mthly-recurring' THEN
            V_SECND_ACCESS_MNTHLY_RENT_EUP               := sqe_PRICE_tbl_TE(i).price ;
            V_SEC_ACES_MNT_RNT_EUP_DIS                   := sqe_PRICE_tbl_TE(i).discount/100;
            IF instr(V_SEC_ACES_MNT_RNT_EUP_DIS,'.')      >0 AND instr(V_SEC_ACES_MNT_RNT_EUP_DIS,'.')<=1 THEN
              V_SEC_ACES_MNT_RNT_EUP_DIS                 := 0||V_SEC_ACES_MNT_RNT_EUP_DIS;
            END IF;
            IF INSTR(V_SECND_ACCESS_MNTHLY_RENT_EUP,'.') = 0 THEN
              V_SECND_ACCESS_MNTHLY_RENT_EUP            := V_SECND_ACCESS_MNTHLY_RENT_EUP ||'.00';
            END IF;
          WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'DSL Access - Secondary - Mthly-recurring' THEN
            IF UPPER(V_SECONDRY_ACCESS_INSTALL_EUP)       = 'DSL' THEN
              V_SECND_ACCESS_MNTHLY_RENT_EUP             := sqe_PRICE_tbl_TE(i).price ;
              V_SEC_ACES_MNT_RNT_EUP_DIS                 := sqe_PRICE_tbl_TE(i).discount/100;
              IF instr(V_SEC_ACES_MNT_RNT_EUP_DIS,'.')    >0 AND instr(V_SEC_ACES_MNT_RNT_EUP_DIS,'.')<=1 THEN
                V_SEC_ACES_MNT_RNT_EUP_DIS               := 0||V_SEC_ACES_MNT_RNT_EUP_DIS;
              END IF;
              IF INSTR(V_SECND_ACCESS_MNTHLY_RENT_EUP,'.') = 0 THEN
                V_SECND_ACCESS_MNTHLY_RENT_EUP            := V_SECND_ACCESS_MNTHLY_RENT_EUP ||'.00';
              END IF;
            END IF;
          WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'Ethernet Access - Secondary - Mthly-recurring' THEN
            IF UPPER(V_SECONDRY_ACCESS_INSTALL_EUP)       = 'ETHERNET' THEN
              V_SECND_ACCESS_MNTHLY_RENT_EUP             := sqe_PRICE_tbl_TE(i).price ;
              V_SEC_ACES_MNT_RNT_EUP_DIS                 := sqe_PRICE_tbl_TE(i).discount/100;
              IF instr(V_SEC_ACES_MNT_RNT_EUP_DIS,'.')    >0 AND instr(V_SEC_ACES_MNT_RNT_EUP_DIS,'.')<=1 THEN
                V_SEC_ACES_MNT_RNT_EUP_DIS               := 0||V_SEC_ACES_MNT_RNT_EUP_DIS;
              END IF;
              IF INSTR(V_SECND_ACCESS_MNTHLY_RENT_EUP,'.') = 0 THEN
                V_SECND_ACCESS_MNTHLY_RENT_EUP            := V_SECND_ACCESS_MNTHLY_RENT_EUP ||'.00';
              END IF;
            END IF;
          WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'HVPN Access - Secondary - Mthly-recurring' THEN
            IF UPPER(V_SECONDRY_ACCESS_INSTALL_EUP)       = 'HVPN' THEN
              V_SECND_ACCESS_MNTHLY_RENT_EUP             := sqe_PRICE_tbl_TE(i).price ;
              V_SEC_ACES_MNT_RNT_EUP_DIS                 := sqe_PRICE_tbl_TE(i).discount/100;
              IF instr(V_SEC_ACES_MNT_RNT_EUP_DIS,'.')    >0 AND instr(V_SEC_ACES_MNT_RNT_EUP_DIS,'.')<=1 THEN
                V_SEC_ACES_MNT_RNT_EUP_DIS               := 0||V_SEC_ACES_MNT_RNT_EUP_DIS;
              END IF;
              IF INSTR(V_SECND_ACCESS_MNTHLY_RENT_EUP,'.') = 0 THEN
                V_SECND_ACCESS_MNTHLY_RENT_EUP            := V_SECND_ACCESS_MNTHLY_RENT_EUP ||'.00';
              END IF;
            END IF;
          WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'MPLS Port - Secondary-Install' THEN
            V_SECONDRY_PORT_INSTALL_EUP                  := sqe_PRICE_tbl_TE(i).price ;
            V_SEC_PRT_INSTL_EUP_DIS                      := sqe_PRICE_tbl_TE(i).discount/100;
            IF instr(V_SEC_PRT_INSTL_EUP_DIS,'.')         >0 AND instr(V_SEC_PRT_INSTL_EUP_DIS,'.')<=1 THEN
              V_SEC_PRT_INSTL_EUP_DIS                    := 0||V_SEC_PRT_INSTL_EUP_DIS;
            END IF;
            IF INSTR(V_SECONDRY_PORT_INSTALL_EUP,'.') = 0 THEN
              V_SECONDRY_PORT_INSTALL_EUP            := V_SECONDRY_PORT_INSTALL_EUP ||'.00';
            END IF;

           WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'iVPN Port - Secondary-Install' THEN
            V_SECONDRY_PORT_INSTALL_EUP                  := sqe_PRICE_tbl_TE(i).price ;
            V_SEC_PRT_INSTL_EUP_DIS                      := sqe_PRICE_tbl_TE(i).discount/100;
            IF instr(V_SEC_PRT_INSTL_EUP_DIS,'.')         >0 AND instr(V_SEC_PRT_INSTL_EUP_DIS,'.')<=1 THEN
              V_SEC_PRT_INSTL_EUP_DIS                    := 0||V_SEC_PRT_INSTL_EUP_DIS;
            END IF;
            IF INSTR(V_SECONDRY_PORT_INSTALL_EUP,'.') = 0 THEN
              V_SECONDRY_PORT_INSTALL_EUP            := V_SECONDRY_PORT_INSTALL_EUP ||'.00';
            END IF;

          WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'MPLS Port - Secondary-Mthly' THEN
            V_SEC_PRT_MNTH_RNT_EUP                       := sqe_PRICE_tbl_TE(i).price ;
            V_SECND_PORT_MNTH_RNTL_EUP_DIS               := sqe_PRICE_tbl_TE(i).discount/100;
            IF instr(V_SECND_PORT_MNTH_RNTL_EUP_DIS,'.')  >0 AND instr(V_SECND_PORT_MNTH_RNTL_EUP_DIS,'.')<=1 THEN
              V_SECND_PORT_MNTH_RNTL_EUP_DIS             := 0||V_SECND_PORT_MNTH_RNTL_EUP_DIS;
            END IF;
            IF INSTR(V_SEC_PRT_MNTH_RNT_EUP,'.') = 0 THEN
              V_SEC_PRT_MNTH_RNT_EUP            := V_SEC_PRT_MNTH_RNT_EUP ||'.00';
            END IF;

            WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'iVPN Port - Secondary-Mthly' THEN
            V_SEC_PRT_MNTH_RNT_EUP                       := sqe_PRICE_tbl_TE(i).price ;
            V_SECND_PORT_MNTH_RNTL_EUP_DIS               := sqe_PRICE_tbl_TE(i).discount/100;
            IF instr(V_SECND_PORT_MNTH_RNTL_EUP_DIS,'.')  >0 AND instr(V_SECND_PORT_MNTH_RNTL_EUP_DIS,'.')<=1 THEN
              V_SECND_PORT_MNTH_RNTL_EUP_DIS             := 0||V_SECND_PORT_MNTH_RNTL_EUP_DIS;
            END IF;
            IF INSTR(V_SEC_PRT_MNTH_RNT_EUP,'.') = 0 THEN
              V_SEC_PRT_MNTH_RNT_EUP            := V_SEC_PRT_MNTH_RNT_EUP ||'.00';
            END IF;
          WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'DSL Local Loop - Secondary -
Install-non-recurring' THEN
            V_SECONDRY_LLA_INSTALL_EUP                   := sqe_PRICE_tbl_TE(i).price ;
            V_SEC_LLA_INSTL_EUP_DIS                      := sqe_PRICE_tbl_TE(i).discount/100;
            IF instr(V_SEC_LLA_INSTL_EUP_DIS,'.')         >0 AND instr(V_SEC_LLA_INSTL_EUP_DIS,'.')<=1 THEN
              V_SEC_LLA_INSTL_EUP_DIS                    := 0||V_SEC_LLA_INSTL_EUP_DIS;
            END IF;
            IF INSTR(V_SECONDRY_LLA_INSTALL_EUP,'.') = 0 THEN
              V_SECONDRY_LLA_INSTALL_EUP            := V_SECONDRY_LLA_INSTALL_EUP ||'.00';
            END IF;
          WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'DSL Local Loop - Secondary - Mthly-recurring' THEN
            V_SEC_LLA_MNT_RNTL_EUP                       := sqe_PRICE_tbl_TE(i).price ;
            V_SEC_LLA_MNT_RNT_EUP_DIS                    := sqe_PRICE_tbl_TE(i).discount/100;
            IF instr(V_SEC_LLA_MNT_RNT_EUP_DIS,'.')       >0 AND instr(V_SEC_LLA_MNT_RNT_EUP_DIS,'.')<=1 THEN
              V_SEC_LLA_MNT_RNT_EUP_DIS                  := 0||V_SEC_LLA_MNT_RNT_EUP_DIS;
            END IF;
            IF INSTR(V_SEC_LLA_MNT_RNTL_EUP,'.') = 0 THEN
              V_SEC_LLA_MNT_RNTL_EUP            := V_SEC_LLA_MNT_RNTL_EUP ||'.00';
            END IF;
          WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'Additional VPN Connection - Secondary - Install' THEN
            V_SECONDRY_mVPN_ONE_TIME_EUP                 := sqe_PRICE_tbl_TE(i).price ;
            V_SECND_mVPN_ONE_TIME_NET_EUP                := NVL(V_SECONDRY_mVPN_ONE_TIME_EUP,0) -
            (sqe_PRICE_tbl_TE(i).discount                                                       /100);
            IF V_SECONDRY_mVPN_ONE_TIME_EUP = 0 THEN
              V_SECONDRY_mVPN_ONE_TIME_EUP := NULL;
            END IF;
            IF V_SECND_mVPN_ONE_TIME_NET_EUP = 0 THEN
              V_SECND_mVPN_ONE_TIME_NET_EUP := NULL;
            END IF;
            IF INSTR(V_SECONDRY_mVPN_ONE_TIME_EUP,'.') = 0 THEN
              V_SECONDRY_mVPN_ONE_TIME_EUP            := V_SECONDRY_mVPN_ONE_TIME_EUP ||'.00';
            END IF;
            IF INSTR(V_SECND_mVPN_ONE_TIME_NET_EUP,'.') = 0 THEN
              V_SECND_mVPN_ONE_TIME_NET_EUP            := V_SECND_mVPN_ONE_TIME_NET_EUP ||'.00';
            END IF;
          WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'Additional VPN Connection - Secondary - Mthly' THEN
            V_SE_mVP_MNRNT_EUP_TT_AD_VPN                 := sqe_PRICE_tbl_TE(i).price ;
            V_SE_mVPN_MNRNT_NT_EUP_ADVPN                 := NVL(V_SE_mVP_MNRNT_EUP_TT_AD_VPN,0) -
            (sqe_PRICE_tbl_TE(i).discount                                                       /100);
            IF V_SE_mVP_MNRNT_EUP_TT_AD_VPN = 0 THEN
              V_SE_mVP_MNRNT_EUP_TT_AD_VPN := NULL;
            END IF;
            IF V_SE_mVPN_MNRNT_NT_EUP_ADVPN = 0 THEN
              V_SE_mVPN_MNRNT_NT_EUP_ADVPN := NULL;
            END IF;
            IF INSTR(V_SE_mVP_MNRNT_EUP_TT_AD_VPN,'.') = 0 THEN
              V_SE_mVP_MNRNT_EUP_TT_AD_VPN            := V_SE_mVP_MNRNT_EUP_TT_AD_VPN ||'.00';
            END IF;
            IF INSTR(V_SE_mVPN_MNRNT_NT_EUP_ADVPN,'.') = 0 THEN
              V_SE_mVPN_MNRNT_NT_EUP_ADVPN            := V_SE_mVPN_MNRNT_NT_EUP_ADVPN ||'.00';
            END IF;
          WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'BGP Configuration Charge - Secondary - Install' THEN
            V_SECONDRY_BGP_PRFX_OT_EUP                   := sqe_PRICE_tbl_TE(i).price ;
            V_SEC_BGP_PRFX_OT_EUP_DIS                    := sqe_PRICE_tbl_TE(i).discount/100;
            IF instr(V_SEC_BGP_PRFX_OT_EUP_DIS,'.')       >0 AND instr(V_SEC_BGP_PRFX_OT_EUP_DIS,'.')<=1 THEN
              V_SEC_BGP_PRFX_OT_EUP_DIS                  := 0||V_SEC_BGP_PRFX_OT_EUP_DIS;
            END IF;
            IF INSTR(V_SECONDRY_BGP_PRFX_OT_EUP,'.') = 0 THEN
              V_SECONDRY_BGP_PRFX_OT_EUP            := V_SECONDRY_BGP_PRFX_OT_EUP ||'.00';
            END IF;

           WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'BGP Configuration Charge - Secondary - Mthly-recurring' THEN
            V_SECONDRY_BGP_PRFX_OT_EUP                   := sqe_PRICE_tbl_TE(i).price ;
            V_SEC_BGP_PRFX_OT_EUP_DIS                    := sqe_PRICE_tbl_TE(i).discount/100;
            IF instr(V_SEC_BGP_PRFX_OT_EUP_DIS,'.')       >0 AND instr(V_SEC_BGP_PRFX_OT_EUP_DIS,'.')<=1 THEN
              V_SEC_BGP_PRFX_OT_EUP_DIS                  := 0||V_SEC_BGP_PRFX_OT_EUP_DIS;
            END IF;
            IF INSTR(V_SECONDRY_BGP_PRFX_OT_EUP,'.') = 0 THEN
              V_SECONDRY_BGP_PRFX_OT_EUP            := V_SECONDRY_BGP_PRFX_OT_EUP ||'.00';
            END IF;
          WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'SNMP Read only charge' THEN
            V_SNMP_RDN_ACE_SEC_CPET_EUP                  := sqe_PRICE_tbl_TE(i).price ;
            V_SNMP_RD_ACE_SE_CPET_EUP_DIS                := sqe_PRICE_tbl_TE(i).discount/100;
            IF instr(V_SNMP_RD_ACE_SE_CPET_EUP_DIS,'.')   >0 AND instr(V_SNMP_RD_ACE_SE_CPET_EUP_DIS,'.')<=1 THEN
              V_SNMP_RD_ACE_SE_CPET_EUP_DIS              := 0||V_SNMP_RD_ACE_SE_CPET_EUP_DIS;
            END IF;
            IF V_SNMP_RDN_ACE_SEC_CPET_EUP = 0 THEN
              V_SNMP_RDN_ACE_SEC_CPET_EUP := NULL;
            END IF;
            IF V_SNMP_RD_ACE_SE_CPET_EUP_DIS = 0 THEN
              V_SNMP_RD_ACE_SE_CPET_EUP_DIS := NULL;
            END IF;
            IF INSTR(V_SNMP_RDN_ACE_SEC_CPET_EUP,'.') = 0 THEN
              V_SNMP_RDN_ACE_SEC_CPET_EUP            := V_SNMP_RDN_ACE_SEC_CPET_EUP ||'.00';
            END IF;
          WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'Out of office Installation charge' THEN
            V_OOH_TRNUP_SEC_CPE_OT_EUP                   := sqe_PRICE_tbl_TE(i).price ;
            V_OOH_TRNUP_SEC_CPE_OT_EUP_DIS               := sqe_PRICE_tbl_TE(i).discount/100;
            IF instr(V_OOH_TRNUP_SEC_CPE_OT_EUP_DIS,'.')  >0 AND instr(V_OOH_TRNUP_SEC_CPE_OT_EUP_DIS,'.')<=1 THEN
              V_OOH_TRNUP_SEC_CPE_OT_EUP_DIS             := 0||V_OOH_TRNUP_SEC_CPE_OT_EUP_DIS;
            END IF;
            IF V_OOH_TRNUP_SEC_CPE_OT_EUP = 0 THEN
              V_OOH_TRNUP_SEC_CPE_OT_EUP := NULL;
            END IF;
            IF V_OOH_TRNUP_SEC_CPE_OT_EUP_DIS = 0 THEN
              V_OOH_TRNUP_SEC_CPE_OT_EUP_DIS := NULL;
            END IF;
            IF INSTR(V_OOH_TRNUP_SEC_CPE_OT_EUP,'.') = 0 THEN
              V_OOH_TRNUP_SEC_CPE_OT_EUP            := V_OOH_TRNUP_SEC_CPE_OT_EUP ||'.00';
            END IF;
          WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'PFM - Recurring Charge' THEN
           v_Sec_cpe_Pro_CE_Mntr_Mnth_EUP                   := sqe_PRICE_tbl_TE(i).price ;
           IF INSTR(v_Sec_cpe_Pro_CE_Mntr_Mnth_EUP,'.') = 0 THEN
            v_Sec_cpe_Pro_CE_Mntr_Mnth_EUP            := v_Sec_cpe_Pro_CE_Mntr_Mnth_EUP ||'.00';
          END IF;
           WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'PFM - Recurring Discount' THEN
          v_Sec_cpe_Pro_CE_Mntr_Mnth_DIS                    := sqe_PRICE_tbl_TE(i).discount/100;
          IF instr(v_Sec_cpe_Pro_CE_Mntr_Mnth_DIS ,'.')      >0 AND instr(v_Sec_cpe_Pro_CE_Mntr_Mnth_DIS ,'.')<=1 THEN
            v_Sec_cpe_Pro_CE_Mntr_Mnth_DIS                  := 0||v_Sec_cpe_Pro_CE_Mntr_Mnth_DIS ;
            end if;
  WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'Change Management - Recurring Charge' THEN
           v_Sec_cpe_Chg_Mgmt_Mnth_EUP                   := sqe_PRICE_tbl_TE(i).price ;
           IF INSTR(v_Sec_cpe_Chg_Mgmt_Mnth_EUP,'.') = 0 THEN
            v_Sec_cpe_Chg_Mgmt_Mnth_EUP            := v_Sec_cpe_Chg_Mgmt_Mnth_EUP ||'.00';
          END IF;

   WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'Change Management - Recurring Discount' THEN
           v_Sec_cpe_Chg_Mgmt_Mnth_DIS                    := sqe_PRICE_tbl_TE(i).discount/100;
          IF instr( v_Sec_cpe_Chg_Mgmt_Mnth_DIS ,'.')      >0 AND instr( v_Sec_cpe_Chg_Mgmt_Mnth_DIS ,'.')<=1 THEN
             v_Sec_cpe_Chg_Mgmt_Mnth_DIS                  := 0|| v_Sec_cpe_Chg_Mgmt_Mnth_DIS ;
             end if;
          WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'CPE Charge PTP  Secondary - Install-non-recurring' THEN
            V_Sec_CPE_Ins_PTP                            := sqe_PRICE_tbl_TE(i).price ;
          -- Added on 4/8/2011 as part of R16 - Start
          vSec_CPE_Ins_PTP_DS                    := sqe_PRICE_tbl_TE(i).discount/100;
          IF instr(vSec_CPE_Ins_PTP_DS ,'.')     >0 AND instr(vSec_CPE_Ins_PTP_DS ,'.')<=1 THEN
            vSec_CPE_Ins_PTP_DS                  := 0||vSec_CPE_Ins_PTP_DS ;
          END IF;
          -- Added on 4/8/2011 as part of R16 - End

            IF INSTR(V_Sec_CPE_Ins_PTP,'.') = 0 THEN
              V_Sec_CPE_Ins_PTP            := V_Sec_CPE_Ins_PTP ||'.00';
            END IF;
          WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'CPE Charge PTP Secondary - Mthly-recurring' THEN
            V_Sec_CPE_Mon_Rntal_PTP                      := sqe_PRICE_tbl_TE(i).price ;
            -- Added on 4/8/2011 as part of R16 - Start
            vSec_CPE_Mon_Rntal_PTP_DS                    := sqe_PRICE_tbl_TE(i).discount/100;
            IF instr(vSec_CPE_Mon_Rntal_PTP_DS ,'.')     >0 AND instr(vSec_CPE_Mon_Rntal_PTP_DS ,'.')<=1 THEN
              vSec_CPE_Mon_Rntal_PTP_DS                  := 0||vSec_CPE_Mon_Rntal_PTP_DS ;
            END IF;
            -- Added on 4/8/2011 as part of R16 - End

            IF INSTR(V_Sec_CPE_Mon_Rntal_PTP,'.') = 0 THEN
              V_Sec_CPE_Mon_Rntal_PTP            := V_Sec_CPE_Mon_Rntal_PTP ||'.00';
            END IF;
          WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'Leased Line Access PTP - Secondary - Install-non-recurring' THEN
            V_Sec_accss_Ins_PTP                          := sqe_PRICE_tbl_TE(i).price ;
            -- Added on 4/8/2011 as part of R16 - Start
            vSec_accss_Ins_PTP_DS                    := sqe_PRICE_tbl_TE(i).discount/100;
            IF instr(vSec_accss_Ins_PTP_DS ,'.')     >0 AND instr(vSec_accss_Ins_PTP_DS ,'.')<=1 THEN
              vSec_accss_Ins_PTP_DS                  := 0||vSec_accss_Ins_PTP_DS ;
            END IF;
            -- Added on 4/8/2011 as part of R16 - End

            IF INSTR(V_Sec_accss_Ins_PTP,'.') = 0 THEN
              V_Sec_accss_Ins_PTP            := V_Sec_accss_Ins_PTP ||'.00';
            END IF;
           WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'Ethernet Access PTP - Secondary - Install-non-recurring' THEN
            V_Sec_accss_Ins_PTP                          := sqe_PRICE_tbl_TE(i).price ;
            IF INSTR(V_Sec_accss_Ins_PTP,'.') = 0 THEN
              V_Sec_accss_Ins_PTP            := V_Sec_accss_Ins_PTP ||'.00';
            END IF;
          WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'DSL Access PTP - Secondary - Install-non-recurring' THEN
            V_Sec_accss_Ins_PTP                          := sqe_PRICE_tbl_TE(i).price ;
            IF INSTR(V_Sec_accss_Ins_PTP,'.') = 0 THEN
              V_Sec_accss_Ins_PTP            := V_Sec_accss_Ins_PTP ||'.00';
            END IF;
          WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'Leased Line Access PTP - Secondary - Mthly-recurring' THEN
            V_Sec_accss_mon_rntal_PTP                    := sqe_PRICE_tbl_TE(i).price ;
            -- Added on 4/8/2011 as part of R16 - Start
            vSec_accss_mon_rntal_PTP_DS                    := sqe_PRICE_tbl_TE(i).discount/100;
            IF instr(vSec_accss_mon_rntal_PTP_DS ,'.')     >0 AND instr(vSec_accss_mon_rntal_PTP_DS ,'.')<=1 THEN
              vSec_accss_mon_rntal_PTP_DS                  := 0||vSec_accss_mon_rntal_PTP_DS;
            END IF;
            -- Added on 4/8/2011 as part of R16 - End

            IF INSTR(V_Sec_accss_mon_rntal_PTP,'.') = 0 THEN
              V_Sec_accss_mon_rntal_PTP            := V_Sec_accss_mon_rntal_PTP ||'.00';
            END IF;
           WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'Ethernet Access PTP - Secondary - Mthly-recurring' THEN
            V_Sec_accss_mon_rntal_PTP                    := sqe_PRICE_tbl_TE(i).price ;
            IF INSTR(V_Sec_accss_mon_rntal_PTP,'.') = 0 THEN
              V_Sec_accss_mon_rntal_PTP            := V_Sec_accss_mon_rntal_PTP ||'.00';
            END IF;
             WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'DSL Access PTP - Secondary - Mthly-recurring' THEN
            V_Sec_accss_mon_rntal_PTP                    := sqe_PRICE_tbl_TE(i).price ;
            IF INSTR(V_Sec_accss_mon_rntal_PTP,'.') = 0 THEN
              V_Sec_accss_mon_rntal_PTP            := V_Sec_accss_mon_rntal_PTP ||'.00';
            END IF;
          WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'Port PTP - Secondary - Install-non-recurring' THEN
            V_Sec_port_Ins_PTP                           := sqe_PRICE_tbl_TE(i).price ;
            -- Added on 4/8/2011 as part of R16 - Start
            vSec_port_Ins_PTP_DS                    := sqe_PRICE_tbl_TE(i).discount/100;
            IF instr(vSec_port_Ins_PTP_DS ,'.')     >0 AND instr(vSec_port_Ins_PTP_DS ,'.')<=1 THEN
              vSec_port_Ins_PTP_DS                  := 0||vSec_port_Ins_PTP_DS;
            END IF;
            -- Added on 4/8/2011 as part of R16 - End

            IF INSTR(V_Sec_port_Ins_PTP,'.') = 0 THEN
              V_Sec_port_Ins_PTP            := V_Sec_port_Ins_PTP ||'.00';
            END IF;
          WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'Port Reconfig - Secondary - Install-non-recurring' THEN
            V_Sec_port_reconfig_One_time                 := sqe_PRICE_tbl_TE(i).price ;
            -- Added on 4/8/2011 as part of R16 - Start
            vSec_port_reconfig_One_time_DS                    := sqe_PRICE_tbl_TE(i).discount/100;
            IF instr(vSec_port_reconfig_One_time_DS ,'.')     >0 AND instr(vSec_port_reconfig_One_time_DS ,'.')<=1 THEN
              vSec_port_reconfig_One_time_DS                  := 0||vSec_port_reconfig_One_time_DS;
            END IF;
            -- Added on 4/8/2011 as part of R16 - End

            IF INSTR(V_Sec_port_reconfig_One_time,'.') = 0 THEN
              V_Sec_port_reconfig_One_time            := V_Sec_port_reconfig_One_time ||'.00';
            END IF;
          WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'DSL Upgrade-Downgrade - Secondary - Install-non-recurring' THEN
            V_Sec_DSL_Up_Down_One_time                   := sqe_PRICE_tbl_TE(i).price ;
            -- Added on 4/8/2011 as part of R16 - Start
            vSec_DSL_Up_Down_One_time_DS                    := sqe_PRICE_tbl_TE(i).discount/100;
            IF instr(vSec_DSL_Up_Down_One_time_DS ,'.')     >0 AND instr(vSec_DSL_Up_Down_One_time_DS ,'.')<=1 THEN
              vSec_DSL_Up_Down_One_time_DS                  := 0||vSec_DSL_Up_Down_One_time_DS;
            END IF;
            -- Added on 4/8/2011 as part of R16 - End

            IF INSTR(V_Sec_DSL_Up_Down_One_time,'.') = 0 THEN
              V_Sec_DSL_Up_Down_One_time            := V_Sec_DSL_Up_Down_One_time ||'.00';
            END IF;
          WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'Port PTP Secondary - Mthly-recurring' THEN
            V_Sec_Port_mon_rntal_PTP                     := sqe_PRICE_tbl_TE(i).price ;
            -- Added on 4/8/2011 as part of R16 - Start
            vSec_Port_mon_rntal_PTP_DS                    := sqe_PRICE_tbl_TE(i).discount/100;
            IF instr(vSec_Port_mon_rntal_PTP_DS ,'.')     >0 AND instr(vSec_Port_mon_rntal_PTP_DS ,'.')<=1 THEN
              vSec_Port_mon_rntal_PTP_DS                  := 0||vSec_Port_mon_rntal_PTP_DS;
            END IF;
            -- Added on 4/8/2011 as part of R16 - End

            IF INSTR(V_Sec_Port_mon_rntal_PTP,'.') = 0 THEN
              V_Sec_Port_mon_rntal_PTP            := V_Sec_Port_mon_rntal_PTP ||'.00';
            END IF;
          WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'LLA PTP - Secondary - Install-non-recurring' THEN
            V_Sec_LLA_Ins_PTP                            := sqe_PRICE_tbl_TE(i).price ;
            -- Added on 4/8/2011 as part of R16 - Start
            vSec_LLA_Ins_PTP_DS                    := sqe_PRICE_tbl_TE(i).discount/100;
            IF instr(vSec_LLA_Ins_PTP_DS ,'.')     >0 AND instr(vSec_LLA_Ins_PTP_DS ,'.')<=1 THEN
              vSec_LLA_Ins_PTP_DS                  := 0||vSec_LLA_Ins_PTP_DS;
            END IF;
            -- Added on 4/8/2011 as part of R16 - End

            IF INSTR(V_Sec_LLA_Ins_PTP,'.') = 0 THEN
              V_Sec_LLA_Ins_PTP            := V_Sec_LLA_Ins_PTP ||'.00';
            END IF;
          WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'LLA Rental PTP - Secondary - Mthly-recurring' THEN
            V_Sec_LLA_Mon_rntal_PTP                      := sqe_PRICE_tbl_TE(i).price ;
            -- Added on 4/8/2011 as part of R16 - Start
            vSec_LLA_Mon_rntal_PTP_DS                    := sqe_PRICE_tbl_TE(i).discount/100;
            IF instr(vSec_LLA_Mon_rntal_PTP_DS ,'.')     >0 AND instr(vSec_LLA_Mon_rntal_PTP_DS ,'.')<=1 THEN
              vSec_LLA_Mon_rntal_PTP_DS                  := 0||vSec_LLA_Mon_rntal_PTP_DS;
            END IF;
            -- Added on 4/8/2011 as part of R16 - End

            IF INSTR(V_Sec_LLA_Mon_rntal_PTP,'.') = 0 THEN
              V_Sec_LLA_Mon_rntal_PTP            := V_Sec_LLA_Mon_rntal_PTP ||'.00';
            END IF;
          WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'mVPN PTP - Secondary - Install-non-recurring' THEN
            V_Sec_mVPN_One_Time_PTP                      := sqe_PRICE_tbl_TE(i).price ;
            IF INSTR(V_Sec_mVPN_One_Time_PTP,'.') = 0 THEN
              V_Sec_mVPN_One_Time_PTP            := V_Sec_mVPN_One_Time_PTP ||'.00';
            END IF;
          WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'Secondary mVPN One Time Net PTP' THEN
            V_Sec_mVPN_One_Time_Net_PTP                  := sqe_PRICE_tbl_TE(i).price ;
            IF INSTR(V_Sec_mVPN_One_Time_Net_PTP,'.') = 0 THEN
              V_Sec_mVPN_One_Time_Net_PTP            := V_Sec_mVPN_One_Time_Net_PTP ||'.00';
            END IF;
          WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'mVPN Per Port Rental PTP - Secondary - Mthly-recurring' THEN
            V_Se_mVPN_mon_rntl_PTP_Port                  := sqe_PRICE_tbl_TE(i).price ;
            -- Added on 4/8/2011 as part of R16 - Start
            vSec_mVPN_mon_rnt_PTP_Port_DS                    := sqe_PRICE_tbl_TE(i).discount/100;
            IF instr(vSec_mVPN_mon_rnt_PTP_Port_DS ,'.')     >0 AND instr(vSec_mVPN_mon_rnt_PTP_Port_DS ,'.')<=1 THEN
              vSec_mVPN_mon_rnt_PTP_Port_DS                  := 0||vSec_mVPN_mon_rnt_PTP_Port_DS;
            END IF;
            -- Added on 4/8/2011 as part of R16 - End

            IF INSTR(V_Se_mVPN_mon_rntl_PTP_Port,'.') = 0 THEN
              V_Se_mVPN_mon_rntl_PTP_Port            := V_Se_mVPN_mon_rntl_PTP_Port ||'.00';
            END IF;
          WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'mVPN Rental PTP - Total per addition VPN - Secondary - Mthly-recurring' THEN
            V_Sec_mVPN_mon_rnt_PTP_VPN                   := sqe_PRICE_tbl_TE(i).price ;
            IF INSTR(V_Sec_mVPN_mon_rnt_PTP_VPN,'.') = 0 THEN
              V_Sec_mVPN_mon_rnt_PTP_VPN            := V_Sec_mVPN_mon_rnt_PTP_VPN ||'.00';
            END IF;
          WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'Secondary mVPN Monthly Rental Net PTP- Total per addition VPN' THEN
            V_Se_mVPN_mn_rnt_Nt_PTP_VPN                  := sqe_PRICE_tbl_TE(i).price ;
            IF INSTR(V_Se_mVPN_mn_rnt_Nt_PTP_VPN,'.') = 0 THEN
              V_Se_mVPN_mn_rnt_Nt_PTP_VPN            := V_Se_mVPN_mn_rnt_Nt_PTP_VPN ||'.00';
            END IF;
          WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'BGP Prefixes PTP - Secondary - Install-non-recurring' THEN
            V_Sec_BGP_Prfx_One_Time_PTP                  := sqe_PRICE_tbl_TE(i).price ;
            -- Added on 4/8/2011 as part of R16 - Start
            vSec_BGP_Prefx_OneTime_PTP_DS                    := sqe_PRICE_tbl_TE(i).discount/100;
            IF instr(vSec_BGP_Prefx_OneTime_PTP_DS ,'.')     >0 AND instr(vSec_BGP_Prefx_OneTime_PTP_DS ,'.')<=1 THEN
              vSec_BGP_Prefx_OneTime_PTP_DS                  := 0||vSec_BGP_Prefx_OneTime_PTP_DS;
            END IF;
            -- Added on 4/8/2011 as part of R16 - End

            IF INSTR(V_Sec_BGP_Prfx_One_Time_PTP,'.') = 0 THEN
              V_Sec_BGP_Prfx_One_Time_PTP            := V_Sec_BGP_Prfx_One_Time_PTP ||'.00';
            END IF;
          WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'BGP Prefixes Rental PTP - Secondary - Mthly-recurring' THEN
            V_Se_BGP_Prefx_mon_rntl_PTP                  := sqe_PRICE_tbl_TE(i).price ;
            -- Added on 4/8/2011 as part of R16 - Start
            vSec_BGP_Prefx_mon_rnt_PTP_DS                    := sqe_PRICE_tbl_TE(i).discount/100;
            IF instr(vSec_BGP_Prefx_mon_rnt_PTP_DS ,'.')     >0 AND instr(vSec_BGP_Prefx_mon_rnt_PTP_DS ,'.')<=1 THEN
              vSec_BGP_Prefx_mon_rnt_PTP_DS                  := 0||vSec_BGP_Prefx_mon_rnt_PTP_DS;
            END IF;
            -- Added on 4/8/2011 as part of R16 - End

            IF INSTR(V_Se_BGP_Prefx_mon_rntl_PTP,'.') = 0 THEN
              V_Se_BGP_Prefx_mon_rntl_PTP            := V_Se_BGP_Prefx_mon_rntl_PTP ||'.00';
            END IF;
          WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'Change Management - PTP' THEN
            V_Chnge_Mgmt_PTP                             := sqe_PRICE_tbl_TE(i).price ;
            -- Added on 4/8/2011 as part of R16 - Start
            vChnge_Mgmt_PTP_DS                    := sqe_PRICE_tbl_TE(i).discount/100;
            IF instr(vChnge_Mgmt_PTP_DS ,'.')     >0 AND instr(vChnge_Mgmt_PTP_DS ,'.')<=1 THEN
              vChnge_Mgmt_PTP_DS                  := 0||vChnge_Mgmt_PTP_DS;
            END IF;
            -- Added on 4/8/2011 as part of R16 - End

            IF INSTR(V_Chnge_Mgmt_PTP,'.') = 0 THEN
              V_Chnge_Mgmt_PTP            := V_Chnge_Mgmt_PTP ||'.00';
            END IF;
          WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'Proactive CE Monitorings - PTP' THEN
            V_Proactv_CE_Monitoring_PTP                  := sqe_PRICE_tbl_TE(i).price ;
            IF INSTR(V_Proactv_CE_Monitoring_PTP,'.') = 0 THEN
              V_Proactv_CE_Monitoring_PTP            := V_Proactv_CE_Monitoring_PTP ||'.00';
            END IF;
          WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'SNMP CPE Net Price PTP - Secondary' THEN
            V_SNMP_RdAcs_Se_CPE_OnTm_PTP                 := sqe_PRICE_tbl_TE(i).price ;
            -- Added on 4/8/2011 as part of R16 - Start
            vSNMP_RdAcsSe_CPE_OneTm_PTP_DS                    := sqe_PRICE_tbl_TE(i).discount/100;
            IF instr(vSNMP_RdAcsSe_CPE_OneTm_PTP_DS ,'.')     >0 AND instr(vSNMP_RdAcsSe_CPE_OneTm_PTP_DS ,'.')<=1 THEN
              vSNMP_RdAcsSe_CPE_OneTm_PTP_DS                  := 0||vSNMP_RdAcsSe_CPE_OneTm_PTP_DS;
            END IF;
            -- Added on 4/8/2011 as part of R16 - End

            IF INSTR(V_SNMP_RdAcs_Se_CPE_OnTm_PTP,'.') = 0 THEN
              V_SNMP_RdAcs_Se_CPE_OnTm_PTP            := V_SNMP_RdAcs_Se_CPE_OnTm_PTP ||'.00';
            END IF;
          WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'Out of office CPE Price PTP - Secondary' THEN
            V_OOH_trn_up_Se_CPE_OnTm_PTP                 := sqe_PRICE_tbl_TE(i).price ;
            -- Added on 4/8/2011 as part of R16 - Start
            vOOH_trnupSe_CPE_OneTm_PTP_DS                    := sqe_PRICE_tbl_TE(i).discount/100;
            IF instr(vOOH_trnupSe_CPE_OneTm_PTP_DS ,'.')     >0 AND instr(vOOH_trnupSe_CPE_OneTm_PTP_DS ,'.')<=1 THEN
              vOOH_trnupSe_CPE_OneTm_PTP_DS                  := 0||vOOH_trnupSe_CPE_OneTm_PTP_DS;
            END IF;
            -- Added on 4/8/2011 as part of R16 - End

            IF INSTR(V_OOH_trn_up_Se_CPE_OnTm_PTP,'.') = 0 THEN
              V_OOH_trn_up_Se_CPE_OnTm_PTP            := V_OOH_trn_up_Se_CPE_OnTm_PTP ||'.00';
            END IF;
          WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'Secondary CPE Change Management - PTP' THEN
            V_Sec_CPE_Chnge_Mgmt_PTP                     := sqe_PRICE_tbl_TE(i).price ;
            -- Added on 4/8/2011 as part of R16 - Start
            vSec_CPE_Chnge_Mgmt_PTP_DS                    := sqe_PRICE_tbl_TE(i).discount/100;
            IF instr(vSec_CPE_Chnge_Mgmt_PTP_DS ,'.')     >0 AND instr(vSec_CPE_Chnge_Mgmt_PTP_DS ,'.')<=1 THEN
              vSec_CPE_Chnge_Mgmt_PTP_DS                  := 0||vSec_CPE_Chnge_Mgmt_PTP_DS;
            END IF;
            -- Added on 4/8/2011 as part of R16 - End

            IF INSTR(V_Sec_CPE_Chnge_Mgmt_PTP,'.') = 0 THEN
              V_Sec_CPE_Chnge_Mgmt_PTP            := V_Sec_CPE_Chnge_Mgmt_PTP ||'.00';
            END IF;
          WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'Secondary CPE Proactive CE Monitoring - PTP' THEN
            V_Se_CPE_Practv_CE_Mntr_PTP                  := sqe_PRICE_tbl_TE(i).price ;
            -- Added on 4/8/2011 as part of R16 - Start
            vSec_CPE_Proact_CEMntrg_PTP_DS                    := sqe_PRICE_tbl_TE(i).discount/100;
            IF instr(vSec_CPE_Proact_CEMntrg_PTP_DS ,'.')     >0 AND instr(vSec_CPE_Proact_CEMntrg_PTP_DS ,'.')<=1 THEN
              vSec_CPE_Proact_CEMntrg_PTP_DS                  := 0||vSec_CPE_Proact_CEMntrg_PTP_DS;
            END IF;
            -- Added on 4/8/2011 as part of R16 - End

            IF INSTR(V_Se_CPE_Practv_CE_Mntr_PTP,'.') = 0 THEN
              V_Se_CPE_Practv_CE_Mntr_PTP            := V_Se_CPE_Practv_CE_Mntr_PTP ||'.00';
            END IF;
          ELSE
            NULL;
          END CASE;
        END LOOP;
      END IF;

   /*    SELECT DISTINCT pl.price_line_description ,
      pd.price ,
      pd.discount BULK COLLECT
    INTO sqe_PRICE_tbl_TE
    FROM quote q
    LEFT OUTER JOIN quote_header qh
    ON q.quote_id = qh.quote_id
    LEFT OUTER JOIN quote_site qs
    ON qh.quote_header_id = qs.quote_header_id
    INNER JOIN site s
    ON qs.site_id = s.site_id
    INNER JOIN line_item lm
    ON s.site_id           = lm.site_id
    AND lm.quote_header_id =in_quoteheaderid
    INNER JOIN line_item_detail ld
    ON lm.line_item_id = ld.line_item_id
    LEFT OUTER JOIN attribute_mapping am
    ON ld.attribute_mapping_id = am.attribute_mapping_id
      /* LEFT OUTER JOIN edca_interface_mapping edca
      ON edca.attribute_mapping_id = am.attribute_mapping_id*/
  /*  LEFT OUTER JOIN price_line_item_detail pd
    ON lm.line_item_id = pd.line_item_id
    LEFT OUTER JOIN price_line_item pl
    ON pd.price_line_item_id = pl.price_line_item_id
    LEFT OUTER JOIN access_qref aq
    ON (pd.external_qref) = UPPER (aq.access_qref)
    LEFT OUTER JOIN cpe_qref cpeq
    ON qs.quote_site_id         = cpeq.quote_site_id
    WHERE q.quote_id            = in_quoteid
    AND qh.quote_header_id      = in_quoteheaderid
    AND s.site_id               =in_site_id
    AND upper(lm.fallback_type) ='SECONDARY'
    and upper(pd.ptp_eup)       = 'PTP'
    AND (qs.active              = 'Y')
    AND (lm.active              = 'Y')
    AND (ld.active              = 'Y')
    AND ( pd.active             = 'Y'
    OR pd.active               IS NULL )
    ORDER BY price_line_description DESC;

    IF sqe_PRICE_tbl_TE.count!=0 THEN
        FOR i                  IN sqe_PRICE_tbl_TE.FIRST..sqe_PRICE_tbl_TE.LAST
        LOOP
          CASE

             WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'Router - Secondary - Install-non-recurring' THEN
            V_Sec_CPE_Ins_PTP                            := sqe_PRICE_tbl_TE(i).price ;
            IF INSTR(V_Sec_CPE_Ins_PTP,'.') = 0 THEN
              V_Sec_CPE_Ins_PTP            := V_Sec_CPE_Ins_PTP ||'.00';
            END IF;
          WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'Router - Secondary - Mthly-recurring' THEN
            V_Sec_CPE_Mon_Rntal_PTP                      := sqe_PRICE_tbl_TE(i).price ;
            IF INSTR(V_Sec_CPE_Mon_Rntal_PTP,'.') = 0 THEN
              V_Sec_CPE_Mon_Rntal_PTP            := V_Sec_CPE_Mon_Rntal_PTP ||'.00';
            END IF;
          WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'Leased Line Access - Secondary - Install-non-recurring' THEN
            V_Sec_accss_Ins_PTP                          := sqe_PRICE_tbl_TE(i).price ;
            IF INSTR(V_Sec_accss_Ins_PTP,'.') = 0 THEN
              V_Sec_accss_Ins_PTP            := V_Sec_accss_Ins_PTP ||'.00';
            END IF;
            WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'DSL Access - Secondary - Install-non-recurring' THEN
            IF UPPER(V_SECONDRY_ACCESS_INSTALL_EUP)       = 'DSL' THEN
            V_Sec_accss_Ins_PTP                          := sqe_PRICE_tbl_TE(i).price ;
            IF INSTR(V_Sec_accss_Ins_PTP,'.') = 0 THEN
              V_Sec_accss_Ins_PTP            := V_Sec_accss_Ins_PTP ||'.00';
            END IF;
            END IF;

            WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'Ethernet Access - Secondary - Install-non-recurring' THEN
             IF UPPER(V_SECONDRY_ACCESS_INSTALL_EUP)       = 'ETHERNET' THEN
            V_Sec_accss_Ins_PTP                          := sqe_PRICE_tbl_TE(i).price ;
            IF INSTR(V_Sec_accss_Ins_PTP,'.') = 0 THEN
              V_Sec_accss_Ins_PTP            := V_Sec_accss_Ins_PTP ||'.00';
            END IF;
            END IF;
            WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'HVPN Access - Secondary - Install-non-recurring' THEN
            IF UPPER(V_SECONDRY_ACCESS_INSTALL_EUP)       = 'HVPN' THEN
            V_Sec_accss_Ins_PTP                          := sqe_PRICE_tbl_TE(i).price ;
            IF INSTR(V_Sec_accss_Ins_PTP,'.') = 0 THEN
              V_Sec_accss_Ins_PTP            := V_Sec_accss_Ins_PTP ||'.00';
            END IF;
            END IF;
          WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'Leased Line Access - Secondary - Mthly-recurring' THEN
            V_Sec_accss_mon_rntal_PTP                    := sqe_PRICE_tbl_TE(i).price ;
            IF INSTR(V_Sec_accss_mon_rntal_PTP,'.') = 0 THEN
              V_Sec_accss_mon_rntal_PTP            := V_Sec_accss_mon_rntal_PTP ||'.00';
            END IF;
             WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'DSL Access - Secondary - Mthly-recurring' THEN
             IF UPPER(V_SECONDRY_ACCESS_INSTALL_EUP)       = 'DSL' THEN
            V_Sec_accss_mon_rntal_PTP                    := sqe_PRICE_tbl_TE(i).price ;
            IF INSTR(V_Sec_accss_mon_rntal_PTP,'.') = 0 THEN
              V_Sec_accss_mon_rntal_PTP            := V_Sec_accss_mon_rntal_PTP ||'.00';
            END IF;
            END IF;
             WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'Ethernet Access - Secondary - Mthly-recurring' THEN
             IF UPPER(V_SECONDRY_ACCESS_INSTALL_EUP)       = 'ETHERNET' THEN
            V_Sec_accss_mon_rntal_PTP                    := sqe_PRICE_tbl_TE(i).price ;
            IF INSTR(V_Sec_accss_mon_rntal_PTP,'.') = 0 THEN
              V_Sec_accss_mon_rntal_PTP            := V_Sec_accss_mon_rntal_PTP ||'.00';
            END IF;
            END IF;
             WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'HVPN Access - Secondary - Mthly-recurring' THEN
           IF UPPER(V_SECONDRY_ACCESS_INSTALL_EUP)       = 'HVPN' THEN
            V_Sec_accss_mon_rntal_PTP                    := sqe_PRICE_tbl_TE(i).price ;
            IF INSTR(V_Sec_accss_mon_rntal_PTP,'.') = 0 THEN
              V_Sec_accss_mon_rntal_PTP            := V_Sec_accss_mon_rntal_PTP ||'.00';
            END IF;
            END IF;
          WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'MPLS Port - Secondary-Install' THEN
            V_Sec_port_Ins_PTP                           := sqe_PRICE_tbl_TE(i).price ;
            IF INSTR(V_Sec_port_Ins_PTP,'.') = 0 THEN
              V_Sec_port_Ins_PTP            := V_Sec_port_Ins_PTP ||'.00';
            END IF;
          WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'Port Reconfig - Secondary - Install-non-recurring' THEN
            V_Sec_port_reconfig_One_time                 := sqe_PRICE_tbl_TE(i).price ;
            IF INSTR(V_Sec_port_reconfig_One_time,'.') = 0 THEN
              V_Sec_port_reconfig_One_time            := V_Sec_port_reconfig_One_time ||'.00';
            END IF;
          WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'DSL Upgrade-Downgrade - Secondary - Install-non-recurring' THEN
            V_Sec_DSL_Up_Down_One_time                   := sqe_PRICE_tbl_TE(i).price ;
            IF INSTR(V_Sec_DSL_Up_Down_One_time,'.') = 0 THEN
              V_Sec_DSL_Up_Down_One_time            := V_Sec_DSL_Up_Down_One_time ||'.00';
            END IF;
          WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'MPLS Port - Secondary-Mthly' THEN
            V_Sec_Port_mon_rntal_PTP                     := sqe_PRICE_tbl_TE(i).price ;
            IF INSTR(V_Sec_Port_mon_rntal_PTP,'.') = 0 THEN
              V_Sec_Port_mon_rntal_PTP            := V_Sec_Port_mon_rntal_PTP ||'.00';
            END IF;
          WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'DSL Local Loop - Secondary - Install-non-recurring' THEN
            V_Sec_LLA_Ins_PTP                            := sqe_PRICE_tbl_TE(i).price ;
            IF INSTR(V_Sec_LLA_Ins_PTP,'.') = 0 THEN
              V_Sec_LLA_Ins_PTP            := V_Sec_LLA_Ins_PTP ||'.00';
            END IF;
          WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'DSL Local Loop - Secondary - Mthly-recurring' THEN
            V_Sec_LLA_Mon_rntal_PTP                      := sqe_PRICE_tbl_TE(i).price ;
            IF INSTR(V_Sec_LLA_Mon_rntal_PTP,'.') = 0 THEN
              V_Sec_LLA_Mon_rntal_PTP            := V_Sec_LLA_Mon_rntal_PTP ||'.00';
            END IF;
          WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'Additional VPN Connection - Secondary - Install' THEN
            V_Sec_mVPN_One_Time_PTP                      := sqe_PRICE_tbl_TE(i).price ;
            IF INSTR(V_Sec_mVPN_One_Time_PTP,'.') = 0 THEN
              V_Sec_mVPN_One_Time_PTP            := V_Sec_mVPN_One_Time_PTP ||'.00';
            END IF;
          WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'Secondary mVPN One Time Net PTP' THEN
            V_Sec_mVPN_One_Time_Net_PTP                  := sqe_PRICE_tbl_TE(i).price ;
            IF INSTR(V_Sec_mVPN_One_Time_Net_PTP,'.') = 0 THEN
              V_Sec_mVPN_One_Time_Net_PTP            := V_Sec_mVPN_One_Time_Net_PTP ||'.00';
            END IF;
          WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'Additional VPN Connection - Secondary - Mthly' THEN
            V_Se_mVPN_mon_rntl_PTP_Port                  := sqe_PRICE_tbl_TE(i).price ;
            IF INSTR(V_Se_mVPN_mon_rntl_PTP_Port,'.') = 0 THEN
              V_Se_mVPN_mon_rntl_PTP_Port            := V_Se_mVPN_mon_rntl_PTP_Port ||'.00';
            END IF;
          WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'mVPN Rental PTP - Total per addition VPN - Secondary - Mthly-recurring' THEN
            V_Sec_mVPN_mon_rnt_PTP_VPN                   := sqe_PRICE_tbl_TE(i).price ;
            IF INSTR(V_Sec_mVPN_mon_rnt_PTP_VPN,'.') = 0 THEN
              V_Sec_mVPN_mon_rnt_PTP_VPN            := V_Sec_mVPN_mon_rnt_PTP_VPN ||'.00';
            END IF;
          WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'Secondary mVPN Monthly Rental Net PTP- Total per addition VPN' THEN
            V_Se_mVPN_mn_rnt_Nt_PTP_VPN                  := sqe_PRICE_tbl_TE(i).price ;
            IF INSTR(V_Se_mVPN_mn_rnt_Nt_PTP_VPN,'.') = 0 THEN
              V_Se_mVPN_mn_rnt_Nt_PTP_VPN            := V_Se_mVPN_mn_rnt_Nt_PTP_VPN ||'.00';
            END IF;
          WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'BGP Configuration Charge - Secondary - Install' THEN
            V_Sec_BGP_Prfx_One_Time_PTP                  := sqe_PRICE_tbl_TE(i).price ;
            IF INSTR(V_Sec_BGP_Prfx_One_Time_PTP,'.') = 0 THEN
              V_Sec_BGP_Prfx_One_Time_PTP            := V_Sec_BGP_Prfx_One_Time_PTP ||'.00';
            END IF;
          WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'BGP Prefixes Rental PTP - Secondary - Mthly-recurring' THEN
            V_Se_BGP_Prefx_mon_rntl_PTP                  := sqe_PRICE_tbl_TE(i).price ;
            IF INSTR(V_Se_BGP_Prefx_mon_rntl_PTP,'.') = 0 THEN
              V_Se_BGP_Prefx_mon_rntl_PTP            := V_Se_BGP_Prefx_mon_rntl_PTP ||'.00';
            END IF;
          WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'Change Management - Non Recurring Charge' THEN
            V_Chnge_Mgmt_PTP                             := sqe_PRICE_tbl_TE(i).price ;
            IF INSTR(V_Chnge_Mgmt_PTP,'.') = 0 THEN
              V_Chnge_Mgmt_PTP            := V_Chnge_Mgmt_PTP ||'.00';
            END IF;
          WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'PFM - Recurring Charge' THEN
            V_Proactv_CE_Monitoring_PTP                  := sqe_PRICE_tbl_TE(i).price ;
            IF INSTR(V_Proactv_CE_Monitoring_PTP,'.') = 0 THEN
              V_Proactv_CE_Monitoring_PTP            := V_Proactv_CE_Monitoring_PTP ||'.00';
            END IF;
          WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'SNMP Read only charge' THEN
            V_SNMP_RdAcs_Se_CPE_OnTm_PTP                 := sqe_PRICE_tbl_TE(i).price ;
            IF INSTR(V_SNMP_RdAcs_Se_CPE_OnTm_PTP,'.') = 0 THEN
              V_SNMP_RdAcs_Se_CPE_OnTm_PTP            := V_SNMP_RdAcs_Se_CPE_OnTm_PTP ||'.00';
            END IF;
          WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'Out of office Installation charge' THEN
            V_OOH_trn_up_Se_CPE_OnTm_PTP                 := sqe_PRICE_tbl_TE(i).price ;
            IF INSTR(V_OOH_trn_up_Se_CPE_OnTm_PTP,'.') = 0 THEN
              V_OOH_trn_up_Se_CPE_OnTm_PTP            := V_OOH_trn_up_Se_CPE_OnTm_PTP ||'.00';
            END IF;
          WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'Secondary CPE Change Management - PTP' THEN
            V_Sec_CPE_Chnge_Mgmt_PTP                     := sqe_PRICE_tbl_TE(i).price ;
            IF INSTR(V_Sec_CPE_Chnge_Mgmt_PTP,'.') = 0 THEN
              V_Sec_CPE_Chnge_Mgmt_PTP            := V_Sec_CPE_Chnge_Mgmt_PTP ||'.00';
            END IF;
          WHEN sqe_PRICE_tbl_TE(i).price_line_description = 'Secondary CPE Proactive CE Monitoring - PTP' THEN
            V_Se_CPE_Practv_CE_Mntr_PTP                  := sqe_PRICE_tbl_TE(i).price ;
            IF INSTR(V_Se_CPE_Practv_CE_Mntr_PTP,'.') = 0 THEN
              V_Se_CPE_Practv_CE_Mntr_PTP            := V_Se_CPE_Practv_CE_Mntr_PTP ||'.00';
            END IF;
          ELSE
            NULL;
          END CASE;
        END LOOP;
      END IF;   */
    EXCEPTION
    WHEN no_data_found THEN
      NULL;
    END;
    ---------End of Pricing detials for Secondary----------
    --------------------START PRIMARY Pricing Status and install cost--------
    BEGIN
      SELECT DISTINCT
        AQ.PRICING_STATUS,
        AQ.cost_access_currency,
        aq.install_cost,
        aq.monthly_cost,
        aq.hvpn_access_technology,
        aq.service_id,
        aq.TARRIF_ZONE,
        aq.apop_node,
        aq.gpop_node,
        aq.access_speed,
        aq.optm_rental_cost_y2,
        aq.optm_rental_cost_y3,
        aq.optm_rental_cost_y4,
        aq.optm_rental_cost_y5,
        aq.workflow_status
      INTO
        V_PRIM_ACES_PRICING_STATS,
        V_PRIMARY_ACCESS_COST_CURRENCY,
        V_PRIMARY_ACCESS_INSTALL_COST,
        V_PRIMARY_ACCESS_MONTHLY_COST,
        V_PRIM_hVPN_ACES_PRD_TYPE,
        V_PRIM_hVPN_ACES_SRVCE_ID,
        V_PRIMARY_TARRIF_ZONE,
        V_PRIMARY_APoP,
        V_PRIMARY_GPoP_accessqref,
        v_prim_access_speed,
        V_Pri_Acc_Optm_Rental_Cost_Y2,
        V_Pri_Acc_Optm_Rental_Cost_Y3,
        V_Pri_Acc_Optm_Rental_Cost_Y4,
        V_Pri_Acc_Optm_Rental_Cost_Y5,
        V_Pri_Workflow_Status
      FROM quote q
      LEFT OUTER JOIN quote_header qh
      ON q.quote_id = qh.quote_id
      LEFT OUTER JOIN quote_site qs
      ON qh.quote_header_id = qs.quote_header_id
      INNER JOIN site s
      ON qs.site_id = s.site_id
      INNER JOIN line_item lm
      ON s.site_id           = lm.site_id
      AND lm.quote_header_id =in_quoteheaderid
      INNER JOIN line_item_detail ld
      ON lm.line_item_id = ld.line_item_id
      LEFT OUTER JOIN attribute_mapping am
      ON ld.attribute_mapping_id = am.attribute_mapping_id
        /*   LEFT OUTER JOIN edca_interface_mapping edca
        ON edca.attribute_mapping_id = am.attribute_mapping_id*/
      LEFT OUTER JOIN price_line_item_detail pd
      ON lm.line_item_id = pd.line_item_id
      LEFT OUTER JOIN price_line_item pl
      ON pd.price_line_item_id = pl.price_line_item_id
        /* LEFT OUTER */
      INNER JOIN access_qref aq
      ON (pd.external_qref) = UPPER (aq.access_qref)
        -- AND aq.quote_site_id  = qs.quote_site_id
     /* LEFT OUTER JOIN cpe_qref cpeq
      ON qs.quote_site_id    = cpeq.quote_site_id */
      WHERE q.quote_id       = in_quoteid
      AND qh.quote_header_id = in_quoteheaderid
      AND s.site_id          =in_site_id
        ----added becuase of exact fetch returns multiple rows
      AND upper(lm.fallback_type)                 = 'PRIMARY'
      AND (qs.active                              = 'Y')
      AND (lm.active                              = 'Y')
      AND (ld.active                              = 'Y')
      AND ( pd.active                             = 'Y'
      OR pd.active                               IS NULL)
      AND rownum                                  = 1;

        IF INSTR(V_PRIMARY_ACCESS_INSTALL_COST,'.') = 0 THEN
        V_PRIMARY_ACCESS_INSTALL_COST            := V_PRIMARY_ACCESS_INSTALL_COST ||'.00';
      END IF;
      IF INSTR(V_PRIMARY_ACCESS_MONTHLY_COST,'.') = 0 THEN
        V_PRIMARY_ACCESS_MONTHLY_COST            := V_PRIMARY_ACCESS_MONTHLY_COST ||'.00';
      END IF;

    EXCEPTION
    WHEN NO_DATA_FOUND THEN
      NULL;
    END;
     IF upper(V_PRIMARY_ACCESS_TECHNOLOGY) = 'DSL' THEN
        V_PRIMARY_GPoP                     := V_PRIMARY_GPoP_attribute;
      ELSE
        V_PRIMARY_GPoP                     := V_PRIMARY_GPoP_accessqref;
      END IF;
    Begin

     select distinct  c.pri_status
 into V_PRIMARY_CPE_PRICING_STATUS
      from cpe_qref C
      left outer join quote_site qs
      on c.quote_site_id = qs.quote_site_id
           left outer join quote_header qh
      on qs.quote_header_id = qh.quote_header_id
      left outer JOIN line_item lm
      on qh.quote_header_id = lm.quote_header_id
   where qh.quote_header_id = in_quoteheaderid
   and qs.site_id = in_site_id
  and UPPER( lm.fallback_type) = 'PRIMARY'
   and qs.active = 'Y'
   AND rownum = 1;

   select distinct order_type
   into V_PRIMARY_CONNECTION_STATUS
   from quote where quote_id = in_quoteid
   and rownum= 1;

   exception
  WHEN NO_DATA_FOUND THEN
      NULL;
    END;



    -------------------- END PRIMARY Pricing Status and install cost--------
    --------------------START SECONDARY Pricing Status and install cost--------
    BEGIN
      SELECT DISTINCT --cpeq.pri_status,
        AQ.PRICING_STATUS,
        AQ.cost_access_currency,
       -- q.ORDER_TYPE,
        aq.install_cost,
        aq.monthly_cost,
        aq.hvpn_access_technology,
        aq.service_id,
        aq.TARRIF_ZONE,
        aq.apop_node,
        aq.gpop_node,
        aq.access_speed,
        aq.optm_rental_cost_y2,
        aq.optm_rental_cost_y3,
        aq.optm_rental_cost_y4,
        aq.optm_rental_cost_y5,
        aq.workflow_status
      INTO --V_SECONDRY_CPE_PRICING_STATUS ,
        V_SEC_ACCES_PRIC_STAT,
        V_SEC_ACES_CST_CURR,
       -- V_SECONDRY_CONNECTION_STATUS,
        V_SECONDRY_ACCESS_INSTALL_COST,
        V_SECONDRY_ACCESS_MONTHLY_COST,
        V_SEC_hVPN_ACES_PRD_TYP,
        V_SECND_hVPN_ACCESS_SERVICE_ID,
        V_SECONDRY_TARRIF_ZONE,
        V_SECONDRY_APoP,
        V_SECONDRY_GPoP_accessqref,
        v_sec_access_speed,
        V_Sec_Acc_Optm_Rental_Cost_Y2,
        V_Sec_Acc_Optm_Rental_Cost_Y3,
        V_Sec_Acc_Optm_Rental_Cost_Y4,
        V_Sec_Acc_Optm_Rental_Cost_Y5,
        V_Sec_Workflow_Status
      FROM quote q
      LEFT OUTER JOIN quote_header qh
      ON q.quote_id = qh.quote_id
      LEFT OUTER JOIN quote_site qs
      ON qh.quote_header_id = qs.quote_header_id
      INNER JOIN site s
      ON qs.site_id = s.site_id
      INNER JOIN line_item lm
      ON s.site_id           = lm.site_id
      AND lm.quote_header_id =in_quoteheaderid
      INNER JOIN line_item_detail ld
      ON lm.line_item_id = ld.line_item_id
      LEFT OUTER JOIN attribute_mapping am
      ON ld.attribute_mapping_id = am.attribute_mapping_id
        /*  LEFT OUTER JOIN edca_interface_mapping edca
        ON edca.attribute_mapping_id = am.attribute_mapping_id*/
      LEFT OUTER JOIN price_line_item_detail pd
      ON lm.line_item_id = pd.line_item_id
      LEFT OUTER JOIN price_line_item pl
      ON pd.price_line_item_id = pl.price_line_item_id
        /* LEFT OUTER */
      INNER JOIN access_qref aq
      ON (pd.external_qref) = UPPER (aq.access_qref)
        --  AND aq.quote_site_id  = qs.quote_site_id
    /*  LEFT OUTER JOIN cpe_qref cpeq
      ON qs.quote_site_id    = cpeq.quote_site_id */
      WHERE q.quote_id       = in_quoteid
      AND qh.quote_header_id = in_quoteheaderid
      AND s.site_id          =in_site_id
        ----added becuase of exact fetch returns multiple rows
      AND upper(lm.fallback_type)                  = 'SECONDARY'
      AND (qs.active                               = 'Y')
      AND (lm.active                               = 'Y')
      AND (ld.active                               = 'Y')
      AND ( pd.active                              = 'Y'
      OR pd.active                                IS NULL)
      AND rownum                                   = 1;
      IF INSTR(V_SECONDRY_ACCESS_INSTALL_COST,'.') = 0 THEN
        V_SECONDRY_ACCESS_INSTALL_COST            := V_SECONDRY_ACCESS_INSTALL_COST ||'.00';
      END IF;
      IF INSTR(V_SECONDRY_ACCESS_MONTHLY_COST,'.') = 0 THEN
        V_SECONDRY_ACCESS_MONTHLY_COST            := V_SECONDRY_ACCESS_MONTHLY_COST ||'.00';
      END IF;

      IF V_PRIMARY_ACCESS_TECHNOLOGY  = 'hVPN' THEN
        V_sec_DSL_hVPN_acces_dwnstrm := SUBSTR(v_SEC_ACCESS_SPEED_text,1,instr(v_SEC_ACCESS_SPEED_text,'/')-1);
        V_sec_DSL_hVPN_acces_upstrm  := SUBSTR(v_SEC_ACCESS_SPEED_text,instr(v_SEC_ACCESS_SPEED_text,'/')  +1 );
      END IF;


          IF upper(V_SECONDRY_NNI_PORT)             = 'YES' THEN
            V_SECONDRY_NNI_PORT                    := 'Y';
          Elsif UPPER( V_SECONDRY_NNI_PORT)         = 'NO' THEN
            V_SECONDRY_NNI_PORT                    := 'N';
          END IF;
      SELECT one_time_install_cost,
        monthly_recurring_cost
      INTO V_BGP_PRIM_ONETIME_COST,
        v_BGP_PRIM_RECUR_COST
      FROM bid_request_status
      WHERE quote_header_id = in_quoteheaderid
      AND site_id           = IN_SITE_ID
      AND UPPER(non_std_comp) = 'ADDITIONAL BGP PREFIX';
    EXCEPTION
    WHEN NO_DATA_FOUND THEN
      NULL;
    END;
     IF upper(v_SECONDRY_ACCESS_TYPE) = 'DSL' THEN
        V_SECONDRY_GPoP                := V_SECONDRY_GPoP_attribute;
      ELSE
        V_SECONDRY_GPoP                := V_SECONDRY_GPoP_accessqref;
      END IF;


     Begin
     select distinct  c.pri_status
 into V_PRIMARY_CPE_PRICING_STATUS
      from cpe_qref C
      left outer join quote_site qs
      on c.quote_site_id = qs.quote_site_id
           left outer join quote_header qh
      on qs.quote_header_id = qh.quote_header_id
      left outer JOIN line_item lm
      on qh.quote_header_id = lm.quote_header_id
   where qh.quote_header_id = in_quoteheaderid
   and qs.site_id = in_site_id
  and UPPER( lm.fallback_type) = 'PRIMARY'
   and qs.active = 'Y'
   AND rownum = 1;

   select distinct order_type
   into V_PRIMARY_CONNECTION_STATUS
   from quote where quote_id = in_quoteid
   and rownum= 1;

   exception
  WHEN NO_DATA_FOUND THEN
      NULL;
    END;

    Begin

    -- select
    --------------------
    -- for help desk option--
    SELECT DISTINCT ld.value
    INTO v_helpdesk_type
    FROM quote q
    LEFT OUTER JOIN quote_header qh
    ON q.quote_id = qh.quote_id
    LEFT OUTER JOIN quote_site qs
    ON qh.quote_header_id = qs.quote_header_id
      /* INNER JOIN site s
      ON qs.site_id = s.site_id*/
    INNER JOIN line_item lm
    ON qh.quote_header_id  = lm.quote_header_id
    AND lm.quote_header_id = in_quoteheaderid
    INNER JOIN line_item_detail ld
    ON lm.line_item_id = ld.line_item_id
    LEFT OUTER JOIN attribute_mapping am
    ON ld.attribute_mapping_id = am.attribute_mapping_id
    LEFT OUTER JOIN price_line_item_detail pd
    ON lm.line_item_id = pd.line_item_id
    LEFT OUTER JOIN price_line_item pl
    ON pd.price_line_item_id = pl.price_line_item_id
    LEFT OUTER JOIN access_qref aq
    ON (pd.external_qref) = UPPER (aq.access_qref)
    LEFT OUTER JOIN cpe_qref cpeq
    ON qs.quote_site_id    = cpeq.quote_site_id
    WHERE q.quote_id       = in_quoteid
    AND qh.quote_header_id = in_quoteheaderid
      -- AND s.site_id          = in_site_id
      -- and upper(sqe_display_text) like '%VALUE OF N%'
    AND upper(lm.fallback_type) = 'PRIMARY'
    AND (qs.active              = 'Y')
    AND (lm.active              = 'Y')
    AND (ld.active              = 'Y')
    AND ( pd.active             = 'Y'
    OR pd.active               IS NULL)
    AND am.attribute_mapping_id = 507
      and rownum= 1;

    exception
    When no_data_found Then
    Null;

    End;

    ---------------------
    -------------------- END SECONDARY Pricing Status and install cost--------
    SELECT COUNT(*)
    INTO v_rowcount
    FROM BCM_Export
    WHERE quote_header_id = in_quoteheaderid
    AND site_id           = IN_SITE_ID;
    IF v_rowcount         = 0 THEN
      INSERT
      INTO BCM_Export VALUES
        (
          BCMExport_ID.nextval,
          in_quoteheaderid,
          V_SITE_STATUS ,
          IN_SITE_ID,
          V_SITE ,
          V_COUNTRY ,
          V_CITY ,
          V_RESILIENCE_TYPE ,
          V_PRIMARY_CONNECTION_STATUS ,
          V_PRIMARY_REACH_IN_NNI_PORT ,
          V_PRIM_RCH_IN_NNI_PRT_NAME ,
          V_PRIMARY_TARRIF_ZONE ,
          V_PRIMARY_GPoP ,
          V_PRIMARY_APoP ,
          V_PRIMARY_TRAFFIC_TYPE ,
          V_PRIMARY_ACCESS_TECHNOLOGY ,
          V_PRIMARY_N_E1_T1 ,
          V_PRIMARY_ACCESS_SPEED ,
          V_PRIMARY_PORT_SPEED ,
          V_PRIMARY_DSL_SUPPLIER_ID ,
          V_PRIMARY_DSL_SUPP_OFFER_NAME ,
          V_PRIMARY_DSL_TYPE ,
          V_PRIMARY_DSL_CONTENTION ,
          V_Prim_DSL_hVPN_acces_upstream ,
          V_prim_DSL_hVPN_acces_dwnstrm ,
          V_PRIMARY_DSL_PORT_SPEED ,
          V_PRIM_DSL_LCL_LOOP_ACES ,
          V_PRIM_hVPN_ACES_PRD_TYPE ,
          V_PRIM_hVPN_ACES_SRVCE_ID ,
          V_PRIM_hVPN_PRT_DWNSTRM_SPD ,
          V_PRIM_hVPN_PRT_UPSTRM_SPD ,
          V_PRIM_hVPN_LCL_LOOP_ACES ,
          V_PRIMARY_TOTAL_AF ,
          V_PRIMARY_AF_MULTIMEDIA ,
          V_PRIMARY_EF_SPEED ,
          V_PRIMARY_DE_SPEED ,
          V_NO_OF_ADDI_VPN_PRMRY_PORT ,
          V_NO_OFBGP_PRFXES_PRM_PRT ,
          V_PRIMARY_CPE_PROGRAM_NAME ,
          V_PRIMARY_CPE_INSTALL_EUP ,
          V_PRIMARY_CPE_INST_EUP_DISCT ,
          V_PRIM_CPE_MNTHL_RNTL_EUP ,
          V_PRIM_CPE_MTHLY_RNT_EUP_DIS ,
          V_PRIMARY_CPE_MONT_MAINT_EUP ,
          V_PRIMARY_CPE_INSTALL_COST ,
          V_PRIM_CPE_MNTH_RECUR_CST ,
          V_PRIMARY_CPE_COST_CURRENCY ,
          V_PRIMARY_CPE_PRICING_STATUS ,
          V_PRIMARY_ACCESS_INSTALL_EUP ,
          V_PRIM_ACES_INSTL_EUP_DIS ,
          V_PRIM_ACES_MNTHLY_RNT_EUP ,
          V_PRIM_ACES_MNTH_RNT_EUP_DIS ,
          V_PRIMARY_ACCESS_INSTALL_COST ,
          V_PRIMARY_ACCESS_MONTHLY_COST ,
          V_PRIMARY_ACCESS_COST_CURRENCY ,
          V_PRIM_ACES_PRICING_STATS ,
          V_PRIMARY_PORT_INSTALL_EUP ,
          V_PRIM_PRT_INSTL_EUP_DIS ,
          V_PRIM_PRT_RECNFG_ONE_TIM ,
          V_PRIM_PRT_RECNFIG_OT_DIS ,
          V_PRIMARY_DSL_UPGRD_DWNGRD_OT ,
          V_PRIM_DSL_UP_DWN_GRD_OT_DIS ,
          V_PRIMARY_PORT_MNTHLY_RNTL_EUP ,
          V_PRM_PRT_MNTH_RNTL_EUP_DIS ,
          V_PRIMARY_LLA_INSTALL_EUP ,
          V_PRIMARY_LLA_INSTALL_EUP_DISC ,
          V_PRIMARY_LLA_MNTHL_RENTAL_EUP ,
          V_PRIM_LLA_MNTH_RNT_EUP_DIS ,
          V_PRIMARY_LLA_INSTALL_COST ,
          V_PRIMARY_LLA_MONTHLY_COST ,
          V_PRIMARY_LLA_COST_CURRENCY ,
          V_PRIMARY_mVPN_ONE_TIME_EUP ,
          V_PRI_mVPN_MNTRNT_EUP_PRPRT ,
          V_PRI_mVPN_MNTRN_EU_PRPRT_DIS ,
          V_PR_mVP_MNTRN_EUP_TTAD_VPN ,
          V_PR_mVPN_MNRN_NT_EUP_ADVPN ,
          V_PRIM_BGP_PRFX_ONETME_EUP ,
          V_PRIM_BGP_PRFX_OT_EUP_DIS ,
          V_PRI_BGP_PRFX_MNT_RNT_EUP ,
          V_PR_BGP_PRFX_MNT_RNT_EUP_DIS ,
          V_SECONDRY_CONNECTION_STATUS ,
          V_SECONDRY_NNI_PORT ,
          V_SCNDRY_REACH_IN_NNI_PRT_NAME ,
          V_SECONDRY_TARRIF_ZONE ,
          V_SECONDRY_GPoP ,
          V_SECONDRY_APoP ,
          V_SECONDRY_TRAFFIC_TYPE ,
          V_SECONDRY_ACCESS_TYPE ,
          V_SECONDRY_N_E1_T1 ,
          V_SECONDRY_ACCESS_SPEED ,
          V_SECONDRY_PORT_SPEED ,
          V_SECONDRY_DSL_SUPPLIER_ID ,
          V_SECONDRY_DSL_SUPP_OFFR_NAME ,
          V_SECONDRY_DSL_TYPE ,
          V_SECONDRY_DSL_CONTENTION ,
          V_sec_DSL_hVPN_acces_upstrm ,
          V_sec_DSL_hVPN_acces_dwnstrm ,
          V_SECONDRY_DSL_PORT_SPEED ,
          V_SEC_DSL_LCAL_LP_ACES ,
          V_SEC_hVPN_ACES_PRD_TYP ,
          V_SECND_hVPN_ACCESS_SERVICE_ID ,
          V_SECND_hVPN_PRT_DWNSTRM_SPEED ,
          V_SEC_hVPN_PRT_UPSTRM_SPD ,
          V_SECND_hVPN_LOCAL_LOOP_ACCESS ,
          V_SECONDRY_TOTAL_AF ,
          V_SECONDRY_AF_MULTIMEDIA ,
          V_SECONDRY_EF_SPEED ,
          V_SECONDRY_DE_SPEED ,
          V_NO_OF_ADDI_VPN_SCNDRY_PORT ,
          V_NO_OF_BGP_PRFXE_SCDRY_PRT ,
          V_SECONDRY_CPE_PROGRAM_NAME ,
          V_SECONDRY_CPE_INSTALL_EUP ,
          V_SECONDRY_CPE_INST_EUP_DISCT ,
          V_SECND_CPE_MONTHLY_RENTAL_EUP ,
          V_SECND_CPE_MTHLY_RNT_EUP_DISC ,
          V_SECONDRY_CPE_MONT_MAINT_EUP ,
          V_SECONDRY_CPE_INSTALL_COST ,
          V_SECND_CPE_MONTH_RECURR_COST ,
          V_SECONDRY_CPE_COST_CURRENCY ,
          V_SECONDRY_CPE_PRICING_STATUS ,
          V_SECONDRY_ACCESS_INSTALL_EUP ,
          V_SEC_ACES_INSTL_EUP_DIS ,
          V_SECND_ACCESS_MNTHLY_RENT_EUP ,
          V_SEC_ACES_MNT_RNT_EUP_DIS ,
          V_SECONDRY_ACCESS_INSTALL_COST ,
          V_SECONDRY_ACCESS_MONTHLY_COST ,
          V_SEC_ACES_CST_CURR ,
          V_SEC_ACCES_PRIC_STAT ,
          V_SECONDRY_PORT_INSTALL_EUP ,
          V_SEC_PRT_INSTL_EUP_DIS ,
          V_SECNDRY_PRT_RECNFIG_OT ,
          V_SEC_PRT_RECNFIG_OT_DIS ,
          V_SECONDRY_DSL_UPGRD_DWNGRD_OT ,
          V_SECND_DSL_UP_DWN_GRD_OT_DISC ,
          V_SEC_PRT_MNTH_RNT_EUP ,
          V_SECND_PORT_MNTH_RNTL_EUP_DIS ,
          V_SECONDRY_LLA_INSTALL_EUP ,
          V_SEC_LLA_INSTL_EUP_DIS ,
          V_SEC_LLA_MNT_RNTL_EUP ,
          V_SEC_LLA_MNT_RNT_EUP_DIS ,
          V_SECONDRY_LLA_INSTALL_COST ,
          V_SECONDRY_LLA_MONTHLY_COST ,
          V_SECONDRY_LLA_COST_CURRENCY ,
          V_SECONDRY_mVPN_ONE_TIME_EUP ,
          V_SECND_mVPN_ONE_TIME_NET_EUP,
          V_SEC_mVPN_MNTRNT_EUP_PERRT ,
          V_SE_mVPN_MNRNT_EUP_PERRT_DIS ,
          V_SE_mVP_MNRNT_EUP_TT_AD_VPN ,
          V_SE_mVPN_MNRNT_NT_EUP_ADVPN ,
          V_SECONDRY_BGP_PRFX_OT_EUP ,
          V_SEC_BGP_PRFX_OT_EUP_DIS ,
          V_SEC_BGP_PRFX_MNT_RNT_EUP ,
          V_SEC_BGP_PRFX_MN_RN_EUP_DIS ,
          V_CHANGE_MANAGEMENT ,
          V_CHANGE_MANAGEMENT_DISCOUNT ,
          V_CHANGE_MANAGEMENT_LIGHT_EUP ,
          V_CHNGE_MGMT_LGHT_EUP_DIS ,
          V_PROACTIVE_CE_MONITORINGS_EUP ,
          V_PRACTVE_CE_MNTR_EUP_DIS ,
          V_SNMP_RDN_ACES_PRM_CPET_EUP ,
          V_SNMP_RD_ACE_PR_CPT_EUP_DIS ,
          V_OOH_TRNUP_MN_CPE_OT_EUP ,
          V_OOH_TRNUP_MN_CPE_OT_EUP_DIS ,
          V_SNMP_RDN_ACE_SEC_CPET_EUP ,
          V_SNMP_RD_ACE_SE_CPET_EUP_DIS ,
          V_OOH_TRNUP_SEC_CPE_OT_EUP ,
          V_OOH_TRNUP_SEC_CPE_OT_EUP_DIS,
          V_BGP_PRIM_ONETIME_COST,
          v_BGP_PRIM_RECUR_COST,
          v_BGP_SEC_ONETIME_COST ,
          v_BGP_SEC_RECURRING_COST ,
          V_PRIMARY_MVPN_NET_EUP,
          v_HELPDESK_TYPE,
          v_HELPDESK_ONETIME_EUP ,
          v_Helpdesk_One_Time_Dis,
          v_Helpdesk_Mon_Recur_EUP ,
          v_Helpdesk_Mon_Recur_Dis ,
          v_Sec_cpe_Chg_Mgmt_Mnth_EUP ,
          v_Sec_cpe_Chg_Mgmt_Mnth_Dis ,
          v_Sec_cpe_Pro_CE_Mntr_Mnth_EUP ,
          v_Sec_cpe_Pro_CE_Mntr_Mnth_Dis,
          v_Prim_cpe_Ins_PTP ,
          V_Prim_cpe_mon_Rntal_PTP ,
          V_Prim_accss_ins_PTP ,
          V_Prim_accss_Mon_rntal_PTP ,
          V_Prim_port_Ins_PTP ,
          V_Prim_port_reconfig_One_time ,
          V_Prim_DSL_Up_Down_One_time ,
          V_Prim_port_Mon_rntal_PTP ,
          V_Prim_LLA_Ins_PTP ,
          V_Prim_LLA_Mon_rntal_PTP ,
          V_Prim_mVPN_One_Time_PTP ,
          V_Prim_mVPN_One_Time_Net_PTP ,
          V_Prim_mVPN_Mon_Rntal_PTP_Port ,
          V_Pr_mVPN_MnRnt_PTP_taddVPN,
          V_Pr_mVPN_Mnrnt_nt_PTP_tVPN,
          V_Pr_BGP_Prefx_One_Time_PTP ,
          V_Prim_BGP_Prefx_Monrnt_PTP ,
          V_Sec_CPE_Ins_PTP ,
          V_Sec_CPE_Mon_Rntal_PTP ,
          V_Sec_accss_Ins_PTP ,
          V_Sec_accss_mon_rntal_PTP ,
          V_Sec_port_Ins_PTP ,
          V_Sec_port_reconfig_One_time ,
          V_Sec_DSL_Up_Down_One_time ,
          V_Sec_Port_mon_rntal_PTP ,
          V_Sec_LLA_Ins_PTP ,
          V_Sec_LLA_Mon_rntal_PTP ,
          V_Sec_mVPN_One_Time_PTP ,
          V_Sec_mVPN_One_Time_Net_PTP ,
          V_Se_mVPN_mon_rntl_PTP_Port ,
          V_Sec_mVPN_mon_rnt_PTP_VPN ,
          V_Se_mVPN_mn_rnt_Nt_PTP_VPN ,
          V_Sec_BGP_Prfx_One_Time_PTP ,
          V_Se_BGP_Prefx_mon_rntl_PTP ,
          V_Chnge_Mgmt_PTP ,
          V_Proactv_CE_Monitoring_PTP ,
          V_SNMP_RdAcs_Pr_CPE_OnTm_PTP ,
          V_OOH_trn_up_Mn_CPE_OneTm_PTP ,
          V_SNMP_RdAcs_Se_CPE_OnTm_PTP ,
          V_OOH_trn_up_Se_CPE_OnTm_PTP ,
          V_Helpdesk_One_Time_PTP ,
          V_Helpdesk_Mon_Recurring_PTP ,
          V_Sec_CPE_Chnge_Mgmt_PTP ,
          V_Se_CPE_Practv_CE_Mntr_PTP,
          -- Added on 4/8/2011 as part of R16 - Start
          vPrim_cpe_Ins_PTP_DS           ,
          vPrim_cpe_mon_Rntal_PTP_DS     ,
          vprim_accss_ins_PTP_DS         ,
          vPrim_accss_Mon_rntal_PTP_DS   ,
          vPrim_port_Ins_PTP_DS          ,
          vPrim_port_reconfig_onetime_DS ,
          vPrim_DSL_Up_Down_One_time_DS  ,
          vPrim_port_Mon_rntal_PTP_DS    ,
          vPrim_LLA_Ins_PTP_DS           ,
          vPrim_LLA_Mon_rntal_PTP_DS     ,
          vPrim_mVPN_Mon_Rnt_PTP_Port_DS ,
          vPr_BGP_Prefx_One_Time_PTP_DS  ,
          vPrim_BGP_Prefx_Mon_rnt_PTP_DS ,
          vSec_CPE_Ins_PTP_DS            ,
          vSec_CPE_Mon_Rntal_PTP_DS      ,
          vSec_accss_Ins_PTP_DS          ,
          vSec_accss_mon_rntal_PTP_DS    ,
          vSec_port_Ins_PTP_DS           ,
          vSec_port_reconfig_One_time_DS ,
          vSec_DSL_Up_Down_One_time_DS   ,
          vSec_Port_mon_rntal_PTP_DS     ,
          vSec_LLA_Ins_PTP_DS            ,
          vSec_LLA_Mon_rntal_PTP_DS      ,
          vSec_mVPN_mon_rnt_PTP_Port_DS  ,
          vSec_BGP_Prefx_OneTime_PTP_DS  ,
          vSec_BGP_Prefx_mon_rnt_PTP_DS  ,
          vChnge_Mgmt_PTP_DS             ,
          vProactive_CE_Monitor_PTP_DS   ,
          vSNMP_RdAcsPr_CPE_OneTm_PTP_DS ,
          vOOH_trnupMn_CPE_OneTm_PTP_DS  ,
          vSNMP_RdAcsSe_CPE_OneTm_PTP_DS ,
          vOOH_trnupSe_CPE_OneTm_PTP_DS  ,
          vHelpdesk_One_Time_PTP_DS      ,
          vHelpdesk_Mon_Recurring_PTP_DS ,
          vSec_CPE_Chnge_Mgmt_PTP_DS     ,
          vSec_CPE_Proact_CEMntrg_PTP_DS,
          -- Added on 4/8/2011 as part of R16 - End
          V_Pri_Acc_Optm_Rental_Cost_Y2 ,
          V_Pri_Acc_Optm_Rental_Cost_Y3,
          V_Pri_Acc_Optm_Rental_Cost_Y4,
          V_Pri_Acc_Optm_Rental_Cost_Y5,
          V_Sec_Acc_Optm_Rental_Cost_Y2,
          V_Sec_Acc_Optm_Rental_Cost_Y3,
          V_Sec_Acc_Optm_Rental_Cost_Y4,
          V_Sec_Acc_Optm_Rental_Cost_Y5,
          V_Pri_Workflow_Status --work flow status
        );
    ELSE
      UPDATE BCM_Export
      SET SITE_STATUS                  = V_SITE_STATUS ,
        SITE_ID                        = IN_SITE_ID ,
        SITE                           = V_SITE ,
        COUNTRY                        = V_COUNTRY ,
        CITY                           = V_CITY ,
        RESILIENCE_TYPE                = V_RESILIENCE_TYPE ,
        PRIMARY_CONNECTION_STATUS      = V_PRIMARY_CONNECTION_STATUS ,
        PRIMARY_REACH_IN_NNI_PORT      = V_PRIMARY_REACH_IN_NNI_PORT ,
        PRIMARY_REACH_IN_NNI_PART_NAME = V_PRIM_RCH_IN_NNI_PRT_NAME ,
        PRIMARY_TARRIF_ZONE            = V_PRIMARY_TARRIF_ZONE ,
        PRIMARY_GPOP                   = V_PRIMARY_GPoP ,
        PRIMARY_APOP                   = V_PRIMARY_APoP ,
        PRIMARY_TRAFFIC_TYPE           = V_PRIMARY_TRAFFIC_TYPE ,
        PRIMARY_ACCESS_TECHNOLOGY      = V_PRIMARY_ACCESS_TECHNOLOGY ,
        PRIMARY_N_E1_T1                = V_PRIMARY_N_E1_T1 ,
        PRIMARY_ACCESS_SPEED           = V_PRIMARY_ACCESS_SPEED ,
        PRIMARY_PORT_SPEED             = V_PRIMARY_PORT_SPEED ,
        PRIMARY_DSL_SUPPLIER_ID        = V_PRIMARY_DSL_SUPPLIER_ID ,
        PRIMARY_DSL_SUPP_OFFER_NAME    = V_PRIMARY_DSL_SUPP_OFFER_NAME ,
        PRIMARY_DSL_TYPE               = V_PRIMARY_DSL_TYPE ,
        PRIMARY_DSL_CONTENTION         = V_PRIMARY_DSL_CONTENTION ,
        PRIMARY_DSL_ACCESS_UPSTREAM    = V_Prim_DSL_hVPN_acces_upstream ,
        PRIMARY_DSL_ACCESS_DOWNSTREAM  = V_prim_DSL_hVPN_acces_dwnstrm ,
        PRIMARY_DSL_PORT_SPEED         = V_PRIMARY_DSL_PORT_SPEED ,
        PRIMARY_DSL_LOCAL_LOOP_ACCESS  = V_PRIM_DSL_LCL_LOOP_ACES ,
        PRIMARY_HVPN_ACCESS_PROD_TYPE  = V_PRIM_hVPN_ACES_PRD_TYPE ,
        PRIMARY_HVPN_ACCESS_SERVICE_ID = V_PRIM_hVPN_ACES_SRVCE_ID ,
        PRIMRY_HVPN_PORT_DWNSTRM_SPEED = V_PRIM_hVPN_PRT_DWNSTRM_SPD ,
        PRIMARY_HVPN_PORT_UPSTRM_SPEED = V_PRIM_hVPN_PRT_UPSTRM_SPD ,
        PRIMARY_HVPN_LOCAL_LOOP_ACCESS = V_PRIM_hVPN_LCL_LOOP_ACES ,
        PRIMARY_TOTAL_AF               = V_PRIMARY_TOTAL_AF ,
        PRIMARY_AF_MULTIMEDIA          = V_PRIMARY_AF_MULTIMEDIA ,
        PRIMARY_EF_SPEED               = V_PRIMARY_EF_SPEED ,
        PRIMARY_DE_SPEED               = V_PRIMARY_DE_SPEED ,
        NO_OF_ADDI_VPN_PRMRY_PORT      = V_NO_OF_ADDI_VPN_PRMRY_PORT ,
        NO_OF_BGP_PREFIXES_PRMRY_PORT  = V_NO_OFBGP_PRFXES_PRM_PRT ,
        PRIMARY_CPE_PROGRAM_NAME       = V_PRIMARY_CPE_PROGRAM_NAME ,
        PRIMARY_CPE_INSTALL_EUP        = V_PRIMARY_CPE_INSTALL_EUP ,
        PRIMARY_CPE_INST_EUP_DISCT     = V_PRIMARY_CPE_INST_EUP_DISCT ,
        PRIMARY_CPE_MONTHLY_RENTAL_EUP = V_PRIM_CPE_MNTHL_RNTL_EUP ,
        PRIMARY_CPE_MTHLY_RNT_EUP_DISC = V_PRIM_CPE_MTHLY_RNT_EUP_DIS ,
        PRIMARY_CPE_MONT_MAINT_EUP     = V_PRIMARY_CPE_MONT_MAINT_EUP ,
        PRIMARY_CPE_INSTALL_COST       = V_PRIMARY_CPE_INSTALL_COST ,
        PRIMARY_CPE_MONTH_RECURR_COST  = V_PRIM_CPE_MNTH_RECUR_CST ,
        PRIMARY_CPE_COST_CURRENCY      = V_PRIMARY_CPE_COST_CURRENCY ,
        PRIMARY_CPE_PRICING_STATUS     = V_PRIMARY_CPE_PRICING_STATUS ,
        PRIMARY_ACCESS_INSTALL_EUP     = V_PRIMARY_ACCESS_INSTALL_EUP ,
        PRIMARY_ACCESS_INSTALL_EUP_DIS = V_PRIM_ACES_INSTL_EUP_DIS ,
        PRIMARY_ACCESS_MNTHLY_RNT_EUP  = V_PRIM_ACES_MNTHLY_RNT_EUP ,
        PRIM_ACCESS_MNTH_RNT_EUP_DISC  = V_PRIM_ACES_MNTH_RNT_EUP_DIS ,
        PRIMARY_ACCESS_INSTALL_COST    = V_PRIMARY_ACCESS_INSTALL_COST ,
        PRIMARY_ACCESS_MONTHLY_COST    = V_PRIMARY_ACCESS_MONTHLY_COST ,
        PRIMARY_ACCESS_COST_CURRENCY   = V_PRIMARY_ACCESS_COST_CURRENCY ,
        PRIMARY_ACCESS_PRICING_STATUS  = V_PRIM_ACES_PRICING_STATS ,
        PRIMARY_PORT_INSTALL_EUP       = V_PRIMARY_PORT_INSTALL_EUP ,
        PRIMARY_PORT_INSTALL_EUP_DISC  = V_PRIM_PRT_INSTL_EUP_DIS ,
        PRIMARY_PORT_RECONFIG_ONE_TIME = V_PRIM_PRT_RECNFG_ONE_TIM ,
        PRIMARY_PORT_RECONFIG_OT_DISC  = V_PRIM_PRT_RECNFIG_OT_DIS ,
        PRIMARY_DSL_UPGRD_DWNGRD_OT    = V_PRIMARY_DSL_UPGRD_DWNGRD_OT ,
        PRIMARY_DSL_UP_DWN_GRD_OT_DISC = V_PRIM_DSL_UP_DWN_GRD_OT_DIS ,
        PRIMARY_PORT_MNTHLY_RNTL_EUP   = V_PRIMARY_PORT_MNTHLY_RNTL_EUP ,
        PRMRY_PORT_MNTH_RNTL_EUP_DISC  = V_PRM_PRT_MNTH_RNTL_EUP_DIS ,
        PRIMARY_LLA_INSTALL_EUP        = V_PRIMARY_LLA_INSTALL_EUP ,
        PRIMARY_LLA_INSTALL_EUP_DISC   = V_PRIMARY_LLA_INSTALL_EUP_DISC ,
        PRIMARY_LLA_MNTHL_RENTAL_EUP   = V_PRIMARY_LLA_MNTHL_RENTAL_EUP ,
        PRIMARY_LLA_MNTH_RNT_EUP_DISC  = V_PRIM_LLA_MNTH_RNT_EUP_DIS ,
        PRIMARY_LLA_INSTALL_COST       = V_PRIMARY_LLA_INSTALL_COST ,
        PRIMARY_LLA_MONTHLY_COST       = V_PRIMARY_LLA_MONTHLY_COST ,
        PRIMARY_LLA_COST_CURRENCY      = V_PRIMARY_LLA_COST_CURRENCY ,
        PRIMARY_MVPN_ONE_TIME_EUP      = V_PRIMARY_mVPN_ONE_TIME_EUP ,
        PRIM_MVPN_MNT_RNT_EUP_PERPORT  = V_PRI_mVPN_MNTRNT_EUP_PRPRT ,
        PRI_MVPN_MNTRNT_EUP_PERPRT_DIS = V_PRI_mVPN_MNTRN_EU_PRPRT_DIS ,
        PRI_MVP_MNT_RNT_EUP_TOTADD_VPN = V_PR_mVP_MNTRN_EUP_TTAD_VPN ,
        PRI_MVPN_MNTRNT_NET_EUP_ADDVPN = V_PR_mVPN_MNRN_NT_EUP_ADVPN ,
        PRIMARY_BGP_PRFIX_ONETIME_EUP  = V_PRIM_BGP_PRFX_ONETME_EUP ,
        PPRIMARY_BGP_PRFIX_OT_EUP_DISC = V_PRIM_BGP_PRFX_OT_EUP_DIS ,
        PRIMARY_BGP_PRFX_MNT_RNTL_EUP  = V_PRI_BGP_PRFX_MNT_RNT_EUP ,
        PRIM_BGP_PRFX_MNT_RNTL_EUP_DIS = V_PR_BGP_PRFX_MNT_RNT_EUP_DIS ,
        SECONDRY_CONNECTION_STATUS     = V_SECONDRY_CONNECTION_STATUS ,
        SECONDRY_NNI_PORT              = V_SECONDRY_NNI_PORT ,
        SCNDRY_REACH_IN_NNI_PRT_NAME   = V_SCNDRY_REACH_IN_NNI_PRT_NAME ,
        SECONDRY_TARRIF_ZONE           = V_SECONDRY_TARRIF_ZONE ,
        SECONDRY_GPOP                  = V_SECONDRY_GPoP ,
        SECONDRY_APOP                  = V_SECONDRY_APoP ,
        SECONDRY_TRAFFIC_TYPE          = V_SECONDRY_TRAFFIC_TYPE ,
        SECONDRY_ACCESS_TYPE           = V_SECONDRY_ACCESS_TYPE ,
        SECONDRY_N_E1_T1               = V_SECONDRY_N_E1_T1 ,
        SECONDRY_ACCESS_SPEED          = V_SECONDRY_ACCESS_SPEED ,
        SECONDRY_PORT_SPEED            = V_SECONDRY_PORT_SPEED ,
        SECONDRY_DSL_SUPPLIER_ID       = V_SECONDRY_DSL_SUPPLIER_ID ,
        SECONDRY_DSL_SUPP_OFFR_NAME    = V_SECONDRY_DSL_SUPP_OFFR_NAME ,
        SECONDRY_DSL_TYPE              = V_SECONDRY_DSL_TYPE ,
        SECONDRY_DSL_CONTENTION        = V_SECONDRY_DSL_CONTENTION ,
        SECONDRY_DSL_ACCESS_UPSTREAM   = V_sec_DSL_hVPN_acces_upstrm ,
        SECONDRY_DSL_ACCESS_DOWNSTREAM = V_sec_DSL_hVPN_acces_dwnstrm ,
        SECONDRY_DSL_PORT_SPEED        = V_SECONDRY_DSL_PORT_SPEED ,
        SECONDRY_DSL_LOCAL_LOOP_ACCESS = V_SEC_DSL_LCAL_LP_ACES ,
        SECONDRY_HVPN_ACCESS_PROD_TYPE = V_SEC_hVPN_ACES_PRD_TYP ,
        SECND_HVPN_ACCESS_SERVICE_ID   = V_SECND_hVPN_ACCESS_SERVICE_ID ,
        SECND_HVPN_PRT_DWNSTRM_SPEED   = V_SECND_hVPN_PRT_DWNSTRM_SPEED ,
        SECONDRY_HVPN_PRT_UPSTRM_SPEED = V_SEC_hVPN_PRT_UPSTRM_SPD ,
        SECND_HVPN_LOCAL_LOOP_ACCESS   = V_SECND_hVPN_LOCAL_LOOP_ACCESS ,
        SECONDRY_TOTAL_AF              = V_SECONDRY_TOTAL_AF ,
        SECONDRY_AF_MULTIMEDIA         = V_SECONDRY_AF_MULTIMEDIA ,
        SECONDRY_EF_SPEED              = V_SECONDRY_EF_SPEED ,
        SECONDRY_DE_SPEED              = V_SECONDRY_DE_SPEED ,--error2
        NO_OF_ADDI_VPN_SCNDRY_PORT     = V_NO_OF_ADDI_VPN_SCNDRY_PORT ,
        NO_OF_BGP_PREFXES_SCNDRY_PORT  = V_NO_OF_BGP_PRFXE_SCDRY_PRT ,
        SECONDRY_CPE_PROGRAM_NAME      = V_SECONDRY_CPE_PROGRAM_NAME ,
        SECONDRY_CPE_INSTALL_EUP       = V_SECONDRY_CPE_INSTALL_EUP ,
        SECONDRY_CPE_INST_EUP_DISCT    = V_SECONDRY_CPE_INST_EUP_DISCT ,
        SECND_CPE_MONTHLY_RENTAL_EUP   = V_SECND_CPE_MONTHLY_RENTAL_EUP ,
        SECND_CPE_MTHLY_RNT_EUP_DISC   = V_SECND_CPE_MTHLY_RNT_EUP_DISC ,
        SECONDRY_CPE_MONT_MAINT_EUP    = V_SECONDRY_CPE_MONT_MAINT_EUP ,
        SECONDRY_CPE_INSTALL_COST      = V_SECONDRY_CPE_INSTALL_COST ,
        SECND_CPE_MONTH_RECURR_COST    = V_SECND_CPE_MONTH_RECURR_COST ,
        SECONDRY_CPE_COST_CURRENCY     = V_SECONDRY_CPE_COST_CURRENCY ,
        SECONDRY_CPE_PRICING_STATUS    = V_SECONDRY_CPE_PRICING_STATUS ,
        SECONDRY_ACCESS_INSTALL_EUP    = V_SECONDRY_ACCESS_INSTALL_EUP ,
        SECND_ACCESS_INSTALL_EUP_DISC  = V_SEC_ACES_INSTL_EUP_DIS ,
        SECND_ACCESS_MNTHLY_RENT_EUP   = V_SECND_ACCESS_MNTHLY_RENT_EUP ,
        SECN_ACCESS_MNTH_RNT_EUP_DISC  = V_SEC_ACES_MNT_RNT_EUP_DIS ,
        SECONDRY_ACCESS_INSTALL_COST   = V_SECONDRY_ACCESS_INSTALL_COST ,
        SECONDRY_ACCESS_MONTHLY_COST   = V_SECONDRY_ACCESS_MONTHLY_COST ,
        SECONDRY_ACCESS_COST_CURRENCY  = V_SEC_ACES_CST_CURR ,
        SECONDRY_ACCESS_PRICING_STATUS = V_SEC_ACCES_PRIC_STAT ,
        SECONDRY_PORT_INSTALL_EUP      = V_SECONDRY_PORT_INSTALL_EUP ,
        SECONDRY_PORT_INSTALL_EUP_DISC = V_SEC_PRT_INSTL_EUP_DIS ,
        SECNDRY_PORT_RECONFIG_ONE_TIME = V_SECNDRY_PRT_RECNFIG_OT ,
        SECNDRY_PORT_RECONFIG_OT_DISC  = V_SEC_PRT_RECNFIG_OT_DIS ,
        SECONDRY_DSL_UPGRD_DWNGRD_OT   = V_SECONDRY_DSL_UPGRD_DWNGRD_OT ,
        SECND_DSL_UP_DWN_GRD_OT_DISC   = V_SECND_DSL_UP_DWN_GRD_OT_DISC ,
        SECONDRY_PORT_MNTHLY_RNTL_EUP  = V_SEC_PRT_MNTH_RNT_EUP ,
        SECND_PORT_MNTH_RNTL_EUP_DIS   = V_SECND_PORT_MNTH_RNTL_EUP_DIS ,
        SECONDRY_LLA_INSTALL_EUP       = V_SECONDRY_LLA_INSTALL_EUP ,
        SECONDRY_LLA_INSTALL_EUP_DISC  = V_SEC_LLA_INSTL_EUP_DIS ,
        SECONDRY_LLA_MNTHL_RENTAL_EUP  = V_SEC_LLA_MNT_RNTL_EUP ,
        SECONDRY_LLA_MNTH_RNT_EUP_DISC = V_SEC_LLA_MNT_RNT_EUP_DIS ,
        SECONDRY_LLA_INSTALL_COST      = V_SECONDRY_LLA_INSTALL_COST ,
        SECONDRY_LLA_MONTHLY_COST      = V_SECONDRY_LLA_MONTHLY_COST ,
        SECONDRY_LLA_COST_CURRENCY     = V_SECONDRY_LLA_COST_CURRENCY ,
        SECONDRY_MVPN_ONE_TIME_EUP     = V_SECONDRY_mVPN_ONE_TIME_EUP ,
        SECONDRY_MVPN_ONE_TIME_NET_EUP = V_SECND_mVPN_ONE_TIME_NET_EUP ,
        SECD_MVPN_MNT_RNT_EUP_PERPORT  = V_SEC_mVPN_MNTRNT_EUP_PERRT ,
        SEC_MVPN_MNTRNT_EUP_PERPRT_DIS = V_SE_mVPN_MNRNT_EUP_PERRT_DIS ,
        SEC_MVP_MNTRNT_EUP_TOT_ADD_VPN = V_SE_mVP_MNRNT_EUP_TT_AD_VPN ,
        SEC_MVPN_MNTRNT_NET_EUP_ADDVPN = V_SE_mVPN_MNRNT_NT_EUP_ADVPN ,
        SECONDRY_BGP_PRFIX_ONETIME_EUP = V_SECONDRY_BGP_PRFX_OT_EUP ,
        SECONDRY_BGP_PRFIX_OT_EUP_DISC = V_SEC_BGP_PRFX_OT_EUP_DIS ,
        SECONDRY_BGP_PRFX_MNT_RNTL_EUP = V_SEC_BGP_PRFX_MNT_RNT_EUP ,
        SECD_BGP_PRFX_MNT_RNTL_EUP_DIS = V_SEC_BGP_PRFX_MN_RN_EUP_DIS ,
        CHANGE_MANAGEMENT              = V_CHANGE_MANAGEMENT ,
        CHANGE_MANAGEMENT_DISCOUNT     = V_CHANGE_MANAGEMENT_DISCOUNT ,
        CHANGE_MANAGEMENT_LIGHT_EUP    = V_CHANGE_MANAGEMENT_LIGHT_EUP ,
        CHANGE_MNGMENT_LIGHT_EUP_DISC  = V_CHNGE_MGMT_LGHT_EUP_DIS ,
        PROACTIVE_CE_MONITORINGS_EUP   = V_PROACTIVE_CE_MONITORINGS_EUP ,
        PROACTVE_CE_MONITRINGS_EUP_DIS = V_PRACTVE_CE_MNTR_EUP_DIS ,
        SNMP_RDON_ACES_PRMY_CPEOT_EUP  = V_SNMP_RDN_ACES_PRM_CPET_EUP ,
        SNMP_RD_ACES_PRM_CPEOT_EUP_DIS = V_SNMP_RD_ACE_PR_CPT_EUP_DIS ,
        OOH_TRNUP_MN_CPE_OT_EUP        = V_OOH_TRNUP_MN_CPE_OT_EUP ,
        OOH_TRNUP_MN_CPE_OT_EUP_DIS    = V_OOH_TRNUP_MN_CPE_OT_EUP_DIS ,
        SNMP_RDON_ACES_SECD_CPEOT_EUP  = V_SNMP_RDN_ACE_SEC_CPET_EUP ,
        SNMP_RD_ACES_SEC_CPEOT_EUP_DIS = V_SNMP_RD_ACE_SE_CPET_EUP_DIS ,
        OOH_TRNUP_SEC_CPE_OT_EUP       = V_OOH_TRNUP_SEC_CPE_OT_EUP ,
        OOH_TRNUP_SEC_CPE_OT_EUP_DIS   = V_OOH_TRNUP_SEC_CPE_OT_EUP_DIS,
        BGP_PRIM_ONETME_COST           = v_BGP_PRIM_ONETIME_COST,
        BGP_PRIM_RECURRING_COST        = v_BGP_PRIM_RECUR_COST,
        BGP_SEC_ONETIME_COST           = v_BGP_SEC_ONETIME_COST,
        BGP_SEC_RECURRING_COST         = v_BGP_SEC_RECURRING_COST ,
        PRIMARY_MVPN_NET_EUP           = V_PRIMARY_MVPN_NET_EUP ,
        HELPDESK_TYPE                  = v_HELPDESK_TYPE,
        HELPDESK_ONETIME_EUP           = v_HELPDESK_ONETIME_EUP,
        Helpdesk_One_Time_Dis          = v_Helpdesk_One_Time_Dis,
        Helpdesk_Mon_Recur_EUP         = v_Helpdesk_Mon_Recur_EUP,
        Helpdesk_Mon_Recur_Dis         = v_Helpdesk_Mon_Recur_Dis,
        Sec_cpe_Chg_Mgmt_Mnth_EUP      = v_Sec_cpe_Chg_Mgmt_Mnth_EUP,
        Sec_cpe_Chg_Mgmt_Mnth_Dis      = v_Sec_cpe_Chg_Mgmt_Mnth_Dis,
        Sec_cpe_Pro_CE_Mntr_Mnth_EUP   = v_Sec_cpe_Pro_CE_Mntr_Mnth_EUP ,
        Sec_cpe_Pro_CE_Mntr_Mnth_Dis   = v_Sec_cpe_Pro_CE_Mntr_Mnth_Dis,
        Prim_cpe_Ins_PTP               = V_Prim_cpe_Ins_PTP,
        Prim_cpe_mon_Rntal_PTP         = V_Prim_cpe_mon_Rntal_PTP ,
        Prim_accss_ins_PTP             = V_Prim_accss_ins_PTP ,
        Prim_accss_Mon_rntal_PTP       = V_Prim_accss_Mon_rntal_PTP ,
        Prim_port_Ins_PTP              = V_Prim_port_Ins_PTP,
        Prim_port_reconfig_One_time    = V_Prim_port_reconfig_One_time,
        Prim_DSL_Up_Down_One_time      = V_Prim_DSL_Up_Down_One_time,
        Prim_port_Mon_rntal_PTP        = V_Prim_port_Mon_rntal_PTP ,
        Prim_LLA_Ins_PTP               = V_Prim_LLA_Ins_PTP,
        Prim_LLA_Mon_rntal_PTP         = V_Prim_LLA_Mon_rntal_PTP,
        Prim_mVPN_One_Time_PTP         = V_Prim_mVPN_One_Time_PTP,
        Prim_mVPN_One_Time_Net_PTP     = V_Prim_mVPN_One_Time_Net_PTP,
        Prim_mVPN_Mon_Rntal_PTP_Port   = V_Se_mVPN_mon_rntl_PTP_Port,
        Pr_mVPN_Mon_Rntl_PTP_tadd_VPN  = V_Pr_mVPN_MnRnt_PTP_taddVPN,
        Pr_mVPN_Mn_rnt_nt_PTP_tadd_VPN = V_Pr_mVPN_Mnrnt_nt_PTP_tVPN,
        Pr_BGP_Prefx_One_Time_PTP      = V_Pr_BGP_Prefx_One_Time_PTP,
        Prim_BGP_Prefx_Mon_rntal_PTP   = V_Prim_BGP_Prefx_Monrnt_PTP,
        Sec_CPE_Ins_PTP                = V_Sec_CPE_Ins_PTP ,
        Sec_CPE_Mon_Rntal_PTP          = V_Sec_CPE_Mon_Rntal_PTP,
        Sec_accss_Ins_PTP              = V_Sec_accss_Ins_PTP,
        Sec_accss_mon_rntal_PTP        = V_Sec_accss_mon_rntal_PTP,
        Sec_port_Ins_PTP               = V_Sec_port_Ins_PTP ,
        Sec_port_reconfig_One_time     = V_Sec_port_reconfig_One_time,
        Sec_DSL_Up_Down_One_time       = V_Sec_DSL_Up_Down_One_time ,
        Sec_Port_mon_rntal_PTP         = V_Sec_Port_mon_rntal_PTP,
        Sec_LLA_Ins_PTP                = V_Sec_LLA_Ins_PTP ,
        Sec_LLA_Mon_rntal_PTP          = V_Sec_LLA_Mon_rntal_PTP,
        Sec_mVPN_One_Time_PTP          = V_Sec_mVPN_One_Time_PTP ,
        Sec_mVPN_One_Time_Net_PTP      = V_Sec_mVPN_One_Time_Net_PTP,
        Sec_mVPN_mon_rntal_PTP_Port    = V_Se_mVPN_mon_rntl_PTP_Port ,
        Sec_mVPN_mon_rnt_PTP_Tadd_VPN  = V_Sec_mVPN_mon_rnt_PTP_VPN,
        Se_mVPN_mn_rnt_Nt_PTP_Tad_VPN  = V_Se_mVPN_mn_rnt_Nt_PTP_VPN,
        Sec_BGP_Prefx_One_Time_PTP     = V_Sec_BGP_Prfx_One_Time_PTP,
        Sec_BGP_Prefx_mon_rntal_PTP    = V_Se_BGP_Prefx_mon_rntl_PTP,
        Chnge_Mgmt_PTP                 = V_Chnge_Mgmt_PTP,
        Proactive_CE_Monitorings_PTP   = V_Proactv_CE_Monitoring_PTP,
        SNMP_Rd_Acs_Pr_CPE_One_Tm_PTP  = V_SNMP_RdAcs_Pr_CPE_OnTm_PTP,
        OOH_trn_up_Mn_CPE_One_Tme_PTP  = V_OOH_trn_up_Mn_CPE_OneTm_PTP,
        SNMP_Rd_Acs_Se_CPE_One_Tm_PTP  = V_SNMP_RdAcs_Se_CPE_OnTm_PTP,
        OOH_trn_up_Se_CPE_One_Tm_PTP   = V_OOH_trn_up_Se_CPE_OnTm_PTP,
        Helpdesk_One_Time_PTP          = V_Helpdesk_One_Time_PTP,
        Helpdesk_Mon_Recurring_PTP     = V_Helpdesk_Mon_Recurring_PTP,
        Sec_CPE_Chnge_Mgmt_PTP         = V_Sec_CPE_Chnge_Mgmt_PTP,
        Sec_CPE_Proactv_CE_Mntrng_PTP  = V_Se_CPE_Practv_CE_Mntr_PTP,
        -- Added on 4/8/2011 as part of R16 - Start
        Prim_cpe_Ins_PTP_DIS           = vPrim_cpe_Ins_PTP_DS ,
        Prim_cpe_mon_Rntal_PTP_DIS     = vPrim_cpe_mon_Rntal_PTP_DS     ,
        prim_accss_ins_PTP_DIS         = vprim_accss_ins_PTP_DS         ,
        Prim_accss_Mon_rntal_PTP_DIS   = vPrim_accss_Mon_rntal_PTP_DS   ,
        Prim_port_Ins_PTP_DIS          = vPrim_port_Ins_PTP_DS          ,
        Prim_port_reconfig_onetime_DIS = vPrim_port_reconfig_onetime_DS ,
        Prim_DSL_Up_Down_One_time_DIS  = vPrim_DSL_Up_Down_One_time_DS  ,
        Prim_port_Mon_rntal_PTP_DIS    = vPrim_port_Mon_rntal_PTP_DS    ,
        Prim_LLA_Ins_PTP_DIS           = vPrim_LLA_Ins_PTP_DS           ,
        Prim_LLA_Mon_rntal_PTP_DIS     = vPrim_LLA_Mon_rntal_PTP_DS     ,
        Prim_mVPN_Mon_Rnt_PTP_Port_DIS = vPrim_mVPN_Mon_Rnt_PTP_Port_DS ,
        Pr_BGP_Prefx_One_Time_PTP_DIS  = vPr_BGP_Prefx_One_Time_PTP_DS  ,
        Prim_BGP_Prefx_Mon_rnt_PTP_DIS = vPrim_BGP_Prefx_Mon_rnt_PTP_DS ,
        Sec_CPE_Ins_PTP_DIS            = vSec_CPE_Ins_PTP_DS            ,
        Sec_CPE_Mon_Rntal_PTP_DIS      = vSec_CPE_Mon_Rntal_PTP_DS      ,
        Sec_accss_Ins_PTP_DIS          = vSec_accss_Ins_PTP_DS          ,
        Sec_accss_mon_rntal_PTP_DIS    = vSec_accss_mon_rntal_PTP_DS    ,
        Sec_port_Ins_PTP_DIS           = vSec_port_Ins_PTP_DS           ,
        Sec_port_reconfig_One_time_DIS = vSec_port_reconfig_One_time_DS ,
        Sec_DSL_Up_Down_One_time_DIS   = vSec_DSL_Up_Down_One_time_DS   ,
        Sec_Port_mon_rntal_PTP_DIS     = vSec_Port_mon_rntal_PTP_DS     ,
        Sec_LLA_Ins_PTP_DIS            = vSec_LLA_Ins_PTP_DS            ,
        Sec_LLA_Mon_rntal_PTP_DIS      = vSec_LLA_Mon_rntal_PTP_DS      ,
        Sec_mVPN_mon_rnt_PTP_Port_DIS  = vSec_mVPN_mon_rnt_PTP_Port_DS  ,
        Sec_BGP_Prefx_OneTime_PTP_DIS  = vSec_BGP_Prefx_OneTime_PTP_DS  ,
        Sec_BGP_Prefx_mon_rnt_PTP_DIS  = vSec_BGP_Prefx_mon_rnt_PTP_DS  ,
        Chnge_Mgmt_PTP_DIS             = vChnge_Mgmt_PTP_DS             ,
        Proactive_CE_Monitor_PTP_DIS   = vProactive_CE_Monitor_PTP_DS   ,
        SNMP_RdAcsPr_CPE_OneTm_PTP_DIS = vSNMP_RdAcsPr_CPE_OneTm_PTP_DS ,
        OOH_trnupMn_CPE_OneTm_PTP_DIS  = vOOH_trnupMn_CPE_OneTm_PTP_DS  ,
        SNMP_RdAcsSe_CPE_OneTm_PTP_DIS = vSNMP_RdAcsSe_CPE_OneTm_PTP_DS ,
        OOH_trnupSe_CPE_OneTm_PTP_DIS  = vOOH_trnupSe_CPE_OneTm_PTP_DS  ,
        Helpdesk_One_Time_PTP_DIS      = vHelpdesk_One_Time_PTP_DS      ,
        Helpdesk_Mon_Recurring_PTP_DIS = vHelpdesk_Mon_Recurring_PTP_DS ,
        Sec_CPE_Chnge_Mgmt_PTP_DIS     = vSec_CPE_Chnge_Mgmt_PTP_DS     ,
        Sec_CPE_Proact_CEMntrg_PTP_DIS = vSec_CPE_Proact_CEMntrg_PTP_DS,
        -- Added on 4/8/2011 as part of R16 - End
        PRI_ACCESS_OPTM_RENTAL_COST_Y2= V_Pri_Acc_Optm_Rental_Cost_Y2 ,
        PRI_ACCESS_OPTM_RENTAL_COST_Y3= V_Pri_Acc_Optm_Rental_Cost_Y3,
        PRI_ACCESS_OPTM_RENTAL_COST_Y4= V_Pri_Acc_Optm_Rental_Cost_Y4,
        PRI_ACCESS_OPTM_RENTAL_COST_Y5=  V_Pri_Acc_Optm_Rental_Cost_Y5,
        SEC_ACCESS_OPTM_RENTAL_COST_Y2=  V_Sec_Acc_Optm_Rental_Cost_Y2,
        SEC_ACCESS_OPTM_RENTAL_COST_Y3=  V_Sec_Acc_Optm_Rental_Cost_Y3,
        SEC_ACCESS_OPTM_RENTAL_COST_Y4 = V_Sec_Acc_Optm_Rental_Cost_Y4,
        SEC_ACCESS_OPTM_RENTAL_COST_Y5 =  V_Sec_Acc_Optm_Rental_Cost_Y5,
        WORKFLOW_STATUS                = V_Pri_Workflow_Status
      WHERE QUOTE_HEADER_ID = in_quoteheaderid
      AND site_id           = in_site_id;
    END IF;
    COMMIT;
  END LOOP;--site lavel end loop
  -- END IF;-- o_site_tbl end if;
  --END LOOP;--main loop ends here
EXCEPTION
WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('not SUCCESSFULL'|| v_errmsg );
   -- Added by Sujana on 23/11/2010 as part of exception handling
    v_sql_errm := substr(SQLERRM,1,150);
    v_sql_code := SQLCODE;
    PKG_COMMON.spi_error_log(
                             in_quoteid,
                             in_quoteheaderid,
                             NULL,
                             NULL,
                             'PKG_BCM_EXPORT',
                             'SPI_BCMEXPORT',
                             v_sql_code,
                             v_sql_errm
                            );
END SPI_BCM_EXPORT;



PROCEDURE SPS_BCMEXPORT
  (
    in_quoteid          IN      quote.quote_id%TYPE,
    in_quoteheaderid    IN      quote_header.quote_header_id%type,
    --in_siteid         IN      site.site_id%TYPE,
    out_values1         OUT     sys_refcursor,
    out_values21        OUT     sys_refcursor,
    out_values22        OUT     sys_refcursor,
    out_values3         OUT     sys_refcursor,
    out_bid_netw_serv   OUT     sys_refcursor,
    out_bid_non_std     OUT     sys_refcursor
  )
AS
BEGIN
  OPEN out_values1 FOR SELECT qs.site_id
AS  "Site id",  q.Quote_ID
AS  "Quote Id",  C.NAME
AS  "Customer Name" ,  qh.Opportunity_ID
AS  "Opportunity_Id",  qh.BID_Number
AS  "Bid Numner",  /*Q.Expedio_QuoteVersion*/
  qh.version AS  "Quote Version Number",
  qh.CURRENCY AS  "Quote Currency",
  U.NAME  AS  "User Name",
  DECODE(ld.attribute_mapping_id,1220,ld.value) AS  "Trade Level",
  /*DECODE(ld.attribute_mapping_id,1219,ld.value)*/ c.channel_type AS "Sales Channel",
  DECODE(ld.attribute_mapping_id,1225,ld.value) AS   "Commited Spend"
  FROM quote q LEFT OUTER JOIN customer c
  ON c.customer_id = q.customer_id
  LEFT OUTER JOIN quote_header qh
  ON q.quote_id = qh.quote_id
  LEFT OUTER JOIN bt_subsidiary bt
  ON c.bt_subsidiary_id = bt.bt_subsidiary_id
  left outer join um_user u
  ON bt.bt_subsidiary_id = u.bt_subsidiary_id
  LEFT OUTER JOIN sales_channel sc
  ON c.sales_channel_id = sc.sales_channel_id
  LEFT OUTER JOIN site s
  ON c.customer_id = s.customer_id
  AND s.main_site_flag = 'Y'
  Left outer JOIN line_item lm
  ON s.site_id = lm.site_id
  left Outer JOIN line_item_detail ld
  ON lm.line_item_id = ld.line_item_id
  LEFT OUTER JOIN attribute_mapping am
  ON ld.attribute_mapping_id = am.attribute_mapping_id
  LEFT OUTER JOIN address ad
  ON ad.address_id = s.address_id
  LEFT OUTER JOIN country cu
  ON ad.country_id = cu.country_id
  LEFT OUTER JOIN QUOTE_SITE qs
  ON qs.quote_Header_id = qh.quote_Header_id
  WHERE q.quote_id = in_quoteid
  AND qh.quote_header_id = in_quoteheaderid;
  /*  OPEN out_values2 FOR
  select p1.site_id,
  NULL AS "Line Id",
  p1.sqe_display_text "Description",
  p1.quantity "Number of days",
  NULL as "Country",
  NULL AS "Role",
  p1.price "EUP-One Time",
  p1.Discount "Discount % - One Time",
  p1.price "EUP-Monthly",
  p1.Discount "Discount % - Recurring"
  from (select
  qh.quote_header_id,
  s.site_id,
  am.sqe_display_text ,
  ld.quantity ,
  pd.price ,
  pd.Discount
  FROM quote q
  LEFT OUTER JOIN quote_header qh
  ON q.quote_id = qh.quote_id
  LEFT OUTER JOIN quote_site qs
  ON qh.quote_header_id = qs.quote_header_id
  LEFT OUTER JOIN  site s
  ON qs.site_id = s.site_id
  INNER JOIN line_item lm
  ON s.site_id           = lm.site_id
  -- AND lm.quote_header_id = in_quoteheaderid
  INNER JOIN line_item_detail ld
  ON lm.line_item_id = ld.line_item_id
  LEFT OUTER JOIN attribute_mapping am
  ON ld.attribute_mapping_id = am.attribute_mapping_id
  LEFT OUTER JOIN price_line_item_detail pd
  ON lm.line_item_id = pd.line_item_id
  LEFT OUTER JOIN price_line_item pl
  ON pd.price_line_item_id = pl.price_line_item_id
  where q.quote_id       = in_quoteid
  AND qh.quote_header_id = in_quoteid
  --AND s.site_id          =in_siteid
  AND pl.PRICE_LINE_ITEM_ID IN (54,58,60,62,64,66)
  AND ld.ATTRIBUTE_MAPPING_ID IN (501,502,503,504,505,506)
  -- AND lm.fallback_type ='Primary'
  AND (qs.active       = 'Y')
  AND (lm.active       = 'Y')
  AND (ld.active       = 'Y')
  AND ( pd.active      = 'Y'
  OR pd.active        IS NULL)) P1,
  (select
  qh.quote_header_id,
  s.site_id,
  am.sqe_display_text ,
  ld.quantity "Number of days",
  price "EUP-Monthly",
  Discount "Discount % - Recurring"
  FROM quote q
  LEFT OUTER JOIN quote_header qh
  ON q.quote_id = qh.quote_id
  LEFT OUTER JOIN quote_site qs
  ON qh.quote_header_id = qs.quote_header_id
  INNER JOIN site s
  ON qs.site_id = s.site_id
  INNER JOIN line_item lm
  ON s.site_id           = lm.site_id
  --AND lm.quote_header_id = in_quoteid
  INNER JOIN line_item_detail ld
  ON lm.line_item_id = ld.line_item_id
  LEFT OUTER JOIN attribute_mapping am
  ON ld.attribute_mapping_id = am.attribute_mapping_id
  LEFT OUTER JOIN price_line_item_detail pd
  ON lm.line_item_id = pd.line_item_id
  LEFT OUTER JOIN price_line_item pl
  ON pd.price_line_item_id = pl.price_line_item_id
  where q.quote_id       = in_quoteid
  AND qh.quote_header_id = in_quoteid
  --AND s.site_id          =in_siteid
  AND Pl.PRICE_LINE_ITEM_ID IN (53,57,59,61,63,65)
  AND Ld.ATTRIBUTE_MAPPING_ID IN (501,502,503,504,505,506)
  AND lm.fallback_type ='Primary'
  AND (qs.active       = 'Y')
  AND (lm.active       = 'Y')
  AND (ld.active       = 'Y')
  AND ( pd.active      = 'Y'
  OR pd.active        IS NULL)) P2
  where p1.quote_header_id = p2.quote_header_id
  and p1.site_id = p2.site_id
  and p1.sqe_display_text = p2.sqe_display_text;*/
  OPEN out_values21 FOR SELECT distinct
  --qh.quote_header_id,
  --s.site_id,
  NULL AS   "Line Id",
  am.sqe_display_text "Description" ,
  ld.quantity "Number of days",
  NULL AS  "Country",
  NULL AS   "Role"
  FROM quote q
  LEFT OUTER JOIN quote_header qh
  ON q.quote_id = qh.quote_id
  LEFT OUTER JOIN quote_site qs
  ON qh.quote_header_id = qs.quote_header_id
  LEFT OUTER JOIN site s
  ON qs.site_id = s.site_id
  LEFT OUTER JOIN line_item lm
  ON qh.quote_header_id = lm.quote_header_id
  -- AND lm.quote_header_id = in_quoteheaderid
  LEFT OUTER JOIN line_item_detail ld
  ON lm.line_item_id = ld.line_item_id
  LEFT OUTER JOIN attribute_mapping am
  ON ld.attribute_mapping_id = am.attribute_mapping_id
  WHERE q.quote_id = in_quoteid
  AND qh.quote_header_id = in_quoteheaderid
  AND ld.ATTRIBUTE_MAPPING_ID IN (501,502,503,504,505,506,507)
  AND (qs.active = 'Y')
  AND (lm.active = 'Y')
  AND (ld.active = 'Y');



  OPEN out_values22
  FOR SELECT --p1.site_id,
   distinct p1.sqe_display_text "Description",
  /* p1.quantity "Number of days",
  NULL as "Country",
  NULL AS "Role",*/
  DECODE(instr(p1.price,'.'),0,p1.price ||'.00',p1.price) "EUP-One Time",
  p1.Discount/100 "Discount % - One Time",
  DECODE(instr(p2.price,'.'),0,p2.price ||'.00',p2.price) "EUP-Monthly",
  p2.Discount/100 "Discount % - Recurring" FROM
  (SELECT qh.quote_header_id,
   -- s.site_id,
    am.sqe_display_text ,
    ld.quantity ,
    pd.price ,
    pd.Discount
  FROM quote q
  LEFT OUTER JOIN quote_header qh
  ON q.quote_id = qh.quote_id
  LEFT OUTER JOIN quote_site qs
  ON qh.quote_header_id = qs.quote_header_id
  LEFT OUTER JOIN site s
  ON qs.site_id = s.site_id
  LEFT OUTER JOIN line_item lm
  ON qh.quote_header_id = lm.quote_header_id
    -- AND lm.quote_header_id = in_quoteheaderid
  LEFT OUTER JOIN line_item_detail ld
  ON lm.line_item_id = ld.line_item_id
  LEFT OUTER JOIN attribute_mapping am
  ON ld.attribute_mapping_id = am.attribute_mapping_id
  LEFT OUTER JOIN price_line_item_detail pd
  ON lm.line_item_id = pd.line_item_id
  LEFT OUTER JOIN price_line_item pl
  ON pd.price_line_item_id = pl.price_line_item_id
  WHERE q.quote_id         = in_quoteid
  AND qh.quote_header_id   = in_quoteheaderid
    --AND s.site_id          =in_siteid
 AND (Case When ((pl.PRICE_LINE_ITEM_ID = 54  AND ld.ATTRIBUTE_MAPPING_ID = 501) OR
                          (pl.PRICE_LINE_ITEM_ID = 58  AND ld.ATTRIBUTE_MAPPING_ID = 504)  OR
                          (pl.PRICE_LINE_ITEM_ID = 60  AND ld.ATTRIBUTE_MAPPING_ID = 505)  OR
                          (pl.PRICE_LINE_ITEM_ID = 62  AND ld.ATTRIBUTE_MAPPING_ID = 506) OR
                          (pl.PRICE_LINE_ITEM_ID = 64  AND ld.ATTRIBUTE_MAPPING_ID = 502) OR
                          (pl.PRICE_LINE_ITEM_ID = 66  AND ld.ATTRIBUTE_MAPPING_ID = 503) OR
                           (pl.PRICE_LINE_ITEM_ID = 96  AND ld.ATTRIBUTE_MAPPING_ID = 507) OR
                          ( pl.PRICE_LINE_ITEM_ID = 98  AND ld.ATTRIBUTE_MAPPING_ID = 507) OR
                          ( pl.PRICE_LINE_ITEM_ID = 100  AND ld.ATTRIBUTE_MAPPING_ID = 507) )Then 1
                          Else 0 END) = 1
    /*AND     pl.PRICE_LINE_ITEM_ID  IN (54,58,60,62,64,66)
    AND ld.ATTRIBUTE_MAPPING_ID IN (501,502,503,504,505,506)*/
    -- AND lm.fallback_type ='Primary'
  AND (qs.active  = 'Y')
  AND (lm.active  = 'Y')
  AND (ld.active  = 'Y')
  AND ( pd.active = 'Y'
  OR pd.active   IS NULL)
  -- Added below line on 6/7/2011 as part of not including the below price lines
  AND pl.price_line_item_id not between 2203 and 2216
  -- Added the below line on 7/9/2011
  AND pd.ptp_eup = 'EUP'
  )p1,
  (SELECT qh.quote_header_id,
   -- s.site_id,
    am.sqe_display_text ,
    ld.quantity ,
    pd.price ,
    pd.Discount
  FROM quote q
  LEFT OUTER JOIN quote_header qh
  ON q.quote_id = qh.quote_id
  LEFT OUTER JOIN quote_site qs
  ON qh.quote_header_id = qs.quote_header_id
  LEFT OUTER JOIN site s
  ON qs.site_id = s.site_id
  LEFT OUTER JOIN line_item lm
  ON qh.quote_header_id = lm.quote_header_id
    -- AND lm.quote_header_id = in_quoteheaderid
  LEFT OUTER JOIN line_item_detail ld
  ON lm.line_item_id = ld.line_item_id
  LEFT OUTER JOIN attribute_mapping am
  ON ld.attribute_mapping_id = am.attribute_mapping_id
  LEFT OUTER JOIN price_line_item_detail pd
  ON lm.line_item_id = pd.line_item_id
  LEFT OUTER JOIN price_line_item pl
  ON pd.price_line_item_id = pl.price_line_item_id
  WHERE q.quote_id         = in_quoteid
  AND qh.quote_header_id   = in_quoteheaderid
   AND (Case When ((pl.PRICE_LINE_ITEM_ID = 53  AND ld.ATTRIBUTE_MAPPING_ID = 501) OR
                          (pl.PRICE_LINE_ITEM_ID = 57  AND ld.ATTRIBUTE_MAPPING_ID = 504)  OR
                          (pl.PRICE_LINE_ITEM_ID = 59  AND ld.ATTRIBUTE_MAPPING_ID = 505)  OR
                          (pl.PRICE_LINE_ITEM_ID = 61  AND ld.ATTRIBUTE_MAPPING_ID = 506)  OR
                          (pl.PRICE_LINE_ITEM_ID = 63  AND ld.ATTRIBUTE_MAPPING_ID = 502)  OR
                          (pl.PRICE_LINE_ITEM_ID = 65  AND ld.ATTRIBUTE_MAPPING_ID = 503)  OR
                          (pl.PRICE_LINE_ITEM_ID = 95  AND ld.ATTRIBUTE_MAPPING_ID = 507)  OR
                          (pl.PRICE_LINE_ITEM_ID = 97  AND ld.ATTRIBUTE_MAPPING_ID = 507)  OR
                          (pl.PRICE_LINE_ITEM_ID = 99  AND ld.ATTRIBUTE_MAPPING_ID = 507)  ) Then 1
                          Else 0 END) = 1
    /*AND     pl.PRICE_LINE_ITEM_ID  IN (54,58,60,62,64,66)
    AND ld.ATTRIBUTE_MAPPING_ID IN (501,502,503,504,505,506)*/
    -- AND lm.fallback_type ='Primary'
  AND (qs.active               = 'Y')
  AND (lm.active               = 'Y')
  AND (ld.active               = 'Y')
  AND ( pd.active              = 'Y'
  OR pd.active                IS NULL)
  -- Added below line on 6/7/2011 as part of not including the below price lines
  AND pl.price_line_item_id not between 2203 and 2216
  -- Added the below line on 7/9/2011
  AND pd.ptp_eup = 'EUP'
  )p2
  WHERE p1.quote_header_id = p2.quote_header_id
 -- AND p1.site_id = p2.site_id
  AND p1.sqe_display_text = p2.sqe_display_text;

  OPEN out_values3 FOR

  SELECT DISTINCT p1.site_id,
    NULL AS "Line Id",
    p1.non_std_comp "Description",
    p1.currency AS "EUP CURRENCY",
    DECODE(instr(p1.price,'.'),0,p1.price
    ||'.00',p1.price) "EUP-One Time",
    p1.Discount/100 "Discount % - One Time",
    DECODE(instr(p2.price,'.'),0,p2.price
    ||'.00',p2.price) "EUP-Monthly",
    p2.Discount/100 "EUP Discount % - Monthly",
    DECODE(instr(p1.ONE_TIME_INSTALL_COST,'.'),0,p1.ONE_TIME_INSTALL_COST
    ||'.00',p1.ONE_TIME_INSTALL_COST) AS "Cost One Time",
    DECODE(instr(p1.MONTHLY_RECURRING_COST,'.'),0,p1.MONTHLY_RECURRING_COST
    ||'.00',p1.MONTHLY_RECURRING_COST) AS "Cost Monthly",
    p1.currency                        AS "Cost Currency",
    p1.bill_description                AS "Bill Description"
  FROM
    (SELECT qh.quote_header_id,
      s.site_id,
      brs.non_std_comp ,
      qh.currency,
      -- ld.quantity "Number of days",
      price,
      Discount ,
      brs.ONE_TIME_INSTALL_COST,
      brs.MONTHLY_RECURRING_COST,
      DECODE(ld.attribute_mapping_id,602,ld.value) AS Bill_Description
    FROM quote q
    LEFT OUTER JOIN quote_header qh
    ON q.quote_id = qh.quote_id
    LEFT OUTER JOIN quote_site qs
    ON qh.quote_header_id = qs.quote_header_id
    INNER JOIN site s
    ON qs.site_id = s.site_id
    INNER JOIN line_item lm
    ON s.site_id = lm.site_id
      --AND lm.quote_header_id = in_quoteheaderid
    INNER JOIN line_item_detail ld
    ON lm.line_item_id = ld.line_item_id
    LEFT OUTER JOIN attribute_mapping am
    ON ld.attribute_mapping_id = am.attribute_mapping_id
    INNER JOIN price_line_item_detail pd
    ON lm.line_item_id = pd.line_item_id
    INNER JOIN price_line_item pl
    ON pd.price_line_item_id = pl.price_line_item_id
    INNER JOIN bid_request_status brs
    ON qh.quote_header_id  = brs.quote_header_id
    AND brs.site_id        = s.site_id
    AND brs.active         = 'Y'
    AND brs.product_id     = lm.product_id
    WHERE q.quote_id       = in_quoteid
    AND qh.quote_header_id = in_quoteheaderid
      --AND s.site_id          =in_siteid
    AND pl.PRICE_LINE_ITEM_ID IN (93,101,646,2148,2149,2150,2151,2152,2153,2154,2155,2156,2157,2158)
    AND (
      CASE
        WHEN lm.product_name         = 'BT iVPN2 CONFIGURATION'
        AND ld.attribute_mapping_id <> 602
        THEN 0
        ELSE 1
      END)          = 1
    AND (qs.active  = 'Y')
    AND (lm.active  = 'Y')
    AND (ld.active  = 'Y')
    AND ( pd.active = 'Y'
    OR pd.active   IS NULL)
    -- Added below line on 6/7/2011 as part of not including the below price lines
    AND pl.price_line_item_id not between 2203 and 2216
    -- Added the below line on 7/9/2011
    AND pd.ptp_eup = 'EUP'
    ) P1,
    (SELECT qh.quote_header_id,
      s.site_id,
      brs.non_std_comp ,
      qh.currency,
      -- ld.quantity "Number of days",
      price ,
      Discount ,
      brs.ONE_TIME_INSTALL_COST,
      brs.MONTHLY_RECURRING_COST,
      DECODE(ld.attribute_mapping_id,602,ld.value) AS "Bill Description "
    FROM quote q
    LEFT OUTER JOIN quote_header qh
    ON q.quote_id = qh.quote_id
    LEFT OUTER JOIN quote_site qs
    ON qh.quote_header_id = qs.quote_header_id
    INNER JOIN site s
    ON qs.site_id = s.site_id
    INNER JOIN line_item lm
    ON s.site_id = lm.site_id
      --AND lm.quote_header_id = in_quoteheaderid
    INNER JOIN line_item_detail ld
    ON lm.line_item_id = ld.line_item_id
    LEFT OUTER JOIN attribute_mapping am
    ON ld.attribute_mapping_id = am.attribute_mapping_id
    INNER JOIN price_line_item_detail pd
    ON lm.line_item_id = pd.line_item_id
    INNER JOIN price_line_item pl
    ON pd.price_line_item_id = pl.price_line_item_id
    INNER JOIN bid_request_status brs
    ON qh.quote_header_id  = brs.quote_header_id
    AND brs.site_id        = s.site_id
    AND brs.active         = 'Y'
    AND brs.product_id     = lm.product_id
    WHERE q.quote_id       = in_quoteid
    AND qh.quote_header_id = in_quoteheaderid
      --AND s.site_id          =in_siteid
    AND pl.PRICE_LINE_ITEM_ID IN (94,102,647,2108,2109,2110,2111,2112,2113,2114,2115,2116,2117,2118)
    AND (
      CASE
        WHEN lm.product_name         = 'BT iVPN2 CONFIGURATION'
        AND ld.attribute_mapping_id <> 602
        THEN 0
        ELSE 1
      END)          = 1
    AND (qs.active  = 'Y')
    AND (lm.active  = 'Y')
    AND (ld.active  = 'Y')
    AND ( pd.active = 'Y'
    OR pd.active   IS NULL)
    -- Added below line on 6/7/2011 as part of not including the below price lines
    AND pl.price_line_item_id not between 2203 and 2216
    -- Added the below line on 7/9/2011
    AND pd.ptp_eup = 'EUP'
    ) P2
  WHERE p1.quote_header_id = p2.quote_header_id
  AND p1.site_id           = p2.site_id
  AND p1.non_std_comp      =p2.non_std_comp;


  -- Added the below on 7/9/2011
  OPEN out_bid_netw_serv
  FOR SELECT distinct
  p1.sqe_display_text "Description",
  DECODE(instr(p1.price,'.'),0,p1.price ||'.00',p1.price) "One Time",
  p1.Discount/100  "Discount % - One Time",
  DECODE(instr(p2.price,'.'),0,p2.price ||'.00',p2.price) "Monthly",
  p2.Discount/100 "Discount % - Recurring",
  p1.ptp_eup
  FROM
  ( SELECT qh.quote_header_id,
           am.sqe_display_text,
           ld.quantity,
           pd.price,
           pd.Discount,
           pd.ptp_eup
      FROM quote q
      INNER JOIN quote_header qh
      ON q.quote_id = qh.quote_id
      LEFT OUTER JOIN quote_site qs
      ON qh.quote_header_id = qs.quote_header_id
      LEFT OUTER JOIN site s
      ON qs.site_id = s.site_id
      LEFT OUTER JOIN line_item lm
      ON qh.quote_header_id = lm.quote_header_id
      LEFT OUTER JOIN line_item_detail ld
      ON lm.line_item_id = ld.line_item_id
      LEFT OUTER JOIN attribute_mapping am
      ON ld.attribute_mapping_id = am.attribute_mapping_id
      LEFT OUTER JOIN price_line_item_detail pd
      ON lm.line_item_id = pd.line_item_id
      LEFT OUTER JOIN price_line_item pl
      ON pd.price_line_item_id = pl.price_line_item_id
      WHERE q.quote_id         = in_quoteid
      AND qh.quote_header_id   = in_quoteheaderid
      AND (CASE WHEN ((pl.PRICE_LINE_ITEM_ID = 54  AND ld.ATTRIBUTE_MAPPING_ID = 501) OR
                      (pl.PRICE_LINE_ITEM_ID = 58  AND ld.ATTRIBUTE_MAPPING_ID = 504) OR
                      (pl.PRICE_LINE_ITEM_ID = 60  AND ld.ATTRIBUTE_MAPPING_ID = 505) OR
                      (pl.PRICE_LINE_ITEM_ID = 62  AND ld.ATTRIBUTE_MAPPING_ID = 506) OR
                      (pl.PRICE_LINE_ITEM_ID = 64  AND ld.ATTRIBUTE_MAPPING_ID = 502) OR
                      (pl.PRICE_LINE_ITEM_ID = 66  AND ld.ATTRIBUTE_MAPPING_ID = 503) OR
                      (pl.PRICE_LINE_ITEM_ID = 96  AND ld.ATTRIBUTE_MAPPING_ID = 507) OR
                      (pl.PRICE_LINE_ITEM_ID = 98  AND ld.ATTRIBUTE_MAPPING_ID = 507) OR
                      (pl.PRICE_LINE_ITEM_ID = 100 AND ld.ATTRIBUTE_MAPPING_ID = 507))
                THEN 1
                ELSE 0
           END) = 1
      AND (qs.active  = 'Y')
      AND (lm.active  = 'Y')
      AND (ld.active  = 'Y')
      AND (pd.active = 'Y' OR pd.active   IS NULL)
      AND pl.price_line_item_id not between 2203 and 2216
      --AND pd.ptp_eup = 'PTP'
  )p1,
  ( SELECT qh.quote_header_id,
           am.sqe_display_text ,
           ld.quantity ,
           pd.price ,
           pd.Discount,
           pd.ptp_eup
      FROM quote q
      INNER JOIN quote_header qh
      ON q.quote_id = qh.quote_id
      LEFT OUTER JOIN quote_site qs
      ON qh.quote_header_id = qs.quote_header_id
      LEFT OUTER JOIN site s
      ON qs.site_id = s.site_id
      LEFT OUTER JOIN line_item lm
      ON qh.quote_header_id = lm.quote_header_id
      LEFT OUTER JOIN line_item_detail ld
      ON lm.line_item_id = ld.line_item_id
      LEFT OUTER JOIN attribute_mapping am
      ON ld.attribute_mapping_id = am.attribute_mapping_id
      LEFT OUTER JOIN price_line_item_detail pd
      ON lm.line_item_id = pd.line_item_id
      LEFT OUTER JOIN price_line_item pl
      ON pd.price_line_item_id = pl.price_line_item_id
      WHERE q.quote_id         = in_quoteid
      AND qh.quote_header_id   = in_quoteheaderid
      AND (CASE WHEN ((pl.PRICE_LINE_ITEM_ID = 53  AND ld.ATTRIBUTE_MAPPING_ID = 501) OR
                      (pl.PRICE_LINE_ITEM_ID = 57  AND ld.ATTRIBUTE_MAPPING_ID = 504) OR
                      (pl.PRICE_LINE_ITEM_ID = 59  AND ld.ATTRIBUTE_MAPPING_ID = 505) OR
                      (pl.PRICE_LINE_ITEM_ID = 61  AND ld.ATTRIBUTE_MAPPING_ID = 506) OR
                      (pl.PRICE_LINE_ITEM_ID = 63  AND ld.ATTRIBUTE_MAPPING_ID = 502) OR
                      (pl.PRICE_LINE_ITEM_ID = 65  AND ld.ATTRIBUTE_MAPPING_ID = 503) OR
                      (pl.PRICE_LINE_ITEM_ID = 95  AND ld.ATTRIBUTE_MAPPING_ID = 507) OR
                      (pl.PRICE_LINE_ITEM_ID = 97  AND ld.ATTRIBUTE_MAPPING_ID = 507) OR
                      (pl.PRICE_LINE_ITEM_ID = 99  AND ld.ATTRIBUTE_MAPPING_ID = 507))
                THEN 1
                ELSE 0
           END) = 1
      AND (qs.active   = 'Y')
      AND (lm.active   = 'Y')
      AND (ld.active   = 'Y')
      AND ( pd.active  = 'Y'  OR pd.active IS NULL)
      AND pl.price_line_item_id not between 2203 and 2216
      --AND pd.ptp_eup = 'PTP'
  )p2
  WHERE p1.quote_header_id = p2.quote_header_id
  AND p1.sqe_display_text = p2.sqe_display_text
  AND exists (select 1 from bid_detail where quote_header_id = p1.quote_header_id);


  -- Added the below on 7/9/2011
  OPEN out_bid_non_std
  FOR
  SELECT DISTINCT p1.site_id,
    NULL AS "Line Id",
    p1.non_std_comp "Description",
    p1.currency AS "CURRENCY",
    DECODE(instr(p1.price,'.'),0,p1.price ||'.00',p1.price) "One Time",
    p1.Discount/100  "Discount % - One Time",
    DECODE(instr(p2.price,'.'),0,p2.price ||'.00',p2.price) "Monthly",
    p2.Discount/100 "Discount % - Monthly",
    DECODE(instr(p1.ONE_TIME_INSTALL_COST,'.'),0,p1.ONE_TIME_INSTALL_COST
    ||'.00',p1.ONE_TIME_INSTALL_COST) AS "Cost One Time",
    DECODE(instr(p1.MONTHLY_RECURRING_COST,'.'),0,p1.MONTHLY_RECURRING_COST
    ||'.00',p1.MONTHLY_RECURRING_COST) AS "Cost Monthly",
    p1.currency                        AS "Cost Currency",
    p1.bill_description                AS "Bill Description",
    p1.ptp_eup
  FROM
    (SELECT qh.quote_header_id,
            s.site_id,
            brs.non_std_comp,
            qh.currency,
            price,
            Discount ,
            brs.one_time_install_cost,
            brs.monthly_recurring_cost,
            DECODE(ld.attribute_mapping_id,602,ld.value) AS Bill_Description,
            pd.ptp_eup
       FROM quote q
       INNER JOIN quote_header qh
       ON q.quote_id = qh.quote_id
       LEFT OUTER JOIN quote_site qs
       ON qh.quote_header_id = qs.quote_header_id
       INNER JOIN site s
       ON qs.site_id = s.site_id
       INNER JOIN line_item lm
       ON s.site_id = lm.site_id
       INNER JOIN line_item_detail ld
       ON lm.line_item_id = ld.line_item_id
       LEFT OUTER JOIN attribute_mapping am
       ON ld.attribute_mapping_id = am.attribute_mapping_id
       INNER JOIN price_line_item_detail pd
       ON lm.line_item_id = pd.line_item_id
       INNER JOIN price_line_item pl
       ON pd.price_line_item_id = pl.price_line_item_id
       INNER JOIN bid_request_status brs
       ON qh.quote_header_id  = brs.quote_header_id
       AND brs.site_id        = s.site_id
       AND brs.active         = 'Y'
       AND brs.product_id     = lm.product_id
       WHERE q.quote_id       = in_quoteid
       AND qh.quote_header_id = in_quoteheaderid
       AND pl.PRICE_LINE_ITEM_ID IN (2238,2237,2236,2235,2234,2233,2232,2231,2230,2229,2228)
       AND (
         CASE
           WHEN lm.product_name = 'BT iVPN2 CONFIGURATION' AND ld.attribute_mapping_id <> 602
            THEN 0
           ELSE 1
         END) = 1
       AND (qs.active  = 'Y')
       AND (lm.active  = 'Y')
       AND (ld.active  = 'Y')
       AND (pd.active = 'Y' OR pd.active   IS NULL)
       AND pl.price_line_item_id not between 2203 and 2216
       --AND pd.ptp_eup = 'PTP'
    ) P1,
    (SELECT qh.quote_header_id,
            s.site_id,
            brs.non_std_comp ,
            qh.currency,
            -- ld.quantity "Number of days",
            price ,
            Discount ,
            brs.ONE_TIME_INSTALL_COST,
            brs.MONTHLY_RECURRING_COST,
            DECODE(ld.attribute_mapping_id,602,ld.value) AS "Bill Description",
            pd.ptp_eup
       FROM quote q
       INNER JOIN quote_header qh
       ON q.quote_id = qh.quote_id
       LEFT OUTER JOIN quote_site qs
       ON qh.quote_header_id = qs.quote_header_id
       INNER JOIN site s
       ON qs.site_id = s.site_id
       INNER JOIN line_item lm
       ON s.site_id = lm.site_id
       INNER JOIN line_item_detail ld
       ON lm.line_item_id = ld.line_item_id
       LEFT OUTER JOIN attribute_mapping am
       ON ld.attribute_mapping_id = am.attribute_mapping_id
       INNER JOIN price_line_item_detail pd
       ON lm.line_item_id = pd.line_item_id
       INNER JOIN price_line_item pl
       ON pd.price_line_item_id = pl.price_line_item_id
       INNER JOIN bid_request_status brs
       ON qh.quote_header_id  = brs.quote_header_id
       AND brs.site_id        = s.site_id
       AND brs.active         = 'Y'
       AND brs.product_id     = lm.product_id
       WHERE q.quote_id       = in_quoteid
       AND qh.quote_header_id = in_quoteheaderid
       AND pl.PRICE_LINE_ITEM_ID IN (2227,2226,2225,2224,2223,2222,2221,2220,2219,2218,2217)
       AND (
         CASE
           WHEN lm.product_name = 'BT iVPN2 CONFIGURATION' AND ld.attribute_mapping_id <> 602
            THEN 0
           ELSE 1
         END)          = 1
       AND (qs.active  = 'Y')
       AND (lm.active  = 'Y')
       AND (ld.active  = 'Y')
       AND (pd.active = 'Y' OR pd.active   IS NULL)
       AND pl.price_line_item_id not between 2203 and 2216
       --AND pd.ptp_eup = 'PTP'
    ) P2
  WHERE p1.quote_header_id = p2.quote_header_id
    AND p1.site_id           = p2.site_id
    AND p1.non_std_comp      =p2.non_std_comp;

-- Added by Sujana on 23/11/2010 as part of exception handling
EXCEPTION
 WHEN OTHERS THEN
         v_sql_errm := substr(SQLERRM,1,150);
         v_sql_code := SQLCODE;
         PKG_COMMON.spi_error_log(
                                  in_quoteid,
                                  in_quoteheaderid,
                                  NULL,
                                  NULL,
                                  'PKG_BCM_EXPORT',
                                  'SPS_BCMEXPORT',
                                  v_sql_code,
                                  v_sql_errm
                                 );

END SPS_BCMEXPORT;

END PKG_BCM_EXPORT;
/


CREATE OR REPLACE PACKAGE BODY PKG_BIDDETAIL
AS
   PROCEDURE spi_bid_detail (
      in_quoteheaderid    IN       quote_header.quote_header_id%TYPE,
      in_siteid           IN       site.site_id%TYPE,
      in_productid        IN       bid_detail.product_id%TYPE,
      in_productname      IN       bid_detail.product_name%TYPE,
      in_requestname      IN       bid_detail.request_name%TYPE,
      in_custcommitted    IN       bid_detail.customer_committed%TYPE,
      in_custrequested    IN       bid_detail.customer_requested%TYPE,
      in_volforfeatures   IN       bid_detail.volume_for_features%TYPE,
      in_tier             IN       bid_detail.tier%TYPE,
      in_bidmgrname       IN       bid_detail.bid_manager_name%TYPE,
      in_winchance        IN       bid_detail.win_chance%TYPE,
      in_custvalue        IN       bid_detail.customer_value%TYPE,
      in_nsoc             IN       bid_detail.nsoc%TYPE,
      in_siebelid         IN       bid_detail.siebel_id%TYPE,
      in_ipnspocname      IN       bid_detail.ipn_spoc_name%TYPE,
      in_comments         IN       bid_detail.comments%TYPE,
      in_nonstdflag       IN       bid_detail.non_standard_flag%TYPE,
      in_createdby        IN       bid_detail.created_by%TYPE,
      in_no_of_ISDN_channels IN   bid_detail.no_of_ISDN_channels%TYPE,
      -- Added the below param on 28/7/2011 as part of R16
      in_currency         IN       bid_detail.currency%TYPE,
      out_status          OUT      NUMBER,
      out_errmsg          OUT      VARCHAR2
   )
   AS
      v_rowcount   INT;
   BEGIN
      --duplication check
      SELECT COUNT (*)
        INTO v_rowcount
        FROM bid_detail
       WHERE quote_header_id = in_quoteheaderid
         AND site_id = in_siteid
         AND product_id = in_productid
         AND product_name = in_productname
         AND request_name = in_requestname    -- Added new check for iVPN2_R16
         AND active = pkg_constants.con_activeflag_yes;

      IF (v_rowcount > 0)
      THEN
         --if record exists, update it to in-active
         UPDATE bid_detail
            SET active = pkg_constants.con_activeflag_no,
                modified_by = in_createdby,
                modified_date = SYSDATE
          WHERE quote_header_id = in_quoteheaderid
            AND site_id = in_siteid
            AND product_id = in_productid
            AND product_name = in_productname
            AND request_name = in_requestname  -- Added new check for iVPN2_R16
            AND active = pkg_constants.con_activeflag_yes;
      END IF;

      INSERT INTO bid_detail
                  (bid_detail_id, quote_header_id, site_id,
                   product_id, product_name, request_name,
                   customer_committed, customer_requested,
                   volume_for_features, tier, bid_manager_name, win_chance,
                   customer_value, nsoc, siebel_id, ipn_spoc_name,
                   comments, non_standard_flag, created_by, created_date,
                   active, NO_OF_ISDN_CHANNELS,
                   -- Added the below param on 28/7/2011 as part of R16
                   currency
                  )
           VALUES (bid_detail_id.NEXTVAL, in_quoteheaderid, in_siteid,
                   in_productid, in_productname, in_requestname,
                   in_custcommitted, in_custrequested,
                   in_volforfeatures, in_tier, in_bidmgrname, in_winchance,
                   in_custvalue, in_nsoc, in_siebelid, in_ipnspocname,
                   in_comments, in_nonstdflag, in_createdby, SYSDATE,
                   pkg_constants.con_activeflag_yes,
                   in_no_of_ISDN_channels,
                   -- Added the below param on 28/7/2011 as part of R16
                   in_currency
                  );

      out_status := pkg_constants.con_status_success;
   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         out_errmsg := SQLERRM;
   -- ROLLBACK;
   END;



PROCEDURE spi_bid_request_status (
       in_quoteheaderid          IN       quote_header.quote_header_id%TYPE,
      in_siteid                 IN       site.site_id%TYPE,
      in_productid              IN       bid_detail.product_id%TYPE,
      in_productname            IN       bid_detail.product_name%TYPE,
      in_special_bid_number     IN       bid_request_status.special_bid_number%TYPE,
      in_BID_STATUS             IN       bid_request_status.BID_STATUS%TYPE,
      in_ACTIVATION_DUE_DATE   IN       bid_request_status.ACTIVATION_DUE_DATE%TYPE,
      in_ONE_TIME_INSTALL_COST  IN       bid_request_status.ONE_TIME_INSTALL_COST%TYPE,
      in_DATA_BUILD_DONE        IN       bid_request_status.DATA_BUILD_DONE%TYPE ,
      in_BID_EXPIRY_DATE        IN       bid_request_status.BID_EXPIRY_DATE%TYPE,
      in_MONTHLY_RECURRING_COST IN       bid_request_status.MONTHLY_RECURRING_COST%TYPE,
      in_non_std_bid_items      IN       bid_request_status.non_std_bid_items%TYPE,
      in_tpp_url                IN       bid_request_status.tpp_url%TYPE,
      in_ROW_ID                 IN       bid_request_status.row_id%TYPE,
      in_non_std_comp           IN       bid_request_status.non_std_comp%TYPE,
      in_instructions           IN       bid_request_status.instructions%TYPE,
      in_fallback_type_pri        IN     bid_request_status.fallback_type%TYPE,
      in_fallback_type_sec        IN     bid_request_status.fallback_type%TYPE,
      in_createdby              IN       bid_detail.created_by%TYPE,
      out_status                OUT      NUMBER,
      out_errmsg                OUT      VARCHAR2
      )
   AS
      v_rowcount   INT;
   BEGIN
      --duplication check
      SELECT COUNT (*)
        INTO v_rowcount
        FROM bid_request_status
       WHERE quote_header_id = in_quoteheaderid
         AND site_id = in_siteid
         AND product_id = in_productid
         AND product_name = in_productname
         --AND NVL(non_std_bid_items,'X') =NVL( in_non_std_bid_items,'X')
         AND NVL(row_id,-1) = NVL(in_ROW_ID,-1)
     AND   non_std_comp = in_non_std_comp
         AND active = pkg_constants.con_activeflag_yes;

      IF (v_rowcount > 0)
      THEN
         --if record exists, update it to in-active
         UPDATE bid_request_status
            SET active = pkg_constants.con_activeflag_no,
                modified_by = in_createdby,
                modified_date = SYSDATE
          WHERE quote_header_id = in_quoteheaderid
            AND site_id = in_siteid
            AND product_id = in_productid
            AND product_name = in_productname
            --AND NVL(non_std_bid_items,'X') =NVL( in_non_std_bid_items,'X')
         AND NVL(row_id,-1) = NVL(in_ROW_ID,-1)
    AND   non_std_comp = in_non_std_comp
            AND active = pkg_constants.con_activeflag_yes;
      END IF;

    IF in_fallback_type_pri    IS NOT NULL AND in_fallback_type_sec IS NOT NULL THEN

              INSERT INTO bid_request_status
                  (bid_request_status_id, quote_header_id, site_id,
                   product_id, product_name, special_bid_number ,
                   BID_STATUS ,ACTIVATION_DUE_DATE ,
                   ONE_TIME_INSTALL_COST ,DATA_BUILD_DONE ,BID_EXPIRY_DATE ,
                   MONTHLY_RECURRING_COST,non_std_bid_items,tpp_url,
                   row_id,non_std_comp,instructions,created_by, created_date,
                   active,fallback_type
                  )
               VALUES (bid_request_status_id.NEXTVAL, in_quoteheaderid, in_siteid,
                   in_productid, in_productname, in_special_bid_number,
                   in_BID_STATUS,in_ACTIVATION_DUE_DATE ,in_ONE_TIME_INSTALL_COST ,
                   in_DATA_BUILD_DONE ,in_BID_EXPIRY_DATE ,
                   in_MONTHLY_RECURRING_COST, in_non_std_bid_items,in_tpp_url,
                   in_ROW_ID,in_non_std_comp,in_instructions,in_createdby, SYSDATE,
                   pkg_constants.con_activeflag_yes,in_fallback_type_pri);


          INSERT INTO bid_request_status
                  (bid_request_status_id, quote_header_id, site_id,
                   product_id, product_name, special_bid_number ,
                   BID_STATUS ,ACTIVATION_DUE_DATE ,
                   ONE_TIME_INSTALL_COST ,DATA_BUILD_DONE ,BID_EXPIRY_DATE ,
                   MONTHLY_RECURRING_COST,non_std_bid_items,tpp_url,
                   row_id,non_std_comp,instructions,created_by, created_date,
                   active,fallback_type
                  )
               VALUES (bid_request_status_id.NEXTVAL, in_quoteheaderid, in_siteid,
                   in_productid, in_productname, in_special_bid_number,
                   in_BID_STATUS,in_ACTIVATION_DUE_DATE ,in_ONE_TIME_INSTALL_COST ,
                   in_DATA_BUILD_DONE ,in_BID_EXPIRY_DATE ,
                   in_MONTHLY_RECURRING_COST, in_non_std_bid_items,in_tpp_url,
                   in_ROW_ID,in_non_std_comp,in_instructions,in_createdby, SYSDATE,
                   pkg_constants.con_activeflag_yes,in_fallback_type_sec );

    ELSIF    in_fallback_type_pri IS NOT NULL AND in_fallback_type_sec IS NULL THEN

              INSERT INTO bid_request_status
                  (bid_request_status_id, quote_header_id, site_id,
                   product_id, product_name, special_bid_number ,
                   BID_STATUS ,ACTIVATION_DUE_DATE ,
                   ONE_TIME_INSTALL_COST ,DATA_BUILD_DONE ,BID_EXPIRY_DATE ,
                   MONTHLY_RECURRING_COST,non_std_bid_items,tpp_url,
                   row_id,non_std_comp,instructions,created_by, created_date,
                   active,fallback_type
                  )
               VALUES (bid_request_status_id.NEXTVAL, in_quoteheaderid, in_siteid,
                   in_productid, in_productname, in_special_bid_number,
                   in_BID_STATUS,in_ACTIVATION_DUE_DATE ,in_ONE_TIME_INSTALL_COST ,
                   in_DATA_BUILD_DONE ,in_BID_EXPIRY_DATE ,
                   in_MONTHLY_RECURRING_COST, in_non_std_bid_items,in_tpp_url,
                   in_ROW_ID,in_non_std_comp,in_instructions,in_createdby, SYSDATE,
                   pkg_constants.con_activeflag_yes,in_fallback_type_pri);

    ELSIF    in_fallback_type_pri IS NULL AND in_fallback_type_sec IS NOT NULL THEN

              INSERT INTO bid_request_status
                  (bid_request_status_id, quote_header_id, site_id,
                   product_id, product_name, special_bid_number ,
                   BID_STATUS ,ACTIVATION_DUE_DATE ,
                   ONE_TIME_INSTALL_COST ,DATA_BUILD_DONE ,BID_EXPIRY_DATE ,
                   MONTHLY_RECURRING_COST,non_std_bid_items,tpp_url,
                   row_id,non_std_comp,instructions,created_by, created_date,
                   active,fallback_type
                  )
               VALUES (bid_request_status_id.NEXTVAL, in_quoteheaderid, in_siteid,
                   in_productid, in_productname, in_special_bid_number,
                   in_BID_STATUS,in_ACTIVATION_DUE_DATE ,in_ONE_TIME_INSTALL_COST ,
                   in_DATA_BUILD_DONE ,in_BID_EXPIRY_DATE ,
                   in_MONTHLY_RECURRING_COST, in_non_std_bid_items,in_tpp_url,
                   in_ROW_ID,in_non_std_comp,in_instructions,in_createdby, SYSDATE,
                   pkg_constants.con_activeflag_yes,in_fallback_type_sec );

    ELSIF in_fallback_type_pri IS NULL AND in_fallback_type_sec IS NULL THEN

              INSERT INTO bid_request_status
                  (bid_request_status_id, quote_header_id, site_id,
                   product_id, product_name, special_bid_number ,
                   BID_STATUS ,ACTIVATION_DUE_DATE ,
                   ONE_TIME_INSTALL_COST ,DATA_BUILD_DONE ,BID_EXPIRY_DATE ,
                   MONTHLY_RECURRING_COST,non_std_bid_items,tpp_url,
                   row_id,non_std_comp,instructions,created_by, created_date,
                   active
                  )
               VALUES (bid_request_status_id.NEXTVAL, in_quoteheaderid, in_siteid,
                   in_productid, in_productname, in_special_bid_number,
                   in_BID_STATUS,in_ACTIVATION_DUE_DATE ,in_ONE_TIME_INSTALL_COST ,
                   in_DATA_BUILD_DONE ,in_BID_EXPIRY_DATE ,
                   in_MONTHLY_RECURRING_COST, in_non_std_bid_items,in_tpp_url,
                   in_ROW_ID,in_non_std_comp,in_instructions,in_createdby, SYSDATE,
                   pkg_constants.con_activeflag_yes );

    END IF;

      out_status := pkg_constants.con_status_success;
   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         out_errmsg := SQLERRM;
   -- ROLLBACK;
   END spi_bid_request_status ;

   PROCEDURE spd_bid_request_status (
       in_quoteheaderid          IN       quote_header.quote_header_id%TYPE,
      in_siteid                 IN       site.site_id%TYPE,
      in_productid              IN       bid_detail.product_id%TYPE,
      in_productname            IN       bid_detail.product_name%TYPE,
      in_non_std_bid_items      IN       bid_request_status.non_std_bid_items%TYPE,
      in_ROW_ID                 IN       bid_request_status.row_id%TYPE,
    in_non_std_comp           IN       bid_request_status.non_std_comp%TYPE,
      in_createdby              IN       bid_detail.created_by%TYPE,
      out_status                OUT      NUMBER,
      out_errmsg                OUT      VARCHAR2
      )
    AS
      v_rowcount   INT;
   BEGIN
      --duplication check
      SELECT COUNT (*)
        INTO v_rowcount
        FROM bid_request_status
       WHERE quote_header_id = in_quoteheaderid
         AND site_id = in_siteid
         AND product_id = in_productid
         AND product_name = in_productname
         --AND NVL(non_std_bid_items,'X') =NVL( in_non_std_bid_items,'X')
         AND NVL(row_id,-1) = NVL(in_ROW_ID,-1)
    AND   non_std_comp = in_non_std_comp
         AND active = pkg_constants.con_activeflag_yes;

      IF (v_rowcount > 0)
      THEN
         --if record exists, update it to in-active
         UPDATE bid_request_status
            SET active = pkg_constants.con_activeflag_no,
                modified_by = in_createdby,
                modified_date = SYSDATE
          WHERE quote_header_id = in_quoteheaderid
            AND site_id = in_siteid
            AND product_id = in_productid
            AND product_name = in_productname
            --AND NVL(non_std_bid_items,'X') =NVL( in_non_std_bid_items,'X')
         AND NVL(row_id,-1) = NVL(in_ROW_ID,-1)
     AND   non_std_comp = in_non_std_comp
            AND active = pkg_constants.con_activeflag_yes;
      END IF;


      out_status := pkg_constants.con_status_success;
   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         out_errmsg := SQLERRM;
   -- ROLLBACK;
   END spd_bid_request_status;


PROCEDURE spi_nonstd_configuration(
      in_quoteheaderid    IN       quote_header.quote_header_id%TYPE,
      in_siteid           IN       site.site_id%TYPE,
      in_attributelist    IN       CLOB,
      in_attributelevel   IN       attribute_mapping.attribute_level%TYPE,
      in_createdby        IN       line_item.created_by%TYPE,
      out_status          OUT      NUMBER,
      out_errmsg          OUT      VARCHAR2
   )
   AS
      CURSOR c_attributelist
      IS
         SELECT *
           FROM TABLE
                   (CAST
                       (pkg_common.fn_splitbulkupload (in_attributelist, '~') AS varchar2_clob
                       )
                   );

                   TYPE t_attrmapid IS TABLE OF attribute_mapping.attribute_mapping_id%TYPE
      INDEX BY BINARY_INTEGER;

   TYPE t_configlevel IS TABLE OF attribute_mapping.config_level%TYPE
      INDEX BY BINARY_INTEGER;

   TYPE t_value IS TABLE OF line_item_detail.VALUE%TYPE
      INDEX BY BINARY_INTEGER;

   TYPE t_qty IS TABLE OF NUMBER
      INDEX BY BINARY_INTEGER;

    /*  v_prodid         line_item.product_id%TYPE;
      v_prodname       line_item.product_name%TYPE;
      v_fallback       line_item.fallback_type%TYPE;
      v_rowid          line_item.row_id%TYPE;
      v_tattrid        t_attrmapid;
      v_tconfiglevel   t_configlevel;
      v_tattrval       t_value;
      v_qty            t_qty;
      v_lineitemid     line_item.line_item_id%TYPE;
      v_lineitemids    VARCHAR2 (2000);
      v_attrlevel      attribute_mapping.attribute_level%TYPE;
      v_configlevel    attribute_mapping.config_level%TYPE;
      v_rowcount       NUMBER;
      v_prodattr       VARCHAR2 (4000);
      v_proddet        VARCHAR2 (4000);
      v_attrdet        VARCHAR2 (4000);
      v_attrcnt        NUMBER;
      v_curdate        DATE                                      := SYSDATE;*/

      v_prodid               line_item.product_id%TYPE;
      v_prodname             line_item.product_name%TYPE;
      v_fallback             line_item.fallback_type%TYPE;
      v_parttype             line_item.part_type%TYPE;
      v_tattrid              t_attrmapid;
      v_tconfiglevel         t_configlevel;
      v_tattrval             t_value;
      v_qty                  t_qty;
      v_lineitemid           line_item.line_item_id%TYPE;
      v_lineitemids          VARCHAR2 (2000);
      v_attrlevel            attribute_mapping.attribute_level%TYPE;
      v_configlevel          attribute_mapping.config_level%TYPE;
      v_rowcount             NUMBER;
      v_prodattr             VARCHAR2 (8000);
      v_proddet              VARCHAR2 (8000);
      v_attrdet              VARCHAR2 (8000);
      v_attrcnt              NUMBER;
      --v_curdate              TIMESTAMP;
    v_curdate        DATE                                      := SYSDATE;
      v_flag                 CHAR (1)                                 := '1';
      v_existintlineitemid   line_item.line_item_id%TYPE;
      numb                    NUMBER;
      v_rowid                 NUMBER;       ------GHUCS
     -- v_desc                  t_desc;       ------GHUCS
   BEGIN
      IF (in_attributelist IS NOT NULL)
      THEN
         BEGIN
            OPEN c_attributelist;

            LOOP
               FETCH c_attributelist
                INTO v_prodattr;

               EXIT WHEN c_attributelist%NOTFOUND;
               v_proddet :=
                     SUBSTR (v_prodattr, 1, INSTR (v_prodattr, ';', 1, 1) - 1);
               v_attrdet :=
                        SUBSTR (v_prodattr, INSTR (v_prodattr, ';', 1, 1) + 1);
               v_attrdet := v_attrdet || '##';

               SELECT pkg_common.fn_countbulkupload (v_attrdet, '##')
                 INTO v_attrcnt
                 FROM DUAL;

               IF (v_attrcnt != 0)
               THEN
                  BEGIN
                     --get the list of products from the input string
                     v_prodid :=
                        SUBSTR (v_proddet,
                                INSTR (v_proddet, '|||') + 3,
                                  (INSTR (v_proddet, '::') - 3
                                  )
                                - INSTR (v_proddet, '|||')
                               );
                     v_proddet :=
                          SUBSTR (v_proddet, INSTR (v_proddet, '::', 1, 1) + 2);
                     v_prodname :=
                        SUBSTR (v_proddet,
                                INSTR (v_proddet, '|||') + 3,
                                  (INSTR (v_proddet, '::') - 3
                                  )
                                - INSTR (v_proddet, '|||')
                               );
                     v_proddet :=
                          SUBSTR (v_proddet, INSTR (v_proddet, '::', 1, 1) + 2);
                     v_fallback :=
                        SUBSTR (v_proddet,
                                INSTR (v_proddet, '|||') + 3,
                                  (INSTR (v_proddet, '::') - 3
                                  )
                                - INSTR (v_proddet, '|||')
                               );
                     v_proddet :=
                          SUBSTR (v_proddet, INSTR (v_proddet, '::', 1, 1) + 2);
                     v_rowid :=
                         SUBSTR (v_proddet, INSTR (v_proddet, '|||', 1, 1) + 3);

                     --if line_item exists
                     SELECT COUNT (*)
                       INTO v_rowcount
                       FROM line_item
                      WHERE quote_header_id = in_quoteheaderid
                        AND (site_id = in_siteid or (site_id is null and nvl(in_siteid,0) =0))
                        AND UPPER (product_name) = UPPER (v_prodname)
                        AND UPPER (fallback_type) = UPPER (v_fallback)
                        AND active = pkg_constants.con_activeflag_yes;

                     IF (v_rowcount = 0)
                     THEN
                        BEGIN
                           INSERT INTO line_item
                                       (line_item_id,
                                        quote_header_id,site_id,
                                        product_id, product_name,
                                        fallback_type, quantity,
                                        active,
                                        created_by, created_date, row_id
                                       )
                                VALUES (line_item_id.NEXTVAL,
                                        in_quoteheaderid, in_siteid,
                                        v_prodid, v_prodname,
                                        v_fallback, DEFAULT,
                                        pkg_constants.con_activeflag_yes,
                                        in_createdby, v_curdate, v_rowid
                                       )
                             RETURNING line_item_id
                                  INTO v_lineitemid;
                        END;
                     ELSE
                        BEGIN
                           IF (v_rowid IS NOT NULL)

                           THEN
                              BEGIN
                                 SELECT COUNT (*)
                                   INTO v_rowcount
                                   FROM line_item
                                  WHERE quote_header_id = in_quoteheaderid
                                    AND site_id = in_siteid
                                    AND UPPER (product_name) =
                                                            UPPER (v_prodname)
                                    AND UPPER (fallback_type) =
                                                            UPPER (v_fallback)
                                    AND created_date < v_curdate
                                    AND modified_by IS NULL
                                    AND active =
                                              pkg_constants.con_activeflag_yes;

                                 IF (v_rowcount > 0)
                                 THEN
                                    --inactivate all existing VPN line items created previously
                                    UPDATE line_item
                                       SET active =
                                               pkg_constants.con_activeflag_no,
                                           modified_by = in_createdby,
                                           modified_date = v_curdate
                                     WHERE quote_header_id = in_quoteheaderid
                                       AND site_id = in_siteid
                                       AND product_name = v_prodname
                                       AND created_date < v_curdate
                                       AND modified_by IS NULL;
                                 END IF;

                                 --insert VPN line items
                                 INSERT INTO line_item
                                             (line_item_id,
                                              quote_header_id, site_id,
                                              product_id, product_name,
                                              fallback_type, quantity,
                                              active,
                                              created_by, created_date, row_id
                                             )
                                      VALUES (line_item_id.NEXTVAL,
                                              in_quoteheaderid, in_siteid,
                                              v_prodid, v_prodname,
                                              v_fallback, DEFAULT,
                                              pkg_constants.con_activeflag_yes,
                                              in_createdby, v_curdate, v_rowid
                                             )
                                   RETURNING line_item_id
                                        INTO v_lineitemid;
                              END;
                           END IF;

                           --select previous line_items to update line_item_detail
                           SELECT pkg_common.to_string
                                     (CAST
                                         (COLLECT (TO_CHAR (line_item_id)
                                                  ) AS varchar2_ntt
                                         )
                                     )
                             INTO v_lineitemids
                             FROM line_item
                            WHERE quote_header_id = in_quoteheaderid
                              AND site_id = in_siteid
                              AND UPPER (product_name) = UPPER (v_prodname)
                              AND (row_id = v_rowid /*OR row_id IS NULL*/);

                           --select existing line_item to insert into line_item_detail
                           SELECT line_item_id
                             INTO v_lineitemid
                             FROM line_item
                            WHERE quote_header_id = in_quoteheaderid
                              AND site_id = in_siteid
                              AND UPPER (product_name) = UPPER (v_prodname)
                              AND UPPER (fallback_type) = UPPER (v_fallback)
                              AND (row_id = v_rowid/* OR row_id IS NULL*/)
                              AND active = pkg_constants.con_activeflag_yes;

                           IF (INSTR (v_lineitemids, ',', 1) = 0)
                           THEN
                              v_lineitemids := v_lineitemids || ',';
                           END IF;
                        END;
                     END IF;

                     FOR i IN 1 .. v_attrcnt
                     LOOP
                        v_tattrid (i) :=
                           SUBSTR (v_attrdet,
                                   INSTR (v_attrdet, '|||') + 3,
                                     (INSTR (v_attrdet, '::') - 3
                                     )
                                   - INSTR (v_attrdet, '|||')
                                  );
                        v_attrdet :=
                           SUBSTR (v_attrdet,
                                   INSTR (v_attrdet, '::', 1, 1) + 2);
                        v_tconfiglevel (i) :=
                           SUBSTR (v_attrdet,
                                   INSTR (v_attrdet, '|||') + 3,
                                     (INSTR (v_attrdet, '::') - 3
                                     )
                                   - INSTR (v_attrdet, '|||')
                                  );
                        v_attrdet :=
                           SUBSTR (v_attrdet,
                                   INSTR (v_attrdet, '::', 1, 1) + 2);
                        v_tattrval (i) :=
                           SUBSTR (v_attrdet,
                                   INSTR (v_attrdet, '|||') + 3,
                                     (INSTR (v_attrdet, '::') - 3
                                     )
                                   - INSTR (v_attrdet, '|||')
                                  );
                        v_attrdet :=
                           SUBSTR (v_attrdet,
                                   INSTR (v_attrdet, '::', 1, 1) + 2);
                        v_qty (i) :=
                           SUBSTR (v_attrdet,
                                   INSTR (v_attrdet, '|||') + 3,
                                     (INSTR (v_attrdet, '##') - 3
                                     )
                                   - INSTR (v_attrdet, '|||')
                                  );
                        v_attrdet :=
                             SUBSTR (v_attrdet, INSTR (v_attrdet, '##', 1) + 2);
                     END LOOP;

                     --update all previous line_item_details for the exisiting
                     --line_items
                     FORALL i IN v_tconfiglevel.FIRST .. v_tconfiglevel.LAST
                        UPDATE line_item_detail
                           SET active = pkg_constants.con_activeflag_no,
                               modified_date = v_curdate,
                               modified_by = in_createdby
                         WHERE line_item_id IN (
                                  SELECT TO_NUMBER (COLUMN_VALUE)
                                    FROM TABLE
                                            (CAST
                                                (pkg_common.fn_splitdata
                                                               (v_lineitemids,
                                                                ','
                                                               ) AS varchar2_ntt
                                                )
                                            ))
                           AND attribute_mapping_id IN (
                                  SELECT attribute_mapping_id
                                    FROM attribute_mapping
                                   WHERE UPPER (config_level) =
                                                    UPPER (v_tconfiglevel (i))
                                     AND UPPER (attribute_level) =
                                                     UPPER (in_attributelevel))
                           AND created_date < v_curdate
                           AND modified_date IS NULL;
                       --insert into order_line-item_detail all the attributes after making
                     --existing attributes as inactive
                     FORALL i IN 1 .. v_attrcnt
                        INSERT INTO line_item_detail
                                    (line_item_detail_id,
                                     line_item_id,
                                     attribute_mapping_id, VALUE,
                                     active,
                                     created_by, created_date, quantity
                                    )
                             VALUES (line_item_detail_id.NEXTVAL,
                                     v_lineitemid,
                                     v_tattrid (i), v_tattrval (i),
                                     pkg_constants.con_activeflag_yes,
                                     in_createdby, v_curdate, v_qty (i)
                                    );
                     out_status := pkg_constants.con_status_success;
                  --  COMMIT;
                  END;
               ELSE
                  BEGIN
                     out_status := pkg_constants.con_status_failure;
                     out_errmsg := 'Invalid Product-Attribute List';
                  END;
               END IF;
            END LOOP;

            CLOSE c_attributelist;
         END;
      ELSE
         BEGIN
            out_status := pkg_constants.con_status_failure;
            out_errmsg := 'Invalid Product-Attribute List';
         END;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         out_errmsg := SQLERRM;
   -- ROLLBACK;
   END;


 PROCEDURE spi_nonstd_pricing (
      in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
      in_siteid          IN       line_item.site_id%TYPE,
      in_prodname        IN       line_item.product_name%TYPE,
      in_pricelinitm     IN       VARCHAR2,
      in_createdby       IN       price_line_item_detail.created_by%TYPE,
      out_status         OUT      NUMBER,
      out_errmsg         OUT      VARCHAR2
   )
   AS
      CURSOR c_pricedet
      IS
         SELECT *
           FROM TABLE
                   (CAST
                       (pkg_common.fn_splitdata (in_pricelinitm, '~') AS varchar2_ntt
                       )
                   );

      v_priclinitmid   price_line_item_detail.price_line_item_id%TYPE;
      v_priclinitm     price_line_item.price_line_description%TYPE;
      v_price          price_line_item_detail.price%TYPE;
      v_currency       price_line_item_detail.currency%TYPE;
      v_chargetype     price_line_item_detail.charge_type%TYPE;
      v_discount       price_line_item_detail.discount%TYPE;
      v_discounttype   price_line_item_detail.discount_type%TYPE;
      v_fallback       line_item.fallback_type%TYPE;
      v_cost           cost_detail.COST%TYPE;
      v_costcur        cost_detail.currency%TYPE;
      v_costtype       cost_detail.cost_type%TYPE;
      v_extqref        price_line_item_detail.external_qref%TYPE;
      v_count          NUMBER;
      v_lineitemid     line_item.line_item_id%TYPE;
      v_prlindetid     price_line_item_detail.price_line_item_detail_id%TYPE;
      v number;
      v_rowid           price_line_item_detail.row_id%TYPE;
-- Start Added for R16 purpose on 10-AUG 2011
      v_str_chk        VARCHAR2 (10);
      v_ptp_eup        price_line_item_detail.ptp_eup%TYPE;
      v_ptp_eup_id     price_line_item_detail.ptp_eup_id%TYPE;
 --End
   BEGIN
   v:=10;
      FOR v_rowcnt IN c_pricedet
      LOOP
      dbms_output.put_line(v_rowcnt.COLUMN_VALUE);
         SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                        1,
                        INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 1) - 1
                       )
           INTO v_priclinitm
           FROM DUAL;

         SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                        INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 1) + 1,
                        (  INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 2)
                         - INSTR (v_rowcnt.COLUMN_VALUE, '#', 1)
                         - 1
                        )
                       )
           INTO v_price
           FROM DUAL;

         SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                        INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 2) + 1,
                        (  INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 3)
                         - INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 2)
                         - 1
                        )
                       )
           INTO v_currency
           FROM DUAL;

         SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                        INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 3) + 1,
                        (  INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 4)
                         - INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 3)
                         - 1
                        )
                       )
           INTO v_chargetype
           FROM DUAL;

         SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                        INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 4) + 1,
                        (  INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 5)
                         - INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 4)
                         - 1
                        )
                       )
           INTO v_discount
           FROM DUAL;

         SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                        INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 5) + 1,
                        (  INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 6)
                         - INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 5)
                         - 1
                        )
                       )
           INTO v_discounttype
           FROM DUAL;

         SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                        INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 6) + 1,
                        (  INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 7)
                         - INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 6)
                         - 1
                        )
                       )
           INTO v_fallback
           FROM DUAL;

         SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                        INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 7) + 1,
                        (  INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 8)
                         - INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 7)
                         - 1
                        )
                       )
           INTO v_cost
           FROM DUAL;

         SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                        INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 8) + 1,
                        (  INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 9)
                         - INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 8)
                         - 1
                        )
                       )
           INTO v_costtype
           FROM DUAL;

         SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                        INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 9) + 1,
                        (  INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 10)
                         - INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 9)
                         - 1
                        )
                       )
           INTO v_costcur
           FROM DUAL;

         SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                        INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 10) + 1,
                        (  INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 11)
                         - INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 10)
                         - 1
                        )
                       )
           INTO v_extqref
           FROM DUAL;
-- Start Added for R16 purpose on 10-AUG 2011
/*
         SELECT (SUBSTR (v_rowcnt.COLUMN_VALUE,
                         INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 11) + 1,
                         LENGTH (v_rowcnt.COLUMN_VALUE) - 1
                        )
                )
           INTO v_rowid
           FROM DUAL;

  */
          v_str_chk := NULL;

         SELECT CASE
                   WHEN   LENGTH (v_rowcnt.COLUMN_VALUE)
                        - LENGTH (REPLACE (v_rowcnt.COLUMN_VALUE, '#')) = 11
                      --11
                THEN 1
                   ELSE 0
                END
           INTO v_str_chk
           FROM DUAL;

         IF v_str_chk = 0
         THEN
           SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                        INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 11) + 1,
                        (  INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 12)
                         - INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 11)
                         - 1
                        )
                       )
           INTO v_rowid
           FROM DUAL;
              SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                           INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 12) + 1,
                           (  INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 13)
                            - INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 12)
                            - 1
                           )
                          )
              INTO v_ptp_eup

              FROM DUAL;
                    SELECT (SUBSTR (v_rowcnt.COLUMN_VALUE,
                                  INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 13) + 1,
                                  LENGTH (v_rowcnt.COLUMN_VALUE) - 1
                                 )
                         )
                    INTO v_ptp_eup_id
                    FROM DUAL;
         ELSE

         SELECT (SUBSTR (v_rowcnt.COLUMN_VALUE,
                         INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 11) + 1,
                         LENGTH (v_rowcnt.COLUMN_VALUE) - 1
                        )
                )
           INTO v_rowid
           FROM DUAL;
         END IF;
--End
         SELECT price_line_item_id
           INTO v_priclinitmid
           FROM price_line_item
          WHERE UPPER (price_line_description) = UPPER (v_priclinitm);

         --modified on 7/1/2010 to check for line_item_id
         SELECT COUNT (*)
           INTO v_count
           FROM price_line_item_detail
          WHERE price_line_item_id = v_priclinitmid
            AND line_item_id IN (
                   SELECT DISTINCT line_item_id
                              FROM line_item
                             WHERE quote_header_id = in_quoteheaderid
                               AND (site_id = in_siteid or (site_id is null and nvl(in_siteid,0) =0)) /*904 Order Site to Site SLA */
                               AND NVL (part_type, '-1') =
                                      DECODE (UPPER (product_name),
                                              'BT CPE', 'Bundle',
                                              NVL (part_type, '-1')
                                             )
                               --for BT Cpe only part type called Bundle has to be picked up
                               AND UPPER (product_name) = UPPER (in_prodname)
                               AND active = pkg_constants.con_activeflag_yes
                               AND UPPER (fallback_type) = UPPER (v_fallback))
        AND NVL(row_id,-1) = NVL(v_rowid,-1);

         IF (v_count = 0)
         THEN
            IF (v_priclinitmid IS NOT NULL)
            THEN
               INSERT INTO price_line_item_detail
                           (price_line_item_detail_id, price_line_item_id,
                            price, currency, charge_type, external_qref,
                            discount, discount_type, active, created_by,
                            created_date, line_item_id,row_id,net_price,
                            ptp_eup,ptp_eup_id)-- Added for R16 purpose on 10-AUG 2011
                  (SELECT price_line_item_detail_id.NEXTVAL, v_priclinitmid,
                          v_price, v_currency, v_chargetype, v_extqref,
                          v_discount, v_discounttype,
                          pkg_constants.con_activeflag_yes, in_createdby,
                          SYSDATE (), line_item_id,v_rowid,v_price,
                          v_ptp_eup,v_ptp_eup_id -- Start Added for R16 purpose on 10-AUG 2011
                     FROM line_item
                    WHERE quote_header_id = in_quoteheaderid
                      AND (site_id = in_siteid or (site_id is null and nvl(in_siteid,0) =0)) /*904 Order Site to Site SLA */
                      AND UPPER (product_name) = UPPER (in_prodname)
                      AND active = pkg_constants.con_activeflag_yes
                      AND NVL (part_type, '-1') =
                             DECODE (UPPER (product_name),
                                     'BT CPE', 'Bundle',
                                     NVL (part_type, '-1')
                                    )
                      --for BT Cpe only part type called Bundle has to be picked up
                      AND UPPER (fallback_type) = UPPER (v_fallback)
            AND NVL(row_id,-1) = NVL(v_rowid,-1));

               UPDATE line_item
                  SET priced = pkg_constants.con_activeflag_yes
                WHERE quote_header_id = in_quoteheaderid
                  AND (site_id = in_siteid or (site_id is null and nvl(in_siteid,0) =0)) /*904 Order Site to Site SLA */
                  AND UPPER (product_name) = UPPER (in_prodname)
                  AND NVL (part_type, '-1') =
                         DECODE (UPPER (product_name),
                                 'BT CPE', 'Bundle',
                                 NVL (part_type, '-1')
                                )
                  --for BT Cpe only part type called Bundle has to be picked up
                  AND active = pkg_constants.con_activeflag_yes
                  AND UPPER (fallback_type) = UPPER (v_fallback)
            AND NVL(row_id,-1) = NVL(v_rowid,-1);

               IF (v_costtype IS NOT NULL)
               THEN
                  INSERT INTO cost_detail
                              (cost_detail_id, price_line_item_detail_id,
                               cost_type, COST, currency, created_by,
                               created_date)
                     (SELECT cost_detail_id.NEXTVAL,
                             price_line_item_detail_id, v_costtype, v_cost,
                             v_costcur, in_createdby, SYSDATE ()
                        FROM price_line_item_detail
                       WHERE price_line_item_id = v_priclinitmid
                       AND active = pkg_constants.con_activeflag_yes
                        AND line_item_id IN (
                                SELECT DISTINCT line_item_id
                                           FROM line_item
                                          WHERE quote_header_id =
                                                             in_quoteheaderid
                                            AND (site_id = in_siteid or (site_id is null and nvl(in_siteid,0) =0)) /*904 Order Site to Site SLA */
                                            AND NVL (part_type, '-1') =
                                                   DECODE
                                                         (UPPER (product_name),
                                                          'BT CPE', 'Bundle',
                                                          NVL (part_type,
                                                               '-1')
                                                         )
                                            --for BT Cpe only part type called Bundle has to be picked up
                                            AND UPPER (product_name) =
                                                           UPPER (in_prodname)
                                            AND active =
                                                   pkg_constants.con_activeflag_yes
                                            AND UPPER (fallback_type) =
                                                            UPPER (v_fallback)
                        AND NVL(row_id,-1) = NVL(v_rowid,-1)));
               END IF;
            END IF;
         ELSE
            --modified on 7/1/2010 to check for line_item_id
            UPDATE price_line_item_detail
               SET active = pkg_constants.con_activeflag_no,
                   modified_by = in_createdby,
                   modified_date = SYSDATE ()
             WHERE price_line_item_id = v_priclinitmid
               AND line_item_id IN (
                      SELECT DISTINCT line_item_id
                                 FROM line_item
                                WHERE quote_header_id = in_quoteheaderid
                                  AND (site_id = in_siteid or (site_id is null and nvl(in_siteid,0) =0)) /*904 Order Site to Site SLA */
                                  AND NVL (part_type, '-1') =
                                         DECODE (UPPER (product_name),
                                                 'BT CPE', 'Bundle',
                                                 NVL (part_type, '-1')
                                                )
                                  --for BT Cpe only part type called Bundle has to be picked up
                                  AND UPPER (product_name) =
                                                           UPPER (in_prodname)
                                  AND active =
                                              pkg_constants.con_activeflag_yes
                                  AND UPPER (fallback_type) =
                                                            UPPER (v_fallback)
                 AND NVL(row_id,-1) = NVL(v_rowid,-1));

            IF (v_priclinitmid IS NOT NULL)
            THEN
               INSERT INTO price_line_item_detail
                           (price_line_item_detail_id, price_line_item_id,
                            price, currency, charge_type, external_qref,
                            discount, discount_type, active, created_by,
                            created_date, line_item_id,row_id,net_price,
                            ptp_eup,ptp_eup_id) ---- Start Added for R16 purpose on 10-AUG 2011
                  (SELECT price_line_item_detail_id.NEXTVAL, v_priclinitmid,
                          v_price, v_currency, v_chargetype, v_extqref,
                          v_discount, v_discounttype,
                          pkg_constants.con_activeflag_yes, in_createdby,
                          SYSDATE (), line_item_id,v_rowid,v_price,
                          v_ptp_eup,v_ptp_eup_id ---- Start Added for R16 purpose on 10-AUG 2011
                     FROM line_item
                    WHERE quote_header_id = in_quoteheaderid
                      AND (site_id = in_siteid or (site_id is null and nvl(in_siteid,0) =0)) /*904 Order Site to Site SLA */
                      AND UPPER (product_name) = UPPER (in_prodname)
                      AND active = pkg_constants.con_activeflag_yes
                      AND NVL (part_type, '-1') =
                             DECODE (UPPER (product_name),
                                     'BT CPE', 'Bundle',
                                     NVL (part_type, '-1')
                                    )
                      --for BT Cpe only part type called Bundle has to be picked up
                      AND UPPER (fallback_type) = UPPER (v_fallback)
            AND NVL(row_id,-1) = NVL(v_rowid,-1));

               UPDATE line_item
                  SET priced = pkg_constants.con_activeflag_yes
                WHERE quote_header_id = in_quoteheaderid
                  AND (site_id = in_siteid or (site_id is null and nvl(in_siteid,0) =0)) /*904 Order Site to Site SLA */
                  AND UPPER (product_name) = UPPER (in_prodname)
                  AND NVL (part_type, '-1') =
                         DECODE (UPPER (product_name),
                                 'BT CPE', 'Bundle',
                                 NVL (part_type, '-1')
                                )
                  --for BT Cpe only part type called Bundle has to be picked up
                  AND active = pkg_constants.con_activeflag_yes
                  AND UPPER (fallback_type) = UPPER (v_fallback)
        AND NVL(row_id,-1) = NVL(v_rowid,-1);

               IF (v_costtype IS NOT NULL)
               THEN
                  INSERT INTO cost_detail
                              (cost_detail_id, price_line_item_detail_id,
                               cost_type, COST, currency, created_by,
                               created_date)
                     (SELECT cost_detail_id.NEXTVAL,
                             price_line_item_detail_id, v_costtype, v_cost,
                             v_costcur, in_createdby, SYSDATE ()
                        FROM price_line_item_detail
                       WHERE price_line_item_id = v_priclinitmid
                       AND active = pkg_constants.con_activeflag_yes
                       AND line_item_id IN (
                                SELECT DISTINCT line_item_id
                                           FROM line_item
                                          WHERE quote_header_id =
                                                             in_quoteheaderid
                                            AND (site_id = in_siteid or (site_id is null and nvl(in_siteid,0) =0)) /*904 Order Site to Site SLA */
                                            AND UPPER (product_name) =
                                                           UPPER (in_prodname)
                                            AND active =
                                                   pkg_constants.con_activeflag_yes
                                            AND NVL (part_type, '-1') =
                                                   DECODE
                                                         (UPPER (product_name),
                                                          'BT CPE', 'Bundle',
                                                          NVL (part_type,
                                                               '-1')
                                                         )
                                            --for BT Cpe only part type called Bundle has to be picked up
                                            AND UPPER (fallback_type) =
                                                            UPPER (v_fallback)
                AND NVL(row_id,-1) = NVL(v_rowid,-1)));
               END IF;
            END IF;
         END IF;
      END LOOP;

      out_status := pkg_constants.con_status_success;
    --  COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         out_errmsg := SQLERRM;
         -- ROLLBACK;
   END;


   -- Added on 30/3/2011 as part of multisite non-standard data bulkupload
   PROCEDURE spi_bulkupload_bid_req_status (
      in_quoteheaderid          IN       quote_header.quote_header_id%TYPE,
      in_bid_req_stat           IN       bulkupload_bid_req_stat_tab,
      in_createdby              IN       bid_request_status.created_by%TYPE,
      out_status                OUT      NUMBER,
      out_errmsg                OUT      VARCHAR2
   )
   AS

   BEGIN

      FOR i IN in_bid_req_stat.FIRST .. in_bid_req_stat.LAST
      LOOP
         UPDATE bid_request_status
            SET active = pkg_constants.con_activeflag_no,
                modified_by = in_createdby,
                modified_date = SYSDATE
          WHERE quote_header_id = in_quoteheaderid
            AND site_id = in_bid_req_stat(i).site_id
            AND product_id = in_bid_req_stat(i).product_id
            AND product_name = in_bid_req_stat(i).product_name
            --AND NVL(non_std_bid_items,'X') =NVL( in_bid_req_stat(i).non_std_bid_items,'X')
            AND NVL(row_id,-1) = NVL(in_bid_req_stat(i).row_id,-1)
            AND NVL(non_std_comp,'X') = NVL(in_bid_req_stat(i).non_std_comp,'X')
            AND active = pkg_constants.con_activeflag_yes;

      END LOOP;

      FOR i IN in_bid_req_stat.FIRST .. in_bid_req_stat.LAST
      LOOP
          -- Fallback_type_pri is "Primary"
          IF upper(trim(NVL(in_bid_req_stat(i).fallback_type_pri,'X'))) = 'PRIMARY'
          THEN
              -- If fallback_type_pri is "Primary" and fallback_type_sec is null
              IF in_bid_req_stat(i).fallback_type_sec IS NULL
              THEN
                    INSERT INTO bid_request_status
                          (bid_request_status_id, quote_header_id, site_id,
                           product_id, product_name, special_bid_number,
                           bid_status, activation_due_date,
                           -- NRC and MRC for "Primary" fallback type
                           one_time_install_cost, monthly_recurring_cost,
                           data_build_done, bid_expiry_date,
                           non_std_bid_items, tpp_url,
                           row_id, non_std_comp,
                           created_by, created_date, active,
                           fallback_type
                          )
                       VALUES (bid_request_status_id.NEXTVAL, in_quoteheaderid, in_bid_req_stat(i).site_id,
                           in_bid_req_stat(i).product_id, in_bid_req_stat(i).product_name, in_bid_req_stat(i).special_bid_number,
                           in_bid_req_stat(i).bid_status, in_bid_req_stat(i).activation_due_date ,
                           -- Primary NRC and MRC values
                           in_bid_req_stat(i).pri_one_time_install_cost, in_bid_req_stat(i).pri_monthly_recurring_cost,
                           --
                           in_bid_req_stat(i).data_build_done, in_bid_req_stat(i).bid_expiry_date,
                           in_bid_req_stat(i).non_std_bid_items, in_bid_req_stat(i).tpp_url,
                           in_bid_req_stat(i).row_id, in_bid_req_stat(i).non_std_comp,
                           in_createdby, SYSDATE, pkg_constants.con_activeflag_yes,
                           in_bid_req_stat(i).fallback_type_pri
                           );
              END IF;

              -- If fallback_type_pri is "Primary" and fallback_type_sec is "Secondary"
              IF upper(trim(NVL(in_bid_req_stat(i).fallback_type_sec,'X'))) = 'SECONDARY'
              THEN
                    INSERT INTO bid_request_status
                          (bid_request_status_id, quote_header_id, site_id,
                           product_id, product_name, special_bid_number,
                           bid_status, activation_due_date,
                           -- NRC and MRC for "Secondary"
                           one_time_install_cost, monthly_recurring_cost,
                           data_build_done, bid_expiry_date,
                           non_std_bid_items, tpp_url,
                           row_id, non_std_comp,
                           created_by, created_date, active,
                           fallback_type
                          )
                       VALUES (bid_request_status_id.NEXTVAL, in_quoteheaderid, in_bid_req_stat(i).site_id,
                           in_bid_req_stat(i).product_id, in_bid_req_stat(i).product_name, in_bid_req_stat(i).special_bid_number,
                           in_bid_req_stat(i).bid_status, in_bid_req_stat(i).activation_due_date ,
                           -- Primary NRC and MRC values
                           in_bid_req_stat(i).sec_one_time_install_cost, in_bid_req_stat(i).sec_monthly_recurring_cost,
                           --
                           in_bid_req_stat(i).data_build_done, in_bid_req_stat(i).bid_expiry_date,
                           in_bid_req_stat(i).non_std_bid_items, in_bid_req_stat(i).tpp_url,
                           in_bid_req_stat(i).row_id, in_bid_req_stat(i).non_std_comp,
                           in_createdby, SYSDATE, pkg_constants.con_activeflag_yes,
                           in_bid_req_stat(i).fallback_type_sec
                       );
              END IF;

          -- If fallback_type_sec is "Secondary" and fallback_type_pri is null
          ELSIF (upper(trim(NVL(in_bid_req_stat(i).fallback_type_sec,'X'))) = 'SECONDARY'
                 AND in_bid_req_stat(i).fallback_type_pri IS NULL)
          THEN

                INSERT INTO bid_request_status
                      (bid_request_status_id, quote_header_id, site_id,
                       product_id, product_name, special_bid_number,
                       bid_status, activation_due_date,
                       -- NRC and MRC for "Secondary"
                       one_time_install_cost, monthly_recurring_cost,
                       data_build_done, bid_expiry_date,
                       non_std_bid_items, tpp_url,
                       row_id, non_std_comp,
                       created_by, created_date, active,
                       fallback_type
                      )
                   VALUES (bid_request_status_id.NEXTVAL, in_quoteheaderid, in_bid_req_stat(i).site_id,
                       in_bid_req_stat(i).product_id, in_bid_req_stat(i).product_name, in_bid_req_stat(i).special_bid_number,
                       in_bid_req_stat(i).bid_status, in_bid_req_stat(i).activation_due_date,
                       -- Secondary NRC and MRC values
                       in_bid_req_stat(i).sec_one_time_install_cost, in_bid_req_stat(i).sec_monthly_recurring_cost,
                       --
                       in_bid_req_stat(i).data_build_done, in_bid_req_stat(i).bid_expiry_date,
                       in_bid_req_stat(i).non_std_bid_items, in_bid_req_stat(i).tpp_url,
                       in_bid_req_stat(i).row_id, in_bid_req_stat(i).non_std_comp,
                       in_createdby, SYSDATE, pkg_constants.con_activeflag_yes,
                       in_bid_req_stat(i).fallback_type_sec
                       );
          -- Code fix to be done from java end to remove this scenario
          ELSIF (in_bid_req_stat(i).fallback_type_pri IS NULL
            AND  in_bid_req_stat(i).fallback_type_sec IS NULL)
          THEN
                INSERT INTO bid_request_status
                      (bid_request_status_id, quote_header_id, site_id,
                       product_id, product_name, special_bid_number,
                       bid_status, activation_due_date,
                       one_time_install_cost, monthly_recurring_cost,
                       data_build_done, bid_expiry_date,
                       non_std_bid_items, tpp_url,
                       row_id, non_std_comp,
                       created_by, created_date, active,
                       fallback_type
                      )
                   VALUES (bid_request_status_id.NEXTVAL, in_quoteheaderid, in_bid_req_stat(i).site_id,
                       in_bid_req_stat(i).product_id, in_bid_req_stat(i).product_name, in_bid_req_stat(i).special_bid_number,
                       in_bid_req_stat(i).bid_status, in_bid_req_stat(i).activation_due_date,
                       -- Inserting "0" for both NRC and MRC
                       0, 0,
                       in_bid_req_stat(i).data_build_done, in_bid_req_stat(i).bid_expiry_date,
                       in_bid_req_stat(i).non_std_bid_items, in_bid_req_stat(i).tpp_url,
                       in_bid_req_stat(i).row_id, in_bid_req_stat(i).non_std_comp,
                       in_createdby, SYSDATE, pkg_constants.con_activeflag_yes,
                       NULL
                       );

          END IF;

      END LOOP;

   out_status := pkg_constants.con_status_success;

   EXCEPTION
      WHEN OTHERS THEN
         out_status := pkg_constants.con_status_failure;
         out_errmsg := SQLERRM;
   END;

END;
/


CREATE OR REPLACE PACKAGE BODY PKG_BOM_GEN
AS
 v_sql_code     NUMBER;        -- Added by Sujana on 23/11/2010 as part of exception handling
 v_sql_errm     VARCHAR2(150); -- Added by Sujana on 23/11/2010 as part of exception handling

   PROCEDURE sps_order_request (
      in_quoteid          IN       quote.quote_id%TYPE,
      in_quoteheaderid    IN       quote_header.quote_header_id%TYPE,
      in_qhversion        IN       quote_header.VERSION%TYPE,
      out_order_request   OUT      sys_refcursor
   )
   AS
   BEGIN
        OPEN out_order_request FOR
         SELECT qh.quote_id "SQE Quote ID",
                qh.quote_header_id "SQE Quote Header ID",

                --- oh.order_header_id "SQE Order Header ID",
                sub.NAME "Subsidiary Name",
                cust.bfg_customer_id "Customer ID",
                qh.cr_prop_id "CR Prop ID",
                qh.expedio_ref_id "Expedio Reference ID",
                qh.expedio_quoteid "Expedio Quote ID",
                qh.expedio_quoteversion "Expedio Quote Version",
                qh.VERSION "SQE Quote Version", NVL(bs.order_type,oh.order_type) "Order Type",
                oh.order_form_sign_date "Order Form Sign Date",
                b.billing_id "Billing ID",
                --cust.sales_channel "Sales Channel" /*salesOrganisation*/,
                q.sales_channel "Sales Channel"/*salesOrganisation*/, --added for R7 by Nagendra on 26 oct 2010
                NULL AS "salesPartner", qh.currency "Currency",
                q.customer_service_center "Customer Service Center",
                cust.NAME "Customer name",
                cust.channel_type "salesChannelType",

                -- cp.ptp_price_book_version "PTP Price Book Version",
                -- cp.eup_price_book_version "EUP Price Book Version" ,
                cp.order_submitted_flag "Order Submitted Flag",
                cp.monthly_revenue_commitment "Monthly Revenue Commitment",
                cp.trigger_period "Trigger Period",
                oh.order_header_id "SQE Order Header ID"
               ,oh.CONTRACT_ID --added for defect id 1878 on 09 AUG 2011
           FROM quote q,
                quote_header qh,
                customer cust,
                bt_subsidiary sub,
                order_header oh,
                billing b,
                customer_product cp,
                bundle_selection bs
          WHERE q.quote_id = qh.quote_id
            AND q.customer_id = cust.customer_id
            --AND cust.bt_subsidiary_id = sub.bt_subsidiary_id
            AND q.bt_subsidiary_id = sub.bt_subsidiary_id --added for R7 by Nagendra on 26 oct 2010
            AND qh.quote_header_id = oh.quote_header_id
            AND q.customer_id = b.customer_id
            AND qh.quote_header_id = cp.quote_header_id(+)
            AND qh.quote_header_id = bs.quote_header_id(+)
            AND q.quote_id = in_quoteid
            AND qh.quote_header_id = in_quoteheaderid
            AND VERSION = in_qhversion;
  EXCEPTION
     WHEN OTHERS THEN
 -- Added by Mini on 23/11/2010 as part of exception handling
         v_sql_errm := substr(SQLERRM,1,150);
         v_sql_code := SQLCODE;
         PKG_COMMON.spi_error_log(
                                  in_quoteid,
                                  in_quoteheaderid,
                                  NULL,
                                  NULL,
                                  'PKG_BOM_GEN',
                                  'SPS_ORDER_REQUEST',
                                  v_sql_code,
                                  v_sql_errm
                                 );
   END;

   PROCEDURE sps_site_request (
      in_quoteid         IN       quote.quote_id%TYPE,
      in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
      in_qhversion       IN       quote_header.VERSION%TYPE,
      in_site_list       IN       VARCHAR2,
      -- added for fetch info based on selected sites- BK-
      out_site_request   OUT      sys_refcursor
   )
   AS
   BEGIN
      OPEN out_site_request FOR
         SELECT q.quote_id AS "Quote ID", qh.quote_header_id,
                si.site_id AS siteid,
                DECODE (si.main_site_flag,
                        pkg_constants.con_activeflag_yes, pkg_constants.con_centralsite
                       ) AS centralsitename,
                si.prop_site_id AS crpropsiteid,
                si.prop_subloc_id AS crpropsublocid,
                si.bfg_site_id AS bfgsiteid,
                si.bfg_subloc_id AS bfgsublocationid,
                si.prop_address_id AS crpropaddressid,
                si.bfg_address_id AS bfgaddressid,
                b.bfg_bill_account_id AS billing_id,  --changed as part of R5
                si.child_expedio_ref_id AS childexprefid,
                si.cr_prop_id AS crpropid,
        er.exp_order_id AS exporderid,
                -- Added the below on 26/5/2011 as part of the defect 109471
        decode(upper(er.status),'CANCELLED', 'N', er.ifc_flag)  AS ifcflag,
                qss.primary AS primaryServiceInstanceId,
                qss.secondary AS secondaryServiceInstanceId,
                -- Added on 13/5/2011 as part of defect 92088
                osd.customer_required_date
           FROM quote q LEFT OUTER JOIN quote_header qh
                ON q.quote_id = qh.quote_id
                LEFT OUTER JOIN quote_site qs
                ON qh.quote_header_id = qs.quote_header_id
                INNER JOIN site si ON qs.site_id = si.site_id
                LEFT OUTER JOIN ORDER_HEADER oh
                ON oh.quote_header_id = qh.quote_header_id
                -- Added on 13/5/2011 as part of defect 92088
                LEFT OUTER JOIN order_site_detail osd
                ON osd.site_id = si.site_id AND osd.active = 'Y'
                AND oh.order_header_id = osd.order_header_id
                INNER JOIN address addr ON si.address_id = addr.address_id
                LEFT OUTER JOIN expedio_response er
                ON qh.quote_id = er.quote_id
                AND qs.site_id = er.site_id
                AND er.expedio_quoteversion = qh.expedio_parent_version
                LEFT OUTER JOIN billing b
                ON si.billing_id = b.billing_id         ---added as part of R5
                LEFT OUTER JOIN quote_site_service qss
                ON qh.quote_header_id = qss.quote_header_id
                AND qs.site_id = qss.site_id
          WHERE q.quote_id = in_quoteid
            AND oh.quote_header_id = in_quoteheaderid
            AND qh.VERSION = in_qhversion
            AND (   si.site_id IN (
                       SELECT *
                         FROM TABLE
                                 (CAST
                                     (pkg_common.fn_splitdata (in_site_list,
                                                               '~'
                                                              ) AS varchar2_ntt
                                     )
                                 ) nt)
                 OR si.main_site_flag = pkg_constants.con_activeflag_yes
                )
            AND qs.active = pkg_constants.con_activeflag_yes;
    EXCEPTION
           WHEN OTHERS THEN
 -- Added by Mini on 23/11/2010 as part of exception handling
         v_sql_errm := substr(SQLERRM,1,150);
         v_sql_code := SQLCODE;
         PKG_COMMON.spi_error_log(
                                  in_quoteid,
                                  in_quoteheaderid,
                                  NULL,
                                  NULL,
                                  'PKG_BOM_GEN',
                                  'SPS_SITE_REQUEST',
                                  v_sql_code,
                                  v_sql_errm
                                 );
   END;

-------iVPN Product -Attributes part Start Updated By  SRK on 10Aug2010
------ Sp to fetch Quote level Attribute ,Order Attributes,Special Bid,Infonet Attributes
   PROCEDURE sps_ivpn2_attr_request (
      in_quoteid               IN       quote.quote_id%TYPE,
      in_quoteheaderid         IN       quote_header.quote_header_id%TYPE,
      in_qhversion             IN       quote_header.VERSION%TYPE,
      in_site_list             IN       VARCHAR2,
                          -- added for fetch info based on selected sites- BK-
      --- in_productid             IN       line_item.product_id%TYPE,
      in_productname           IN       line_item.product_name%TYPE,
      out_ivpn2_attr_request   OUT      sys_refcursor
   )
   AS
   BEGIN
      OPEN out_ivpn2_attr_request FOR
                  SELECT   COALESCE(q.quote_id, asis.quote_id, pvs.quote_id) quote_id,

         COALESCE(qh.quote_header_id, asis.quote_header_id,pvs.quote_header_id) quote_header_id,

         COALESCE(s.site_id,asis.site_id,pvs.site_id) site_id,

                 COALESCE(s.NAME,asis.NAME,pvs.NAME)  site_name,

                 COALESCE(lineitemtemp.product_id, asis.product_id,pvs.product_id) product_id,

                 COALESCE(lineitemtemp.product_name,asis.product_name,pvs.product_name) product_name,

                  COALESCE(pmd.child_scode, asis.child_scode, pvs.child_scode)child_scode,                                --lm.scode,

                   COALESCE(lm.fallback_type,asis.fallback_type,pvs.fallback_type)fallback_type,

                   COALESCE(lm.part_type, asis.part_type,pvs.part_type)part_type,

                  DECODE(COALESCE(ld.row_id,asis."ld_row_id",pvs."ld_row_id"),0,NULL,COALESCE(ld.row_id,asis."ld_row_id",pvs."ld_row_id")) row_id,

                  COALESCE(am.ppsr_attribute,asis.ppsr_attribute,pvs.ppsr_attribute) attribute_name,

                  COALESCE(am.sqe_display_text,asis.sqe_display_text,pvs.sqe_display_text)sqe_display_text,

                  COALESCE(am.config_level, asis.config_level,pvs.config_level)config_level,

                  ld.value AS "ATTRIBUTE_VALUE", asis.value AS "AS_IS_VALUE",

                  pvs.value AS "PREVIOUS_VALUE", lm.action_code AS "TOBE_LINEITEM_ACTION_CODE", asis."LINEITEM_ACTION_CODE" AS "ASIS_LINEITEM_ACTION_CODE", ld.action_code AS "TO_BE_ACTION_CODE",asis."ATTR_ACTION_CODE" AS "AS_IS_ACTION_CODE",

                  asis."LINEITEM_CLASSIC_ID", asis."ATTR_CLASSIC_ID",

          NVL( COALESCE(ld.quantity,asis.quantity,pvs.quantity), 1) AS "LINE_ITEM_QUANTITY"

             FROM quote q LEFT OUTER JOIN quote_header qh

                  ON q.quote_id = qh.quote_id

                  AND q.quote_id = in_quoteid

                  AND qh.quote_header_id = in_quoteheaderid

                  AND qh.version = in_qhversion

                  LEFT OUTER JOIN quote_site qs

                  ON qh.quote_header_id = qs.quote_header_id

                  AND qs.active = pkg_constants.con_activeflag_yes

                  INNER JOIN site s ON qs.site_id = s.site_id

                  AND s.site_id IN (

                     SELECT *

                       FROM TABLE

                               (CAST

                                   (pkg_common.fn_splitdata (in_site_list,

                                                             '~') AS varchar2_ntt

                                   )

                               ) nt)

                  INNER JOIN line_item lm

                  ON lm.quote_header_id = qh.quote_header_id

                AND s.site_id = lm.site_id

                AND lm.active = pkg_constants.con_activeflag_yes

                INNER JOIN

                          (SELECT line_item_id,

                                  DECODE

                                      (UPPER(product_name),

                                       'BT IVPN2 CONFIGURATION', 'BT IVPN2 GLOBAL',

                                       'BT IVPN2 SLA', 'BT IVPN2 GLOBAL',

                                       product_name

                                      ) product_name,product_id

                             FROM line_item) lineitemtemp

                          ON lm.line_item_id = lineitemtemp.line_item_id

                AND UPPER(lineitemtemp.product_name) IN (

                       SELECT DISTINCT UPPER(pmd.product_name)

                                  FROM product_master pm,

                                       product_master_details pmd

                                 WHERE pm.parent_group_id =

                                                           pmd.parent_group_id

                                   AND UPPER(pm.product_name) = UPPER(in_productname)

                                   AND active =

                                              pkg_constants.con_activeflag_yes)

                  /*   INNER JOIN product_master_details pmd

                      ON  lm.product_name = pmd.product_name --Added by Mahim*/

                  INNER JOIN product_master_details pmd

                  ON DECODE (UPPER(lineitemtemp.product_name),

                             'BT CPE', DECODE (part_type,

                                               'Bundle', UPPER(lineitemtemp.product_name),

                                               UPPER(part_type)

                                              ),

                             UPPER(lineitemtemp.product_name)

                            ) = UPPER(pmd.product_name)              --Added by Mahim

                  INNER JOIN line_item_detail ld

                  ON lm.line_item_id = ld.line_item_id

                  AND ld.active = pkg_constants.con_activeflag_yes

                  LEFT OUTER JOIN attribute_mapping am

                  ON ld.attribute_mapping_id = am.attribute_mapping_id

                 -- added by arpitha for R7 req start

          FULL OUTER JOIN (

                            SELECT qh.quote_id,qh.quote_header_id,lm.site_id,s.NAME, lineitemtemp.product_id,lineitemtemp.product_name,pmd.child_scode,

                                   lm.fallback_type, lm.part_type, lm.row_id AS "lm_row_id", ld.row_id AS "ld_row_id", ld.attribute_mapping_Id,

                                   am.ppsr_attribute,am.sqe_display_text,am.config_level, ld.Value,ld.quantity

                            FROM quote_header qh

                            INNER JOIN quote_header tobeqh

                            ON qh.quote_id = tobeqh.quote_id

                            AND qh.version = tobeqh.expedio_parent_version

                            LEFT OUTER JOIN quote_site qs

                            ON qh.quote_header_id = qs.quote_header_id

                            AND qs.active = pkg_constants.con_activeflag_yes

                            INNER JOIN site s ON qs.site_id = s.site_id

                            AND s.site_id IN (

                               SELECT *

                                 FROM TABLE

                                         (CAST

                                             (pkg_common.fn_splitdata (in_site_list,

                                                                       '~') AS varchar2_ntt

                                             )

                                         ) nt)

                            INNER JOIN line_item lm

                            ON lm.quote_header_id = qh.quote_header_id

                            AND s.site_id = lm.site_id

                            AND lm.active = pkg_constants.con_activeflag_yes

                            INNER JOIN

                                      (SELECT line_item_id,

                                              DECODE

                                                  (UPPER(product_name),

                                                   'BT IVPN2 CONFIGURATION', 'BT IVPN2 GLOBAL',

                                                   'BT IVPN2 SLA', 'BT IVPN2 GLOBAL',

                                                   product_name

                                                  ) product_name,product_id

                                         FROM line_item) lineitemtemp

                                      ON lm.line_item_id = lineitemtemp.line_item_id

                            AND UPPER(lineitemtemp.product_name) IN (

                                   SELECT DISTINCT UPPER(pmd.product_name)

                                              FROM product_master pm,

                                                   product_master_details pmd

                                             WHERE pm.parent_group_id =

                                                                       pmd.parent_group_id

                                               AND UPPER(pm.product_name) = UPPER(in_productname)

                                               AND active =

                                                          pkg_constants.con_activeflag_yes)

                              /*   INNER JOIN product_master_details pmd

                                  ON  lm.product_name = pmd.product_name --Added by Mahim*/

                              INNER JOIN product_master_details pmd

                              ON DECODE (UPPER(lineitemtemp.product_name),

                                         'BT CPE', DECODE (part_type,

                                                           'Bundle', UPPER(lineitemtemp.product_name),

                                                           UPPER(part_type)

                                                          ),

                                         UPPER(lineitemtemp.product_name)

                                        ) = UPPER(pmd.product_name)

                            INNER JOIN line_item_detail ld

                            ON ld.line_item_id = lm.line_item_id

                            AND ld.active = pkg_constants.con_activeflag_yes

                            LEFT OUTER JOIN attribute_mapping am

                            ON ld.attribute_mapping_id = am.attribute_mapping_id

                            WHERE tobeqh.version = in_qhversion

                            AND qh.quote_id=in_quoteid

                        ) pvs

                        ON pvs.quote_id = qh.quote_id

                        AND nvl(pvs.site_id,-1) = nvl(lm.site_id,-1)

                        AND pvs.product_id= lm.product_id

                        AND pvs.fallback_type = lm.fallback_type

                        AND nvl(pvs."lm_row_id",-1) = nvl(lm.row_id, -1)

                        AND nvl(pvs."ld_row_id",-1) = nvl(ld.row_id, -1)

                        AND nvl(pvs.part_type,-1) = nvl(lm.part_type,-1)

                        AND pvs.attribute_mapping_id = ld.attribute_mapping_id

         FULL OUTER JOIN (

                            SELECT qh.quote_id,qh.quote_header_id,lm.site_id,s.NAME, lineitemtemp.product_id,lineitemtemp.product_name,pmd.child_scode,

                                   lm.fallback_type, lm.part_type, lm.row_id AS "lm_row_id", ld.row_id AS "ld_row_id", ld.attribute_mapping_Id,

                                   am.ppsr_attribute,am.sqe_display_text,am.config_level, ld.Value,ld.quantity,

ld.action_code   AS "ATTR_ACTION_CODE", lm.action_code AS "LINEITEM_ACTION_CODE",

                lm.classic_element_id AS "LINEITEM_CLASSIC_ID", ld.classic_element_id AS "ATTR_CLASSIC_ID"

                            FROM quote_header qh

                            LEFT OUTER JOIN quote_site qs

                            ON qh.quote_header_id = qs.quote_header_id

                            AND qs.active = pkg_constants.con_activeflag_yes

                            INNER JOIN site s ON qs.site_id = s.site_id

                            AND s.site_id IN (

                               SELECT *

                                 FROM TABLE

                                         (CAST

                                             (pkg_common.fn_splitdata (in_site_list,

                                                                       '~') AS varchar2_ntt

                                             )

                                         ) nt)

                            INNER JOIN quote_line_item_as_is lm

                            ON lm.quote_header_id = qh.quote_header_id

                            AND s.site_id = lm.site_id

                            AND lm.active = pkg_constants.con_activeflag_yes

                            INNER JOIN

                                      (SELECT line_item_id,

                                              DECODE

                                                  (UPPER(product_name),

                                                   'BT IVPN2 CONFIGURATION', 'BT IVPN2 GLOBAL',

                                                   'BT IVPN2 SLA', 'BT IVPN2 GLOBAL',

                                                   product_name

                                                  ) product_name,product_id

                                         FROM quote_line_item_as_is) lineitemtemp

                                      ON lm.line_item_id = lineitemtemp.line_item_id

                            AND UPPER(lineitemtemp.product_name) IN (

                                   SELECT DISTINCT UPPER(pmd.product_name)

                                              FROM product_master pm,

                                                   product_master_details pmd

                                             WHERE pm.parent_group_id =

                                                                       pmd.parent_group_id

                                               AND UPPER(pm.product_name) = UPPER(in_productname)

                                               AND active =

                                                          pkg_constants.con_activeflag_yes)

                              /*   INNER JOIN product_master_details pmd

                                  ON  lm.product_name = pmd.product_name --Added by Mahim*/

                              INNER JOIN product_master_details pmd

                              ON DECODE (UPPER(lineitemtemp.product_name),

                                         'BT CPE', DECODE (part_type,

                                                           'Bundle', UPPER(lineitemtemp.product_name),

                                                           UPPER(part_type)

                                                          ),

                                         UPPER(lineitemtemp.product_name)

                                        ) = UPPER(pmd.product_name)

                            INNER JOIN quote_line_item_detail_as_is ld

                            ON ld.line_item_id = lm.line_item_id

                            AND ld.active = pkg_constants.con_activeflag_yes

                            LEFT OUTER JOIN attribute_mapping am

                            ON ld.attribute_mapping_id = am.attribute_mapping_id

                            where qh.quote_header_id=in_quoteheaderid

                        ) asis

                        ON asis.quote_header_id = qh.quote_header_id

                        AND nvl(asis.site_id,-1) = nvl(lm.site_id,-1)

                        AND UPPER(asis.product_name) = UPPER(lm.product_name)

                        AND asis.fallback_type = lm.fallback_type

                        AND nvl(asis."lm_row_id", 0) = nvl(lm.row_id, 0)

                        AND nvl(asis."ld_row_id",0) = nvl(ld.row_id, 0)

                        AND nvl(asis.part_type,-1) = nvl(lm.part_type,-1)

                        AND asis.attribute_mapping_id = ld.attribute_mapping_id

         UNION ALL

--Order related line items and attributes

         SELECT   COALESCE(qo.quote_id,asis.quote_id,pvs.quote_id)quote_id,

         COALESCE( qho.quote_header_id, asis.quote_header_id,pvs.quote_header_id)quote_header_id,

         COALESCE(oli.site_id,asis.site_id,pvs.site_id)site_id,

          COALESCE(so.NAME,asis.NAME,pvs.NAME ) site_name,

          COALESCE(oli.product_id, asis.product_id,pvs.product_id)product_id,

          COALESCE(oli.product_name,asis.product_name,pvs.product_name)product_name,

          COALESCE(pmd.child_scode, asis.child_scode,pvs.child_scode)child_scode,

          COALESCE(oli.fallback_type,asis.fallback_type,pvs.fallback_type)fallback_type,

           NULL AS part_type,

           DECODE(COALESCE(oli.row_id,asis."olm_row_id",pvs."olm_row_id"),0,NULL,COALESCE(oli.row_id,asis."olm_row_id",pvs."olm_row_id"))row_id,

           COALESCE(amo.ppsr_attribute,asis.ppsr_attribute, pvs.ppsr_attribute ) AS attribute_name,

            COALESCE(amo.sqe_display_text,asis.sqe_display_text,pvs.sqe_display_text)sqe_display_text,

            COALESCE(amo.config_level,asis.config_level,pvs.config_level)config_level,

                  olid.VALUE AS "ATTRIBUTE_VALUE", asis.value AS "AS_IS_VALUE",

                  pvs.value AS "PREVIOUS_VALUE", oli.action_code AS "TOBE_LINEITEM_ACTION_CODE", asis."LINEITEM_ACTION_CODE" AS "ASIS_LINEITEM_ACTION_CODE",    olid.action_code AS "TO_BE_ACTION_CODE", asis."ATTR_ACTION_CODE" AS "AS_IS_ACTION_CODE",

asis."LINEITEM_CLASSIC_ID", asis."ATTR_CLASSIC_ID",

NVL (COALESCE(olid.quantity,asis.quantity,pvs.quantity), 1) AS "LINE_ITEM_QUANTITY"

             FROM quote qo LEFT OUTER JOIN quote_header qho

                  ON qo.quote_id = qho.quote_id

                  AND qo.quote_id = in_quoteid

                  AND qho.quote_header_id = in_quoteheaderid

                  AND VERSION = in_qhversion

                  LEFT OUTER JOIN quote_site qs

                  ON qho.quote_header_id = qs.quote_header_id

                  AND qs.active = pkg_constants.con_activeflag_yes

                  INNER JOIN site so ON qs.site_id = so.site_id

                  AND so.site_id IN (

                     SELECT *

                       FROM TABLE

                               (CAST

                                   (pkg_common.fn_splitdata (in_site_list,

                                                             '~') AS varchar2_ntt

                                   )

                               ) nt)

                  LEFT OUTER JOIN order_header oh

                  ON qho.quote_header_id = oh.quote_header_id

                  LEFT OUTER JOIN order_line_item oli

                  ON oh.order_header_id = oli.order_header_id

                  AND oli.site_id = so.site_id

                  AND oli.active = pkg_constants.con_activeflag_yes

                  AND UPPER(oli.product_name) IN (

                       SELECT DISTINCT UPPER(pmd.product_name)

                                  FROM product_master pm,

                                       product_master_details pmd

                                 WHERE pm.parent_group_id =

                                                           pmd.parent_group_id

                                   AND UPPER(pm.product_name) = UPPER(in_productname)

                                   AND active =

                                              pkg_constants.con_activeflag_yes)

                  INNER JOIN product_master_details pmd

                  ON UPPER(oli.product_name) = UPPER(pmd.product_name)

                  LEFT OUTER JOIN order_line_item_detail olid

                  ON oli.order_line_item_id = olid.order_line_item_id

                  AND olid.active = pkg_constants.con_activeflag_yes

                  LEFT OUTER JOIN attribute_mapping amo

                  ON olid.attribute_mapping_id = amo.attribute_mapping_id

         -- added by arpitha for R7 req start

                  FULL OUTER JOIN (

                            SELECT qh.quote_id, qh.quote_header_id, olm.site_id,so.NAME , olm.product_id, olm.product_name,

                                   pmd.child_scode, olm.fallback_type, olm.row_id AS "olm_row_id",olid.row_id AS "olid_row_id",

                                   amo.ppsr_attribute ,olid.attribute_mapping_id, amo.sqe_display_text, amo.config_level,

                                   olid.VALUE,  olid.quantity

                            FROM quote_header qh

                            INNER JOIN quote_header tobeqh

                            ON qh.quote_id = tobeqh.quote_id

                            AND qh.version = tobeqh.expedio_parent_version

                            LEFT OUTER JOIN quote_site qs

                            ON qh.quote_header_id = qs.quote_header_id

                            AND qs.active = pkg_constants.con_activeflag_yes

                            INNER JOIN site so ON qs.site_id = so.site_id

                            AND so.site_id IN (

                               SELECT *

                                 FROM TABLE

                                         (CAST

                                             (pkg_common.fn_splitdata (in_site_list,

                                                                       '~') AS varchar2_ntt

                                             )

                                         ) nt)

                            LEFT OUTER JOIN order_header oh

                            ON qh.quote_header_id = oh.quote_header_id

                            INNER JOIN order_line_item olm

                            ON olm.order_header_id = oh.order_header_id

                            AND so.site_id = olm.site_id

                            AND olm.active = pkg_constants.con_activeflag_yes

                            AND UPPER(olm.product_name) IN (

                            SELECT DISTINCT UPPER(pmd.product_name)

                                    FROM product_master pm,

                                         product_master_details pmd

                                    WHERE pm.parent_group_id =

                                                             pmd.parent_group_id

                                     AND UPPER(pm.product_name) = UPPER(in_productname)

                                     AND active =

                                                pkg_constants.con_activeflag_yes)

                            INNER JOIN product_master_details pmd

                            ON UPPER(olm.product_name) = UPPER(pmd.product_name)

                            INNER JOIN order_line_item_detail olid

                            ON olid.order_line_item_id = olm.order_line_item_id

                            AND olid.active = pkg_constants.con_activeflag_yes

                            LEFT OUTER JOIN attribute_mapping amo

                            ON olid.attribute_mapping_id = amo.attribute_mapping_id

                            WHERE tobeqh.version = in_qhversion

                            AND qh.quote_id=in_quoteid

                        ) pvs

                        ON pvs.quote_id = qho.quote_id

                        AND nvl(pvs.site_id,-1) = nvl(oli.site_id,-1)

                        AND pvs.product_id= oli.product_id

                        AND pvs.fallback_type = oli.fallback_type

                        AND nvl(pvs."olm_row_id",-1) = nvl(oli.row_id, -1)

                        AND nvl(pvs."olid_row_id",-1) = nvl(olid.row_id, -1)

                        AND pvs.attribute_mapping_id = olid.attribute_mapping_id

               FULL OUTER JOIN (

                            SELECT qh.quote_id, qh.quote_header_id, olm.site_id,so.NAME , olm.product_id, olm.product_name,

                                   pmd.child_scode, olm.fallback_type, olm.row_id AS "olm_row_id",olid.row_id AS "olid_row_id",

                                   amo.ppsr_attribute ,olid.attribute_mapping_id, amo.sqe_display_text, amo.config_level,

                                   olid.VALUE,  olid.quantity, olid.action_code  AS "ATTR_ACTION_CODE", olm.action_code AS "LINEITEM_ACTION_CODE", olm.classic_element_id AS "LINEITEM_CLASSIC_ID", olid.classic_element_id AS "ATTR_CLASSIC_ID"

                            FROM quote_header qh

                            LEFT OUTER JOIN quote_site qs

                            ON qh.quote_header_id = qs.quote_header_id

                            AND qs.active = pkg_constants.con_activeflag_yes

                            INNER JOIN site so ON qs.site_id = so.site_id

                            AND so.site_id IN (

                               SELECT *

                                 FROM TABLE

                                         (CAST

                                             (pkg_common.fn_splitdata (in_site_list,

                                                                       '~') AS varchar2_ntt

                                             )

                                         ) nt)

                            LEFT OUTER JOIN order_header oh

                            ON qh.quote_header_id = oh.quote_header_id

                            INNER JOIN order_line_item_as_is olm

                            ON olm.quote_header_id = oh.quote_header_id

                            AND so.site_id = olm.site_id

                            AND olm.active = pkg_constants.con_activeflag_yes

                            AND UPPER(olm.product_name) IN (

                            SELECT DISTINCT UPPER(pmd.product_name)

                                    FROM product_master pm,

                                         product_master_details pmd

                                    WHERE pm.parent_group_id =

                                                             pmd.parent_group_id

                                     AND UPPER(pm.product_name) = UPPER(in_productname)

                                     AND active =

                                                pkg_constants.con_activeflag_yes)

                            INNER JOIN product_master_details pmd

                            ON UPPER(olm.product_name) = UPPER(pmd.product_name)

                            INNER JOIN order_line_item_detail_as_is olid

                            ON olid.order_line_item_id = olm.order_line_item_id

                            AND olid.active = pkg_constants.con_activeflag_yes

                            LEFT OUTER JOIN attribute_mapping amo

                            ON olid.attribute_mapping_id = amo.attribute_mapping_id

                            WHERE qh.quote_header_id=in_quoteheaderid

                        ) asis

                        ON asis.quote_header_id = qho.quote_header_id

                        AND nvl(asis.site_id,-1) = nvl(oli.site_id,-1)

                        AND UPPER(asis.product_name) = UPPER(oli.product_name)

                        AND asis.fallback_type = oli.fallback_type

                        AND nvl(asis."olm_row_id",0) = nvl(oli.row_id, 0)

                        AND nvl(asis."olid_row_id",0) = nvl(olid.row_id, 0)

                        AND asis.attribute_mapping_id = olid.attribute_mapping_id

         UNION ALL

--for product selection attributes

          SELECT  COALESCE(q.quote_id,asis.quote_id,pvs.quote_id) quote_id,

            COALESCE(qh.quote_header_id,asis.quote_header_id,pvs.quote_header_id)quote_header_id,

            NVL(site_id,0) site_id, '' AS site_name,

            COALESCE(lm.product_id, asis.product_id,pvs.product_id)product_id,

            COALESCE(lm.product_name, asis.product_name,pvs.product_name)product_name,

            COALESCE(pmd.child_scode, asis.child_scode,pvs.child_scode)child_scode,--lm.scode,

            COALESCE(lm.fallback_type, asis.fallback_type, pvs.fallback_type)fallback_type,

            COALESCE(lm.part_type,asis.part_type,pvs.part_type)part_type,

            DECODE(COALESCE(ld.row_id,asis."ld_row_id",pvs."ld_row_id"),0,NULL,

COALESCE(ld.row_id,asis."ld_row_id",pvs."ld_row_id"))row_id,

            COALESCE(am.ppsr_attribute,asis.ppsr_attribute,pvs.ppsr_attribute) attribute_name,

            COALESCE(am.sqe_display_text,asis.sqe_display_text,pvs.sqe_display_text)sqe_display_text,

            COALESCE(am.config_level,asis.config_level,pvs.config_level)config_level,

            ld.VALUE AS "ATTRIBUTE_VALUE",

            asis.value AS "AS_IS_VALUE",

            pvs.value AS "PREVIOUS_VALUE",

        lm.action_code AS "TOBE_LINEITEM_ACTION_CODE", asis."LINEITEM_ACTION_CODE" AS "ASIS_LINEITEM_ACTION_CODE",

            ld.action_code AS "TO_BE_ACTION_CODE",

            asis."ATTR_ACTION_CODE" AS "AS_IS_ACTION_CODE",

        asis."LINEITEM_CLASSIC_ID", asis."ATTR_CLASSIC_ID",

            NVL(COALESCE(ld.quantity,asis.quantity,pvs.quantity), 1) AS "LINE_ITEM_QUANTITY"

            FROM quote q LEFT OUTER JOIN quote_header qh

                  ON q.quote_id = qh.quote_id

                  AND qh.quote_header_id = in_quoteheaderid

                  AND VERSION = in_qhversion

                  INNER JOIN line_item lm

                  ON lm.quote_header_id = qh.quote_header_id

                  AND site_id is null

                  AND lm.active = pkg_constants.con_activeflag_yes

                AND UPPER(lm.product_name) IN (

                       SELECT DISTINCT UPPER(pmd.product_name)

                                  FROM product_master pm,

                                       product_master_details pmd

                                 WHERE pm.parent_group_id =

                                                           pmd.parent_group_id

                                   AND pm.product_name = in_productname

                                   AND active =

                                              pkg_constants.con_activeflag_yes)

                  INNER JOIN product_master_details pmd

                  ON DECODE (UPPER(lm.product_name),

                             'BT CPE', DECODE (part_type,

                                               'Bundle', UPPER(lm.product_name),

                                               UPPER(part_type)

                                              ),

                             UPPER(lm.product_name)

                            ) = UPPER(pmd.product_name)              --Added by Mahim

                  INNER JOIN line_item_detail ld

                  ON lm.line_item_id = ld.line_item_id

                  AND ld.active = pkg_constants.con_activeflag_yes

                  LEFT OUTER JOIN attribute_mapping am

                  ON ld.attribute_mapping_id = am.attribute_mapping_id

                  AND ((am.config_level = 'Product Selection' AND am.attribute_mapping_id NOT IN(401, 402, 403, 404))

                    --These attributes we are getting already in upper query with site_id so no need these 2 attr

                   OR am.config_level = 'Configuration - Quote Header')

                   -- added by arpitha for R7 req start

                   FULL OUTER JOIN (

                            SELECT qh.quote_id,qh.quote_header_id,lm.site_id, lm.product_id,lm.product_name,pmd.child_scode,

                                   lm.fallback_type, lm.part_type, lm.row_id AS "lm_row_id", ld.row_id AS "ld_row_id", ld.attribute_mapping_Id,

                                   am.ppsr_attribute,am.sqe_display_text,am.config_level, ld.Value,ld.quantity

                            FROM quote_header qh

                            INNER JOIN quote_header tobeqh

                            ON qh.quote_id = tobeqh.quote_id

                            AND qh.version = tobeqh.expedio_parent_version

                            INNER JOIN line_item lm

                            ON lm.quote_header_id = qh.quote_header_id

                            AND site_id is null

                            AND lm.active = pkg_constants.con_activeflag_yes

                            AND UPPER(lm.product_name) IN (

                                 SELECT DISTINCT UPPER(pmd.product_name)

                                            FROM product_master pm,

                                                 product_master_details pmd

                                           WHERE pm.parent_group_id =

                                                                     pmd.parent_group_id

                                             AND pm.product_name = in_productname

                                             AND active =

                                                        pkg_constants.con_activeflag_yes)

                            INNER JOIN product_master_details pmd

                            ON DECODE (UPPER(lm.product_name),

                                       'BT CPE', DECODE (part_type,

                                                         'Bundle', UPPER(lm.product_name),

                                                         UPPER(part_type)

                                                        ),

                                       UPPER(lm.product_name)

                                      ) = UPPER(pmd.product_name)

                            INNER JOIN line_item_detail ld

                            ON ld.line_item_id = lm.line_item_id

                            AND ld.active = pkg_constants.con_activeflag_yes

                            INNER JOIN attribute_mapping am

                            ON am.attribute_mapping_id = ld.attribute_mapping_id

                            AND ((am.config_level = 'Product Selection' AND am.attribute_mapping_id NOT IN(401, 402, 403, 404))

                            --These attributes we are getting already in upper query with site_id so no need these 2 attr

                            OR am.config_level = 'Configuration - Quote Header')

                            WHERE tobeqh.version = in_qhversion

                            AND qh.quote_id=in_quoteid

                        ) pvs

                        ON pvs.quote_id = qh.quote_id

                        AND pvs.product_id= lm.product_id

                        AND pvs.fallback_type = lm.fallback_type

                        AND nvl(pvs."lm_row_id",-1) = nvl(lm.row_id, -1)

                        AND nvl(pvs."ld_row_id",-1) = nvl(ld.row_id, -1)

                        AND nvl(pvs.part_type,-1) = nvl(lm.part_type,-1)

                        AND pvs.attribute_mapping_id = ld.attribute_mapping_id

                 FULL OUTER JOIN (

                            SELECT qh.quote_id,qh.quote_header_id,lm.site_id, lm.product_id,lm.product_name,pmd.child_scode,

                                   lm.fallback_type, lm.part_type, lm.row_id AS "lm_row_id", ld.row_id AS "ld_row_id", ld.attribute_mapping_Id,

                                   am.ppsr_attribute,am.sqe_display_text,am.config_level, ld.Value,ld.quantity, ld.action_code AS "ATTR_ACTION_CODE", lm.action_code AS "LINEITEM_ACTION_CODE",

                lm.classic_element_id AS "LINEITEM_CLASSIC_ID", ld.classic_element_id AS "ATTR_CLASSIC_ID"

                            FROM quote_header qh

                            INNER JOIN quote_line_item_as_is lm

                            ON lm.quote_header_id = qh.quote_header_id

                            AND lm.site_id is null

                            AND lm.active = pkg_constants.con_activeflag_yes

                            AND UPPER(lm.product_name) IN (

                                 SELECT DISTINCT UPPER(pmd.product_name)

                                            FROM product_master pm,

                                                 product_master_details pmd

                                           WHERE pm.parent_group_id =

                                                                     pmd.parent_group_id

                                             AND pm.product_name = in_productname

                                             AND active =

                                                        pkg_constants.con_activeflag_yes)

                            INNER JOIN product_master_details pmd

                            ON DECODE (UPPER(lm.product_name),

                                       'BT CPE', DECODE (part_type,

                                                         'Bundle', UPPER(lm.product_name),

                                                         UPPER(part_type)

                                                        ),

                                       UPPER(lm.product_name)

                                      ) = UPPER(pmd.product_name)

                            INNER JOIN quote_line_item_detail_as_is ld

                            ON ld.line_item_id = lm.line_item_id

                            AND ld.active = pkg_constants.con_activeflag_yes

                            INNER JOIN attribute_mapping am

                            ON am.attribute_mapping_id = ld.attribute_mapping_id

                            AND ((am.config_level = 'Product Selection' AND am.attribute_mapping_id NOT IN(401, 402, 403, 404))

                             --These attributes we are getting already in upper query with site_id so no need these 2 attr

                            OR am.config_level = 'Configuration - Quote Header')

                            WHERE qh.quote_header_id=in_quoteheaderid

                        ) asis

                        ON asis.quote_header_id = qh.quote_header_id

                        AND UPPER(asis.product_name) = UPPER(lm.product_name)

                        AND asis.fallback_type = lm.fallback_type

                        AND nvl(asis."lm_row_id",0) = nvl(lm.row_id, 0)

                        AND nvl(asis."ld_row_id",0) = nvl(ld.row_id, 0)

                        AND nvl(asis.part_type,-1) = nvl(lm.part_type,-1)

                        AND asis.attribute_mapping_id = ld.attribute_mapping_id

         UNION ALL

         SELECT   quote_id, quote_header_id, site_id, site_name, product_id,

                  product_name, child_scode, fallback_type, part_type, row_id,

                  attribute_name, sqe_display_text, config_level,

                  attribute_value, null AS "AS_IS_VALUE", null AS "PREVIOUS_VALUE",

          "TOBE_LINEITEM_ACTION_CODE", "ASIS_LINEITEM_ACTION_CODE",

          null AS "TO_BE_ACTION_CODE",null AS "AS_IS_ACTION_CODE",

          null AS "LINEITEM_CLASSIC_ID", null AS "ATTR_CLASSIC_ID",line_item_quantity

             FROM (SELECT DISTINCT q.quote_id, qh.quote_header_id, s.site_id,

                                   s.NAME AS site_name, pmd.product_id,

                                   pmd.product_name, pmd.child_scode,

                                   'Primary' AS fallback_type,

                                   NULL AS part_type, NULL AS row_id,

                                   DECODE

                                      (pivot.rno,

                                       '1', 'IVS MIGRATION FLAG',

                                       '2', 'MIGRATION TEAM NAME',

                                       '3', 'IVS ENCORE PHASE 2 GATEWAY',

                                       --'4', 'LINE OF SIGHT BILLING',

                                       '4', 'EQUIP REACH UK VPN ID: FTIPNNNNNNNNN',

                                       '5', 'REACHINREACHOUTFLAG',

                       '6', 'PLACE ACCESS PRICE REVISION ORDER',

                       '7', 'TPEIDPORT'

                                      ) attribute_name,

                                   NULL AS sqe_display_text,

                                   DECODE(pivot.rno,4,(DECODE(s.main_site_flag,'Y','Configuration - Quote Header',NULL)),NULL) AS config_level,

                                   DECODE

                                      (pivot.rno,

             /* R16 release changes on 14-Jul-2011
                                      '1', DECODE (sit1.ivs_migration_order,
                                                    1, 'Yes',
                                                    0, 'No'
                                                   ),*/
                                       '1', sit1.ivs_migration_order, -- R16 release changes on 14-Jul-2011

                                       '2', sit1.ivs_migration_team,

                                       '3', DECODE (sit1.ivs_phase2gateway,

                                                    1, 'Yes',

                                                    0, 'No'

                                                   ),

                                       --'4', s.line_of_site_billing,

                                       '4', oh.ftip_number,

                                       '5', oh.is_order_ipclearreachoutsite,

                       '6', s.PLACE_ACC_PRICE_REV_ORDER,

                       '7', qh.CAPCHECK_REFNO

                                      ) attribute_value,

                                   1 "LINE_ITEM_QUANTITY",

                   lm.action_code AS "TOBE_LINEITEM_ACTION_CODE", qlm.action_code AS "ASIS_LINEITEM_ACTION_CODE"

                              FROM quote q LEFT OUTER JOIN quote_header qh

                                   ON q.quote_id = qh.quote_id

                                   LEFT OUTER JOIN quote_site qs

                                   ON qh.quote_header_id = qs.quote_header_id

                                   INNER JOIN site s ON qs.site_id = s.site_id

                                   LEFT OUTER JOIN site_infonet sit1

                                   ON DECODE (sit1.site_type,

                                              'CLASSIC', s.classic_site_id,

                                              'NON CLASSIC', s.site_id

                                             ) = sit1.site_id

                                   LEFT OUTER JOIN product_master_details pmd

                                   ON UPPER (pmd.product_name) = UPPER(in_productname)

                   LEFT OUTER JOIN line_item lm

                                   ON lm.quote_header_id = qh.quote_header_id

                                   AND lm.site_id = qs.site_id

                                   AND UPPER (lm.product_name) = UPPER('BT IVPN2 GLOBAL')
                                   AND upper(lm.fallback_type) = 'PRIMARY'
                   AND lm.active = pkg_constants.con_activeflag_yes

                   LEFT OUTER JOIN quote_line_item_as_is qlm

                                   ON qlm.quote_header_id = qh.quote_header_id

                                   AND qlm.site_id = qs.site_id

                                   AND UPPER (qlm.product_name) = UPPER('BT IVPN2 GLOBAL')
                                   AND upper(qlm.fallback_type) = 'PRIMARY'

                   AND qlm.active = pkg_constants.con_activeflag_yes

                                   LEFT OUTER JOIN order_header oh

                                   ON qh.quote_header_id = oh.quote_header_id



                                   CROSS JOIN

                                   (SELECT     LEVEL rno

                                          FROM DUAL

                                    CONNECT BY LEVEL <= 7) pivot

                             WHERE q.quote_id = in_quoteid

                               AND qh.quote_header_id = in_quoteheaderid

                               AND VERSION = in_qhversion

                               AND (   s.site_id IN (

                                              SELECT *

                                                  FROM TABLE

                                                   (CAST

                                                   (pkg_common.fn_splitdata (in_site_list,

                                                               '~'

                                                    ) AS varchar2_ntt

                                     )

                                   ) nt)

                                   )



                               AND (qs.active =

                                              pkg_constants.con_activeflag_yes

                                   ))

            WHERE attribute_value IS NOT NULL

         UNION ALL

     SELECT DISTINCT quote_id, quote_header_id, site_id, site_name,

                         product_id, product_name, child_scode, fallback_type,

                         part_type, row_id, attribute_name, sqe_display_text,

                         config_level, attribute_value, as_is_value,previous_value,

             "TOBE_LINEITEM_ACTION_CODE", "ASIS_LINEITEM_ACTION_CODE",

            "TO_BE_ACTION_CODE", "AS_IS_ACTION_CODE",

            null AS "LINEITEM_CLASSIC_ID", null AS "ATTR_CLASSIC_ID", line_item_quantity

                    FROM (SELECT coalesce(q.quote_id,asis.quote_id,pvs.quote_id)quote_id,

                        coalesce(qh.quote_header_id,asis.quote_header_id,pvs.quote_header_id)quote_header_id,

                 coalesce(s.site_id,asis.site_id,pvs.site_id)site_id,

                                 coalesce(s.name,asis.name,pvs.name)site_name,

                 coalesce(pmd.product_id,asis.product_id,pvs.product_id)product_id,

                                 coalesce(pmd.product_name,asis.product_name,pvs.product_name)product_name,

                 coalesce(pmd.child_scode,asis.child_scode,pvs.child_scode)child_scode,

                                 DECODE( coalesce(aq.leg_id,asis.leg_id,pvs.leg_id),

                                         'Leg1', 'Primary',

                                         'Leg2', 'Secondary',

                                         'Primary'

                                        ) AS fallback_type,

                                 NULL AS part_type, NULL AS row_id,

                                 DECODE

                                    (pivot.rno,

                                     1, 'QUOTE REFERENCE',

                                     --2, 'ACCESS SUPPLIERS NAME (TELCO NAME)',

                                     --3,   'QUOTE REFERENCE',

                                     3, 'ACCESS SUPPLIER CIRCUIT ID',

                                     4, 'ACCESS SUPPLIER QUOTE REFERENCE',

                                     5, 'ACCESS BEARER CIRCUIT NTE OPTICAL/ELECTRICAL INTERFACE TYPE (CUSTOMER END)',

                                     6, 'ACCESS BEARER CIRCUIT NTE FRAMING/STRUCTURE (CUSTOMER END)',

                                     7, 'ACCESS BEARER CIRCUIT NTE PHYSICAL CONNECTOR (CUSTOMER END)',

                                     8, 'APOP NODE ADDRESS',

                                     9, 'GPOP NODE ADDRESS',

                                     10, 'HVPN ACCESS TECHNOLOGY',

                                     11, 'COPPER DETAILS',

                                     12, 'OFFER NAME (SUPPLIER PRODUCT NAME)',

                                     13, 'ACCESS SUPPLIERS PRODUCT NAME',

                                     14, 'APOP NODE ID',

                                     15, 'GPOP NODE ID',

                                     16, 'APOP REQUIRED',

                                     17, 'PARTNER NAME',

                                     18, 'CUSTOMER BROADBAND DOWNSTREAM SPEED',/* changed from CUSTOMER BROADBAND SPEED to CUSTOMER BROADBAND DOWNSTREAM SPEED for defect 110489 */

                                     19, 'ACCESS TARIFF ZONE',

                     --20, 'NETWORK TYPE',

                     --21,'SERVICE VARIANT', --added by nagendra on 17 Mar 2011
                     22, 'NO OF LLU MPF PAIR',
                     23, 'PHASE TYPE'
                                    ) attribute_name,

                                 NULL AS sqe_display_text,

                                 NULL AS config_level,

                                 DECODE

                                    (pivot.rno,

                                     1, aq.access_qref,

                                    -- 2, aq.supplier,

                                     3, aq.aggregator_quote_line_id,

                                     4, aq.aggregator_quote_line_id,

                                     5, aq.interface_type,

                                     6, aq.framing_details,

                                     7, aq.connector,

                                     8, aq.apop_node,

                                     9, aq.gpop_node,

                                     10, DECODE(aq.hvpn_access_technology,'N/A',NULL,aq.hvpn_access_technology),

                                     11, aq.copper_details,

                                     12, aq.copper_service_id,

                                     13, aq.supplier_product_name,

                                     14, aq.APOP_CODE,--replace apop_id with apop_code for the Defect Id: 80323

                                     15, aq.GPOP_CODE,

                                     16, DECODE(UPPER(aq.apop_flag), 'YES', 'Yes', 'No'),

                                     17, aq.partner_name,

                                     18, CASE WHEN UPPER(aq.access_technology) LIKE 'HVPN%' THEN aq.access_speed ELSE NULL END,

                                     19, aq.tariff_zone_name,

                     --20, aq.network_type,

                     --21, aq.service_variant, ----added by nagendra on 17 Mar 2011
                     22, aq.copper_pair,
                     23, aq.ethernet_phase_attribute

                                    ) attribute_value,

                                    DECODE

                                    (pivot.rno,

                                     1, pvs.access_qref,

                                    -- 2, pvs.supplier,

                                     3, pvs.aggregator_quote_line_id,

                                     4, pvs.aggregator_quote_line_id,

                                     5, pvs.interface_type,

                                     6, pvs.framing_details,

                                     7, pvs.connector,

                                     8, pvs.apop_node,

                                     9, pvs.gpop_node,

                                     10, DECODE(pvs.hvpn_access_technology,'N/A',NULL,pvs.hvpn_access_technology),

                                     11, pvs.copper_details,

                                     12, pvs.copper_service_id,

                                     13, pvs.supplier_product_name,

                                     14, pvs.APOP_CODE,--replace apop_id with apop_code for the Defect Id: 80323

                                     15, pvs.GPOP_CODE,

                                     16, pvs.apop_flag,

                                     17, pvs.partner_name,

                                     18, CASE WHEN UPPER(pvs.access_technology) LIKE 'HVPN%' THEN pvs.access_speed ELSE NULL END,

                                     19, pvs.tariff_zone_name,

                   --  20, pvs.network_type,

                    -- 21, pvs.service_variant, ----added by nagendra on 17 Mar 2011
                     22, pvs.copper_pair,
                     23, pvs.ethernet_phase_attribute

                                    ) previous_value,

                                      DECODE

                                    (pivot.rno,

                                     1, asis.access_qref,

                                    -- 2, asis.supplier,

                                     3, asis.aggregator_quote_line_id,

                                     4, asis.aggregator_quote_line_id,

                                     5, asis.interface_type,

                                     6, asis.framing_details,

                                     7, asis.connector,

                                     8, asis.apop_node,

                                     9, asis.gpop_node,

                                     10, DECODE(asis.hvpn_access_technology,'N/A',NULL,asis.hvpn_access_technology),

                                     11, asis.copper_details,

                                     12, asis.copper_service_id,

                                     13, asis.supplier_product_name,

                                     --14, NULL,--replace apop_id with apop_code for the Defect Id: 80323

                                     --15, NULL,

                                     14, asis.APOP_CODE, --updated on 6 MAY 2011 by Nagendra for the Defect id:104856

                                     15, asis.GPOP_CODE, --updated on 6 May 2011 by Nagendra for the Defect id:104856

                                     16, asis.apop_flag,

                                     17, asis.partner_name,

                                     18, CASE WHEN UPPER(asis.access_technology) LIKE 'HVPN%' THEN asis.access_speed ELSE NULL END,

                                     19, asis.tariff_zone_name,

                    -- 20, asis.network_type,

                    -- 21, asis.service_variant, ----added by nagendra on 17 Mar 2011
                     22, asis.copper_pair,
                     23, asis.ethernet_phase_attribute

                                    ) as_is_value,

                                 1 "LINE_ITEM_QUANTITY",

                                 aq.action_code AS "TO_BE_ACTION_CODE", asis."AS_IS_ACTION_CODE" AS "AS_IS_ACTION_CODE",

                                 lm.action_code AS "TOBE_LINEITEM_ACTION_CODE", asis."ASIS_LINEITEM_ACTION_CODE" AS "ASIS_LINEITEM_ACTION_CODE"

                            FROM quote q LEFT OUTER JOIN quote_header qh

                                 ON q.quote_id = qh.quote_id

                                 AND q.quote_id = in_quoteid

                                 AND qh.quote_header_id = in_quoteheaderid

                                 AND VERSION = in_qhversion

                                 LEFT OUTER JOIN quote_site qs

                                 ON qh.quote_header_id = qs.quote_header_id

                                 AND qs.active = pkg_constants.con_activeflag_yes

                                 INNER JOIN site s ON qs.site_id = s.site_id

                                 AND s.site_id IN (

                                    SELECT *

                                      FROM TABLE

                                              (CAST

                                                  (pkg_common.fn_splitdata

                                                                (in_site_list,

                                                                 '~'

                                                                ) AS varchar2_ntt

                                                  )

                                              ) nt)

                                 INNER JOIN line_item lm

                                 ON s.site_id = lm.site_id

                               AND lm.quote_header_id = in_quoteheaderid

                               AND lm.active = pkg_constants.con_activeflag_yes

                               AND UPPER (lm.product_name) = UPPER ('BT iVPN2 Access')

                                 LEFT OUTER JOIN price_line_item_detail pd

                                 ON lm.line_item_id = pd.line_item_id

                                 AND pd.active = pkg_constants.con_activeflag_yes

                                 INNER JOIN access_qref aq

                                 ON aq.quote_site_id = qs.quote_site_id

                               AND (pd.external_qref) = UPPER (aq.access_qref)

                               AND aq.active = pkg_constants.con_activeflag_yes

                                 /*LEFT OUTER JOIN order_header oh

                                 ON oh.quote_header_id = qh.quote_header_id

                                 LEFT OUTER JOIN order_site_detail osd

                                 ON osd.site_id = s.site_id

                               AND osd.order_header_id = oh.order_header_id*/

                                 LEFT OUTER JOIN product_master_details pmd

                                 ON UPPER (pmd.product_name) = UPPER ('BT iVPN2 Access')

                                 FULL OUTER JOIN (

                                            SELECT qh.quote_id,qh.quote_header_id, qs.site_id, s.name,

                                                   pmd.product_id, pmd.product_name, pmd.child_scode, aq.*

                                            FROM quote_header qh

                                            INNER JOIN quote_header tobeqh

                                            ON qh.quote_id = tobeqh.quote_id

                                            AND qh.version = tobeqh.expedio_parent_version

                                            LEFT OUTER JOIN quote_site qs

                                            ON qh.quote_header_id = qs.quote_header_id

                                            AND qs.active = pkg_constants.con_activeflag_yes

                                            INNER JOIN site s ON qs.site_id = s.site_id

                                            AND s.site_id IN (

                                                SELECT *

                                                  FROM TABLE

                                                          (CAST

                                                              (pkg_common.fn_splitdata

                                                                            (in_site_list,

                                                                             '~'

                                                                            ) AS varchar2_ntt

                                                              )

                                                          ) nt)

                                            INNER JOIN line_item lm

                                            ON qs.site_id = lm.site_id

                                            AND lm.quote_header_id = qh.quote_header_id

                                             AND lm.active = pkg_constants.con_activeflag_yes

                                            LEFT OUTER JOIN price_line_item_detail pd

                                            ON lm.line_item_id = pd.line_item_id

                                            AND pd.active = pkg_constants.con_activeflag_yes

                                            INNER JOIN access_qref aq

                                            ON aq.quote_site_id = qs.quote_site_id

                                            AND (pd.external_qref) = UPPER (aq.access_qref)

                                            AND aq.active = pkg_constants.con_activeflag_yes

                                             LEFT OUTER JOIN product_master_details pmd

                                             ON UPPER (pmd.product_name) = UPPER ('BT iVPN2 Access')

                                            WHERE tobeqh.version = in_qhversion

                                            AND qh.quote_id=in_quoteid

                                            AND lm.active='Y' AND pd.active='Y'

                                  )pvs

                                  ON pvs.quote_id = qh.quote_id

                                  AND pvs.site_id = qs.site_id

                                 /* AND pvs.leg_id = aq.leg_id commented by ratnesh for fix defect 103298  */

                                 FULL OUTER JOIN (

                                            SELECT qh.quote_id,qh.quote_header_id, qs.site_id, s.name,

                                                   pmd.product_id, pmd.product_name, pmd.child_scode, aq.*, aq.action_code as "AS_IS_ACTION_CODE",

                                                   lm.action_code AS "ASIS_LINEITEM_ACTION_CODE"

                                            FROM quote_header qh

                                            LEFT OUTER JOIN quote_site qs

                                            ON qh.quote_header_id = qs.quote_header_id

                                            AND qs.active = pkg_constants.con_activeflag_yes

                                            INNER JOIN site s ON qs.site_id = s.site_id

                                            AND s.site_id IN (

                                              SELECT *

                                                FROM TABLE

                                                        (CAST

                                                            (pkg_common.fn_splitdata

                                                                          (in_site_list,

                                                                           '~'

                                                                          ) AS varchar2_ntt

                                                            )

                                                        ) nt)

                                            INNER JOIN quote_line_item_as_is lm

                                            ON qs.site_id = lm.site_id

                                            AND lm.quote_header_id = qh.quote_header_id

                                             AND lm.active = pkg_constants.con_activeflag_yes

                                             AND UPPER (lm.product_name) = UPPER ('BT iVPN2 Access')

                                            LEFT OUTER JOIN price_line_item_detail_as_is pd

                                            ON lm.line_item_id = pd.line_item_id

                                            AND pd.active = pkg_constants.con_activeflag_yes

                                            INNER JOIN access_qref_as_is aq

                                            ON aq.quote_site_id = qs.quote_site_id

                                            AND (pd.external_qref) = UPPER (aq.access_qref)

                                            AND aq.active = pkg_constants.con_activeflag_yes

                                             LEFT OUTER JOIN product_master_details pmd

                                             ON UPPER (pmd.product_name) = UPPER ('BT iVPN2 Access')

                                           WHERE qh.quote_header_id=in_quoteheaderid

                                            AND lm.active='Y' AND pd.active='Y'

                                  )asis

                                   ON asis.quote_header_id = qh.quote_header_id

                                  AND asis.site_id = qs.site_id

                                  AND asis.leg_id = aq.leg_id

                                  CROSS JOIN

                                 (SELECT     LEVEL rno

                                        FROM DUAL

                                  CONNECT BY LEVEL <= 23) pivot)

                   WHERE (attribute_value IS NOT NULL AND UPPER (attribute_value) <> 'NULL')

                     or (Previous_value is NOT NULL AND UPPER (Previous_value) <> 'NULL')

                     or (as_is_value is NOT NULL AND UPPER (as_is_value) <> 'NULL')

         UNION ALL

         SELECT   quote_id, quote_header_id, site_id, site_name, product_id,

                  product_name, child_scode, fallback_type, part_type, row_id,

                  attribute_name, sqe_display_text, config_level,

                  attribute_value, null AS "AS_IS_VALUE", null AS "PREVIOUS_VALUE",

          "TOBE_LINEITEM_ACTION_CODE", "ASIS_LINEITEM_ACTION_CODE",

          null AS "TO_BE_ACTION_CODE",null AS "AS_IS_ACTION_CODE",

          null AS "LINEITEM_CLASSIC_ID", null AS "ATTR_CLASSIC_ID",line_item_quantity

             FROM (SELECT DISTINCT q.quote_id, qh.quote_header_id, s.site_id,

                                   s.NAME AS site_name, pmd.product_id,

                                   pmd.product_name, pmd.child_scode,

                                   DECODE (pivot.rno,

                                           '1', 'Primary',

                                           '2', 'Secondary'

                                          ) AS fallback_type,

                                   NULL AS part_type, NULL AS row_id,

                                   DECODE

                                      (pivot.rno,

                                       '1', 'PARTNER BID REFERENCE',

                                       '2', 'PARTNER BID REFERENCE'

                                      ) attribute_name,

                                   NULL AS sqe_display_text,

                                   NULL AS config_level,

                                   DECODE

                                         (pivot.rno,

                                          '1', pri_ssp_bid_ref_no,

                                          '2', sec_ssp_bid_ref_no

                                         ) attribute_value,

                                   1 "LINE_ITEM_QUANTITY",

                   lm.action_code AS "TOBE_LINEITEM_ACTION_CODE", qlm.action_code AS "ASIS_LINEITEM_ACTION_CODE"

                              FROM quote q LEFT OUTER JOIN quote_header qh

                                   ON q.quote_id = qh.quote_id

                                   LEFT OUTER JOIN quote_site qs

                                   ON qh.quote_header_id = qs.quote_header_id

                                   INNER JOIN site s ON qs.site_id = s.site_id

                                   INNER JOIN cpe_qref cq

                                   ON cq.quote_site_id = qs.quote_site_id

                                   LEFT OUTER JOIN product_master_details pmd

                                   ON UPPER (pmd.product_name) = 'BT CPE'

                   LEFT OUTER JOIN line_item lm

                                   ON lm.quote_header_id = qh.quote_header_id

                                   AND lm.site_id = qs.site_id

                                   AND UPPER (lm.product_name) = 'BT CPE'

                   AND UPPER (lm.part_type) = 'BUNDLE'

                   AND lm.active = pkg_constants.con_activeflag_yes

                   LEFT OUTER JOIN quote_line_item_as_is qlm

                                   ON qlm.quote_header_id = qh.quote_header_id

                                   AND qlm.site_id = qs.site_id

                                   AND UPPER (qlm.product_name) = 'BT CPE'

                   AND UPPER (qlm.part_type) = 'BUNDLE'

                   AND qlm.active = pkg_constants.con_activeflag_yes

                                   CROSS JOIN

                                   (SELECT     LEVEL rno

                                          FROM DUAL

                                    CONNECT BY LEVEL <= 2) pivot

                             WHERE q.quote_id = in_quoteid

                               AND qh.quote_header_id = in_quoteheaderid

                               AND VERSION = in_qhversion

                               AND s.site_id IN (

                                      SELECT *

                                        FROM TABLE

                                                (CAST

                                                    (pkg_common.fn_splitdata

                                                                (in_site_list,

                                                                 '~'

                                                                ) AS varchar2_ntt

                                                    )

                                                ) nt)

                               AND (qs.active =

                                              pkg_constants.con_activeflag_yes

                                   ))

            WHERE attribute_value IS NOT NULL

         ORDER BY site_id,

                  fallback_type,

                  row_id,

                  part_type,

                  product_id,

                  sqe_display_text,

                  attribute_name;

            EXCEPTION
            WHEN OTHERS THEN
 -- Added by Mini on 23/11/2010 as part of exception handling
         v_sql_errm := substr(SQLERRM,1,150);
         v_sql_code := SQLCODE;
         PKG_COMMON.spi_error_log(
                                  in_quoteid,
                                  in_quoteheaderid,
                                  NULL,
                                  NULL,
                                  'PKG_BOM_GEN',
                                  'SPS_IVPN2_ATTR_REQUEST',
                                  v_sql_code,
                                  v_sql_errm
                                 );

   END;

  PROCEDURE sps_ivpn2_pricing (
      in_quoteid          IN       quote.quote_id%TYPE,
      in_quoteheaderid    IN       quote_header.quote_header_id%TYPE,
      in_qhversion        IN       quote_header.VERSION%TYPE,
      in_site_list        IN       VARCHAR2,
                               -- added for fetch info based on selected sites
      -- in_productid        IN       line_item.product_id%TYPE,
      in_productname      IN       line_item.product_name%TYPE,
      out_ivpn2_pricing   OUT      sys_refcursor
   )
   AS
   BEGIN
      OPEN out_ivpn2_pricing FOR
       SELECT   q.quote_id, qh.quote_header_id, s.site_id,
                          s.NAME AS site_name, pmd.product_id,
                          pmd.product_name, 'S0208945' AS "scode",
                          lm.fallback_type, lm.part_type,
                          NULL AS config_level, decode(eup.row_id,0,null,eup.row_id) row_id,
                          pli.ppsr_description AS "PRICE LINE DESCRIPTION",
                                               eup.charge_type AS "DOMAIN",
                          ptp.net_price AS "PTPPRICE",
                          ptp.discount AS "PTPDISCOUNT",
                          pli.ppsr_id AS "PPSR_ID",
                          pli.ppsr_description,
                          nvl2(ptp.net_price,cp.ptp_price_book_version,null) AS "PTP PRICE BOOK VERSION",
                          eup.net_price AS "EUPPRICE", eup.discount AS "EUPDISCOUNT",
                qpl.price_list_name AS "EUP PRICE BOOK VERSION",
                eup.action_code, eup.classic_element_id AS "CLASSIC_ID",
                ld.value AS "PART_NUMBER"
                     FROM quote q LEFT OUTER JOIN quote_header qh
                          ON q.quote_id = qh.quote_id
                          LEFT OUTER JOIN quote_site qs
                          ON qh.quote_header_id = qs.quote_header_id
                          INNER JOIN site s ON qs.site_id = s.site_id
              INNER JOIN order_header oh
                          ON oh.quote_header_id = qh.quote_header_id
                          INNER JOIN line_item lm
                          ON s.site_id = lm.site_id
                        AND lm.quote_header_id = in_quoteheaderid
                          INNER JOIN
                          (SELECT line_item_id,
                                  DECODE
                                      (UPPER(product_name),
                                       'BT IVPN2 CONFIGURATION', 'BT IVPN2 GLOBAL',
                                       'BT IVPN2 SLA', 'BT IVPN2 GLOBAL',
                                       product_name
                                      ) product_name
                             FROM line_item) lineitemtemp
                          ON lm.line_item_id = lineitemtemp.line_item_id
                        AND UPPER(lineitemtemp.product_name) IN (
                               SELECT DISTINCT UPPER(pmd.product_name)
                                          FROM product_master pm,
                                               product_master_details pmd
                                         WHERE pm.parent_group_id =
                                                           pmd.parent_group_id
                                           AND UPPER(pm.product_name) =
                                                                UPPER(in_productname)
                                           AND active =
                                                  pkg_constants.con_activeflag_yes)
                          INNER JOIN product_master_details pmd
                          ON UPPER(lineitemtemp.product_name) = UPPER(pmd.product_name)
                          --Added by Mahim
                          LEFT OUTER JOIN line_item_detail ld
                          ON lm.line_item_id = ld.line_item_id
                          AND ld.active = pkg_constants.con_activeflag_yes
                          AND ld.attribute_mapping_id = 310
                          LEFT OUTER JOIN quote_price_list qpl
                          ON qh.quote_header_id = qpl.quote_header_id
                          AND s.site_id = qpl.site_id
                                      AND UPPER(qpl.product_name) = UPPER(in_productname)
                          LEFT OUTER JOIN price_line_item_detail eup
                          ON lm.line_item_id = eup.line_item_id
                          AND NVL (eup.ptp_eup, 'EUP') = 'EUP'
                          LEFT OUTER JOIN price_line_item_detail ptp
                          ON lm.line_item_id = ptp.line_item_id
                          AND ptp.ptp_eup = 'PTP'
                          AND eup.ptp_eup_id = ptp.ptp_eup_id
                          AND NVL(eup.row_id,-1) = NVL(ptp.row_id,-1)
                          LEFT OUTER JOIN customer_product cp
                          ON lm.quote_header_id = cp.quote_header_id
                          AND UPPER(cp.product_name) = UPPER(in_productname)
                          LEFT OUTER JOIN price_line_item pli
                          ON eup.price_line_item_id = pli.price_line_item_id
                          LEFT OUTER JOIN BUNDLE_SELECTION bs
                          ON bs.quote_header_id = qh.quote_header_id
                    WHERE q.quote_id = in_quoteid
                      AND qh.quote_header_id = in_quoteheaderid
                      AND VERSION = in_qhversion
                      AND s.site_id IN (
                             SELECT *
                               FROM TABLE
                                       (CAST
                                           (pkg_common.fn_splitdata
                                                                (in_site_list,
                                                                 '~'
                                                                ) AS varchar2_ntt
                                           )
                                       ) nt)
                      AND ((UPPER (NVL(bs.order_type,oh.order_type)) = 'PROVIDE' AND eup.action_code IS NULL)
                          OR (UPPER(NVL(bs.order_type,oh.order_type)) = 'MODIFY' AND eup.action_code IS NOT NULL)
                          OR (UPPER(NVL(bs.order_type,oh.order_type)) = 'CEASE' AND eup.action_code IS NOT NULL))
                      AND qs.active = pkg_constants.con_activeflag_yes
                      AND lm.active = pkg_constants.con_activeflag_yes
                      AND (eup.active = pkg_constants.con_activeflag_yes OR eup.active IS NULL)
                      AND (ptp.active = pkg_constants.con_activeflag_yes OR ptp.active IS NULL)
                      AND pli.ppsr_description IS NOT NULL
                      AND '-1' =
                                 CASE
                                    WHEN pli.ppsr_description IN
                                           (
                                            ------'Monitoring Option - Proactive CE Monitoring',
                                            'NON STD SLA - ONE TIME',
                                            'NON STD SLA - MNTHLY RECURRING',
                                            'After Hours Installation'
                                           )
                                       THEN CASE
                                              WHEN (ptp.net_price != 0 OR eup.net_price != 0
                                                   )
                                                 THEN '-1'
                                           END
                                    ELSE '-1'
                                 END
                 UNION ALL
--for product selection attributes
                 SELECT DISTINCT q.quote_id, qh.quote_header_id, 0 site_id,
                                 '' AS site_name, lm.product_id,
                                 lm.product_name, 'S0208945' AS "scode",
                                 lm.fallback_type, lm.part_type,
                                 'Configuration - Quote Header' AS config_level, decode(eup.row_id,0,null,eup.row_id) row_id,
                                 pli.ppsr_description AS "PRICE LINE DESCRIPTION",
                                 eup.charge_type AS "DOMAIN",
                               ptp.net_price AS "PTPPRICE",
                          ptp.discount AS "PTPDISCOUNT",
                                   pli.ppsr_id  AS "PPSR_ID",
                            pli.ppsr_description,
                                nvl2(ptp.net_price,cp.ptp_price_book_version,null) AS "PTP PRICE BOOK VERSION",
                                                    eup.net_price AS "EUPPRICE", eup.discount AS "EUPDISCOUNT",
                qpl.price_list_name AS "EUP PRICE BOOK VERSION",
                eup.action_code, eup.classic_element_id AS "CLASSIC_ID",
                null AS "PART_NUMBER"
                            FROM quote q LEFT OUTER JOIN quote_header qh
                                 ON q.quote_id = qh.quote_id
                 INNER JOIN order_header oh
                               ON oh.quote_header_id = qh.quote_header_id
                                 INNER JOIN line_item lm
                                 ON lm.quote_header_id = qh.quote_header_id
                               AND UPPER(lm.product_name) IN (
                                      SELECT DISTINCT UPPER(pmd.product_name)
                                                 FROM product_master pm,
                                                      product_master_details pmd
                                                WHERE pm.parent_group_id =
                                                           pmd.parent_group_id
                                                  AND UPPER(pm.product_name) =
                                                                UPPER(in_productname)
                                                  AND active =
                                                         pkg_constants.con_activeflag_yes)
                                 INNER JOIN product_master_details pmd
                                 ON UPPER(lm.product_name) = UPPER(pmd.product_name)
                                 --Added by Mahim
                                 LEFT OUTER JOIN quote_price_list qpl
                                 ON qh.quote_header_id = qpl.quote_header_id
                                                 AND UPPER(qpl.product_name) = UPPER(in_productname)
                               LEFT OUTER JOIN price_line_item_detail eup
                          ON lm.line_item_id = eup.line_item_id
                          AND NVL (eup.ptp_eup, 'EUP') = 'EUP'
                          LEFT OUTER JOIN price_line_item_detail ptp
                          ON lm.line_item_id = ptp.line_item_id
                          AND ptp.ptp_eup = 'PTP'
                          AND eup.ptp_eup_id = ptp.ptp_eup_id
                          AND NVL(eup.row_id,-1) = NVL(ptp.row_id,-1)
                         LEFT OUTER JOIN BUNDLE_SELECTION bs
                          ON bs.quote_header_id = qh.quote_header_id
                          LEFT OUTER JOIN customer_product cp
                          ON lm.quote_header_id = cp.quote_header_id
                          AND UPPER(cp.product_name) = UPPER(in_productname)
                                 LEFT OUTER JOIN price_line_item pli
                                 ON eup.price_line_item_id =
                                                        pli.price_line_item_id
                           WHERE q.quote_id = in_quoteid
                             AND qh.quote_header_id = in_quoteheaderid
                             AND VERSION = in_qhversion
                             AND ((UPPER(NVL(bs.order_type,oh.order_type)) = 'PROVIDE' AND eup.action_code IS NULL)
                             OR (UPPER(NVL(bs.order_type,oh.order_type)) = 'MODIFY' AND eup.action_code IS NOT NULL)
                             OR (UPPER(NVL(bs.order_type,oh.order_type)) = 'CEASE' AND eup.action_code IS NOT NULL))
                             AND lm.active = pkg_constants.con_activeflag_yes
                             AND (eup.active = pkg_constants.con_activeflag_yes OR eup.active IS NULL)
                             AND (ptp.active = pkg_constants.con_activeflag_yes OR ptp.active IS NULL)
                             AND lm.site_id IS NULL
              UNION ALL
              SELECT   q.quote_id, qh.quote_header_id, s.site_id,
                          s.NAME AS site_name, pmd.product_id,
                          pmd.product_name, 'S0208945' AS "scode",
                          lm.fallback_type, lm.part_type,
                          NULL AS config_level, decode(eup.row_id,0,null,eup.row_id) row_id,
                          pli.ppsr_description AS "PRICE LINE DESCRIPTION",
                                               eup.charge_type AS "DOMAIN",
                          ptp.net_price AS "PTPPRICE",
                          ptp.discount AS "PTPDISCOUNT",
                          pli.ppsr_id AS "PPSR_ID",
                          pli.ppsr_description,
                          nvl2(ptp.net_price,cp.ptp_price_book_version,null) AS "PTP PRICE BOOK VERSION",
                          eup.net_price AS "EUPPRICE", eup.discount AS "EUPDISCOUNT",
                qpl.price_list_name AS "EUP PRICE BOOK VERSION",
                 eup.action_code, eup.classic_element_id AS "CLASSIC_ID",
                 null AS "PART_NUMBER"
                     FROM quote q LEFT OUTER JOIN quote_header qh
                          ON q.quote_id = qh.quote_id
                          LEFT OUTER JOIN quote_site qs
                          ON qh.quote_header_id = qs.quote_header_id
                          INNER JOIN site s ON qs.site_id = s.site_id
                          INNER JOIN quote_line_item_as_is lm
                          ON s.site_id = lm.site_id
                        AND lm.quote_header_id = in_quoteheaderid
                          INNER JOIN
                          (SELECT line_item_id,
                                  DECODE
                                      (UPPER(product_name),
                                       'BT IVPN2 CONFIGURATION', 'BT IVPN2 GLOBAL',
                                       'BT IVPN2 SLA', 'BT IVPN2 GLOBAL',
                                       product_name
                                      ) product_name
                             FROM quote_line_item_as_is) lineitemtemp
                          ON lm.line_item_id = lineitemtemp.line_item_id
                        AND UPPER(lineitemtemp.product_name) IN (
                               SELECT DISTINCT UPPER(pmd.product_name)
                                          FROM product_master pm,
                                               product_master_details pmd
                                         WHERE pm.parent_group_id =
                                                           pmd.parent_group_id
                                           AND UPPER(pm.product_name) =
                                                                UPPER(in_productname)
                                           AND active =
                                                  pkg_constants.con_activeflag_yes)
                          INNER JOIN product_master_details pmd
                          ON UPPER(lineitemtemp.product_name) = UPPER(pmd.product_name)
                          --Added by Mahim
                          LEFT OUTER JOIN quote_price_list qpl
                          ON qh.quote_header_id = qpl.quote_header_id
                          AND s.site_id = qpl.site_id
                                      AND UPPER(qpl.product_name) = UPPER(in_productname)
                          LEFT OUTER JOIN price_line_item_detail_as_is eup
                          ON lm.line_item_id = eup.line_item_id
                          AND NVL (eup.ptp_eup, 'EUP') = 'EUP'
                          LEFT OUTER JOIN price_line_item_detail_as_is ptp
                          ON lm.line_item_id = ptp.line_item_id
                          AND ptp.ptp_eup = 'PTP'
                          AND eup.ptp_eup_id = ptp.ptp_eup_id
                           AND NVL(eup.row_id,-1) = NVL(ptp.row_id,-1)
                          LEFT OUTER JOIN customer_product cp
                          ON lm.quote_header_id = cp.quote_header_id
                          AND UPPER(cp.product_name) = UPPER(in_productname)
                          LEFT OUTER JOIN price_line_item pli
                          ON eup.price_line_item_id = pli.price_line_item_id
                    WHERE q.quote_id = in_quoteid
                      AND qh.quote_header_id = in_quoteheaderid
                      AND VERSION = in_qhversion
                      AND (eup.action_code IS NOT NULL AND upper(eup.action_code) <> 'NONE')
                      AND s.site_id IN (
                             SELECT *
                               FROM TABLE
                                       (CAST
                                           (pkg_common.fn_splitdata
                                                                (in_site_list,
                                                                 '~'
                                                                ) AS varchar2_ntt
                                           )
                                       ) nt)
                      AND qs.active = pkg_constants.con_activeflag_yes
                      AND lm.active = pkg_constants.con_activeflag_yes
                      AND (eup.active = pkg_constants.con_activeflag_yes OR eup.active IS NULL)
                      AND (ptp.active = pkg_constants.con_activeflag_yes OR ptp.active IS NULL)
                      AND '-1' =
                                 CASE
                                    WHEN pli.ppsr_description IN
                                           (
                                            ------'Monitoring Option - Proactive CE Monitoring',
                                            'NON STD SLA - ONE TIME',
                                            'NON STD SLA - MNTHLY RECURRING',
                                            'After Hours Installation'
                                           )
                                       THEN CASE
                                              WHEN (ptp.net_price != 0 OR eup.net_price != 0
                                                   )
                                                 THEN '-1'
                                           END
                                    ELSE '-1'
                                 END
                 UNION ALL
--for product selection attributes
                 SELECT DISTINCT q.quote_id, qh.quote_header_id, 0 site_id,
                                 '' AS site_name, lm.product_id,
                                 lm.product_name, 'S0208945' AS "scode",
                                 lm.fallback_type, lm.part_type,
                                 'Configuration - Quote Header' AS config_level, decode(eup.row_id,0,null,eup.row_id) row_id,
                                 pli.ppsr_description AS "PRICE LINE DESCRIPTION",
                                 eup.charge_type AS "DOMAIN",
                               ptp.net_price AS "PTPPRICE",
                          ptp.discount AS "PTPDISCOUNT",
                                   pli.ppsr_id  AS "PPSR_ID",
                            pli.ppsr_description,
                                nvl2(ptp.net_price,cp.ptp_price_book_version,null) AS "PTP PRICE BOOK VERSION",
                                                    eup.net_price AS "EUPPRICE", eup.discount AS "EUPDISCOUNT",
                qpl.price_list_name AS "EUP PRICE BOOK VERSION",
                 eup.action_code, eup.classic_element_id AS "CLASSIC_ID",
                 null AS "PART_NUMBER"
                            FROM quote q LEFT OUTER JOIN quote_header qh
                                 ON q.quote_id = qh.quote_id
                                 INNER JOIN quote_line_item_as_is lm
                                 ON lm.quote_header_id = qh.quote_header_id
                               AND UPPER(lm.product_name) IN (
                                      SELECT DISTINCT UPPER(pmd.product_name)
                                                 FROM product_master pm,
                                                      product_master_details pmd
                                                WHERE pm.parent_group_id =
                                                           pmd.parent_group_id
                                                  AND UPPER(pm.product_name) =
                                                                UPPER(in_productname)
                                                  AND active =
                                                         pkg_constants.con_activeflag_yes)
                                 INNER JOIN product_master_details pmd
                                 ON UPPER(lm.product_name) = UPPER(pmd.product_name)
                                 --Added by Mahim
                                 LEFT OUTER JOIN quote_price_list qpl
                                 ON qh.quote_header_id = qpl.quote_header_id
                                                 AND UPPER(qpl.product_name) = UPPER(in_productname)
                               LEFT OUTER JOIN price_line_item_detail_as_is eup
                          ON lm.line_item_id = eup.line_item_id
                          AND NVL (eup.ptp_eup, 'EUP') = 'EUP'
                          LEFT OUTER JOIN price_line_item_detail_as_is ptp
                          ON lm.line_item_id = ptp.line_item_id
                          AND ptp.ptp_eup = 'PTP'
                          AND eup.ptp_eup_id = ptp.ptp_eup_id
                           AND NVL(eup.row_id,-1) = NVL(ptp.row_id,-1)
                          LEFT OUTER JOIN customer_product cp
                          ON lm.quote_header_id = cp.quote_header_id
                          AND UPPER(cp.product_name) = UPPER(in_productname)
                                 LEFT OUTER JOIN price_line_item pli
                                 ON eup.price_line_item_id =
                                                        pli.price_line_item_id
                           WHERE q.quote_id = in_quoteid
                             AND qh.quote_header_id = in_quoteheaderid
                             AND VERSION = in_qhversion
                             AND (eup.action_code IS NOT NULL AND upper(eup.action_code) <> 'NONE')
                             AND lm.active = pkg_constants.con_activeflag_yes
                             AND (eup.active = pkg_constants.con_activeflag_yes OR eup.active IS NULL)
                             AND (ptp.active = pkg_constants.con_activeflag_yes OR ptp.active IS NULL)
                             AND lm.site_id IS NULL
                        ORDER BY site_id,
                                 fallback_type,
                                 row_id,
                                 part_type,
                                 product_id;



        EXCEPTION
           WHEN OTHERS THEN
 -- Added by Mini on 23/11/2010 as part of exception handling
         v_sql_errm := substr(SQLERRM,1,150);
         v_sql_code := SQLCODE;
         PKG_COMMON.spi_error_log(
                                  in_quoteid,
                                  in_quoteheaderid,
                                  NULL,
                                  NULL,
                                  'PKG_BOM_GEN',
                                  'SPS_IVPN2_PRICING',
                                  v_sql_code,
                                  v_sql_errm
                                 );
   END sps_ivpn2_pricing;

-------iVPN Product - Pricing part Start

   PROCEDURE sps_billdetailsinfo (
      in_quoteid         IN       quote.quote_id%TYPE,
      in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
      in_qhversion       IN       quote_header.VERSION%TYPE,
      out_core           OUT      sys_refcursor,
      out_access         OUT      sys_refcursor,
      out_cpe            OUT      sys_refcursor,
      out_port           OUT      sys_refcursor,
      out_servicewrap    OUT      sys_refcursor
   )
   AS
   BEGIN
      OPEN out_core FOR
         SELECT DISTINCT brs.site_id, NULL "TPEIDCore", NULL "TPEURLCore"
                    FROM quote q LEFT OUTER JOIN quote_header qh
                         ON q.quote_id = qh.quote_id
                         LEFT OUTER JOIN quote_site qs
                         ON qh.quote_header_id = qs.quote_header_id
                         INNER JOIN site s ON qs.site_id = s.site_id
                         INNER JOIN bid_request_status brs
                         ON qh.quote_header_id = brs.quote_header_id
                       AND s.site_id = brs.site_id
                       AND brs.active = pkg_constants.con_activeflag_yes
                   WHERE q.quote_id = in_quoteheaderid
                     AND qh.quote_header_id = in_quoteheaderid
                     AND VERSION = in_qhversion
                     AND (qs.active = pkg_constants.con_activeflag_yes);

      OPEN out_access FOR
         SELECT DISTINCT brs.site_id, special_bid_number "TPEIDAccess",
                         tpp_url "TPEURLAccess"
                    FROM quote q LEFT OUTER JOIN quote_header qh
                         ON q.quote_id = qh.quote_id
                         LEFT OUTER JOIN quote_site qs
                         ON qh.quote_header_id = qs.quote_header_id
                         INNER JOIN site s ON qs.site_id = s.site_id
                         INNER JOIN bid_request_status brs
                         ON qh.quote_header_id = brs.quote_header_id
                       AND s.site_id = brs.site_id
                       AND brs.active = pkg_constants.con_activeflag_yes
                   WHERE q.quote_id = in_quoteheaderid
                     AND qh.quote_header_id = in_quoteheaderid
                     AND (qs.active = pkg_constants.con_activeflag_yes)
                     AND VERSION = in_qhversion
                     AND brs.product_name = 'BT iVPN2 Access';

      OPEN out_cpe FOR
         SELECT DISTINCT brs.site_id, special_bid_number "TPEIDCPE",
                         tpp_url "TPEURLCPE"
                    FROM quote q LEFT OUTER JOIN quote_header qh
                         ON q.quote_id = qh.quote_id
                         LEFT OUTER JOIN quote_site qs
                         ON qh.quote_header_id = qs.quote_header_id
                         INNER JOIN site s ON qs.site_id = s.site_id
                         INNER JOIN bid_request_status brs
                         ON qh.quote_header_id = brs.quote_header_id
                       AND s.site_id = brs.site_id
                       AND brs.active = pkg_constants.con_activeflag_yes
                   WHERE q.quote_id = in_quoteheaderid
                     AND qh.quote_header_id = in_quoteheaderid
                     AND (qs.active = pkg_constants.con_activeflag_yes)
                     AND VERSION = in_qhversion
                     AND brs.product_name = 'BT CPE';

      OPEN out_port FOR
         SELECT DISTINCT brs.site_id, special_bid_number "TPEIDPort",
                         tpp_url "TPEURLPort"
                    FROM quote q LEFT OUTER JOIN quote_header qh
                         ON q.quote_id = qh.quote_id
                         LEFT OUTER JOIN quote_site qs
                         ON qh.quote_header_id = qs.quote_header_id
                         INNER JOIN site s ON qs.site_id = s.site_id
                         INNER JOIN bid_request_status brs
                         ON qh.quote_header_id = brs.quote_header_id
                       AND s.site_id = brs.site_id
                       AND brs.active = pkg_constants.con_activeflag_yes
                   WHERE q.quote_id = in_quoteheaderid
                     AND qh.quote_header_id = in_quoteheaderid
                     AND (qs.active = pkg_constants.con_activeflag_yes)
                     AND VERSION = in_qhversion
                     AND brs.product_name = 'BT iVPN2 Port';

      OPEN out_servicewrap FOR
         SELECT DISTINCT brs.site_id, special_bid_number "TPEIDServiceWrap",
                         tpp_url "TPEURLServiceWrap"
                    FROM quote q LEFT OUTER JOIN quote_header qh
                         ON q.quote_id = qh.quote_id
                         LEFT OUTER JOIN quote_site qs
                         ON qh.quote_header_id = qs.quote_header_id
                         INNER JOIN site s ON qs.site_id = s.site_id
                         INNER JOIN bid_request_status brs
                         ON qh.quote_header_id = brs.quote_header_id
                       AND s.site_id = brs.site_id
                       AND brs.active = pkg_constants.con_activeflag_yes
                   WHERE q.quote_id = in_quoteheaderid
                     AND qh.quote_header_id = in_quoteheaderid
                     AND (qs.active = pkg_constants.con_activeflag_yes)
                     AND VERSION = in_qhversion
                     AND brs.product_name IN
                                   ('BT iVPN2 CONFIGURATION', 'BT iVPN2 SLA');
   EXCEPTION
           WHEN OTHERS THEN
 -- Added by Mini on 23/11/2010 as part of exception handling
         v_sql_errm := substr(SQLERRM,1,150);
         v_sql_code := SQLCODE;
         PKG_COMMON.spi_error_log(
                                  in_quoteid,
                                  in_quoteheaderid,
                                  NULL,
                                  NULL,
                                  'PKG_BOM_GEN',
                                  'SPS_BILLDETAILSINFO',
                                  v_sql_code,
                                  v_sql_errm
                                 );
   END sps_billdetailsinfo;

   PROCEDURE sps_ivpn2_special_bid_details (
      in_quoteid              IN       quote.quote_id%TYPE,
      in_quoteheaderid        IN       quote_header.quote_header_id%TYPE,
      in_qhversion            IN       quote_header.VERSION%TYPE,
      in_site_list            IN       VARCHAR2,
                               -- added for fetch info based on selected sites
      --- in_productid             IN       line_item.product_id%TYPE,
      in_productname          IN       line_item.product_name%TYPE,
      out_ivpn2_special_bid   OUT      sys_refcursor
   )
   AS
   BEGIN
      OPEN out_ivpn2_special_bid FOR
         SELECT COALESCE(tobe.quote_id, asis.quote_id) quote_id,
       COALESCE(tobe.quote_header_id, asis.quote_header_id) quote_header_id,
       COALESCE(tobe.site_id, asis.site_id) site_id,
       COALESCE(tobe.site_name, asis.site_name) site_name,
       COALESCE(tobe.product_id, asis.product_id) product_id,
       COALESCE(tobe.product_name, asis.product_name) product_name,
       COALESCE(tobe.child_scode, asis.child_scode) child_scode,
       COALESCE(tobe.fallback_type, asis.fallback_type) fallback_type,
       NULL AS part_type, NULL AS row_id,
       COALESCE(tobe.attribute_name, asis.attribute_name) attribute_name,
       NULL AS sqe_display_text, NULL AS config_level,
       tobe.attribute_value,
       asis.attribute_value AS "AS_IS_VALUE",
       null AS "PREVIOUS_VALUE",
       COALESCE(tobe.line_item_quantity, asis.line_item_quantity) line_item_quantity,
       TOBE_LINEITEM_ACTION_CODE,
       ASIS_LINEITEM_ACTION_CODE
             FROM (SELECT   quote_id, quote_header_id, site_id, site_name, product_id,
                  product_name, child_scode, fallback_type,  attribute_name,
                  wm_concat (attribute_value) attribute_value,
                  line_item_quantity, TOBE_LINEITEM_ACTION_CODE FROM (SELECT DISTINCT q.quote_id, qh.quote_header_id,
                                   brs.site_id, s.NAME AS site_name,
                                   pmd.product_id, brstemp.product_name,
                                   pmd.child_scode,
                                   brs.fallback_type,
                                   DECODE
                                      (pivot.rno,
                                       '1', DECODE
                                               (UPPER(brs.non_std_comp),
                                                'ACCESS', 'ACCESS SPECIAL BID ID',
                                                'CPE', 'CPE SPECIAL BID ID',
                                                'PORT', 'PORT SPECIAL BID ID',
                                                'CONFIGURATION', 'SERVICE WRAP SPECIAL BID ID',
                                                'SLA', 'SERVICE WRAP SPECIAL BID ID',
                                                'HUB', 'SERVICE WRAP SPECIAL BID ID',
                        'PORTONLYHARDWIRE', 'ACCESS SPECIAL BID ID'
                                               ),
                                       '2', DECODE (UPPER(brs.non_std_comp),
                                                    'ACCESS', 'ACCESS TPE URL',
                                                    'CPE', 'CPE TPE URL',
                                                    'PORT', 'PORT TPE URL',
                                                    'CONFIGURATION', 'SERVICE WRAP TPE URL',
                                                    'SLA', 'SERVICE WRAP TPE URL',
                                                    'HUB', 'SERVICE WRAP TPE URL',
                            'PORTONLYHARDWIRE', 'ACCESS TPE URL'
                                                   )
                                      ) attribute_name,
                                   DECODE
                                         (pivot.rno,
                                          '1', special_bid_number,
                                          '2', tpp_url
                                         ) attribute_value,
                                   1 "LINE_ITEM_QUANTITY",
                   lm.action_code AS "TOBE_LINEITEM_ACTION_CODE"
                              FROM quote q LEFT OUTER JOIN quote_header qh
                                   ON q.quote_id = qh.quote_id
                                   LEFT OUTER JOIN quote_site qs
                                   ON qh.quote_header_id = qs.quote_header_id
                                   INNER JOIN site s ON qs.site_id = s.site_id
                                   INNER JOIN bid_request_status brs
                                   ON qh.quote_header_id = brs.quote_header_id
                                 AND s.site_id = brs.site_id
                                 AND brs.active =
                                              pkg_constants.con_activeflag_yes
                                   INNER JOIN
                                   (SELECT bid_request_status_id,
                                           DECODE
                                              (product_name,
                                               'BT iVPN2 CONFIGURATION', 'BT IVPN2 GLOBAL',
                                               'BT iVPN2 SLA', 'BT IVPN2 GLOBAL',
                                               product_name
                                              ) product_name
                                      FROM bid_request_status) brstemp
                                   ON brstemp.bid_request_status_id =
                                                     brs.bid_request_status_id
                                   LEFT OUTER JOIN product_master_details pmd
                                   ON UPPER(pmd.product_name) = UPPER(brstemp.product_name)
                   LEFT OUTER JOIN line_item lm
                                   ON lm.quote_header_id = qh.quote_header_id
                                   AND lm.site_id = qs.site_id
                                   AND UPPER (lm.product_name) = UPPER(brstemp.product_name)
                   AND lm.active = pkg_constants.con_activeflag_yes
                   CROSS JOIN
                                   (SELECT     LEVEL rno
                                          FROM DUAL
                                    CONNECT BY LEVEL <= 2) pivot
                             WHERE q.quote_id = in_quoteid
                               AND qh.quote_header_id = in_quoteheaderid
                               AND VERSION = in_qhversion
                               AND s.site_id IN (
                                      SELECT *
                                        FROM TABLE
                                                (CAST
                                                    (pkg_common.fn_splitdata
                                                                (in_site_list,
                                                                 '~'
                                                                ) AS varchar2_ntt
                                                    )
                                                ) nt)
                               AND (qs.active =
                                              pkg_constants.con_activeflag_yes
                                   ))
            WHERE attribute_value IS NOT NULL
         GROUP BY quote_id,
                  quote_header_id,
                  site_id,
                  site_name,
                  product_id,
                  product_name,
                  child_scode,
                  fallback_type,
                  attribute_name,
                  line_item_quantity,
          TOBE_LINEITEM_ACTION_CODE)tobe
          FULL OUTER JOIN
          (SELECT   quote_id, quote_header_id, site_id, site_name, product_id,
                  product_name, child_scode, fallback_type,  attribute_name,
                  wm_concat (attribute_value) attribute_value,
                  line_item_quantity, ASIS_LINEITEM_ACTION_CODE
             FROM (SELECT DISTINCT q.quote_id, qh.quote_header_id,
                                   brs.site_id, s.NAME AS site_name,
                                   pmd.product_id, brstemp.product_name,
                                   pmd.child_scode,
                                   brs.fallback_type,
                                   DECODE
                                      (pivot.rno,
                                       '1', DECODE
                                               (UPPER(brs.non_std_comp),
                                                'ACCESS', 'ACCESS SPECIAL BID ID',
                                                'CPE', 'CPE SPECIAL BID ID',
                                                'PORT', 'PORT SPECIAL BID ID',
                                                'CONFIGURATION', 'SERVICE WRAP SPECIAL BID ID',
                                                'SLA', 'SERVICE WRAP SPECIAL BID ID',
                                                'HUB', 'SERVICE WRAP SPECIAL BID ID',
                        'PORTONLYHARDWIRE', 'ACCESS SPECIAL BID ID'
                                               ),
                                       '2', DECODE (UPPER(brs.non_std_comp),
                                                    'ACCESS', 'ACCESS TPE URL',
                                                    'CPE', 'CPE TPE URL',
                                                    'PORT', 'PORT TPE URL',
                                                    'CONFIGURATION', 'SERVICE WRAP TPE URL',
                                                    'SLA', 'SERVICE WRAP TPE URL',
                                                    'HUB', 'SERVICE WRAP TPE URL',
                            'PORTONLYHARDWIRE', 'ACCESS TPE URL'
                                                   )
                                      ) attribute_name,
                                   DECODE
                                         (pivot.rno,
                                          '1', special_bid_number,
                                          '2', tpp_url
                                         ) attribute_value,
                                   1 "LINE_ITEM_QUANTITY",
                    qlm.action_code AS "ASIS_LINEITEM_ACTION_CODE"
                              FROM quote q LEFT OUTER JOIN quote_header qh
                                   ON q.quote_id = qh.quote_id
                                   LEFT OUTER JOIN quote_site qs
                                   ON qh.quote_header_id = qs.quote_header_id
                                   INNER JOIN site s ON qs.site_id = s.site_id
                                   INNER JOIN bid_request_status_as_is brs
                                   ON qh.quote_header_id = brs.quote_header_id
                                 AND s.site_id = brs.site_id
                                 AND brs.active =
                                              pkg_constants.con_activeflag_yes
                                   INNER JOIN
                                   (SELECT bid_request_status_id,
                                           DECODE
                                              (product_name,
                                               'BT iVPN2 CONFIGURATION', 'BT IVPN2 GLOBAL',
                                               'BT iVPN2 SLA', 'BT IVPN2 GLOBAL',
                                               product_name
                                              ) product_name
                                      FROM bid_request_status_as_is) brstemp
                                   ON brstemp.bid_request_status_id =
                                                     brs.bid_request_status_id
                                   LEFT OUTER JOIN product_master_details pmd
                                   ON UPPER(pmd.product_name) = UPPER(brstemp.product_name)
                   LEFT OUTER JOIN quote_line_item_as_is qlm
                                   ON qlm.quote_header_id = qh.quote_header_id
                                   AND qlm.site_id = qs.site_id
                                   AND UPPER (qlm.product_name) = UPPER(brstemp.product_name)
                   AND qlm.active = pkg_constants.con_activeflag_yes
                                   CROSS JOIN
                                   (SELECT     LEVEL rno
                                          FROM DUAL
                                    CONNECT BY LEVEL <= 2) pivot
                             WHERE q.quote_id = in_quoteid
                               AND qh.quote_header_id = in_quoteheaderid
                               AND VERSION = in_qhversion
                               AND s.site_id IN (
                                      SELECT *
                                        FROM TABLE
                                                (CAST
                                                    (pkg_common.fn_splitdata
                                                                (in_site_list,
                                                                 '~'
                                                                ) AS varchar2_ntt
                                                    )
                                                ) nt)
                               AND (qs.active =
                                              pkg_constants.con_activeflag_yes
                                   ))
            WHERE attribute_value IS NOT NULL
         GROUP BY quote_id,
                  quote_header_id,
                  site_id,
                  site_name,
                  product_id,
                  product_name,
                  child_scode,
                  fallback_type,
                  attribute_name,
                  line_item_quantity,
                  ASIS_LINEITEM_ACTION_CODE)asis
                  ON tobe.quote_header_id = asis.quote_header_id
                   AND tobe.site_id = asis.site_id
                   AND tobe.product_name = asis.product_name
                   AND nvl(tobe.fallback_type, -1) = nvl(asis.fallback_type, -1)
           AND tobe.attribute_name = asis.attribute_name
         ORDER BY site_id,
                  fallback_type,
                  row_id,
                  part_type,
                  product_id,
                  sqe_display_text,
                  attribute_name;

    EXCEPTION
           WHEN OTHERS THEN
 -- Added by Mini on 23/11/2010 as part of exception handling
         v_sql_errm := substr(SQLERRM,1,150);
         v_sql_code := SQLCODE;
         PKG_COMMON.spi_error_log(
                                  in_quoteid,
                                  in_quoteheaderid,
                                  NULL,
                                  NULL,
                                  'PKG_BOM_GEN',
                                  'SPS_IVPN2_SPECIAL_BID_DETAILS',
                                  v_sql_code,
                                  v_sql_errm
                                 );
   END sps_ivpn2_special_bid_details;

   PROCEDURE sps_ivpn2_nni_order_info (
      in_quoteid                 IN       quote.quote_id%TYPE,
      in_quoteheaderid           IN       quote_header.quote_header_id%TYPE,
      in_qhversion               IN       quote_header.VERSION%TYPE,
      in_site_list               IN       VARCHAR2,
      -- added for fetch info based on selected sites- BK-
      out_ivpn2_nni_order_info   OUT      sys_refcursor
   )
   AS
   BEGIN
      OPEN out_ivpn2_nni_order_info FOR
         SELECT   qo.quote_id, qho.quote_header_id, so.site_id,
                  so.NAME AS site_name, pmd.product_id, pmd.product_name,
                  pmd.child_scode, fallback_type, NULL AS part_type,
                  pir.row_id,
                  DECODE (pivot.rno,
                          '1', 'IPNETWORK',
                          '2', 'STATIC ROUTE SUBNET MASK',
                          '3', 'NEXT HOP IP ADDRESS'
                         ) attribute_name,
                  NULL AS sqe_display_text, NULL AS config_level,
                  DECODE (pivot.rno,
                          '1', subnet_address,
                          '2', subnet_mask,
                          '3', next_hop_ip_address
                         ) attribute_value,
                         null AS "Previous_value",
                  1 "LINE_ITEM_QUANTITY",
          oli.action_code AS "TOBE_LINEITEM_ACTION_CODE",
          qlm.action_code AS "ASIS_LINEITEM_ACTION_CODE"
             FROM quote qo LEFT OUTER JOIN quote_header qho
                  ON qo.quote_id = qho.quote_id
                  LEFT OUTER JOIN order_header oh
                  ON qho.quote_header_id = oh.quote_header_id
                  LEFT OUTER JOIN order_line_item oli
                  ON oh.order_header_id = oli.order_header_id
                  AND UPPER(oli.product_name) = UPPER('BT iVPN2 VPN Connection')
                  INNER JOIN product_master_details pmd
                  ON UPPER(oli.product_name) = UPPER(pmd.product_name)
                  INNER JOIN site so ON oli.site_id = so.site_id
                  INNER JOIN port_ip_routes pir
                  ON oli.order_line_item_id = pir.order_line_item_id
          LEFT OUTER JOIN quote_line_item_as_is qlm
                  ON qlm.quote_header_id = qho.quote_header_id
                  AND qlm.site_id = so.site_id
                  AND UPPER (qlm.product_name) = UPPER('BT iVPN2 VPN Connection')
                  CROSS JOIN
                  (SELECT     LEVEL rno
                         FROM DUAL
                   CONNECT BY LEVEL <= 3) pivot
            WHERE qo.quote_id = in_quoteid
              AND qho.quote_header_id = in_quoteheaderid
              AND VERSION = in_qhversion
              AND oli.site_id IN (
                     SELECT *
                       FROM TABLE
                               (CAST
                                   (pkg_common.fn_splitdata (in_site_list,
                                                             '~') AS varchar2_ntt
                                   )
                               ) nt)
              AND (oli.active = pkg_constants.con_activeflag_yes)
         ORDER BY oli.order_line_item_id, serial_number, attribute_name;
   END sps_ivpn2_nni_order_info;



END PKG_BOM_GEN;
/


CREATE OR REPLACE PACKAGE BODY pkg_bom_gen_mx
AS
   v_sql_code   NUMBER;
   v_sql_errm   VARCHAR2 (150);

   -------MX Order Header Detials
   PROCEDURE sps_order_request (
      in_quoteid          IN       quote.quote_id%TYPE,
      in_quoteheaderid    IN       quote_header.quote_header_id%TYPE,
      in_qhversion        IN       quote_header.VERSION%TYPE,
      in_main_site_flag   IN       site.main_site_flag%TYPE,
      out_order_request   OUT      sys_refcursor
   )
   AS
      v_sql_code   NUMBER;                  /*Addeed for Exception Handling*/
      out_errmsg   VARCHAR2 (150);          /*Addeed for Exception Handling*/
/******************************************************************************
   NAME:       SQE Mobile Express -MX Order Header Detials.
   PURPOSE:    This SP is used display the full confi. of the MX flow.

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        17/03/2010   Suman           1. MX Order Header Detials
 ******************************************************************************/
   BEGIN
      OPEN out_order_request FOR
         SELECT qh.quote_id "SQE Quote ID",
                qh.quote_header_id "SQE Quote Header ID",
                q.sales_channel "Subsidiary Name",
                q.customer_id "Customer ID", qh.cr_prop_id "CR Prop ID",
                qh.expedio_ref_id "Expedio Reference ID",
                qh.expedio_quoteid "Expedio Quote ID",
                qh.expedio_quoteversion "Expedio Quote Version",
                qh.VERSION "SQE Quote Version",
                NVL (bs.order_type, q.order_type) "Order Type",
                oh.order_form_sign_date "Order Form Sign Date",
                q.sales_channel "Sales Channel", NULL AS "salesPartner",
                qh.currency "Currency",
                q.customer_service_center "Customer Service Center",
                oh.contract_id "Contract Id",
                cust.bfg_customer_id "Bfg_Customer_id",
                s.mx_bfg_bill_account_id "mx_bfg_bill_account_id",
                cust.bfg_customer_name "BFG_CUSTOMER_NAME", qh.status,
                channel_type
           FROM quote q INNER JOIN customer cust
                ON q.customer_id = cust.customer_id
                INNER JOIN quote_header qh ON q.quote_id = qh.quote_id
                INNER JOIN bt_subsidiary sub
                ON cust.bt_subsidiary_id = sub.bt_subsidiary_id
                LEFT OUTER JOIN quote_site qs
                ON qs.active = 'Y'
                   AND qs.quote_header_id = qh.quote_header_id
                LEFT OUTER JOIN site s ON qs.site_id = s.site_id
                LEFT OUTER JOIN order_header oh
                ON qh.quote_header_id = oh.quote_header_id
                LEFT OUTER JOIN bundle_selection bs
                ON bs.quote_header_id = qh.quote_header_id
              AND UPPER (bs.product_name) = UPPER ('BT MOBILEXPRESS')
              AND bs.active = 'Y'
          WHERE q.quote_id = in_quoteid
            AND qh.quote_header_id = in_quoteheaderid
            AND UPPER (oh.product_name) = UPPER ('BT MOBILEXPRESS')
            AND VERSION = in_qhversion
            AND NVL (s.main_site_flag, 'N') = in_main_site_flag;
   EXCEPTION
      WHEN OTHERS
      THEN
         out_errmsg := SUBSTR (SQLERRM, 1, 150);
         v_sql_code := SQLCODE;
         pkg_common.spi_error_log (NULL,
                                   in_quoteheaderid,
                                   in_qhversion || 'in_qhversion',
                                   NULL,
                                   'pkg_bom_gen',
                                   'sps_order_request',
                                   v_sql_code,
                                   out_errmsg
                                  );
   END;

------MX End  Order Header Detials

   -----MX  Product - Attributes part Start
PROCEDURE sps_mg_attr (
   in_quoteid         IN       quote.quote_id%TYPE,
   in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
   in_productid       IN       line_item.product_id%TYPE,
   in_productname     IN       line_item.product_name%TYPE,
   out_mg_attr        OUT      sys_refcursor
)
AS
   v_sql_code         NUMBER;
   out_errmsg         VARCHAR2 (150);
   v_if_ifc           NUMBER;
   v_count            NUMBER;
   v_main_site_flag   VARCHAR2 (5);
   v_site_id          site.site_id%TYPE;
/*Addeed for Exception Handling*/
/******************************************************************************
   NAME:       SQE Mobile Express -MX select Query for BOM.
   PURPOSE:    This SP is used display the full confi. of the MX flow.

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        26/12/2010   Suman           1. Modification of the query based on the  IFC senio.
   2.0        30/12/2010   Suman           1. Modification of the query removed the concat for Order_line_item_id
   3.0        01/01/2010   Suresh          3. Modification of the query concate order_line_item_id as order_line_item||row_id
   4.0        18/02/2010   Suman           4. Modification about project_id to 437 for column Product Instance ID
	 5.0        22/07/2010   suman           5. Adding the Asis data for the Order_line_item_id
   6.0        23/08/2010   Suman	         6. Service_Instance_Id add from sps_mg_attr.
 ******************************************************************************/
BEGIN
   BEGIN
      SELECT COUNT (1)
        INTO v_if_ifc
        FROM quote_header
       WHERE quote_header_id = in_quoteheaderid AND VERSION > '1.0';
   EXCEPTION
      WHEN NO_DATA_FOUND
      THEN
         out_errmsg := SUBSTR (SQLERRM, 1, 150);
         v_sql_code := SQLCODE;
         pkg_common.spi_error_log (in_quoteid,
                                   in_quoteheaderid,
                                   in_productid,
                                   in_productname,
                                   'pkg_bom_gen',
                                   'sps_mg_attr - Branch Site is Null',
                                   v_sql_code,
                                   out_errmsg
                                  );
      WHEN OTHERS
      THEN
         out_errmsg := SUBSTR (SQLERRM, 1, 150);
         v_sql_code := SQLCODE;
         pkg_common.spi_error_log (in_quoteid,
                                   in_quoteheaderid,
                                   in_productid,
                                   in_productname,
                                   'pkg_bom_gen',
                                   'sps_mg_attr',
                                   v_sql_code,
                                   out_errmsg
                                  );
   END;

   IF v_if_ifc > 0
   THEN
      BEGIN
         SELECT NVL (main_site_flag, 'N')
           INTO v_main_site_flag
           FROM site
          WHERE site_id IN (
                     SELECT site_id
                       FROM quote_site
                      WHERE quote_header_id = in_quoteheaderid
                            AND active = 'Y');
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            v_main_site_flag := 'Y';
            out_errmsg := SUBSTR (SQLERRM, 1, 150);
            v_sql_code := SQLCODE;
            pkg_common.spi_error_log (in_quoteid,
                                      in_quoteheaderid,
                                      in_productid,
                                      in_productname,
                                      'pkg_bom_gen_mx',
                                      'sps_mg_attr',
                                      v_sql_code,
                                      out_errmsg
                                     );
         WHEN TOO_MANY_ROWS
         THEN
            v_main_site_flag := 'Y';
            out_errmsg := SUBSTR (SQLERRM, 1, 150);
            v_sql_code := SQLCODE;
            pkg_common.spi_error_log (in_quoteid,
                                      in_quoteheaderid,
                                      in_productid,
                                      in_productname,
                                      'pkg_bom_gen_mx',
                                      'sps_mg_attr',
                                      v_sql_code,
                                      out_errmsg
                                     );
      END;
   END IF;

   DBMS_OUTPUT.put_line (   'v_if_ifc'
                         || v_if_ifc
                         || 'v_main_site_flag'
                         || v_main_site_flag
                        );

   IF v_if_ifc > 0
   THEN
      BEGIN
         SELECT site_id
           INTO v_site_id
           FROM quote_site
          WHERE quote_header_id = in_quoteheaderid
            AND NVL (active, 'N') = 'Y'
            AND ROWNUM < 2;
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            RETURN;
      END;

      IF v_main_site_flag = 'Y'
      THEN
         OPEN out_mg_attr FOR
    SELECT
        COALESCE (q.quote_id, pvs.quote_id, asis.quote_id, in_quoteid )                                                                 AS "Quote_id",
        COALESCE (qh.quote_header_id, pvs.quote_header_id, asis.quote_header_id, in_quoteheaderid )                                     AS "Quote_header_id",
        COALESCE (v_site_id, pvs.site_id, asis.site_id )                                                                                AS "Site_id",
        COALESCE (lm.product_id, pvs.product_id, asis.product_id )                                                                      AS "Product_id",
        COALESCE (lm.product_name, pvs.product_name, asis.product_name )                                                                AS "Product_Name",
        COALESCE (pmd.child_scode, pvs.child_scode, asis.child_scode )                                                                  AS "Scode",
        COALESCE (ld.row_id, pvs."ld_row_id", asis."ld_row_id" )                                                                        AS "row_id",
        COALESCE (am.ppsr_attribute, am.sqe_attribute, pvs.ppsr_attribute, pvs.sqe_attribute, asis.ppsr_attribute, asis.sqe_attribute ) AS "Attribute_name",
        ld.VALUE                                                                                                                        AS "ATTRIBUTE_VALUE",
        pvs.VALUE                                                                                                                       AS "Previous Value",
        asis.VALUE                                                                                                                      AS "AS_IS_VALUE",
        nvl (COALESCE (ld.quantity, pvs.quantity, asis.quantity),1 )                                                                    AS "LINE_ITEM_QUANTITY",
        COALESCE (pmd.product_id, pvs.product_id, asis.product_id )                                                                     AS "Product Instance ID",
        COALESCE (pmd.product_id || q.quote_id, pvs.product_id|| pvs.quote_id, asis.product_id || asis.quote_id )                        AS "Project ID",
        COALESCE (am.attribute_mapping_id, pvs.attribute_mapping_id, asis.attribute_mapping_id )                                        AS "Attribute_Mapping_Id",
        COALESCE (pmd.prod_friendly_id || ld.row_id || q.quote_id, pvs.prod_friendly_id || pvs."ld_row_id" || pvs.quote_id, ASIS.prod_friendly_id || ASIS."ld_row_id" || ASIS.quote_id ) AS "Order_line_item_id",  --r15
				COALESCE (lm.CLASSIC_ELEMENT_ID , pvs.CLASSIC_ELEMENT_ID,asis.CLASSIC_ELEMENT_ID)       AS "Service_Instance_Id",
        (CASE
            WHEN ld.VALUE  IS NULL
            AND asis.VALUE IS NOT NULL
            THEN 'Delete'
            WHEN asis.VALUE IS NULL
            AND ld.VALUE    IS NOT NULL
            THEN 'Add'
            WHEN asis.VALUE <> ld.VALUE
            THEN 'Update'
            ELSE 'None'
        end )                                                                                                                           as "ACTION"
      FROM quote q
      INNER JOIN quote_header qh
      ON q.quote_id          = qh.quote_id
      AND q.quote_id         = in_quoteid
      AND qh.quote_header_id = in_quoteheaderid
      INNER JOIN quote_site qs
      ON qh.quote_header_id = qs.quote_header_id
      AND qs.active         = pkg_constants.con_activeflag_yes
      AND qs.site_id        = v_site_id
      INNER JOIN line_item lm
      ON qh.quote_header_id = lm.quote_header_id
      AND qs.site_id        = lm.site_id
      AND lm.product_id     = in_productid
      AND lm.active         = pkg_constants.con_activeflag_yes
      INNER JOIN line_item_detail ld
      ON lm.line_item_id    = ld.line_item_id
      AND ld.active         = pkg_constants.con_activeflag_yes
      AND upper (ld.VALUE) <> '-'
      INNER JOIN attribute_mapping am
      ON ld.attribute_mapping_id = am.attribute_mapping_id
      AND am.include_bom        <> 'N'
      INNER JOIN product_master_details pmd
      ON upper (lm.product_name) = upper (pmd.product_name)
      AND parent_group_id        = 2
--      LEFT OUTER JOIN
      FULL JOIN
            (SELECT in_quoteid AS quote_id,
              in_quoteheaderid AS quote_header_id,
              qs.site_id,
              lm.product_id,
              lm.product_name,
              pmd.child_scode,
              lm.fallback_type,
              lm.part_type,
              lm.row_id AS "lm_row_id",
              ld.row_id AS "ld_row_id",
              ld.attribute_mapping_id,
              am.ppsr_attribute,
              am.sqe_attribute,
              ld.VALUE,
              ld.action_code,
              ld.quantity,
              pmd.product_id AS "product_instance_id",
              pmd.prod_friendly_id,
              ld.line_item_id,lm.CLASSIC_ELEMENT_ID
            FROM quote_header qh
            INNER JOIN quote_header tobeqh
            ON qh.quote_id             = tobeqh.quote_id
            AND qh.VERSION             = tobeqh.expedio_parent_version
            AND tobeqh.quote_id        = in_quoteid
            AND tobeqh.quote_header_id = in_quoteheaderid
            INNER JOIN quote_site qs
            ON qh.quote_header_id = qs.quote_header_id
            AND qs.site_id        = v_site_id
            AND qs.active         = pkg_constants.con_activeflag_yes
            INNER JOIN line_item lm
            ON qh.quote_header_id = lm.quote_header_id
            AND qs.site_id        = lm.site_id
            AND (lm.active        = pkg_constants.con_activeflag_yes)
            AND lm.product_id     = in_productid
            INNER JOIN line_item_detail ld
            ON lm.line_item_id    = ld.line_item_id
            AND (ld.active        = pkg_constants.con_activeflag_yes)
            AND upper (ld.VALUE) <> '-'
            INNER JOIN attribute_mapping am
            ON ld.attribute_mapping_id =am.attribute_mapping_id
            AND am.include_bom        <> 'N'
            INNER JOIN product_master_details pmd
            ON upper (lm.product_name) =upper (pmd.product_name)
            AND parent_group_id        = 2
            ) pvs ---Previou Table Name End
      ON pvs.quote_id             = qh.quote_id
      AND nvl (pvs.site_id, -1)     = nvl (lm.site_id, -1)
      AND pvs.product_id            = lm.product_id
      AND pvs.fallback_type         = lm.fallback_type
      AND nvl (pvs."lm_row_id", -1) = nvl (lm.row_id, -1)
      AND nvl (pvs."ld_row_id", -1) = nvl (ld.row_id, -1)
      AND nvl (pvs.part_type,   -1) = nvl (lm.part_type, -1)
      AND pvs.attribute_mapping_id  = ld.attribute_mapping_id
      AND pvs.prod_friendly_id      = pmd.prod_friendly_id
--      LEFT OUTER JOIN
      FULL JOIN
            (SELECT in_quoteid AS quote_id,
              in_quoteheaderid AS quote_header_id,
              lm.site_id,
              lineitemtemp.product_id,
              lineitemtemp.product_name,
              pmd.child_scode,
              lm.fallback_type,
              lm.part_type,
              lm.row_id AS "lm_row_id",
              ld.row_id AS "ld_row_id",
              ld.attribute_mapping_id,
              am.ppsr_attribute,
              am.sqe_attribute,
              ld.VALUE,
              ld.action_code,
              ld.quantity,
              PMD.PRODUCT_ID AS PRODUCT_INSTANCE_ID,
              pmd.prod_friendly_id,QSS.primary,lm.CLASSIC_ELEMENT_ID
            FROM quote_header qh
            LEFT OUTER JOIN quote_site qs
            ON qh.quote_header_id = qs.quote_header_id
            AND qs.active         = pkg_constants.con_activeflag_yes
            AND qs.site_id        = v_site_id
            INNER JOIN site s
            ON qs.site_id = s.site_id
            INNER JOIN quote_line_item_as_is lm
            ON lm.quote_header_id = qh.quote_header_id
            AND s.site_id         = lm.site_id
            AND lm.active         = pkg_constants.con_activeflag_yes
            INNER JOIN
              (SELECT line_item_id,
                product_name,
                product_id
                  FROM quote_line_item_as_is
                  WHERE site_id       = v_site_id
                  AND active          = pkg_constants.con_activeflag_yes
                  AND quote_header_id = in_quoteheaderid
              ) lineitemtemp
            ON lm.line_item_id                     = lineitemtemp.line_item_id
            AND upper (lineitemtemp.product_name) IN
              ( SELECT DISTINCT upper (pmd.product_name)
                FROM product_master pm,
                product_master_details pmd
                  WHERE pm.parent_group_id    = pmd.parent_group_id
                  AND upper (pm.product_name) = upper (in_productname)
                  AND active                  = pkg_constants.con_activeflag_yes
              )
            INNER JOIN product_master_details pmd
            ON upper (lineitemtemp.product_name) = upper (pmd.product_name)
            AND pmd.parent_group_id              = 2
            INNER JOIN quote_line_item_detail_as_is ld
            ON ld.line_item_id = lm.line_item_id
            AND ld.active      = pkg_constants.con_activeflag_yes
            LEFT OUTER JOIN attribute_mapping am
            on LD.ATTRIBUTE_MAPPING_ID     = AM.ATTRIBUTE_MAPPING_ID
            left outer join QUOTE_SITE_SERVICE QSS
            ON QSS.QUOTE_HEADER_ID= in_quoteheaderid AND UPPER(QSS.PRODUCT_NAME)=upper(lm.product_name)
            WHERE qh.quote_header_id       = in_quoteheaderid
            AND upper (ld.VALUE)          <> '-'
            AND am.include_bom            <> 'N'
            ) asis ON asis.quote_header_id = qh.quote_header_id
      AND nvl (asis.site_id, -1)       = nvl (lm.site_id, -1)
      AND asis.product_id              = lm.product_id
      AND asis.fallback_type           = lm.fallback_type
      AND nvl (asis."lm_row_id", 0)    = nvl (lm.row_id, 0)
      AND nvl (asis."ld_row_id", 0)    = nvl (ld.row_id, 0)
      AND nvl (asis.part_type, -1)     = nvl (lm.part_type, -1)
      AND asis.attribute_mapping_id    = ld.attribute_mapping_id
      AND asis.prod_friendly_id        = pmd.prod_friendly_id
UNION
--ORDER related line items and attributes
  SELECT
          COALESCE (qho.quote_id, pvs2.quote_id, asis.quote_id, in_quoteid )                                                                  AS "Quote Id",
          COALESCE (qho.quote_header_id, pvs2.quote_header_id, asis.quote_header_id, in_quoteheaderid )                                       AS "Quote HeaderID",
          COALESCE (v_site_id, pvs2.site_id, asis.site_id )                                                                                   AS "Site ID",
          COALESCE (oli.product_id, pvs2.product_id, asis.product_id )                                                                        AS "Product ID",
          COALESCE (oli.product_name, pvs2.product_name, asis.product_name )                                                                  AS "Product_Name",
          COALESCE (pmd.child_scode, pvs2.child_scode, asis.child_scode )                                                                     AS "Scode",
          COALESCE (olid.row_id, pvs2.row_id, asis."olid_row_id" )                                                                            AS "Row_id",
          COALESCE (amo.ppsr_attribute, amo.sqe_attribute, pvs2.ppsr_attribute, pvs2.sqe_attribute, asis.ppsr_attribute, asis.sqe_attribute ) AS "Attribute_name",
          olid.VALUE                                                                                                                          AS "Attribute_Value",
          pvs2.VALUE                                                                                                                          AS "Previous Value",
          asis.VALUE                                                                                                                          AS "AS_IS Value",
          COALESCE (olid.quantity, asis.quantity, pvs2.quantity )                                                                             AS "LINE_ITEM_QUANTITY",
          COALESCE (pmd.product_id, pvs2.product_id, asis.product_id )                                                                        AS "Product Instance ID",
          COALESCE (pmd.product_id|| qo.quote_id, pmd.product_id|| pvs2.quote_id, asis.quote_id || asis.quote_id )                            AS "Project ID",
          COALESCE (amo.attribute_mapping_id, pvs2.attribute_mapping_id, asis.attribute_mapping_id )                                          AS "Attribute_mapping_id",
          COALESCE (PMD.PROD_FRIENDLY_ID || OLID.ROW_ID || QO.QUOTE_ID,PVS2.PROD_FRIENDLY_ID || PVS2.ROW_ID || PVS2.QUOTE_ID,ASIS.prod_friendly_id || ASIS."olid_row_id" || ASIS.quote_id) AS "Order_line_item_id", ---r15 change
					COALESCE (oli.CLASSIC_ELEMENT_ID , pvs2.CLASSIC_ELEMENT_ID,asis.CLASSIC_ELEMENT_ID)       AS "Service_Instance_Id",
          (CASE
            WHEN asis.VALUE IS NOT NULL
            AND olid.VALUE  IS NULL
            THEN 'Delete'
            WHEN asis.VALUE IS NULL
            AND olid.VALUE  IS NOT NULL
            THEN 'Add'
            WHEN asis.VALUE <> olid.VALUE
            THEN 'Update'
            ELSE 'None'
          end ) as "ACTION"
    FROM quote qo
    INNER JOIN quote_header qho
        ON qo.quote_id          = qho.quote_id
        AND qho.quote_id        = in_quoteid
        AND qho.quote_header_id = in_quoteheaderid
    INNER JOIN order_header oh
        ON qho.quote_header_id = oh.quote_header_id
    INNER JOIN order_line_item oli
        ON oh.order_header_id = oli.order_header_id
        AND (oli.active       = pkg_constants.con_activeflag_yes)
        AND oli.product_id    = in_productid
        AND oli.site_id       = v_site_id
    INNER JOIN site so
        ON oli.site_id = so.site_id
        INNER JOIN order_line_item_detail olid
        ON oli.order_line_item_id = olid.order_line_item_id
        AND (olid.active          = pkg_constants.con_activeflag_yes)
        AND upper (olid.VALUE)   <> '-'
    INNER JOIN attribute_mapping amo
        ON olid.attribute_mapping_id = amo.attribute_mapping_id
        AND upper (amo.include_bom) <> 'N'
    INNER JOIN product_master_details pmd
        ON upper (oli.product_name) = upper (pmd.product_name)
        AND pmd.parent_group_id     = 2
        AND pmd.active              = pkg_constants.con_activeflag_yes
    LEFT OUTER JOIN
      (SELECT in_quoteid AS quote_id,
        in_quoteheaderid AS quote_header_id,
        olm.site_id,
        olm.product_id,
        olm.product_name,
        pmd.child_scode,
        olm.fallback_type,
        olid.row_id,
        amo.ppsr_attribute,
        amo.sqe_attribute,
        olid.attribute_mapping_id,
        olid.VALUE,
        pmd.prod_friendly_id,
        olid.quantity,
        olid.order_line_item_id,olm.CLASSIC_ELEMENT_ID
      FROM order_header oh
      INNER JOIN quote_header qh
        ON oh.quote_header_id = qh.quote_header_id
      INNER JOIN quote q
        ON qh.quote_id = q.quote_id
      INNER JOIN quote_header tobeqh
        ON qh.quote_id             = tobeqh.quote_id
        AND qh.VERSION             = tobeqh.expedio_parent_version
        AND tobeqh.quote_id        = in_quoteid
        AND tobeqh.quote_header_id = in_quoteheaderid
      INNER JOIN order_line_item olm
        ON olm.order_header_id = oh.order_header_id
        AND olm.active         = pkg_constants.con_activeflag_yes
        AND olm.product_id     = in_productid
        AND olm.site_id       = v_site_id
      INNER JOIN order_line_item_detail olid
        ON olid.order_line_item_id = olm.order_line_item_id
        AND olid.active            = pkg_constants.con_activeflag_yes
        AND olid.VALUE            <> '-'
      INNER JOIN attribute_mapping amo
        ON olid.attribute_mapping_id = amo.attribute_mapping_id
        AND upper (amo.include_bom) <> 'N'
        INNER JOIN product_master_details pmd
        ON upper (olm.product_name) = upper (pmd.product_name)
        AND pmd.parent_group_id     = 2
        AND pmd.active              = pkg_constants.con_activeflag_yes
      ) pvs2 ON pvs2.quote_id     = qho.quote_id
    AND nvl (pvs2.site_id, -1)    = nvl (oli.site_id, -1)
    AND pvs2.fallback_type        = oli.fallback_type
    AND nvl (pvs2.row_id, -1)     = nvl (olid.row_id, -1)
    AND pvs2.attribute_mapping_id = olid.attribute_mapping_id
    AND pvs2.product_id           = oli.product_id
    AND pvs2.prod_friendly_id     = pmd.prod_friendly_id
--    LEFT OUTER JOIN
	  FULL JOIN
      (SELECT in_quoteid AS quote_id,
        in_quoteheaderid AS quote_header_id,
        olm.site_id,
        olm.product_id,
        olm.product_name,
        pmd.child_scode,
        olm.fallback_type,
        olm.row_id  AS "olm_row_id",
        olid.row_id AS "olid_row_id",
        olid.attribute_mapping_id,
        amo.ppsr_attribute,
        amo.sqe_attribute,
        olid.VALUE,
        olid.action_code,
        olid.quantity,
        PMD.PRODUCT_ID AS PRODUCT_INSTANCE_ID,
        pmd.prod_friendly_id,qss.PRIMARY ,olm.CLASSIC_ELEMENT_ID
      FROM quote_header qh
      LEFT OUTER JOIN quote_site qs
        ON qh.quote_header_id = qs.quote_header_id
        AND qs.active         = pkg_constants.con_activeflag_yes
      INNER JOIN site so
        ON qs.site_id = so.site_id
      LEFT OUTER JOIN order_header oh
        ON qh.quote_header_id = oh.quote_header_id
      INNER JOIN order_line_item_as_is olm
        ON olm.quote_header_id        = oh.quote_header_id
        AND so.site_id                = olm.site_id
        AND olm.active                = pkg_constants.con_activeflag_yes
        AND olm.site_id               = v_site_id
        AND upper (olm.product_name) IN
          ( SELECT DISTINCT upper (pmd.product_name)
          FROM product_master pm,
              product_master_details pmd
          WHERE pm.parent_group_id    = pmd.parent_group_id
          AND upper (pm.product_name) = upper (in_productname)
          AND pmd.parent_group_id     = 2
          AND active                  = pkg_constants.con_activeflag_yes
          )
      INNER JOIN product_master_details pmd
      ON upper (olm.product_name) = upper (pmd.product_name)
      AND pmd.parent_group_id     = 2
      AND pmd.active              = pkg_constants.con_activeflag_yes
      INNER JOIN order_line_item_detail_as_is olid
      ON olid.order_line_item_id = olm.order_line_item_id
      AND olid.active            = pkg_constants.con_activeflag_yes
      LEFT OUTER JOIN attribute_mapping amo
      on OLID.ATTRIBUTE_MAPPING_ID   = AMO.ATTRIBUTE_MAPPING_ID
      left outer join QUOTE_SITE_SERVICE QSS
      ON QSS.QUOTE_HEADER_ID= in_quoteheaderid AND UPPER(QSS.PRODUCT_NAME)=upper(olm.product_name)
      WHERE qh.quote_header_id       = in_quoteheaderid
      AND upper (olid.VALUE)        <> '-'
      AND amo.include_bom           <> 'N'
      ) asis ON asis.quote_header_id = qho.quote_header_id
    AND nvl (asis.site_id, -1)       = nvl (oli.site_id, -1)
    AND asis.product_id              = oli.product_id
    AND asis.fallback_type           = oli.fallback_type
    AND nvl (asis."olm_row_id", 0)   = nvl (oli.row_id, 0)
    AND nvl (asis."olid_row_id", 0)  = nvl (olid.row_id, 0)
    AND asis.attribute_mapping_id    = olid.attribute_mapping_id
    AND asis.prod_friendly_id        = pmd.prod_friendly_id ;
      ELSE
         OPEN OUT_MG_ATTR FOR
         ----------removing attribute_mapping_id NOT IN (3008, 5105, 2886,3007)
               SELECT         COALESCE (q.quote_id,
                             pvs.quote_id,
                             asis.quote_id,
                             in_quoteid
                            ) AS "Quote_id",
                   COALESCE (qh.quote_header_id,
                             pvs.quote_header_id,
                             asis.quote_header_id,
                             in_quoteheaderid
                            ) AS "Quote_header_id",
                   COALESCE (v_site_id,
                             pvs.site_id,
                             asis.site_id
                            ) AS "Site_id",
                   COALESCE (lm.product_id,
                             pvs.product_id,
                             asis.product_id
                            ) AS "Product_id",
                   COALESCE (lm.product_name,
                                    pvs.product_name,
                                    asis.product_name
                              ) AS "Product_Name",
                   COALESCE (pmd.child_scode,
                             pvs.child_scode,
                             asis.child_scode
                            ) AS "Scode",
                   COALESCE (ld.row_id,
                             pvs."ld_row_id",
                             asis."ld_row_id"
                            ) AS "row_id",
                   COALESCE (am.ppsr_attribute,
                             am.sqe_attribute,
                             pvs.ppsr_attribute,
                             pvs.sqe_attribute,
                             asis.ppsr_attribute,
                             asis.sqe_attribute
                            ) AS "Attribute_name",
                   ld.VALUE AS "ATTRIBUTE_VALUE",
                   pvs.VALUE AS "Previous Value",
                   asis.VALUE AS "AS_IS_VALUE",
                   NVL (COALESCE (ld.quantity, pvs.quantity, asis.quantity),1
                       ) AS "LINE_ITEM_QUANTITY",
                   COALESCE (pmd.product_id,
                             pvs.product_id,
                             asis.product_id
                            ) AS "Product Instance ID",
                   COALESCE (pmd.product_id || q.quote_id,
                             pmd.product_id || pvs.quote_id,
                             pmd.product_id || asis.quote_id
                            ) AS "Project ID",
                   COALESCE
                         (am.attribute_mapping_id,
                          pvs.attribute_mapping_id,
                          asis.attribute_mapping_id
                         ) AS "Attribute_Mapping_Id",
                COALESCE (pmd.prod_friendly_id || ld.row_id || q.quote_id,
                          PVS.PROD_FRIENDLY_ID || PVS."ld_row_id" || PVS.QUOTE_ID,
                          ASIS.PROD_FRIENDLY_ID || ASIS."ld_row_id" || ASIS.QUOTE_ID ) AS "Order_line_item_id",  --r15,
								COALESCE (lm.CLASSIC_ELEMENT_ID , pvs.CLASSIC_ELEMENT_ID,asis.CLASSIC_ELEMENT_ID)       AS "Service_Instance_Id",
                   (CASE
                       WHEN ld.VALUE IS NULL AND asis.VALUE IS NOT NULL
                          THEN 'Delete'
                       WHEN asis.VALUE IS NULL AND ld.VALUE IS NOT NULL
                          THEN 'Add'
                       WHEN asis.VALUE <> ld.VALUE
                          THEN 'Update'
                       ELSE 'None'
                    END
                   ) as "ACTION"
              FROM quote q INNER JOIN quote_header qh
                             ON q.quote_id = qh.quote_id
                             AND q.quote_id = in_quoteid
                             AND qh.quote_header_id = in_quoteheaderid
                          INNER JOIN quote_site qs
                            ON qh.quote_header_id = qs.quote_header_id
                            AND qs.active = pkg_constants.con_activeflag_yes
                            AND qs.site_id = v_site_id
                          INNER JOIN line_item lm
                            ON qh.quote_header_id = lm.quote_header_id
                            AND qs.site_id = lm.site_id
                            AND lm.product_id = in_productid
                            AND lm.active = pkg_constants.con_activeflag_yes
                          INNER JOIN line_item_detail ld
                            ON lm.line_item_id = ld.line_item_id
                            AND ld.attribute_mapping_id NOT IN (3008, 5105, 2886,3007)
                            AND ld.active = pkg_constants.con_activeflag_yes
                            AND UPPER (ld.VALUE) <> '-'
                          INNER JOIN attribute_mapping am
                            ON ld.attribute_mapping_id = am.attribute_mapping_id
                            AND am.include_bom <> 'N'
                          INNER JOIN product_master_details pmd
                            ON UPPER (lm.product_name) = UPPER (pmd.product_name)
                            and parent_group_id = 2
--                          LEFT OUTER JOIN
      FULL JOIN
                             (SELECT in_quoteid AS quote_id,
                                 in_quoteheaderid AS quote_header_id, qs.site_id,
                                 lm.product_id, lm.product_name, pmd.child_scode,
                                 lm.fallback_type, lm.part_type,
                                 lm.row_id AS "lm_row_id", ld.row_id AS "ld_row_id",
                                 ld.attribute_mapping_id, am.ppsr_attribute,
                                 am.sqe_attribute, ld.VALUE, ld.action_code,
                                 ld.quantity,
                                 PMD.PRODUCT_ID AS "product_instance_id",
                                 pmd.prod_friendly_id, ld.line_item_id,lm.CLASSIC_ELEMENT_ID
                               from quote_header qh
                               INNER JOIN quote_header tobeqh
                                    ON qh.quote_id = tobeqh.quote_id
                                    AND qh.VERSION = tobeqh.expedio_parent_version
                                    AND tobeqh.quote_id = in_quoteid
                                    AND tobeqh.quote_header_id = in_quoteheaderid
                               INNER JOIN quote_site qs
                                    ON qh.quote_header_id = qs.quote_header_id
                                    AND qs.site_id = v_site_id
                                    AND qs.active = pkg_constants.con_activeflag_yes
                               INNER JOIN line_item lm
                                    ON qh.quote_header_id = lm.quote_header_id
                                    AND qs.site_id = lm.site_id
                                    AND (lm.active = pkg_constants.con_activeflag_yes)
                                    AND lm.product_id = in_productid
                               INNER JOIN line_item_detail ld
                                    ON lm.line_item_id = ld.line_item_id
                                    AND ld.attribute_mapping_id NOT IN (3008, 5105, 2886,3007)
                                    AND (ld.active = pkg_constants.con_activeflag_yes)
                                    AND UPPER (ld.VALUE) <> '-'
                               INNER JOIN attribute_mapping am
                                    ON ld.attribute_mapping_id =am.attribute_mapping_id
                                    and am.include_bom <> 'N'
                               INNER JOIN product_master_details pmd
                                    ON UPPER (lm.product_name) =UPPER (pmd.product_name)
                                    AND parent_group_id = 2
                           ) pvs                     ---Previou Table Name End
                 ON pvs.quote_id = qh.quote_id
                 AND NVL (pvs.site_id, -1) = NVL (lm.site_id, -1)
                 AND pvs.product_id = lm.product_id
                 AND pvs.fallback_type = lm.fallback_type
                 AND NVL (pvs."lm_row_id", -1) = NVL (lm.row_id, -1)
                 AND NVL (pvs."ld_row_id", -1) = NVL (ld.row_id, -1)
                 AND NVL (pvs.part_type, -1) = NVL (lm.part_type, -1)
                 AND pvs.attribute_mapping_id = ld.attribute_mapping_id
                 AND pvs.prod_friendly_id = pmd.prod_friendly_id
--                   LEFT OUTER JOIN
      FULL JOIN
                       (SELECT in_quoteid AS quote_id,
                               in_quoteheaderid AS quote_header_id, lm.site_id,
                               lineitemtemp.product_id, lineitemtemp.product_name,
                               pmd.child_scode, lm.fallback_type, lm.part_type,
                               lm.row_id AS "lm_row_id", ld.row_id AS "ld_row_id",
                               ld.attribute_mapping_id, am.ppsr_attribute,
                               am.sqe_attribute, ld.VALUE, ld.action_code,
                               LD.QUANTITY, PMD.PRODUCT_ID AS PRODUCT_INSTANCE_ID,
                               pmd.prod_friendly_id,qss.PRIMARY,lm.CLASSIC_ELEMENT_ID
                          FROM quote_header qh
                                LEFT OUTER JOIN quote_site qs
                                    ON qh.quote_header_id = qs.quote_header_id
                                    AND qs.active = pkg_constants.con_activeflag_yes
                                    AND qs.site_id = v_site_id
                                INNER JOIN site s ON qs.site_id = s.site_id
                                INNER JOIN quote_line_item_as_is lm
                                  ON lm.quote_header_id = qh.quote_header_id
                                  AND s.site_id = lm.site_id
                                  AND lm.active = pkg_constants.con_activeflag_yes
                                INNER JOIN
                                    (SELECT line_item_id, product_name, product_id
                                    FROM quote_line_item_as_is
                                    WHERE site_id = v_site_id
                                    AND active = pkg_constants.con_activeflag_yes
                                    AND quote_header_id = in_quoteheaderid) lineitemtemp
                                    ON lm.line_item_id = lineitemtemp.line_item_id
                                    AND UPPER (lineitemtemp.product_name) IN (
                                        SELECT DISTINCT UPPER (pmd.product_name)
                                        FROM product_master pm,product_master_details pmd
                                        WHERE pm.parent_group_id =pmd.parent_group_id
                                        AND UPPER (pm.product_name) =UPPER (in_productname)
                                        AND active =pkg_constants.con_activeflag_yes)
                                INNER JOIN product_master_details pmd
                                ON UPPER (lineitemtemp.product_name) =UPPER (pmd.product_name)
                                AND pmd.parent_group_id = 2
                                INNER JOIN quote_line_item_detail_as_is ld
                                ON ld.line_item_id = lm.line_item_id
                                AND ld.attribute_mapping_id NOT IN (3008, 5105, 2886,3007)
                                AND ld.active = pkg_constants.con_activeflag_yes
                                LEFT OUTER JOIN attribute_mapping am
                                on LD.ATTRIBUTE_MAPPING_ID =AM.ATTRIBUTE_MAPPING_ID
                                left outer join QUOTE_SITE_SERVICE QSS
                                ON QSS.QUOTE_HEADER_ID= in_quoteheaderid AND UPPER(QSS.PRODUCT_NAME)=upper(lm.product_name)
                                WHERE qh.quote_header_id = in_quoteheaderid
                                AND UPPER (ld.VALUE) <> '-'
                                AND am.include_bom <> 'N') asis
                 ON asis.quote_header_id = qh.quote_header_id
                 AND NVL (asis.site_id, -1) = NVL (lm.site_id, -1)
                 AND asis.product_id = lm.product_id
                 AND asis.fallback_type = lm.fallback_type
                 AND NVL (asis."lm_row_id", 0) = NVL (lm.row_id, 0)
                 AND NVL (asis."ld_row_id", 0) = NVL (ld.row_id, 0)
                 AND NVL (asis.part_type, -1) = NVL (lm.part_type, -1)
                 AND asis.attribute_mapping_id = ld.attribute_mapping_id
                 AND asis.prod_friendly_id = pmd.prod_friendly_id
    UNION
            --ORDER related line items and attributes
         SELECT COALESCE (qho.quote_id,
                             pvs2.quote_id,
                             asis.quote_id,
                             in_quoteid
                            ) AS "Quote Id",
                   COALESCE (qho.quote_header_id,
                             pvs2.quote_header_id,
                             asis.quote_header_id,
                             in_quoteheaderid
                            ) AS "Quote HeaderID",
                   COALESCE (v_site_id,
                             pvs2.site_id,
                             asis.site_id
                            ) AS "Site ID",
                   COALESCE (oli.product_id,
                             pvs2.product_id,
                             asis.product_id
                            ) AS "Product ID",
                   COALESCE (oli.product_name,
                             pvs2.product_name,
                             asis.product_name
                            ) AS "Product_Name",
                   COALESCE (pmd.child_scode,
                             pvs2.child_scode,
                             asis.child_scode
                            ) AS "Scode",
                   COALESCE (olid.row_id,
                             pvs2.row_id,
                             asis."olid_row_id"
                            ) AS "Row_id",
                   COALESCE (amo.ppsr_attribute,
                             amo.sqe_attribute,
                             pvs2.ppsr_attribute,
                             pvs2.sqe_attribute,
                             asis.ppsr_attribute,
                             asis.sqe_attribute
                            ) AS "Attribute_name",
                   olid.VALUE AS "Attribute_Value",
                   pvs2.VALUE AS "Previous Value",
                   asis.VALUE AS "AS_IS Value",
                   COALESCE (olid.quantity,
                             asis.quantity,
                             pvs2.quantity
                            ) AS "LINE_ITEM_QUANTITY",
                   COALESCE (pmd.product_id,
                             pvs2.product_id,
                             asis.product_id
                            ) AS "Product Instance ID",
                   COALESCE (pmd.product_id || qo.quote_id,
                             pmd.product_id || pvs2.quote_id,
                             pmd.product_id || asis.quote_id
                            ) AS "Project ID",
                   COALESCE
                        (amo.attribute_mapping_id,
                         pvs2.attribute_mapping_id,
                         asis.attribute_mapping_id
                        ) AS "Attribute_mapping_id",
                  COALESCE (PMD.PROD_FRIENDLY_ID || OLID.ROW_ID || QO.QUOTE_ID,
                            PVS2.PROD_FRIENDLY_ID || PVS2.ROW_ID || PVS2.QUOTE_ID,
                            ASIS.PROD_FRIENDLY_ID || ASIS."olid_row_id" || ASIS.QUOTE_ID) AS "Order_line_item_id", ---r15 change
									COALESCE (oli.CLASSIC_ELEMENT_ID , pvs2.CLASSIC_ELEMENT_ID,asis.CLASSIC_ELEMENT_ID)       AS "Service_Instance_Id",
                   (CASE
                       WHEN asis.VALUE IS NOT NULL AND olid.VALUE IS NULL
                          THEN 'Delete'
                       WHEN asis.VALUE IS NULL AND olid.VALUE IS NOT NULL
                          THEN 'Add'
                       WHEN asis.VALUE <> olid.VALUE
                          THEN 'Update'
                       ELSE 'None'
                    end
                   ) as "ACTION"
              FROM quote qo INNER JOIN quote_header qho
                                ON qo.quote_id = qho.quote_id
                                and qho.quote_id = in_quoteid
                              AND qho.quote_header_id = in_quoteheaderid
                            INNER JOIN order_header oh
                                ON qho.quote_header_id = oh.quote_header_id
                            INNER JOIN order_line_item oli
                                ON oh.order_header_id = oli.order_header_id
                                AND (oli.active = pkg_constants.con_activeflag_yes)
                                AND oli.product_id = in_productid
                                AND OLI.SITE_ID    = v_site_id
                            INNER JOIN site so ON oli.site_id = so.site_id
                            INNER JOIN order_line_item_detail olid
                                ON oli.order_line_item_id = olid.order_line_item_id
                                AND (olid.active = pkg_constants.con_activeflag_yes)
                                and UPPER (OLID.value) <> '-'
                                AND olid.attribute_mapping_id <>3007  ---Add
                            INNER JOIN attribute_mapping amo
                                ON olid.attribute_mapping_id = amo.attribute_mapping_id
                                AND UPPER (amo.include_bom) <> 'N'
                            INNER JOIN product_master_details pmd
                                ON UPPER (oli.product_name) = UPPER (pmd.product_name)
                                AND pmd.parent_group_id = 2
                                and pmd.active = pkg_constants.con_activeflag_yes
--                           LEFT OUTER JOIN
      FULL JOIN
                               (SELECT in_quoteid AS quote_id,
                                       in_quoteheaderid AS quote_header_id, olm.site_id,
                                       olm.product_id, olm.product_name, pmd.child_scode,
                                       olm.fallback_type, olid.row_id, amo.ppsr_attribute,
                                       amo.sqe_attribute, olid.attribute_mapping_id,
                                       OLID.VALUE, PMD.PROD_FRIENDLY_ID, OLID.QUANTITY,
                                       olid.order_line_item_id,olm.CLASSIC_ELEMENT_ID
                          FROM order_header oh INNER JOIN quote_header qh
                                      ON oh.quote_header_id = qh.quote_header_id
                                INNER JOIN quote q ON qh.quote_id = q.quote_id
                                INNER JOIN quote_header tobeqh
                                      ON qh.quote_id = tobeqh.quote_id
                                      AND qh.VERSION = tobeqh.expedio_parent_version
                                      AND tobeqh.quote_id = in_quoteid
																			AND tobeqh.quote_header_id = in_quoteheaderid
                                INNER JOIN order_line_item olm
                                      ON olm.order_header_id = oh.order_header_id
                                      AND olm.active = pkg_constants.con_activeflag_yes
                                      AND olm.product_id = in_productid
                                      AND OLM.SITE_id       = v_site_id
                                INNER JOIN order_line_item_detail olid
                                      ON olid.order_line_item_id = olm.order_line_item_id
                                      AND olid.active = pkg_constants.con_activeflag_yes
                                      AND olid.VALUE <> '-'
                                INNER JOIN attribute_mapping amo
                                      ON olid.attribute_mapping_id =amo.attribute_mapping_id
                                      AND UPPER (amo.include_bom) <> 'N'
                                INNER JOIN product_master_details pmd
                                      ON UPPER (olm.product_name) =UPPER (pmd.product_name)
                                      AND pmd.parent_group_id = 2
                                      AND pmd.active = pkg_constants.con_activeflag_yes
                               ) pvs2
                 ON pvs2.quote_id = qho.quote_id
                 AND NVL (pvs2.site_id, -1) = NVL (oli.site_id, -1)
                 AND pvs2.fallback_type = oli.fallback_type
                 AND NVL (pvs2.row_id, -1) = NVL (olid.row_id, -1)
                 AND pvs2.attribute_mapping_id = olid.attribute_mapping_id
                 AND pvs2.product_id = oli.product_id
                 AND pvs2.prod_friendly_id = pmd.prod_friendly_id
--                 LEFT OUTER JOIN
      FULL JOIN
                   (SELECT in_quoteid AS quote_id,
                           in_quoteheaderid AS quote_header_id, olm.site_id,
                           olm.product_id, olm.product_name, pmd.child_scode,
                           olm.fallback_type, olm.row_id AS "olm_row_id",
                           olid.row_id AS "olid_row_id",
                           olid.attribute_mapping_id, amo.ppsr_attribute,
                           amo.sqe_attribute, olid.VALUE, olid.action_code,
                           olid.quantity,
                           PMD.PRODUCT_ID AS PRODUCT_INSTANCE_ID,
                           pmd.prod_friendly_id,qss.PRIMARY,olm.CLASSIC_ELEMENT_ID
                      FROM quote_header qh LEFT OUTER JOIN quote_site qs
                           ON qh.quote_header_id = qs.quote_header_id
                           AND qs.active = pkg_constants.con_activeflag_yes
                           INNER JOIN site so ON qs.site_id = so.site_id
                           LEFT OUTER JOIN order_header oh
                           ON qh.quote_header_id = oh.quote_header_id
                           INNER JOIN order_line_item_as_is olm
                           ON olm.quote_header_id = oh.quote_header_id
                         AND so.site_id = olm.site_id
                         AND olm.active = pkg_constants.con_activeflag_yes
                         AND UPPER (olm.product_name) IN (
                                SELECT DISTINCT UPPER (pmd.product_name)
                                           FROM product_master pm,
                                                product_master_details pmd
                                          WHERE pm.parent_group_id =pmd.parent_group_id
                                            AND UPPER (pm.product_name) =UPPER (in_productname)
                                            AND pmd.parent_group_id = 2
                                            AND active =pkg_constants.con_activeflag_yes)
                                          INNER JOIN product_master_details pmd
                                          ON UPPER (olm.product_name) =UPPER (pmd.product_name)
                                          AND pmd.parent_group_id = 2
                                          AND pmd.active          = pkg_constants.con_activeflag_yes
                                          INNER JOIN order_line_item_detail_as_is olid
                                          ON olid.order_line_item_id = olm.order_line_item_id
                                          AND olid.active         = pkg_constants.con_activeflag_yes
                                          LEFT OUTER JOIN attribute_mapping amo
                                          on OLID.ATTRIBUTE_MAPPING_ID =AMO.ATTRIBUTE_MAPPING_ID
                                          left outer join QUOTE_SITE_SERVICE QSS
                                          ON QSS.QUOTE_HEADER_ID= in_quoteheaderid AND UPPER(QSS.PRODUCT_NAME)=upper(olm.product_name)
                                          WHERE qh.quote_header_id = in_quoteheaderid
                                          AND UPPER (olid.VALUE) <> '-'
                              AND amo.include_bom <> 'N') asis
                   ON asis.quote_header_id = qho.quote_header_id
                 AND NVL (asis.site_id, -1) = NVL (oli.site_id, -1)
                 AND asis.product_id = oli.product_id
                 AND asis.fallback_type = oli.fallback_type
                 AND NVL (asis."olm_row_id", 0) = NVL (oli.row_id, 0)
                 AND NVL (asis."olid_row_id", 0) = NVL (olid.row_id, 0)
                 AND asis.attribute_mapping_id = olid.attribute_mapping_id
                 AND asis.prod_friendly_id = pmd.prod_friendly_id
   UNION
             SELECT
                      in_quoteid           AS "Quote_id",
                      in_quoteheaderid     AS "Quote_header_id",
                      v_site_id            AS "Site_id",
                      lm.product_id        AS "Product_id",
                      lm.product_name      AS "Product_Name",
                      pmd.child_scode      AS "Scode",
                      ld.row_id            AS "row_id",
                      am.ppsr_attribute    AS "Attribute_name",
                      ld.VALUE             AS "ATTRIBUTE_VALUE",
                      ld.VALUE             AS "Previous Value",
                      NULL                 AS "AS_IS_VALUE",
                      nvl (ld.quantity, 1) AS "LINE_ITEM_QUANTITY",
                      pmd.product_id       AS "Product Instance ID",
                      pmd.product_id || q.quote_id           AS "Project ID",
                      AM.ATTRIBUTE_MAPPING_ID AS "Attribute_Mapping_Id",
                      PMD.PROD_FRIENDLY_ID || LD.ROW_ID|| Q.QUOTE_ID as "Order_line_item_id",lm.CLASSIC_ELEMENT_ID,
                      'None'        AS "ACTION"
                    FROM quote q
                    INNER JOIN quote_header qh
                    ON q.quote_id  = qh.quote_id
                    AND q.quote_id = in_quoteid
                    AND qh.VERSION = '1.0'
                    INNER JOIN line_item lm
                    ON qh.quote_header_id = lm.quote_header_id
                    AND lm.product_id     = in_productid
                    AND lm.active         ='Y'
                    INNER JOIN line_item_detail ld
                    ON lm.line_item_id           = ld.line_item_id
                    AND ld.attribute_mapping_id IN (3008, 5105)
                    AND ld.active                ='Y'
                    AND upper (ld.VALUE)        <> '-'
                    INNER JOIN attribute_mapping am
                    ON (ld.attribute_mapping_id  = am.attribute_mapping_id)
                    AND am.include_bom          <> 'N'
                    AND am.attribute_mapping_id IN (3008, 5105)
                    AND am.active                = 'Y'
                    INNER JOIN product_master_details pmd
                    ON upper (lm.product_name)  = upper (pmd.product_name)
                    AND parent_group_id         = 2
                    AND upper(pmd.product_name) =UPPER (in_productname)
              UNION
              SELECT
                    in_quoteid                                      AS "Quote_id",
                    in_quoteheaderid                                AS "Quote_header_id",
                    v_site_id                                       AS "Site_id",
                    oli.product_id                                  AS "Product_id",
                    oli.product_name                                AS "Product_Name",
                    pmd.child_scode                                 AS "Scode",
                    oli.row_id                                      AS "row_id",
                    COALESCE (am.ppsr_attribute, am.sqe_attribute ) AS "Attribute_name",
                    olid.VALUE                                      AS "ATTRIBUTE_VALUE",
                    olid.VALUE                                      AS "Previous Value",
                    NULL                                            AS "AS_IS_VALUE",
                    nvl (oli.quantity, 1)                           AS "LINE_ITEM_QUANTITY",
                    oli.product_id                                  AS "Product Instance ID",
                    oli.product_id|| in_quoteid                     AS "Project ID",
                    OLID.ATTRIBUTE_MAPPING_ID                       AS "Attribute_Mapping_Id",
                    PMD.PROD_FRIENDLY_ID|| OLI.ROW_ID|| IN_QUOTEID as "Order_line_item_id",oli.CLASSIC_ELEMENT_ID,
                    'None'                                          AS "ACTION"
                  FROM order_line_item oli
                  INNER JOIN order_line_item_detail olid
                  ON olid.order_line_item_id  = oli.order_line_item_id
                  AND upper(oli.product_name) =UPPER (in_productname)
                  AND oli.order_header_id     =
                    (SELECT order_header_id
                    FROM order_header
                    WHERE upper(product_name) =UPPER (in_productname)
                    AND quote_header_id       =
                          (SELECT quote_header_id
                          FROM quote_header
                          WHERE quote_id = in_quoteid
                          AND VERSION    = '1.0' )
                    )
                  AND olid.active               ='Y'
                  AND oli.active                ='Y'
                  AND olid.attribute_mapping_id =3007
                  INNER JOIN attribute_mapping am
                  ON (olid.attribute_mapping_id = am.attribute_mapping_id)
                  AND am.include_bom           <> 'N'
                  AND am.attribute_mapping_id   =3007
                  AND am.active                 = 'Y'
                  INNER JOIN product_master_details pmd
                  ON upper (oli.product_name) = upper (pmd.product_name)
                  AND parent_group_id         = 2
                  AND upper(pmd.product_name) =UPPER (in_productname);
      END IF;
   ELSE   ----only of the Provide and ASIS process
      OPEN out_mg_attr FOR
        SELECT COALESCE (q.quote_id,
                          pvs.quote_id,
                          asis.quote_id
                         ) AS "Quote_id",
                COALESCE (qh.quote_header_id,
                          pvs.quote_header_id,
                          asis.quote_header_id
                         ) AS "Quote_header_id",
                COALESCE (qs.site_id, pvs.site_id, asis.site_id) AS "Site_id",
                COALESCE (lm.product_id,
                          pvs.product_id,
                          asis.product_id
                         ) AS "Product_id",
                COALESCE (lm.product_name,
                                 pvs.product_name,
                                 asis.product_name
                          )
                       AS "Product_Name",
                COALESCE (pmd.child_scode,
                          pvs.child_scode,
                          asis.child_scode
                         ) AS "Scode",
                COALESCE (ld.row_id,
                          pvs."ld_row_id",
                          asis."ld_row_id"
                         ) AS "row_id",
                COALESCE (am.ppsr_attribute,
                          am.sqe_attribute,
                          pvs.ppsr_attribute,
                          pvs.sqe_attribute,
                          asis.ppsr_attribute,
                          asis.sqe_attribute
                         ) AS "Attribute_name",
                ld.VALUE AS "ATTRIBUTE_VALUE", pvs.VALUE AS "Previous Value",
                asis.VALUE AS "AS_IS_VALUE",
                NVL (COALESCE (ld.quantity, pvs.quantity, asis.quantity),
                     1) AS "LINE_ITEM_QUANTITY",
                COALESCE (pmd.product_id,
                          pvs.product_id,
                          asis.product_id
                         ) AS "Product Instance ID",
                COALESCE (pmd.product_id || q.quote_id,
                          pmd.product_id || pvs.quote_id,
                          pmd.product_id || asis.quote_id
                         ) AS "Project ID",
                COALESCE (am.attribute_mapping_id,
                          pvs.attribute_mapping_id,
                          asis.attribute_mapping_id
                         ) AS "Attribute_Mapping_Id",
                 COALESCE (PMD.PROD_FRIENDLY_ID || LD.ROW_ID || Q.QUOTE_ID,
                          PVS.PROD_FRIENDLY_ID || PVS."ld_row_id" || PVS.QUOTE_ID,
                          ASIS.PROD_FRIENDLY_ID || ASIS."ld_row_id" || ASIS.QUOTE_ID ) AS "Order_line_item_id",  --r15,
                 COALESCE (lm.CLASSIC_ELEMENT_ID , pvs.CLASSIC_ELEMENT_ID,asis.CLASSIC_ELEMENT_ID)       AS "Service_Instance_Id",
                (CASE
                    WHEN ld.VALUE IS NULL AND asis.VALUE IS NOT NULL
                       THEN 'Delete'
                    WHEN asis.VALUE IS NULL AND ld.VALUE IS NOT NULL
                       THEN 'Add'
                    WHEN asis.VALUE <> ld.VALUE
                       THEN 'Update'
                    ELSE 'None'
                 END
                ) as "ACTION"
           FROM quote q INNER JOIN quote_header qh
                ON q.quote_id = qh.quote_id
                AND q.quote_id = in_quoteid
                AND qh.quote_header_id = in_quoteheaderid
                INNER JOIN quote_site qs
                ON qh.quote_header_id = qs.quote_header_id
                AND qs.active = pkg_constants.con_activeflag_yes
                INNER JOIN line_item lm
                ON qh.quote_header_id = lm.quote_header_id
                AND qs.site_id = lm.site_id
                AND lm.product_id = in_productid
                AND lm.active = pkg_constants.con_activeflag_yes
                INNER JOIN line_item_detail ld
                ON lm.line_item_id = ld.line_item_id
                AND ld.active = pkg_constants.con_activeflag_yes
                AND UPPER (ld.VALUE) <> '-'
                INNER JOIN attribute_mapping am
                ON ld.attribute_mapping_id = am.attribute_mapping_id
                AND am.include_bom <> 'N'
                INNER JOIN product_master_details pmd
                ON UPPER (lm.product_name) = UPPER (pmd.product_name)
                AND parent_group_id = 2
                FULL OUTER JOIN
                (SELECT qh.quote_id, qh.quote_header_id, qs.site_id,
                        lm.product_id, lm.product_name, pmd.child_scode,
                        lm.fallback_type, lm.part_type,
                        lm.row_id AS "lm_row_id", ld.row_id AS "ld_row_id",
                        ld.attribute_mapping_id, am.ppsr_attribute,
                        am.sqe_attribute, ld.VALUE, ld.action_code,
                        LD.QUANTITY, PMD.PRODUCT_ID AS "product_instance_id",
                        pmd.prod_friendly_id, ld.line_item_id,lm.CLASSIC_ELEMENT_ID
                   FROM quote_header qh INNER JOIN quote_header tobeqh
                        ON qh.quote_id = tobeqh.quote_id
                        AND qh.VERSION = tobeqh.expedio_parent_version
                        AND tobeqh.quote_id = in_quoteid
                        AND tobeqh.quote_header_id = in_quoteheaderid
                        INNER JOIN quote_site qs
                        ON qh.quote_header_id = qs.quote_header_id
                        AND qs.active = pkg_constants.con_activeflag_yes
                        INNER JOIN line_item lm
                        ON qh.quote_header_id = lm.quote_header_id
                        AND qs.site_id = lm.site_id
                        AND (lm.active = pkg_constants.con_activeflag_yes)
                        AND lm.product_id = in_productid
                        INNER JOIN line_item_detail ld
                        ON lm.line_item_id = ld.line_item_id
                        AND (ld.active = pkg_constants.con_activeflag_yes)
                        AND UPPER (ld.VALUE) <> '-'
                        INNER JOIN attribute_mapping am
                        ON ld.attribute_mapping_id = am.attribute_mapping_id
                        AND am.include_bom <> 'N'
                        INNER JOIN product_master_details pmd
                        ON UPPER (lm.product_name) = UPPER (pmd.product_name)
                        AND parent_group_id = 2
                        ) pvs  ---Previou Table Name End
                ON pvs.quote_id = qh.quote_id
              AND NVL (pvs.site_id, -1) = NVL (lm.site_id, -1)
              AND pvs.product_id = lm.product_id
              AND pvs.fallback_type = lm.fallback_type
              AND NVL (pvs."lm_row_id", -1) = NVL (lm.row_id, -1)
              AND NVL (pvs."ld_row_id", -1) = NVL (ld.row_id, -1)
              AND NVL (pvs.part_type, -1) = NVL (lm.part_type, -1)
              AND pvs.attribute_mapping_id = ld.attribute_mapping_id
              AND pvs.prod_friendly_id = pmd.prod_friendly_id
               FULL OUTER JOIN
                (SELECT qh.quote_id, qh.quote_header_id, lm.site_id,
                        lineitemtemp.product_id, lineitemtemp.product_name,
                        pmd.child_scode, lm.fallback_type, lm.part_type,
                        lm.row_id AS "lm_row_id", ld.row_id AS "ld_row_id",
                        ld.attribute_mapping_id, am.ppsr_attribute,
                        am.sqe_attribute, ld.VALUE, ld.action_code,
                        LD.QUANTITY, PMD.PRODUCT_ID AS PRODUCT_INSTANCE_ID,
                        pmd.prod_friendly_id,qss.PRIMARY,lm.CLASSIC_ELEMENT_ID
                   FROM quote_header qh LEFT OUTER JOIN quote_site qs
                        ON qh.quote_header_id = qs.quote_header_id
                        AND qs.active = pkg_constants.con_activeflag_yes
                        INNER JOIN site s ON qs.site_id = s.site_id
                        INNER JOIN quote_line_item_as_is lm
                        ON lm.quote_header_id = qh.quote_header_id
                        AND s.site_id = lm.site_id
                        AND lm.active = pkg_constants.con_activeflag_yes
                        INNER JOIN
                        (SELECT line_item_id, product_name, product_id
                           FROM quote_line_item_as_is) lineitemtemp
                        ON lm.line_item_id = lineitemtemp.line_item_id
                      AND UPPER (lineitemtemp.product_name) IN (
                             SELECT DISTINCT UPPER (pmd.product_name)
                                        FROM product_master pm,
                                             product_master_details pmd
                                       WHERE pm.parent_group_id = pmd.parent_group_id
                                         AND UPPER (pm.product_name) = UPPER (in_productname)
                                         AND active = pkg_constants.con_activeflag_yes)
                        INNER JOIN product_master_details pmd
                        ON UPPER (lineitemtemp.product_name) =UPPER (pmd.product_name)
                        AND pmd.parent_group_id = 2
                        INNER JOIN quote_line_item_detail_as_is ld
                        ON ld.line_item_id = lm.line_item_id
                        AND ld.active = pkg_constants.con_activeflag_yes
                        LEFT OUTER JOIN attribute_mapping am
                        on LD.ATTRIBUTE_MAPPING_ID = AM.ATTRIBUTE_MAPPING_ID
                        left outer join QUOTE_SITE_SERVICE QSS
                        ON QSS.QUOTE_HEADER_ID= in_quoteheaderid AND UPPER(QSS.PRODUCT_NAME)=upper(lm.product_name)
                  WHERE qh.quote_header_id = in_quoteheaderid
                    AND UPPER (ld.VALUE) <> '-'
                    AND am.include_bom <> 'N') asis
                ON asis.quote_header_id = qh.quote_header_id
              AND NVL (asis.site_id, -1) = NVL (lm.site_id, -1)
              AND asis.product_id = lm.product_id
              AND asis.fallback_type = lm.fallback_type
              AND NVL (asis."lm_row_id", 0) = NVL (lm.row_id, 0)
              AND NVL (asis."ld_row_id", 0) = NVL (ld.row_id, 0)
              AND NVL (asis.part_type, -1) = NVL (lm.part_type, -1)
              AND asis.attribute_mapping_id = ld.attribute_mapping_id
              AND asis.prod_friendly_id = pmd.prod_friendly_id
         UNION ALL
   --ORDER related line items and attributes
         SELECT COALESCE (qho.quote_id,
                          pvs2.quote_id,
                          asis.quote_id
                         ) AS "Quote Id",
                COALESCE (qho.quote_header_id,
                          pvs2.quote_header_id,
                          asis.quote_header_id
                         ) AS "Quote HeaderID",
                COALESCE (oli.site_id,
                          pvs2.site_id,
                          asis.site_id
                         ) AS "Site ID",
                COALESCE (oli.product_id,
                          pvs2.product_id,
                          asis.product_id
                         ) AS "Product ID",
                COALESCE (oli.product_name,
                                 pvs2.product_name,
                                 asis.product_name
                                ) AS "Product_Name",
                COALESCE (pmd.child_scode,
                          pvs2.child_scode,
                          asis.child_scode
                         ) AS "Scode",
                COALESCE (olid.row_id,
                          pvs2.row_id,
                          asis."olid_row_id"
                         ) AS "Row_id",
                COALESCE (amo.ppsr_attribute,
                          amo.sqe_attribute,
                          pvs2.ppsr_attribute,
                          pvs2.sqe_attribute,
                          asis.ppsr_attribute,
                          asis.sqe_attribute
                         ) AS "Attribute_name",
                olid.VALUE AS "Attribute_Value",
                pvs2.VALUE AS "Previous Value", asis.VALUE AS "AS_IS Value",
                COALESCE (olid.quantity,
                          asis.quantity,
                          pvs2.quantity
                         ) AS "LINE_ITEM_QUANTITY",
                COALESCE (pmd.product_id,
                          pvs2.product_id,
                          asis.product_id
                         ) AS "Product Instance ID",
                COALESCE (pmd.product_id || qo.quote_id,
                          pmd.product_id || pvs2.quote_id,
                          pmd.product_id || asis.quote_id
                         ) AS "Project ID",
                COALESCE
                        (amo.attribute_mapping_id,
                         pvs2.attribute_mapping_id,
                         asis.attribute_mapping_id
                        ) AS "Attribute_mapping_id",
              COALESCE (PMD.PROD_FRIENDLY_ID || OLID.ROW_ID || QO.QUOTE_ID,
                        PVS2.PROD_FRIENDLY_ID || PVS2.ROW_ID || PVS2.QUOTE_ID,
                        ASIS.PROD_FRIENDLY_ID || ASIS."olid_row_id" || ASIS.QUOTE_ID
                        ) AS "Order_line_item_id", ---r15 change
							COALESCE (oli.CLASSIC_ELEMENT_ID , pvs2.CLASSIC_ELEMENT_ID,asis.CLASSIC_ELEMENT_ID)       AS "Service_Instance_Id",
                (CASE
                    WHEN asis.VALUE IS NOT NULL AND olid.VALUE IS NULL
                       THEN 'Delete'
                    WHEN asis.VALUE IS NULL AND olid.VALUE IS NOT NULL
                       THEN 'Add'
                    WHEN asis.VALUE <> olid.VALUE
                       THEN 'Update'
                    ELSE 'None'
                 END
                ) as "ACTION"
           FROM quote qo INNER JOIN quote_header qho
                ON qo.quote_id = qho.quote_id
                AND qho.quote_id = in_quoteid
                AND qho.quote_header_id = in_quoteheaderid
                INNER JOIN order_header oh
                ON qho.quote_header_id = oh.quote_header_id
                INNER JOIN order_line_item oli
                ON oh.order_header_id = oli.order_header_id
                AND (oli.active = pkg_constants.con_activeflag_yes)
                AND oli.product_id = in_productid
                INNER JOIN site so ON oli.site_id = so.site_id
                INNER JOIN order_line_item_detail olid
                ON oli.order_line_item_id = olid.order_line_item_id
                AND (olid.active = pkg_constants.con_activeflag_yes)
                AND UPPER (olid.VALUE) <> '-'
                INNER JOIN attribute_mapping amo
                ON olid.attribute_mapping_id = amo.attribute_mapping_id
                AND UPPER (amo.include_bom) <> 'N'
                INNER JOIN product_master_details pmd
                ON UPPER (oli.product_name) = UPPER (pmd.product_name)
                AND pmd.parent_group_id = 2
                AND pmd.active = pkg_constants.con_activeflag_yes
                FULL OUTER JOIN
                (SELECT q.quote_id, qh.quote_header_id, olm.site_id,
                        olm.product_id, olm.product_name, pmd.child_scode,
                        olm.fallback_type, olid.row_id, amo.ppsr_attribute,
                        amo.sqe_attribute, olid.attribute_mapping_id,
                        OLID.VALUE, PMD.PROD_FRIENDLY_ID, OLID.QUANTITY,
                        olid.order_line_item_id,OLM.CLASSIC_ELEMENT_ID
                   FROM order_header oh INNER JOIN quote_header qh
                        ON oh.quote_header_id = qh.quote_header_id
                        INNER JOIN quote q ON qh.quote_id = q.quote_id
                        INNER JOIN quote_header tobeqh
                        ON qh.quote_id = tobeqh.quote_id
                        AND qh.VERSION = tobeqh.expedio_parent_version
                        AND tobeqh.quote_id = in_quoteid
                        AND tobeqh.quote_header_id = in_quoteheaderid
                        INNER JOIN order_line_item olm
                        ON olm.order_header_id = oh.order_header_id
                        AND olm.active = pkg_constants.con_activeflag_yes
                        AND olm.product_id = in_productid
                        INNER JOIN order_line_item_detail olid
                        ON olid.order_line_item_id = olm.order_line_item_id
                        AND olid.active = pkg_constants.con_activeflag_yes
                        AND olid.VALUE <> '-'
                        INNER JOIN attribute_mapping amo
                        ON olid.attribute_mapping_id =amo.attribute_mapping_id
                        AND UPPER (amo.include_bom) <> 'N'
                        INNER JOIN product_master_details pmd
                        ON UPPER (olm.product_name) = UPPER (pmd.product_name)
                        AND pmd.parent_group_id = 2
                        AND pmd.active = pkg_constants.con_activeflag_yes
                        ) pvs2
                ON pvs2.quote_id = qho.quote_id
              AND NVL (pvs2.site_id, -1) = NVL (oli.site_id, -1)
              AND pvs2.fallback_type = oli.fallback_type
              AND NVL (pvs2.row_id, -1) = NVL (olid.row_id, -1)
              AND pvs2.attribute_mapping_id = olid.attribute_mapping_id
              AND pvs2.product_id = oli.product_id
              AND pvs2.prod_friendly_id = pmd.prod_friendly_id
                FULL OUTER JOIN
                (SELECT qh.quote_id, qh.quote_header_id, olm.site_id,
                        olm.product_id, olm.product_name, pmd.child_scode,
                        olm.fallback_type, olm.row_id AS "olm_row_id",
                        olid.row_id AS "olid_row_id",
                        olid.attribute_mapping_id, amo.ppsr_attribute,
                        amo.sqe_attribute, olid.VALUE, olid.action_code,
                        OLID.QUANTITY, PMD.PRODUCT_ID AS PRODUCT_INSTANCE_ID,
                        pmd.prod_friendly_id,qss.PRIMARY,olm.CLASSIC_ELEMENT_ID
                   FROM quote_header qh LEFT OUTER JOIN quote_site qs
                        ON qh.quote_header_id = qs.quote_header_id
                        AND qs.active = pkg_constants.con_activeflag_yes
                        INNER JOIN site so ON qs.site_id = so.site_id
                        LEFT OUTER JOIN order_header oh
                        ON qh.quote_header_id = oh.quote_header_id
                        INNER JOIN order_line_item_as_is olm
                        ON olm.quote_header_id = oh.quote_header_id
                        AND so.site_id = olm.site_id
                        AND olm.active = pkg_constants.con_activeflag_yes
                      AND UPPER (olm.product_name) IN (
                             SELECT DISTINCT UPPER (pmd.product_name)
                                        FROM product_master pm,
                                             product_master_details pmd
                                       WHERE pm.parent_group_id =pmd.parent_group_id
                                         AND UPPER (pm.product_name) =UPPER (in_productname)
                                         AND pmd.parent_group_id = 2
                                         AND active =pkg_constants.con_activeflag_yes)
                        INNER JOIN product_master_details pmd
                        ON UPPER (olm.product_name) = UPPER (pmd.product_name)
                        AND pmd.parent_group_id = 2
                        AND pmd.active = 'Y'
                        INNER JOIN order_line_item_detail_as_is olid
                        ON olid.order_line_item_id = olm.order_line_item_id
                        AND olid.active = pkg_constants.con_activeflag_yes
                        LEFT OUTER JOIN attribute_mapping amo
                        on OLID.ATTRIBUTE_MAPPING_ID = AMO.ATTRIBUTE_MAPPING_ID
                        left outer join QUOTE_SITE_SERVICE QSS
                        ON QSS.QUOTE_HEADER_ID= in_quoteheaderid AND UPPER(QSS.PRODUCT_NAME)=upper(olm.product_name)
                        where QH.QUOTE_HEADER_ID = IN_QUOTEHEADERID
                        AND UPPER (olid.VALUE) <> '-'
                    AND amo.include_bom <> 'N') asis
                ON asis.quote_header_id = qho.quote_header_id
              AND NVL (asis.site_id, -1) = NVL (oli.site_id, -1)
              AND asis.product_id = oli.product_id
              AND asis.fallback_type = oli.fallback_type
              AND NVL (ASIS."olm_row_id", 0) = NVL (OLI.ROW_ID, 0)
              AND NVL (asis."olid_row_id", 0) = NVL (olid.row_id, 0)
              AND ASIS.ATTRIBUTE_MAPPING_ID = OLID.ATTRIBUTE_MAPPING_ID
              AND asis.prod_friendly_id = pmd.prod_friendly_id;
   END IF;
EXCEPTION
   WHEN OTHERS
   THEN
      out_errmsg := SUBSTR (SQLERRM, 1, 150);
      v_sql_code := SQLCODE;
      pkg_common.spi_error_log (in_quoteid,
                                in_quoteheaderid,
                                in_productid,
                                in_productname,
                                'pkg_bom_gen',
                                'sps_mg_attr',
                                v_sql_code,
                                out_errmsg
                               );
END;

-------MX End  Product - Attributes part

   -------MX   Product - Pricing part ends
   PROCEDURE sps_mg_pricing (
      in_quoteid         IN       quote.quote_id%TYPE,
      in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
      in_productid       IN       line_item.product_id%TYPE,
      in_productname     IN       line_item.product_name%TYPE,
      out_mg_pricing     OUT      sys_refcursor
   )
   as
/******************************************************************************
   NAME:       SQE Mobile Express -MX select Query for BOM.
   PURPOSE:    Pricing

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        09/09/2010   Suman           1. Change the Active Flage checking in the SP
  ******************************************************************************/
   v_channel_type customer.channel_type%type;
   BEGIN
       BEGIN
        SELECT upper(channel_type) INTO v_channel_type FROM
          quote q ,
          customer cu WHERE
          cu.customer_id = q.customer_id
          AND q.quote_id=in_quoteid;
       END;
      IF  v_channel_type='DIRECT' THEN
      OPEN out_mg_pricing FOR
         SELECT NVL (tobe.quote_id, asis.quote_id) AS quote_id,
                NVL (tobe.quote_header_id,
                     asis.quote_header_id
                    ) AS quote_header_id,
                NVL (tobe.site_id, asis.site_id) AS site_id,
                NVL (tobe.product_id, asis.product_id) AS product_id,
                NVL (UPPER (tobe.product_name),
                     UPPER (asis.product_name)
                    ) AS "Product_Name",
                NVL (tobe.domain, asis.domain) AS "DOMAIN",
                NVL (UPPER (tobe.scode), UPPER (asis.scode)) AS scode,
                NVL (tobe.fallback_type, asis.fallback_type)
                                                            AS fallback_type,
                NVL (tobe.row_id, asis.row_id) AS row_id,
                NVL (tobe.price_line_description,
                     asis.price_line_description
                    ) AS "PRICE LINE DESCRIPTION",
                NVL (tobe.ppsr_description,
                     asis.ppsr_description
                    ) AS "PPSR_DESCRIPTION",
                NVL (tobe.ppsr_id, asis.ppsr_id) AS "PPSR_ID",
                NVL (tobe.eup_price, asis.eup_price) AS "EUP PRICE",
                NVL (tobe.eup_net_price,
                     asis.eup_net_price
                    ) AS "EUP NET PRICE",
                NVL (tobe.eup_discount, asis.eup_discount) AS "EUP DISCOUNT",
                NVL (tobe.ptp_price, asis.ptp_price) AS "PTP PRICE",
                NVL (tobe.ptp_net_price,
                     asis.ptp_net_price
                    ) AS "PTP NET PRICE",
                NVL (tobe.ptpdiscount, asis.ptpdiscount) AS "PTPDISCOUNT",
                NVL (tobe.ptp_price_book_version,
                     asis.ptp_price_book_version
                    ) AS "PTP PRICE BOOK VERSION",
                NVL (tobe.eup_price_book_version,
                     asis.eup_price_book_version
                    ) AS "EUP PRICE BOOK VERSION",
                NVL (tobe.ptp_quantity, asis.ptp_quantity) AS "PTP QUANTITY",
                NVL (tobe.eup_quantity, asis.eup_quantity) AS "EUP QUANTITY",
                NVL (tobe.currency, asis.currency) AS "CURRENCY",
--                (CASE
--                    WHEN (    asis.price_line_item_id IS NOT NULL
--                          AND tobe.price_line_item_id IS NULL
--                         )
--                       THEN 'Delete'
--                    WHEN (    asis.price_line_item_id IS NULL
--                          AND tobe.price_line_item_id IS NOT NULL
--                         )
--                       THEN 'Add'
--                    WHEN ( --asis.price_line_item_id <> tobe.price_line_item_id
--                           asis.price_line_item_id = tobe.price_line_item_id
--                          AND (   asis.eup_price != tobe.eup_price
--                               OR asis.ptp_price != tobe.ptp_price
--                              )
--                         )
--                       THEN 'Update'
--                    ELSE 'None'
--                 END
--                ) AS "ACTION"
                            (CASE
                            WHEN (asis.price_line_item_id IS NOT NULL
                             AND tobe.price_line_item_id IS NULL)      THEN 'Delete'

                            WHEN (asis.price_line_item_id IS NULL
                             AND tobe.price_line_item_id IS NOT NULL ) THEN 'Add'

                            WHEN ( asis.price_line_item_id = tobe.price_line_item_id
                                AND ( asis.eup_price != tobe.eup_price
                                OR asis.ptp_price != tobe.ptp_price)) THEN 'Add'

                            WHEN ( asis.price_line_item_id != tobe.price_line_item_id
                                AND ( asis.eup_price != tobe.eup_price
                                OR asis.ptp_price != tobe.ptp_price)) THEN 'Delete'

                            ELSE 'None'
                                END
                             ) AS "ACTION"

           FROM (SELECT DISTINCT q.quote_id, qh.quote_header_id, s.site_id,
                                 lm.product_id,
                                 lm.product_name "PRODUCT_NAME",
                                 eup.charge_type AS "DOMAIN",
                                 UPPER (pli.scode) AS scode,
                                 lm.fallback_type,
                                 NVL (lm.row_id, 0) AS "ROW_ID",
                                 pli.price_line_description
                                                 AS "PRICE_LINE_DESCRIPTION",
                                 pli.ppsr_description AS "PPSR_DESCRIPTION",
                                 pli.ppsr_id AS "PPSR_ID",
                                 eup.price AS "EUP_PRICE",
                                 eup.net_price AS "EUP_NET_PRICE",
                                 eup.discount AS "EUP_DISCOUNT",
                                 ptp.price AS "PTP_PRICE",
                                 ptp.net_price AS "PTP_NET_PRICE",
                                 ptp.discount_proposed AS "PTPDISCOUNT",
                                 cp.ptp_price_book_version
                                                 AS "PTP_PRICE_BOOK_VERSION",
                                 cp.eup_price_book_version
                                                 AS "EUP_PRICE_BOOK_VERSION",
                                 ptp.quantity AS "PTP_QUANTITY",
                                 eup.quantity AS "EUP_QUANTITY",
                                 eup.currency AS "CURRENCY",
                                 pli.price_line_item_id
                            FROM quote q INNER JOIN  quote_header qh
                                 ON q.quote_id = qh.quote_id
                                 INNER JOIN line_item lm
                                 ON qh.quote_header_id = lm.quote_header_id
                                  AND lm.active = pkg_constants.con_activeflag_yes
                                 LEFT OUTER JOIN site s
                                 ON lm.site_id = s.site_id
                                 AND lm.quote_header_id = in_quoteheaderid
                                 LEFT OUTER JOIN price_line_item_detail eup
                                 ON lm.line_item_id = eup.line_item_id
                                AND  NVL (eup.ptp_eup, 'EUP') = 'EUP'
                                AND eup.active =pkg_constants.con_activeflag_yes
                                 LEFT OUTER JOIN price_line_item_detail ptp
                                 ON LM.LINE_ITEM_ID = PTP.LINE_ITEM_ID
                               AND NVL(ptp.ptp_eup,'PTP') = 'PTP'
                               AND eup.price_line_item_id =ptp.price_line_item_id
                                 INNER JOIN price_line_item pli
                                 ON eup.price_line_item_id =pli.price_line_item_id
                                 INNER JOIN customer_product cp
                                 ON cp.quote_header_id =qh.quote_header_id
                               AND UPPER (cp.product_name) =UPPER (in_productname)
                           WHERE q.quote_id = in_quoteid
                             AND qh.quote_header_id = in_quoteheaderid
                             AND lm.product_id = in_productid
                             AND eup.price_line_item_id NOT BETWEEN 530 AND 539
                             AND eup.price_line_item_id NOT BETWEEN 540 AND 587
                             AND (eup.price_line_item_id <> 800)) tobe    --13
                FULL OUTER JOIN
                -- AS_IS
                (SELECT DISTINCT q.quote_id, qh.quote_header_id, s.site_id,
                                 lm.product_id,
                                 lm.product_name AS "PRODUCT_NAME",
                                 eup.charge_type AS "DOMAIN",
                                 UPPER (pli.scode) AS scode, lm.fallback_type,
                                 NVL (LM.ROW_ID, 0) AS ROW_ID,
                                 pli.price_line_description AS "PRICE_LINE_DESCRIPTION",
                                 pli.ppsr_description AS "PPSR_DESCRIPTION",
                                 pli.ppsr_id AS "PPSR_ID",
                                 eup.price AS "EUP_PRICE",
                                 eup.net_price AS "EUP_NET_PRICE",
                                 eup.discount AS "EUP_DISCOUNT",
                                 ptp.price AS "PTP_PRICE",
                                 ptp.net_price AS "PTP_NET_PRICE",
                                 ptp.discount_proposed AS "PTPDISCOUNT",
                                 cp.ptp_price_book_version AS "PTP_PRICE_BOOK_VERSION",
                                 cp.eup_price_book_version AS "EUP_PRICE_BOOK_VERSION",
                                 ptp.quantity AS "PTP_QUANTITY",
                                 eup.quantity AS "EUP_QUANTITY",
                                 --currency AS "CURRENCY",
                                 eup.currency AS "CURRENCY",
                                 pli.price_line_item_id
                            FROM quote q INNER JOIN  quote_header qh
                                 ON q.quote_id = qh.quote_id
                                 INNER JOIN quote_line_item_as_is lm
                                 ON qh.quote_header_id = lm.quote_header_id
                                 AND lm.active = pkg_constants.con_activeflag_yes
                                 LEFT OUTER JOIN site s
                                 ON lm.site_id = s.site_id
                               AND lm.quote_header_id = in_quoteheaderid
                                 LEFT OUTER JOIN price_line_item_detail_as_is eup
                                 ON lm.line_item_id = eup.line_item_id
                               AND NVL (eup.ptp_eup, 'EUP') = 'EUP'
                               and eup.active =pkg_constants.con_activeflag_yes
                                 LEFT OUTER JOIN price_line_item_detail_as_is ptp
                                 ON lm.line_item_id = ptp.line_item_id
                               AND PTP.PTP_EUP = 'PTP'
                               AND ptp.active =pkg_constants.con_activeflag_yes
                               AND eup.price_line_item_id =ptp.price_line_item_id
															 and ptp.active =pkg_constants.con_activeflag_yes
                                 INNER JOIN price_line_item pli
                                 ON eup.price_line_item_id =pli.price_line_item_id
                                 INNER JOIN customer_product cp        --added
                                 ON cp.quote_header_id =qh.quote_header_id                                                                   --added
                               AND UPPER (cp.product_name) = UPPER (in_productname)
                           WHERE q.quote_id = in_quoteid
                             AND qh.quote_header_id = in_quoteheaderid
                             and lm.product_id = in_productid
                             AND eup.price_line_item_id NOT BETWEEN 530 AND 539
                             AND (eup.price_line_item_id NOT BETWEEN 540 AND 587)
                             AND (eup.price_line_item_id <> 800)) asis
               ON tobe.quote_header_id = asis.quote_header_id
              AND tobe.site_id = asis.site_id
              AND tobe.product_id = asis.product_id
              AND tobe.price_line_item_id = asis.price_line_item_id
              AND UPPER (tobe.price_line_description) =UPPER (asis.price_line_description);
   ELSE
      OPEN out_mg_pricing FOR
         SELECT NVL (tobe.quote_id, asis.quote_id) AS quote_id,
                NVL (tobe.quote_header_id,
                     asis.quote_header_id
                    ) AS quote_header_id,
                NVL (tobe.site_id, asis.site_id) AS site_id,
                NVL (tobe.product_id, asis.product_id) AS product_id,
                NVL (UPPER (tobe.product_name),
                     UPPER (asis.product_name)
                    ) AS "Product_Name",
                NVL (tobe.domain, asis.domain) AS "DOMAIN",
                NVL (UPPER (tobe.scode), UPPER (asis.scode)) AS scode,
                NVL (tobe.fallback_type, asis.fallback_type)
                                                            AS fallback_type,
                NVL (tobe.row_id, asis.row_id) AS row_id,
                NVL (tobe.price_line_description,
                     asis.price_line_description
                    ) AS "PRICE LINE DESCRIPTION",
                NVL (tobe.ppsr_description,
                     asis.ppsr_description
                    ) AS "PPSR_DESCRIPTION",
                NVL (tobe.ppsr_id, asis.ppsr_id) AS "PPSR_ID",
                NVL (tobe.eup_price, asis.eup_price) AS "EUP PRICE",
                NVL (tobe.eup_net_price,
                     asis.eup_net_price
                    ) AS "EUP NET PRICE",
                NVL (tobe.eup_discount, asis.eup_discount) AS "EUP DISCOUNT",
                NVL (tobe.ptp_price, asis.ptp_price) AS "PTP PRICE",
                NVL (tobe.ptp_net_price,
                     asis.ptp_net_price
                    ) AS "PTP NET PRICE",
                NVL (tobe.ptpdiscount, asis.ptpdiscount) AS "PTPDISCOUNT",
                NVL (tobe.ptp_price_book_version,
                     asis.ptp_price_book_version
                    ) AS "PTP PRICE BOOK VERSION",
                NVL (tobe.eup_price_book_version,
                     asis.eup_price_book_version
                    ) AS "EUP PRICE BOOK VERSION",
                NVL (tobe.ptp_quantity, asis.ptp_quantity) AS "PTP QUANTITY",
                NVL (tobe.eup_quantity, asis.eup_quantity) AS "EUP QUANTITY",
                NVL (tobe.currency, asis.currency) AS "CURRENCY",
--                (CASE
--                    WHEN (    asis.price_line_item_id IS NOT NULL
--                          AND tobe.price_line_item_id IS NULL
--                         )
--                       THEN 'Delete'
--                    WHEN (    asis.price_line_item_id IS NULL
--                          AND tobe.price_line_item_id IS NOT NULL
--                         )
--                       THEN 'Add'
--                    WHEN ( --asis.price_line_item_id <> tobe.price_line_item_id
--                           asis.price_line_item_id = tobe.price_line_item_id
--                          AND (   asis.eup_price != tobe.eup_price
--                               OR asis.ptp_price != tobe.ptp_price
--                              )
--                         )
--                       THEN 'Update'
--                    ELSE 'None'
--                 END
--                ) AS "ACTION"

(CASE
                            WHEN (asis.price_line_item_id IS NOT NULL
                             AND tobe.price_line_item_id IS NULL)      THEN 'Delete'

                            WHEN (asis.price_line_item_id IS NULL
                             AND tobe.price_line_item_id IS NOT NULL ) THEN 'Add'

                            WHEN ( asis.price_line_item_id = tobe.price_line_item_id
                                AND ( asis.eup_price != tobe.eup_price
                                OR asis.ptp_price != tobe.ptp_price)) THEN 'Add'

                            WHEN ( asis.price_line_item_id != tobe.price_line_item_id
                                AND ( asis.eup_price != tobe.eup_price
                                OR asis.ptp_price != tobe.ptp_price)) THEN 'Delete'

                            ELSE 'None'
                                end
                             ) as "ACTION"

           FROM (SELECT DISTINCT q.quote_id, qh.quote_header_id, s.site_id,
                                 lm.product_id,
                                 lm.product_name "PRODUCT_NAME",
                                 eup.charge_type AS "DOMAIN",
                                 UPPER (pli.scode) AS scode,
                                 lm.fallback_type,
                                 NVL (lm.row_id, 0) AS "ROW_ID",
                                 pli.price_line_description AS "PRICE_LINE_DESCRIPTION",
                                 pli.ppsr_description AS "PPSR_DESCRIPTION",
                                 pli.ppsr_id AS "PPSR_ID",
                                 eup.price AS "EUP_PRICE",
                                 eup.net_price AS "EUP_NET_PRICE",
                                 eup.discount AS "EUP_DISCOUNT",
                                 ptp.price AS "PTP_PRICE",
                                 ptp.net_price AS "PTP_NET_PRICE",
                                 ptp.discount_proposed AS "PTPDISCOUNT",
                                 cp.ptp_price_book_version AS "PTP_PRICE_BOOK_VERSION",
                                 cp.eup_price_book_version AS "EUP_PRICE_BOOK_VERSION",
                                 ptp.quantity AS "PTP_QUANTITY",
                                 eup.quantity AS "EUP_QUANTITY",
                                 eup.currency AS "CURRENCY",
                                 pli.price_line_item_id
                            FROM quote q INNER JOIN  quote_header qh
                                 ON q.quote_id = qh.quote_id
                                 INNER JOIN line_item lm
                                 ON qh.quote_header_id = lm.quote_header_id
																 AND lm.active = pkg_constants.con_activeflag_yes
																 AND lm.quote_header_id = in_quoteheaderid
                                 LEFT OUTER JOIN site s
                                 ON lm.site_id = s.site_id
                                 LEFT OUTER JOIN price_line_item_detail eup
                                 ON lm.line_item_id = eup.line_item_id
                                AND NVL (eup.ptp_eup, 'EUP') = 'EUP'
																AND eup.active =pkg_constants.con_activeflag_yes
                                 LEFT OUTER JOIN price_line_item_detail ptp
                                 ON LM.LINE_ITEM_ID = PTP.LINE_ITEM_ID
                                 AND NVL(ptp.ptp_eup,'PTP') = 'PTP'
																 AND ptp.active =pkg_constants.con_activeflag_yes
                               AND eup.price_line_item_id =ptp.price_line_item_id
                                 INNER JOIN price_line_item pli
                                 ON eup.price_line_item_id =pli.price_line_item_id
                                 INNER JOIN customer_product cp
                                 ON cp.quote_header_id =qh.quote_header_id
                               AND UPPER (cp.product_name) =UPPER (in_productname)
                           WHERE q.quote_id = in_quoteid
                             AND qh.quote_header_id = in_quoteheaderid
                             AND lm.product_id = in_productid
                             AND eup.price_line_item_id NOT BETWEEN 530 AND 539
                             AND (eup.price_line_item_id NOT BETWEEN 540 AND 587)
                             AND (eup.price_line_item_id <> 800)) tobe    --13
                FULL OUTER JOIN
                -- AS_IS
                (SELECT DISTINCT q.quote_id, qh.quote_header_id, s.site_id,
                                 lm.product_id,
                                 lm.product_name AS "PRODUCT_NAME",
                                 eup.charge_type AS "DOMAIN",
                                 UPPER (pli.scode) AS scode, lm.fallback_type,
                                 NVL (LM.ROW_ID, 0) AS ROW_ID,
                                 pli.price_line_description AS "PRICE_LINE_DESCRIPTION",
                                 pli.ppsr_description AS "PPSR_DESCRIPTION",
                                 pli.ppsr_id AS "PPSR_ID",
                                 eup.price AS "EUP_PRICE",
                                 eup.net_price AS "EUP_NET_PRICE",
                                 eup.discount AS "EUP_DISCOUNT",
                                 ptp.price AS "PTP_PRICE",
                                 ptp.net_price AS "PTP_NET_PRICE",
                                 ptp.discount_proposed AS "PTPDISCOUNT",
                                 cp.ptp_price_book_version AS "PTP_PRICE_BOOK_VERSION",
                                 cp.eup_price_book_version AS "EUP_PRICE_BOOK_VERSION",
                                 ptp.quantity AS "PTP_QUANTITY",
                                 eup.quantity AS "EUP_QUANTITY",
                                 eup.currency AS "CURRENCY",
                                 pli.price_line_item_id
                            FROM quote q INNER JOIN  quote_header qh
                                 ON q.quote_id = qh.quote_id
                                 INNER JOIN quote_line_item_as_is lm
                                 ON qh.quote_header_id = lm.quote_header_id
                                 LEFT OUTER JOIN site s
																	 ON lm.site_id = s.site_id
																	 AND lm.quote_header_id = in_quoteheaderid
																	AND lm.active = pkg_constants.con_activeflag_yes
                                LEFT OUTER JOIN price_line_item_detail_as_is eup
                                 ON lm.line_item_id = eup.line_item_id
                                 AND NVL (eup.ptp_eup, 'EUP') = 'EUP'
																 and eup.active =pkg_constants.con_activeflag_yes
                                LEFT OUTER JOIN price_line_item_detail_as_is ptp
                                 ON lm.line_item_id = ptp.line_item_id
                                 AND ptp.ptp_eup = 'PTP'
                                AND eup.price_line_item_id =ptp.price_line_item_id
																AND ptp.active =pkg_constants.con_activeflag_yes
                                 INNER JOIN price_line_item pli
                                 ON eup.price_line_item_id =pli.price_line_item_id
                                 INNER JOIN customer_product cp
                                 ON cp.quote_header_id =qh.quote_header_id
                               AND UPPER (cp.product_name) = UPPER (in_productname)
                           WHERE q.quote_id = in_quoteid
                             AND qh.quote_header_id = in_quoteheaderid
                             AND lm.product_id = in_productid
                             AND eup.price_line_item_id NOT BETWEEN 530 AND 539
                             AND (eup.price_line_item_id NOT BETWEEN 540 AND 587)
                             AND (eup.price_line_item_id <> 800)) asis
                ON tobe.quote_header_id = asis.quote_header_id
              AND tobe.site_id = asis.site_id
              AND tobe.product_id = asis.product_id
              AND tobe.price_line_item_id = asis.price_line_item_id
              AND UPPER (tobe.price_line_description) =UPPER (asis.price_line_description);

       END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_sql_errm := SUBSTR (SQLERRM, 1, 150);
         v_sql_code := SQLCODE;
         pkg_common.spi_error_log (in_quoteid,
                                   in_quoteheaderid,
                                   NULL,
                                   NULL,
                                   'PKG_BOM_GEN',
                                   'SPS_MG_PRICING',
                                   v_sql_code,
                                   v_sql_errm
                                  );
   END;


   -------MX ends  Product - Pricing part

   -----start mx contact
   PROCEDURE sps_contact_info_mx (
      in_quoteheaderid     IN       quote_header.quote_header_id%TYPE,
      in_order_header_id   IN       order_header.order_header_id%TYPE,
      in_bfg_customer_id   IN       customer.bfg_customer_id%TYPE,
      in_productid         IN       line_item.product_id%TYPE,
      in_productname       IN       line_item.product_name%TYPE,
      out_cont_info_mx     OUT      sys_refcursor
   )
   AS
      v_sql_code   NUMBER;                  /*Addeed for Exception Handling*/
      out_errmsg   VARCHAR2 (150);     /*Addeed for Exception Handling*/
/******************************************************************************
   NAME:sps_contact_info_mx
   PURPOSE: Fetch the infromat about MX contact

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        14/Apri/2011    Suman         Fetch the infromat about MX contact
   ******************************************************************************/
   BEGIN
      OPEN out_cont_info_mx FOR
         SELECT o.order_header_id, co.first_name, co.last_name, co.email,
                co.phone_number,
                (CASE
                    WHEN co.contact_type IN
                           (pkg_constants.con_cus_mx_mob_id_cust_sec_off,
                            pkg_constants.con_cus_mx_itw_work_corp_admin,
                            pkg_constants.con_cus_mx_3gf_admin_contact,
                            pkg_constants.con_cus_mx_radius_cont
                           )
                       THEN pkg_constants.con_cus_mx_bfg_service_cont
                    WHEN co.contact_type IN
                           (pkg_constants.con_cus_mx_mob_id_deliv_add,
                            pkg_constants.con_cus_mx_3gf_billing_cont
                           )
                       THEN pkg_constants.con_cus_mx_bfg_delivery_cont
                    WHEN co.contact_type =
                                     pkg_constants.con_cus_mx_itw_billing_cont
                       THEN pkg_constants.con_cus_mx_bfg_billing_cont
                 END
                ) AS role_name,
                (CASE
                    WHEN co.contact_type IN
                           (pkg_constants.con_cus_mx_mob_id_cust_sec_off,
                            pkg_constants.con_cus_mx_mob_id_deliv_add
                           )
                       THEN pkg_constants.con_prod_bt_mx_mobileid
                    WHEN co.contact_type IN
                           (pkg_constants.con_cus_mx_itw_billing_cont,
                            pkg_constants.con_cus_mx_itw_work_corp_admin
                           )
                       THEN pkg_constants.con_prod_bt_mx_itw
                    WHEN co.contact_type IN
                           (pkg_constants.con_cus_mx_3gf_admin_contact,
                            pkg_constants.con_cus_mx_3gf_billing_cont
                           )
                       THEN pkg_constants.con_prod_bt_mx_3g
                    WHEN co.contact_type =
                                          pkg_constants.con_cus_mx_radius_cont
                       THEN pkg_constants.con_prod_bt_mx_proxradi
                 END
                ) product_name,
                co.contact_type, c.NAME AS "Country", ad.address_line2,
                ad.city, ad.post_zip_code, ad.address_line1, co.job_title,
                ad.state, s.bfg_address_id "bfg_addessid",
                cus.bfg_customer_id, s.bfg_site_id, s.site_id,
                bfg_cnt_id AS bfg_contact_id,
                BFG_CNR_ID AS BFG_CONTACT_ROLE_ID, NULL AS "ORGA_NAME",
                NULL AS "ORG_ID",S.BFG_SITE_ID AS "BFG_SITE_ID",
								CUS.CUSTOMER_ID AS "User Name EIN",
								CUS.BFG_CUSTOMER_NAME AS "Customer Name",
								CO.MOBILE_NUMBER AS "Mobile Number",
								CO.FAX AS "Pager Number"
           FROM contact co,
                country c,
                address ad,
                order_contact_detail o,
                site s,
                customer cus
          WHERE o.order_header_id = in_order_header_id
            AND co.contact_id = o.contact_id
            AND ad.address_id = o.address_id
            AND c.country_id = ad.country_id
            AND s.customer_id = cus.customer_id
            AND s.main_site_flag = 'Y'
            AND cus.bfg_customer_id = in_bfg_customer_id
            AND s.site_id IN (
                   SELECT DISTINCT site_id
                              FROM order_line_item
                             WHERE order_header_id = in_order_header_id
                               AND active = 'Y'
                               AND site_id IS NOT NULL)
            AND co.contact_type IN
                   ('CUSTOMER SECURITY OFFICER', 'MOBILE ID DELIVERY ADDRESS',
                    'WORK PLACE CORPORATE ADMINISTRATOR',
                    'ITW BILLING CONTACT', '3G ADMINISTRATOR CONTACT',
                    '3G FRANCE BILLING CONTACT', 'RADIUS CONTACT')
         UNION ALL
         SELECT distinct o.order_header_id, co.first_name, co.last_name, co.email,
                co.phone_number,
                (CASE
                    WHEN co.contact_type NOT IN
                           (pkg_constants.con_cus_mx_deli_org_cont,
                            pkg_constants.con_cus_mx_ord_org_cont
                           )
                       THEN pkg_constants.con_cus_mx_bfg_service_cont
                    /*Start : Added By Sandeep for MX R9 on 15-Feb-2011*/
                 WHEN co.contact_type = pkg_constants.con_cus_mx_deli_org_cont
                       THEN 'Delivery Organisation Contact'
                    WHEN co.contact_type =pkg_constants.con_cus_mx_ord_org_cont
                       THEN 'Ordering Organisation Contact'
                    /*End : Added By Sandeep for MX R9 on 15-Feb-2011*/
                 ELSE co.contact_type
                 END
                ) AS role_name,
                (CASE
                    WHEN co.contact_type IN
                           (pkg_constants.con_cus_mx_deli_org_cont,
                            pkg_constants.con_cus_mx_ord_org_cont
                           )
                       THEN pkg_constants.con_prod_bt_mx_btcpe
                    WHEN co.contact_type IN
                                      (pkg_constants.con_primary_sitecontact)
                       THEN pkg_constants.con_prod_bt_mx_sslvpn
                    ELSE pkg_constants.con_prod_bt_mx_ipsec
                 END
                ) AS product_name,
                co.contact_type,
                (CASE
                    WHEN co.contact_type IN
                           (pkg_constants.con_cus_mx_deli_org_cont,
                            pkg_constants.con_cus_mx_ord_org_cont
                           )
                       THEN NULL
                    ELSE c.NAME
                 END
                ) AS "Country",
                (CASE
                    WHEN co.contact_type IN
                           (pkg_constants.con_cus_mx_deli_org_cont,
                            pkg_constants.con_cus_mx_ord_org_cont
                           )
                       THEN NULL
                    ELSE ad.address_line2
                 END
                ) "address_line2",
                (CASE
                    WHEN co.contact_type IN
                           (pkg_constants.con_cus_mx_deli_org_cont,
                            pkg_constants.con_cus_mx_ord_org_cont
                           )
                       THEN NULL
                    ELSE ad.city
                 END
                ) "city",
                (CASE
                    WHEN co.contact_type IN
                           (pkg_constants.con_cus_mx_deli_org_cont,
                            pkg_constants.con_cus_mx_ord_org_cont
                           )
                       THEN NULL
                    ELSE ad.post_zip_code
                 END
                ) "post_zip_code",
                (CASE
                    WHEN co.contact_type IN
                           (pkg_constants.con_cus_mx_deli_org_cont,
                            pkg_constants.con_cus_mx_ord_org_cont
                           )
                       THEN NULL
                    ELSE ad.address_line1
                 END
                ) " address_line1",
                co.job_title,
                (CASE
                    WHEN co.contact_type IN
                           (pkg_constants.con_cus_mx_deli_org_cont,
                            pkg_constants.con_cus_mx_ord_org_cont
                           )
                       THEN NULL
                    ELSE ad.state
                 END
                ) "state",
                (CASE
                    WHEN co.contact_type IN
                           (pkg_constants.con_cus_mx_deli_org_cont,
                            pkg_constants.con_cus_mx_ord_org_cont
                           )
                       THEN NULL
                    ELSE s.bfg_address_id
                 END
                ) "BFG_AddessId",
                cus.bfg_customer_id, s.bfg_site_id, s.site_id,
                o.bfg_cnt_id AS bfg_contact_id,
                o.bfg_cnr_id AS bfg_contact_role_id,
                (CASE
                    WHEN co.contact_type IN
                                (pkg_constants.con_ipsec_contact_sitecontact)
                       THEN NULL
                    ELSE co.orga_name
                 END
                ) AS "ORGA_NAME",
                (CASE
                    WHEN co.contact_type IN
                                (pkg_constants.con_ipsec_contact_sitecontact)
                       THEN NULL
                    ELSE co.org_id
                 END
                ) AS "ORG_ID",s.bfg_site_id as "BFG_SITE_ID",
								CUS.CUSTOMER_ID AS "User Name EIN",
								CUS.BFG_CUSTOMER_NAME AS "Customer Name",
								CO.MOBILE_NUMBER AS "Mobile Number",
								CO.FAX AS "Pager Number"
           FROM country c,
                contact co,
                address ad,
                order_contact_detail o,
                site s,
                customer cus,
                site_contact_detail sc
          WHERE o.order_header_id = in_order_header_id
            AND CO.CONTACT_ID = O.CONTACT_ID
            AND ad.address_id = o.address_id--s.address_id
            AND c.country_id = ad.country_id
            AND s.customer_id = cus.customer_id
            AND sc.site_id = s.site_id
            AND sc.contact_id = co.contact_id
            AND sc.contact_id = o.contact_id
            AND co.contact_type IN
                   (pkg_constants.con_ipsec_contact_sitecontact,
                    pkg_constants.con_primary_sitecontact,
                    pkg_constants.con_cus_mx_ord_org_cont,
                    pkg_constants.con_cus_mx_deli_org_cont
                   );
   EXCEPTION
      WHEN OTHERS
      THEN
         out_errmsg := SUBSTR (SQLERRM, 1, 150);
         v_sql_code := SQLCODE;
         pkg_common.spi_error_log (NULL,
                                   in_quoteheaderid,
                                   NULL,
                                   NULL,
                                   'pkg_bom_gen',
                                   'sps_cont_info_mx',
                                   v_sql_code,
                                   out_errmsg
                                  );
   END;

---end mx contact

   -------ORDER CONFIGURATION CHECK
   PROCEDURE sps_getorderconfflag (
      in_quoteid           IN       quote.quote_id%TYPE,
      in_quoteheaderid     IN       quote_header.quote_header_id%TYPE,
      in_order_header_id   IN       order_header.order_header_id%TYPE,
      getinfoselect        OUT      sys_refcursor
   )
   AS
      v_sql_code   NUMBER;
      out_errmsg   VARCHAR2 (150);
   BEGIN
    OPEN getinfoselect FOR
--         SELECT 'YES' AS flag
--           FROM order_line_item oli, attribute_mapping am
--          WHERE oli.order_header_id = in_order_header_id
--            AND oli.active = 'Y'
--            AND am.active = 'Y'
--            AND UPPER (oli.product_name) = UPPER (am.prod_friendly_name)
--            AND am.attribute_mapping_id IN
--                       (3001, 3002, 3004, 3005, 3006, 3017, 3018, 3019, 2886);
              SELECT s AS flag ---,a.p
              FROM
                (SELECT lid.attribute_mapping_id "A",
                  am.prod_friendly_name AS "P" ,
                  (
                  CASE
                    WHEN EXISTS
                      (SELECT 1
                      FROM order_line_item oli,
                        order_header oh
                      WHERE oh.order_header_id    = oli.order_header_id
                      AND oh.quote_header_id      = in_quoteheaderid
                      AND upper(oli.product_name) = upper(am.prod_friendly_name)
                      AND oli.active              ='Y'
                      AND am.active               ='Y'
                      AND oli.product_id          =1012437
                      )
                    THEN 'YES'
                    ELSE 'NO'
                  END) AS s
                FROM attribute_mapping am
                INNER JOIN line_item_detail lid
                ON lid.attribute_mapping_id = am.attribute_mapping_id
                LEFT OUTER JOIN line_item li
                ON li.line_item_id            = lid.line_item_id
                WHERE li.quote_header_id      = in_quoteheaderid
                AND li.product_id             = 1012437
                AND lid.attribute_mapping_id IN (3001,3002,3004,3005,3006,3017,3018,3019,2886)
                AND lid.active                ='Y'
                AND li.active                 ='Y'
                AND am.active                 ='Y'
                AND lid.VALUE                 ='Yes'
                ORDER BY am.attribute_mapping_id
                ) A
              ORDER BY A;
   EXCEPTION
      WHEN OTHERS
      THEN
         DBMS_OUTPUT.put_line ('Exception');
         v_sql_errm := SUBSTR (SQLERRM, 1, 150);
         v_sql_code := SQLCODE;
         pkg_common.spi_error_log (NULL,
                                   NULL,
                                   NULL,
                                   in_order_header_id || 'in_order_header_id',
                                   'PKG_BOM_GEN_MX',
                                   'sps_getOrderconfflag',
                                   v_sql_code,
                                   v_sql_errm
                                  );
   END sps_getorderconfflag;
----END ORDER CONFI. CHECK

 procedure SPS_SITE_REQUEST (
        in_quoteid           IN       quote.quote_id%type,
        in_quoteheaderid     IN       quote_header.quote_header_id%type,
        in_qhversion         in       quote_header.version%type,
        out_site_request     OUT      sys_refcursor)
    AS
   BEGIN
      OPEN OUT_site_request FOR
      SELECT DISTINCT
            Q.QUOTE_ID AS "Quote ID",
            QH.QUOTE_HEADER_ID,
            SI.SITE_ID                AS SITEID,
            SI.MAIN_SITE_FLAG         AS "Central Site",
            SI.PROP_SITE_ID           AS CRPROPSITEID,
            SI.PROP_SUBLOC_ID         AS CRPROPSUBLOCID,
            SI.BFG_SITE_ID            AS BFGSITEID,
            SI.BFG_SUBLOC_ID          AS BFGSUBLOCATIONID,
            SI.PROP_ADDRESS_ID        AS CRPROPADDRESSID,
            SI.BFG_ADDRESS_ID         AS BFGADDRESSID,
            SI.CHILD_EXPEDIO_REF_ID   AS CHILDEXPREFID,
            SI.CR_PROP_ID             AS CRPROPID,
            ER.EXP_ORDER_ID           AS EXPORDERID,
            ER.IFC_FLAG               AS IFCFLAG,
            SI.MX_BFG_BILL_ACCOUNT_ID AS BFG_BILL_ACCOUNT_ID,
						to_char(OSD.CUSTOMER_REQUIRED_DATE,'YYYY-MM-DD hh24:mi:ss') AS "CUSTOMER_REQ_DATE",
            SI.EXPEDIO_SITE_ID        AS EXPEDIO_SITEID
          FROM QUOTE Q
            INNER JOIN QUOTE_HEADER QH
            ON Q.QUOTE_ID = QH.QUOTE_ID
            LEFT OUTER JOIN QUOTE_SITE QS
            ON QH.QUOTE_HEADER_ID = QS.QUOTE_HEADER_ID
            INNER JOIN SITE SI
            ON QS.SITE_ID = SI.SITE_ID
            INNER JOIN ORDER_HEADER OH
            ON OH.QUOTE_HEADER_ID=QH.QUOTE_HEADER_ID AND upper(OH.PRODUCT_NAME)=upper(pkg_constants.con_prod_bt_mobilexpress)
            LEFT OUTER JOIN  ORDER_SITE_DETAIL  OSD
            ON OSD.ORDER_HEADER_ID = OH.ORDER_HEADER_ID AND OSD.ACTIVE= pkg_constants.con_activeflag_yes and si.site_id=osd.site_id
            LEFT OUTER JOIN EXPEDIO_RESPONSE ER
            ON QH.QUOTE_ID                = ER.QUOTE_ID
            AND QH.EXPEDIO_PARENT_VERSION = ER.EXPEDIO_QUOTEVERSION
            AND QS.SITE_ID                = ER.SITE_ID
            WHERE Q.QUOTE_ID              = in_quoteid
            AND QH.QUOTE_HEADER_ID        = IN_QUOTEHEADERID
            AND QH.VERSION                = IN_QHVERSION
            AND upper(QS.ACTIVE)          = pkg_constants.con_activeflag_yes;

      EXCEPTION
      WHEN OTHERS
      THEN
         v_sql_errm := SUBSTR (SQLERRM, 1, 150);
         v_sql_code := SQLCODE;
         pkg_common.spi_error_log (in_quoteid,
                                   in_quoteheaderid,
                                   null,
                                   null,
                                   'PKG_BOM_GEN_MX',
                                   'sps_site_request',
                                   v_sql_code,
                                   v_sql_errm
                                  );
   END;

	    ----MX Usage Price List
   PROCEDURE sps_usage_base_price (
      in_quoteid         IN       quote.quote_id%TYPE,
      in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
      in_productid       IN       line_item.product_id%TYPE,
      in_productname     IN       line_item.product_name%TYPE,
      out_usage_pricing     OUT      sys_refcursor
   )
   AS
   v_channel_type customer.channel_type%type;
   BEGIN
      OPEN out_usage_pricing FOR
           SELECT NVL (tobe.quote_id, asis.quote_id)                       AS quote_id,
                  NVL (tobe.quote_header_id,asis.quote_header_id)               AS quote_header_id,
                  NVL (tobe.site_id, asis.site_id)                              AS site_id,
                  NVL (UPPER (tobe.product_name),UPPER (asis.product_name))     AS "Product_Name",
                  NVL (UPPER (TOBE.SCODE), UPPER (ASIS.SCODE))                  AS SCODE,
                  NVL (TOBE.ROW_ID, ASIS.ROW_ID)                                as ROW_ID,
                  NVL (tobe.ppsr_description,asis.ppsr_description) AS "PPSR_DESCRIPTION",
                  NVL(TOBE.FIXED_USAGE_CHARGE_NETPRICE ,TOBE.FIXED_USAGE_CHARGE_NETPRICE) as "FIXED_USAGE_CHARGE_NETPRICE",
                  NVL(TOBE.STANDARD_USAGE_CHARGE_NETPRICE ,TOBE.STANDARD_USAGE_CHARGE_NETPRICE)  AS "STANDARD_USAGE_CHARGE_NETPRICE",
                  NVL(TOBE.MIN_USAGE_CHARGE_NETPRICE ,TOBE.MIN_USAGE_CHARGE_NETPRICE) as "MIN_USAGE_CHARGE_NETPRICE",
                  NVL(TOBE.MAX_USAGE_CHARGE_NETPRICE ,TOBE.MAX_USAGE_CHARGE_NETPRICE) as "MAX_USAGE_CHARGE_NETPRICE",
                  NVL(TOBE.PLN_USG_CHARGE_ID,TOBE.PLN_USG_CHARGE_ID)           as "PRICE_POINT_ID",
                NVL(TOBE.TARIFF_NAME,  TOBE.TARIFF_NAME)                       as "TARIFF_NAME",
                NVL(TOBE.PRICE_POINT_NAME,     TOBE.PRICE_POINT_NAME)          AS "PRICE_POINT_NAME",
                NVL(TOBE.PRICE_POINT_VERSION ,TOBE.PRICE_POINT_VERSION)        AS "PRICE_POINT_VERSION",
								NVL(TOBE.product_id ,TOBE.product_id)                         AS "Product Instance ID",
								 (CASE
							WHEN (asis.price_line_item_id IS NOT NULL
							 AND tobe.price_line_item_id IS NULL)      THEN 'Delete'

							WHEN (asis.price_line_item_id IS NULL
							 AND tobe.price_line_item_id IS NOT NULL ) THEN 'Add'

							WHEN ( asis.price_line_item_id = tobe.price_line_item_id
								AND ( asis.eup_price != tobe.eup_price
								OR asis.ptp_price != tobe.ptp_price)) THEN 'Add'

							WHEN ( asis.price_line_item_id != tobe.price_line_item_id
								AND ( asis.eup_price != tobe.eup_price
								OR asis.ptp_price != tobe.ptp_price)) THEN 'Delete'

							ELSE 'None'
								END
							 ) AS "ACTION"
                FROM
                  (
                    SELECT DISTINCT q.quote_id,
                      qh.quote_header_id,
                      s.site_id,
                      lm.product_id,
                      lm.product_name "PRODUCT_NAME",
                      eup.charge_type   AS "DOMAIN",
                      UPPER (pli.scode) AS scode,
                      lm.fallback_type,
                      NVL (LM.ROW_ID, 0)         AS "ROW_ID",
                      pli.price_line_description AS "PRICE_LINE_DESCRIPTION",
                      pli.ppsr_description       AS "PPSR_DESCRIPTION",
                      pli.ppsr_id                AS "PPSR_ID",
                      eup.price                  AS "EUP_PRICE",
                      eup.net_price              AS "EUP_NET_PRICE",
                      eup.discount               AS "EUP_DISCOUNT",
                      ptp.price                  AS "PTP_PRICE",
                      ptp.net_price              AS "PTP_NET_PRICE",
                      ptp.discount_proposed      AS "PTPDISCOUNT",
                      ptp.quantity               AS "PTP_QUANTITY",
                      eup.quantity               AS "EUP_QUANTITY",
                      EUP.CURRENCY               AS "CURRENCY",
                      pli.price_line_item_id,
                      PLUD.FIXED_USAGE_CHARGE ,
                      PLUD.STANDARD_USAGE_CHARGE ,
                      PLUD.MIN_USAGE_CHARGE ,
                      PLUD.MAX_USAGE_CHARGE ,
                      PLUD.FIXED_USAGE_CHARGE_NETPRICE ,
                      PLUD.STANDARD_USAGE_CHARGE_NETPRICE ,
                      PLUD.MIN_USAGE_CHARGE_NETPRICE ,
                      PLUD.MAX_USAGE_CHARGE_NETPRICE ,
                      PLUD.PLN_USG_CHARGE_ID,
                      EUP.TARIFF_NAME,
                      EUP.PRICE_POINT_ID,
                      EUP.PRICE_POINT_NAME,
                      eup.PRICE_POINT_VERSION
                    FROM quote q
                    LEFT OUTER JOIN quote_header qh
                    ON q.quote_id = qh.quote_id
                    INNER JOIN line_item lm
                    ON QH.QUOTE_HEADER_ID = LM.QUOTE_HEADER_ID
                    INNER JOIN site s
                    ON lm.site_id          = s.site_id
                    AND lm.quote_header_id =  in_quoteheaderid
                    LEFT OUTER JOIN price_line_item_detail eup
                    ON lm.line_item_id           = eup.line_item_id
                    AND NVL (eup.ptp_eup, 'EUP') = 'EUP'
                    LEFT OUTER JOIN price_line_item_detail ptp
                    ON LM.LINE_ITEM_ID         = PTP.LINE_ITEM_ID
                    AND NVL(ptp.ptp_eup,'PTP') = 'PTP'
                    AND eup.price_line_item_id =ptp.price_line_item_id
                    INNER JOIN price_line_item pli
                    ON EUP.PRICE_LINE_ITEM_ID =PLI.PRICE_LINE_ITEM_ID
                    INNER JOIN PRICE_LN_USG_CHRG_DETAILS PLUD
                    ON PLUD.LINE_ITEM_ID               = eup.LINE_ITEM_ID
                    AND PLUD.PRICE_LINE_ITEM_DETAIL_ID = eup.PRICE_LINE_ITEM_DETAIL_ID
                    WHERE q.quote_id                   = in_quoteid
                    and QH.QUOTE_HEADER_ID             = IN_QUOTEHEADERID
                    AND lm.product_id                  = in_productid
                    and (LM.ACTIVE = 'Y')
                    AND (EUP.ACTIVE ='Y'))   tobe
                FULL OUTER JOIN
                  -- AS_IS
                  (SELECT DISTINCT q.quote_id,
                      qh.quote_header_id,
                      s.site_id,
                      lm.product_id,
                      lm.product_name   AS "PRODUCT_NAME",
                      eup.charge_type   AS "DOMAIN",
                      UPPER (pli.scode) AS scode,
                      lm.fallback_type,
                      NVL (LM.ROW_ID, 0)         AS ROW_ID,
                      pli.price_line_description AS "PRICE_LINE_DESCRIPTION",
                      pli.ppsr_description       AS "PPSR_DESCRIPTION",
                      pli.ppsr_id                AS "PPSR_ID",
                      eup.price                  AS "EUP_PRICE",
                      eup.net_price              AS "EUP_NET_PRICE",
                      eup.discount               AS "EUP_DISCOUNT",
                      ptp.price                  AS "PTP_PRICE",
                      ptp.net_price              AS "PTP_NET_PRICE",
                      ptp.discount_proposed      AS "PTPDISCOUNT",
                      ptp.quantity               AS "PTP_QUANTITY",
                      EUP.QUANTITY               AS "EUP_QUANTITY",
                      EUP.CURRENCY               as "CURRENCY",
                      PLI.PRICE_LINE_ITEM_ID,
                       ---NEW COLUMSN
                  PLUD_ASIS.FIXED_USAGE_CHARGE ,
                  PLUD_ASIS.STANDARD_USAGE_CHARGE ,
                  PLUD_ASIS.MIN_USAGE_CHARGE ,
                  PLUD_ASIS.MAX_USAGE_CHARGE ,
                  PLUD_ASIS.FIXED_USAGE_CHARGE_NETPRICE ,
                  PLUD_ASIS.STANDARD_USAGE_CHARGE_NETPRICE ,
                  PLUD_ASIS.MIN_USAGE_CHARGE_NETPRICE ,
                  PLUD_ASIS.MAX_USAGE_CHARGE_NETPRICE ,
                  PLUD_ASIS.PLN_USG_CHARGE_ID,
                  EUP.TARIFF_NAME,
                  EUP.PRICE_POINT_ID,
                  EUP.PRICE_POINT_NAME,
                  EUP.PRICE_POINT_VERSION
                    FROM quote q
                    LEFT OUTER JOIN quote_header qh
                    ON q.quote_id = qh.quote_id
                    INNER JOIN QUOTE_LINE_ITEM_AS_IS LM
                    ON qh.quote_header_id  = lm.quote_header_id
                    AND lm.quote_header_id = in_quoteheaderid
                    INNER JOIN site s
                    ON LM.SITE_ID = S.SITE_ID
                    LEFT OUTER JOIN price_line_item_detail_as_is eup
                    ON LM.LINE_ITEM_ID           = EUP.LINE_ITEM_ID
                    AND NVL (eup.ptp_eup, 'EUP') = 'EUP'
                    LEFT OUTER JOIN price_line_item_detail_as_is ptp
                    ON lm.line_item_id         = ptp.line_item_id
                    AND ptp.ptp_eup            = 'PTP'
                    AND eup.price_line_item_id =ptp.price_line_item_id
                    INNER JOIN price_line_item pli
                    ON EUP.PRICE_LINE_ITEM_ID =PLI.PRICE_LINE_ITEM_ID
                    INNER JOIN PRICE_LN_USG_CHRG_DETAILS_ASIS PLUD_ASIS
                    ON PLUD_ASIS.LINE_ITEM_ID               = eup.LINE_ITEM_ID
                    AND PLUD_ASIS.PRICE_LINE_ITEM_DETAIL_ID = eup.PRICE_LINE_ITEM_DETAIL_ID
                    WHERE q.quote_id                        = in_quoteid
                    AND qh.quote_header_id                  = in_quoteheaderid
                    and LM.PRODUCT_ID                       = in_productid
                    and (LM.ACTIVE = 'Y')
                    AND (eup.active ='Y')
                  )  asis ON tobe.quote_header_id          = asis.quote_header_id
                AND tobe.site_id                        = asis.site_id
                AND tobe.product_id                     = asis.product_id
                AND tobe.price_line_item_id             = asis.price_line_item_id
                and UPPER (TOBE.PRICE_LINE_DESCRIPTION) =UPPER (ASIS.PRICE_LINE_DESCRIPTION);

   EXCEPTION
      WHEN OTHERS
      THEN
         v_sql_errm := SUBSTR (SQLERRM, 1, 150);
         v_sql_code := SQLCODE;
         pkg_common.spi_error_log (in_quoteid,
                                   in_quoteheaderid,
                                   NULL,
                                   null,
                                   'PKG_BOM_GEN_MX.sps_usage_base_price',
                                   null,
                                   v_sql_code,
                                   v_sql_errm
                                  );
   END sps_usage_base_price;


 PROCEDURE SPU_ORDER_CONTACT_MX_ROLE_ID (
    IN_QUOTE_HEADER_ID      IN VARCHAR2,
    IN_QUOTE_VERSION_ID     IN VARCHAR2,
    IN_PRODUCT_NAME         IN VARCHAR2,
    IN_CONTACT_ROLE         IN VARCHAR2,
    IN_BFG_SITE_ID          IN NUMBER,
    IN_BFG_ADDRESS_ID       IN VARCHAR2,
    IN_BFG_CNT_ID           IN NUMBER,
    IN_BFG_CNR_ID           IN NUMBER,
    OUT_STATUS              OUT      NUMBER,
    OUT_ERRMSG              OUT      VARCHAR2
    )
AS
/******************************************************************************
   Product Usage:MX
   PURPOSE: TO UPDATE THE SQE ORDER CONTACT

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
     1.0                 19-08-2011  Suman                      EXPEDIO TEM UPDATE THE SQE ORDER CONTACT
******************************************************************************/

V_SITE_ID           SITE.SITE_ID%TYPE;
V_QUOTE_HEADER_ID     QUOTE_HEADER.QUOTE_HEADER_ID%TYPE;
V_ORDER_HEADER_ID      ORDER_HEADER.ORDER_HEADER_ID%TYPE;
V_CONTACT_ROLE            CONTACT.CONTACT_TYPE%TYPE;
V_ORDER_CONTACT_DETAIL_ID                CONTACT.CONTACT_ID%TYPE;
V_ERROLINE                    VARCHAR2(255);
BEGIN
V_ERROLINE :=1;
--JAY_DEBUG(V_ERROLINE,'epxeiod1',null);
    BEGIN
        SELECT SITE_ID INTO V_SITE_ID
                FROM SITE
                WHERE BFG_SITE_ID=IN_BFG_SITE_ID;
    EXCEPTION
    WHEN NO_DATA_FOUND THEN
    OUT_STATUS :=0;
    OUT_ERRMSG :='BFG SITE ID NOT FOUND IN THE SQE'|| 'IN_BFG_SITE_ID-->'||IN_BFG_SITE_ID;
    END;
V_ERROLINE :=2;
    BEGIN
        SELECT QUOTE_HEADER_ID INTO V_QUOTE_HEADER_ID
                FROM QUOTE_HEADER
                WHERE QUOTE_HEADER_ID =IN_QUOTE_HEADER_ID
                AND   VERSION          =IN_QUOTE_VERSION_ID;
    EXCEPTION
    WHEN NO_DATA_FOUND THEN
    OUT_STATUS :=0;
    OUT_ERRMSG :='QUOTE_HEADER_ID,VERSION_ID NOT FOUND IN THE SQE'|| 'IN_EXPEIDO_QUOTE_ID,IN_QUOTE_VERSION_ID-->'||IN_QUOTE_HEADER_ID||','||IN_QUOTE_VERSION_ID;
    END;
--  JAY_DEBUG(V_ERROLINE||'IN_EXPEIDO_QUOTE_ID'||IN_EXPEIDO_QUOTE_ID,'epxeiod2',IN_QUOTE_VERSION_ID);
IF V_QUOTE_HEADER_ID IS NOT NULL AND V_SITE_ID IS NOT NULL THEN
V_ERROLINE :=3;
    SELECT ORDER_HEADER_ID INTO V_ORDER_HEADER_ID FROM ORDER_HEADER
     WHERE QUOTE_HEADER_ID=V_QUOTE_HEADER_ID
            AND PRODUCT_NAME ='BT MOBILEXPRESS';

			IF   UPPER(UPPER(IN_PRODUCT_NAME))=PKG_CONSTANTS.CON_PROD_BT_MX_MOBILEID
							AND IN_CONTACT_ROLE=PKG_CONSTANTS.CON_CUS_MX_BFG_SERVICE_CONT
								 THEN V_CONTACT_ROLE :='CUSTOMER SECURITY OFFICER';
			    ELSIF  UPPER(IN_PRODUCT_NAME)=PKG_CONSTANTS.CON_PROD_BT_MX_MOBILEID
							AND IN_CONTACT_ROLE=PKG_CONSTANTS.CON_CUS_MX_BFG_DELIVERY_CONT
								 THEN V_CONTACT_ROLE :='MOBILE ID DELIVERY ADDRESS';
				ELSIF  UPPER(IN_PRODUCT_NAME)=PKG_CONSTANTS.con_prod_bt_mx_itw
							AND IN_CONTACT_ROLE=PKG_CONSTANTS.con_cus_mx_bfg_billing_cont
								 THEN V_CONTACT_ROLE :='ITW BILLING CONTACT';
				ELSIF  UPPER(IN_PRODUCT_NAME)=PKG_CONSTANTS.con_prod_bt_mx_itw
							AND IN_CONTACT_ROLE=PKG_CONSTANTS.con_cus_mx_bfg_service_cont
								 THEN V_CONTACT_ROLE :='WORK PLACE CORPORATE ADMINISTRATOR';
				ELSIF  UPPER(IN_PRODUCT_NAME)=PKG_CONSTANTS.con_prod_bt_mx_3g
							AND IN_CONTACT_ROLE=PKG_CONSTANTS.CON_CUS_MX_BFG_SERVICE_CONT
								 THEN V_CONTACT_ROLE :='3G ADMINISTRATOR CONTACT';
				ELSIF  UPPER(IN_PRODUCT_NAME)=PKG_CONSTANTS.con_prod_bt_mx_3g
							AND IN_CONTACT_ROLE=PKG_CONSTANTS.con_cus_mx_bfg_delivery_cont
								 THEN V_CONTACT_ROLE :='3G FRANCE BILLING CONTACT';
				ELSIF  UPPER(IN_PRODUCT_NAME)=PKG_CONSTANTS.con_prod_bt_mx_proxradi
							AND IN_CONTACT_ROLE=PKG_CONSTANTS.CON_CUS_MX_BFG_SERVICE_CONT
								 THEN V_CONTACT_ROLE :='RADIUS CONTACT';
				ELSIF  UPPER(IN_PRODUCT_NAME)=PKG_CONSTANTS.con_prod_bt_mx_sslvpn
							AND IN_CONTACT_ROLE=PKG_CONSTANTS.CON_CUS_MX_BFG_SERVICE_CONT
								 THEN V_CONTACT_ROLE :='PRIMARY SITE CONTACT';
				ELSE V_CONTACT_ROLE :='IPSEC CONTACT';



V_ERROLINE :=4;
                SELECT OCD.ORDER_CONTACT_DETAIL_ID INTO v_ORDER_CONTACT_DETAIL_ID FROM ORDER_CONTACT_DETAIL OCD,CONTACT CO
                WHERE OCD.CONTACT_ID= CO.CONTACT_ID
                AND OCD.ORDER_HEADER_ID=V_ORDER_HEADER_ID
                AND OCD.SITE_ID                 =V_SITE_ID
                AND UPPER(CO.CONTACT_TYPE)=UPPER(V_CONTACT_ROLE);

                UPDATE ORDER_CONTACT_DETAIL SET BFG_CNR_ID=IN_BFG_CNR_ID,BFG_CNT_ID= IN_BFG_CNT_ID
                WHERE ORDER_HEADER_ID=V_ORDER_HEADER_ID AND ORDER_CONTACT_DETAIL_ID=V_ORDER_CONTACT_DETAIL_ID
                AND SITE_ID = V_SITE_ID;
       END IF;
END IF;
JAY_DEBUG(V_ERROLINE||'IN_PRODUCT_NAME'||IN_PRODUCT_NAME||'IN_BFG_SITE_ID'||IN_BFG_SITE_ID,'epxeiod3',OUT_ERRMSG);
OUT_STATUS :=1;
 EXCEPTION
      WHEN OTHERS
      THEN
         out_errmsg := SQLERRM ||'---'||V_ERROLINE ;
         pkg_common.spi_error_log (IN_BFG_SITE_ID,
                                   IN_BFG_CNR_ID,
                                   IN_BFG_CNT_ID,
                                                                     IN_BFG_ADDRESS_ID,
                                   'SPU_ORDER_CONTACT_MX_ROLE_ID',
                                   IN_BFG_CNR_ID,
                                   OUT_STATUS,
                                   OUT_ERRMSG
                                  );
END SPU_ORDER_CONTACT_MX_ROLE_ID;


END pkg_bom_gen_mx;
/


CREATE OR REPLACE PACKAGE           pkg_lineitem
IS
/******************************************************************************
   NAME:       PRODSQE
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0      04/05/2010    GHUCS         1. Created New SP to save service names SPI_SERVICE_PRICING
   2.0      08/10/2011    MX-Suman      2. Created New SP for saving pring detials.
 ******************************************************************************/-- TYPE mytabletype2 IS TABLE OF VARCHAR (4000);
   TYPE mytabletypess IS TABLE OF VARCHAR2 (4000);

   PROCEDURE spi_caveatdetails (
      in_param       IN       CLOB,
      in_createdby   IN       NUMBER,
      out_errmsg     OUT      VARCHAR2
   );

   PROCEDURE sps_getcaveatdetails (
      in_qrefid     IN       VARCHAR2,
      out_details   OUT      sys_refcursor
   );

   PROCEDURE spi_accessqref (
      in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
      in_siteid          IN       site.site_id%TYPE,
      in_param           IN       CLOB,
      in_createdby       IN       access_qref.created_by%TYPE,
      out_status         OUT      NUMBER,
      out_errmsg         OUT      VARCHAR2
   );

   PROCEDURE sps_accessqref (
      in_quoteheaderid       IN       quote_header.quote_header_id%TYPE,
      in_siteid              IN       site.site_id%TYPE,
      in_non_std_qref_flag   IN       access_qref.non_std_qref_flag%TYPE,
      out_accessqref         OUT      sys_refcursor
   );

   PROCEDURE spi_pricing (
      in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
      in_siteid          IN       line_item.site_id%TYPE,
      in_prodname        IN       line_item.product_name%TYPE,
      in_pricelinitm     IN       VARCHAR2,
      in_createdby       IN       price_line_item_detail.created_by%TYPE,
      out_status         OUT      NUMBER,
      out_errmsg         OUT      VARCHAR2
   );

   PROCEDURE spi_cpeqref (in_quoteheaderid          IN       quote_header.quote_header_id%TYPE,
      in_siteid                 IN       site.site_id%TYPE,
      -- in_cpeqref          IN       cpe_qref.cpe_qref%TYPE,
      in_cpeqref_pri            IN       cpe_qref.cpe_qref%TYPE,
      -- in_cpeqref_sec      IN       cpe_qref.cpe_qref%TYPE,--need to disable this
      in_psuppliername          IN       cpe_qref.pri_supplier_name%TYPE,
      in_pstatus                IN       cpe_qref.pri_status%TYPE,
      in_ponetimechrg           IN       cpe_qref.pri_one_time_charge%TYPE,
      in_precurringchrg         IN       cpe_qref.pri_recurring_charge%TYPE,
      in_ssuppliername          IN       cpe_qref.sec_supplier_name%TYPE,
      in_sstatus                IN       cpe_qref.sec_status%TYPE,
      in_sonetimechrg           IN       cpe_qref.sec_one_time_charge%TYPE,
      in_srecurringchrg         IN       cpe_qref.sec_recurring_charge%TYPE,
      in_scpeqref               IN       cpe_qref.secondary_cpe_qref%TYPE,
      in_expdate                IN       VARCHAR2,
      --cpe_qref.expiry_date%TYPE,
      in_leadtime               IN       cpe_qref.cpe_lead_time%TYPE,
      in_leadtimestatus         IN       cpe_qref.cpe_lead_time_status%TYPE,
      in_comments               IN       cpe_qref.comments%TYPE,
      in_pri_ssp_bid_ref_no     IN       cpe_qref.pri_ssp_bid_ref_no%TYPE,
      in_sec_ssp_bid_ref_no     IN       cpe_qref.sec_ssp_bid_ref_no%TYPE,
      in_pri_offer_valid_date   IN       cpe_qref.pri_offer_valid_date%TYPE,
      in_sec_offer_valid_date   IN       cpe_qref.sec_offer_valid_date%TYPE,
      in_caveats                IN       VARCHAR2,
      in_createdby              IN       cpe_qref.created_by%TYPE,
      in_pri_Cease_Charges      IN       cpe_qref.pri_Cease_Charges%TYPE,
      in_pri_Additional_Charges IN       cpe_qref.pri_Additional_Charges%TYPE,
      in_pri_Cease_Qref_ID      IN       cpe_qref.pri_Cease_Qref_ID%TYPE,
      in_pri_Cease_SUPPLIER_NAME  IN       cpe_qref.pri_Cease_SUPPLIER_NAME%TYPE,
      in_sec_Cease_Charges      IN       cpe_qref.sec_Cease_Charges%TYPE,
      in_sec_Additional_Charges IN       cpe_qref.sec_Additional_Charges%TYPE,
      in_sec_Cease_Qref_ID      IN       cpe_qref.sec_Cease_Qref_ID%TYPE,
      in_sec_Cease_SUPPLIER_NAME  IN       cpe_qref.sec_Cease_SUPPLIER_NAME%TYPE,
      out_status                OUT      NUMBER,
      out_errmsg                OUT      VARCHAR2
   );


   PROCEDURE spu_access_qref (
      in_quoteheaderid   IN       quote_site.quote_header_id%TYPE,
      in_siteid          IN       quote_site.site_id%TYPE,
      in_param           IN       CLOB,
      in_modifiedby      IN       access_qref.modified_by%TYPE,
      out_status         OUT      NUMBER,
      out_errmsg         OUT      VARCHAR2
   );

   PROCEDURE spd_access_qref (
      in_quoteheaderid   IN       quote_site.quote_header_id%TYPE,
      in_siteid          IN       quote_site.quote_site_id%TYPE,
      in_non_std_flag    IN       access_qref.non_std_qref_flag%TYPE,
      in_modifiedby      IN       access_qref.modified_by%TYPE,
      out_status         OUT      NUMBER,
      out_errmsg         OUT      VARCHAR2
   );

   PROCEDURE spd_cpeqref (
      in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
      in_siteid          IN       site.site_id%TYPE,
      out_status         OUT      NUMBER,
      out_errmsg         OUT      NVARCHAR2
   );

   /* Added for Ghucs */
   PROCEDURE spi_service_pricing (
      in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
      in_siteid          IN       line_item.site_id%TYPE,
      in_prodname        IN       line_item.product_name%TYPE,
      in_pricelinitm     IN       VARCHAR2,
      in_createdby       IN       price_line_item_detail.created_by%TYPE,
      out_status         OUT      NUMBER,
      out_errmsg         OUT      VARCHAR2
   );

   PROCEDURE spi_pricing_bucket (
      --added on 09/06/2010 by Tanmayi for multisite pricing
      in_quoteheaderid   IN       pricing_bucket.quote_header_id%TYPE,
      in_requestid       IN       pricing_bucket.request_id%TYPE,
      in_bucket          IN       bucket_tab,
      in_createdby       IN       pricing_bucket.created_by%TYPE,
      out_bucketid       OUT      pricing_bucket.bucket_id%TYPE,
      out_status         OUT      NUMBER,
      out_errmsg         OUT      VARCHAR2
   );

   PROCEDURE spi_multisite_pricing (
      in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
      in_pricing         IN       pricing_tab,
      in_createdby       IN       price_line_item_detail.created_by%TYPE,
      out_status         OUT      NUMBER,
      out_errmsg         OUT      VARCHAR2
   );

   PROCEDURE spi_multisite_qrefcaveat (
      in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
      in_qreflist        IN       aqref_tab,
      in_createdby       IN       access_qref.created_by%TYPE,
      out_status         OUT      NUMBER,
      out_errmsg         OUT      VARCHAR2
   );

   PROCEDURE spi_multisite_cpeqrefcaveat (
      in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
      in_cpeqreflist     IN       cpeqref_tab,
      in_createdby       IN       cpe_qref.created_by%TYPE,
      out_status         OUT      NUMBER,
      out_errmsg         OUT      VARCHAR2
   );

/* Start R3 -Modify */
   PROCEDURE spi_save_pricing_from_bfg (
      --added on25/06/2010 by Jay to save as_is data for modify
      in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
      in_pricing         IN       pricing_tab,
      in_siteid          IN       line_item.site_id%TYPE,
      in_servicename     IN       quote_site_service.service_name%TYPE,
      in_createdby       IN       price_line_item_detail.created_by%TYPE,
      out_status         OUT      NUMBER,
      out_errmsg         OUT      VARCHAR2
   );

   PROCEDURE spi_pricing_modify_as_is (
      --added on25/06/2010 by arpitha for modify
      in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
      in_pricing         IN       pricing_tab,
      in_siteid          IN       line_item.site_id%TYPE,
      in_servicename     IN       quote_site_service.service_name%TYPE,
      in_createdby       IN       price_line_item_detail.created_by%TYPE,
      out_status         OUT      NUMBER,
      out_errmsg         OUT      VARCHAR2
   );

   PROCEDURE spi_pricing_modify (
      --added on25/06/2010 by arpitha  for modify
      in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
      in_pricing         IN       pricing_tab,
      in_siteid          IN       line_item.site_id%TYPE,
      in_servicename     IN       quote_site_service.service_name%TYPE,
      in_createdby       IN       price_line_item_detail.created_by%TYPE,
      out_status         OUT      NUMBER,
      out_errmsg         OUT      VARCHAR2
   );

   PROCEDURE spi_pricing_to_be (
      --added on25/06/2010 by Jay for modify
      in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
      in_siteid          IN       line_item.site_id%TYPE,
      in_prodname        IN       line_item.product_name%TYPE,
      in_pricelinitm     IN       VARCHAR2,
      in_servicename     IN       quote_site_service.service_name%TYPE,
      in_createdby       IN       price_line_item_detail.created_by%TYPE,
      out_status         OUT      NUMBER,
      out_errmsg         OUT      VARCHAR2
   );

/* End R3 -Modify */

   ---------------------Specificatio-----------------------
   PROCEDURE spi_pricing_obj (
      --added on12/08/2010 for  MX
      in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
      in_pricing         IN OUT   pricing_tab,
      in_siteid          IN       line_item.site_id%TYPE,
      in_createdby       IN       price_line_item_detail.created_by%TYPE,
      in_check_box       IN       VARCHAR2,
      out_status         OUT      NUMBER,
      out_errmsg         OUT      VARCHAR2
   );

   PROCEDURE sps_accessqrefreuse (
      in_quoteid             IN       quote.quote_id%TYPE,
      in_quoteheaderid       IN       quote_header.quote_header_id%TYPE,
      in_siteid              IN       site.site_id%TYPE,
      in_accesstech          IN       access_qref.access_technology%TYPE,
      in_accesstype          IN       access_qref.access_type%TYPE,
      in_accessspeed         IN       access_qref.access_speed%TYPE,
      in_resil               IN       access_qref.resiliency%TYPE,
      in_non_std_qref_flag   IN       access_qref.non_std_qref_flag%TYPE,
      in_customer_id         IN       quote.customer_id%TYPE,
      out_accessqref         OUT      sys_refcursor,
      out_caveat_details     OUT      sys_refcursor
   );

   PROCEDURE spi_cpeqref_r5 (
      in_quoteheaderid          IN       quote_header.quote_header_id%TYPE,
      in_siteid                 IN       site.site_id%TYPE,
      -- in_cpeqref          IN       cpe_qref.cpe_qref%TYPE,
      in_cpeqref_pri            IN       cpe_qref.cpe_qref%TYPE,
      -- in_cpeqref_sec      IN       cpe_qref.cpe_qref%TYPE,--need to disable this
      in_psuppliername          IN       cpe_qref.pri_supplier_name%TYPE,
      in_pstatus                IN       cpe_qref.pri_status%TYPE,
      in_ponetimechrg           IN       cpe_qref.pri_one_time_charge%TYPE,
      in_precurringchrg         IN       cpe_qref.pri_recurring_charge%TYPE,
      in_ssuppliername          IN       cpe_qref.sec_supplier_name%TYPE,
      in_sstatus                IN       cpe_qref.sec_status%TYPE,
      in_sonetimechrg           IN       cpe_qref.sec_one_time_charge%TYPE,
      in_srecurringchrg         IN       cpe_qref.sec_recurring_charge%TYPE,
      in_scpeqref               IN       cpe_qref.secondary_cpe_qref%TYPE,
      in_expdate                IN       VARCHAR2,
      --cpe_qref.expiry_date%TYPE,
      in_leadtime               IN       cpe_qref.cpe_lead_time%TYPE,
      in_leadtimestatus         IN       cpe_qref.cpe_lead_time_status%TYPE,
      in_comments               IN       cpe_qref.comments%TYPE,
      in_pri_ssp_bid_ref_no     IN       cpe_qref.pri_ssp_bid_ref_no%TYPE,
      in_sec_ssp_bid_ref_no     IN       cpe_qref.sec_ssp_bid_ref_no%TYPE,
      in_pri_offer_valid_date   IN       cpe_qref.pri_offer_valid_date%TYPE,
      in_sec_offer_valid_date   IN       cpe_qref.sec_offer_valid_date%TYPE,
      in_caveats                IN       VARCHAR2,
      in_createdby              IN       cpe_qref.created_by%TYPE,
      out_status                OUT      NUMBER,
      out_errmsg                OUT      VARCHAR2
   );

   PROCEDURE spi_accessqref_as_is (
      in_quoteheaderid       IN       quote_header.quote_header_id%TYPE,
      in_siteid              IN       site.site_id%TYPE,
      in_param               IN       CLOB,
      in_createdby           IN       access_qref.created_by%TYPE,
      in_non_std_qref_flag   IN       access_qref.non_std_qref_flag%TYPE,
      out_status             OUT      NUMBER,
      out_errmsg             OUT      VARCHAR2
   );

   PROCEDURE sps_accessqref_as_is (
      in_quoteheaderid       IN       quote_header.quote_header_id%TYPE,
      in_siteid              IN       site.site_id%TYPE,
      in_non_std_qref_flag   IN       access_qref.non_std_qref_flag%TYPE,
      out_accessqref         OUT      sys_refcursor
   );

   PROCEDURE spd_access_qref_as_is (
      in_quoteheaderid   IN       quote_site.quote_header_id%TYPE,
      in_siteid          IN       quote_site.quote_site_id%TYPE,
      in_non_std_flag    IN       access_qref.non_std_qref_flag%TYPE,
      in_modifiedby      IN       access_qref.modified_by%TYPE,
      out_status         OUT      NUMBER,
      out_errmsg         OUT      VARCHAR2
   );

   PROCEDURE spi_pricing_for_reprice (
      in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
      in_siteid          IN       line_item.site_id%TYPE,
      in_prodname        IN       line_item.product_name%TYPE,
      in_pricelinitm     IN       VARCHAR2,
      in_createdby       IN       price_line_item_detail.created_by%TYPE,
      out_status         OUT      NUMBER,
      out_errmsg         OUT      VARCHAR2
   );
   /***** Added spu_action_code_pricing to update action code for pricing elements *****************/
   PROCEDURE spu_action_code_pricing (
      in_quoteheaderid      IN       quote_header.quote_header_id%TYPE,
      in_as_is_pricelines   IN       pricing_action_code_tbl,
      in_to_be_pricelines   IN       pricing_action_code_tbl,
      out_status            OUT      NUMBER,
      out_errmsg            OUT      VARCHAR2
   );
   /*Added spd_pricing for fixing defect 87218 (T2 defect R9 IVPN2) call anywhere functonality ***/
   PROCEDURE spd_pricing (
   in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
   in_siteid          IN       line_item.site_id%TYPE,
   in_prodname        IN       line_item.product_name%TYPE,
   in_pricelinitm     IN       VARCHAR2,
   in_fallback        IN       line_item.fallback_type%TYPE,
   in_createdby       IN       price_line_item_detail.created_by%TYPE,
   out_status         OUT      NUMBER,
   out_errmsg         OUT      VARCHAR2
);

/*Added for MX to insert ASIS Data */
    PROCEDURE spi_pricing_asis_multisite(
    in_quoteheaderid IN quote_header.quote_header_id%TYPE,
    IN_PRICING       IN PRICING_TAB,
    in_siteid        IN line_item.site_id%TYPE,
    in_servicename   IN quote_site_service.service_name%TYPE,
    in_createdby     IN price_line_item_detail.created_by%TYPE,
    out_status OUT NUMBER,
    out_errmsg OUT VARCHAR2 );

 PROCEDURE spi_associate_aqref_with_quote (
   in_access_qref_id     IN       access_qref.access_qref_id%TYPE,
   in_createdby       IN       access_qref.created_by%TYPE,
   out_status         OUT      NUMBER,
   out_errmsg         OUT      VARCHAR2
);

PROCEDURE spi_access_qref_optimize (
   in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
   in_qreflist        IN       aqref_tab,
   in_createdby       IN       access_qref.created_by%TYPE,
   out_status         OUT      NUMBER,
   out_errmsg         OUT      VARCHAR2
);


--Scenario – C9.15
-- change resiliency from Standard to Secure/Secure+ and select “Use Existing Primary Connection as Resilient Connection” is Yes.
PROCEDURE spi_pricing_tobe_pri_to_sec (
   in_quote_header_id  IN   quote_header.quote_header_id%TYPE,
   in_site_id          IN   site.site_id%TYPE,
   out_status          OUT  NUMBER,
   out_errmsg          OUT  VARCHAR2,
   in_prod_list        IN   VARCHAR2  );

PROCEDURE spi_pricing_quoteheader(
    in_quote_id             IN NUMBER,
    in_quote_header_id      IN NUMBER,
    in_site_id              IN NUMBER,
    in_product_id           IN NUMBER,
    in_quote_status         IN VARCHAR2,
    in_createdby            IN VARCHAR2,
    in_discount_app         IN VARCHAR2,
    in_bid_manager_email_id IN VARCHAR2,
    in_sales_user_reason    IN VARCHAR2,
    in_bid_manager_reason   IN VARCHAR2,
    OUT_STATUS                OUT varchar2,
    IN_PRODUCT_NAME               IN       VARCHAR2 DEFAULT NULL);

-- Added the below SP on 5/9/2011 - Start
PROCEDURE spi_associate_cheap_optqref (
   in_quoteheader_id     IN       quote_header.quote_header_id%TYPE,
   in_createdby          IN       quote_header.created_by%TYPE,
   out_status            OUT      NUMBER,
   out_errmsg            OUT      VARCHAR2
 );
-- Added the below SP on 5/9/2011 - End

END pkg_lineitem;
/


CREATE OR REPLACE PACKAGE pkg_order
IS
/******************************************************************************
   NAME:       PRODSQE
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0      27/01/2010    Tanmayi        1. modified sps_lineiteminfo to retrieve
                                            access_qref details
   1.1      3/2/2010      Tanmayi        1. Added sps_validate_classic to check if
                                            customer and site is from classic or local
                                         2. Added spu_customer_classic to update
                                            classic_customer_id and classic_customer_name
                                            to null
                                         3. Added spu_site_classic to update classic_site_id
                                            and classic_site_name to null
  1.2     10/2/2010       Srinivas       1.Modified spi_customer_billing -> if in_billinglist
                                           is NULL then update Billing id and other related information
                                           against System (CLASSIC/SQE).
  1.3     25/02/2011     Suman           5.spi_as_is_to_order_mx NEW Sp Created for the MX product
  1.4     07/06/2011     Suman           6.Added New SP for the order contact SPI_ORDER_CONTACTS

******************************************************************************/
   TYPE t_attrmapid IS TABLE OF attribute_mapping.attribute_mapping_id%TYPE
      INDEX BY BINARY_INTEGER;

   TYPE t_configlevel IS TABLE OF attribute_mapping.config_level%TYPE
      INDEX BY BINARY_INTEGER;

   TYPE t_value IS TABLE OF line_item_detail.VALUE%TYPE
      INDEX BY BINARY_INTEGER;

   TYPE t_qty IS TABLE OF NUMBER
      INDEX BY BINARY_INTEGER;

   TYPE t_billing IS TABLE OF VARCHAR2 (20)
      INDEX BY BINARY_INTEGER;

   TYPE t_classic_element_id IS TABLE OF line_item_detail.classic_element_id%TYPE
      index by binary_integer;
   TYPE t_classic_element_name IS TABLE OF line_item_detail.classic_element_name%TYPE
      index by binary_integer;

   FUNCTION arrachment_tbl_to_cur (in_attachment_tbl attachment_tbl)
      RETURN attachment_tbl PIPELINED;

   PROCEDURE sps_customerinfo (
      in_quoteid            IN       quote.quote_id%TYPE,
      out_details           OUT      sys_refcursor,
      out_contacts          OUT      sys_refcursor,
      out_ord_pdt_details   OUT      sys_refcursor
   );

   PROCEDURE sps_siteinfo (
      in_quote_headerid   IN       quote_header.quote_header_id%TYPE,
      out_sitedetails     OUT      sys_refcursor
   );

   PROCEDURE sps_lineiteminfo (
      in_quoteid           IN       quote.quote_id%TYPE,
      in_quoteheaderid     IN       quote_header.quote_header_id%TYPE,
      out_details          OUT      sys_refcursor,
      out_bgpprice         OUT      sys_refcursor,
      out_port_ip_routes   OUT      sys_refcursor
   );

   --out_parent_child OUT sys_refcursor);
   PROCEDURE spi_order_configuration (
      in_orderheaderid    IN       order_header.order_header_id%TYPE,
      in_siteid           IN       site.site_id%TYPE,
      in_attributelist    IN       CLOB,
      in_attributelevel   IN       attribute_mapping.attribute_level%TYPE,
      in_createdby        IN       order_line_item.created_by%TYPE,
      out_status          OUT      NUMBER,
      out_errmsg          OUT      VARCHAR2
   );

   PROCEDURE spi_order (
      in_quoteheaderid              IN       quote_header.quote_header_id%TYPE,
      in_bid                        IN       quote_header.bid_number%TYPE,
      in_oppid                      IN       quote_header.opportunity_id%TYPE,
      in_orderstatus                IN       order_header.order_status%TYPE,
      in_ordertype                  IN       order_header.order_type%TYPE,
      in_createdby                  IN       order_header.created_by%TYPE,
      in_contractid                 IN       order_header.contract_id%TYPE,
      in_comments                   IN       order_header.comments%TYPE,
      in_ofsd                       IN       VARCHAR2,
      in_quotestatus                IN       VARCHAR2,
      in_is_order_rejected          IN       VARCHAR2,
                                         --904 Sprint2 clean order management
      --R1 IP Clear Reach out begin
      in_is_order_ipclearreachout   IN       order_header.is_order_ipclearreachoutsite%TYPE,
      in_ftip_number                IN       order_header.ftip_number%TYPE,
      in_emailid                    IN       order_header.emailid%TYPE,
      --R1 IP Clear Reach out end
      --R3 Hub and Spoke begin
      in_vpn_connectivity_mode      IN       order_header.vpn_connectivity_mode%TYPE,
      --R3 Hub and Spoke end
      io_orderheaderid              IN OUT   order_header.order_header_id%TYPE,
      out_status                    OUT      NUMBER,
      out_errmsg                    OUT      VARCHAR2,
      in_product_name    IN       VARCHAR2 DEFAULT NULL
   );

   PROCEDURE spu_order_contact (
      in_orderheaderid   IN       order_contact_detail.order_header_id%TYPE,
      in_sscontact       IN       VARCHAR2,
      in_secontact       IN       VARCHAR2,
      in_amcontact       IN       VARCHAR2,
      in_omcontact       IN       VARCHAR2,
      in_bpmcontact      IN       VARCHAR2,
      in_modifiedby      IN       order_contact_detail.created_by%TYPE,
      out_status         OUT      NUMBER,
      out_errmsg         OUT      VARCHAR2
   );

   PROCEDURE sps_site_billing (
      in_orderheaderid   IN       order_header.quote_header_id%TYPE,
      in_siteid          IN       site.site_id%TYPE,
      in_customerid      IN       customer.customer_id%TYPE,
      out_sitebilling    OUT      sys_refcursor
   );

   PROCEDURE spi_customer_billing (
      in_customerid         IN       customer.customer_id%TYPE,
      in_orderheaderid      IN       order_header.quote_header_id%TYPE,
      in_billinglist        IN       VARCHAR2,
      in_defaultbillingid   IN       VARCHAR2,
      in_defaultsystem      IN       customer_billing_info.SYSTEM%TYPE,
      in_currency           IN       customer_billing_info.currency%TYPE,
      ---Added by Srini
      in_modifiedby         IN       NUMBER,
      out_status            OUT      NUMBER,
      out_errmsg            OUT      VARCHAR2
   );

   PROCEDURE spi_order_site_detail (
      in_orderheaderid     IN       order_header.order_header_id%TYPE,
      in_customerid        IN       customer.customer_id%TYPE,
      in_siteid            IN       order_site_detail.site_id%TYPE,
      in_classicsiteid     IN       site.classic_site_id%TYPE,
      in_classicsitename   IN       site.classic_site_name%TYPE,
      in_crd               IN       VARCHAR2,
      in_sitebillingid     IN       order_site_detail.billing_id%TYPE,
      in_system            IN       order_site_detail.SYSTEM%TYPE,
      in_modifiedby        IN       order_site_detail.created_by%TYPE,
      out_status           OUT      NUMBER,
      out_errmsg           OUT      VARCHAR2
   );

   PROCEDURE sps_validate_classic (
      in_customerid   IN       customer.customer_id%TYPE,
      out_status      OUT      NUMBER
   -- out_errmsg      OUT      VARCHAR2
   );

   PROCEDURE spu_site_classic (
      in_siteid       IN       site.site_id%TYPE,
      in_modifiedby   IN       site.modified_by%TYPE,
      out_status      OUT      NUMBER,
      out_errmsg      OUT      VARCHAR2
   );

   PROCEDURE spu_customer_classic (
      in_customerid   IN       customer.customer_id%TYPE,
      in_modifiedby   IN       customer.modified_by%TYPE,
      out_status      OUT      NUMBER,
      out_errmsg      OUT      VARCHAR2
   );

   PROCEDURE sps_validate_order (
      in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
      out_status         OUT      NUMBER,
      out_icb_status     OUT      NUMBER,
      -- Added in_product_name on 17/12/2010 as part of introducing new table QUOTE_STATUS
      in_product_name     IN       VARCHAR2 DEFAULT NULL
   );

   PROCEDURE spu_classic_custsite (
      in_customerid     IN       customer.customer_id%TYPE,
      in_customerflag   IN       customer.classic_customer%TYPE,
      in_siteid         IN       site.site_id%TYPE,
      in_siteflag       IN       site.classic_site%TYPE,
      out_status        OUT      NUMBER,
      out_errmsg        OUT      NVARCHAR2
   );

   PROCEDURE sps_rfo_customer (
      in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
      out_status         OUT      NUMBER
   );

    PROCEDURE spi_attachment (
      in_order_id         IN OUT      NUMBER,
      in_attachment_tbl   IN       attachment_tbl,
      in_quoteheaderid    in out number,
      out_status          OUT      NUMBER,
      out_errmsg          OUT      VARCHAR2
   );

PROCEDURE sps_quote_attachment (
   in_quote_header_id    IN       NUMBER,
   in_site_id            IN       NUMBER,
   in_attachment_type    IN       VARCHAR2,
   out_cur_attachments   OUT      sys_refcursor
);


   PROCEDURE sps_attachment (
      in_quote_header_id    IN       NUMBER,
      in_site_id            IN       NUMBER,
      out_cur_attachments   OUT      sys_refcursor
   );

   -- ##### Change for 904 - Report Bundles        begin
   PROCEDURE spu_centralsite_cust (
      in_cid               IN       customer.customer_id%TYPE,
      in_comp              IN       customer.company_name%TYPE,
      in_vat               IN       customer.vat_number%TYPE,
      in_salid             IN       customer.sales_channel_id%TYPE,
      in_ccntryid          IN       address.country_id%TYPE,
      in_caddr1            IN       address.address_line1%TYPE,
      in_caddr2            IN       address.address_line2%TYPE,
      in_ccity             IN       address.city%TYPE,
      in_czip              IN       address.post_zip_code%TYPE,
      in_contacts          IN       VARCHAR2,
      in_vpndet            IN       VARCHAR2,
      in_billingdet        IN       VARCHAR2,
      in_modifiedby        IN       customer.modified_by%TYPE,
      in_classicsiteid     IN       site.classic_site_id%TYPE,
      -- central siteid for a customer from classic
      in_classicsitename   IN       site.classic_site_name%TYPE,
      --central sitename for a customer from classic
      out_status           OUT      NUMBER,
      out_errmsg           OUT      VARCHAR2
   );

   PROCEDURE spi_order_infonetsite_detail (
      in_siteid           IN       site_infonet.site_id%TYPE,
      in_ivs_migr_order   IN       site_infonet.ivs_migration_order%TYPE,
      in_ivs_migr_team    IN       site_infonet.ivs_migration_team%TYPE,
      in_ivsgateway       IN       site_infonet.ivs_phase2gateway%TYPE,
      in_tpe_id           IN       site_infonet.tpe_id%TYPE,
      in_url              IN       site_infonet.url_details%TYPE,
      --in_modifiedby         IN       order_site_detail.created_by%TYPE,
      out_status          OUT      NUMBER,
      out_errmsg          OUT      VARCHAR2
   );

   PROCEDURE spi_port_ip_routes (
      in_orderheaderid        IN       NUMBER,
      in_siteid               IN       NUMBER,
      in_attribute_level      IN       VARCHAR2,
      in_port_ip_routes_tbl   IN       port_ip_routes_tbl,
      out_status              OUT      NUMBER,
      out_errmsg              OUT      VARCHAR2
   );

   PROCEDURE sp_edca_response (
      in_edca_order_id                VARCHAR2,
      in_quote_header_id              VARCHAR2,
      in_classic_customer_id          VARCHAR2,
      in_first_name                   VARCHAR2,
      in_last_name                    VARCHAR2,
      in_email                        VARCHAR2,
      in_phone                        VARCHAR2,
      in_fax                          VARCHAR2,
      in_mobile                       VARCHAR2,
      in_title                        VARCHAR2,
      in_user_id                      VARCHAR2,
      in_ein                          VARCHAR2,
      in_role                         VARCHAR2,
      in_edca_parent_site_id          VARCHAR2,
      in_edca_child_order_id          VARCHAR2,
      in_edca_child_site_id           VARCHAR2,
      in_site_id                      VARCHAR2,
      in_site_status                  VARCHAR2,
      in_classic_site_id              VARCHAR2,
      in_customer_signed_date         VARCHAR2,
      in_last_assigned_user           VARCHAR2,
      in_last_assigned_team           VARCHAR2,
      in_order_status                 VARCHAR2,
      in_rejection_type               VARCHAR2,
      in_reason                       VARCHAR2,
      in_team_wrote_reason            VARCHAR2,
      in_modified_by                  edca_response.modified_by%TYPE,
      in_modified_date                edca_response.modified_date%TYPE,
      out_errmsg                OUT   VARCHAR2
   );

   PROCEDURE sps_billdetailsinfo (
      in_quoteid         IN       quote.quote_id%TYPE,
      in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
      out_core           OUT      sys_refcursor,
      out_access         OUT      sys_refcursor,
      out_cpe            OUT      sys_refcursor,
      out_port           OUT      sys_refcursor,
      out_servicewrap    OUT      sys_refcursor
   );

   PROCEDURE sps_billvalidate_order (
      in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
      out_status         OUT      NUMBER
   );

   /* Modify **/
   PROCEDURE spi_as_is_to_order (
      in_quoteheaderid   IN       order_line_item_as_is.quote_header_id%TYPE,
      in_createdby       IN       order_line_item.created_by%TYPE,
      out_status         OUT      NUMBER,
      out_errmsg         OUT      VARCHAR2
   );

   PROCEDURE spi_order_config_modify (
      in_orderheaderid           IN       order_header.order_header_id%TYPE,
      in_siteid                  IN       site.site_id%TYPE,
      in_quote_site_service_id   IN       quote_site_service.quote_site_service_id%TYPE,
      --  in_attributelist  IN line_item_tbl, arch commented
      in_attributelist           IN       order_line_item_tbl,
      in_attributelevel          IN       attribute_mapping.attribute_level%TYPE,
      in_createdby               IN       order_line_item.created_by%TYPE,
      out_status                 OUT      NUMBER,
      out_errmsg                 OUT      VARCHAR2
   );

   PROCEDURE spi_order_configuration_to_be (
      in_orderheaderid    IN       order_header.order_header_id%TYPE,
      in_siteid           IN       site.site_id%TYPE,
      in_service_name     IN       quote_site_service.service_name%TYPE,
      in_attributelist    IN       CLOB,
      in_attributelevel   IN       attribute_mapping.attribute_level%TYPE,
      in_createdby        IN       order_line_item.created_by%TYPE,
      out_status          OUT      NUMBER,
      out_errmsg          OUT      VARCHAR2
   );

   PROCEDURE sps_lineiteminfo_modify (
      in_quoteid            IN       quote.quote_id%TYPE,
      in_quoteheaderid      IN       quote_header.quote_header_id%TYPE,
      out_details           OUT      sys_refcursor,
      out_bgpprice          OUT      sys_refcursor,
      out_port_ip_routes    OUT      sys_refcursor,
      out_act_cod_service   OUT      sys_refcursor
   );

   ------------------Specification-----------------

 --Added new sp to save Order Configuration Details using Objects ,MX
   PROCEDURE spi_order_config_obj (
      in_orderheaderid    IN       order_header.order_header_id%TYPE,
      in_siteid           IN       site.site_id%TYPE,
      in_attributelist    IN       order_line_item_tbl,
      in_attributelevel   IN       attribute_mapping.attribute_level%TYPE,
      in_createdby        IN       order_line_item.created_by%TYPE,
      out_status          OUT      NUMBER,
      out_errmsg          OUT      VARCHAR2,
      in_attrstrlist      IN       CLOB DEFAULT NULL
   );

   -- Archana added new sp for MX to update order status on 17/08/2010
   procedure spu_orderheader(
        in_quoteheaderid      IN        quote_header.quote_header_id%TYPE,
        in_orderheaderid      IN        order_header.order_header_id%TYPE,
        in_orderstatus      IN    order_header.order_status%TYPE,
        in_modifiedby          IN    quote_header.modified_by%TYPE,
        out_status                OUT        NUMBER,
        out_errmsg                OUT        VARCHAR2,
      in_product_name    IN       VARCHAR2 DEFAULT NULL
    );

PROCEDURE spi_as_is_to_order_ivpn2 (
      in_quoteheaderid   IN       order_line_item_as_is.quote_header_id%TYPE,
      in_createdby       IN       order_line_item.created_by%TYPE,
      out_status         OUT      NUMBER,
      out_errmsg         OUT      VARCHAR2
   );

 -----------NEW Sp Created for the MX product
   PROCEDURE spi_as_is_to_order_mx (
      in_quoteheaderid   IN       order_line_item_as_is.quote_header_id%TYPE,
      in_createdby       IN       order_line_item.created_by%TYPE,
      out_status         OUT      NUMBER,
      OUT_ERRMSG         OUT      varchar2
   );

 -----Order Contact MX Project
     PROCEDURE         spi_order_contacts (
       in_orderheaderid     IN       order_contact_detail.order_header_id%TYPE,
       in_contact_type1     IN       VARCHAR2,
       in_contact1          IN       VARCHAR2,
       in_contact_type2     IN       VARCHAR2,
       in_contact2          IN       VARCHAR2,
       in_modifiedby        IN       price_line_item_detail.modified_by%TYPE,
       in_site_id           IN       site.site_id%TYPE,
       in_bfg_customer_id   IN       customer.bfg_customer_id%TYPE,
       out_status           out      NUMBER,
       out_errmsg           out      VARCHAR2
    );
 -----Added by Suman/Udaya
PROCEDURE spi_order_conf_obj_r9(
    in_siteid          IN site_detials_tab,
    in_attributelevel  IN VARCHAR2,
    in_createdby       IN quote_header.created_by%TYPE,
    in_bfg_customer_id IN customer.bfg_customer_id%TYPE,
    in_orderheaderid   IN order_header.order_header_id%TYPE,
    in_order_item      IN order_line_item_tbl,
    in_inter_conf      IN VARCHAR2,
    in_contact_role    IN VARCHAR2,
    out_status out        VARCHAR2,
    OUT_ERRMSG OUT        varchar2);

PROCEDURE spu_site_ipsec(
    in_customerid        IN customer.customer_id%TYPE,
    in_siteid            IN site.site_id%TYPE,
    in_buildingno        IN address.building_number%TYPE,
    in_addressline1      IN address.address_line1%TYPE,
    in_city              IN address.city%TYPE,
    in_state             IN address.state%TYPE,
    in_state_code        IN address.state_code%TYPE,
    in_countryid         IN country.country_id%TYPE,
    in_postzipcode       IN address.post_zip_code%TYPE,
    in_telephoneareacode IN site.telephone_area_code%TYPE,
    in_county            IN address.county%TYPE,
    in_additionalsite    IN VARCHAR2, --for address
    in_bfgsiteid         IN site.bfg_site_id%TYPE,
    in_bfgsitename       IN site.bfg_site_name%TYPE,
    in_modifiedby        IN site.modified_by%TYPE,
    in_orderheaderid     IN order_header.order_header_id%TYPE,
    out_status out     NUMBER,
    out_errmsg out     VARCHAR2,
    in_contact_role IN VARCHAR2 DEFAULT NULL
  );



END;
/


CREATE OR REPLACE PACKAGE PKG_QUOTE
AS
/******************************************************************************
   NAME:       PRODSQE
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0      11/07/2009    Rajkamal        1.Package for QUOTE related  CRUD Operations
   1.1      11/13/2009    Rajkamal        1.Added Bid ,Opportunityid,Sales Rep Name,QuoteName,
                                            ype,status and quote reference number
   1.2     1/16/2010      Tanmayi         1.Modified spi_configuration to check for CPE
   1.3     1/18/2010      Tanmayi         1.Modified spi_configuration to check for change in
                                            bundle and multiple part types
   1.4     05/04/2010     Ghucs           1.Added new parameter in_contractid in spi_quote procedure
                                          2.Created new SP spi_service_configuration
   1.5     08/10/2010     MX              1.Created New SP spi_quote_config_obj
   1.6     08/26/2010     Ghucs           1.Created new SP sps_product_lovs for populating Product
                            		 configuration LOVs
	                                          2.Created new SP spd_quote_config for deleting Product
              	                              configuration
   1.7     11/04/2010     Sandeep Singh   1.Included new Parameter in_contract_id in sps_product_lovs
		                                   for GHUCS R9
   1.8     03/25/2011     Sandeep Singh   1.Modifications done in sps_product_lovs for GHUCS ORT LBIBO/CBIBO.
   1.9     27/06/2011     Suman           1.0 Create New to SP for the MX spi_asset_from_bfg_multisite,spi_order_contact_detils_as_is
   2.0     22/08/2011     Suman           2.0 New Sp Created for the Quote Confi. Screen SPI_QUOTE_CONF_OBJ_R9
******************************************************************************/
   TYPE t_attrmapid IS TABLE OF attribute_mapping.attribute_mapping_id%TYPE
      INDEX BY BINARY_INTEGER;

   TYPE t_configlevel IS TABLE OF attribute_mapping.config_level%TYPE
      INDEX BY BINARY_INTEGER;

   TYPE t_value IS TABLE OF line_item_detail.VALUE%TYPE
      INDEX BY BINARY_INTEGER;

   TYPE t_qty IS TABLE OF NUMBER
      INDEX BY BINARY_INTEGER;

   TYPE t_desc IS TABLE OF line_item_detail.line_item_description%TYPE
      INDEX BY BINARY_INTEGER;

   TYPE t_rowid IS TABLE OF order_line_item_detail_as_is.row_id%TYPE
      INDEX BY BINARY_INTEGER;                                ----------GHUCS

   TYPE t_scode IS TABLE OF line_item_detail.row_id%TYPE
      INDEX BY BINARY_INTEGER;
 /* Start: Added by Khader for GHUCS R15*/
   TYPE t_no_voice_channel IS TABLE OF line_item_detail.no_voice_channel %TYPE
      INDEX BY binary_integer;
    /* End: Added by Khader for GHUCS R15*/
/* Start: Added by Nagendra for GHUCS R16 Billing */
   TYPE t_max_qty IS TABLE OF line_item_detail.max_qty%TYPE
      INDEX BY binary_integer;
    /* End: Added by Nagendra for GHUCS R16 Billing*/
/*Start: Added by Amit for GHUCS MODIFY */
    TYPE t_actioncode IS TABLE OF line_item_detail.ACTION_CODE%TYPE
      index by binary_integer;

   TYPE t_invidd IS TABLE OF line_item_detail.BFG_INVENTORY_ID%TYPE
      index by binary_integer;

   TYPE t_invid IS TABLE OF quote_line_item_detail_as_is.bfg_inventory_id%TYPE
      index by binary_integer;
   /*****Classic element id for modify scenario R9 IVPN2****/
   TYPE t_classic_element_id IS TABLE OF line_item_detail.classic_element_id%TYPE
      index by binary_integer;
   TYPE t_classic_element_name IS TABLE OF line_item_detail.classic_element_name%TYPE
      index by binary_integer;

   FUNCTION site_details_tbl_to_cur(
    in_site_detials_tbl site_detials_tab)
  RETURN site_detials_tab PIPELINED;

   PROCEDURE sps_quote (
      in_customerid   IN       customer.customer_id%TYPE,
      in_searchby     IN       VARCHAR2,
      in_keyword      IN       VARCHAR2,
      out_quote       OUT      sys_refcursor,
      -- Added in_productname on 17/12/2010 as part of introducing new table QUOTE_STATUS
      in_product_name  IN       VARCHAR2 DEFAULT NULL
   );

   PROCEDURE spi_prodselection (
      in_quoteid       IN       quote.quote_id%TYPE,
      in_productid     IN       product_selection.product_id%TYPE,
      in_prodname      IN       product_selection.product_name%TYPE,
      in_propid        IN       product_selection.proposition_id%TYPE,
      in_propname      IN       product_selection.proposition_name%TYPE,
      in_subpropid     IN       product_selection.sub_proposition_id%TYPE,
      in_subpropname   IN       product_selection.sub_proposition_name%TYPE,
      in_createdby     IN       product_selection.created_by%TYPE,
      out_status       OUT      NUMBER,
      out_errmsg       OUT      VARCHAR2
   );

   PROCEDURE spi_pricelist (
      -- ##### Change for 904 - Multiple Price Book  begin
      --in_pricelistid   IN       quote_price_list.price_list_id%TYPE,
      in_pricelistname   IN       quote_price_list.price_list_name%TYPE,
      -- ##### Change for 904 - Multiple Price Book  end
      in_quotehrdid      IN       quote_price_list.quote_header_id%TYPE,
      in_createdby       IN       quote_price_list.created_by%TYPE,
      out_status         OUT      NUMBER,
      out_errmsg         OUT      VARCHAR2
   );

   PROCEDURE spi_configuration (
      in_quoteheaderid    IN       quote_header.quote_header_id%TYPE,
      in_siteid           IN       site.site_id%TYPE,
      in_attributelist    IN       CLOB,
      in_attributelevel   IN       attribute_mapping.attribute_level%TYPE,
      in_createdby        IN       line_item.created_by%TYPE,
      out_status          OUT      NUMBER,
      out_errmsg          OUT      VARCHAR2
   );

   PROCEDURE spi_quote (
      in_cid          IN       quote.customer_id%TYPE,
      in_cname        IN       quote.customer_name%TYPE,
      in_ordtype      IN       quote.order_type%TYPE,
      in_ordver       IN       quote_header.VERSION%TYPE,
      in_qref         IN       quote.reference_number%TYPE,
      in_status       IN       quote_header.status%TYPE,
      in_type         IN       quote_header.TYPE%TYPE,
      in_quotename    IN       quote_header.quote_name%TYPE,
      in_contractid   IN       quote_header.contract_id%TYPE,
      in_contterm     IN       quote_header.contract_term%TYPE,
      in_bid          IN       quote_header.bid_number%TYPE,
      in_oppid        IN       quote_header.opportunity_id%TYPE,
      in_currency     IN       quote_header.currency%TYPE,
      --in_curid           IN       quote_header.currency_id%TYPE,
      in_comments     IN       quote_header.comments%TYPE,
      in_createdby    IN       quote.created_by%TYPE,
      out_quoteid     OUT      quote.quote_id%TYPE,
      out_qthdrid     OUT      quote_header.quote_header_id%TYPE,
      out_qtname      OUT      quote_header.quote_name%TYPE,
      out_status      OUT      NUMBER,
      out_errmsg      OUT      VARCHAR2,
      -- Added in_productname on 17/12/2010 as part of introducing new table QUOTE_STATUS
      in_product_name  IN       VARCHAR2 DEFAULT NULL,
      in_csd           IN       quote_header.customer_signed_date%TYPE default null,   --Added by Khader for GHUCS R16
      in_saleschannel  IN       quote.sales_channel%TYPE default null              --Added by Khader for GHUCS R16
   );

   PROCEDURE spu_quote (
      in_quotehdrid   IN       quote_header.quote_header_id%TYPE,
      in_ordver       IN       quote_header.VERSION%TYPE,
      in_contterm     IN       quote_header.contract_term%TYPE,
      in_bid          IN       quote_header.bid_number%TYPE,
      in_oppid        IN       quote_header.opportunity_id%TYPE,
      in_currency     IN       quote_header.currency%TYPE,
      --in_curid              IN          quote_header.currency_id%TYPE,
      in_comments     IN       quote_header.comments%TYPE,
      in_modifiedby   IN       quote.modified_by%TYPE,
      out_status      OUT      NUMBER,
      out_errmsg      OUT      VARCHAR2,
      in_csd           IN      quote_header.customer_signed_date%TYPE default null    --Added by Khader for GHUCS R16
   );

   PROCEDURE spu_configure (
      in_quotehdrid   IN       quote_header.quote_header_id%TYPE,
      in_siteid       IN       site.site_id%TYPE,
      in_config       IN       VARCHAR2,
      in_pricing      IN       VARCHAR2,
      in_modifiedby   IN       site.modified_by%TYPE,
      out_status      OUT      NUMBER,
      out_errmsg      OUT      VARCHAR2
   --Status returned as 2 when there are no quote_siteid's for input
   );

   PROCEDURE spi_service_configuration (
      in_quoteheaderid    IN       quote_header.quote_header_id%TYPE,
      in_siteid           IN       site.site_id%TYPE,
      in_attributelist    IN       CLOB,
      in_attributelevel   IN       attribute_mapping.attribute_level%TYPE,
      in_createdby        IN       line_item.created_by%TYPE,
      out_status          OUT      NUMBER,
      out_errmsg          OUT      VARCHAR2

   );

   PROCEDURE spi_multisite_config (
      --added on 13/05/2010 for muliti_site uploads in R3
      in_quoteheaderid   IN       line_item.quote_header_id%TYPE,
      in_list            IN       config_tab,
      in_attrlvl         IN       attribute_mapping.attribute_level%TYPE,
      in_batchid         IN       site_log.batch_id%TYPE,
      in_createdby       IN       line_item.created_by%TYPE,
      out_nextsite       OUT      site.site_id%TYPE
   );

   PROCEDURE spu_prodselection (
      --added on 18/05/2010
      in_quoteid       IN       quote.quote_id%TYPE,
      in_productid     IN       product_selection.product_id%TYPE,
      in_prodname      IN       product_selection.product_name%TYPE,
      in_propid        IN       product_selection.proposition_id%TYPE,
      in_propname      IN       product_selection.proposition_name%TYPE,
      in_subpropid     IN       product_selection.sub_proposition_id%TYPE,
      in_subpropname   IN       product_selection.sub_proposition_name%TYPE,
      in_createdby     IN       product_selection.created_by%TYPE,
      out_status       OUT      NUMBER,
      out_errmsg       OUT      VARCHAR2
   );

   -- Added this SP to save non-std data into as_is and to_be tables - Start
   PROCEDURE spi_non_std_as_is_data (
      in_quoteheaderid    IN       quote_header.quote_header_id%TYPE,
      in_siteid           IN       site.site_id%TYPE,
      in_bid_detail       IN       bid_detail_tab,
      in_bid_req_status   IN       bid_request_status_tab,
      in_createdby        IN       bid_detail.created_by%TYPE,
      out_status          OUT      NUMBER,
      out_errmsg          OUT      VARCHAR2
    );

   /**** Changes for Modify******/
   PROCEDURE spi_save_asset_from_bfg (
      in_quoteheaderid    IN       quote_header.quote_header_id%TYPE,
      in_siteid           IN       site.site_id%TYPE,
      in_line_item_tbl    IN       line_item_tbl,
      in_attributelevel   IN       VARCHAR2,
      in_service_name     IN       VARCHAR2,
      in_createdby        IN       quote_site_service.created_by%TYPE,
      out_status          OUT      NUMBER,
      out_errmsg          OUT      VARCHAR2
   );

   PROCEDURE spi_config_order_as_is (
      in_quoteheaderid    IN       order_header.quote_header_id%TYPE,
      in_siteid           IN       site.site_id%TYPE,
      in_service_name     IN       quote_site_service.service_name%TYPE,
      in_attributelist    IN       order_line_item_tbl,
      in_attributelevel   IN       attribute_mapping.attribute_level%TYPE,
      in_createdby        IN       order_line_item_as_is.created_by%TYPE,
      out_status          OUT      NUMBER,
      out_errmsg          OUT      VARCHAR2
   );

   PROCEDURE spi_config_modify_as_is_data (
   in_quoteheaderid    IN       quote_header.quote_header_id%TYPE,
   in_siteid           IN       site.site_id%TYPE,
   in_line_item_tbl    IN       line_item_tbl,
   in_attributelevel   IN       VARCHAR2,
   in_service_name     IN       VARCHAR2,
   in_createdby        IN       quote_site_service.created_by%TYPE,
   out_status          OUT      NUMBER,
   out_errmsg          OUT      VARCHAR2
);

   PROCEDURE spi_config_modify_obj (
      in_quoteheaderid    IN       quote_header.quote_header_id%TYPE,
      in_siteid           IN       site.site_id%TYPE,
      in_line_item_tbl    IN       line_item_tbl,
      in_service_name     IN       VARCHAR2,
      in_attributelevel   IN       VARCHAR2,
      in_createdby        IN       quote_site_service.created_by%TYPE,
      out_status          OUT      NUMBER,
      out_errmsg          OUT      VARCHAR2
   );

   PROCEDURE spi_configuration_to_be (
      in_quoteheaderid    IN       quote_header.quote_header_id%TYPE,
      in_siteid           IN       site.site_id%TYPE,
      in_attributelist    IN       CLOB,
      in_attributelevel   IN       attribute_mapping.attribute_level%TYPE,
      in_service_name     IN       quote_site_service.service_name%TYPE,
      in_createdby        IN       line_item.created_by%TYPE,
      out_status          OUT      NUMBER,
      out_errmsg          OUT      VARCHAR2
   );

   PROCEDURE spu_pricelist (
      in_quotehrdid      IN       quote_header.quote_header_id%TYPE,
      in_pricelistname   IN       quote_price_list.price_list_name%TYPE,
      in_modified_by     IN       quote_price_list.modified_by%TYPE,
      out_status         OUT      NUMBER,
      out_errmsg         OUT      VARCHAR2
   );

   PROCEDURE spu_currency_management (
      in_quotehrdid        IN       quote_price_list.quote_header_id%TYPE,
      in_currency          IN       quote_header.currency%TYPE,
      in_management_type   IN       VARCHAR2,
      in_modified_by       IN       quote_price_list.modified_by%TYPE,
      out_status           OUT      NUMBER,
      out_errmsg           OUT      VARCHAR2
   );

   PROCEDURE sps_compare_cur_man_price (
      in_quotehrdid        IN       quote_price_list.quote_header_id%TYPE,
      in_siteid              IN       site.site_id%TYPE,
      in_currency          IN       quote_header.currency%TYPE,
      in_management_type   IN       VARCHAR2,
      in_pricelistname     IN       quote_price_list.price_list_name%TYPE,
      out_status           OUT      NUMBER,
      out_errmsg           OUT      VARCHAR2
   );

   PROCEDURE spu_service_instance_name (
   in_quote_headerid   IN       quote_site_service.quote_header_id%TYPE,
   in_siteid           IN       quote_site_service.site_id%TYPE,
   in_service_name     IN       quote_site_service.service_name%TYPE,
   in_primary          IN       quote_site_service.PRIMARY%TYPE,
   in_secondary        IN       quote_site_service.secondary%TYPE,
   in_floor            IN       address.FLOOR%TYPE,
   /**added room and floor for R9 IVPN2 Retrieve asset part*/
   in_room             IN       address.room%TYPE,
   /***Added bfg_address_id and sublocation id as a part of new requirement JIRA Request SQEIVPNMOD-15*****/
   in_bfgsubloc_id     IN       site.bfg_subloc_id%TYPE,
   in_modified_by      IN       quote_site_service.modified_by%TYPE,
   out_status          OUT      NUMBER,
   out_errmsg          OUT      VARCHAR2,
   in_primary_child_1     IN       VARCHAR2 DEFAULT NULL,
   in_primary_child_2     IN       VARCHAR2 DEFAULT NULL,
   in_primary_child_3     IN       VARCHAR2 DEFAULT NULL,
   in_secondary_child_1   IN       VARCHAR2 DEFAULT NULL,
   in_secondary_child_2   IN       VARCHAR2 DEFAULT NULL,
   in_secondary_child_3   IN       VARCHAR2 DEFAULT NULL
);

/**** Changes for Modify Ends******/

   -- New SP added to provide Product Configuration LOV ,GHUCS R5 on 26/08/2010 by Sandeep
   PROCEDURE sps_product_lovs (
      in_product_id         IN       line_item.product_id%TYPE,
      in_contract_id        IN       VARCHAR2,
      in_major_action       IN       VARCHAR2,
      in_conditioner        IN       VARCHAR2,
      in_friendly_name      IN       line_item.product_name%TYPE,
      in_attribute_name     IN       attribute_mapping.sqe_attribute%TYPE,
      in_cbibo              IN       VARCHAR2,
      out_data_ref_cursor   OUT      sys_refcursor,
      out_status            OUT      NUMBER,
      out_errmsg            OUT      VARCHAR2
   );

-- New Sp added to save Quote configuration using objects, MX on 10/08/2010
   PROCEDURE spi_quote_config_obj (
      in_quoteheaderid    IN       quote_header.quote_header_id%TYPE,
      in_siteid           IN       site.site_id%TYPE,
      in_line_item        IN       line_item_tbl,
      in_attributelevel   IN       VARCHAR2,
      in_createdby        IN       quote_site_service.created_by%TYPE,
      out_status          OUT      NUMBER,
      out_errmsg          OUT      VARCHAR2,
      in_attributelist       IN       CLOB DEFAULT NULL
   );

-----New Sp added to Delete Quote configuration for GHUCS on 26/08/2010
   PROCEDURE spd_quote_config (
      in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
      in_siteid          IN       VARCHAR2,
      in_modifiedby      IN       quote_site.modified_by%TYPE,
      out_status         OUT      NUMBER,
      out_errmsg         OUT      VARCHAR2
   );

   PROCEDURE spu_configure_obj (
      --added on 08/12/2010 for  MX
      in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
      in_siteid          IN       line_item.site_id%TYPE,
      in_product_id      IN       line_item.product_id%TYPE,
      in_attributelist   IN       CLOB,
      in_modifiedby      IN       NUMBER,
      out_status         OUT      NUMBER,
      out_errmsg         OUT      VARCHAR2
   );

   /***** SQE added for update bfg inventory id  at product level BT IVPN2 R9/R11 Modify ******/

PROCEDURE spi_bfg_inventory_id (
   in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
   in_siteid          IN       line_item.site_id%TYPE,
   in_servicename     IN       quote_site_service.service_name%TYPE,
   in_bfg_tbl         IN       bfg_inventory_detail_tbl,
   in_createdby       IN       price_line_item_detail.created_by%TYPE,
   out_status         OUT      NUMBER,
   out_errmsg         OUT      VARCHAR2
);

PROCEDURE spd_configuration (
   in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
   in_siteid          IN       site.site_id%TYPE,
   out_status         OUT      NUMBER,
   out_errmsg         OUT      VARCHAR2
);

--------MX Get Asset values
   PROCEDURE spi_asset_from_bfg_multisite(
    in_quoteid         IN quote_header.quote_id%TYPE,
    in_quoteheaderid   IN quote_header.quote_header_id%TYPE,
    in_siteid          IN site_detials_tab,
    in_line_item_tbl   IN line_item_tbl,
    in_service_name    IN VARCHAR2,
    in_attributelevel  IN VARCHAR2,
    in_bfg_customer_id IN customer.bfg_customer_id%TYPE,
    in_createdby       IN quote_site_service.created_by%TYPE,
    in_contact_detils  IN site_detials_tab_asis,
    out_status out NUMBER,
    out_errmsg out VARCHAR2 );


  PROCEDURE spi_order_contact_detils_as_is(
    in_quote_header_id IN NUMBER,
    in_contact_detils  IN site_detials_tab_asis,
    in_bfg_customer_id IN NUMBER,
    in_modifiedby      IN NUMBER,
    out_status out NUMBER,
    out_errmsg out VARCHAR2 );

--Scenario – C9.15
-- change resiliency from Standard to Secure/Secure+ and select “Use Existing Primary Connection as Resilient Connection” is Yes.
PROCEDURE spi_config_tobe_pri_to_sec (in_quote_header_id     IN       quote_header.quote_header_id%TYPE,
                                      in_site_id             IN       site.site_id%TYPE,
                                      out_status             OUT      NUMBER,
                                      out_errmsg             OUT      VARCHAR2,
                                      in_cpeFlag             IN       VARCHAR2 DEFAULT 'N'
                                     );


    PROCEDURE SPI_QUOTE_CONF_OBJ_R9 (
   in_quoteid           IN     quote_header.quote_id%TYPE,
   in_quoteheaderid     IN     quote_header.quote_header_id%TYPE,
   in_siteid            IN     site_detials_tab,
   in_line_item         IN     line_item_tbl,
   in_attributelevel    IN     VARCHAR2,
   in_createdby         IN     quote_site_service.created_by%TYPE,
   in_bfg_customer_id   in     customer.bfg_customer_id%type,
   in_modifyflag        in     VARCHAR2,
   OUT_STATUS           OUT    number ,
   out_errmsg           out    VARCHAR2);

END PKG_QUOTE;
/


CREATE OR REPLACE PACKAGE BODY  PKG_LINEITEM
IS
   PROCEDURE spi_caveatdetails (
      in_param       IN       CLOB,
      in_createdby   IN       NUMBER,
      out_errmsg     OUT      VARCHAR2
   )
   AS
      --TYPE mytabletype2 IS TABLE OF VARCHAR (4000);

      --TYPE mytabletypess IS TABLE OF CLOB;
      atval              mytabletypess;
      colname            mytabletypess;
      vallist            CLOB                                  := '';
      paramset           CLOB                                  := '';
      paramsubset        VARCHAR2 (20000)                      := '';
      insertstmt         CLOB                := 'INSERT INTO ACCESS_CAVEAT (';
      insertstmt1        CLOB                                  := 'VALUES (';
      v_accesscaveatid   access_caveat.access_caveat_id%TYPE;
      v_qref             VARCHAR2 (2000);
      v_quoteheaderid    quote_header.quote_header_id%TYPE;
      v_quotesiteid      quote_site.quote_site_id%TYPE;
      v_insert           VARCHAR2 (32000)                      := '';
      v_caveatcnt        NUMBER;
      insertstmt4        CLOB                                  := '';
      insertstmt5        CLOB                                  := '';
      v_siteid           NUMBER;
      v_qref_id          NUMBER;
      v_caveats          VARCHAR2 (2000)                       := NULL;
      v_caveat_id        access_caveat.caveat_id%TYPE;
      v_description      access_caveat.description%TYPE;
      v_caveatedon       access_caveat.caveated_on%TYPE;
      v_updatedon        access_caveat.updated_on%TYPE;
   BEGIN
      paramset := in_param || '~';
      v_caveatcnt := 0;

      WHILE (LENGTH (paramset) > 0)
      LOOP
         v_caveatcnt := v_caveatcnt + 1;
         paramsubset := SUBSTR (paramset, 1, INSTR (paramset, '~') - 1);
         paramset :=
               SUBSTR (paramset, INSTR (paramset, '~') + 1,
                       LENGTH (paramset));
         v_siteid :=
                   SUBSTR (paramsubset, 1, INSTR (paramsubset, '#', 1, 1) - 1);
         v_qref :=
            SUBSTR (paramsubset,
                    INSTR (paramsubset, '#', 1, 1) + 1,
                      INSTR (paramsubset, '#', 1, 2)
                    - INSTR (paramsubset, '#', 1, 1)
                    - 1
                   );
         v_quoteheaderid :=
            SUBSTR (paramsubset,
                    INSTR (paramsubset, '#', 1, 2) + 1,
                      INSTR (paramsubset, '//')
                    - INSTR (paramsubset, '#', 1, 2)
                    - 1
                   );

         SELECT access_qref_id
           INTO v_qref_id
           FROM access_qref
          WHERE quote_site_id =
                   (SELECT quote_site_id
                      FROM quote_site
                     WHERE site_id = v_siteid
                       AND quote_header_id = v_quoteheaderid
                       AND active = 'Y')
            AND UPPER (access_qref) = UPPER (v_qref)
            AND active = 'Y';

         paramsubset :=
            SUBSTR (paramsubset,
                    INSTR (paramsubset, '//') + 2,
                    LENGTH (paramsubset)
                   );

         SELECT columnname, VALUE
         BULK COLLECT INTO colname, atval
           FROM (SELECT SUBSTR (columnnames,
                                1,
                                INSTR (columnnames, '::') - 1
                               ) columnname,
                        SUBSTR (columnnames,
                                INSTR (columnnames, '::') + 2
                               ) VALUE
                   FROM (SELECT SUBSTR (COLUMN_VALUE,
                                        INSTR (COLUMN_VALUE, '//') + 1
                                       ) columnnames
                           FROM TABLE
                                   (CAST
                                       (pkg_common.fn_splitdata (paramsubset,
                                                                 '|'
                                                                ) AS varchar2_ntt
                                       )
                                   )) x) z;

         v_caveats := '';
         v_caveat_id := '';
         v_description := '';
         v_caveatedon := NULL;
         v_updatedon := NULL;

         FOR i IN atval.FIRST .. atval.LAST
         LOOP
            BEGIN
--               insertstmt := insertstmt || colname (i) || ',';
--               vallist := '''' || atval (i) || '''';                --|| ',';
--               insertstmt1 := insertstmt1 || vallist || ',';
               IF UPPER (colname (i)) = 'ACCESS_CAVEAT'
               THEN
                  v_caveats := atval (i);
               END IF;

               IF UPPER (colname (i)) = 'CAVEAT_ID'
               THEN
                  v_caveat_id := CASE atval (i)
                                   WHEN ''
                                      THEN NULL
                                   ELSE atval (i)
                                END;
               END IF;

               IF UPPER (colname (i)) = 'DESCRIPTION'
               THEN
                  v_description := CASE atval (i)
                                     WHEN ''
                                        THEN NULL
                                     ELSE atval (i)
                                  END;
               END IF;

               IF UPPER (colname (i)) = 'CAVEATED_ON'
               THEN
                  v_caveatedon := CASE atval (i)
                                    WHEN ''
                                       THEN NULL
                                    ELSE atval (i)
                                 END;
               END IF;

               IF UPPER (colname (i)) = 'UPDATED_ON'
               THEN
                  v_updatedon := CASE atval (i)
                                   WHEN ''
                                      THEN NULL
                                   ELSE atval (i)
                                END;
               END IF;
            --vallist := '';
            END;
         END LOOP;

         SELECT access_caveat_id.NEXTVAL
           INTO v_accesscaveatid
           FROM DUAL;

         IF (v_caveatcnt = 1)
         THEN
            BEGIN
               DELETE FROM access_caveat
                     WHERE access_qref_id = v_qref_id;
            END;
         END IF;

         --EXECUTE IMMEDIATE (v_insert);
         INSERT INTO access_caveat
                     (caveat_id, description, caveated_on, updated_on,
                      access_caveat_id, access_qref_id, created_by,
                      created_date, active
                     )
              VALUES (v_caveat_id, v_description, v_caveatedon, v_updatedon,
                      v_accesscaveatid, v_qref_id, in_createdby,
                      SYSDATE, 'Y'
                     );

         --COMMIT;
         atval.DELETE;                                 --Clear the collections
         colname.DELETE;                               --Clear the collections
         vallist := '';
         v_insert := '';
      END LOOP;
   EXCEPTION
      WHEN OTHERS
      THEN
         out_errmsg := SQLERRM;
   END;

   PROCEDURE sps_getcaveatdetails (
      in_qrefid     IN       VARCHAR2,
      out_details   OUT      sys_refcursor
   )
   AS
   BEGIN
      -- modified for adding the column access_caveats
      OPEN out_details FOR
         SELECT caveat_id AS "Caveat ID", description, caveated_on,
                ac.updated_on, aq.access_qref AS "Qref",
                ac.access_caveat "Access Caveat"
           FROM access_caveat ac, access_qref aq
          WHERE ac.access_qref_id = aq.access_qref_id
            AND ac.active = 'Y'
            AND aq.active = 'Y'
            AND aq.access_qref_id IN (
                   SELECT *
                     FROM TABLE
                             (CAST
                                 (pkg_common.fn_splitdata (in_qrefid, '~') AS varchar2_ntt
                                 )
                             ) nt);
   END sps_getcaveatdetails;

   PROCEDURE spi_accessqref (
      in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
      in_siteid          IN       site.site_id%TYPE,
      in_param           IN       CLOB,
      in_createdby       IN       access_qref.created_by%TYPE,
      out_status         OUT      NUMBER,
      out_errmsg         OUT      VARCHAR2
   )
   AS
      atval           mytabletypess;
      colname         mytabletypess;
      vallist         VARCHAR2 (4000)                 := '';
      paramset        VARCHAR2 (20000)                := '';
      paramsubset     VARCHAR2 (20000)                := '';
      insertstmt      VARCHAR2 (1000)          := 'INSERT INTO ACCESS_QREF (';
      insertstmt1     VARCHAR2 (4000)                 := 'VALUES (';
      v_quotesiteid   quote_site.quote_site_id%TYPE;
      v_accessqref    VARCHAR2 (10000)                := '';
      v_insert        VARCHAR2 (32000)                := '';
      v_qref_cnt      NUMBER;
      insertstmt4     VARCHAR2 (4000)                 := '';
      insertstmt5     VARCHAR2 (4000)                 := '';
      cntr            NUMBER                          := 0;
      v_aqrefid       VARCHAR2 (2000);
   BEGIN
      -- :: separator between column name and column value
      -- ## separator between 2 column name - value pair
      -- ~  row delimiter
      paramset := in_param || '~';

      SELECT quote_site_id
        INTO v_quotesiteid
        FROM quote_site
       WHERE site_id = in_siteid
         AND quote_header_id = in_quoteheaderid
         AND active = 'Y';

      WHILE (LENGTH (paramset) > 0)
      LOOP
         cntr := cntr + 1;
         --dbms_output.PUT_LINE('cntr = ' || cntr);
         paramsubset := SUBSTR (paramset, 1, INSTR (paramset, '~') - 1);
         paramset :=
               SUBSTR (paramset, INSTR (paramset, '~') + 1,
                       LENGTH (paramset));

         SELECT columnname, VALUE
         BULK COLLECT INTO colname, atval
           FROM (SELECT SUBSTR (columnnames,
                                1,
                                INSTR (columnnames, '::') - 1
                               ) columnname,
                        SUBSTR (columnnames,
                                INSTR (columnnames, '::') + 2
                               ) VALUE
                   FROM (SELECT SUBSTR (COLUMN_VALUE, 1
                                                       --INSTR (COLUMN_VALUE, '~') + 1
                                ) columnnames
                           FROM TABLE
                                   (CAST
                                       (pkg_common.fn_splitdata (paramsubset,
                                                                 '##'
                                                                ) AS varchar2_ntt
                                       )
                                   )) x) z;

         FOR i IN atval.FIRST .. atval.LAST
         LOOP
            BEGIN
               insertstmt := insertstmt || colname (i) || ',';
               vallist := '''' || atval (i) || '''';

               IF (UPPER (colname (i)) = 'ACCESS_QREF')
               THEN
                  v_accessqref := atval (i);
               END IF;

               insertstmt1 := insertstmt1 || vallist || ',';
            END;
         END LOOP;

         SELECT access_qref_id.NEXTVAL
           INTO v_aqrefid
           FROM DUAL;

         insertstmt4 :=
               SUBSTR (insertstmt, 1, LENGTH (insertstmt))
            || 'access_qref_id,quote_site_id,created_by,created_date,Active'
            || ')';
         insertstmt5 :=
               SUBSTR (insertstmt1, 1, LENGTH (insertstmt1))
            || v_aqrefid
            || ','
            || v_quotesiteid
            || ','
            || in_createdby
            || ','''
            || SYSDATE
            || ''','
            || '''Y'''
            || ')';
         -- DBMS_OUTPUT.put_line ('insertstmt4 ' || insertstmt4);
         --  DBMS_OUTPUT.put_line ('insertstmt5 ' || insertstmt5);
         v_insert := insertstmt4 || insertstmt5;

         --DBMS_OUTPUT.put_line ('final insert ' || v_insert);
         EXECUTE IMMEDIATE (v_insert);

         atval.DELETE;                                 --Clear the collections
         colname.DELETE;                               --Clear the collections
         --collist := '';
         vallist := '';
         -- vallist1 := '';
         v_insert := '';
         insertstmt := 'INSERT INTO ACCESS_QREF (';
         insertstmt1 := 'VALUES (';
      END LOOP;

      out_status := pkg_constants.con_status_success;
   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         out_errmsg := SQLERRM;
         /*ROLLBACK; commented by Jay*/
   END spi_accessqref;

   PROCEDURE sps_accessqref (
      in_quoteheaderid       IN       quote_header.quote_header_id%TYPE,
      in_siteid              IN       site.site_id%TYPE,
      in_non_std_qref_flag   IN       access_qref.non_std_qref_flag%TYPE,
      out_accessqref         OUT      sys_refcursor
   )
   AS
   BEGIN
      OPEN out_accessqref FOR
         SELECT access_qref_id, access_qref, pricing_status, supplier,
                lead_time, port_speed, port_status, port_speed_value,
                port_uom, one_time_charge, recurring_charge, access_speed,
                access_speed_value, access_uom, access_product_type,
                access_technology, supplier_product_name, gpop_node,
                distance_gpop, apop_node, distance_apop, term, leg_id,
                pair_id, expiry_date_time_zone, tariff_zone_name,
                no_of_copper_pairs, circuit_interface, auto_priced_flag,
                budgetary_priced_flag, interface_type, framing_details,
                connector, install_cost, supplier_cost, backhaul_cost,
                local_tail_cost, cost_access_currency, resiliency_flag,
                comments, nni_flag, support_24x7, sent_to_ape, monthly_cost,
                access_type, expiry_date, apop_flag,
                                                    /**** added the below items for HVPN  ****/
                                                    hvpn_access_technology,
                pricing_id, service_id, copper_details, copper_service_id,
                rfa_notes, mrc, nrc, other_service_notes, time_to_deliver,
                rfo_notes, method, aggregator_quote_line_id, encapsulation,
                guaranteed_speed, isp_addressing, access_availability,
                service_catagory, gpop_id, apop_id,
                                                   --Added for defect 70831 sprint23
                                                   copper_pair,
                ethernet_phase_attribute,                     ---Added for R1
                                         network_type, partner_name,

                --Added for R5

                -- For R5 ivpn2 - Single Site Price - BK start
                workflow_status, ape_comments, staff_member_name,
                staff_member_email, qref_type, cease_charges,rbpUrl,GPOP_CODE,APOP_CODE, -- added by arpitha for R9
        service_variant
         FROM   access_qref
          WHERE quote_site_id =
                   (SELECT quote_site_id
                      FROM quote_site
                     WHERE site_id = in_siteid
                       AND quote_header_id = in_quoteheaderid
                       AND active = pkg_constants.con_activeflag_yes)
            AND non_std_qref_flag = in_non_std_qref_flag;
   END;

   PROCEDURE spi_pricing (
      in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
      in_siteid          IN       line_item.site_id%TYPE,
      in_prodname        IN       line_item.product_name%TYPE,
      in_pricelinitm     IN       VARCHAR2,
      in_createdby       IN       price_line_item_detail.created_by%TYPE,
      out_status         OUT      NUMBER,
      out_errmsg         OUT      VARCHAR2
   )
   AS
      CURSOR c_pricedet
      IS
         SELECT *
           FROM TABLE
                   (CAST
                       (pkg_common.fn_splitdata (in_pricelinitm, '~') AS varchar2_ntt
                       )
                   );

      v_priclinitmid   price_line_item_detail.price_line_item_id%TYPE;
      v_priclinitm     price_line_item.price_line_description%TYPE;
      v_price          price_line_item_detail.price%TYPE;
      v_currency       price_line_item_detail.currency%TYPE;
      v_chargetype     price_line_item_detail.charge_type%TYPE;
      v_discount       price_line_item_detail.discount%TYPE;
      v_discounttype   price_line_item_detail.discount_type%TYPE;
      v_fallback       line_item.fallback_type%TYPE;
      v_cost           cost_detail.COST%TYPE;
      v_costcur        cost_detail.currency%TYPE;
      v_costtype       cost_detail.cost_type%TYPE;
      v_extqref        price_line_item_detail.external_qref%TYPE;
      v_count          NUMBER;
      v_lineitemid     line_item.line_item_id%TYPE;
      v_prlindetid     price_line_item_detail.price_line_item_detail_id%TYPE;
      --   v number;
      v_rowid          price_line_item_detail.row_id%TYPE;
      v_str_chk        VARCHAR2 (10);
      v_netprice       price_line_item_detail.net_price%TYPE;
      v_ptp_eup        price_line_item_detail.ptp_eup%TYPE;
      -- added by bijeta for PTP Price addition-
      v_ptp_eup_id     price_line_item_detail.ptp_eup_id%TYPE;
    v_action_code    price_line_item_detail.ACTION_CODE%TYPE;
   -- added by bijeta for PTP Price addition-
   BEGIN
      -- v:=10;
      FOR v_rowcnt IN c_pricedet
      LOOP
     v_rowid := NULL;
         -- DBMS_OUTPUT.put_line (v_rowcnt.COLUMN_VALUE);
         SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                        1,
                        INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 1) - 1
                       )
           INTO v_priclinitm
           FROM DUAL;

         SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                        INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 1) + 1,
                        (  INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 2)
                         - INSTR (v_rowcnt.COLUMN_VALUE, '#', 1)
                         - 1
                        )
                       )
           INTO v_price
           FROM DUAL;

         SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                        INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 2) + 1,
                        (  INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 3)
                         - INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 2)
                         - 1
                        )
                       )
           INTO v_currency
           FROM DUAL;

         SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                        INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 3) + 1,
                        (  INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 4)
                         - INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 3)
                         - 1
                        )
                       )
           INTO v_chargetype
           FROM DUAL;

         SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                        INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 4) + 1,
                        (  INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 5)
                         - INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 4)
                         - 1
                        )
                       )
           INTO v_discount
           FROM DUAL;

         SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                        INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 5) + 1,
                        (  INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 6)
                         - INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 5)
                         - 1
                        )
                       )
           INTO v_discounttype
           FROM DUAL;

         SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                        INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 6) + 1,
                        (  INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 7)
                         - INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 6)
                         - 1
                        )
                       )
           INTO v_fallback
           FROM DUAL;

         SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                        INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 7) + 1,
                        (  INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 8)
                         - INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 7)
                         - 1
                        )
                       )
           INTO v_cost
           FROM DUAL;

         SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                        INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 8) + 1,
                        (  INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 9)
                         - INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 8)
                         - 1
                        )
                       )
           INTO v_costtype
           FROM DUAL;

         SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                        INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 9) + 1,
                        (  INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 10)
                         - INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 9)
                         - 1
                        )
                       )
           INTO v_costcur
           FROM DUAL;

         ---- added by bijeta for PTP Price addition-start  : the below script is moved from bottom
         ---Case condition to upward..
         SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                        INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 10) + 1,
                        (  INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 11)
                         - INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 10)
                         - 1
                        )
                       )
           INTO v_extqref
           FROM DUAL;

         SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                        INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 11) + 1,
                        (  INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 12)
                         - INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 11)
                         - 1
                        )
                       )
           INTO v_ptp_eup
           FROM DUAL;

         -- added by bijeta for PTP Price addition-end
         v_str_chk := NULL;

         SELECT CASE
                   WHEN   LENGTH (v_rowcnt.COLUMN_VALUE)
                        - LENGTH (REPLACE (v_rowcnt.COLUMN_VALUE, '#')) = 12
                      --11
                THEN 1
                   ELSE 0
                END
           INTO v_str_chk
           FROM DUAL;

         -- added by bijeta for PTP Price addition-start
         IF v_str_chk = 0
         THEN
            DBMS_OUTPUT.put_line ('test');

              SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                           INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 12) + 1,
                           (  INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 13)
                            - INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 12)
                            - 1
                           )
                          )
              INTO v_ptp_eup_id
              FROM DUAL;

       -- added by bijeta for PTP Price addition-end-
                    SELECT (SUBSTR (v_rowcnt.COLUMN_VALUE,
                                  INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 13) + 1,
                                  LENGTH (v_rowcnt.COLUMN_VALUE) - 1
                                 )
                         )
                    INTO v_rowid
                    FROM DUAL;

         ELSE
            DBMS_OUTPUT.put_line ('test11');

                -- added by bijeta for PTP Price addition-start
            /*SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                  INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 13) + 1,
                                  (  INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 14)
                                   - INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 13)
                                   - 1
                                  )
                                 )
                     INTO v_PTP_EUP_id
                     FROM DUAL;*/
            SELECT (SUBSTR (v_rowcnt.COLUMN_VALUE,
                            INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 12) + 1,
                            LENGTH (v_rowcnt.COLUMN_VALUE) - 1
                           )
                   )
              INTO v_ptp_eup_id
              FROM DUAL;
         -- added by bijeta for PTP Price addition-end-
         END IF;

         DBMS_OUTPUT.put_line ('test21');

         SELECT price_line_item_id
           INTO v_priclinitmid
           FROM price_line_item
          WHERE UPPER (price_line_description) = UPPER (v_priclinitm);

         --modified on 7/1/2010 to check for line_item_id
         SELECT COUNT (*)
           INTO v_count
           FROM price_line_item_detail
          WHERE price_line_item_id = v_priclinitmid
            AND line_item_id IN (
                   SELECT DISTINCT line_item_id
                              FROM line_item
                             WHERE quote_header_id = in_quoteheaderid
                               AND (   site_id = in_siteid
                                    OR (    site_id IS NULL
                                        AND NVL (in_siteid, 0) = 0
                                       )
                                   )           /*904 Order Site to Site SLA */
                               AND NVL (part_type, '-1') =
                                      DECODE (UPPER (product_name),
                                              'BT CPE', 'Bundle',
                                              NVL (part_type, '-1')
                                             )
                               --for BT Cpe only part type called Bundle has to be picked up
                               AND UPPER (product_name) = UPPER (in_prodname)
                               AND active = pkg_constants.con_activeflag_yes
                               AND UPPER (fallback_type) = UPPER (v_fallback))
            AND NVL (row_id, 1) = NVL (v_rowid, 1)
            AND NVL (ptp_eup, 'x') = NVL (v_ptp_eup, 'x');

         IF (v_count = 0)
         THEN
            DBMS_OUTPUT.put_line (   'test12        '
                                  || v_ptp_eup_id
                                  || v_priclinitmid
                                 );

            IF (v_priclinitmid IS NOT NULL)
            THEN
               INSERT INTO price_line_item_detail
                           (price_line_item_detail_id, price_line_item_id,
                            price, currency, charge_type, external_qref,
                            discount, discount_type, active, created_by,
                            created_date, line_item_id, row_id, net_price,
                            ptp_eup, ptp_eup_id,action_code)
                  (SELECT price_line_item_detail_id.NEXTVAL, v_priclinitmid,
                          v_price, v_currency, v_chargetype, v_extqref,
                          v_discount, v_discounttype,
                          pkg_constants.con_activeflag_yes, in_createdby,
                          SYSDATE (), line_item_id, v_rowid, v_price,
                          v_ptp_eup, v_ptp_eup_id,v_action_code
                     FROM line_item
                    WHERE quote_header_id = in_quoteheaderid
                      AND (   site_id = in_siteid
                           OR (site_id IS NULL AND NVL (in_siteid, 0) = 0)
                          )                    /*904 Order Site to Site SLA */
                      AND UPPER (product_name) = UPPER (in_prodname)
                      AND active = pkg_constants.con_activeflag_yes
                      AND NVL (part_type, '-1') =
                             DECODE (UPPER (product_name),
                                     'BT CPE', 'Bundle',
                                     NVL (part_type, '-1')
                                    )
                      --for BT Cpe only part type called Bundle has to be picked up
                      AND UPPER (fallback_type) = UPPER (v_fallback));

               UPDATE line_item
                  SET priced = pkg_constants.con_activeflag_yes
                WHERE quote_header_id = in_quoteheaderid
                  AND (   site_id = in_siteid
                       OR (site_id IS NULL AND NVL (in_siteid, 0) = 0)
                      )                        /*904 Order Site to Site SLA */
                  AND UPPER (product_name) = UPPER (in_prodname)
                  AND NVL (part_type, '-1') =
                         DECODE (UPPER (product_name),
                                 'BT CPE', 'Bundle',
                                 NVL (part_type, '-1')
                                )
                  --for BT Cpe only part type called Bundle has to be picked up
                  AND active = pkg_constants.con_activeflag_yes
                  AND UPPER (fallback_type) = UPPER (v_fallback);

               IF (v_costtype IS NOT NULL)
               THEN
                  INSERT INTO cost_detail
                              (cost_detail_id, price_line_item_detail_id,
                               cost_type, COST, currency, created_by,
                               created_date)
                     (SELECT cost_detail_id.NEXTVAL,
                             price_line_item_detail_id, v_costtype, v_cost,
                             v_costcur, in_createdby, SYSDATE ()
                        FROM price_line_item_detail
                       WHERE NVL (row_id, 1) = NVL (v_rowid, 1)
                         AND price_line_item_id = v_priclinitmid
                         AND active = pkg_constants.con_activeflag_yes
                         AND NVL (ptp_eup, 'x') = NVL (v_ptp_eup, 'x') /* fixed duplicate cost row getting saved.*/
                         AND line_item_id IN (
                                SELECT DISTINCT line_item_id
                                           FROM line_item
                                          WHERE quote_header_id =
                                                              in_quoteheaderid
                                            AND (   site_id = in_siteid
                                                 OR (    site_id IS NULL
                                                     AND NVL (in_siteid, 0) =
                                                                             0
                                                    )
                                                )
                                            /*904 Order Site to Site SLA */
                                            AND NVL (part_type, '-1') =
                                                   DECODE
                                                         (UPPER (product_name),
                                                          'BT CPE', 'Bundle',
                                                          NVL (part_type,
                                                               '-1')
                                                         )
                                            --for BT Cpe only part type called Bundle has to be picked up
                                            AND UPPER (product_name) =
                                                           UPPER (in_prodname)
                                            AND active =
                                                   pkg_constants.con_activeflag_yes
                                            AND UPPER (fallback_type) =
                                                            UPPER (v_fallback)));
               END IF;
            END IF;
         ELSE
            DBMS_OUTPUT.put_line ('test13');

            --modified on 7/1/2010 to check for line_item_id
            UPDATE price_line_item_detail
               SET active = pkg_constants.con_activeflag_no,
                   modified_by = in_createdby,
                   modified_date = SYSDATE ()
             WHERE price_line_item_id = v_priclinitmid
               AND NVL (row_id, 1) = NVL (v_rowid, 1)
               AND NVL (ptp_eup, 'x') = NVL (v_ptp_eup, 'x')
               AND line_item_id IN (
                      SELECT DISTINCT line_item_id
                                 FROM line_item
                                WHERE quote_header_id = in_quoteheaderid
                                  AND (   site_id = in_siteid
                                       OR (    site_id IS NULL
                                           AND NVL (in_siteid, 0) = 0
                                          )
                                      )        /*904 Order Site to Site SLA */
                                  AND NVL (part_type, '-1') =
                                         DECODE (UPPER (product_name),
                                                 'BT CPE', 'Bundle',
                                                 NVL (part_type, '-1')
                                                )
                                  --for BT Cpe only part type called Bundle has to be picked up
                                  AND UPPER (product_name) =
                                                           UPPER (in_prodname)
                                  AND active =
                                              pkg_constants.con_activeflag_yes
                                  AND UPPER (fallback_type) =
                                                            UPPER (v_fallback));

            IF (v_priclinitmid IS NOT NULL)
            THEN
               DBMS_OUTPUT.put_line ('test14');

               INSERT INTO price_line_item_detail
                           (price_line_item_detail_id, price_line_item_id,
                            price, currency, charge_type, external_qref,
                            discount, discount_type, active, created_by,net_price,--This is added for defect id 88461  fix on --29 Nov 2010 By Nagendra
                            created_date, line_item_id, row_id, ptp_eup,
                            ptp_eup_id,action_code)
                  (SELECT price_line_item_detail_id.NEXTVAL, v_priclinitmid,
                          v_price, v_currency, v_chargetype, v_extqref,
                          v_discount, v_discounttype,
                          pkg_constants.con_activeflag_yes, in_createdby,v_price,--This is added for defect id 88461  fix on --29 Nov 2010 By Nagendra
                          SYSDATE (), line_item_id, v_rowid, v_ptp_eup,
                          v_ptp_eup_id,v_action_code
                     FROM line_item
                    WHERE quote_header_id = in_quoteheaderid
                      AND (   site_id = in_siteid
                           OR (site_id IS NULL AND NVL (in_siteid, 0) = 0)
                          )                    /*904 Order Site to Site SLA */
                      AND UPPER (product_name) = UPPER (in_prodname)
                      AND active = pkg_constants.con_activeflag_yes
                      AND NVL (part_type, '-1') =
                             DECODE (UPPER (product_name),
                                     'BT CPE', 'Bundle',
                                     NVL (part_type, '-1')
                                    )
                      --for BT Cpe only part type called Bundle has to be picked up
                      AND UPPER (fallback_type) = UPPER (v_fallback));

               UPDATE line_item
                  SET priced = pkg_constants.con_activeflag_yes
                WHERE quote_header_id = in_quoteheaderid
                  AND (   site_id = in_siteid
                       OR (site_id IS NULL AND NVL (in_siteid, 0) = 0)
                      )                        /*904 Order Site to Site SLA */
                  AND UPPER (product_name) = UPPER (in_prodname)
                  AND NVL (part_type, '-1') =
                         DECODE (UPPER (product_name),
                                 'BT CPE', 'Bundle',
                                 NVL (part_type, '-1')
                                )
                  --for BT Cpe only part type called Bundle has to be picked up
                  AND active = pkg_constants.con_activeflag_yes
                  AND UPPER (fallback_type) = UPPER (v_fallback);

               IF (v_costtype IS NOT NULL)
               THEN
                  INSERT INTO cost_detail
                              (cost_detail_id, price_line_item_detail_id,
                               cost_type, COST, currency, created_by,
                               created_date)
                     (SELECT cost_detail_id.NEXTVAL,
                             price_line_item_detail_id, v_costtype, v_cost,
                             v_costcur, in_createdby, SYSDATE ()
                        FROM price_line_item_detail
                       WHERE NVL (row_id, 1) = NVL (v_rowid, 1)
                         AND price_line_item_id = v_priclinitmid
                         AND active = pkg_constants.con_activeflag_yes
                         AND NVL (ptp_eup, 'x') = NVL (v_ptp_eup, 'x') /* fixed duplicate cost row getting saved.*/
                         AND line_item_id IN (
                                SELECT DISTINCT line_item_id
                                           FROM line_item
                                          WHERE quote_header_id =
                                                              in_quoteheaderid
                                            AND (   site_id = in_siteid
                                                 OR (    site_id IS NULL
                                                     AND NVL (in_siteid, 0) =
                                                                             0
                                                    )
                                                )
                                            /*904 Order Site to Site SLA */
                                            AND UPPER (product_name) =
                                                           UPPER (in_prodname)
                                            AND active =
                                                   pkg_constants.con_activeflag_yes
                                            AND NVL (part_type, '-1') =
                                                   DECODE
                                                         (UPPER (product_name),
                                                          'BT CPE', 'Bundle',
                                                          NVL (part_type,
                                                               '-1')
                                                         )
                                            --for BT Cpe only part type called Bundle has to be picked up
                                            AND UPPER (fallback_type) =
                                                            UPPER (v_fallback)));
               END IF;
            END IF;
         END IF;
      END LOOP;

      out_status := pkg_constants.con_status_success;
   --  COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         DBMS_OUTPUT.put_line ('error:' || SUBSTR (SQLERRM, 1, 50));
         out_status := pkg_constants.con_status_failure;
         out_errmsg := SQLERRM;
         pkg_common.spi_error_log(null,in_quoteheaderid,in_siteid,in_pricelinitm,
                   'PKG_LINEITEM','SPI_PRICING',out_status,out_errmsg);

         /*ROLLBACK; Commented by Jay */
   END;

----------GHUCS NEW sp
   PROCEDURE spi_service_pricing (
      in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
      in_siteid          IN       line_item.site_id%TYPE,
      in_prodname        IN       line_item.product_name%TYPE,
      in_pricelinitm     IN       VARCHAR2,
      in_createdby       IN       price_line_item_detail.created_by%TYPE,
      out_status         OUT      NUMBER,
      out_errmsg         OUT      VARCHAR2
   )
   AS
      CURSOR c_pricedet
      IS
         SELECT *
           FROM TABLE
                   (CAST
                       (pkg_common.fn_splitdata (in_pricelinitm, '~') AS varchar2_ntt
                       )
                   );

      v_priclinitmid   price_line_item_detail.price_line_item_id%TYPE;
      v_priclinitm     price_line_item.price_line_description%TYPE;
      v_price          price_line_item_detail.price%TYPE;
      v_currency       price_line_item_detail.currency%TYPE;
      v_chargetype     price_line_item_detail.charge_type%TYPE;
      v_discount       price_line_item_detail.discount%TYPE;
      v_discounttype   price_line_item_detail.discount_type%TYPE;
      v_fallback       line_item.fallback_type%TYPE;
      v_cost           cost_detail.COST%TYPE;
      v_costcur        cost_detail.currency%TYPE;
      v_costtype       cost_detail.cost_type%TYPE;
      v_extqref        price_line_item_detail.external_qref%TYPE;
      v_count          NUMBER;
      v_lineitemid     line_item.line_item_id%TYPE;
      v_prlindetid     price_line_item_detail.price_line_item_detail_id%TYPE;
      v                NUMBER;
      v_rentprice      price_line_item_detail.rent_price%TYPE;
   BEGIN
      v := 10;

      FOR v_rowcnt IN c_pricedet
      LOOP
         DBMS_OUTPUT.put_line (v_rowcnt.COLUMN_VALUE);

         SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                        1,
                        INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 1) - 1
                       )
           INTO v_priclinitm
           FROM DUAL;

         SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                        INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 1) + 1,
                        (  INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 2)
                         - INSTR (v_rowcnt.COLUMN_VALUE, '#', 1)
                         - 1
                        )
                       )
           INTO v_price
           FROM DUAL;

         SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                        INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 2) + 1,
                        (  INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 3)
                         - INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 2)
                         - 1
                        )
                       )
           INTO v_currency
           FROM DUAL;

         SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                        INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 3) + 1,
                        (  INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 4)
                         - INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 3)
                         - 1
                        )
                       )
           INTO v_chargetype
           FROM DUAL;

         SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                        INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 4) + 1,
                        (  INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 5)
                         - INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 4)
                         - 1
                        )
                       )
           INTO v_discount
           FROM DUAL;

         SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                        INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 5) + 1,
                        (  INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 6)
                         - INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 5)
                         - 1
                        )
                       )
           INTO v_discounttype
           FROM DUAL;

         SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                        INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 6) + 1,
                        (  INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 7)
                         - INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 6)
                         - 1
                        )
                       )
           INTO v_fallback
           FROM DUAL;

         SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                        INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 7) + 1,
                        (  INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 8)
                         - INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 7)
                         - 1
                        )
                       )
           INTO v_cost
           FROM DUAL;

         SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                        INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 8) + 1,
                        (  INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 9)
                         - INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 8)
                         - 1
                        )
                       )
           INTO v_costtype
           FROM DUAL;

         SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                        INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 9) + 1,
                        (  INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 10)
                         - INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 9)
                         - 1
                        )
                       )
           INTO v_costcur
           FROM DUAL;

         SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                        INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 10) + 1,
                        (  INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 11)
                         - INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 10)
                         - 1
                        )
                       )
           INTO v_extqref
           FROM DUAL;

         -- Ghucs Begins ,Added new variable v_rentprice to insert in price_line_item_detail table
         SELECT (SUBSTR (v_rowcnt.COLUMN_VALUE,
                         INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 11) + 1,
                         LENGTH (v_rowcnt.COLUMN_VALUE) - 1
                        )
                )
           INTO v_rentprice
           FROM DUAL;

         -- Ghucs Ends ,Added new variable v_rentprice to insert in price_line_item_detail table
         SELECT price_line_item_id
           INTO v_priclinitmid
           FROM price_line_item
          WHERE UPPER (price_line_description) = UPPER (v_priclinitm);

         --modified on 7/1/2010 to check for line_item_id
         SELECT COUNT (*)
           INTO v_count
           FROM price_line_item_detail
          WHERE price_line_item_id = v_priclinitmid
            AND line_item_id IN (
                   SELECT DISTINCT line_item_id
                              FROM line_item
                             WHERE quote_header_id = in_quoteheaderid
                               AND (   site_id = in_siteid
                                    OR (    site_id IS NULL
                                        AND NVL (in_siteid, 0) = 0
                                       )
                                   )           /*904 Order Site to Site SLA */
                               AND NVL (part_type, '-1') =
                                      DECODE (UPPER (product_name),
                                              'BT CPE', 'Bundle',
                                              NVL (part_type, '-1')
                                             )
                               --for BT Cpe only part type called Bundle has to be picked up
                               AND UPPER (product_name) = UPPER (v_priclinitm)
                               -----in_prodname) GHUC6
                               AND active = pkg_constants.con_activeflag_yes
                               AND UPPER (fallback_type) = UPPER (v_fallback));

         IF (v_count = 0)
         THEN
            IF (v_priclinitmid IS NOT NULL)
            THEN
               INSERT INTO price_line_item_detail
                           (price_line_item_detail_id, price_line_item_id,
                            price, currency, charge_type, external_qref,
                            discount, discount_type, active, created_by,
                            created_date, line_item_id, rent_price)

                  --Ghucs added rent_price
                  (SELECT price_line_item_detail_id.NEXTVAL, v_priclinitmid,
                          v_price, v_currency, v_chargetype, v_extqref,
                          v_discount, v_discounttype,
                          pkg_constants.con_activeflag_yes, in_createdby,
                          SYSDATE (), line_item_id,
                          v_rentprice               --Ghucs added v_rentprice
                     FROM line_item
                    WHERE quote_header_id = in_quoteheaderid
                      AND (   site_id = in_siteid
                           OR (site_id IS NULL AND NVL (in_siteid, 0) = 0)
                          )                    /*904 Order Site to Site SLA */
                      AND UPPER (product_name) = UPPER (v_priclinitm)
                      ---in_prodname)   ---Ghusc 1added v_priclinitm
                      AND active = pkg_constants.con_activeflag_yes
                      AND NVL (part_type, '-1') =
                             DECODE (UPPER (product_name),
                                     'BT CPE', 'Bundle',
                                     NVL (part_type, '-1')
                                    )
                      --AND product_id <>978108
                      --for BT Cpe only part type called Bundle has to be picked up
                      AND UPPER (fallback_type) = UPPER (v_fallback));

               UPDATE line_item
                  SET priced = pkg_constants.con_activeflag_yes
                WHERE quote_header_id = in_quoteheaderid
                  AND (   site_id = in_siteid
                       OR (site_id IS NULL AND NVL (in_siteid, 0) = 0)
                      )                        /*904 Order Site to Site SLA */
                  AND UPPER (product_name) = UPPER (v_priclinitm)
                  ---in_prodname)  --GHUCS 2
                  AND NVL (part_type, '-1') =
                         DECODE (UPPER (product_name),
                                 'BT CPE', 'Bundle',
                                 NVL (part_type, '-1')
                                )
                  --for BT Cpe only part type called Bundle has to be picked up
                  AND active = pkg_constants.con_activeflag_yes
                  AND UPPER (fallback_type) = UPPER (v_fallback);

               IF (v_costtype IS NOT NULL)
               THEN
                  INSERT INTO cost_detail
                              (cost_detail_id, price_line_item_detail_id,
                               cost_type, COST, currency, created_by,
                               created_date)
                     (SELECT cost_detail_id.NEXTVAL,
                             price_line_item_detail_id, v_costtype, v_cost,
                             v_costcur, in_createdby, SYSDATE ()
                        FROM price_line_item_detail
                       WHERE price_line_item_id = v_priclinitmid
                       AND active = pkg_constants.con_activeflag_yes
                        AND line_item_id IN (
                                SELECT DISTINCT line_item_id
                                           FROM line_item
                                          WHERE quote_header_id =
                                                             in_quoteheaderid
                                            AND (   site_id = in_siteid
                                                 OR (    site_id IS NULL
                                                     AND NVL (in_siteid, 0) =
                                                                             0
                                                    )
                                                )
                                            /*904 Order Site to Site SLA */
                                            AND NVL (part_type, '-1') =
                                                   DECODE
                                                         (UPPER (product_name),
                                                          'BT CPE', 'Bundle',
                                                          NVL (part_type,
                                                               '-1')
                                                         )
                                            --for BT Cpe only part type called Bundle has to be picked up
                                            AND UPPER (product_name) =
                                                           UPPER (in_prodname)
                                            AND active =
                                                   pkg_constants.con_activeflag_yes
                                            AND UPPER (fallback_type) =
                                                            UPPER (v_fallback)));
               END IF;
            END IF;
         ELSE
            --modified on 7/1/2010 to check for line_item_id
            UPDATE price_line_item_detail
               SET active = pkg_constants.con_activeflag_no,
                   modified_by = in_createdby,
                   modified_date = SYSDATE ()
             WHERE price_line_item_id = v_priclinitmid
               AND line_item_id IN (
                      SELECT DISTINCT line_item_id
                                 FROM line_item
                                WHERE quote_header_id = in_quoteheaderid
                                  AND (   site_id = in_siteid
                                       OR (    site_id IS NULL
                                           AND NVL (in_siteid, 0) = 0
                                          )
                                      )        /*904 Order Site to Site SLA */
                                  AND NVL (part_type, '-1') =
                                         DECODE (UPPER (product_name),
                                                 'BT CPE', 'Bundle',
                                                 NVL (part_type, '-1')
                                                )
                                  --for BT Cpe only part type called Bundle has to be picked up
                                  AND UPPER (product_name) =
                                                          UPPER (v_priclinitm)
                                  ----in_prodname) GHUCS5
                                  AND active =
                                              pkg_constants.con_activeflag_yes
                                  AND UPPER (fallback_type) =
                                                            UPPER (v_fallback));

            IF (v_priclinitmid IS NOT NULL)
            THEN
               INSERT INTO price_line_item_detail
                           (price_line_item_detail_id, price_line_item_id,
                            price, currency, charge_type, external_qref,
                            discount, discount_type, active, created_by,
                            created_date, line_item_id, rent_price)

                  --Ghucs added rent_price while inserting
                  (SELECT price_line_item_detail_id.NEXTVAL, v_priclinitmid,
                          v_price, v_currency, v_chargetype, v_extqref,
                          v_discount, v_discounttype,
                          pkg_constants.con_activeflag_yes, in_createdby,
                          SYSDATE (), line_item_id, v_rentprice
                     --Ghucs added v_rentprice while inserting
                   FROM   line_item
                    WHERE quote_header_id = in_quoteheaderid
                      AND (   site_id = in_siteid
                           OR (site_id IS NULL AND NVL (in_siteid, 0) = 0)
                          )                    /*904 Order Site to Site SLA */
                      AND UPPER (product_name) = UPPER (v_priclinitm)
                      ----in_prodname) GUCHS 3
                      AND active = pkg_constants.con_activeflag_yes
                      AND NVL (part_type, '-1') =
                             DECODE (UPPER (product_name),
                                     'BT CPE', 'Bundle',
                                     NVL (part_type, '-1')
                                    )
                      --for BT Cpe only part type called Bundle has to be picked up
                      AND UPPER (fallback_type) = UPPER (v_fallback));

               UPDATE line_item
                  SET priced = pkg_constants.con_activeflag_yes
                WHERE quote_header_id = in_quoteheaderid
                  AND (   site_id = in_siteid
                       OR (site_id IS NULL AND NVL (in_siteid, 0) = 0)
                      )                        /*904 Order Site to Site SLA */
                  AND UPPER (product_name) = UPPER (v_priclinitm)
                  ----in_prodname) GHUCS 4
                  AND NVL (part_type, '-1') =
                         DECODE (UPPER (product_name),
                                 'BT CPE', 'Bundle',
                                 NVL (part_type, '-1')
                                )
                  --for BT Cpe only part type called Bundle has to be picked up
                  AND active = pkg_constants.con_activeflag_yes
                  AND UPPER (fallback_type) = UPPER (v_fallback);

               IF (v_costtype IS NOT NULL)
               THEN
                  INSERT INTO cost_detail
                              (cost_detail_id, price_line_item_detail_id,
                               cost_type, COST, currency, created_by,
                               created_date)
                     (SELECT cost_detail_id.NEXTVAL,
                             price_line_item_detail_id, v_costtype, v_cost,
                             v_costcur, in_createdby, SYSDATE ()
                        FROM price_line_item_detail
                       WHERE price_line_item_id = v_priclinitmid
                       AND active = pkg_constants.con_activeflag_yes
                      AND  line_item_id IN (
                                SELECT DISTINCT line_item_id
                                           FROM line_item
                                          WHERE quote_header_id =
                                                             in_quoteheaderid
                                            AND (   site_id = in_siteid
                                                 OR (    site_id IS NULL
                                                     AND NVL (in_siteid, 0) =
                                                                             0
                                                    )
                                                )
                                            /*904 Order Site to Site SLA */
                                            AND UPPER (product_name) =
                                                           UPPER (in_prodname)
                                            AND active =
                                                   pkg_constants.con_activeflag_yes
                                            AND NVL (part_type, '-1') =
                                                   DECODE
                                                         (UPPER (product_name),
                                                          'BT CPE', 'Bundle',
                                                          NVL (part_type,
                                                               '-1')
                                                         )
                                            --for BT Cpe only part type called Bundle has to be picked up
                                            AND UPPER (fallback_type) =
                                                            UPPER (v_fallback)));
               END IF;
            END IF;
         END IF;
      END LOOP;

      out_status := pkg_constants.con_status_success;
   --  COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         out_errmsg := SQLERRM;
         /*ROLLBACK; commented by Jay*/
   END;

  PROCEDURE spu_access_qref (
      in_quoteheaderid   IN       quote_site.quote_header_id%TYPE,
      in_siteid          IN       quote_site.site_id%TYPE,
      in_param           IN       CLOB,
      in_modifiedby      IN       access_qref.modified_by%TYPE,
      out_status         OUT      NUMBER,
      out_errmsg         OUT      VARCHAR2
   )
   AS
      atval           mytabletypess;
      colname         mytabletypess;
      vallist         VARCHAR2 (4000)                 := '';
      paramset        VARCHAR2 (20000)                := '';
      paramsubset     VARCHAR2 (20000)                := '';
      updatestmt      VARCHAR2 (2000)            := 'UPDATE ACCESS_QREF SET ';
      updatestmt1     VARCHAR2 (2000)                 := '=';
      updatestmt2     VARCHAR2 (2000)                 := ' WHERE ';
      updatestmt3     VARCHAR2 (2000)                 := ' AND ';
      v_update        VARCHAR2 (10000)                := '';
      v_accessqref    access_qref.access_qref%TYPE;
      v_quotesiteid   quote_site.quote_site_id%TYPE;
      cntr            NUMBER                          := 0;
   BEGIN
      -- :: separator between column name and column value
      -- ## separator between 2 column name - value pair
      -- ~  row delimiter
      paramset := in_param || '~';

      SELECT quote_site_id
        INTO v_quotesiteid
        FROM quote_site
       WHERE site_id = in_siteid
         AND quote_header_id = in_quoteheaderid
         AND active = 'Y';

      WHILE (LENGTH (paramset) > 0)
      LOOP
         cntr := cntr + 1;
         paramsubset := SUBSTR (paramset, 1, INSTR (paramset, '~') - 1);
         paramset :=
               SUBSTR (paramset, INSTR (paramset, '~') + 1,
                       LENGTH (paramset));

         SELECT columnname, VALUE
         BULK COLLECT INTO colname, atval
           FROM (SELECT SUBSTR (columnnames,
                                1,
                                INSTR (columnnames, '::') - 1
                               ) columnname,
                        SUBSTR (columnnames,
                                INSTR (columnnames, '::') + 2
                               ) VALUE
                   FROM (SELECT SUBSTR (COLUMN_VALUE, 1
                                                       --INSTR (COLUMN_VALUE, '~') + 1
                                ) columnnames
                           FROM TABLE
                                   (CAST
                                       (pkg_common.fn_splitdata (paramsubset,
                                                                 '##'
                                                                ) AS varchar2_ntt
                                       )
                                   )) x) z;

         FOR i IN atval.FIRST .. atval.LAST
         LOOP
            BEGIN
               vallist := '''' || atval (i) || '''';

               IF (UPPER (colname (i)) = 'ACCESS_QREF')
               THEN
                  BEGIN
                     v_accessqref := atval (i);
                  END;
               ELSE
                  BEGIN
                     updatestmt :=
                           updatestmt
                        || colname (i)
                        || updatestmt1
                        || vallist
                        || ',';
                     v_update :=
                           updatestmt
                        || 'MODIFIED_BY ='
                        || in_modifiedby
                        || ',MODIFIED_DATE = '''
                        || SYSDATE ()
                        || ''''
                        || updatestmt2
                        || ' UPPER(ACCESS_QREF)= UPPER('''
                        || v_accessqref
                        || ''')'
                        || ' AND QUOTE_SITE_ID ='
                        || v_quotesiteid;
                     vallist := '';
                  END;
               END IF;
            END;
         END LOOP;

         EXECUTE IMMEDIATE (v_update);

         atval.DELETE;                                 --Clear the collections
         colname.DELETE;                               --Clear the collections
         vallist := '';
         updatestmt := 'UPDATE ACCESS_QREF SET ';
         v_update := '';
         v_accessqref := NULL;
      END LOOP;

     /* COMMIT; commented by Jay  */
      out_status := pkg_constants.con_status_success;
   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         out_errmsg := SQLERRM;
         /*ROLLBACK; commented by Jay*/
   END;

   PROCEDURE spd_access_qref (
      in_quoteheaderid   IN       quote_site.quote_header_id%TYPE,
      in_siteid          IN       quote_site.quote_site_id%TYPE,
      in_non_std_flag    IN       access_qref.non_std_qref_flag%TYPE,
      in_modifiedby      IN       access_qref.modified_by%TYPE,
      out_status         OUT      NUMBER,
      out_errmsg         OUT      VARCHAR2
   )
   AS
      v_quotesiteid   quote_site.quote_site_id%TYPE;
      v_r_count       NUMBER                          := 0;
   BEGIN
      SELECT quote_site_id
        INTO v_quotesiteid
        FROM quote_site
       WHERE quote_header_id = in_quoteheaderid
         AND site_id = in_siteid
         AND active = pkg_constants.con_activeflag_yes;

      DELETE FROM access_caveat
            WHERE access_qref_id IN (
                     SELECT access_qref_id
                       FROM access_qref
                      WHERE quote_site_id = v_quotesiteid
                        AND non_std_qref_flag = in_non_std_flag);

      v_r_count := SQL%ROWCOUNT;


      IF SQL%NOTFOUND
      THEN
         NULL;
      END IF;

      DELETE FROM access_qref
            WHERE quote_site_id = v_quotesiteid
              AND non_std_qref_flag = in_non_std_flag;

      v_r_count := SQL%ROWCOUNT;


      IF SQL%NOTFOUND
      THEN
         NULL;
      END IF;

     /* COMMIT;commented by Jay */
      out_status := pkg_constants.con_status_success;
   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         out_errmsg := SQLERRM;
         /*ROLLBACK; Commented by Jay */
   END;

   PROCEDURE spd_cpeqref (
      in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
      in_siteid          IN       site.site_id%TYPE,
      out_status         OUT      NUMBER,
      out_errmsg         OUT      NVARCHAR2
   )
   AS
   BEGIN
      DELETE FROM cpe_caveat
            WHERE cpe_qref_id IN (
                     SELECT cpe_qref_id
                       FROM cpe_qref cq, quote_site qs
                      WHERE qs.quote_header_id = in_quoteheaderid
                        AND qs.site_id = in_siteid
                        AND qs.active = pkg_constants.con_activeflag_yes
                        AND cq.quote_site_id = qs.quote_site_id);

      DELETE FROM cpe_qref
            WHERE quote_site_id IN (
                     SELECT qs.quote_site_id
                       FROM quote_site qs
                      WHERE qs.quote_header_id = in_quoteheaderid
                        AND qs.site_id = in_siteid
                        AND qs.active = pkg_constants.con_activeflag_yes);

      out_status := pkg_constants.con_status_success;
      /*COMMIT; commented by Jay  */
   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         out_errmsg := SQLERRM;
         /*ROLLBACK; commented by Jay*/
   END;

   PROCEDURE spi_pricing_bucket (
      --added on 09/06/2010 by Tanmayi for multisite pricing
      in_quoteheaderid   IN       pricing_bucket.quote_header_id%TYPE,
      in_requestid       IN       pricing_bucket.request_id%TYPE,
      in_bucket          IN       bucket_tab,
      in_createdby       IN       pricing_bucket.created_by%TYPE,
      out_bucketid       OUT      pricing_bucket.bucket_id%TYPE,
      out_status         OUT      NUMBER,
      out_errmsg         OUT      VARCHAR2
   )
   AS
      v_rowcount   NUMBER;
      v_bucketid   NUMBER;
   BEGIN
      SELECT MAX (bucket_id)
        INTO v_bucketid
        FROM pricing_bucket;

      CASE
         WHEN v_bucketid IS NULL
         THEN
            --for first time insert
            v_bucketid := 1;
         ELSE
            -- increment bucket_id
            v_bucketid := v_bucketid + 1;
      END CASE;

      FOR i IN in_bucket.FIRST .. in_bucket.LAST
      LOOP
         SELECT COUNT (*)
           INTO v_rowcount
           FROM pricing_bucket
          WHERE quote_header_id = in_quoteheaderid
            AND UPPER (request_id) = UPPER (in_requestid)
            AND UPPER (site_name) = UPPER (in_bucket (i).o_sitename)
            AND UPPER (config_level) = UPPER (in_bucket (i).o_configlevel)
            AND UPPER (product_name) = UPPER (in_bucket (i).o_prodname);

         IF (v_rowcount = 0)
         THEN
            INSERT INTO pricing_bucket
                        (pricing_bucket_id, bucket_id,
                         request_id, quote_header_id,
                         site_name,
                         config_level,
                         product_name,
                         active, created_by,
                         created_date
                        )
                 VALUES (pricing_bucket_id.NEXTVAL, v_bucketid,
                         in_requestid, in_quoteheaderid,
                         in_bucket (i).o_sitename,
                         in_bucket (i).o_configlevel,
                         in_bucket (i).o_prodname,
                         pkg_constants.con_activeflag_yes, in_createdby,
                         SYSDATE
                        );

            out_bucketid := v_bucketid;
         END IF;
      END LOOP;

      out_status := pkg_constants.con_status_success;
   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         out_errmsg := SQLERRM;
   END;

PROCEDURE spi_multisite_pricing (
      in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
      in_pricing         IN       pricing_tab,
      in_createdby       IN       price_line_item_detail.created_by%TYPE,
      out_status         OUT      NUMBER,
      out_errmsg         OUT      VARCHAR2
   )
   AS
      v_priclinitmid   price_line_item_detail.price_line_item_id%TYPE;
      v_count          NUMBER;
      v_lineitemid     line_item.line_item_id%TYPE;
      v_prlindetid     price_line_item_detail.price_line_item_detail_id%TYPE;
      v_rowid           price_line_item_detail.row_id%TYPE;
   BEGIN
      FOR i IN in_pricing.FIRST .. in_pricing.LAST
      LOOP
         SELECT price_line_item_id
           INTO v_priclinitmid
           FROM price_line_item
          WHERE UPPER (price_line_description) =UPPER (in_pricing (i).o_pricelineitem);

       v_rowid := null;
        if in_pricing (i).o_row_id =0 then
        v_rowid := null;
        ELSE
        v_rowid := in_pricing (i).o_row_id;
        end if;

         --modified on 7/1/2010 to check for line_item_id
         SELECT COUNT (*)
           INTO v_count
           FROM price_line_item_detail
          WHERE price_line_item_id = v_priclinitmid AND active = pkg_constants.con_activeflag_yes
            AND line_item_id IN (
                   SELECT  line_item_id
                              FROM line_item
                             WHERE quote_header_id = in_quoteheaderid
                                                           AND active = pkg_constants.con_activeflag_yes
                                                             AND UPPER (product_name) =UPPER (in_pricing (i).o_prodname)
                               AND (   site_id = in_pricing (i).o_siteid
                                    OR (site_id IS NULL
                                        AND NVL (in_pricing (i).o_siteid, 0) =0
                                       )
                                   )
                               AND NVL (part_type, '-1') =
                                      DECODE (UPPER (product_name),
                                              'BT CPE', 'Bundle',
                                              NVL (part_type, '-1')
                                             )
                               --for BT Cpe only part type called Bundle has to be picked up
                               AND UPPER (fallback_type) =UPPER (in_pricing (i).o_fallback))
                                                             AND NVL (row_id, 0) = NVL ( v_rowid,0);

         IF (v_count = 0)
         THEN
            IF (v_priclinitmid IS NOT NULL)
            THEN
               INSERT INTO price_line_item_detail
                           (price_line_item_detail_id, price_line_item_id,
                            price, currency, charge_type, external_qref,
                            discount, discount_type, request_status,
                            error_description, primary_pricing_status,
                            secondary_pricing_status, active, created_by,
                            created_date, line_item_id,
                            net_price,line_item_detail_id,ptp_eup,ptp_eup_id,pln_inventory_id,row_id )
--Added by Suresh P 1/Dec/2010)
                  (SELECT price_line_item_detail_id.NEXTVAL, v_priclinitmid,
                          in_pricing (i).o_price, in_pricing (i).o_currency,
                          in_pricing (i).o_chargetype,
                          in_pricing (i).o_extqref,
                          in_pricing (i).o_discount,
                          in_pricing (i).o_disctype,
                          in_pricing (i).o_reqstatus,
                          in_pricing (i).o_errdesc,
                          in_pricing (i).o_pripricingstatus,
                          in_pricing (i).o_secpricingstatus,
                          pkg_constants.con_activeflag_yes, in_createdby,
                          SYSDATE (), line_item_id,
                          in_pricing (i).o_price,
                          in_pricing (i).o_line_item_detail_id,
                          in_pricing (i).o_ptp_eup,
                          in_pricing (i).o_ptp_eup_id,
                          in_pricing (i).o_pln_inventory_id,
                          v_rowid
                     FROM line_item
                    WHERE quote_header_id = in_quoteheaderid
                      AND (   site_id = in_pricing (i).o_siteid
                           OR (    site_id IS NULL
                               AND NVL (in_pricing (i).o_siteid, 0) = 0
                              )
                          )
                      AND UPPER (product_name) =UPPER (in_pricing (i).o_prodname)
                      AND active = pkg_constants.con_activeflag_yes
                      AND NVL (part_type, '-1') =
                             DECODE (UPPER (product_name),
                                     'BT CPE', 'Bundle',
                                     NVL (part_type, '-1')
                                    )
                      --for BT Cpe only part type called Bundle has to be picked up
                      AND UPPER (fallback_type) =UPPER (in_pricing (i).o_fallback));

               UPDATE line_item
                  SET priced = pkg_constants.con_activeflag_yes
                WHERE quote_header_id = in_quoteheaderid
                  AND (   site_id = in_pricing (i).o_siteid
                       OR (    site_id IS NULL
                           AND NVL (in_pricing (i).o_siteid, 0) = 0
                          )
                      )                        /*904 Order Site to Site SLA */
                  AND UPPER (product_name) = UPPER (in_pricing (i).o_prodname)
                  AND NVL (part_type, '-1') =
                         DECODE (UPPER (product_name),
                                 'BT CPE', 'Bundle',
                                 NVL (part_type, '-1')
                                )
                  --for BT Cpe only part type called Bundle has to be picked up
                  AND active = pkg_constants.con_activeflag_yes
                  AND UPPER (fallback_type) =
                                             UPPER (in_pricing (i).o_fallback);

               IF (in_pricing (i).o_costtype IS NOT NULL)
               THEN
                  INSERT INTO cost_detail
                              (cost_detail_id, price_line_item_detail_id,
                               cost_type, COST, currency, created_by,
                               created_date)
                     (SELECT cost_detail_id.NEXTVAL,
                             price_line_item_detail_id,
                             in_pricing (i).o_costtype,
                             in_pricing (i).o_cost, in_pricing (i).o_costcur,
                             in_createdby, SYSDATE ()
                        FROM price_line_item_detail
                       WHERE NVL (row_id, 0) = NVL ( v_rowid,0)
                       AND price_line_item_id = v_priclinitmid  AND active =pkg_constants.con_activeflag_yes
            AND line_item_id IN (
                                SELECT line_item_id
                                           FROM line_item
                                          WHERE quote_header_id =in_quoteheaderid
                                            AND (   site_id =
                                                       in_pricing (i).o_siteid
                                                 OR (    site_id IS NULL
                                                     AND NVL
                                                            (in_pricing (i).o_siteid,
                                                             0
                                                            ) = 0
                                                    )
                                                )
                                            /*904 Order Site to Site SLA */
                                            AND NVL (part_type, '-1') =
                                                   DECODE
                                                         (UPPER (product_name),
                                                          'BT CPE', 'Bundle',
                                                          NVL (part_type,
                                                               '-1')
                                                         )
                                            --for BT Cpe only part type called Bundle has to be picked up
                                            AND UPPER (product_name) =UPPER(in_pricing (i).o_prodname)
                                            AND active =pkg_constants.con_activeflag_yes
                                            AND UPPER (fallback_type) =
                                                   UPPER
                                                      (in_pricing (i).o_fallback
                                                      )));
               END IF;
            END IF;
         ELSE
            --modified on 7/1/2010 to check for line_item_id
            UPDATE price_line_item_detail
               SET active = pkg_constants.con_activeflag_no,
                   modified_by = in_createdby,
                   modified_date = SYSDATE ()
             WHERE price_line_item_id = v_priclinitmid  AND active =pkg_constants.con_activeflag_yes
               AND NVL (row_id, 0) = NVL ( v_rowid,0)
        AND line_item_id IN (
                      SELECT DISTINCT line_item_id
                                 FROM line_item
                                WHERE quote_header_id = in_quoteheaderid
                                  AND (   site_id = in_pricing (i).o_siteid
                                       OR (    site_id IS NULL
                                           AND NVL (in_pricing (i).o_siteid,
                                                    0) = 0
                                          )
                                      )
                                  AND NVL (part_type, '-1') =
                                         DECODE (UPPER (product_name),
                                                 'BT CPE', 'Bundle',
                                                 NVL (part_type, '-1')
                                                )
                                  --for BT Cpe only part type called Bundle has to be picked up
                                  AND UPPER (product_name) =
                                             UPPER (in_pricing (i).o_prodname)
                                  AND active =
                                              pkg_constants.con_activeflag_yes
                                  AND UPPER (fallback_type) =
                                             UPPER (in_pricing (i).o_fallback));

            IF (v_priclinitmid IS NOT NULL)
            THEN
               INSERT INTO price_line_item_detail
                           (price_line_item_detail_id, price_line_item_id,
                            price, currency, charge_type, external_qref,
                            discount, discount_type, request_status,
                            error_description, primary_pricing_status,
                            secondary_pricing_status, active, created_by,
                            created_date, line_item_id,
                            net_price,line_item_detail_id,ptp_eup,ptp_eup_id,pln_inventory_id,row_id )  --Added by Suresh P 1/Dec/2010)
                  (SELECT price_line_item_detail_id.NEXTVAL, v_priclinitmid,
                          in_pricing (i).o_price, in_pricing (i).o_currency,
                          in_pricing (i).o_chargetype,
                          in_pricing (i).o_extqref,
                          in_pricing (i).o_discount,
                          in_pricing (i).o_disctype,
                          in_pricing (i).o_reqstatus,
                          in_pricing (i).o_errdesc,
                          in_pricing (i).o_pripricingstatus,
                          in_pricing (i).o_secpricingstatus,
                          pkg_constants.con_activeflag_yes, in_createdby,
                          SYSDATE (), line_item_id,
                          in_pricing (i).o_price,
                          in_pricing (i).o_line_item_detail_id,
                          in_pricing (i).o_ptp_eup,
                          in_pricing (i).o_ptp_eup_id,
                          in_pricing (i).o_pln_inventory_id,
                          v_rowid
                     FROM line_item
                    WHERE quote_header_id = in_quoteheaderid
                      AND (   site_id = in_pricing (i).o_siteid
                           OR (    site_id IS NULL
                               AND NVL (in_pricing (i).o_siteid, 0) = 0
                              )
                          )
                      AND UPPER (product_name) =
                                             UPPER (in_pricing (i).o_prodname)
                      AND active = pkg_constants.con_activeflag_yes
                      AND NVL (part_type, '-1') =
                             DECODE (UPPER (product_name),
                                     'BT CPE', 'Bundle',
                                     NVL (part_type, '-1')
                                    )
                      --for BT Cpe only part type called Bundle has to be picked up
                      AND UPPER (fallback_type) =
                                             UPPER (in_pricing (i).o_fallback));

               UPDATE line_item
                  SET priced = pkg_constants.con_activeflag_yes
                WHERE quote_header_id = in_quoteheaderid
                  AND (   site_id = in_pricing (i).o_siteid
                       OR (    site_id IS NULL
                           AND NVL (in_pricing (i).o_siteid, 0) = 0
                          )
                      )                        /*904 Order Site to Site SLA */
                  AND UPPER (product_name) = UPPER (in_pricing (i).o_prodname)
                  AND NVL (part_type, '-1') =
                         DECODE (UPPER (product_name),
                                 'BT CPE', 'Bundle',
                                 NVL (part_type, '-1')
                                )
                  --for BT Cpe only part type called Bundle has to be picked up
                  AND active = pkg_constants.con_activeflag_yes
                  AND UPPER (fallback_type) =UPPER (in_pricing (i).o_fallback);

               IF (in_pricing (i).o_costtype IS NOT NULL)
               THEN
                  INSERT INTO cost_detail
                              (cost_detail_id, price_line_item_detail_id,
                               cost_type, COST, currency, created_by,
                               created_date)
                     (SELECT cost_detail_id.NEXTVAL,
                             price_line_item_detail_id,
                             in_pricing (i).o_costtype,
                             in_pricing (i).o_cost, in_pricing (i).o_costcur,
                             in_createdby, SYSDATE ()
                        FROM price_line_item_detail
                       WHERE NVL (row_id, 0) = NVL ( v_rowid,0)
                       AND price_line_item_id = v_priclinitmid  AND active =pkg_constants.con_activeflag_yes
            AND line_item_id IN (
                                SELECT DISTINCT line_item_id
                                           FROM line_item
                                          WHERE quote_header_id =in_quoteheaderid
                                            AND (   site_id =
                                                       in_pricing (i).o_siteid
                                                 OR (    site_id IS NULL
                                                     AND NVL
                                                            (in_pricing (i).o_siteid,
                                                             0
                                                            ) = 0
                                                    )
                                                )
                                            AND UPPER (product_name) =
                                                   UPPER
                                                      (in_pricing (i).o_prodname
                                                      )
                                            AND active =
                                                   pkg_constants.con_activeflag_yes
                                            AND NVL (part_type, '-1') =
                                                   DECODE
                                                         (UPPER (product_name),
                                                          'BT CPE', 'Bundle',
                                                          NVL (part_type,
                                                               '-1')
                                                         )
                                            --for BT Cpe only part type called Bundle has to be picked up
                                            AND UPPER (fallback_type) =
                                                   UPPER
                                                      (in_pricing (i).o_fallback
                                                      )));
               END IF;
            END IF;
         END IF;
      END LOOP;

      out_status := pkg_constants.con_status_success;
   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         out_errmsg := SQLERRM;
   END;

   PROCEDURE spi_multisite_qrefcaveat (
      in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
      in_qreflist        IN       aqref_tab,
      in_createdby       IN       access_qref.created_by%TYPE,
      out_status         OUT      NUMBER,
      out_errmsg         OUT      VARCHAR2
   )
   AS
      v_quotesiteid   quote_site.quote_site_id%TYPE;
      v_qrefid        access_qref.access_qref_id%TYPE;
      v_currdate      TIMESTAMP;
   BEGIN
      v_currdate := SYSDATE ();
      FOR i IN in_qreflist.FIRST .. in_qreflist.LAST            --insert qref
      LOOP
         SELECT quote_site_id
           INTO v_quotesiteid
           FROM quote_site
          WHERE quote_header_id = in_quoteheaderid
            AND site_id = in_qreflist (i).o_siteid
            AND active = pkg_constants.con_activeflag_yes;

         --delete from access_caveat and access_qref tables before inserting
         DELETE FROM access_caveat
               WHERE access_qref_id IN (SELECT access_qref_id
                                          FROM access_qref
                                         WHERE quote_site_id = v_quotesiteid)
                 AND created_date < v_currdate;

         DELETE FROM access_qref
               WHERE quote_site_id = v_quotesiteid
                 AND created_date < v_currdate;

         INSERT INTO access_qref
                     (access_qref_id, quote_site_id,
                      access_qref,
                      pricing_status,
                      access_speed, supplier,
                      lead_time,
                      port_speed,
                      one_time_charge,
                      recurring_charge,
                      port_speed_value,
                      port_uom,
                      access_speed_value,
                      access_uom, access_product_type,
                      access_technology,
                      supplier_product_name,
                      gpop_node, distance_gpop,
                      apop_node, distance_apop,
                      term, leg_id,
                      pair_id,
                      expiry_date_time_zone,
                      tariff_zone_name,
                      no_of_copper_pairs,
                      circuit_interface,
                      auto_priced_flag,
                      budgetary_priced_flag,
                      interface_type,
                      framing_details,
                      connector,
                      install_cost,
                      supplier_cost,
                      backhaul_cost,
                      local_tail_cost,
                      cost_access_currency,
                      resiliency_flag, comments,
                      nni_flag, support_24x7,
                      sent_to_ape,
                      monthly_cost,
                      access_type, expiry_date,
                      apop_flag,
                      port_status, gpop_id,
                      apop_id,
                      port_speed_avail_status,
                      method,
                      aggregator_quote_line_id, encapsulation,
                      guaranteed_speed,
                      time_to_deliver, isp_addressing,
                      monthly_recurring_charge,
                      non_recurring_charge,
                      access_availability,
                      service_catagory,
                      other_service_notes,
                      additional_charges,
                      tranaction_type,
                      hvpn_access_technology,
                      pricing_id,
                      service_id,
                      copper_details,
                      copper_service_id,
                      rfa_notes, mrc,
                      nrc, tarrif_zone,
                      rfo_notes, created_by, created_date,
                      active,
                      copper_pair,
                      ethernet_phase_attribute,
                      non_std_qref_flag,                       --added by Mahim
                      /*Start Added by Suresh Panati for Bulk Upload*/
                      ape_comments,
                      apop_code,
                      cease_charges,
                      gpop,
                      gpop_code,
                      network_type,
                      partner_name,
                      ptp_mrc,
                      ptp_nrc,
                      qref_type,
                      rbpurl,
                      resiliency,
                      staff_member_email,
                      staff_member_name,
                      support_24_7,
                      workflow_status,
                      service_variant
              --            ,
--            /*End Added by Suresh Panati for Bulk Upload*/
--            /*Start Added by Nagendra for Bulk Upload on 31-May-2011*/
--                      optm_qref,
--                      optm_rental_cost_y1,
--                      optm_rental_cost_y2,
--                      optm_rental_cost_y3,
--                      optm_rental_cost_y4,
--                      optm_rental_cost_y5,
--                      optm_rental_price_y1,
--                      optm_rental_price_y2,
--                      optm_rental_price_y3,
--                      optm_rental_price_y4,
--                      optm_rental_price_y5,
--                      optm_install_y1,
--                      install_percent_reduction_y1,
--                      percent_reduction_cost_y1,
--                      percent_reduction_cost_y2,
--                      percent_reduction_cost_y3,
--                      percent_reduction_cost_y4,
--                      percent_reduction_cost_y5,
--                      tpe_ref_id,
--                      supplier_ref_id
   /*End Added by Nagendra for Bulk Upload on 31-May-2011*/
                     )
              VALUES (access_qref_id.NEXTVAL, v_quotesiteid,
                      in_qreflist (i).o_aqref,
                      in_qreflist (i).o_pricingstatus,
                      in_qreflist (i).o_accspeed, in_qreflist (i).o_supplier,
                      in_qreflist (i).o_leadtime,
                      in_qreflist (i).o_portspeed,
                      in_qreflist (i).o_onetimechrg,
                      in_qreflist (i).o_recchrg,
                      in_qreflist (i).o_portspeedval,
                      in_qreflist (i).o_portuom,
                      in_qreflist (i).o_accspeedval,
                      in_qreflist (i).o_accuom, in_qreflist (i).o_accprodtyp,
                      in_qreflist (i).o_acctech,
                      in_qreflist (i).o_supprodname,
                      in_qreflist (i).o_gpopnode, in_qreflist (i).o_distgpop,
                      in_qreflist (i).o_apopnode, in_qreflist (i).o_distapop,
                      in_qreflist (i).o_term, in_qreflist (i).o_legid,
                      in_qreflist (i).o_pairid,
                      in_qreflist (i).o_expdttimezone,
                      in_qreflist (i).o_tariffzone,
                      in_qreflist (i).o_nocopperpairs,
                      in_qreflist (i).o_circuitintf,
                      in_qreflist (i).o_autopricedflag,
                      in_qreflist (i).o_budgtpricedflag,
                      in_qreflist (i).o_intftyp,
                      in_qreflist (i).o_framingdet,
                      in_qreflist (i).o_connector,
                      in_qreflist (i).o_installcost,
                      in_qreflist (i).o_suppcost,
                      in_qreflist (i).o_backhaulcost,
                      in_qreflist (i).o_lcltailcost,
                      in_qreflist (i).o_costacccur,
                      in_qreflist (i).o_resflag, in_qreflist (i).o_comments,
                      in_qreflist (i).o_nniflag, in_qreflist (i).o_support,
                      in_qreflist (i).o_senttoape,
                      in_qreflist (i).o_mnthlycost,
                      in_qreflist (i).o_acctype, in_qreflist (i).o_expdate,
                      in_qreflist (i).o_apopflag,
                      in_qreflist (i).o_portstatus, in_qreflist (i).o_gpopid,
                      in_qreflist (i).o_apopid,
                      in_qreflist (i).o_portspdavailst,
                      in_qreflist (i).o_method,
                      in_qreflist (i).o_aggqtlineid, in_qreflist (i).o_encap,
                      in_qreflist (i).o_guaranteedspeed,
                      in_qreflist (i).o_timetodel, in_qreflist (i).o_ispaddr,
                      in_qreflist (i).o_mnthlyrecchrg,
                      in_qreflist (i).o_nonrecchrg,
                      in_qreflist (i).o_accavail,
                      in_qreflist (i).o_servicecat,
                      in_qreflist (i).o_othersernotes,
                      in_qreflist (i).o_addchrg,
                      in_qreflist (i).o_transactiontyp,
                      in_qreflist (i).o_hvpnacctech,
                      in_qreflist (i).o_pricingid,
                      in_qreflist (i).o_serviceid,
                      in_qreflist (i).o_copperdet,
                      in_qreflist (i).o_copperserid,
                      in_qreflist (i).o_rfanotes, in_qreflist (i).o_mrc,
                      in_qreflist (i).o_nrc, in_qreflist (i).o_tarrifzone,
                      in_qreflist (i).o_rfonotes, in_createdby, v_currdate,
                      pkg_constants.con_activeflag_yes,
                      in_qreflist (i).o_copper_pair,
                      in_qreflist (i).o_ethernet_phase_attribute,
                      in_qreflist (i).o_non_std_qref_flag,     --added by Mahim
                      /*Start Added by Suresh Panati for Bulk Upload*/
                      in_qreflist (i).o_ape_comments,
                      in_qreflist (i).o_apop_code,
                      in_qreflist (i).o_cease_charges,
                      in_qreflist (i).o_gpop,
                      in_qreflist (i).o_gpop_code,
                      in_qreflist (i).o_network_type,
                      in_qreflist (i).o_partner_name,
                      in_qreflist (i).o_ptp_mrc,
                      in_qreflist (i).o_ptp_nrc,
                      in_qreflist (i).o_qref_type,
                      in_qreflist (i).o_rbpurl,
                      in_qreflist (i).o_resiliency,
                      in_qreflist (i).o_staff_member_email,
                      in_qreflist (i).o_staff_member_name,
                      in_qreflist (i).o_support_24_7,
                      in_qreflist (i).o_workflow_status ,
                      in_qreflist (i).o_service_variant
--                   ,
--            /*End Added by Suresh Panati for Bulk Upload*/
--                  /*Start Added by Nagendra on 31-May-2011 for Bulk Upload*/
--                       in_qreflist (i).o_optm_qref,
--                       in_qreflist (i).o_optm_rentl_cost_y1,
--                       in_qreflist (i).o_optm_rentl_cost_y2,
--                       in_qreflist (i).o_optm_rentl_cost_y3,
--                       in_qreflist (i).o_optm_rentl_cost_y4,
--                       in_qreflist (i).o_optm_rentl_cost_y5,
--                       in_qreflist (i).o_optm_rentl_price_y1,
--                       in_qreflist (i).o_optm_rentl_price_y2,
--                       in_qreflist (i).o_optm_rentl_price_y3,
--                       in_qreflist (i).o_optm_rentl_price_y4,
--                       in_qreflist (i).o_optm_rentl_price_y5,
--                       in_qreflist (i).o_optm_install_y1,
--                       in_qreflist (i).o_install_percent_reduction_y1,
--                       in_qreflist (i).o_percent_reduction_cost_y1,
--                       in_qreflist (i).o_percent_reduction_cost_y2,
--                       in_qreflist (i).o_percent_reduction_cost_y3,
--                       in_qreflist (i).o_percent_reduction_cost_y4,
--                       in_qreflist (i).o_percent_reduction_cost_y5,
--                       in_qreflist (i).o_tpe_ref_id,
--                       in_qreflist (i).o_supplier_ref_id
                  /*End Added by Nagendra on 31-May-2011 for Bulk Upload*/
                     )
           RETURNING access_qref_id
                INTO v_qrefid;

         IF (in_qreflist (i).o_caveat IS NOT NULL)
         THEN
            FOR j IN                                         --insert caveats
               in_qreflist (i).o_caveat.FIRST .. in_qreflist (i).o_caveat.LAST
            LOOP
               INSERT INTO access_caveat
                           (access_caveat_id, access_qref_id,
                            caveat_id,
                            description,
                            caveated_on,
                            updated_on,
                            active,
                            access_caveat,
                            created_by, created_date
                           )
                    VALUES (access_caveat_id.NEXTVAL, v_qrefid,
                            in_qreflist (i).o_caveat (j).o_caveatid,
                            in_qreflist (i).o_caveat (j).o_desc,
                            in_qreflist (i).o_caveat (j).o_caveatedon,
                            in_qreflist (i).o_caveat (j).o_updatedon,
                            pkg_constants.con_activeflag_yes,
                            in_qreflist (i).o_caveat (j).o_accesscaveat,
                            in_createdby, v_currdate
                           );
            END LOOP;                                      --end insert caveat
         END IF;
      END LOOP;                                              --end insert qref

      out_status := pkg_constants.con_status_success;
   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         out_errmsg := SQLERRM;
   END;

      PROCEDURE spi_multisite_cpeqrefcaveat (
      in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
      in_cpeqreflist     IN       cpeqref_tab,
      in_createdby       IN       cpe_qref.created_by%TYPE,
      out_status         OUT      NUMBER,
      out_errmsg         OUT      VARCHAR2
   )
   AS
      v_quotesiteid   quote_site.quote_site_id%TYPE;
      v_cpeqrefid     cpe_qref.cpe_qref_id%TYPE;
      v_cpe_qref      NUMBER                          := 0;
   BEGIN
      FOR i IN in_cpeqreflist.FIRST .. in_cpeqreflist.LAST
      LOOP
         SELECT quote_site_id
           INTO v_quotesiteid
           FROM quote_site
          WHERE quote_header_id = in_quoteheaderid
            AND site_id = in_cpeqreflist (i).o_siteid
            AND active = pkg_constants.con_activeflag_yes;

         SELECT COUNT (*)
           INTO v_cpe_qref
           FROM cpe_qref
          WHERE quote_site_id = v_quotesiteid
            AND cpe_qref = in_cpeqreflist (i).o_cpeqref;

         IF v_cpe_qref > 0
         THEN
            DELETE FROM cpe_caveat
                  WHERE cpe_qref_id IN (
                           SELECT cpe_qref_id
                             FROM cpe_qref cq, quote_site qs
                            WHERE qs.quote_header_id = in_quoteheaderid
                              AND qs.site_id = in_cpeqreflist (i).o_siteid
                              AND qs.active = pkg_constants.con_activeflag_yes
                              AND cq.quote_site_id = qs.quote_site_id
                              AND cq.cpe_qref = in_cpeqreflist (i).o_cpeqref);

            DELETE FROM cpe_qref
                  WHERE quote_site_id IN (
                           SELECT qs.quote_site_id
                             FROM quote_site qs
                            WHERE qs.quote_header_id = in_quoteheaderid
                              AND qs.site_id = in_cpeqreflist (i).o_siteid
                              AND qs.active = pkg_constants.con_activeflag_yes)
                    AND cpe_qref = in_cpeqreflist (i).o_cpeqref;
         END IF;

         INSERT INTO cpe_qref
                     (cpe_qref_id, quote_site_id,
                      cpe_qref,
                      pri_supplier_name,
                      pri_status,
                      pri_one_time_charge,
                      pri_recurring_charge,
                      expiry_date,
                      cpe_lead_time,
                      cpe_lead_time_status,
                      comments,
                      sec_supplier_name,
                      sec_status,
                      sec_one_time_charge,
                      sec_recurring_charge,
                      secondary_cpe_qref,
                      pri_ssp_bid_ref_no,
                      sec_ssp_bid_ref_no,
                      pri_offer_valid_date,
                      sec_offer_valid_date, created_by,
                      created_date, request_status,
                      site_error,
                      pri_pricing_error,
                      pri_one_time_override_cost,
                      pri_maint_override_cost,
                      pri_kit_override_cost,
                      sec_pricing_error,
                      sec_one_time_override_cost,
                      sec_maint_override_cost,
                      sec_kit_override_cost,
              -- Added on 15/7/2011
              kit_override_flag
                     )
              VALUES (cpe_qref_id.NEXTVAL, v_quotesiteid,
                      in_cpeqreflist (i).o_cpeqref,
                      in_cpeqreflist (i).o_prisuppliername,
                      in_cpeqreflist (i).o_pristatus,
                      in_cpeqreflist (i).o_prionetimechrg,
                      in_cpeqreflist (i).o_prirecrchrg,
                      in_cpeqreflist (i).o_expirydt,
                      in_cpeqreflist (i).o_cpeleadtime,
                      in_cpeqreflist (i).o_cpeleadtimestatus,
                      in_cpeqreflist (i).o_comments,
                      in_cpeqreflist (i).o_secsuppliername,
                      in_cpeqreflist (i).o_secstatus,
                      in_cpeqreflist (i).o_seconetimechrg,
                      in_cpeqreflist (i).o_secrecrchrg,
                      in_cpeqreflist (i).o_seccpeqref,
                      in_cpeqreflist (i).o_prisspbidrefno,
                      in_cpeqreflist (i).o_secsspbidrefno,
                      in_cpeqreflist (i).o_prioffervaliddt,
                      in_cpeqreflist (i).o_secoffervaliddt, in_createdby,
                      SYSDATE, in_cpeqreflist (i).o_request_status,
                      in_cpeqreflist (i).o_site_error,
                      in_cpeqreflist (i).o_pri_pricing_error,
                      in_cpeqreflist (i).o_pri_one_time_override_cost,
                      in_cpeqreflist (i).o_pri_maint_override_cost,
                      in_cpeqreflist (i).o_pri_kit_override_cost,
                      in_cpeqreflist (i).o_sec_pricing_error,
                      in_cpeqreflist (i).o_sec_one_time_override_cost,
                      in_cpeqreflist (i).o_sec_maint_override_cost,
                      in_cpeqreflist (i).o_sec_kit_override_cost,
              -- Added on 15/7/2011
              in_cpeqreflist (i).o_kit_override_flag
                     )
           RETURNING cpe_qref_id
                INTO v_cpeqrefid;

         /* if there are no caveats for that cpe qref, null object can be passed */
         IF (in_cpeqreflist (i).o_cpecaveat IS NOT NULL)
         THEN
            BEGIN
               FOR j IN
                  in_cpeqreflist (i).o_cpecaveat.FIRST .. in_cpeqreflist (i).o_cpecaveat.LAST
               LOOP
                  INSERT INTO cpe_caveat
                              (cpe_caveat_id,
                               cpe_caveat,
                               description,
                               cpe_qref_id,
                               active,
                               created_by, created_date
                              )
                       VALUES (cpe_caveat_id.NEXTVAL,
                               in_cpeqreflist (i).o_cpecaveat (j).o_cpecaveat,
                               in_cpeqreflist (i).o_cpecaveat (j).o_desc,
                               v_cpeqrefid,
                               pkg_constants.con_activeflag_yes,
                               in_createdby, SYSDATE
                              );
               END LOOP;
            END;
         END IF;
      END LOOP;

      out_status := pkg_constants.con_status_success;
   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         out_errmsg := SQLERRM;
   END;

    PROCEDURE spi_save_pricing_from_bfg (
      --added on 25/06/2010 by Jay for Modify
      in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
      in_pricing         IN       pricing_tab,
      in_siteid          IN       line_item.site_id%TYPE,
      in_servicename     IN       quote_site_service.service_name%TYPE,
      in_createdby       IN       price_line_item_detail.created_by%TYPE,
      out_status         OUT      NUMBER,
      out_errmsg         OUT      VARCHAR2
   )
   AS
      v_priclinitmid            price_line_item_detail.price_line_item_id%TYPE;
      v_count                   NUMBER                                   := 0;
      v_lineitemid              line_item.line_item_id%TYPE;
      v_prlindetid              price_line_item_detail.price_line_item_detail_id%TYPE;
      v_quote_site_service_id   quote_site_service.quote_site_service_id%TYPE;
      v_as_is_already_exist     NUMBER (3)                               := 0;
   BEGIN
      BEGIN
         SELECT quote_site_service_id
           INTO v_quote_site_service_id
           FROM quote_site_service
          WHERE quote_header_id = in_quoteheaderid
            AND (   site_id = in_siteid
                 OR (site_id IS NULL AND NVL (in_siteid, 0) = 0)
                )
            AND UPPER (service_name) = UPPER (in_servicename);
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            out_status := pkg_constants.con_status_failure;
            out_errmsg := 'error while searching for quote_site_service_id';
            RETURN;
      END;

      pkg_lineitem.spi_pricing_modify_as_is (in_quoteheaderid,
                                             in_pricing,
                                             in_siteid,
                                             in_servicename,
                                             in_createdby,
                                             out_status,
                                             out_errmsg
                                            );

    if   out_status <>1  then
    out_errmsg :=out_errmsg||'-spi_pricing_modify_as_is failed';
    return;
    end if;

  IF upper(in_servicename)<>pkg_constants.con_prod_bt_mobilexpress THEN

      pkg_lineitem.spi_pricing_modify (in_quoteheaderid,
                                       in_pricing,
                                       in_siteid,
                                       in_servicename,
                                       in_createdby,
                                       out_status,
                                       out_errmsg
                                      );
  end if;
    if   out_status <>1  then
    out_errmsg :=out_errmsg||'-spi_pricing_modify failed';
    return;
    end if;
   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         out_errmsg := SQLERRM;
   END;

  PROCEDURE spi_pricing_modify_as_is(
    in_quoteheaderid IN quote_header.quote_header_id%TYPE,
    in_pricing       IN pricing_tab,
    in_siteid        IN line_item.site_id%TYPE,
    in_servicename   IN quote_site_service.service_name%TYPE,
    in_createdby     IN price_line_item_detail.created_by%TYPE,
    out_status out NUMBER,
    out_errmsg out VARCHAR2 )
AS
/******************************************************************************
   NAME:       spi_pricing_modify_as_is
   PURPOSE:    Pricing SP for the get asset

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        01/05/2010  Jaya
   2.0        25/06/2010  Arpitha          added on 25/06/2010 by Arpitha for Modify
   3.0        08-OCT-2010 Sandeep          IF condition added by Sandeep for handling GHUCS pricing scenarios
   4.0        15/01/2010  Suman            Modificed the EUP to object value and update base on EUP condition
 ******************************************************************************/--

  v_priclinitmid price_line_item_detail.price_line_item_id%TYPE;
  v_count NUMBER := 0;
  v_lineitemid line_item.line_item_id%TYPE;
  v_prlindetid price_line_item_detail.price_line_item_detail_id%TYPE;
  v_quote_site_service_id quote_site_service.quote_site_service_id%TYPE;
  v_default_action_code VARCHAR2(20) :='';
BEGIN

  BEGIN
   SELECT quote_site_service_id
    INTO v_quote_site_service_id
    FROM quote_site_service
    WHERE quote_header_id    = in_quoteheaderid
    AND ( site_id            = in_siteid
    OR (site_id             IS NULL
    AND nvl (in_siteid, 0)   = 0) )
    AND upper (service_name) = upper (in_servicename);
  exception
  WHEN no_data_found THEN
    out_status := pkg_constants.con_status_failure;
    out_errmsg := 'error while searching for quote_site_service_id';
    pkg_common.spi_error_log(NULL,in_quoteheaderid,in_siteid,in_servicename,
                   'PKG_LINEITEM','spi_pricing_modify_as_is',out_status,out_errmsg);
    RETURN;
  END;

    /**Code written for defaulting action code for cease to'Delete' and 'None' for other scenarios **/
  BEGIN
    SELECT decode(upper(nvl(bs.order_type,q.order_type)),'CEASE','Delete','None')
    INTO v_default_action_code
    FROM quote_header qh,
         quote q ,
         bundle_selection bs
    WHERE qh.quote_header_id = in_quoteheaderid
    AND q.quote_id           = qh.quote_id
    AND qh.quote_header_id   = bs.quote_header_id(+);
  exception
  WHEN no_data_found THEN
    out_errmsg            :='No data found for order type, defaulting action code to none';
    v_default_action_code :='None';
    pkg_common.spi_error_log(NULL,in_quoteheaderid,in_siteid,in_servicename,
                   'PKG_LINEITEM','spi_pricing_modify_as_is',out_status,out_errmsg);
  WHEN others THEN
    out_errmsg            :='error while searching for order type, defaulting action code to none';
    v_default_action_code :='None';
    pkg_common.spi_error_log(NULL,in_quoteheaderid,in_siteid,in_servicename,
                   'PKG_LINEITEM','spi_pricing_modify_as_is',out_status,out_errmsg);
  END;

  IF in_pricing.EXISTS(1) THEN
    FOR i IN in_pricing.FIRST .. in_pricing.LAST
    loop
      BEGIN
        SELECT price_line_item_id
        INTO v_priclinitmid
        FROM price_line_item
        WHERE upper (price_line_description) = upper (in_pricing (i).o_pricelineitem);
      exception
      WHEN no_data_found THEN
        out_status := pkg_constants.con_status_failure;
        out_errmsg := 'error while searching for price_line_item_id ->'||upper (in_pricing (i).o_pricelineitem);
        RETURN;
      END;

      -- IF condition added by Sandeep for handling GHUCS pricing scenarios on 08-OCT-2010
      IF in_pricing (i).o_product_id = pkg_constants.ghucs_product_key THEN

        SELECT count (*)
        INTO v_count
        FROM price_line_item_detail_as_is plias,
          line_item_detail ld
        WHERE plias.price_line_item_id = v_priclinitmid
        AND plias.line_item_detail_id  = ld.line_item_detail_id
        AND ld.line_item_detail_id     = in_pricing (i).o_line_item_detail_id
        AND plias.line_item_id        IN
          (SELECT DISTINCT line_item_id
          FROM line_item
          WHERE quote_header_id     = in_quoteheaderid
          AND (site_id              = in_siteid
          OR (site_id              IS NULL
          AND nvl (in_siteid, 0)    = 0))
          AND upper (product_name)  = upper (in_pricing (i).o_prodname)
          AND active                = pkg_constants.con_activeflag_yes
          AND upper (fallback_type) = upper (in_pricing (i).o_fallback)
          );
      ELSE
        SELECT count (*)
        INTO v_count
        FROM price_line_item_detail_as_is pli
        WHERE pli.price_line_item_id = v_priclinitmid
        AND nvl(row_id,1)            = nvl(in_pricing (i).o_row_id,1)
        AND pli.line_item_id        IN
          ( SELECT DISTINCT line_item_id
          FROM quote_line_item_as_is
          WHERE quote_header_id  = in_quoteheaderid
          AND ( site_id          = in_siteid
          OR ( site_id          IS NULL
          AND nvl (in_siteid, 0) = 0 ) )
          AND quote_site_service_id = v_quote_site_service_id
          AND nvl (part_type, '-1') = decode (upper (product_name), 'BT CPE', 'Bundle', nvl (part_type, '-1') )
            --for BT Cpe only part type called Bundle has to be picked up
          AND upper (product_name)  = upper (in_pricing (i).o_prodname)
          AND active                = pkg_constants.con_activeflag_yes
          AND upper (fallback_type) = upper (in_pricing (i).o_fallback)
          );

      END IF;

      IF (v_count           = 0) THEN
        IF (v_priclinitmid IS NOT NULL) THEN
          INSERT
          INTO price_line_item_detail_as_is
            (
              price_line_item_detail_id,
              price_line_item_id,
              price,
              currency,
              charge_type,
              external_qref,
              discount,
              discount_type,
              active,
              created_by,
              created_date,
              line_item_id,
              quantity,
              row_id ,
              line_item_detail_id,
              pln_inventory_id,
              net_price,
              ptp_eup,
              classic_element_id,
              classic_element_name,
              action_code,
              ppsr_price_line_id,
              ppsr_price_line_description ,
              discount_requested ,
              discount_proposed,
              billing_id,             --Added for GHUCS R16 by KHADER
              billing_reference_name,--Added for GHUCS R16 by KHADER
              billing_start_date,    --Added for GHUCS R16 by KHADER
              billing_end_date       --Added for GHUCS R16 by KHADER
            )
            (SELECT price_line_item_detail_id.nextval,
                v_priclinitmid,
                in_pricing (i).o_price,
                in_pricing (i).o_currency,
                in_pricing (i).o_chargetype,
                in_pricing (i).o_extqref,
                in_pricing (i).o_discount,
                in_pricing (i).o_disctype,
                pkg_constants.con_activeflag_yes,
                in_createdby,
                SYSDATE (),
                line_item_id ,
                in_pricing (i).o_quanty ,
                decode(in_pricing (i).o_row_id,0,NULL,in_pricing (i).o_row_id) ,
                in_pricing (i).o_line_item_detail_id ,
                in_pricing (i).o_pln_inventory_id,
                in_pricing (i).o_price,
                in_pricing (i).o_ptp_eup,----'EUP' Change by Suman
                in_pricing (i).o_classic_element_id,
                in_pricing (i).o_classic_element_name,
                v_default_action_code,
                in_pricing (i).ppsr_price_line_id,
                in_pricing (i).ppsr_price_line_description ,
                in_pricing (i).o_discount_requested ,
                in_pricing (i).o_discount_proposed,
                in_pricing (i).o_billing_id,          --Added for GHUCS R16 by KHADER
                in_pricing (i).o_billing_reference_name,   --Added for GHUCS R16 by KHADER
                in_pricing (i).o_billing_start_date,         --Added for GHUCS R16 by KHADER
                in_pricing (i).o_billing_end_date             --Added for GHUCS R16 by KHADER
              FROM quote_line_item_as_is
              WHERE quote_header_id  = in_quoteheaderid
              AND ( site_id          = in_siteid
              OR (site_id           IS NULL
              AND nvl (in_siteid, 0) = 0) )
              AND quote_site_service_id = v_quote_site_service_id
              AND upper (product_name)  = upper (in_pricing (i).o_prodname)
              AND active                = pkg_constants.con_activeflag_yes
              AND nvl (part_type, '-1') = decode (upper (product_name), 'BT CPE', 'Bundle', nvl (part_type, '-1') )
                --for BT Cpe only part type called Bundle has to be picked up
              AND upper (fallback_type) = upper (in_pricing (i).o_fallback)
            );

          UPDATE quote_line_item_as_is
            SET priced             = pkg_constants.con_activeflag_yes
            WHERE quote_header_id  = in_quoteheaderid
            AND ( site_id          = in_siteid
            OR (site_id           IS NULL
            AND nvl (in_siteid, 0) = 0) )
            AND quote_site_service_id = v_quote_site_service_id
            AND upper (product_name)  = upper (in_pricing (i).o_prodname)
            AND nvl (part_type, '-1') = decode (upper (product_name), 'BT CPE', 'Bundle', nvl (part_type, '-1') )
              --for BT Cpe only part type called Bundle has to be picked up
            AND active                     = pkg_constants.con_activeflag_yes
            AND upper (fallback_type)      = upper (in_pricing (i).o_fallback);

          IF (in_pricing (i).o_costtype IS NOT NULL) THEN
            INSERT
            INTO cost_detail_as_is
              (
                cost_detail_id,
                price_line_item_detail_id,
                cost_type,
                COST,
                currency,
                created_by,
                created_date
              )
              (SELECT cost_detail_id.nextval,
                  price_line_item_detail_id,
                  in_pricing (i).o_costtype,
                  in_pricing (i).o_cost,
                  in_pricing (i).o_costcur,
                  in_createdby,
                  SYSDATE ()
                FROM price_line_item_detail_as_is
                WHERE nvl(row_id,1) = nvl(in_pricing (i).o_row_id,1)
                AND price_line_item_id = v_priclinitmid/* fixed duplicate cost row getting saved.*/
                AND line_item_id   IN
                  ( SELECT DISTINCT line_item_id
                  FROM quote_line_item_as_is
                  WHERE quote_header_id     = in_quoteheaderid
                  AND ( site_id             = in_siteid
                  OR ( site_id             IS NULL
                  AND nvl (in_siteid, 0)    = 0 ) )
                  AND quote_site_service_id = v_quote_site_service_id
                  AND nvl (part_type, '-1') = decode (upper (product_name), 'BT CPE', 'Bundle', nvl (part_type, '-1') )
                    --for BT Cpe only part type called Bundle has to be picked up
                  AND upper (product_name)  = upper (in_pricing (i).o_prodname )
                  AND active                = pkg_constants.con_activeflag_yes
                  AND upper (fallback_type) = upper (in_pricing (i).o_fallback )
                  )
              );
          END IF;
        END IF;
        /* Non Std changes starts here   */
        UPDATE price_line_item_detail_as_is
        SET active               = pkg_constants.con_activeflag_no,
          modified_by            = in_createdby,
          modified_date          = SYSDATE ()
        WHERE price_line_item_id = v_priclinitmid
        AND (upper(ptp_eup)             =upper(in_pricing (i).o_ptp_eup)
        OR ptp_eup              IS NULL) ---Change by suman
        AND line_item_id        IN
          ( SELECT DISTINCT line_item_id
          FROM quote_line_item_as_is
          WHERE quote_header_id     = in_quoteheaderid
          AND ( site_id             = in_siteid
          OR ( site_id             IS NULL
          AND nvl (in_siteid, 0)    = 0) )
          AND quote_site_service_id =v_quote_site_service_id
          AND nvl (part_type, '-1') = decode (upper (product_name), 'BT CPE', 'Bundle', nvl (part_type, '-1') )
            --for BT Cpe only part type called Bundle has to be picked up
          AND upper (product_name)  =upper (in_pricing (i).o_prodname)
          AND active                = pkg_constants.con_activeflag_no
          AND upper (fallback_type) =upper (in_pricing (i).o_fallback)
          );
        IF SQL%notfound THEN
          NULL;
        END IF;
        /* Non Std changes ends here   */
      ELSE
        --modified on 7/1/2010 to check for line_item_id
        UPDATE price_line_item_detail_as_is
        SET active               = pkg_constants.con_activeflag_no,
          modified_by            = in_createdby,
          modified_date          = SYSDATE ()
        WHERE price_line_item_id = v_priclinitmid
        AND (upper(ptp_eup)             =upper(in_pricing (i).o_ptp_eup)
        OR ptp_eup              IS NULL) ---Change by suman
        AND line_item_id        IN
          ( SELECT DISTINCT line_item_id
          FROM quote_line_item_as_is
          WHERE quote_header_id     = in_quoteheaderid
          AND ( site_id             = in_siteid
          OR (site_id              IS NULL
          AND nvl (in_siteid, 0)    = 0) )
          AND quote_site_service_id =v_quote_site_service_id
          AND nvl (part_type, '-1') = decode (upper (product_name), 'BT CPE', 'Bundle', nvl (part_type, '-1') )
            --for BT Cpe only part type called Bundle has to be picked up
          AND upper (product_name)  =upper (in_pricing (i).o_prodname)
          AND active                =pkg_constants.con_activeflag_yes
          AND upper (fallback_type) =upper (in_pricing (i).o_fallback)
          );

        IF (v_priclinitmid IS NOT NULL) THEN
          INSERT
          INTO price_line_item_detail_as_is
            (
              price_line_item_detail_id,
              price_line_item_id,
              price,
              currency,
              charge_type,
              external_qref,
              discount,
              discount_type,
              active,
              created_by,
              created_date,
              line_item_id,
              quantity,
              row_id ,
              line_item_detail_id,
              pln_inventory_id,
              net_price,
              ptp_eup,
              classic_element_id,
              classic_element_name,
              action_code,
              ppsr_price_line_id,
              ppsr_price_line_description ,
              discount_requested,
              discount_proposed,
              billing_id,             --Added for GHUCS R16 by KHADER
              billing_reference_name,--Added for GHUCS R16 by KHADER
              billing_start_date,    --Added for GHUCS R16 by KHADER
              billing_end_date       --Added for GHUCS R16 by KHADER
            )
            (SELECT price_line_item_detail_id.nextval,
                v_priclinitmid,
                in_pricing (i).o_price,
                in_pricing (i).o_currency,
                in_pricing (i).o_chargetype,
                in_pricing (i).o_extqref,
                in_pricing (i).o_discount,
                in_pricing (i).o_disctype,
                pkg_constants.con_activeflag_yes,
                in_createdby,
                SYSDATE (),
                line_item_id,
                in_pricing (i).o_quanty ,
                decode(in_pricing (i).o_row_id,0,NULL,in_pricing (i).o_row_id) ,
                in_pricing (i).o_line_item_detail_id ,
                in_pricing (i).o_pln_inventory_id,
                in_pricing (i).o_price,
                in_pricing (i).o_ptp_eup,----'EUP' Change by Suman
                in_pricing (i).o_classic_element_id,
                in_pricing (i).o_classic_element_name,
                v_default_action_code,
                in_pricing (i).ppsr_price_line_id,
                in_pricing (i).ppsr_price_line_description ,
                in_pricing (i).o_discount_requested ,
                in_pricing (i).o_discount_proposed,
                in_pricing (i).o_billing_id,          --Added for GHUCS R16 by KHADER
                in_pricing (i).o_billing_reference_name,   --Added for GHUCS R16 by KHADER
                in_pricing (i).o_billing_start_date,         --Added for GHUCS R16 by KHADER
                in_pricing (i).o_billing_end_date             --Added for GHUCS R16 by KHADER
              FROM quote_line_item_as_is
              WHERE quote_header_id  = in_quoteheaderid
              AND ( site_id          = in_siteid
              OR (site_id           IS NULL
              AND nvl (in_siteid, 0) = 0) )
                /*904 Order Site to Site SLA */
              AND quote_site_service_id = v_quote_site_service_id
              AND upper (product_name)  = upper (in_pricing (i).o_prodname)
              AND active                = pkg_constants.con_activeflag_yes
              AND nvl (part_type, '-1') = decode (upper (product_name), 'BT CPE', 'Bundle', nvl (part_type, '-1') )
                --for BT Cpe only part type called Bundle has to be picked up
              AND upper (fallback_type) = upper (in_pricing (i).o_fallback)
            );

          UPDATE quote_line_item_as_is
          SET priced             = pkg_constants.con_activeflag_yes
          WHERE quote_header_id  = in_quoteheaderid
          AND ( site_id          = in_siteid
          OR (site_id           IS NULL
          AND nvl (in_siteid, 0) = 0) )
          AND quote_site_service_id = v_quote_site_service_id
          AND upper (product_name)  = upper (in_pricing (i).o_prodname)
          AND nvl (part_type, '-1') = decode (upper (product_name), 'BT CPE', 'Bundle', nvl (part_type, '-1') )
            --for BT Cpe only part type called Bundle has to be picked up
          AND active                     = pkg_constants.con_activeflag_yes
          AND upper (fallback_type)      = upper (in_pricing (i).o_fallback);

          IF (in_pricing (i).o_costtype IS NOT NULL) THEN
            INSERT
            INTO cost_detail_as_is
              (
                cost_detail_id,
                price_line_item_detail_id,
                cost_type,
                COST,
                currency,
                created_by,
                created_date
              )
              (SELECT cost_detail_id.nextval,
                  price_line_item_detail_id,
                  in_pricing (i).o_costtype,
                  in_pricing (i).o_cost,
                  in_pricing (i).o_costcur,
                  in_createdby,
                  SYSDATE ()
                FROM price_line_item_detail_as_is
                WHERE nvl(row_id,1) = nvl(in_pricing (i).o_row_id,1)
                AND price_line_item_id = v_priclinitmid/* fixed duplicate cost row getting saved.*/
                AND line_item_id   IN
                  ( SELECT DISTINCT line_item_id
                  FROM quote_line_item_as_is
                  WHERE quote_header_id  = in_quoteheaderid
                  AND ( site_id          = in_siteid
                  OR ( site_id          IS NULL
                  AND nvl (in_siteid, 0) = 0 ) )
                  AND quote_site_service_id = v_quote_site_service_id
                  AND upper (product_name)  = upper (in_pricing (i).o_prodname )
                  AND active                = pkg_constants.con_activeflag_yes
                  AND nvl (part_type, '-1') = decode (upper (product_name), 'BT CPE', 'Bundle', nvl (part_type, '-1') )
                    --for BT Cpe only part type called Bundle has to be picked up
                  AND upper (fallback_type) = upper (in_pricing (i).o_fallback )
                  )
              );
          END IF;
        END IF;
      END IF;
    END loop;
  ELSE
    out_status := pkg_constants.con_status_failure;
    out_errmsg := 'Pricing array is empty in spi_pricing_modify_as_is';
    pkg_common.spi_error_log(NULL,in_quoteheaderid,in_siteid,in_servicename,
                   'PKG_LINEITEM','spi_pricing_modify_as_is',out_status,out_errmsg);
  END IF;
  out_status := pkg_constants.con_status_success;
exception
WHEN others THEN
  out_status := pkg_constants.con_status_failure;
  out_errmsg := sqlerrm;
  pkg_common.spi_error_log(NULL,in_quoteheaderid,in_siteid,in_servicename,
                   'PKG_LINEITEM','spi_pricing_modify_as_is',out_status,out_errmsg);
END;


   PROCEDURE spi_pricing_modify (
      --added on 25/06/2010 by Arpitha for Modify
      in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
      in_pricing         IN       pricing_tab,
      in_siteid          IN       line_item.site_id%TYPE,
      in_servicename     IN       quote_site_service.service_name%TYPE,
      in_createdby       IN       price_line_item_detail.created_by%TYPE,
      out_status         OUT      NUMBER,
      out_errmsg         OUT      VARCHAR2
   )
   AS
      v_priclinitmid            price_line_item_detail.price_line_item_id%TYPE;
      v_count                   NUMBER                                   := 0;
      v_lineitemid              line_item.line_item_id%TYPE;
      v_prlindetid              price_line_item_detail.price_line_item_detail_id%TYPE;
      v_quote_site_service_id   quote_site_service.quote_site_service_id%TYPE;
      v_default_action_code     varchar2(20) :='';
      v_order_type                 quote.order_type%type:='';
   BEGIN
      BEGIN
         SELECT quote_site_service_id
           INTO v_quote_site_service_id
           FROM quote_site_service
          WHERE quote_header_id = in_quoteheaderid
            AND (   site_id = in_siteid
                 OR (site_id IS NULL AND NVL (in_siteid, 0) = 0)
                )
            AND UPPER (service_name) = UPPER (in_servicename);
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            out_status := pkg_constants.con_status_failure;
            out_errmsg := 'error while searching for quote_site_service_id';
            RETURN;
      END;
      BEGIN
        SELECT NVL(bs.order_type,q.order_type)
            INTO v_order_type
        FROM quote_header qh,
            quote q            ,
            bundle_selection BS
            WHERE qh.quote_header_id = in_quoteheaderid
            AND q.quote_id         = qh.quote_id
            AND qh.quote_headeR_id = bs.quote_header_id(+);
        EXCEPTION
        WHEN no_data_found THEN
            out_errmsg            :='No data found for order type, Defaulting order type to Modify';
            v_order_type :='Modify';
        WHEN OTHERS THEN
            out_errmsg            :='error while searching for order type,  Defaulting order type to Modify';
            v_order_type :='Modify';
        END;

      /**Code written for defaulting action code for cease to'' and 'None' for other scenarios **/
      BEGIN
        SELECT DECODE(upper(NVL(bs.order_type,q.order_type)),'CEASE','','None')
            INTO v_default_action_code
        FROM quote_header qh,
            quote q            ,
            bundle_selection BS
            WHERE qh.quote_header_id = in_quoteheaderid
            AND q.quote_id         = qh.quote_id
            AND qh.quote_headeR_id = bs.quote_header_id(+);
        EXCEPTION
        WHEN no_data_found THEN
            out_errmsg            :='No data found for order type, defaulting action code to none';
            v_default_action_code :='None';
        WHEN OTHERS THEN
            out_errmsg            :='error while searching for order type, defaulting action code to none';
            v_default_action_code :='None';
        END;

      IF in_pricing.exists(1) then
      FOR i IN in_pricing.FIRST .. in_pricing.LAST
      LOOP
         Begin
               SELECT price_line_item_id
                 INTO v_priclinitmid
                 FROM price_line_item
                WHERE UPPER (price_line_description) =
                                              UPPER (in_pricing (i).o_pricelineitem);
          EXCEPTION
          WHEN NO_DATA_FOUND
          THEN
            out_status := pkg_constants.con_status_failure;
            out_errmsg := 'error while searching for price_line_item_id spi_pricing_modify - >'||UPPER (in_pricing (i).o_pricelineitem);
            RETURN;
          END;
         --modified on 7/1/2010 to check for line_item_id

         /* SELECT COUNT (*)
                    INTO v_count
                    FROM price_line_item_detail
                   WHERE price_line_item_id = v_priclinitmid
                     AND line_item_id IN (
                            SELECT DISTINCT line_item_id
                                       FROM line_item
                                      WHERE quote_header_id = in_quoteheaderid
                                        AND (   site_id = in_siteid
                                             OR (    site_id IS NULL

                                                 and NVL (in_siteid, 0) =
                                                                                      0
                                                )
                                            )           /*904 Order Site to Site SLA */
                                           /* AND quote_site_service_id = v_quote_site_service_id
                                        AND NVL (part_type, '-1') =
                                               DECODE (UPPER (product_name),
                                                       'BT CPE', 'Bundle',
                                                       NVL (part_type, '-1')
                                                      )
                                        --for BT Cpe only part type called Bundle has to be picked up
                                        AND UPPER (product_name) =
                                                      UPPER (in_pricing (i).o_prodname)
                                        AND active = pkg_constants.con_activeflag_yes
                                        AND UPPER (fallback_type) =
                                                      UPPER (in_pricing (i).o_fallback));

         --                               AND NVL (non_std_flag, -1) =
         --                                          NVL (in_pricing (i).o_nonstdflag,
         --                                               -1))
                     --AND NVL (row_id, -1) = NVL (in_pricing (i).o_rowid, -1);*/

                     -- IF condition added bt Sandeep for handling GHUCS pricing scenarios on 23-AUG-2010

         IF in_pricing (i).o_product_id = PKG_CONSTANTS.GHUCS_PRODUCT_KEY THEN
             SELECT COUNT (*)
               INTO v_count
               FROM price_line_item_detail_as_is plias,
                    line_item_detail ld
              WHERE plias.price_line_item_id  = v_priclinitmid
                AND plias.line_item_detail_id = ld.line_item_detail_id
                AND ld.line_item_detail_id  = in_pricing (i).o_line_item_detail_id
                AND plias.line_item_id        IN
                   (SELECT DISTINCT line_item_id
                      FROM line_item
                     WHERE quote_header_id       = in_quoteheaderid
                       AND (site_id              = in_siteid OR
                           (site_id  IS NULL AND
                             NVL (in_siteid, 0)  = 0))
                       AND UPPER (product_name)  = UPPER (in_pricing (i).o_prodname)
                       AND active                = pkg_constants.con_activeflag_yes
                       AND upper (fallback_type) = upper (in_pricing (i).o_fallback));

         ELSE
         SELECT COUNT (*)
           INTO v_count
           FROM price_line_item_detail pli
          WHERE pli.price_line_item_id = v_priclinitmid
            AND pli.line_item_id IN (
                   SELECT DISTINCT line_item_id
                              FROM line_item
                             WHERE quote_header_id = in_quoteheaderid
                               AND (   site_id = in_siteid
                                    OR (    site_id IS NULL
                                        AND NVL (in_siteid, 0) = 0
                                       )
                                   )           /*904 Order Site to Site SLA */
                               AND quote_site_service_id =
                                                       v_quote_site_service_id
                               AND NVL (part_type, '-1') =
                                      DECODE (UPPER (product_name),
                                              'BT CPE', 'Bundle',
                                              NVL (part_type, '-1')
                                             )
                               --for BT Cpe only part type called Bundle has to be picked up
                               AND UPPER (product_name) =
                                             UPPER (in_pricing (i).o_prodname)
                               AND active = pkg_constants.con_activeflag_yes
                               AND UPPER (fallback_type) =
                                             UPPER (in_pricing (i).o_fallback))

--                               AND NVL (non_std_flag, -1) =
--                                          NVL (in_pricing (i).o_nonstdflag,
--                                               -1))
            AND NVL (row_id, 1) = NVL (in_pricing (i).o_row_id, 1);
         END IF;

         IF (v_count = 0)
         THEN


            IF (v_priclinitmid IS NOT NULL)
            THEN
               INSERT INTO price_line_item_detail
                           (price_line_item_detail_id, price_line_item_id,
                            price, currency, charge_type, external_qref,
                            discount, discount_type, active, created_by,
                            created_date, line_item_id
                             /*Start: Added by Kadar for GHUCS MODIFY*/
                            ,quantity,row_id
                            ,line_item_detail_id,pln_inventory_id
                            /*End: Added by Kadar for GHUCS MODIFY*/
                            ,net_price,PTP_EUP,classic_element_id, classic_element_name,action_code,ppsr_price_line_id,ppsr_price_line_description,
                            billing_id,             --Added for GHUCS R16 by KHADER
                            billing_reference_name,--Added for GHUCS R16 by KHADER
                            billing_start_date,    --Added for GHUCS R16 by KHADER
                             billing_end_date       --Added for GHUCS R16 by KHADER
                            )
                  (SELECT price_line_item_detail_id.NEXTVAL, v_priclinitmid,
                          decode(upper(v_order_type),'CEASE',0.0,in_pricing (i).o_price),in_pricing (i).o_currency,
                          in_pricing (i).o_chargetype,
                          in_pricing (i).o_extqref,
                          in_pricing (i).o_discount,
                          in_pricing (i).o_disctype,
                          pkg_constants.con_activeflag_yes, in_createdby,
                          SYSDATE (), line_item_id
                          /*Start: Added by Kadar for GHUCS MODIFY*/
                          ,in_pricing (i).o_quanty
                          ,decode(in_pricing (i).o_Row_id,0,null,in_pricing (i).o_Row_id)
                          ,in_pricing (i).o_line_item_detail_id
                          ,in_pricing (i).o_pln_inventory_id
                         /*End: Added by Kadar for GHUCS MODIFY*/
                         ,in_pricing (i).o_price,'EUP',in_pricing (i).o_classic_element_id, in_pricing (i).o_classic_element_name,v_default_action_code,in_pricing (i).ppsr_price_line_id,in_pricing (i).ppsr_price_line_description,
                          in_pricing (i).o_billing_id,          --Added for GHUCS R16 by KHADER
                          in_pricing (i).o_billing_reference_name,   --Added for GHUCS R16 by KHADER
                          in_pricing (i).o_billing_start_date,         --Added for GHUCS R16 by KHADER
                          in_pricing (i).o_billing_end_date             --Added for GHUCS R16 by KHADER
                     FROM line_item
                    WHERE quote_header_id = in_quoteheaderid
                      AND (   site_id = in_siteid
                           OR (site_id IS NULL AND NVL (in_siteid, 0) = 0)
                          )                    /*904 Order Site to Site SLA */
                      AND quote_site_service_id = v_quote_site_service_id
                      AND UPPER (product_name) =
                                             UPPER (in_pricing (i).o_prodname)
                      AND active = pkg_constants.con_activeflag_yes
                      AND NVL (part_type, '-1') =
                             DECODE (UPPER (product_name),
                                     'BT CPE', 'Bundle',
                                     NVL (part_type, '-1')
                                    )
                      --for BT Cpe only part type called Bundle has to be picked up
                      AND UPPER (fallback_type) =
                                             UPPER (in_pricing (i).o_fallback)
--                      AND NVL (non_std_flag, -1) =
--                                          NVL (in_pricing (i).o_nonstdflag,
--                                               -1)
                    --  AND NVL (row_id, -1) = NVL (in_pricing (i).o_rowid, -1)
                  );

               UPDATE line_item
                  SET priced = pkg_constants.con_activeflag_yes
                WHERE quote_header_id = in_quoteheaderid
                  AND (   site_id = in_siteid
                       OR (site_id IS NULL AND NVL (in_siteid, 0) = 0)
                      )                        /*904 Order Site to Site SLA */
                  AND quote_site_service_id = v_quote_site_service_id
                  AND UPPER (product_name) = UPPER (in_pricing (i).o_prodname)
                  AND NVL (part_type, '-1') =
                         DECODE (UPPER (product_name),
                                 'BT CPE', 'Bundle',
                                 NVL (part_type, '-1')
                                )
                  --for BT Cpe only part type called Bundle has to be picked up
                  AND active = pkg_constants.con_activeflag_yes
                  AND UPPER (fallback_type) =
                                             UPPER (in_pricing (i).o_fallback);

--                  AND NVL (non_std_flag, -1) =
--                                          NVL (in_pricing (i).o_nonstdflag,
--                                               -1)
               --   AND NVL (row_id, -1) = NVL (in_pricing (i).o_rowid, -1);
               IF (in_pricing (i).o_costtype IS NOT NULL)
               THEN
                  INSERT INTO cost_detail
                              (cost_detail_id, price_line_item_detail_id,
                               cost_type, COST, currency, created_by,
                               created_date)
                     (SELECT cost_detail_id.NEXTVAL,
                             price_line_item_detail_id,
                             in_pricing (i).o_costtype,
                             in_pricing (i).o_cost, in_pricing (i).o_costcur,
                             in_createdby, SYSDATE ()
                        FROM price_line_item_detail
                       WHERE NVL(ROW_ID,1) = NVL(in_pricing (i).o_ROW_ID,1)
                          AND price_line_item_id = v_priclinitmid
                          AND active = pkg_constants.con_activeflag_yes
                          AND line_item_id IN (
                                SELECT DISTINCT line_item_id
                                           FROM line_item
                                          WHERE quote_header_id =
                                                             in_quoteheaderid
                                            AND (   site_id = in_siteid
                                                 OR (    site_id IS NULL
                                                     AND NVL (in_siteid, 0) =
                                                                             0
                                                    )
                                                )
                                            AND quote_site_service_id =
                                                       v_quote_site_service_id
                                            /*904 Order Site to Site SLA */
                                            AND NVL (part_type, '-1') =
                                                   DECODE
                                                         (UPPER (product_name),
                                                          'BT CPE', 'Bundle',
                                                          NVL (part_type,
                                                               '-1')
                                                         )
                                            --for BT Cpe only part type called Bundle has to be picked up
                                            AND UPPER (product_name) =
                                                   UPPER
                                                      (in_pricing (i).o_prodname
                                                      )
                                            AND active =
                                                   pkg_constants.con_activeflag_yes
                                            AND UPPER (fallback_type) =
                                                   UPPER
                                                      (in_pricing (i).o_fallback
                                                      )
--                                            AND NVL (non_std_flag, -1) =
--                                                   NVL
--                                                      (in_pricing (i).o_nonstdflag,
--                                                       -1
--                                                      )
--                                            AND NVL (row_id, -1) =
--                                                   NVL (in_pricing (i).o_rowid,
--                                                        -1
--                                                       )
                             ));
               END IF;
            END IF;

            /* Non Std changes starts here   */
            UPDATE price_line_item_detail
               SET active = pkg_constants.con_activeflag_no,
                   modified_by = in_createdby,
                   modified_date = SYSDATE ()
             WHERE price_line_item_id = v_priclinitmid
               AND line_item_id IN (
                      SELECT DISTINCT line_item_id
                                 FROM line_item
                                WHERE quote_header_id = in_quoteheaderid
                                  AND (   site_id = in_siteid
                                       OR (    site_id IS NULL
                                           AND NVL (in_siteid, 0) = 0
                                          )
                                      )        /*904 Order Site to Site SLA */
                                  AND quote_site_service_id =
                                                       v_quote_site_service_id
                                  AND NVL (part_type, '-1') =
                                         DECODE (UPPER (product_name),
                                                 'BT CPE', 'Bundle',
                                                 NVL (part_type, '-1')
                                                )
                                  --for BT Cpe only part type called Bundle has to be picked up
                                  AND UPPER (product_name) =
                                             UPPER (in_pricing (i).o_prodname)
                                  AND active = pkg_constants.con_activeflag_no
                                  AND UPPER (fallback_type) =
                                             UPPER (in_pricing (i).o_fallback)
--                                  AND NVL (non_std_flag, -1) <>
--                                          NVL (in_pricing (i).o_nonstdflag,
--                                               -1)
                   )
                   AND NVL (row_id, 1) = NVL (in_pricing (i).o_row_id,1);

            IF SQL%NOTFOUND
            THEN
               NULL;
            END IF;
         /* Non Std changes ends here   */
         ELSE
            --modified on 7/1/2010 to check for line_item_id
            UPDATE price_line_item_detail
               SET active = pkg_constants.con_activeflag_no,
                   modified_by = in_createdby,
                   modified_date = SYSDATE ()
             WHERE price_line_item_id = v_priclinitmid
               AND line_item_id IN (
                      SELECT DISTINCT line_item_id
                                 FROM line_item
                                WHERE quote_header_id = in_quoteheaderid
                                  AND (   site_id = in_siteid
                                       OR (    site_id IS NULL
                                           AND NVL (in_siteid, 0) = 0
                                          )
                                      )        /*904 Order Site to Site SLA */
                                  AND quote_site_service_id =
                                                       v_quote_site_service_id
                                  AND NVL (part_type, '-1') =
                                         DECODE (UPPER (product_name),
                                                 'BT CPE', 'Bundle',
                                                 NVL (part_type, '-1')
                                                )
                                  --for BT Cpe only part type called Bundle has to be picked up
                                  AND UPPER (product_name) =
                                             UPPER (in_pricing (i).o_prodname)
                                  AND active =
                                              pkg_constants.con_activeflag_yes
                                  AND UPPER (fallback_type) =
                                             UPPER (in_pricing (i).o_fallback)
--                                  AND NVL (non_std_flag, -1) =
--                                          NVL (in_pricing (i).o_nonstdflag,
--                                               -1)
--                                  AND NVL (row_id, -1) =
--                                               NVL (in_pricing (i).o_rowid,
--                                                    -1)
                   )
                   AND NVL (row_id, 1) = NVL (in_pricing (i).o_row_id,1);

            IF (v_priclinitmid IS NOT NULL)
            THEN
               INSERT INTO price_line_item_detail
                           (price_line_item_detail_id, price_line_item_id,
                            price, currency, charge_type, external_qref,
                            discount, discount_type, active, created_by,
                            created_date, line_item_id
                            /*Start: Added by Kadar for GHUCS MODIFY*/
                            ,quantity,row_id
                            ,line_item_detail_id,pln_inventory_id
                            /*End: Added by Kadar for GHUCS MODIFY*/
                            ,net_price,PTP_EUP,classic_element_id, classic_element_name,action_code,ppsr_price_line_id,ppsr_price_line_description,
                            billing_id,             --Added for GHUCS R16 by KHADER
                            billing_reference_name,--Added for GHUCS R16 by KHADER
                            billing_start_date,    --Added for GHUCS R16 by KHADER
                             billing_end_date       --Added for GHUCS R16 by KHADER
                            )
                  (SELECT price_line_item_detail_id.NEXTVAL, v_priclinitmid,
                          decode(upper(v_order_type),'CEASE',0.0,in_pricing (i).o_price), in_pricing (i).o_currency,
                          in_pricing (i).o_chargetype,
                          in_pricing (i).o_extqref,
                          in_pricing (i).o_discount,
                          in_pricing (i).o_disctype,
                          pkg_constants.con_activeflag_yes, in_createdby,
                          SYSDATE (), line_item_id
                          /*Start: Added by Kadar for GHUCS MODIFY*/
                          ,in_pricing (i).o_quanty
                          ,decode(in_pricing (i).o_Row_id,0,null,in_pricing (i).o_Row_id)
                          ,in_pricing (i).o_line_item_detail_id
                          ,in_pricing (i).o_pln_inventory_id
                          /*End: Added by Kadar for GHUCS MODIFY*/
                          ,in_pricing (i).o_price,'EUP',in_pricing (i).o_classic_element_id, in_pricing (i).o_classic_element_name,v_default_action_code,in_pricing (i).ppsr_price_line_id,in_pricing (i).ppsr_price_line_description,
                          in_pricing (i).o_billing_id,          --Added for GHUCS R16 by KHADER
                          in_pricing (i).o_billing_reference_name,   --Added for GHUCS R16 by KHADER
                          in_pricing (i).o_billing_start_date,         --Added for GHUCS R16 by KHADER
                          in_pricing (i).o_billing_end_date             --Added for GHUCS R16 by KHADER
                     FROM line_item
                    WHERE quote_header_id = in_quoteheaderid
                      AND (   site_id = in_siteid
                           OR (site_id IS NULL AND NVL (in_siteid, 0) = 0)
                          )                    /*904 Order Site to Site SLA */
                      AND quote_site_service_id = v_quote_site_service_id
                      AND UPPER (product_name) =
                                             UPPER (in_pricing (i).o_prodname)
                      AND active = pkg_constants.con_activeflag_yes
                      AND NVL (part_type, '-1') =
                             DECODE (UPPER (product_name),
                                     'BT CPE', 'Bundle',
                                     NVL (part_type, '-1')
                                    )
                      --for BT Cpe only part type called Bundle has to be picked up
                      AND UPPER (fallback_type) =
                                             UPPER (in_pricing (i).o_fallback)
--                      AND NVL (non_std_flag, -1) =
--                                          NVL (in_pricing (i).o_nonstdflag,
--                                               -1)
--                      AND NVL (row_id, -1) = NVL (in_pricing (i).o_rowid, -1)
                  );

               UPDATE line_item
                  SET priced = pkg_constants.con_activeflag_yes
                WHERE quote_header_id = in_quoteheaderid
                  AND (   site_id = in_siteid
                       OR (site_id IS NULL AND NVL (in_siteid, 0) = 0)
                      )                        /*904 Order Site to Site SLA */
                  AND quote_site_service_id = v_quote_site_service_id
                  AND UPPER (product_name) = UPPER (in_pricing (i).o_prodname)
                  AND NVL (part_type, '-1') =
                         DECODE (UPPER (product_name),
                                 'BT CPE', 'Bundle',
                                 NVL (part_type, '-1')
                                )
                  --for BT Cpe only part type called Bundle has to be picked up
                  AND active = pkg_constants.con_activeflag_yes
                  AND UPPER (fallback_type) =
                                             UPPER (in_pricing (i).o_fallback);

                  -- AND NVL(non_std_flag,-1) = NVL(v_non_std_flag,-1)
--                  AND NVL (row_id, -1) = NVL (in_pricing (i).o_rowid, -1);
               IF (in_pricing (i).o_costtype IS NOT NULL)
               THEN
                  INSERT INTO cost_detail
                              (cost_detail_id, price_line_item_detail_id,
                               cost_type, COST, currency, created_by,
                               created_date)
                     (SELECT cost_detail_id.NEXTVAL,
                             price_line_item_detail_id,
                             in_pricing (i).o_costtype,
                             in_pricing (i).o_cost, in_pricing (i).o_costcur,
                             in_createdby, SYSDATE ()
                        FROM price_line_item_detail
                       WHERE NVL (row_id, 1) = NVL (in_pricing (i).o_row_id,1)
                          AND price_line_item_id = v_priclinitmid
                          AND active = pkg_constants.con_activeflag_yes
                          AND line_item_id IN (
                                SELECT DISTINCT line_item_id
                                           FROM line_item
                                          WHERE quote_header_id =
                                                             in_quoteheaderid
                                            AND (   site_id = in_siteid
                                                 OR (    site_id IS NULL
                                                     AND NVL (in_siteid, 0) =
                                                                             0
                                                    )
                                                )
                                            /*904 Order Site to Site SLA */
                                            AND quote_site_service_id =
                                                       v_quote_site_service_id
                                            AND UPPER (product_name) =
                                                   UPPER
                                                      (in_pricing (i).o_prodname
                                                      )
                                            AND active =
                                                   pkg_constants.con_activeflag_yes
                                            AND NVL (part_type, '-1') =
                                                   DECODE
                                                         (UPPER (product_name),
                                                          'BT CPE', 'Bundle',
                                                          NVL (part_type,
                                                               '-1')
                                                         )
                                            --for BT Cpe only part type called Bundle has to be picked up
                                            AND UPPER (fallback_type) =
                                                   UPPER
                                                      (in_pricing (i).o_fallback
                                                      )
--                                            AND NVL (non_std_flag, -1) =
--                                                   NVL
--                                                      (in_pricing (i).o_nonstdflag,
--                                                       -1
--                                                      )
--                                            AND NVL (row_id, -1) =
--                                                   NVL (in_pricing (i).o_rowid,
--                                                        -1
--                                                       )
                             ));
               END IF;
            END IF;
         END IF;
      END LOOP;
      else
      out_status := pkg_constants.con_status_failure;
      out_errmsg := 'Pricing array is empty in spi_pricing_modify';
      end if;

--      END LOOP;
      out_status := pkg_constants.con_status_success;
   --  COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         out_errmsg := SQLERRM;
--         error_log (out_errmsg,
--                    in_quoteheaderid,
--                    in_siteid,
--                    in_pricelinitm,
--                    SYSDATE,
--                    in_createdby
--                   );
   -- ROLLBACK;
   END;

   PROCEDURE spi_pricing_to_be (
      --added on 25/06/2010 by Jay for Modify
      in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
      in_siteid          IN       line_item.site_id%TYPE,
      in_prodname        IN       line_item.product_name%TYPE,
      in_pricelinitm     IN       VARCHAR2,
      in_servicename     IN       quote_site_service.service_name%TYPE,
      in_createdby       IN       price_line_item_detail.created_by%TYPE,
      out_status         OUT      NUMBER,
      out_errmsg         OUT      VARCHAR2
   )
   AS
      CURSOR c_pricedet
      IS
         SELECT *
           FROM TABLE
                   (CAST
                       (pkg_common.fn_splitdata (in_pricelinitm, '~') AS varchar2_ntt
                       )
                   );

      v_priclinitmid            price_line_item_detail.price_line_item_id%TYPE;
      v_priclinitm              price_line_item.price_line_description%TYPE;
      v_price                   price_line_item_detail.price%TYPE;
      v_currency                price_line_item_detail.currency%TYPE;
      v_chargetype              price_line_item_detail.charge_type%TYPE;
      v_discount                price_line_item_detail.discount%TYPE;
      v_discounttype            price_line_item_detail.discount_type%TYPE;
      v_fallback                line_item.fallback_type%TYPE;
      v_cost                    cost_detail.COST%TYPE;
      v_costcur                 cost_detail.currency%TYPE;
      v_costtype                cost_detail.cost_type%TYPE;
      v_extqref                 price_line_item_detail.external_qref%TYPE;
      v_count                   NUMBER;
      v_lineitemid              line_item.line_item_id%TYPE;
      v_prlindetid              price_line_item_detail.price_line_item_detail_id%TYPE;
      v_quote_site_service_id   quote_site_service.quote_site_service_id%TYPE;
   --   v number;
      v_rowid           price_line_item_detail.row_id%TYPE;
      v_Str_Chk         Varchar2(10);
      v_netprice        price_line_item_detail.net_price%TYPE;
      V_PTP_EUP       price_line_item_detail.PTP_EUP%TYPE;   -- added by bijeta for PTP Price addition-
      v_ptp_eup_id     price_line_item_detail.ptp_eup_id%TYPE;
    v_action_code    price_line_item_detail.ACTION_CODE%TYPE;

      v_string   varchar2(32000)  ;
      V_DATA     VARCHAR2_NTT := VARCHAR2_NTT ();
      v_count1    NUMBER;
      V_LEN         NUMBER := 0;

   BEGIN
      -- v:=10;
      v_string   :=In_pricelinitm || '~';
      BEGIN
         SELECT quote_site_service_id
           INTO v_quote_site_service_id
           FROM quote_site_service
          WHERE quote_header_id = in_quoteheaderid
            AND (   site_id = in_siteid
                 OR (site_id IS NULL AND NVL (in_siteid, 0) = 0)
                )
            AND UPPER (service_name) = UPPER (in_servicename);
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            out_status := pkg_constants.con_status_failure;
            out_errmsg := 'error while searching for quote_site_service_id';
            RETURN;
      END;
      v_len := 1;
      LOOP
         EXIT WHEN V_STRING IS NULL;
         v_count1 := INSTR (v_string, '~');
         v_data.EXTEND;
         V_DATA (V_DATA.COUNT) :=
                            LTRIM (RTRIM (SUBSTR (v_string, 1, v_count1 - 1)));
         --v_string := SUBSTR (v_string, v_count + 1);
         v_string := SUBSTR (v_string, v_count1 + (v_len));
      END LOOP;

      FOR v_rowcnt IN ( SELECT * FROM TABLE  (CAST
                       ( v_data AS varchar2_ntt)
                   ))
      LOOP
        v_rowid := NULL;
        v_action_code :=null;

         SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                        1,
                        INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 1) - 1
                       )
           INTO v_priclinitm
           FROM DUAL;

         SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                        INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 1) + 1,
                        (  INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 2)
                         - INSTR (v_rowcnt.COLUMN_VALUE, '#', 1)
                         - 1
                        )
                       )
           INTO v_price
           FROM DUAL;

         SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                        INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 2) + 1,
                        (  INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 3)
                         - INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 2)
                         - 1
                        )
                       )
           INTO v_currency
           FROM DUAL;

          SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                        INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 3) + 1,
                        (  INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 4)
                         - INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 3)
                         - 1
                        )
                       )
           INTO v_chargetype
           FROM DUAL;

                   SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                        INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 4) + 1,
                        (  INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 5)
                         - INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 4)
                         - 1
                        )
                       )
           INTO v_discount
           FROM DUAL;

         SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                        INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 5) + 1,
                        (  INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 6)
                         - INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 5)
                         - 1
                        )
                       )
           INTO v_discounttype
           FROM DUAL;

         SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                        INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 6) + 1,
                        (  INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 7)
                         - INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 6)
                         - 1
                        )
                       )
           INTO v_fallback
           FROM DUAL;

         SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                        INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 7) + 1,
                        (  INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 8)
                         - INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 7)
                         - 1
                        )
                       )
           INTO v_cost
           FROM DUAL;

         SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                        INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 8) + 1,
                        (  INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 9)
                         - INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 8)
                         - 1
                        )
                       )
           INTO v_costtype
           FROM DUAL;

         SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                        INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 9) + 1,
                        (  INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 10)
                         - INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 9)
                         - 1
                        )
                       )
           INTO v_costcur
           FROM DUAL;

         /*SELECT (SUBSTR (v_rowcnt.COLUMN_VALUE,
                         INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 10) + 1,
                         LENGTH (v_rowcnt.COLUMN_VALUE) - 1
                        )
                )
           INTO v_extqref
           FROM DUAL;*/
               ---- added by bijeta for PTP Price addition-start  : the below script is moved from bottom
        ---Case condition to upward..
            SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                            INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 10) + 1,
                            (  INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 11)
                             - INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 10)
                             - 1
                            )
                           )
               INTO v_extqref
               FROM DUAL;
           -- added by bijeta for PTP Price addition-end
                     v_Str_Chk := Null;


        SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                        INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 11) + 1,
                        (  INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 12)
                         - INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 11)
                         - 1
                        )
                       )
           INTO v_ptp_eup
           FROM DUAL;

         -- added by bijeta for PTP Price addition-end
         v_str_chk := NULL;

         SELECT CASE
                   WHEN   LENGTH (v_rowcnt.COLUMN_VALUE)
                        - LENGTH (REPLACE (v_rowcnt.COLUMN_VALUE, '#')) = 12
                      --11
                THEN 1
                   ELSE 0
                END
           INTO v_str_chk
           FROM DUAL;

         -- added by bijeta for PTP Price addition-start
         IF v_str_chk = 0
         THEN
            DBMS_OUTPUT.put_line ('test');

              SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                           INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 12) + 1,
                           (  INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 13)
                            - INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 12)
                            - 1
                           )
                          )
              INTO v_ptp_eup_id
              FROM DUAL;

              IF LENGTH (v_rowcnt.COLUMN_VALUE) - LENGTH (REPLACE (v_rowcnt.COLUMN_VALUE, '#')) = 14 THEN

                    SELECT (SUBSTR (v_rowcnt.COLUMN_VALUE,
                              INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 14) + 1,
                              LENGTH (v_rowcnt.COLUMN_VALUE) - 1
                             )
                     )
                    INTO v_action_code
                    FROM DUAL;
              ELSE

                    SELECT (SUBSTR (v_rowcnt.COLUMN_VALUE,
                                  INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 13) + 1,
                                  LENGTH (v_rowcnt.COLUMN_VALUE) - 1
                                 )
                         )
                    INTO v_rowid
                    FROM DUAL;
              END IF;
         ELSE
            DBMS_OUTPUT.put_line ('test11');


            SELECT (SUBSTR (v_rowcnt.COLUMN_VALUE,
                            INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 12) + 1,
                            LENGTH (v_rowcnt.COLUMN_VALUE) - 1
                           )
                   )
              INTO v_ptp_eup_id
              FROM DUAL;
         -- added by bijeta for PTP Price addition-end-
         END IF;
         IF trim(v_action_code) is null then
            BEGIN
            SELECT decode(upper(nvl(bs.order_type,q.order_type)),'CEASE','','None')
            INTO v_action_code
            FROM quote_header qh,
                quote q ,
                bundle_selection bs
            WHERE qh.quote_header_id = in_quoteheaderid
            AND q.quote_id           = qh.quote_id
            AND qh.quote_header_id   = bs.quote_header_id(+);
            exception
            WHEN no_data_found THEN
            out_errmsg            :='No data found for order type, defaulting action code to none';
            v_action_code :='None';
            pkg_common.spi_error_log(NULL,in_quoteheaderid,in_siteid,in_servicename,
                   'PKG_LINEITEM','spi_pricing_modify_as_is',out_status,out_errmsg);
            WHEN others THEN
            out_errmsg            :='error while searching for order type, defaulting action code to none';
            v_action_code :='None';
            pkg_common.spi_error_log(NULL,in_quoteheaderid,in_siteid,in_servicename,
                    'PKG_LINEITEM','spi_pricing_modify_as_is',out_status,out_errmsg);
            END;
         END IF;



         begin
         SELECT price_line_item_id
           INTO v_priclinitmid
           FROM price_line_item
          WHERE UPPER (price_line_description) = UPPER (v_priclinitm);
         EXCEPTION when  no_data_found then
            out_status := pkg_constants.con_status_failure;
            out_errmsg := 'error while searching for price_line_item_id spi_pricing_to_be - >'||UPPER (v_priclinitm);
            RETURN;
         end;

         SELECT COUNT (*)
           INTO v_count
           FROM price_line_item_detail
          WHERE price_line_item_id = v_priclinitmid
            AND line_item_id IN (
                   SELECT DISTINCT line_item_id
                              FROM line_item
                             WHERE quote_header_id = in_quoteheaderid
                               AND (   site_id = in_siteid
                                    OR (    site_id IS NULL
                                        AND NVL (in_siteid, 0) = 0
                                       )
                                   )           /*904 Order Site to Site SLA */
                               AND quote_site_service_id =
                                                       v_quote_site_service_id
                               AND NVL (part_type, '-1') =
                                      DECODE (UPPER (product_name),
                                              'BT CPE', 'Bundle',
                                              NVL (part_type, '-1')
                                             )
                               --for BT Cpe only part type called Bundle has to be picked up
                               AND UPPER (product_name) = UPPER (in_prodname)
                               AND active = pkg_constants.con_activeflag_yes
                               AND UPPER (fallback_type) = UPPER (v_fallback))
            AND NVL(row_id,1) = NVL(v_rowid,1)
            AND NVL (ptp_eup, 'x') = NVL (v_ptp_eup, 'x');

         IF (v_count = 0)
         THEN
            IF (v_priclinitmid IS NOT NULL)
            THEN
               INSERT INTO price_line_item_detail
                           (price_line_item_detail_id, price_line_item_id,
                            price, currency, charge_type, external_qref,
                            discount, discount_type, active, created_by,
                            created_date, line_item_id,net_price,ptp_eup, ptp_eup_id,row_id,action_code)
                  (SELECT price_line_item_detail_id.NEXTVAL, v_priclinitmid,
                          v_price, v_currency, v_chargetype, v_extqref,
                          v_discount, v_discounttype,
                          pkg_constants.con_activeflag_yes, in_createdby,
                          SYSDATE (), line_item_id,v_price,
                          v_ptp_eup, v_ptp_eup_id,v_rowid,v_action_code
                     FROM line_item
                    WHERE quote_header_id = in_quoteheaderid
                      AND (   site_id = in_siteid
                           OR (site_id IS NULL AND NVL (in_siteid, 0) = 0)
                          )                    /*904 Order Site to Site SLA */
                      AND quote_site_service_id = v_quote_site_service_id
                      AND UPPER (product_name) = UPPER (in_prodname)
                      AND active = pkg_constants.con_activeflag_yes
                      AND NVL (part_type, '-1') =
                             DECODE (UPPER (product_name),
                                     'BT CPE', 'Bundle',
                                     NVL (part_type, '-1')
                                    )
                      --for BT Cpe only part type called Bundle has to be picked up
                      AND UPPER (fallback_type) = UPPER (v_fallback));

               UPDATE line_item
                  SET priced = pkg_constants.con_activeflag_yes
                WHERE quote_header_id = in_quoteheaderid
                  AND (   site_id = in_siteid
                       OR (site_id IS NULL AND NVL (in_siteid, 0) = 0)
                      )                        /*904 Order Site to Site SLA */
                  AND quote_site_service_id = v_quote_site_service_id
                  AND UPPER (product_name) = UPPER (in_prodname)
                  AND NVL (part_type, '-1') =
                         DECODE (UPPER (product_name),
                                 'BT CPE', 'Bundle',
                                 NVL (part_type, '-1')
                                )
                  --for BT Cpe only part type called Bundle has to be picked up
                  AND active = pkg_constants.con_activeflag_yes
                  AND UPPER (fallback_type) = UPPER (v_fallback);

               IF (v_costtype IS NOT NULL)
               THEN
                  INSERT INTO cost_detail
                              (cost_detail_id, price_line_item_detail_id,
                               cost_type, COST, currency, created_by,
                               created_date)
                     (SELECT cost_detail_id.NEXTVAL,
                             price_line_item_detail_id, v_costtype, v_cost,
                             v_costcur, in_createdby, SYSDATE ()
                        FROM price_line_item_detail
                       WHERE NVL(row_id,1) = NVL(v_rowid,1)
                       AND price_line_item_id = v_priclinitmid
                       AND active = pkg_constants.con_activeflag_yes
                       AND line_item_id IN (
                                SELECT DISTINCT line_item_id
                                           FROM line_item
                                          WHERE quote_header_id =
                                                             in_quoteheaderid
                                            AND (   site_id = in_siteid
                                                 OR (    site_id IS NULL
                                                     AND NVL (in_siteid, 0) =
                                                                             0
                                                    )
                                                )
                                            /*904 Order Site to Site SLA */
                                            AND quote_site_service_id =
                                                       v_quote_site_service_id
                                            AND NVL (part_type, '-1') =
                                                   DECODE
                                                         (UPPER (product_name),
                                                          'BT CPE', 'Bundle',
                                                          NVL (part_type,
                                                               '-1')
                                                         )
                                            --for BT Cpe only part type called Bundle has to be picked up
                                            AND UPPER (product_name) =
                                                           UPPER (in_prodname)
                                            AND active =
                                                   pkg_constants.con_activeflag_yes
                                            AND UPPER (fallback_type) =
                                                            UPPER (v_fallback)));
               END IF;
            END IF;
         ELSE
            --modified on 7/1/2010 to check for line_item_id
            UPDATE price_line_item_detail
               SET active = pkg_constants.con_activeflag_no,
                   modified_by = in_createdby,
                   modified_date = SYSDATE ()
             WHERE price_line_item_id = v_priclinitmid
               AND NVL(row_id,1) = NVL(v_rowid,1)
               AND NVL (ptp_eup, 'x') = NVL (v_ptp_eup, 'x')
               AND line_item_id IN (
                      SELECT DISTINCT line_item_id
                                 FROM line_item
                                WHERE quote_header_id = in_quoteheaderid
                                  AND (   site_id = in_siteid
                                       OR (    site_id IS NULL
                                           AND NVL (in_siteid, 0) = 0
                                          )
                                      )        /*904 Order Site to Site SLA */
                                  AND quote_site_service_id =
                                                       v_quote_site_service_id
                                  AND NVL (part_type, '-1') =
                                         DECODE (UPPER (product_name),
                                                 'BT CPE', 'Bundle',
                                                 NVL (part_type, '-1')
                                                )
                                  --for BT Cpe only part type called Bundle has to be picked up
                                  AND UPPER (product_name) =
                                                           UPPER (in_prodname)
                                  AND active =
                                              pkg_constants.con_activeflag_yes
                                  AND UPPER (fallback_type) =
                                                            UPPER (v_fallback));

            IF (v_priclinitmid IS NOT NULL)
            THEN
               INSERT INTO price_line_item_detail
                           (price_line_item_detail_id, price_line_item_id,
                            price, currency, charge_type, external_qref,
                            discount, discount_type, active, created_by,
                            created_date, line_item_id,net_price,ptp_eup,
                            ptp_eup_id,row_id,action_code)
                  (SELECT price_line_item_detail_id.NEXTVAL, v_priclinitmid,
                          v_price, v_currency, v_chargetype, v_extqref,
                          v_discount, v_discounttype,
                          pkg_constants.con_activeflag_yes, in_createdby,
                          SYSDATE (), line_item_id,v_price, v_ptp_eup,
                          v_ptp_eup_id,v_rowid,v_action_code
                     FROM line_item
                    WHERE quote_header_id = in_quoteheaderid
                      AND (   site_id = in_siteid
                           OR (site_id IS NULL AND NVL (in_siteid, 0) = 0)
                          )                    /*904 Order Site to Site SLA */
                      AND quote_site_service_id = v_quote_site_service_id
                      AND UPPER (product_name) = UPPER (in_prodname)
                      AND active = pkg_constants.con_activeflag_yes
                      AND NVL (part_type, '-1') =
                             DECODE (UPPER (product_name),
                                     'BT CPE', 'Bundle',
                                     NVL (part_type, '-1')
                                    )
                      --for BT Cpe only part type called Bundle has to be picked up
                      AND UPPER (fallback_type) = UPPER (v_fallback));

               UPDATE line_item
                  SET priced = pkg_constants.con_activeflag_yes
                WHERE quote_header_id = in_quoteheaderid
                  AND (   site_id = in_siteid
                       OR (site_id IS NULL AND NVL (in_siteid, 0) = 0)
                      )                        /*904 Order Site to Site SLA */
                  AND quote_site_service_id = v_quote_site_service_id
                  AND UPPER (product_name) = UPPER (in_prodname)
                  AND NVL (part_type, '-1') =
                         DECODE (UPPER (product_name),
                                 'BT CPE', 'Bundle',
                                 NVL (part_type, '-1')
                                )
                  --for BT Cpe only part type called Bundle has to be picked up
                  AND active = pkg_constants.con_activeflag_yes
                  AND UPPER (fallback_type) = UPPER (v_fallback);

               IF (v_costtype IS NOT NULL)
               THEN
                  INSERT INTO cost_detail
                              (cost_detail_id, price_line_item_detail_id,
                               cost_type, COST, currency, created_by,
                               created_date)
                     (SELECT cost_detail_id.NEXTVAL,
                             price_line_item_detail_id, v_costtype, v_cost,
                             v_costcur, in_createdby, SYSDATE ()
                        FROM price_line_item_detail
                       WHERE NVL(row_id,1) = NVL(v_rowid,1)
                       AND price_line_item_id = v_priclinitmid
                       AND active = pkg_constants.con_activeflag_yes
                       AND line_item_id IN (
                                SELECT DISTINCT line_item_id
                                           FROM line_item
                                          WHERE quote_header_id =
                                                             in_quoteheaderid
                                            AND (   site_id = in_siteid
                                                 OR (    site_id IS NULL
                                                     AND NVL (in_siteid, 0) =
                                                                             0
                                                    )
                                                )
                                            /*904 Order Site to Site SLA */
                                            AND quote_site_service_id =
                                                       v_quote_site_service_id
                                            AND UPPER (product_name) =
                                                           UPPER (in_prodname)
                                            AND active =
                                                   pkg_constants.con_activeflag_yes
                                            AND NVL (part_type, '-1') =
                                                   DECODE
                                                         (UPPER (product_name),
                                                          'BT CPE', 'Bundle',
                                                          NVL (part_type,
                                                               '-1')
                                                         )
                                            --for BT Cpe only part type called Bundle has to be picked up
                                            AND UPPER (fallback_type) =
                                                            UPPER (v_fallback)));
               END IF;
            END IF;
         END IF;
      END LOOP;
      out_status := pkg_constants.con_status_success;
   -- end;
   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         out_errmsg := SQLERRM;
   END;

--------------------------------Body-------------------
 --added on 13/07/2010  MX
     -- New Sp  start added to save Pricing using objects, MX
   PROCEDURE spi_pricing_obj (
      in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
      in_pricing         IN OUT   pricing_tab,
      in_siteid          IN       line_item.site_id%type,
      in_createdby       IN       price_line_item_detail.created_by%TYPE,
      in_check_box       IN       VARCHAR2,
      out_status         OUT      NUMBER,
      out_errmsg         OUT      VARCHAR2
   )
   AS
      v_priclinitmid   price_line_item_detail.price_line_item_id%TYPE;
      v_count          NUMBER :=0;
      v_lineitemid     line_item.line_item_id%TYPE;
      v_prlindetid     price_line_item_detail.price_line_item_detail_id%TYPE;
      v_quote_site_service_id   quote_site_service.quote_site_service_id%TYPE;
      v_quantity                price_line_item_detail.quantity%TYPE;
      v_error_location          INTEGER                                  := 0;
   -- Sandeep
      BEGIN

     /**********Delete functionality added for MX and in testing now (9th August 2010)***/
      IF UPPER (in_check_box) = UPPER ('YES')
      THEN
      FOR i IN in_pricing.FIRST .. in_pricing.LAST
      LOOP
        in_pricing (i).o_fallback := 'Primary';

        UPDATE price_line_item_detail
               SET active = pkg_constants.con_activeflag_no,
                   modified_by = in_createdby,
                   modified_date = SYSDATE ()
             WHERE line_item_id IN (
                      SELECT DISTINCT line_item_id
                                 FROM line_item
                                WHERE quote_header_id = in_quoteheaderid
                                  AND (   site_id = in_siteid
                                       OR (    site_id IS NULL
                                           AND NVL (in_siteid, 0) = 0
                                          )
                                      )
                                  AND UPPER (product_name) =
                                             UPPER (in_pricing (i).o_prodname)
                                  AND active =
                                              pkg_constants.con_activeflag_yes
                                  AND UPPER (fallback_type) =
                                             UPPER (in_pricing (i).o_fallback))
               AND active = pkg_constants.con_activeflag_yes
               AND (   (price_line_item_id BETWEEN 6000 AND 8259)   ----others
                    OR (price_line_item_id BETWEEN 841 AND 889)  -----tollfree
                    OR (price_line_item_id BETWEEN 589 AND 591
                       )                                        ------fistgrid
                    );
         END LOOP;
     END IF;

     /*************/
       FOR i IN in_pricing.FIRST .. in_pricing.LAST
      LOOP
      v_error_location := 10;

      /*Added By Sandeep for GHUCS R5*/
         IF (in_pricing (i).o_product_id = -1)
         THEN
           in_pricing (i).o_product_id := NULL;
       END IF;

      /*Added By Sandeep for GHUCS R5*/
         SELECT price_line_item_id
           INTO v_priclinitmid
           FROM price_line_item
          WHERE TRIM (UPPER (price_line_description)) =
                                 TRIM (UPPER (in_pricing (i).o_pricelineitem))
            AND (   product_id = in_pricing (i).o_product_id
                 OR in_pricing (i).o_product_id IS NULL
                );                            -- Added by Sandeep for GHUCS R5

       --Since Java cannot pass the site value as null from back end we change as -1 to null
       --Since there is no secondary for GHUCS and MX. Make sure to change it if used in IVPN and MPLS prods
         IF (in_pricing (i).o_siteid = -1)
         THEN
            in_pricing (i).o_siteid := NULL;
         END IF;
         IF (in_pricing (i).o_rent_price = -1)
         THEN
            in_pricing (i).o_rent_price := NULL;
         END IF;
         IF (in_pricing (i).o_line_item_detail_id = -1)
         THEN
            in_pricing (i).o_line_item_detail_id := NULL;
         END IF;
         IF (in_pricing (i).o_row_id = -1)
         THEN
            in_pricing (i).o_row_id := NULL;
         END IF;
        IF (in_pricing(i).o_ptp_eup_id =-1) THEN
             in_pricing (i).o_ptp_eup_id :=NULL;
         END IF;
         IF (in_pricing(i).o_pln_inventory_id =-1) THEN
             in_pricing (i).o_pln_inventory_id :=NULL;
         END IF;

         in_pricing (i).o_fallback := 'Primary';
         v_error_location :=20;
         -- IF condition added by Sandeep for handling GHUCS pricing scenarios on 23-AUG-2010
         IF in_pricing (i).o_product_id = pkg_constants.ghucs_product_key
         THEN
           SELECT COUNT (*)
             INTO v_count
              FROM price_line_item_detail pli, line_item_detail ld
            WHERE pli.price_line_item_id  = v_priclinitmid
              AND pli.line_item_detail_id = ld.line_item_detail_id
               AND ld.line_item_detail_id =
                                          in_pricing (i).o_line_item_detail_id
               AND pli.line_item_id IN (
                      SELECT DISTINCT line_item_id
                    FROM line_item
                   WHERE quote_header_id       = in_quoteheaderid
                     AND (   site_id = in_siteid
                                       OR (    site_id IS NULL
                                           AND NVL (in_siteid, 0) = 0
                                          )
                                      )
                                  AND UPPER (product_name) =
                                             UPPER (in_pricing (i).o_prodname)
                                  AND active =
                                              pkg_constants.con_activeflag_yes
                                  AND UPPER (fallback_type) =
                                             UPPER (in_pricing (i).o_fallback));
---------Checking the count with object site
           ELSIF IN_PRICING (I).O_SITEID IS NOT NULL   THEN
                 SELECT COUNT (*)
                       INTO v_count
                       FROM PRICE_LINE_ITEM_DETAIL PLI
                      WHERE pli.price_line_item_id = v_priclinitmid AND PLI.ACTIVE='Y'
                        AND pli.line_item_id        IN
                           (SELECT DISTINCT line_item_id
                              FROM line_item
                             WHERE quote_header_id     = in_quoteheaderid
                               AND site_id              = IN_PRICING (I).O_SITEID
                               AND NVL (part_type, '-1') = DECODE (UPPER (product_name), 'BT CPE', 'Bundle', NVL (part_type, '-1') )
                               AND UPPER (product_name)  = UPPER (in_pricing (i).o_prodname)
                               AND active                = pkg_constants.con_activeflag_yes
                               AND upper (fallback_type) = upper (in_pricing (i).o_fallback)
                            );
         ELSE
           SELECT COUNT (*)
           INTO v_count
           FROM PRICE_LINE_ITEM_DETAIL PLI
          WHERE pli.price_line_item_id = v_priclinitmid  AND Pli.ACTIVE=pkg_constants.con_activeflag_yes  ---SUMAN
            AND pli.line_item_id        IN
               (SELECT DISTINCT line_item_id
                  FROM line_item
                 WHERE quote_header_id     = in_quoteheaderid
                   AND ( site_id             = in_siteid
                    OR ( site_id             IS NULL
                   AND NVL (in_siteid, 0)    = 0))
                   AND NVL (part_type, '-1') = DECODE (UPPER (product_name), 'BT CPE', 'Bundle', NVL (part_type, '-1') )
                   AND UPPER (product_name)  = UPPER (in_pricing (i).o_prodname)
                   AND active                = pkg_constants.con_activeflag_yes
                   AND upper (fallback_type) = upper (in_pricing (i).o_fallback)
                );
         END IF;

         IF (v_count = 0)
         THEN
            IF (v_priclinitmid IS NOT NULL)
            THEN
    v_error_location := 30;

               INSERT INTO price_line_item_detail
                           (price_line_item_detail_id, price_line_item_id,
                            price, currency, charge_type, external_qref,
                            discount, discount_type, rent_price, active,
                            created_by,created_date, line_item_id, quantity,
                            line_item_detail_id,NET_PRICE,
                            PTP_EUP,
                           PTP_EUP_ID,
                           DISCOUNT_REQUESTED,
                           DISCOUNT_PROPOSED,
                           pln_inventory_id,  --Added for GHUCS R7 by Amit
                           billing_id,             --Added for GHUCS R16 by KHADER
                           billing_reference_name,--Added for GHUCS R16 by KHADER
                           billing_start_date,    --Added for GHUCS R16 by KHADER
                           billing_end_date       --Added for GHUCS R16 by KHADER
                            )
                  (SELECT price_line_item_detail_id.NEXTVAL, v_priclinitmid,
                          in_pricing (i).o_price, in_pricing (i).o_currency,
                          in_pricing (i).o_chargetype,
                          in_pricing (i).o_extqref,
                          in_pricing (i).o_discount,
                          in_pricing (i).o_disctype,
                          in_pricing (i).o_rent_price,
                          pkg_constants.con_activeflag_yes, in_createdby,
                          SYSDATE (), line_item_id, in_pricing (i).o_quanty,
                          in_pricing (i).o_line_item_detail_id,
                          IN_PRICING (I).o_netprice,
                          IN_PRICING (I).o_ptp_eup,
                         IN_PRICING (I).o_ptp_eup_id,
                         IN_PRICING(I).o_discount_requested,
                         IN_PRICING(I).o_discount_proposed,
                         in_pricing (i).o_pln_inventory_id, --Added for GHUCS R7 by Amit
                         in_pricing (i).o_billing_id,          --Added for GHUCS R16 by KHADER
                         in_pricing (i).o_billing_reference_name,   --Added for GHUCS R16 by KHADER
                         in_pricing (i).o_billing_start_date,         --Added for GHUCS R16 by KHADER
                         in_pricing (i).o_billing_end_date             --Added for GHUCS R16 by KHADER
                    FROM line_item
                    WHERE quote_header_id = in_quoteheaderid
                      AND ( site_id = in_siteid
                            OR (site_id IS NULL AND NVL (in_siteid, 0) = 0
                            OR SITE_ID=IN_PRICING (I).O_SITEID )
                          )
                      AND UPPER (product_name) =UPPER (in_pricing (i).o_prodname)
                      AND active = pkg_constants.con_activeflag_yes
                      AND NVL (part_type, '-1') =
                             DECODE (UPPER (product_name),
                                     'BT CPE', 'Bundle',
                                     NVL (part_type, '-1')
                                    )
                      AND UPPER (fallback_type) =UPPER (in_pricing (i).o_fallback)
                  );

       UPDATE line_item
                  SET priced = pkg_constants.con_activeflag_yes
                WHERE quote_header_id = in_quoteheaderid
                  AND (site_id = in_siteid
                       OR (site_id IS NULL
                           and NVL (in_siteid, 0) = 0 OR SITE_ID=IN_PRICING (I).O_SITEID
                          )
                      )
                  AND UPPER (product_name) = UPPER (in_pricing (i).o_prodname)
                  AND NVL (part_type, '-1') =
                         DECODE (UPPER (product_name),
                                 'BT CPE', 'Bundle',
                                 NVL (part_type, '-1')
                                )
                  AND active = pkg_constants.con_activeflag_yes
                  AND UPPER (fallback_type) = UPPER (in_pricing (i).o_fallback);


               /*Start : Added for GHUCS R5 by Amit on 6-Aug-2010*/
               UPDATE line_item_detail
                  SET priced_flag = pkg_constants.con_activeflag_yes
                WHERE line_item_detail_id = in_pricing (i).o_line_item_detail_id;
               /*End : Added for GHUCS R5 by Amit on 6-Aug-2010*/
               IF (in_pricing (i).o_costtype IS NOT NULL)
               THEN

                  INSERT INTO cost_detail
                              (cost_detail_id, price_line_item_detail_id,
                               cost_type, COST, currency, created_by,
                               created_date)
                     (SELECT cost_detail_id.NEXTVAL,
                             price_line_item_detail_id,
                             in_pricing (i).o_costtype,
                             in_pricing (i).o_cost, in_pricing (i).o_costcur,
                             in_createdby, SYSDATE ()
                        from PRICE_LINE_ITEM_DETAIL
                       WHERE price_line_item_id = v_priclinitmid
                        AND active = pkg_constants.con_activeflag_yes
                        and line_item_id IN (
                                SELECT DISTINCT line_item_id
                                           FROM line_item
                                          WHERE quote_header_id =
                                                             in_quoteheaderid
                                            AND (site_id = in_siteid
                                                 OR (    site_id IS NULL
                                                     and  NVL(in_siteid,0) = 0 OR SITE_ID=IN_PRICING (I).O_SITEID
                                                    )
                                                )
                                            /*904 Order Site to Site SLA */
                                            AND NVL (part_type, '-1') =
                                                   DECODE(UPPER (product_name),
                                                          'BT CPE', 'Bundle',
                                                          NVL (part_type,
                                                               '-1')
                                                         )
                                            AND UPPER (product_name) =
                                                   UPPER(in_pricing (i).o_prodname)
                                            AND active =
                                                   pkg_constants.con_activeflag_yes
                                            AND UPPER (fallback_type) =
                                                   UPPER(in_pricing (i).o_fallback)
                             ));
               END IF;
            End If;

            /* Non Std changes starts here   */

            UPDATE price_line_item_detail
               SET active = pkg_constants.con_activeflag_no,
                   modified_by = in_createdby,
                   modified_date = SYSDATE ()
             WHERE price_line_item_id = v_priclinitmid AND (PTP_EUP =IN_PRICING (I).o_ptp_eup OR PTP_EUP IS NULL)
               AND line_item_id IN (
                      SELECT DISTINCT line_item_id
                                 FROM line_item
                                WHERE quote_header_id = in_quoteheaderid
                                  AND (   site_id = in_siteid
                                       OR (    site_id IS NULL
                                  and NVL (in_siteid, 0) = 0) OR SITE_ID=IN_PRICING (I).O_SITEID)
                                  AND NVL (part_type, '-1') =
                                         DECODE (UPPER (product_name),
                                                 'BT CPE', 'Bundle',
                                                 NVL (part_type, '-1')
                                                )
                                  AND UPPER (product_name) =
                                             UPPER (in_pricing (i).o_prodname)
                                  AND active = pkg_constants.con_activeflag_no
                                  AND UPPER (fallback_type) =
                                             UPPER (in_pricing (i).o_fallback)
                   );

          /* Non Std changes ends here   */
         ELSE

            UPDATE price_line_item_detail
               SET active = pkg_constants.con_activeflag_no,
                   modified_by = in_createdby,
                   modified_date = SYSDATE ()
             WHERE price_line_item_id = v_priclinitmid  AND (PTP_EUP =IN_PRICING (I).o_ptp_eup OR PTP_EUP IS NULL)
               AND line_item_id IN (
                      SELECT DISTINCT line_item_id
                                 FROM line_item
                                WHERE quote_header_id = in_quoteheaderid
                                  AND (   site_id = in_siteid
                                       OR (    site_id IS NULL
                                               AND NVL (in_siteid,0) = 0 OR SITE_ID=IN_PRICING (I).O_SITEID
                                          )
                                      )
                                AND NVL (part_type, '-1') =
                                         DECODE (UPPER (product_name),
                                                 'BT CPE', 'Bundle',
                                                 NVL (part_type, '-1')
                                                )
                                  AND UPPER (product_name) =
                                             UPPER (in_pricing (i).o_prodname)
                                  AND active =
                                              pkg_constants.con_activeflag_yes
                                  AND UPPER (fallback_type) =
                                             UPPER (in_pricing (i).o_fallback)
                   );

            IF (v_priclinitmid IS NOT NULL)
            THEN

               INSERT INTO price_line_item_detail
                           (price_line_item_detail_id, price_line_item_id,
                            price, currency, charge_type, external_qref,
                            discount, discount_type,rent_price,active, created_by,          -- rent_price Added for GHUCS by Sandeep on 26-JUL-2010
                            CREATED_DATE, LINE_ITEM_ID,QUANTITY,
                            line_item_detail_id ,NET_PRICE,               --line_item_detail_id Added for GHUCS by  Amit for GHUCS R5
                            PTP_EUP,
                            PTP_EUP_ID,
                            DISCOUNT_REQUESTED,
                            DISCOUNT_PROPOSED,
                            pln_inventory_id,            --Added for GHUCS R7 by Amit
                            billing_id,             --Added for GHUCS R16 by KHADER
                            billing_reference_name,--Added for GHUCS R16 by KHADER
                            billing_start_date,    --Added for GHUCS R16 by KHADER
                            billing_end_date       --Added for GHUCS R16 by KHADER
                            )
                  (SELECT price_line_item_detail_id.NEXTVAL, v_priclinitmid,
                          in_pricing (i).o_price, in_pricing (i).o_currency,
                          in_pricing (i).o_chargetype,
                          in_pricing (i).o_extqref,
                          in_pricing (i).o_discount,
                          in_pricing (i).o_disctype,
                          in_pricing (i).o_rent_price,
                          PKG_CONSTANTS.CON_ACTIVEFLAG_YES, IN_CREATEDBY,
                          SYSDATE (), line_item_id,in_pricing (i).o_quanty,
                          IN_PRICING (I).O_LINE_ITEM_DETAIL_ID
                          ,IN_PRICING (I).o_netprice,
                          IN_PRICING (I).o_ptp_eup,
                          IN_PRICING (I).o_ptp_eup_id,
                          IN_PRICING(I).o_discount_requested,
                          IN_PRICING(I).o_discount_proposed,
                          in_pricing (i).o_pln_inventory_id,   --Added for GHUCS R7 by Amit
                          in_pricing (i).o_billing_id,          --Added for GHUCS R16 by KHADER
                          in_pricing (i).o_billing_reference_name,   --Added for GHUCS R16 by KHADER
                          in_pricing (i).o_billing_start_date,         --Added for GHUCS R16 by KHADER
                          in_pricing (i).o_billing_end_date             --Added for GHUCS R16 by KHADER
                     FROM line_item
                    WHERE quote_header_id = in_quoteheaderid
                      AND (   site_id = in_siteid
                           OR (    site_id IS NULL
                               AND NVL (in_siteid, 0) = 0 OR SITE_ID=IN_PRICING (I).O_SITEID
                              )
                          )
                      and UPPER (product_name) =
                                             UPPER (in_pricing (i).o_prodname)
                      AND active = pkg_constants.con_activeflag_yes
                      AND NVL (part_type, '-1') =
                             DECODE (UPPER (product_name),
                                     'BT CPE', 'Bundle',
                                     NVL (part_type, '-1')
                                    )
                      AND UPPER (fallback_type) =
                                             UPPER (in_pricing (i).o_fallback)

                  );

               UPDATE line_item
                  SET priced = pkg_constants.con_activeflag_yes
                WHERE quote_header_id = in_quoteheaderid
                  AND (   site_id = in_siteid
                       OR (    site_id IS NULL
                           AND NVL (in_siteid, 0) = 0  OR SITE_ID=IN_PRICING (I).O_SITEID
                          )
                      )                        /*904 Order Site to Site SLA */
                  and UPPER (product_name) = UPPER (in_pricing (i).o_prodname)
                  AND NVL (part_type, '-1') =
                         DECODE (UPPER (product_name),
                                 'BT CPE', 'Bundle',
                                 NVL (part_type, '-1')
                                )
                  --for BT Cpe only part type called Bundle has to be picked up
                  AND active = pkg_constants.con_activeflag_yes
                  AND UPPER (fallback_type) =
                                             UPPER (in_pricing (i).o_fallback);


               /*Start : Added for GHUCS R5 by Amit on 6-Aug-2010*/
               UPDATE line_item_detail
                  SET priced_flag = pkg_constants.con_activeflag_yes
                WHERE line_item_detail_id = in_pricing (i).o_line_item_detail_id;
                /*End : Added for GHUCS R5 by Amit on 6-Aug-2010*/


               IF (in_pricing (i).o_costtype IS NOT NULL)
               THEN

                  INSERT INTO cost_detail
                              (cost_detail_id, price_line_item_detail_id,
                               cost_type, COST, currency, created_by,
                               created_date)
                     (SELECT cost_detail_id.NEXTVAL,
                             price_line_item_detail_id,
                             in_pricing (i).o_costtype,
                             in_pricing (i).o_cost, in_pricing (i).o_costcur,
                             in_createdby, SYSDATE ()
                        from PRICE_LINE_ITEM_DETAIL
                       WHERE price_line_item_id = v_priclinitmid
                       AND active = pkg_constants.con_activeflag_yes
                       AND line_item_id IN (
                                SELECT DISTINCT line_item_id
                                           FROM line_item
                                          WHERE quote_header_id =in_quoteheaderid
                                            AND (   site_id =in_siteid
                                                 OR (site_id IS NULL AND NVL
                                                            (in_siteid, 0) = 0 OR SITE_ID=IN_PRICING (I).O_SITEID
                                                    )
                                                )
                                            AND UPPER (product_name) =
                                                   UPPER(in_pricing (i).o_prodname)
                                            AND active = pkg_constants.con_activeflag_yes
                                            AND NVL (part_type, '-1') =
                                                   DECODE(UPPER (product_name),
                                                          'BT CPE', 'Bundle',
                                                          NVL (part_type,'-1')
                                                         )
                                            AND UPPER (fallback_type) =UPPER(in_pricing (i).o_fallback)
                        ));

               END IF;
            END IF;
         END IF;
     END LOOP;
     out_status := pkg_constants.con_status_success;

   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         OUT_ERRMSG := V_ERROR_LOCATION||' Location - '||SQLERRM;
         PKG_COMMON.SPI_ERROR_LOG(
                  IN_QUOTEHEADERID,
                  null,
                  IN_SITEID,
                  null,
                 'PKG_LINEITEM.spi_pricing_obj',
                 'SQE Err Line'||' '||V_ERROR_LOCATION,
                 out_status,out_errmsg);
   END;

-- New Sp end added to save Pricing using objects, MX

   /* Qref Reuse starts here */
   PROCEDURE sps_accessqrefreuse (
      in_quoteid             IN       quote.quote_id%TYPE,
      in_quoteheaderid       IN       quote_header.quote_header_id%TYPE,
      in_siteid              IN       site.site_id%TYPE,
      in_accesstech          IN       access_qref.access_technology%TYPE,
      in_accesstype          IN       access_qref.access_type%TYPE,
      in_accessspeed         IN       access_qref.access_speed%TYPE,
      in_resil               IN       access_qref.resiliency%TYPE,
      in_non_std_qref_flag   IN       access_qref.non_std_qref_flag%TYPE,
      in_customer_id         IN       quote.customer_id%TYPE,
      out_accessqref         OUT      sys_refcursor,
      out_caveat_details     OUT      sys_refcursor
   )
   AS
      v_kgiflag             NUMBER                          := 1;
      v_kgitype             VARCHAR2 (100);
      v_post_zip_code       address.post_zip_code%TYPE;
      v_addressline1        address.address_line1%TYPE;
      v_addrline2           address.address_line1%TYPE;
      v_telephoneareacode   site.telephone_area_code%TYPE;
      v_site                VARCHAR2 (100);
      v_country             VARCHAR2 (50);
      v_city                VARCHAR2 (50);
      v_rowcount            NUMBER;
   BEGIN
      OPEN out_accessqref FOR
         SELECT DISTINCT         --NVL (access_qref_id, 0) AS access_qref_id,
                         -- NVL (quote_site_id, 0) AS quote_site_id,
                         access_qref, pricing_status, access_speed, supplier,
                         lead_time, port_speed,
                         NVL (one_time_charge, 0) AS one_time_charge,
                         NVL (recurring_charge, 0) AS recurring_charge,

                         --  created_by,created_date, modified_by, modified_date, active,
                         NVL (port_speed_value, 0) AS port_speed_value,
                         port_uom,
                         NVL (access_speed_value, 0) AS access_speed_value,
                         access_uom, access_product_type, access_technology,
                         supplier_product_name, gpop_node, distance_gpop,
                         apop_node, distance_apop, NVL (term, 0) AS term,
                         leg_id, NVL (pair_id, 0) AS pair_id,
                         expiry_date_time_zone, tariff_zone_name,
                         NVL (no_of_copper_pairs, 0) AS no_of_copper_pairs,
                         circuit_interface, auto_priced_flag,
                         budgetary_priced_flag, interface_type,
                         framing_details, connector,
                         NVL (install_cost, 0) AS install_cost,
                         NVL (supplier_cost, 0) AS supplier_cost,
                         NVL (backhaul_cost, 0) AS backhaul_cost,
                         NVL (local_tail_cost, 0) AS local_tail_cost,
                         cost_access_currency, resiliency_flag, aq.comments,
                         nni_flag, support_24x7, sent_to_ape,
                         NVL (monthly_cost, 0) AS monthly_cost, access_type,
                         expiry_date, apop_flag, port_status, gpop_id,
                         apop_id, port_speed_avail_status,
                         NVL (method, 'N/A') AS method,
                         NVL
                            (aggregator_quote_line_id,
                             0
                            ) AS aggregator_quote_line_id,
                         NVL (encapsulation, 'N/A') AS encapsulation,
                         NVL (guaranteed_speed, 'N/A') AS guaranteed_speed,
                         time_to_deliver,
                         NVL (isp_addressing, 'N/A') AS isp_addressing,
                         NVL
                            (monthly_recurring_charge,
                             0
                            ) AS monthly_recurring_charge,
                         NVL (non_recurring_charge,
                              0) AS non_recurring_charge,
                         NVL (access_availability,
                              'N/A'
                             ) AS access_availability,
                         NVL (service_catagory, 'N/A') AS service_catagory,
                         other_service_notes,
                         NVL (additional_charges, 0) AS additional_charges,
                         tranaction_type, hvpn_access_technology, pricing_id,
                         service_id, copper_details, copper_service_id,
                         rfa_notes, NVL (mrc, 0) AS mrc, NVL (nrc, 0) AS nrc,
                         tarrif_zone, support_24_7, rfo_notes,
                         NVL (copper_pair, 0) AS copper_pair,
                         ethernet_phase_attribute, non_std_qref_flag,
                         network_type, partner_name, workflow_status,
                         ape_comments, staff_member_name, staff_member_email,
                         resiliency, qref_type, cease_charges, gpop,service_variant
                    FROM quote q INNER JOIN customer c
                         ON c.customer_id = q.customer_id
                         INNER JOIN quote_header qh
                         ON q.quote_id = qh.quote_id
                         LEFT OUTER JOIN quote_site qs
                         ON qh.quote_header_id = qs.quote_header_id
                         LEFT OUTER JOIN bt_subsidiary bt
                         ON c.bt_subsidiary_id = bt.bt_subsidiary_id
                         LEFT OUTER JOIN sales_channel sc
                         ON c.sales_channel_id = sc.sales_channel_id
                         LEFT OUTER JOIN site s ON c.customer_id =
                                                                s.customer_id
                         LEFT OUTER JOIN line_item lm
                         ON s.site_id = lm.site_id AND lm.active = 'Y'
                         -- AND lm.quote_header_id = in_quoteheaderid
                            --left outer JOIN line_item_detail ld
                            --ON lm.line_item_id = ld.line_item_id
                            --LEFT OUTER JOIN attribute_mapping am
                            --ON ld.attribute_mapping_id = am.attribute_mapping_id
                         LEFT OUTER JOIN access_qref aq
                         ON aq.quote_site_id = qs.quote_site_id
                   WHERE q.customer_id = in_customer_id
                     AND aq.active = 'Y'
                     AND EXISTS (
                            SELECT 1
                              FROM line_item_detail x
                             WHERE x.line_item_id = lm.line_item_id
                               AND x.attribute_mapping_id = 1
                               AND x.VALUE = in_resil
                               AND active = 'Y')
                     AND EXISTS (
                            SELECT 1
                              FROM line_item_detail x
                             WHERE x.line_item_id = lm.line_item_id
                               AND x.attribute_mapping_id = 3
                               AND x.VALUE = in_accesstech
                               AND active = 'Y')
                     AND EXISTS (
                            SELECT 1
                              FROM line_item_detail x
                             WHERE x.line_item_id = lm.line_item_id
                               AND x.attribute_mapping_id = 5
                               AND x.VALUE = in_accesstype
                               AND active = 'Y')
                     AND (   in_accessspeed IS NULL
                          OR EXISTS (
                                SELECT 1
                                  FROM line_item_detail x
                                 WHERE x.line_item_id = lm.line_item_id
                                   AND x.attribute_mapping_id = 7
                                   AND NVL (x.VALUE, 1) =
                                                       NVL (in_accessspeed, 1)
                                   AND active = 'Y')
                         )
                     AND UPPER (aq.pricing_status) = 'FIRM'
                     AND aq.non_std_qref_flag = in_non_std_qref_flag
                     AND TRUNC (NVL (expiry_date,
                                     TO_DATE ('21000101', 'YYYYMMDD')
                                    ),
                                'DD'
                               ) >= TRUNC (SYSDATE, 'DD');

           /* q.quote_id = in_quoteid
              AND qh.quote_header_id = in_quoteheaderid
              AND s.site_id = in_siteid*/
          --  AND aq.non_std_qref_flag = in_non_std_qref_flag
      /*and aq.resiliency = in_resil
      aq.access_technology=in_accesstech and
      aq.access_type = in_accesstype ;and
      aq.access_speed like '%in_accessspeed;*/

      ------------------------------------
      OPEN out_caveat_details FOR
         SELECT caveat_id AS "Caveat ID", description, caveated_on,
                ac.updated_on, aq.access_qref AS "Qref",
                ac.access_caveat "Access Caveat"
           FROM access_caveat ac, access_qref aq
          WHERE ac.access_qref_id = aq.access_qref_id
            AND ac.active = 'Y'
            AND aq.active = 'Y'
            AND aq.access_qref_id IN (
                   SELECT DISTINCT access_qref_id
                              FROM quote q INNER JOIN customer c
                                   ON c.customer_id = q.customer_id
                                   INNER JOIN quote_header qh
                                   ON q.quote_id = qh.quote_id
                                   LEFT OUTER JOIN quote_site qs
                                   ON qh.quote_header_id = qs.quote_header_id
                                   LEFT OUTER JOIN bt_subsidiary bt
                                   ON c.bt_subsidiary_id = bt.bt_subsidiary_id
                                   LEFT OUTER JOIN sales_channel sc
                                   ON c.sales_channel_id = sc.sales_channel_id
                                   LEFT OUTER JOIN site s
                                   ON c.customer_id = s.customer_id
                                   LEFT OUTER JOIN line_item lm
                                   ON s.site_id = lm.site_id
                                 AND lm.active = 'Y'
                                   LEFT OUTER JOIN access_qref aq
                                   ON aq.quote_site_id = qs.quote_site_id
                             WHERE q.customer_id = in_customer_id
                               AND aq.active = 'Y'
                               AND EXISTS (
                                      SELECT 1
                                        FROM line_item_detail x
                                       WHERE x.line_item_id = lm.line_item_id
                                         AND x.attribute_mapping_id = 1
                                         AND x.VALUE = in_resil
                                         AND active = 'Y')
                               AND EXISTS (
                                      SELECT 1
                                        FROM line_item_detail x
                                       WHERE x.line_item_id = lm.line_item_id
                                         AND x.attribute_mapping_id = 3
                                         AND x.VALUE = in_accesstech
                                         AND active = 'Y')
                               AND EXISTS (
                                      SELECT 1
                                        FROM line_item_detail x
                                       WHERE x.line_item_id = lm.line_item_id
                                         AND x.attribute_mapping_id = 5
                                         AND x.VALUE = in_accesstype
                                         AND active = 'Y')
                               AND (   in_accessspeed IS NULL
                                    OR EXISTS (
                                          SELECT 1
                                            FROM line_item_detail x
                                           WHERE x.line_item_id =
                                                               lm.line_item_id
                                             AND x.attribute_mapping_id = 7
                                             AND NVL (x.VALUE, 1) =
                                                       NVL (in_accessspeed, 1)
                                             AND active = 'Y')
                                   )
                               AND UPPER (aq.pricing_status) = 'FIRM'
                               AND aq.non_std_qref_flag = in_non_std_qref_flag
                               AND TRUNC (NVL (expiry_date,
                                               TO_DATE ('21000101',
                                                        'YYYYMMDD')
                                              ),
                                          'DD'
                                         ) >= TRUNC (SYSDATE, 'DD'));
------------------------------------

   /* Below code is for KGI check.Since KGI check is already done while creating site
   so no need to chk here but for future ref, code is written and commented*/
     /*    BEGIN
            SELECT DISTINCT s.NAME, cu.NAME, ad.city, ad.post_zip_code,
                            address_line1, s.telephone_area_code,
                            ad.address_line2
                       INTO v_site, v_country, v_city, v_post_zip_code,
                            v_addressline1, v_telephoneareacode,
                            v_addrline2
                       FROM quote q LEFT OUTER JOIN customer c
                            ON c.customer_id = q.customer_id
                            LEFT OUTER JOIN quote_header qh
                            ON q.quote_id = qh.quote_id
                            LEFT OUTER JOIN order_header oh
                            ON qh.quote_header_id = oh.quote_header_id
                            LEFT OUTER JOIN site s ON c.customer_id =
                                                                    s.customer_id
                            --      AND s.main_site_flag = 'Y'
                            LEFT OUTER JOIN address ad
                            ON ad.address_id = s.address_id
                            LEFT OUTER JOIN country cu
                            ON ad.country_id = cu.country_id
                      WHERE q.quote_id = in_quoteid AND s.site_id = in_siteid;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               NULL;
         END;

         SELECT COUNT (*)
           INTO v_rowcount
           FROM ppsr_owner.ppsr_kgi_data_v@dblink_ppsr
          WHERE UPPER (REPLACE ("Country", '''')) =
                                                UPPER (REPLACE (v_country, ''''));

         -- v_row := in_additionalsite;

         --kgi check
         IF (v_rowcount != 0)
         THEN
            BEGIN
   --            SELECT kgi_type
   --              INTO v_kgitype
   --              FROM kgi_country
   --             WHERE country_id = in_countryid;

               --kgi check from PPSR
               SELECT DISTINCT "Kgi Type"
                          INTO v_kgitype
                          FROM ppsr_owner.ppsr_kgi_data_v@dblink_ppsr
                         WHERE UPPER (REPLACE ("Country", '''')) =
                                                UPPER (REPLACE (v_country, ''''));

               IF (UPPER (v_kgitype) LIKE '%CITY%')
               THEN
                  BEGIN
                     IF (v_city IS NULL)
                     THEN
                        v_kgiflag := 0;
                     END IF;
                  END;
               END IF;

               IF (UPPER (v_kgitype) LIKE '%POST CODE%')
               THEN
                  BEGIN
                     IF (v_post_zip_code IS NULL)
                     THEN
                        v_kgiflag := 0;
                     END IF;
                  END;
               END IF;

               IF (   UPPER (v_kgitype) LIKE '%STREET NAME%'
                   OR UPPER (v_kgitype) LIKE '%STREET NUMBER%'
                  )
               THEN
                  BEGIN
                     IF (v_addressline1 IS NULL)
                     THEN
                        v_kgiflag := 0;
                     END IF;
                  END;
               END IF;

               IF (UPPER (v_kgitype) LIKE '%TELEPHONE AREA CODE%')
               THEN
                  BEGIN
                     IF (v_telephoneareacode IS NULL)
                     THEN
                        v_kgiflag := 0;
                     END IF;
                  END;
               END IF;

               IF (UPPER (v_kgitype) LIKE '%DISTRICT%')
               THEN
                  BEGIN
                     IF (v_addrline2 IS NULL)
                     THEN
                        v_kgiflag := 0;
                     END IF;
                  END;
               END IF;
            END;
         END IF;

         IF (v_kgiflag = 0)
         THEN
            BEGIN
               NULL;
            -- out_status := pkg_constants.con_status_failure;
            -- out_errmsg := 'KGI Error: ' || v_kgitype || ' is mandatory';
            END;
         END IF;*/ -- KGI chk ends here
   END sps_accessqrefreuse;

/* Qref Reuse ends here */
   PROCEDURE spi_cpeqref (
      in_quoteheaderid          IN       quote_header.quote_header_id%TYPE,
      in_siteid                 IN       site.site_id%TYPE,
      -- in_cpeqref          IN       cpe_qref.cpe_qref%TYPE,
      in_cpeqref_pri            IN       cpe_qref.cpe_qref%TYPE,
      -- in_cpeqref_sec      IN       cpe_qref.cpe_qref%TYPE,--need to disable this
      in_psuppliername          IN       cpe_qref.pri_supplier_name%TYPE,
      in_pstatus                IN       cpe_qref.pri_status%TYPE,
      in_ponetimechrg           IN       cpe_qref.pri_one_time_charge%TYPE,
      in_precurringchrg         IN       cpe_qref.pri_recurring_charge%TYPE,
      in_ssuppliername          IN       cpe_qref.sec_supplier_name%TYPE,
      in_sstatus                IN       cpe_qref.sec_status%TYPE,
      in_sonetimechrg           IN       cpe_qref.sec_one_time_charge%TYPE,
      in_srecurringchrg         IN       cpe_qref.sec_recurring_charge%TYPE,
      in_scpeqref               IN       cpe_qref.secondary_cpe_qref%TYPE,
      in_expdate                IN       VARCHAR2,
      --cpe_qref.expiry_date%TYPE,
      in_leadtime               IN       cpe_qref.cpe_lead_time%TYPE,
      in_leadtimestatus         IN       cpe_qref.cpe_lead_time_status%TYPE,
      in_comments               IN       cpe_qref.comments%TYPE,
      in_pri_ssp_bid_ref_no     IN       cpe_qref.pri_ssp_bid_ref_no%TYPE,
      in_sec_ssp_bid_ref_no     IN       cpe_qref.sec_ssp_bid_ref_no%TYPE,
      in_pri_offer_valid_date   IN       cpe_qref.pri_offer_valid_date%TYPE,
      in_sec_offer_valid_date   IN       cpe_qref.sec_offer_valid_date%TYPE,
      in_caveats                IN       VARCHAR2,
      in_createdby              IN       cpe_qref.created_by%TYPE,
      in_pri_Cease_Charges      IN       cpe_qref.pri_Cease_Charges%TYPE,
      in_pri_Additional_Charges IN       cpe_qref.pri_Additional_Charges%TYPE,
      in_pri_Cease_Qref_ID      IN       cpe_qref.pri_Cease_Qref_ID%TYPE,
      in_pri_Cease_SUPPLIER_NAME  IN       cpe_qref.pri_Cease_SUPPLIER_NAME%TYPE,
      in_sec_Cease_Charges      IN       cpe_qref.sec_Cease_Charges%TYPE,
      in_sec_Additional_Charges IN       cpe_qref.sec_Additional_Charges%TYPE,
      in_sec_Cease_Qref_ID      IN       cpe_qref.sec_Cease_Qref_ID%TYPE,
      in_sec_Cease_SUPPLIER_NAME  IN       cpe_qref.sec_Cease_SUPPLIER_NAME%TYPE,
      out_status                OUT      NUMBER,
      out_errmsg                OUT      VARCHAR2
   )
   AS
      CURSOR c_caveats
      IS
         SELECT *
           FROM TABLE
                    (CAST (pkg_common.fn_splitdata (in_caveats, '~') AS varchar2_ntt
                          )
                    );

      v_caveat        cpe_caveat.cpe_caveat%TYPE;
      v_cavedesc      cpe_caveat.description%TYPE;
      v_cpeqrefid     cpe_qref.cpe_qref_id%TYPE;
      /* v_cpeqrefid_pri   cpe_qref.cpe_qref_id%TYPE;
        v_cpeqrefid_sec  cpe_qref.cpe_qref_id%TYPE;*/
      v_caveats       VARCHAR2 (2000);
      v_quotesiteid   quote_site.quote_site_id%TYPE;
   BEGIN
      SELECT quote_site_id
        INTO v_quotesiteid
        FROM quote_site
       WHERE site_id = in_siteid
         AND quote_header_id = in_quoteheaderid
         AND active = 'Y';

      INSERT INTO cpe_qref
                  (cpe_qref_id, quote_site_id, cpe_qref,
                   pri_supplier_name, pri_status, pri_one_time_charge,
                   pri_recurring_charge, sec_supplier_name, sec_status,
                   sec_one_time_charge, sec_recurring_charge,
                   secondary_cpe_qref, expiry_date,
                   cpe_lead_time, cpe_lead_time_status, comments,
                   pri_ssp_bid_ref_no, sec_ssp_bid_ref_no,
                   pri_offer_valid_date, sec_offer_valid_date,
                   created_by, created_date,
                   pri_Cease_Charges, pri_Additional_Charges, pri_Cease_Qref_ID, pri_Cease_SUPPLIER_NAME,
                   sec_Cease_Charges, sec_Additional_Charges, sec_Cease_Qref_ID, sec_Cease_SUPPLIER_NAME
                  )
           VALUES (cpe_qref_id.NEXTVAL, v_quotesiteid, in_cpeqref_pri,
                   in_psuppliername, in_pstatus, in_ponetimechrg,
                   in_precurringchrg, in_ssuppliername, in_sstatus,
                   in_sonetimechrg, in_srecurringchrg,
                   in_scpeqref, TO_DATE (in_expdate, 'dd/mon/yyyy'),
                   in_leadtime, in_leadtimestatus, in_comments,
                   in_pri_ssp_bid_ref_no, in_sec_ssp_bid_ref_no,
                   in_pri_offer_valid_date, in_sec_offer_valid_date,
                   in_createdby, SYSDATE,
                   in_pri_Cease_Charges, in_pri_Additional_Charges, in_pri_Cease_Qref_ID, in_pri_Cease_SUPPLIER_NAME,
                   in_sec_Cease_Charges, in_sec_Additional_Charges, in_sec_Cease_Qref_ID, in_sec_Cease_SUPPLIER_NAME
                  )
        RETURNING cpe_qref_id
             INTO v_cpeqrefid;

      IF (in_caveats IS NOT NULL)
      THEN
         BEGIN
            OPEN c_caveats;

            LOOP
               FETCH c_caveats
                INTO v_caveats;

               EXIT WHEN c_caveats%NOTFOUND;
               v_caveat := SUBSTR (v_caveats, 1, INSTR (v_caveats, '|||') - 1);
               v_cavedesc :=
                  SUBSTR (v_caveats,
                          INSTR (v_caveats, '|||') + 3,
                          LENGTH (v_caveats)
                         );

--      DBMS_OUTPUT.PUT_LINE ( 'v_caveat is : ' || v_caveat);
--      DBMS_OUTPUT.PUT_LINE ( 'v_cavedesc is : ' || v_cavedesc);
               INSERT INTO cpe_caveat
                           (cpe_caveat_id, cpe_caveat, description,
                            cpe_qref_id, active, created_by, created_date
                           )
                    VALUES (cpe_caveat_id.NEXTVAL, v_caveat, v_cavedesc,
                            v_cpeqrefid, 'Y', in_createdby, SYSDATE
                           );
            END LOOP;

            CLOSE c_caveats;
         END;
      END IF;

      out_status := pkg_constants.con_status_success;
      /*COMMIT; commented by Jay */
   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         out_errmsg := SQLERRM;
         /*ROLLBACK; Commented by Jay */
   END;

   PROCEDURE spd_access_qref_as_is (
      in_quoteheaderid   IN       quote_site.quote_header_id%TYPE,
      in_siteid          IN       quote_site.quote_site_id%TYPE,
      in_non_std_flag    IN       access_qref.non_std_qref_flag%TYPE,
      in_modifiedby      IN       access_qref.modified_by%TYPE,
      out_status         OUT      NUMBER,
      out_errmsg         OUT      VARCHAR2
   )
   AS
      v_quotesiteid   quote_site.quote_site_id%TYPE;
   BEGIN
      SELECT quote_site_id
        INTO v_quotesiteid
        FROM quote_site
       WHERE quote_header_id = in_quoteheaderid
         AND site_id = in_siteid
         AND active = pkg_constants.con_activeflag_yes;

      DELETE FROM access_qref_as_is
            WHERE quote_site_id = v_quotesiteid
              AND non_std_qref_flag = in_non_std_flag;

      IF SQL%NOTFOUND
      THEN
         NULL;
      END IF;

      out_status := pkg_constants.con_status_success;
   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         out_errmsg := SQLERRM;
         /*ROLLBACK; commented by Jay*/
   END;

   PROCEDURE spi_accessqref_as_is (
      in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
      in_siteid          IN       site.site_id%TYPE,
      in_param           IN       CLOB,
      in_createdby       IN       access_qref.created_by%TYPE,
      in_non_std_qref_flag   IN       access_qref.non_std_qref_flag%TYPE,
      out_status         OUT      NUMBER,
      out_errmsg         OUT      VARCHAR2
   )
   AS
      atval           mytabletypess;
      colname         mytabletypess;
      vallist         VARCHAR2 (4000)                 := '';
      paramset        VARCHAR2 (20000)                := '';
      paramsubset     VARCHAR2 (20000)                := '';
      insertstmt      VARCHAR2 (1000)          := 'INSERT INTO ACCESS_QREF_AS_IS (';
      insertstmt1     VARCHAR2 (4000)                 := 'VALUES (';
      v_quotesiteid   quote_site.quote_site_id%TYPE;
      v_accessqref    VARCHAR2 (10000)                := '';
      v_insert        VARCHAR2 (32000)                := '';
      v_qref_cnt      NUMBER;
      insertstmt4     VARCHAR2 (4000)                 := '';
      insertstmt5     VARCHAR2 (4000)                 := '';
      cntr            NUMBER                          := 0;
      v_aqrefid       VARCHAR2 (2000);
      v_count           number:=0;
   BEGIN
      -- :: separator between column name and column value
      -- ## separator between 2 column name - value pair
      -- ~  row delimiter
      paramset := in_param || '~';
      select count(1) into v_count FROM quote_site
       WHERE site_id = in_siteid
         AND quote_header_id = in_quoteheaderid
         AND active = 'Y';

      SELECT quote_site_id
        INTO v_quotesiteid
        FROM quote_site
       WHERE site_id = in_siteid
         AND quote_header_id = in_quoteheaderid
         AND active = 'Y';

      WHILE (LENGTH (paramset) > 0)
      LOOP
         cntr := cntr + 1;
         --dbms_output.PUT_LINE('cntr = ' || cntr);
         paramsubset := SUBSTR (paramset, 1, INSTR (paramset, '~') - 1);
         paramset :=
               SUBSTR (paramset, INSTR (paramset, '~') + 1,
                       LENGTH (paramset));

         SELECT columnname, VALUE
         BULK COLLECT INTO colname, atval
           FROM (SELECT SUBSTR (columnnames,
                                1,
                                INSTR (columnnames, '::') - 1
                               ) columnname,
                        SUBSTR (columnnames,
                                INSTR (columnnames, '::') + 2
                               ) VALUE
                   FROM (SELECT SUBSTR (COLUMN_VALUE, 1
                                                       --INSTR (COLUMN_VALUE, '~') + 1
                                ) columnnames
                           FROM TABLE
                                   (CAST
                                       (pkg_common.fn_splitdata (paramsubset,
                                                                 '##'
                                                                ) AS varchar2_ntt
                                       )
                                   )) x) z;

         FOR i IN atval.FIRST .. atval.LAST
         LOOP
            BEGIN
               insertstmt := insertstmt || colname (i) || ',';
               vallist := '''' || atval (i) || '''';

               IF (UPPER (colname (i)) = 'ACCESS_QREF_AS_IS')
               THEN
                  v_accessqref := atval (i);
               END IF;

               insertstmt1 := insertstmt1 || vallist || ',';
            END;
         END LOOP;

         /*SELECT access_qref_id INTO v_aqrefid
           FROM access_qref_as_is
          WHERE quote_site_id =
                   (SELECT quote_site_id
                      FROM quote_site
                     WHERE site_id = in_siteid
                       AND quote_header_id = in_quoteheaderid
                       AND active = pkg_constants.con_activeflag_yes)
            AND non_std_qref_flag = in_non_std_qref_flag;*/

         SELECT access_qref_id.NEXTVAL
           INTO v_aqrefid
           FROM DUAL;
         insertstmt4 :=
               SUBSTR (insertstmt, 1, LENGTH (insertstmt))
            || 'access_qref_id,quote_site_id,created_by,created_date,Active'
            || ')';
         insertstmt5 :=
               SUBSTR (insertstmt1, 1, LENGTH (insertstmt1))
            || v_aqrefid
            || ','
            || v_quotesiteid
            || ','
            || in_createdby
            || ','''
            || SYSDATE
            || ''','
            || '''Y'''
            || ')';
         -- DBMS_OUTPUT.put_line ('insertstmt4 ' || insertstmt4);
         --  DBMS_OUTPUT.put_line ('insertstmt5 ' || insertstmt5);
         v_insert := insertstmt4 || insertstmt5;
         DBMS_OUTPUT.put_line ('final insert ' || v_insert);

         EXECUTE IMMEDIATE (v_insert);

         atval.DELETE;                                 --Clear the collections
         colname.DELETE;                               --Clear the collections
         --collist := '';
         vallist := '';
         -- vallist1 := '';
         v_insert := '';
         insertstmt := 'INSERT INTO ACCESS_QREF_AS_IS (';
         insertstmt1 := 'VALUES (';
      END LOOP;

      out_status := pkg_constants.con_status_success;
   EXCEPTION
      WHEN OTHERS
      THEN

         out_status := pkg_constants.con_status_failure;
         out_errmsg := SQLERRM;
         /*ROLLBACK; commented by Jay*/
   END spi_accessqref_as_is;

   PROCEDURE sps_accessqref_as_is (
      in_quoteheaderid       IN       quote_header.quote_header_id%TYPE,
      in_siteid              IN       site.site_id%TYPE,
      in_non_std_qref_flag   IN       access_qref.non_std_qref_flag%TYPE,
      out_accessqref         OUT      sys_refcursor
   )
   AS
   BEGIN
      OPEN out_accessqref FOR
         SELECT access_qref_id, access_qref, pricing_status, supplier,
                lead_time, port_speed, port_status, port_speed_value,
                port_uom, one_time_charge, recurring_charge, access_speed,
                access_speed_value, access_uom, access_product_type,
                access_technology, supplier_product_name, gpop_node,
                distance_gpop, apop_node, distance_apop, term, leg_id,
                pair_id, expiry_date_time_zone, tariff_zone_name,
                no_of_copper_pairs, circuit_interface, auto_priced_flag,
                budgetary_priced_flag, interface_type, framing_details,
                connector, install_cost, supplier_cost, backhaul_cost,
                local_tail_cost, cost_access_currency, resiliency_flag,
                comments, nni_flag, support_24x7, sent_to_ape, monthly_cost,
                access_type, expiry_date, apop_flag,
                                                    /**** added the below items for HVPN  ****/
                                                    hvpn_access_technology,
                pricing_id, service_id, copper_details, copper_service_id,
                rfa_notes, mrc, nrc, other_service_notes, time_to_deliver,
                rfo_notes, method, aggregator_quote_line_id, encapsulation,
                guaranteed_speed, isp_addressing, access_availability,
                service_catagory, gpop_id, apop_id,
                                                   --Added for defect 70831 sprint23
                                                   copper_pair,
                ethernet_phase_attribute ,                     ---Added for R1
                network_type,partner_name, --Added for R5
                 -- For R5 ivpn2 - Single Site Price - BK start
                workflow_status, ape_comments, staff_member_name,
                staff_member_email,
                -- For R5 ivpn2 - Single Site Price - BK End
                                   qref_type, cease_charges,service_variant
           FROM access_qref_as_is
          WHERE quote_site_id =
                   (SELECT quote_site_id
                      FROM quote_site
                     WHERE site_id = in_siteid
                       AND quote_header_id = in_quoteheaderid
                       AND active = pkg_constants.con_activeflag_yes)
            AND non_std_qref_flag = in_non_std_qref_flag;
   END;

   PROCEDURE spi_pricing_for_reprice (
      in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
      in_siteid          IN       line_item.site_id%TYPE,
      in_prodname        IN       line_item.product_name%TYPE,
      in_pricelinitm     IN       VARCHAR2,
      in_createdby       IN       price_line_item_detail.created_by%TYPE,
      out_status         OUT      NUMBER,
      out_errmsg         OUT      VARCHAR2
   )
   AS
      CURSOR c_pricedet
      IS
         SELECT *
           FROM TABLE
                   (CAST
                       (pkg_common.fn_splitdata (in_pricelinitm, '~') AS varchar2_ntt
                       )
                   );

      v_priclinitmid   price_line_item_detail.price_line_item_id%TYPE;
      v_priclinitm     price_line_item.price_line_description%TYPE;
      v_price          price_line_item_detail.price%TYPE;
      v_currency       price_line_item_detail.currency%TYPE;
      v_chargetype     price_line_item_detail.charge_type%TYPE;
      v_discount       price_line_item_detail.discount%TYPE;
      v_discounttype   price_line_item_detail.discount_type%TYPE;
      v_fallback       line_item.fallback_type%TYPE;
      v_cost           cost_detail.COST%TYPE;
      v_costcur        cost_detail.currency%TYPE;
      v_costtype       cost_detail.cost_type%TYPE;
      v_extqref        price_line_item_detail.external_qref%TYPE;
      v_count          NUMBER;
      v_lineitemid     line_item.line_item_id%TYPE;
      v_prlindetid     price_line_item_detail.price_line_item_detail_id%TYPE;
      --   v number;
      v_rowid          price_line_item_detail.row_id%TYPE;
      v_str_chk        VARCHAR2 (10);
      v_netprice       price_line_item_detail.net_price%TYPE;
      v_apprvd_disc    price_line_item_detail.approved_disc%TYPE;
   BEGIN
      -- v:=10;
      FOR v_rowcnt IN c_pricedet
      LOOP
         DBMS_OUTPUT.put_line (v_rowcnt.COLUMN_VALUE);

         SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                        1,
                        INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 1) - 1
                       )
           INTO v_priclinitm
           FROM DUAL;

         SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                        INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 1) + 1,
                        (  INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 2)
                         - INSTR (v_rowcnt.COLUMN_VALUE, '#', 1)
                         - 1
                        )
                       )
           INTO v_price
           FROM DUAL;

         SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                        INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 2) + 1,
                        (  INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 3)
                         - INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 2)
                         - 1
                        )
                       )
           INTO v_currency
           FROM DUAL;

         SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                        INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 3) + 1,
                        (  INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 4)
                         - INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 3)
                         - 1
                        )
                       )
           INTO v_chargetype
           FROM DUAL;

         SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                        INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 4) + 1,
                        (  INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 5)
                         - INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 4)
                         - 1
                        )
                       )
           INTO v_discount
           FROM DUAL;

         SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                        INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 5) + 1,
                        (  INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 6)
                         - INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 5)
                         - 1
                        )
                       )
           INTO v_discounttype
           FROM DUAL;

         SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                        INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 6) + 1,
                        (  INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 7)
                         - INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 6)
                         - 1
                        )
                       )
           INTO v_fallback
           FROM DUAL;

         SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                        INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 7) + 1,
                        (  INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 8)
                         - INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 7)
                         - 1
                        )
                       )
           INTO v_cost
           FROM DUAL;

         SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                        INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 8) + 1,
                        (  INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 9)
                         - INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 8)
                         - 1
                        )
                       )
           INTO v_costtype
           FROM DUAL;

         SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                        INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 9) + 1,
                        (  INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 10)
                         - INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 9)
                         - 1
                        )
                       )
           INTO v_costcur
           FROM DUAL;

         SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                        INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 10) + 1,
                        (  INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 11)
                         - INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 10)
                         - 1
                        )
                       )
           INTO v_extqref
           FROM DUAL;

         /*v_Str_Chk := Null;
         Select
           Case
               When Length(v_rowcnt.COLUMN_VALUE) - Length(Replace(v_rowcnt.COLUMN_VALUE,'#')) = 11
               Then 1 Else 0 End INTO v_Str_Chk
         From Dual; */
         /*
         If v_Str_Chk = 0 Then
              SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                             INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 11) + 1,
                             (  INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 12)
                              - INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 11)
                              - 1
                             )
                            )
                INTO v_netprice
                FROM DUAL;

              SELECT (SUBSTR (v_rowcnt.COLUMN_VALUE,
                              INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 12) + 1,
                              LENGTH (v_rowcnt.COLUMN_VALUE) - 1
                             )
                     )
                INTO v_rowid
                FROM DUAL;
         Else */
         SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                        INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 11) + 1,
                        (  INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 12)
                         - INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 11)
                         - 1
                        )
                       )
           INTO v_netprice
           FROM DUAL;

         SELECT (SUBSTR (v_rowcnt.COLUMN_VALUE,
                         INSTR (v_rowcnt.COLUMN_VALUE, '#', 1, 12) + 1,
                         LENGTH (v_rowcnt.COLUMN_VALUE) - 1
                        )
                )
           INTO v_apprvd_disc
           FROM DUAL;

         /*END IF;*/
         SELECT price_line_item_id
           INTO v_priclinitmid
           FROM price_line_item
          WHERE UPPER (price_line_description) = UPPER (v_priclinitm);

         --modified on 7/1/2010 to check for line_item_id
         SELECT COUNT (*)
           INTO v_count
           FROM price_line_item_detail
          WHERE price_line_item_id = v_priclinitmid
            AND line_item_id IN (
                   SELECT DISTINCT line_item_id
                              FROM line_item
                             WHERE quote_header_id = in_quoteheaderid
                               AND (   site_id = in_siteid
                                    OR (    site_id IS NULL
                                        AND NVL (in_siteid, 0) = 0
                                       )
                                   )           /*904 Order Site to Site SLA */
                               AND NVL (part_type, '-1') =
                                      DECODE (UPPER (product_name),
                                              'BT CPE', 'Bundle',
                                              NVL (part_type, '-1')
                                             )
                               --for BT Cpe only part type called Bundle has to be picked up
                               AND UPPER (product_name) = UPPER (in_prodname)
                               AND active = pkg_constants.con_activeflag_yes
                               AND UPPER (fallback_type) = UPPER (v_fallback))
            AND NVL (row_id, 1) = NVL (v_rowid, 1);

         IF (v_count = 0)
         THEN
            IF (v_priclinitmid IS NOT NULL)
            THEN
               INSERT INTO price_line_item_detail
                           (price_line_item_detail_id, price_line_item_id,
                            price, currency, charge_type, external_qref,
                            discount, discount_type, active, created_by,
                            created_date, line_item_id, row_id, net_price,
                            approved_disc)
                  (SELECT price_line_item_detail_id.NEXTVAL, v_priclinitmid,
                          v_price, v_currency, v_chargetype, v_extqref,
                          v_discount, v_discounttype,
                          pkg_constants.con_activeflag_yes, in_createdby,
                          SYSDATE (), line_item_id, v_rowid, v_netprice,
                          v_apprvd_disc
                     FROM line_item
                    WHERE quote_header_id = in_quoteheaderid
                      AND (   site_id = in_siteid
                           OR (site_id IS NULL AND NVL (in_siteid, 0) = 0)
                          )                    /*904 Order Site to Site SLA */
                      AND UPPER (product_name) = UPPER (in_prodname)
                      AND active = pkg_constants.con_activeflag_yes
                      AND NVL (part_type, '-1') =
                             DECODE (UPPER (product_name),
                                     'BT CPE', 'Bundle',
                                     NVL (part_type, '-1')
                                    )
                      --for BT Cpe only part type called Bundle has to be picked up
                      AND UPPER (fallback_type) = UPPER (v_fallback));

               UPDATE line_item
                  SET priced = pkg_constants.con_activeflag_yes
                WHERE quote_header_id = in_quoteheaderid
                  AND (   site_id = in_siteid
                       OR (site_id IS NULL AND NVL (in_siteid, 0) = 0)
                      )                        /*904 Order Site to Site SLA */
                  AND UPPER (product_name) = UPPER (in_prodname)
                  AND NVL (part_type, '-1') =
                         DECODE (UPPER (product_name),
                                 'BT CPE', 'Bundle',
                                 NVL (part_type, '-1')
                                )
                  --for BT Cpe only part type called Bundle has to be picked up
                  AND active = pkg_constants.con_activeflag_yes
                  AND UPPER (fallback_type) = UPPER (v_fallback);

               IF (v_costtype IS NOT NULL)
               THEN
                  INSERT INTO cost_detail
                              (cost_detail_id, price_line_item_detail_id,
                               cost_type, COST, currency, created_by,
                               created_date)
                     (SELECT cost_detail_id.NEXTVAL,
                             price_line_item_detail_id, v_costtype, v_cost,
                             v_costcur, in_createdby, SYSDATE ()
                        FROM price_line_item_detail
                       WHERE NVL (row_id, 1) = NVL (v_rowid, 1)
                       AND price_line_item_id = v_priclinitmid
                       AND active = pkg_constants.con_activeflag_yes
                         AND line_item_id IN (
                                SELECT DISTINCT line_item_id
                                           FROM line_item
                                          WHERE quote_header_id =
                                                              in_quoteheaderid
                                            AND (   site_id = in_siteid
                                                 OR (    site_id IS NULL
                                                     AND NVL (in_siteid, 0) =
                                                                             0
                                                    )
                                                )
                                            /*904 Order Site to Site SLA */
                                            AND NVL (part_type, '-1') =
                                                   DECODE
                                                         (UPPER (product_name),
                                                          'BT CPE', 'Bundle',
                                                          NVL (part_type,
                                                               '-1')
                                                         )
                                            --for BT Cpe only part type called Bundle has to be picked up
                                            AND UPPER (product_name) =
                                                           UPPER (in_prodname)
                                            AND active =
                                                   pkg_constants.con_activeflag_yes
                                            AND UPPER (fallback_type) =
                                                            UPPER (v_fallback)));
               END IF;
            END IF;
         ELSE
            --modified on 7/1/2010 to check for line_item_id
            UPDATE price_line_item_detail
               SET active = pkg_constants.con_activeflag_no,
                   modified_by = in_createdby,
                   modified_date = SYSDATE ()
             WHERE price_line_item_id = v_priclinitmid
               AND NVL (row_id, 1) = NVL (v_rowid, 1)
               AND line_item_id IN (
                      SELECT DISTINCT line_item_id
                                 FROM line_item
                                WHERE quote_header_id = in_quoteheaderid
                                  AND (   site_id = in_siteid
                                       OR (    site_id IS NULL
                                           AND NVL (in_siteid, 0) = 0
                                          )
                                      )        /*904 Order Site to Site SLA */
                                  AND NVL (part_type, '-1') =
                                         DECODE (UPPER (product_name),
                                                 'BT CPE', 'Bundle',
                                                 NVL (part_type, '-1')
                                                )
                                  --for BT Cpe only part type called Bundle has to be picked up
                                  AND UPPER (product_name) =
                                                           UPPER (in_prodname)
                                  AND active =
                                              pkg_constants.con_activeflag_yes
                                  AND UPPER (fallback_type) =
                                                            UPPER (v_fallback));

            IF (v_priclinitmid IS NOT NULL)
            THEN
               INSERT INTO price_line_item_detail
                           (price_line_item_detail_id, price_line_item_id,
                            price, currency, charge_type, external_qref,
                            discount, discount_type, active, created_by,
                            created_date, line_item_id, row_id, net_price,
                            approved_disc)
                  (SELECT price_line_item_detail_id.NEXTVAL, v_priclinitmid,
                          v_price, v_currency, v_chargetype, v_extqref,
                          v_discount, v_discounttype,
                          pkg_constants.con_activeflag_yes, in_createdby,
                          SYSDATE (), line_item_id, v_rowid, v_netprice,
                          v_apprvd_disc
                     FROM line_item
                    WHERE quote_header_id = in_quoteheaderid
                      AND (   site_id = in_siteid
                           OR (site_id IS NULL AND NVL (in_siteid, 0) = 0)
                          )                    /*904 Order Site to Site SLA */
                      AND UPPER (product_name) = UPPER (in_prodname)
                      AND active = pkg_constants.con_activeflag_yes
                      AND NVL (part_type, '-1') =
                             DECODE (UPPER (product_name),
                                     'BT CPE', 'Bundle',
                                     NVL (part_type, '-1')
                                    )
                      --for BT Cpe only part type called Bundle has to be picked up
                      AND UPPER (fallback_type) = UPPER (v_fallback));

               UPDATE line_item
                  SET priced = pkg_constants.con_activeflag_yes
                WHERE quote_header_id = in_quoteheaderid
                  AND (   site_id = in_siteid
                       OR (site_id IS NULL AND NVL (in_siteid, 0) = 0)
                      )                        /*904 Order Site to Site SLA */
                  AND UPPER (product_name) = UPPER (in_prodname)
                  AND NVL (part_type, '-1') =
                         DECODE (UPPER (product_name),
                                 'BT CPE', 'Bundle',
                                 NVL (part_type, '-1')
                                )
                  --for BT Cpe only part type called Bundle has to be picked up
                  AND active = pkg_constants.con_activeflag_yes
                  AND UPPER (fallback_type) = UPPER (v_fallback);

               IF (v_costtype IS NOT NULL)
               THEN
                  INSERT INTO cost_detail
                              (cost_detail_id, price_line_item_detail_id,
                               cost_type, COST, currency, created_by,
                               created_date)
                     (SELECT cost_detail_id.NEXTVAL,
                             price_line_item_detail_id, v_costtype, v_cost,
                             v_costcur, in_createdby, SYSDATE ()
                        FROM price_line_item_detail
                       WHERE NVL (row_id, 1) = NVL (v_rowid, 1)
                       AND price_line_item_id = v_priclinitmid
                       AND active = pkg_constants.con_activeflag_yes
                         AND line_item_id IN (
                                SELECT DISTINCT line_item_id
                                           FROM line_item
                                          WHERE quote_header_id =
                                                              in_quoteheaderid
                                            AND (   site_id = in_siteid
                                                 OR (    site_id IS NULL
                                                     AND NVL (in_siteid, 0) =
                                                                             0
                                                    )
                                                )
                                            /*904 Order Site to Site SLA */
                                            AND UPPER (product_name) =
                                                           UPPER (in_prodname)
                                            AND active =
                                                   pkg_constants.con_activeflag_yes
                                            AND NVL (part_type, '-1') =
                                                   DECODE
                                                         (UPPER (product_name),
                                                          'BT CPE', 'Bundle',
                                                          NVL (part_type,
                                                               '-1')
                                                         )
                                            --for BT Cpe only part type called Bundle has to be picked up
                                            AND UPPER (fallback_type) =
                                                            UPPER (v_fallback)));
               END IF;
            END IF;
         END IF;
      END LOOP;

      out_status := pkg_constants.con_status_success;
   --  COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         out_errmsg := SQLERRM;
         /*ROLLBACK; commented by Jay*/
   END;

PROCEDURE spi_cpeqref_r5 (
      in_quoteheaderid          IN       quote_header.quote_header_id%TYPE,
      in_siteid                 IN       site.site_id%TYPE,
      -- in_cpeqref          IN       cpe_qref.cpe_qref%TYPE,
      in_cpeqref_pri            IN       cpe_qref.cpe_qref%TYPE,
      -- in_cpeqref_sec      IN       cpe_qref.cpe_qref%TYPE,--need to disable this
      in_psuppliername          IN       cpe_qref.pri_supplier_name%TYPE,
      in_pstatus                IN       cpe_qref.pri_status%TYPE,
      in_ponetimechrg           IN       cpe_qref.pri_one_time_charge%TYPE,
      in_precurringchrg         IN       cpe_qref.pri_recurring_charge%TYPE,
      in_ssuppliername          IN       cpe_qref.sec_supplier_name%TYPE,
      in_sstatus                IN       cpe_qref.sec_status%TYPE,
      in_sonetimechrg           IN       cpe_qref.sec_one_time_charge%TYPE,
      in_srecurringchrg         IN       cpe_qref.sec_recurring_charge%TYPE,
      in_scpeqref               IN       cpe_qref.secondary_cpe_qref%TYPE,
      in_expdate                IN       VARCHAR2,
      --cpe_qref.expiry_date%TYPE,
      in_leadtime               IN       cpe_qref.cpe_lead_time%TYPE,
      in_leadtimestatus         IN       cpe_qref.cpe_lead_time_status%TYPE,
      in_comments               IN       cpe_qref.comments%TYPE,
      in_pri_ssp_bid_ref_no     IN       cpe_qref.pri_ssp_bid_ref_no%TYPE,
      in_sec_ssp_bid_ref_no     IN       cpe_qref.sec_ssp_bid_ref_no%TYPE,
      in_pri_offer_valid_date   IN       cpe_qref.pri_offer_valid_date%TYPE,
      in_sec_offer_valid_date   IN       cpe_qref.sec_offer_valid_date%TYPE,
      in_caveats                IN       VARCHAR2,
      in_createdby              IN       cpe_qref.created_by%TYPE,
      out_status                OUT      NUMBER,
      out_errmsg                OUT      VARCHAR2
   )
   AS
      CURSOR c_caveats
      IS
         SELECT *
           FROM TABLE
                    (CAST (pkg_common.fn_splitdata (in_caveats, '~') AS varchar2_ntt
                          )
                    );

      v_caveat        cpe_caveat.cpe_caveat%TYPE;
      v_cavedesc      cpe_caveat.description%TYPE;
      v_cpeqrefid     cpe_qref.cpe_qref_id%TYPE;
      /* v_cpeqrefid_pri   cpe_qref.cpe_qref_id%TYPE;
        v_cpeqrefid_sec  cpe_qref.cpe_qref_id%TYPE;*/
      v_caveats       VARCHAR2 (2000);
      v_quotesiteid   quote_site.quote_site_id%TYPE;
   BEGIN
      SELECT quote_site_id
        INTO v_quotesiteid
        FROM quote_site
       WHERE site_id = in_siteid
         AND quote_header_id = in_quoteheaderid
         AND active = 'Y';

      INSERT INTO cpe_qref
                  (cpe_qref_id, quote_site_id, cpe_qref,
                   pri_supplier_name, pri_status, pri_one_time_charge,
                   pri_recurring_charge, sec_supplier_name, sec_status,
                   sec_one_time_charge, sec_recurring_charge,
                   secondary_cpe_qref, expiry_date,
                   cpe_lead_time, cpe_lead_time_status, comments,
                   pri_ssp_bid_ref_no, sec_ssp_bid_ref_no,
                   pri_offer_valid_date, sec_offer_valid_date,
                   created_by, created_date
                  )
           VALUES (cpe_qref_id.NEXTVAL, v_quotesiteid, in_cpeqref_pri,
                   in_psuppliername, in_pstatus, in_ponetimechrg,
                   in_precurringchrg, in_ssuppliername, in_sstatus,
                   in_sonetimechrg, in_srecurringchrg,
                   in_scpeqref, TO_DATE (in_expdate, 'dd/mon/yyyy'),
                   in_leadtime, in_leadtimestatus, in_comments,
                   in_pri_ssp_bid_ref_no, in_sec_ssp_bid_ref_no,
                   in_pri_offer_valid_date, in_sec_offer_valid_date,
                   in_createdby, SYSDATE
                  )
        RETURNING cpe_qref_id
             INTO v_cpeqrefid;

      IF (in_caveats IS NOT NULL)
      THEN
         BEGIN
            OPEN c_caveats;

            LOOP
               FETCH c_caveats
                INTO v_caveats;

               EXIT WHEN c_caveats%NOTFOUND;
               v_caveat := SUBSTR (v_caveats, 1, INSTR (v_caveats, '|||') - 1);
               v_cavedesc :=
                  SUBSTR (v_caveats,
                          INSTR (v_caveats, '|||') + 3,
                          LENGTH (v_caveats)
                         );

--      DBMS_OUTPUT.PUT_LINE ( 'v_caveat is : ' || v_caveat);
--      DBMS_OUTPUT.PUT_LINE ( 'v_cavedesc is : ' || v_cavedesc);
               INSERT INTO cpe_caveat
                           (cpe_caveat_id, cpe_caveat, description,
                            cpe_qref_id, active, created_by, created_date
                           )
                    VALUES (cpe_caveat_id.NEXTVAL, v_caveat, v_cavedesc,
                            v_cpeqrefid, 'Y', in_createdby, SYSDATE
                           );
            END LOOP;

            CLOSE c_caveats;
         END;
      END IF;

      out_status := pkg_constants.con_status_success;
     /*COMMIT;commented by Jay  */
   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         out_errmsg := SQLERRM;
         /*ROLLBACK; commented by Jay*/
   END;
/* added the following SP spu_action_code_pricing for saving action code for pricing ***/
 PROCEDURE spu_action_code_pricing (
      in_quoteheaderid      IN       quote_header.quote_header_id%TYPE,
      in_as_is_pricelines   IN       pricing_action_code_tbl,
      in_to_be_pricelines   IN       pricing_action_code_tbl,
      out_status            OUT      NUMBER,
      out_errmsg            OUT      VARCHAR2
   )
   AS
      v_priclinitmid            price_line_item_detail.price_line_item_id%TYPE;
      v_count                   NUMBER                                   := 0;
      v_lineitemid              line_item.line_item_id%TYPE;
      v_prlindetid              price_line_item_detail.price_line_item_detail_id%TYPE;
      v_quote_site_service_id   quote_site_service.quote_site_service_id%TYPE;
      v_quantity                price_line_item_detail.quantity%TYPE;
      v_error_location          INTEGER                                  := 0;
   -- Sandeep
   BEGIN
      IF in_to_be_pricelines.EXISTS (1)
      THEN
         FOR i IN in_to_be_pricelines.FIRST .. in_to_be_pricelines.LAST
         LOOP
            BEGIN
               SELECT price_line_item_id
                 INTO v_priclinitmid
                 FROM price_line_item
                WHERE TRIM (UPPER (price_line_description)) =
                         TRIM
                            (UPPER
                                (in_to_be_pricelines (i).o_price_line_description
                                )
                            );
            EXCEPTION
               WHEN NO_DATA_FOUND
               THEN
                  out_status := pkg_constants.con_status_failure;
                  out_errmsg :=
                        'spu_action_code_pricing failed,Could not fine price_line_item for input price_line_description-'
                     || in_to_be_pricelines (i).o_price_line_description
                     || ' for quote header id-'
                     || in_quoteheaderid;
               WHEN OTHERS
               THEN
                  out_status := pkg_constants.con_status_failure;
                  out_errmsg :=
                        'spu_action_code_pricing failed,Other error'
                     || SQLERRM
                     || SQLCODE;
            END;

       /*     jay_debug ('spu_action_code_pricing',
                       'in_quoteheaderid' || in_quoteheaderid,
                          'siteid'
                       || in_to_be_pricelines (i).o_siteid
                       || 'in_to_be_pricelines (i).o_product_name'
                       || in_to_be_pricelines (i).o_product_name
                       || 'in_to_be_pricelines (i).o_fallback'
                       || in_to_be_pricelines (i).o_fallback
                       || 'in_to_be_pricelines (i).o_ptp_eup'
                       || in_to_be_pricelines (i).o_ptp_eup
                       || 'in_to_be_pricelines (i).o_price_line_description'
                       || in_to_be_pricelines (i).o_price_line_description
                      ); */

            UPDATE price_line_item_detail
               SET action_code = in_to_be_pricelines (i).o_action_code
             WHERE price_line_item_detail_id IN (
                      SELECT DISTINCT price_line_item_detail_id
                                 FROM line_item li,
                                      price_line_item_detail plid
                                WHERE li.quote_header_id = in_quoteheaderid
                                  AND (   li.site_id =
                                              in_to_be_pricelines (i).o_siteid
                                       OR (    li.site_id IS NULL
                                           AND NVL
                                                  (in_to_be_pricelines (i).o_siteid,
                                                   0
                                                  ) = 0
                                          )
                                      )
                                  AND NVL (li.part_type, '-1') =
                                         DECODE (UPPER (li.product_name),
                                                 'BT CPE', 'Bundle',
                                                 NVL (part_type, '-1')
                                                )
                                  --for BT Cpe only part type called Bundle has to be picked up
                                  AND UPPER (li.product_name) =
                                         UPPER
                                            (in_to_be_pricelines (i).o_product_name
                                            )
                                  AND plid.active =
                                              pkg_constants.con_activeflag_yes
                                  AND li.active =
                                              pkg_constants.con_activeflag_yes
                                  AND UPPER (li.fallback_type) =
                                         UPPER
                                            (in_to_be_pricelines (i).o_fallback
                                            )
                                  /*commented this part of code as this is not required in pricing
                                  AND NVL (li.row_id, 1) =
                                         NVL
                                            (DECODE
                                                (in_to_be_pricelines (i).o_row_id,
                                                 -1, 1,
                                                 in_to_be_pricelines (i).o_row_id
                                                ),
                                             1
                                            ) */
                                  AND NVL (plid.ptp_eup, 'x') =
                                         NVL
                                            (in_to_be_pricelines (i).o_ptp_eup,
                                             'x'
                                            )
                                  AND plid.line_item_id = li.line_item_id
                                  AND NVL (plid.row_id, 1) =
                                         NVL
                                            (DECODE
                                                (in_to_be_pricelines (i).o_row_id,
                                                 -1, 1,
                                                 in_to_be_pricelines (i).o_row_id
                                                ),
                                             1
                                            )
                                  AND plid.price_line_item_id = v_priclinitmid);
         END LOOP;
      END IF;

      IF in_as_is_pricelines.EXISTS (1)
      THEN
         FOR i IN in_as_is_pricelines.FIRST .. in_as_is_pricelines.LAST
         LOOP
            BEGIN
               SELECT price_line_item_id
                 INTO v_priclinitmid
                 FROM price_line_item
                WHERE TRIM (UPPER (price_line_description)) =
                         TRIM
                            (UPPER
                                (in_as_is_pricelines (i).o_price_line_description
                                )
                            );
            EXCEPTION
               WHEN NO_DATA_FOUND
               THEN
                  out_status := pkg_constants.con_status_failure;
                  out_errmsg :=
                        'spu_action_code_pricing failed,Could not fine price_line_item for input price_line_description-'
                     || in_as_is_pricelines (i).o_price_line_description
                     || ' for quote header id-'
                     || in_quoteheaderid;
               WHEN OTHERS
               THEN
                  out_status := pkg_constants.con_status_failure;
                  out_errmsg :=
                        'spu_action_code_pricing failed,Other error'
                     || SQLERRM
                     || SQLCODE;
            END;

            UPDATE price_line_item_detail_as_is
               SET action_code = in_as_is_pricelines (i).o_action_code
             WHERE price_line_item_detail_id IN (
                      SELECT DISTINCT price_line_item_detail_id
                                 FROM quote_line_item_as_is li,
                                      price_line_item_detail_as_is plid
                                WHERE li.quote_header_id = in_quoteheaderid
                                  AND (   li.site_id =
                                              in_as_is_pricelines (i).o_siteid
                                       OR (    li.site_id IS NULL
                                           AND NVL
                                                  (in_as_is_pricelines (i).o_siteid,
                                                   0
                                                  ) = 0
                                          )
                                      )
                                  AND NVL (li.part_type, '-1') =
                                         DECODE (UPPER (li.product_name),
                                                 'BT CPE', 'Bundle',
                                                 NVL (part_type, '-1')
                                                )
                                  --for BT Cpe only part type called Bundle has to be picked up
                                  AND UPPER (li.product_name) =
                                         UPPER
                                            (in_as_is_pricelines (i).o_product_name
                                            )
                                  AND plid.active =
                                              pkg_constants.con_activeflag_yes
                                  AND li.active =
                                              pkg_constants.con_activeflag_yes
                                  AND UPPER (li.fallback_type) =
                                         UPPER
                                            (in_as_is_pricelines (i).o_fallback
                                            )
                                  /* commented this part of code as this is not required in pricing
                                  AND NVL (li.row_id, 1) =
                                         NVL
                                            (DECODE
                                                (in_as_is_pricelines (i).o_row_id,
                                                 -1, 1,
                                                 in_as_is_pricelines (i).o_row_id
                                                ),
                                             1
                                            ) */
                                  AND NVL (plid.ptp_eup, 'x') =
                                         NVL
                                            (in_as_is_pricelines (i).o_ptp_eup,
                                             'x'
                                            )
                                  AND plid.line_item_id = li.line_item_id
                                  AND NVL (plid.row_id, 1) =
                                         NVL
                                            (DECODE
                                                (in_as_is_pricelines (i).o_row_id,
                                                 -1, 1,
                                                 in_as_is_pricelines (i).o_row_id
                                                ),
                                             1
                                            )
                                  AND plid.price_line_item_id = v_priclinitmid);
         END LOOP;
      END IF;

      out_status := pkg_constants.con_status_success;
   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         out_errmsg := 'spu_action_code_pricing failed, error-' || SQLERRM;
         /*ROLLBACK; Commented by Jay*/
   END;
/*Added for fixing defect 87218 (T2 defect R9 IVPN2) call anywhere functonality ***/
PROCEDURE spd_pricing (
   in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
   in_siteid          IN       line_item.site_id%TYPE,
   in_prodname        IN       line_item.product_name%TYPE,
   in_pricelinitm     IN       VARCHAR2,
   in_fallback        IN       line_item.fallback_type%TYPE,
   in_createdby       IN       price_line_item_detail.created_by%TYPE,
   out_status         OUT      NUMBER,
   out_errmsg         OUT      VARCHAR2
)
AS
   CURSOR c_pricedet
   IS
      SELECT *
        FROM TABLE
                (CAST (pkg_common.fn_splitdata (in_pricelinitm, '~') AS varchar2_ntt
                      )
                );

   v_priclinitmid   price_line_item_detail.price_line_item_id%TYPE;
BEGIN
   FOR v_rowcnt IN c_pricedet
   LOOP
      DBMS_OUTPUT.put_line (v_rowcnt.COLUMN_VALUE);

      SELECT price_line_item_id
        INTO v_priclinitmid
        FROM price_line_item
       WHERE UPPER (price_line_description) = UPPER (v_rowcnt.COLUMN_VALUE);

      UPDATE price_line_item_detail
         SET active = pkg_constants.con_activeflag_no,
             modified_by = in_createdby,
             modified_date = SYSDATE ()
       WHERE price_line_item_id = v_priclinitmid
         --AND NVL (row_id, 1) = NVL (v_rowid, 1)
         AND line_item_id IN (
                SELECT DISTINCT line_item_id
                           FROM line_item
                          WHERE quote_header_id = in_quoteheaderid
                            AND (   site_id = in_siteid
                                 OR (site_id IS NULL AND NVL (in_siteid, 0) =
                                                                             0
                                    )
                                )              /*904 Order Site to Site SLA */
                            AND NVL (part_type, '-1') =
                                   DECODE (UPPER (product_name),
                                           'BT CPE', 'Bundle',
                                           NVL (part_type, '-1')
                                          )
                            --for BT Cpe only part type called Bundle has to be picked up
                            AND UPPER (product_name) = UPPER (in_prodname)
                            AND active = pkg_constants.con_activeflag_yes
                            AND UPPER (fallback_type) = UPPER (in_fallback));
   END LOOP;
   out_status := pkg_constants.con_status_success;
EXCEPTION
   WHEN OTHERS
   THEN
      out_status := pkg_constants.con_status_failure;
      out_errmsg := 'spd_pricing failed, error-' || SQLERRM;
      /*ROLLBACK; Commented by Jay*/
END;


PROCEDURE         spi_pricing_asis_multisite(
    in_quoteheaderid IN quote_header.quote_header_id%TYPE,
    in_pricing       IN pricing_tab,
    in_siteid        IN line_item.site_id%TYPE,
    in_servicename   IN quote_site_service.service_name%TYPE,
    in_createdby     IN price_line_item_detail.created_by%TYPE,
    out_status out NUMBER,
    out_errmsg out VARCHAR2 )
AS
  /******************************************************************************
  NAME:        SPI_PRICING_MODIFY_ASIS_multisit MX
  PURPOSE:    Pricing SP for the get asset
  REVISIONS:
  Ver        Date        Author           Description
  ---------  ----------  ---------------  ------------------------------------
   1.0        15/01/2010  Suman            Modificed the EUP to object value and update base on EUP condition
  ******************************************************************************/
  --
  v_priclinitmid price_line_item_detail.price_line_item_id%TYPE;
  v_count NUMBER := 0;
  v_lineitemid line_item.line_item_id%TYPE;
  v_prlindetid price_line_item_detail.price_line_item_detail_id%TYPE;
  v_quote_site_service_id quote_site_service.quote_site_service_id%TYPE;
  v_default_action_code VARCHAR2(20) :='';
  vo_sqe_siteid site.site_id%TYPE;
BEGIN
   UPDATE price_line_item_detail_as_is
      SET active               = pkg_constants.con_activeflag_no,
        modified_by            = in_createdby,
        modified_date          = SYSDATE ()
      WHERE price_line_item_id  IS NOT NULL
      AND ptp_eup IS NOT NULL
      AND active                = pkg_constants.con_activeflag_yes
      AND line_item_id        IN
        ( SELECT DISTINCT line_item_id
        FROM quote_line_item_as_is
        WHERE quote_header_id     = in_quoteheaderid
        AND site_id IS NOT NULL
        AND quote_site_service_id  IS NOT NULL
        AND active                = pkg_constants.con_activeflag_yes
       );

  FOR i IN in_pricing.FIRST .. in_pricing.LAST
  loop
    BEGIN
     SELECT site_id
      INTO vo_sqe_siteid
      FROM site
      WHERE
      bfg_site_id                       = in_pricing (i).o_siteid
      OR (to_number(to_char(expedio_site_id)) =to_number(trim(to_char(in_pricing (i).o_siteid)))
      AND REGEXP_LIKE(expedio_site_id,'^[0-9]'));
    exception
    WHEN no_data_found THEN
      out_status := pkg_constants.con_status_failure;
      out_errmsg := 'BFG SITE NOT FOUND--->'||upper (in_pricing (i).o_pricelineitem);
      RETURN;
    END;

    BEGIN
      SELECT quote_site_service_id
      INTO v_quote_site_service_id
      FROM quote_site_service
      WHERE quote_header_id    = in_quoteheaderid
      AND (site_id             = vo_sqe_siteid)
      AND upper (service_name) = upper (in_servicename);
   exception
    WHEN no_data_found THEN
      out_status := pkg_constants.con_status_failure;
      out_errmsg := 'error while searching for quote_site_service_id';
      pkg_common.spi_error_log(NULL,in_quoteheaderid,in_siteid,in_servicename, 'PKG_LINEITEM','spi_pricing_asis_multisite',out_status,out_errmsg);
      RETURN;
    END;

    BEGIN
      SELECT price_line_item_id
      INTO v_priclinitmid
      FROM price_line_item
      WHERE upper (price_line_description) = upper (in_pricing (i).o_pricelineitem);
    exception
    WHEN no_data_found THEN
      out_status := pkg_constants.con_status_failure;
      out_errmsg := 'error while searching for price_line_item_id ->'||upper (in_pricing (i).o_pricelineitem);
      RETURN;
    END;

      IF (v_priclinitmid IS NOT NULL) THEN
        INSERT
        INTO price_line_item_detail_as_is
          (
            price_line_item_detail_id,
            price_line_item_id,
            price,
            currency,
            charge_type,
            external_qref,
            discount,
            discount_type,
            active,
            created_by,
            created_date,
            line_item_id,
            quantity,
            row_id ,
            line_item_detail_id,
            pln_inventory_id,
            net_price,
            ptp_eup,
            classic_element_id,
            classic_element_name,
            action_code,
            ppsr_price_line_id,
            ppsr_price_line_description ,
            discount_requested ,
            discount_proposed
          )
          (SELECT price_line_item_detail_id.nextval,
              v_priclinitmid,
              in_pricing (i).o_price,
              in_pricing (i).o_currency,
              in_pricing (i).o_chargetype,
              in_pricing (i).o_extqref,
              in_pricing (i).o_discount,
              in_pricing (i).o_disctype,
              pkg_constants.con_activeflag_yes,
              in_createdby,
              SYSDATE (),
              line_item_id ,
              in_pricing (i).o_quanty ,
              decode(in_pricing (i).o_row_id,0,NULL,in_pricing (i).o_row_id) ,
              in_pricing (i).o_line_item_detail_id ,
              in_pricing (i).o_pln_inventory_id,
              in_pricing (i).o_netprice,
              in_pricing (i).o_ptp_eup,
              in_pricing (i).o_classic_element_id,
              in_pricing (i).o_classic_element_name,
              v_default_action_code,
              in_pricing (i).ppsr_price_line_id,
              in_pricing (i).ppsr_price_line_description ,
              in_pricing (i).o_discount_requested ,
              in_pricing (i).o_discount_proposed
            FROM quote_line_item_as_is
            WHERE quote_header_id     = in_quoteheaderid
            AND (site_id             = vo_sqe_siteid )
            AND quote_site_service_id = v_quote_site_service_id
            AND upper (product_name)  = upper (in_pricing (i).o_prodname)
            AND active                = pkg_constants.con_activeflag_yes
          );

        UPDATE quote_line_item_as_is
        SET priced                = pkg_constants.con_activeflag_yes
        WHERE quote_header_id     = in_quoteheaderid
        AND (site_id              = vo_sqe_siteid)
        AND quote_site_service_id = v_quote_site_service_id
        AND upper (product_name)  = upper (in_pricing (i).o_prodname)
        AND active                = pkg_constants.con_activeflag_yes;

ELSE
  out_status := pkg_constants.con_status_failure;
  out_errmsg := 'Pricing array is empty in spi_pricing_modify_as_is';
  pkg_common.spi_error_log
  (
    NULL,in_quoteheaderid,in_siteid,in_servicename, 'PKG_LINEITEM','spi_pricing_asis_multisite',out_status,out_errmsg
  )
  ;
END IF;
  END loop;
out_status := pkg_constants.con_status_success;
exception
WHEN others THEN
  out_status := pkg_constants.con_status_failure;
  out_errmsg := sqlerrm;
  pkg_common.spi_error_log
  (
    vo_sqe_siteid,in_quoteheaderid,in_siteid,in_servicename,
    'PKG_LINEITEM','spi_pricing_asis_multisite',out_status,out_errmsg
  )
  ;
END  spi_pricing_asis_multisite;



PROCEDURE spi_access_qref_optimize (
   in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
   in_qreflist        IN       aqref_tab,
   in_createdby       IN       access_qref.created_by%TYPE,
   out_status         OUT      NUMBER,
   out_errmsg         OUT      VARCHAR2
)
AS
   v_quotesiteid                 quote_site.quote_site_id%TYPE;
   v_qrefid                      access_qref.access_qref_id%TYPE;
   v_currdate                    TIMESTAMP;
   v_acc_qref_cnt                NUMBER;
   v_access_qref                 VARCHAR2 (255);
   min_cost                      NUMBER (10, 2);
   v_varchar2_ntt                varchar2_ntt              := varchar2_ntt
                                                                          ();
   v_siteid_str_tild_seperated   VARCHAR2 (4000);
   v_nextsite                    site.site_id%TYPE;
   v_line_item_obj               line_item_obj;
   v_line_item_detail_tbl        config_attr_tab        := config_attr_tab
                                                                          ();
   v_line_item_detail_cpe_tbl    config_attr_tab        := config_attr_tab
                                                                          ();
   v_line_item_tbl               config_tab                  := config_tab
                                                                          ();
   v_pricing_tab                 pricing_tab                := pricing_tab
                                                                          ();
   v_fallback_type               line_item.fallback_type%TYPE      := '';
   v_access_technology           line_item_detail.VALUE%TYPE;
   --Primary veriables
   v_primary_term                VARCHAR2 (255)                    := '';
   v_primary_supplier            VARCHAR2 (255)                    := '';
   v_primary_onetimechrg         NUMBER                            := 0;
   v_primary_costacccur          VARCHAR2 (255)                    := '';
   v_primary_installcost         VARCHAR2 (255)                    := '';
   v_primary_aqref               VARCHAR2 (255)                    := '';
   v_primary_recchrg             NUMBER                            := NULL;
   v_primary_mnthlycost          NUMBER                            := NULL;
   --secondary variables
   v_secondary_term              VARCHAR2 (255)                    := '';
   v_secondary_supplier          VARCHAR2 (255)                    := '';
   v_secondary_onetimechrg       NUMBER                            := 0;
   v_secondary_costacccur        VARCHAR2 (255)                    := '';
   v_secondary_installcost       VARCHAR2 (255)                    := '';
   v_secondary_aqref             VARCHAR2 (255)                    := '';
   v_secondary_recchrg           NUMBER                            := NULL;
   v_secondary_mnthlycost        NUMBER                            := NULL;
   v_qref_associated             NUMBER (3)                        := 0;
   v_cpe_contact_term            VARCHAR2 (255)                    := '';
BEGIN
   v_currdate := SYSDATE ();
   if in_qreflist.exists(1) then
   FOR i IN in_qreflist.FIRST .. in_qreflist.LAST
   LOOP
      SELECT quote_site_id
        INTO v_quotesiteid
        FROM quote_site
       WHERE quote_header_id = in_quoteheaderid
         AND site_id = in_qreflist (i).o_siteid
         AND active = pkg_constants.con_activeflag_yes;

      v_varchar2_ntt.EXTEND (1);
      v_varchar2_ntt (i) := in_qreflist (i).o_siteid;

      SELECT COUNT (1)
        INTO v_acc_qref_cnt
        FROM access_qref
       WHERE quote_site_id = v_quotesiteid
         AND access_qref = in_qreflist (i).o_aqref;

      --delete from access_caveat and access_qref tables before inserting
      IF (in_qreflist (i).o_caveat.exists(1)) THEN
      DELETE FROM access_caveat
            WHERE access_qref_id IN (SELECT access_qref_id
                                       FROM access_qref
                                      WHERE quote_site_id = v_quotesiteid)
              AND created_date < v_currdate;
     END IF;
      /*DELETE FROM access_qref
            WHERE quote_site_id = v_quotesiteid
              AND created_date < v_currdate; */
      IF v_acc_qref_cnt > 0
      THEN
         UPDATE access_qref
            SET access_speed = in_qreflist (i).o_accspeed,
                supplier = in_qreflist (i).o_supplier,
                pricing_status = in_qreflist (i).o_pricingstatus,
                lead_time = in_qreflist (i).o_leadtime,
                port_speed = in_qreflist (i).o_portspeed,
                one_time_charge = in_qreflist (i).o_onetimechrg,
                recurring_charge = in_qreflist (i).o_recchrg,
                port_speed_value = in_qreflist (i).o_portspeedval,
                port_uom = in_qreflist (i).o_portuom,
                access_speed_value = in_qreflist (i).o_accspeedval,
                access_uom = in_qreflist (i).o_accuom,
                access_product_type = in_qreflist (i).o_accprodtyp,
                access_technology = in_qreflist (i).o_acctech,
                supplier_product_name = in_qreflist (i).o_supprodname,
                gpop_node = in_qreflist (i).o_gpopnode,
                distance_gpop = in_qreflist (i).o_distgpop,
                apop_node = in_qreflist (i).o_apopnode,
                distance_apop = in_qreflist (i).o_distapop,
                term = in_qreflist (i).o_term,
                leg_id = in_qreflist (i).o_legid,
                pair_id = in_qreflist (i).o_pairid,
                expiry_date_time_zone = in_qreflist (i).o_expdttimezone,
                tariff_zone_name = in_qreflist (i).o_tariffzone,
                no_of_copper_pairs = in_qreflist (i).o_nocopperpairs,
                circuit_interface = in_qreflist (i).o_circuitintf,
                auto_priced_flag = in_qreflist (i).o_autopricedflag,
                budgetary_priced_flag = in_qreflist (i).o_budgtpricedflag,
                interface_type = in_qreflist (i).o_intftyp,
                framing_details = in_qreflist (i).o_framingdet,
                connector = in_qreflist (i).o_connector,
                install_cost = in_qreflist (i).o_installcost,
                supplier_cost = in_qreflist (i).o_suppcost,
                backhaul_cost = in_qreflist (i).o_backhaulcost,
                local_tail_cost = in_qreflist (i).o_lcltailcost,
                cost_access_currency = in_qreflist (i).o_costacccur,
                resiliency_flag = in_qreflist (i).o_resflag,
                comments = in_qreflist (i).o_comments,
                nni_flag = in_qreflist (i).o_nniflag,
                support_24x7 = in_qreflist (i).o_support,
                sent_to_ape = in_qreflist (i).o_senttoape,
                monthly_cost = in_qreflist (i).o_mnthlycost,
                access_type = in_qreflist (i).o_acctype,
                expiry_date = in_qreflist (i).o_expdate,
                apop_flag = in_qreflist (i).o_apopflag,
                port_status = in_qreflist (i).o_portstatus,
                gpop_id = in_qreflist (i).o_gpopid,
                apop_id = in_qreflist (i).o_apopid,
                port_speed_avail_status = in_qreflist (i).o_portspdavailst,
                method = in_qreflist (i).o_method,
                aggregator_quote_line_id = in_qreflist (i).o_aggqtlineid,
                encapsulation = in_qreflist (i).o_encap,
                guaranteed_speed = in_qreflist (i).o_guaranteedspeed,
                time_to_deliver = in_qreflist (i).o_timetodel,
                isp_addressing = in_qreflist (i).o_ispaddr,
                monthly_recurring_charge = in_qreflist (i).o_mnthlyrecchrg,
                non_recurring_charge = in_qreflist (i).o_nonrecchrg,
                access_availability = in_qreflist (i).o_accavail,
                service_catagory = in_qreflist (i).o_servicecat,
                other_service_notes = in_qreflist (i).o_othersernotes,
                additional_charges = in_qreflist (i).o_addchrg,
                tranaction_type = in_qreflist (i).o_transactiontyp,
                hvpn_access_technology = in_qreflist (i).o_hvpnacctech,
                pricing_id = in_qreflist (i).o_pricingid,
                service_id = in_qreflist (i).o_serviceid,
                copper_details = in_qreflist (i).o_copperdet,
                copper_service_id = in_qreflist (i).o_copperserid,
                rfa_notes = in_qreflist (i).o_rfanotes,
                mrc = in_qreflist (i).o_mrc,
                nrc = in_qreflist (i).o_nrc,
                tarrif_zone = in_qreflist (i).o_tarrifzone,
                rfo_notes = in_qreflist (i).o_rfonotes,
                active = pkg_constants.con_activeflag_yes,
                copper_pair = in_qreflist (i).o_copper_pair,
                ethernet_phase_attribute =
                                    in_qreflist (i).o_ethernet_phase_attribute,
                non_std_qref_flag = in_qreflist (i).o_non_std_qref_flag,
                ape_comments = in_qreflist (i).o_ape_comments,
                apop_code = in_qreflist (i).o_apop_code,
                cease_charges = in_qreflist (i).o_cease_charges,
                gpop = in_qreflist (i).o_gpop,
                gpop_code = in_qreflist (i).o_gpop_code,
                network_type = in_qreflist (i).o_network_type,
                partner_name = in_qreflist (i).o_partner_name,
                ptp_mrc = in_qreflist (i).o_ptp_mrc,
                ptp_nrc = in_qreflist (i).o_ptp_nrc,
                qref_type = in_qreflist (i).o_qref_type,
                rbpurl = in_qreflist (i).o_rbpurl,
                resiliency = in_qreflist (i).o_resiliency,
                staff_member_email = in_qreflist (i).o_staff_member_email,
                staff_member_name = in_qreflist (i).o_staff_member_name,
                support_24_7 = in_qreflist (i).o_support_24_7,
                workflow_status = in_qreflist (i).o_workflow_status,
                service_variant = in_qreflist (i).o_service_variant,
                --            /*Start Added by Nagendra for Bulk Upload on 31-May-2011*/  =                        --                  /*Start Added by Nagendra on 31-May-2011 for Bulk Upload*/
                optm_qref = in_qreflist (i).o_optm_qref,
                optm_rental_cost_y1 = in_qreflist (i).o_optm_rentl_cost_y1,
                optm_rental_cost_y2 = in_qreflist (i).o_optm_rentl_cost_y2,
                optm_rental_cost_y3 = in_qreflist (i).o_optm_rentl_cost_y3,
                optm_rental_cost_y4 = in_qreflist (i).o_optm_rentl_cost_y4,
                optm_rental_cost_y5 = in_qreflist (i).o_optm_rentl_cost_y5,
                optm_rental_price_y1 = in_qreflist (i).o_optm_rentl_price_y1,
                optm_rental_price_y2 = in_qreflist (i).o_optm_rentl_price_y2,
                optm_rental_price_y3 = in_qreflist (i).o_optm_rentl_price_y3,
                optm_rental_price_y4 = in_qreflist (i).o_optm_rentl_price_y4,
                optm_rental_price_y5 = in_qreflist (i).o_optm_rentl_price_y5,
                optm_install_y1 = in_qreflist (i).o_optm_install_y1,
                install_percent_reduction_y1 =
                                in_qreflist (i).o_install_percent_reduction_y1,
                percent_reduction_cost_y1 =
                                   in_qreflist (i).o_percent_reduction_cost_y1,
                percent_reduction_cost_y2 =
                                   in_qreflist (i).o_percent_reduction_cost_y2,
                percent_reduction_cost_y3 =
                                   in_qreflist (i).o_percent_reduction_cost_y3,
                percent_reduction_cost_y4 =
                                   in_qreflist (i).o_percent_reduction_cost_y4,
                percent_reduction_cost_y5 =
                                   in_qreflist (i).o_percent_reduction_cost_y5,
                tpe_ref_id = in_qreflist (i).o_tpe_ref_id,
                supplier_ref_id = in_qreflist (i).o_supplier_ref_id,
                modified_by                  = in_createdby,
                modified_date                = v_currdate
          -- Inputs needed of what all have to be updated
         WHERE  quote_site_id = v_quotesiteid
            AND access_qref = in_qreflist (i).o_aqref;
      ELSE
         INSERT INTO access_qref
                     (access_qref_id, quote_site_id,
                      access_qref,
                      pricing_status,
                      access_speed,
                      supplier,
                      lead_time,
                      port_speed,
                      one_time_charge,
                      recurring_charge,
                      port_speed_value,
                      port_uom,
                      access_speed_value,
                      access_uom,
                      access_product_type,
                      access_technology,
                      supplier_product_name,
                      gpop_node,
                      distance_gpop,
                      apop_node,
                      distance_apop, term,
                      leg_id, pair_id,
                      expiry_date_time_zone,
                      tariff_zone_name,
                      no_of_copper_pairs,
                      circuit_interface,
                      auto_priced_flag,
                      budgetary_priced_flag,
                      interface_type,
                      framing_details,
                      connector,
                      install_cost,
                      supplier_cost,
                      backhaul_cost,
                      local_tail_cost,
                      cost_access_currency,
                      resiliency_flag, comments,
                      nni_flag, support_24x7,
                      sent_to_ape,
                      monthly_cost,
                      access_type, expiry_date,
                      apop_flag,
                      port_status,
                      gpop_id, apop_id,
                      port_speed_avail_status,
                      method,
                      aggregator_quote_line_id,
                      encapsulation,
                      guaranteed_speed,
                      time_to_deliver,
                      isp_addressing,
                      monthly_recurring_charge,
                      non_recurring_charge,
                      access_availability,
                      service_catagory,
                      other_service_notes,
                      additional_charges,
                      tranaction_type,
                      hvpn_access_technology,
                      pricing_id,
                      service_id,
                      copper_details,
                      copper_service_id,
                      rfa_notes, mrc,
                      nrc, tarrif_zone,
                      rfo_notes, created_by, created_date,
                      active,
                      copper_pair,
                      ethernet_phase_attribute,
                      non_std_qref_flag,
                      ape_comments,
                      apop_code,
                      cease_charges,
                      gpop, gpop_code,
                      network_type,
                      partner_name,
                      ptp_mrc, ptp_nrc,
                      qref_type, rbpurl,
                      resiliency,
                      staff_member_email,
                      staff_member_name,
                      support_24_7,
                      workflow_status,
                      service_variant,
                      --            /*Start Added by Nagendra for Bulk Upload on 31-May-2011*/
                      optm_qref,
                      optm_rental_cost_y1,
                      optm_rental_cost_y2,
                      optm_rental_cost_y3,
                      optm_rental_cost_y4,
                      optm_rental_cost_y5,
                      optm_rental_price_y1,
                      optm_rental_price_y2,
                      optm_rental_price_y3,
                      optm_rental_price_y4,
                      optm_rental_price_y5,
                      optm_install_y1,
                      install_percent_reduction_y1,
                      percent_reduction_cost_y1,
                      percent_reduction_cost_y2,
                      percent_reduction_cost_y3,
                      percent_reduction_cost_y4,
                      percent_reduction_cost_y5,
                      tpe_ref_id,
                      supplier_ref_id
                     /*End Added by Nagendra for Bulk Upload on 31-May-2011*/
                     )
              VALUES (access_qref_id.NEXTVAL, v_quotesiteid,
                      in_qreflist (i).o_aqref,
                      in_qreflist (i).o_pricingstatus,
                      in_qreflist (i).o_accspeed,
                      in_qreflist (i).o_supplier,
                      in_qreflist (i).o_leadtime,
                      in_qreflist (i).o_portspeed,
                      in_qreflist (i).o_onetimechrg,
                      in_qreflist (i).o_recchrg,
                      in_qreflist (i).o_portspeedval,
                      in_qreflist (i).o_portuom,
                      in_qreflist (i).o_accspeedval,
                      in_qreflist (i).o_accuom,
                      in_qreflist (i).o_accprodtyp,
                      in_qreflist (i).o_acctech,
                      in_qreflist (i).o_supprodname,
                      in_qreflist (i).o_gpopnode,
                      in_qreflist (i).o_distgpop,
                      in_qreflist (i).o_apopnode,
                      in_qreflist (i).o_distapop, in_qreflist (i).o_term,
                      in_qreflist (i).o_legid, in_qreflist (i).o_pairid,
                      in_qreflist (i).o_expdttimezone,
                      in_qreflist (i).o_tariffzone,
                      in_qreflist (i).o_nocopperpairs,
                      in_qreflist (i).o_circuitintf,
                      in_qreflist (i).o_autopricedflag,
                      in_qreflist (i).o_budgtpricedflag,
                      in_qreflist (i).o_intftyp,
                      in_qreflist (i).o_framingdet,
                      in_qreflist (i).o_connector,
                      in_qreflist (i).o_installcost,
                      in_qreflist (i).o_suppcost,
                      in_qreflist (i).o_backhaulcost,
                      in_qreflist (i).o_lcltailcost,
                      in_qreflist (i).o_costacccur,
                      in_qreflist (i).o_resflag, in_qreflist (i).o_comments,
                      in_qreflist (i).o_nniflag, in_qreflist (i).o_support,
                      in_qreflist (i).o_senttoape,
                      in_qreflist (i).o_mnthlycost,
                      in_qreflist (i).o_acctype, in_qreflist (i).o_expdate,
                      in_qreflist (i).o_apopflag,
                      in_qreflist (i).o_portstatus,
                      in_qreflist (i).o_gpopid, in_qreflist (i).o_apopid,
                      in_qreflist (i).o_portspdavailst,
                      in_qreflist (i).o_method,
                      in_qreflist (i).o_aggqtlineid,
                      in_qreflist (i).o_encap,
                      in_qreflist (i).o_guaranteedspeed,
                      in_qreflist (i).o_timetodel,
                      in_qreflist (i).o_ispaddr,
                      in_qreflist (i).o_mnthlyrecchrg,
                      in_qreflist (i).o_nonrecchrg,
                      in_qreflist (i).o_accavail,
                      in_qreflist (i).o_servicecat,
                      in_qreflist (i).o_othersernotes,
                      in_qreflist (i).o_addchrg,
                      in_qreflist (i).o_transactiontyp,
                      in_qreflist (i).o_hvpnacctech,
                      in_qreflist (i).o_pricingid,
                      in_qreflist (i).o_serviceid,
                      in_qreflist (i).o_copperdet,
                      in_qreflist (i).o_copperserid,
                      in_qreflist (i).o_rfanotes, in_qreflist (i).o_mrc,
                      in_qreflist (i).o_nrc, in_qreflist (i).o_tarrifzone,
                      in_qreflist (i).o_rfonotes, in_createdby, v_currdate,
                      pkg_constants.con_activeflag_yes,
                      in_qreflist (i).o_copper_pair,
                      in_qreflist (i).o_ethernet_phase_attribute,
                      in_qreflist (i).o_non_std_qref_flag,
                      in_qreflist (i).o_ape_comments,
                      in_qreflist (i).o_apop_code,
                      in_qreflist (i).o_cease_charges,
                      in_qreflist (i).o_gpop, in_qreflist (i).o_gpop_code,
                      in_qreflist (i).o_network_type,
                      in_qreflist (i).o_partner_name,
                      in_qreflist (i).o_ptp_mrc, in_qreflist (i).o_ptp_nrc,
                      in_qreflist (i).o_qref_type, in_qreflist (i).o_rbpurl,
                      in_qreflist (i).o_resiliency,
                      in_qreflist (i).o_staff_member_email,
                      in_qreflist (i).o_staff_member_name,
                      in_qreflist (i).o_support_24_7,
                      in_qreflist (i).o_workflow_status,
                      in_qreflist (i).o_service_variant,
                      --                  /*Start Added by Nagendra on 31-May-2011 for Bulk Upload*/
                      in_qreflist (i).o_optm_qref,
                      in_qreflist (i).o_optm_rentl_cost_y1,
                      in_qreflist (i).o_optm_rentl_cost_y2,
                      in_qreflist (i).o_optm_rentl_cost_y3,
                      in_qreflist (i).o_optm_rentl_cost_y4,
                      in_qreflist (i).o_optm_rentl_cost_y5,
                      in_qreflist (i).o_optm_rentl_price_y1,
                      in_qreflist (i).o_optm_rentl_price_y2,
                      in_qreflist (i).o_optm_rentl_price_y3,
                      in_qreflist (i).o_optm_rentl_price_y4,
                      in_qreflist (i).o_optm_rentl_price_y5,
                      in_qreflist (i).o_optm_install_y1,
                      in_qreflist (i).o_install_percent_reduction_y1,
                      in_qreflist (i).o_percent_reduction_cost_y1,
                      in_qreflist (i).o_percent_reduction_cost_y2,
                      in_qreflist (i).o_percent_reduction_cost_y3,
                      in_qreflist (i).o_percent_reduction_cost_y4,
                      in_qreflist (i).o_percent_reduction_cost_y5,
                      in_qreflist (i).o_tpe_ref_id,
                      in_qreflist (i).o_supplier_ref_id
                     /*End Added by Nagendra on 31-May-2011 for Bulk Upload*/
                     )
           RETURNING access_qref_id
                INTO v_qrefid;
      END IF;

      IF (in_qreflist (i).o_caveat IS NOT NULL)
      THEN
         FOR j IN
            in_qreflist (i).o_caveat.FIRST .. in_qreflist (i).o_caveat.LAST
         LOOP
            INSERT INTO access_caveat
                        (access_caveat_id, access_qref_id,
                         caveat_id,
                         description,
                         caveated_on,
                         updated_on,
                         active,
                         access_caveat,
                         created_by, created_date
                        )
                 VALUES (access_caveat_id.NEXTVAL, v_qrefid,
                         in_qreflist (i).o_caveat (j).o_caveatid,
                         in_qreflist (i).o_caveat (j).o_desc,
                         in_qreflist (i).o_caveat (j).o_caveatedon,
                         in_qreflist (i).o_caveat (j).o_updatedon,
                         pkg_constants.con_activeflag_yes,
                         in_qreflist (i).o_caveat (j).o_accesscaveat,
                         in_createdby, v_currdate
                        );
         END LOOP;
      END IF;
   END LOOP;

   ----
   v_qref_associated := 0;

   SELECT COUNT (1)
     INTO v_qref_associated
     FROM line_item li, price_line_item_detail plid
    WHERE li.quote_header_id = in_quoteheaderid
      AND li.active = 'Y'
      AND plid.line_item_id = li.line_item_id
      and li.site_id = in_qreflist(1).o_siteid
      AND plid.external_qref = in_qreflist (1).o_aqref
      AND plid.active = 'Y';

   IF v_qref_associated > 0
   THEN
      FOR i IN in_qreflist.FIRST .. in_qreflist.LAST
      LOOP
         v_fallback_type := '';

         SELECT li.fallback_type
           INTO v_fallback_type
           FROM line_item li, price_line_item_detail plid
          WHERE li.quote_header_id = in_quoteheaderid
            AND li.active = 'Y'
            AND plid.line_item_id = li.line_item_id
            and li.site_id = in_qreflist (i).o_siteid
            AND plid.external_qref = in_qreflist (1).o_aqref
            AND plid.active = 'Y'
            AND ROWNUM < 2;

         IF v_fallback_type = 'Primary'
         THEN
            v_access_technology :=
               pkg_common.getprimaryaccesstechnology (in_quoteheaderid,
                                                      in_qreflist (i).o_siteid
                                                     );
         ELSE
            v_access_technology :=
               pkg_common.getsecondaryaccesstechnology
                                                     (in_quoteheaderid,
                                                      in_qreflist (i).o_siteid
                                                     );
         END IF;

         BEGIN

             SELECT trim(lid.VALUE)
              INTO v_cpe_contact_term
             FROM line_item_detail lid, line_item li
             WHERE li.active = 'Y'
              AND li.site_id = in_qreflist(i).o_siteid
              AND lid.active = 'Y'
              AND lid.line_item_id = li.line_item_id
              AND lid.attribute_mapping_id = 301
              AND UPPER (li.fallback_type) =UPPER(v_fallback_type)
              AND li.quote_header_id = in_quoteheaderid;

         EXCEPTION
           WHEN NO_DATA_FOUND THEN
              v_cpe_contact_term:='';
           WHEN OTHERS THEN
              v_cpe_contact_term:='';
         END;

         v_line_item_detail_tbl.EXTEND (1);
         v_line_item_detail_tbl (1) :=
            config_attr_obj (101,
                             'Configuration - Access',
                             in_qreflist (i).o_term,
                             0,
                             0,
                             'N'
                            );
         v_line_item_detail_tbl.EXTEND (1);
         v_line_item_detail_tbl (2) :=
            config_attr_obj (104,
                             'Configuration - Access',
                             in_qreflist (i).o_supplier,
                             0,
                             0,
                             'N'
                            );
         v_line_item_detail_tbl.EXTEND (1);
         v_line_item_detail_tbl (3) :=
            config_attr_obj (111,
                             'Configuration - Access',
                             in_qreflist (i).o_method,
                             0,
                             0,
                             'N'
                            );

         v_line_item_tbl.EXTEND (1);
         v_line_item_tbl (1) :=
            config_obj (in_qreflist (i).o_siteid,
                        222222,
                        'BT iVPN2 Access',
                        v_fallback_type,
                        '',
                        v_line_item_detail_tbl
                       );

       --- Attribute CPE 'Connector Type' to be saved under 'Configuration - CPE' -- 23/8/2011
       v_line_item_detail_cpe_tbl.extend(1);
       v_line_item_detail_cpe_tbl(1) :=
                     config_attr_obj
                     (
                        307,
                        'Configuration - CPE',
                        in_qreflist(i).o_connector,
                        0,
                        0,
                        'N'
                     );

       --- Attribute CPE 'contract Term' to be saved under 'Configuration - CPE' -- 23/8/2011
       v_line_item_detail_cpe_tbl.extend(1);
       v_line_item_detail_cpe_tbl(2) :=
                     config_attr_obj
                     (
                        301,
                        'Configuration - CPE',
                        v_cpe_contact_term,
                        0,
                        0,
                        'N'
                     );

       v_line_item_tbl.extend(1);
       v_line_item_tbl(2) :=
                    config_obj
                    (
                       in_qreflist(i).o_siteid,
                       978463,
                       'BT CPE',
                       v_fallback_type,
                       'Bundle',
                       v_line_item_detail_cpe_tbl
                    );
       ------ End of passing CPE configuration attribute ------


         pkg_quote.spi_multisite_config (in_quoteheaderid,
                                         v_line_item_tbl,
                                         'Quote',
                                         NULL,
                                         in_createdby,
                                         v_nextsite
                                        );
         -----Saving configuration starts
         v_pricing_tab.EXTEND (1);
         v_pricing_tab (1) :=
            pricing_obj (in_qreflist (i).o_siteid,
                         'BT iVPN2 Access',
                            v_access_technology
                         || ' Access - '
                         || v_fallback_type
                         || ' - Install-non-recurring',
                         in_qreflist (i).o_onetimechrg,
                         in_qreflist (i).o_costacccur,
                         'Install',
                         NULL,             --o_discount        NUMBER (10, 2),
                         NULL,              --o_disctype        VARCHAR2 (20),
                         v_fallback_type,         --o_fallback        VARCHAR2 (20),
                         in_qreflist (i).o_installcost,

                         --o_cost            NUMBER (10, 2),
                         'Install Cost',    --o_costtype        VARCHAR2 (50),
                         in_qreflist (i).o_costacccur,
                         --o_costcur         VARCHAR2 (10),
                         in_qreflist (i).o_aqref,
                         --o_extqref         VARCHAR2 (50),
                         NULL,               --o_reqstatus       varchar2(50),
                         NULL,              --o_errdesc         varchar2(100),
                         NULL,             --o_pripricingstatus  varchar2(50),
                         NULL,             --o_secpricingstatus  varchar2(50),
                         NULL,                 --o_quanty              NUMBER,
                         NULL,                  --o_rent_price NUMBER (10, 2),
                         NULL,                --o_line_item_detail_id  NUMBER,
                         NULL,                             --o_Row_id  NUMBER,
                         NULL,                         --o_product_id  NUMBER,
                         NULL,                            --o_netprice number,
                         NULL,                --o_pln_inventory_id number(10),
                         NULL,                        --o_ptp_eup varchar2(5),
                         NULL,                      --o_ptp_eup_id NUMBER(10),
                         NULL,            --o_discount_requested NUMBER(10,5),
                         NULL,         --o_discount_proposed     NUMBER(10,5),
                         NULL,           --o_classic_element_id VARCHAR2(255),
                         NULL,         --o_classic_element_name VARCHAR2(255),
                         NULL,            --ppsr_price_line_id  varchar2(255),
                         NULL,     --ppsr_price_line_description  varchar2(255)
                         NULL,          --o_billing_id,             Added for GHUCS R16 by KHADER,
                         NULL,        --o_billing_reference_name,   Added for GHUCS R16 by KHADER,
                         NULL,           --o_billing_start_date,     Added for GHUCS R16 by KHADER,
                         NULL           -- o_billing_end_date          Added for GHUCS R16 by KHADER
                        );
         v_pricing_tab.EXTEND (1);
         v_pricing_tab (2) :=
            pricing_obj (in_qreflist (i).o_siteid,
                         'BT iVPN2 Access',
                            v_access_technology
                         || ' Access - '
                         || v_fallback_type
                         || ' - Mthly-recurring',
                         in_qreflist (i).o_recchrg,
                         in_qreflist (i).o_costacccur,
                         'Mthly',
                         NULL,             --o_discount        NUMBER (10, 2),
                         NULL,              --o_disctype        VARCHAR2 (20),
                         v_fallback_type,         --o_fallback        VARCHAR2 (20),
                         in_qreflist (i).o_mnthlycost,

                         --o_cost            NUMBER (10, 2),
                         'Monthly Cost',    --o_costtype        VARCHAR2 (50),
                         in_qreflist (i).o_costacccur,
                         --o_costcur         VARCHAR2 (10),
                         in_qreflist (i).o_aqref,
                         --o_extqref         VARCHAR2 (50),
                         NULL,               --o_reqstatus       varchar2(50),
                         NULL,              --o_errdesc         varchar2(100),
                         NULL,             --o_pripricingstatus  varchar2(50),
                         NULL,             --o_secpricingstatus  varchar2(50),
                         NULL,                 --o_quanty              NUMBER,
                         NULL,                  --o_rent_price NUMBER (10, 2),
                         NULL,                --o_line_item_detail_id  NUMBER,
                         NULL,                             --o_Row_id  NUMBER,
                         NULL,                         --o_product_id  NUMBER,
                         NULL,                            --o_netprice number,
                         NULL,                --o_pln_inventory_id number(10),
                         NULL,                        --o_ptp_eup varchar2(5),
                         NULL,                      --o_ptp_eup_id NUMBER(10),
                         NULL,            --o_discount_requested NUMBER(10,5),
                         NULL,         --o_discount_proposed     NUMBER(10,5),
                         NULL,           --o_classic_element_id VARCHAR2(255),
                         NULL,         --o_classic_element_name VARCHAR2(255),
                         NULL,            --ppsr_price_line_id  varchar2(255),
                         NULL,     --ppsr_price_line_description  varchar2(255),
                         NULL,          --o_billing_id,             Added for GHUCS R16 by KHADER,
                         NULL,        --o_billing_reference_name,   Added for GHUCS R16 by KHADER,
                         NULL,           --o_billing_start_date,     Added for GHUCS R16 by KHADER,
                         NULL           -- o_billing_end_date          Added for GHUCS R16 by KHADER
                        );
         pkg_lineitem.spi_multisite_pricing (in_quoteheaderid,
                                             v_pricing_tab,
                                             in_createdby,
                                             out_status,
                                             out_errmsg
                                            );
      END LOOP;
   END IF;
    END IF;
   out_status := pkg_constants.con_status_success;
EXCEPTION
   WHEN OTHERS
   THEN
      out_status := pkg_constants.con_status_failure;
      out_errmsg := SQLERRM;
END spi_access_qref_optimize;


PROCEDURE spi_associate_aqref_with_quote (
   in_access_qref_id     IN       access_qref.access_qref_id%TYPE,
   in_createdby       IN       access_qref.created_by%TYPE,
   out_status         OUT      NUMBER,
   out_errmsg         OUT      VARCHAR2
)
AS
   v_quotesiteid             quote_site.quote_site_id%TYPE;
   v_qrefid                  access_qref.access_qref_id%TYPE;
   v_currdate                TIMESTAMP;
   v_site_id                 site.site_id%TYPE;
   v_quote_site_id           quote_site.quote_site_id%TYPE;
   v_term                    access_qref.term%TYPE;
   v_supplier                access_qref.supplier%TYPE;
   v_one_time_charge         access_qref.one_time_charge%TYPE;
   v_cost_access_currency    access_qref.cost_access_currency%TYPE;
   v_install_cost            access_qref.install_cost%TYPE;
   v_recurring_charge        access_qref.recurring_charge%TYPE;
   v_monthly_cost            access_qref.monthly_cost%TYPE;
   v_line_item_detail_tbl    config_attr_tab            := config_attr_tab
                                                                          ();
   v_line_item_tbl           config_tab                      := config_tab
                                                                          ();
   v_pricing_tab             pricing_tab                    := pricing_tab
                                                                          ();
   v_nextsite                site.site_id%TYPE;
   v_primary_access_tech     VARCHAR2 (255);
   v_secondary_access_tech   VARCHAR2 (255);
   v_string_install          VARCHAR2 (1000);
   v_string_monthly          VARCHAR2 (1000);
   V_LEG_ID                  ACCESS_QREF.LEG_ID%TYPE;
   v_fallback                line_item.fallback_type%TYPE;
   V_ACCESS_QREF            ACCESS_QREF.ACCESS_QREF%TYPE;
   v_quoteheaderid     QUOTE_HEADER.QUOTE_HEADER_ID%TYPE;
BEGIN
   SELECT QS.SITE_ID, AQ.QUOTE_SITE_ID,AQ.ACCESS_QREF,QS.QUOTE_HEADER_ID
     INTO v_site_id, v_quote_site_id,v_access_qref,v_quoteheaderid
     FROM quote_site qs, access_qref aq
    WHERE aq.access_qref_id = in_access_qref_id
    and qs.quote_site_id = aq.quote_site_id
      AND qs.active = 'Y';


   v_primary_access_tech :=
           pkg_common.getprimaryaccesstechnology (v_quoteheaderid, v_site_id);
   v_secondary_access_tech :=
         pkg_common.getsecondaryaccesstechnology (v_quoteheaderid, v_site_id);

   FOR i IN (SELECT term, supplier, one_time_charge, cost_access_currency,
                    install_cost, recurring_charge, monthly_cost, leg_id
               FROM access_qref
              WHERE access_qref_id = in_access_qref_id)
   LOOP
      v_term := i.term;
      v_supplier := i.supplier;
      v_one_time_charge := i.one_time_charge;
      v_cost_access_currency := i.cost_access_currency;
      v_install_cost := i.install_cost;
      V_RECURRING_CHARGE := I.RECURRING_CHARGE;
      v_monthly_cost := i.monthly_cost;
      v_leg_id := i.leg_id;

      IF UPPER (TRIM (v_leg_id)) = 'LEG1'
      THEN
      v_fallback:= 'Primary';
         v_string_install :=
               v_primary_access_tech
            || ' Access - '
            || 'Primary'
            || ' - Install-non-recurring';
         v_string_monthly :=
               v_primary_access_tech
            || ' Access - '
            || 'Primary'
            || ' Mthly-recurring';
      ELSE
      v_fallback:= 'Secondary';
         v_string_install :=
               v_secondary_access_tech
            || ' Access - '
            || 'Secondary'
            || ' - Install-non-recurring';
         v_string_monthly :=
               v_secondary_access_tech
            || ' Access - '
            || 'Secondary'
            || ' Mthly-recurring';
      END IF;

      v_line_item_detail_tbl.EXTEND (1);
      v_line_item_detail_tbl (1) :=
            config_attr_obj (101, 'Configuration - Access', v_term, 0, 0, 'N');
      v_line_item_detail_tbl.EXTEND (1);
      v_line_item_detail_tbl (2) :=
         config_attr_obj (104, 'Configuration - Access', v_supplier, 0, 0,
                          'N');
      v_line_item_tbl.EXTEND (1);
      v_line_item_tbl (1) :=
         config_obj (v_site_id,
                     222222,
                     'BT iVPN2 Access',
                     v_fallback,
                     '',
                     v_line_item_detail_tbl
                    );
      pkg_quote.spi_multisite_config (v_quoteheaderid,
                                      v_line_item_tbl,
                                      'Quote',
                                      NULL,
                                      in_createdby,
                                      v_nextsite
                                     );
      -----Saving configuration starts
      v_pricing_tab.EXTEND (1);
      v_pricing_tab (1) :=
         pricing_obj (v_site_id,
                      'BT iVPN2 Access',
                      v_string_install,
                      v_one_time_charge,
                      v_cost_access_currency,
                      'Install',
                      NULL,                --o_discount        NUMBER (10, 2),
                      NULL,                 --o_disctype        VARCHAR2 (20),
                      v_fallback,     --o_fallback        VARCHAR2 (20),
                      v_install_cost,

                      --o_cost            NUMBER (10, 2),
                      'Install Cost',       --o_costtype        VARCHAR2 (50),
                      v_cost_access_currency,
                      --o_costcur         VARCHAR2 (10),
                      v_access_qref,
                      --o_extqref         VARCHAR2 (50),
                      NULL,                  --o_reqstatus       varchar2(50),
                      NULL,                 --o_errdesc         varchar2(100),
                      NULL,                --o_pripricingstatus  varchar2(50),
                      NULL,                --o_secpricingstatus  varchar2(50),
                      NULL,                    --o_quanty              NUMBER,
                      NULL,                     --o_rent_price NUMBER (10, 2),
                      NULL,                   --o_line_item_detail_id  NUMBER,
                      NULL,                                --o_Row_id  NUMBER,
                      NULL,                            --o_product_id  NUMBER,
                      NULL,                               --o_netprice number,
                      NULL,                   --o_pln_inventory_id number(10),
                      NULL,                           --o_ptp_eup varchar2(5),
                      NULL,                         --o_ptp_eup_id NUMBER(10),
                      NULL,               --o_discount_requested NUMBER(10,5),
                      NULL,            --o_discount_proposed     NUMBER(10,5),
                      NULL,              --o_classic_element_id VARCHAR2(255),
                      NULL,            --o_classic_element_name VARCHAR2(255),
                      NULL,               --ppsr_price_line_id  varchar2(255),
                      NULL,        --ppsr_price_line_description  varchar2(255),
                      NULL,          --o_billing_id,             Added for GHUCS R16 by KHADER,
                         NULL,        --o_billing_reference_name,   Added for GHUCS R16 by KHADER,
                         NULL,           --o_billing_start_date,     Added for GHUCS R16 by KHADER,
                         NULL           -- o_billing_end_date          Added for GHUCS R16 by KHADER
                     );
      v_pricing_tab.EXTEND (1);
      v_pricing_tab (2) :=
         pricing_obj (v_site_id,
                      'BT iVPN2 Access',
                      v_string_monthly,
                      v_recurring_charge,
                      v_cost_access_currency,
                      'Mthly',
                      NULL,                --o_discount        NUMBER (10, 2),
                      NULL,                 --o_disctype        VARCHAR2 (20),
                      v_fallback,     --o_fallback        VARCHAR2 (20),
                      v_monthly_cost,

                      --o_cost            NUMBER (10, 2),
                      'Monthly Cost',       --o_costtype        VARCHAR2 (50),
                      v_cost_access_currency,
                      --o_costcur         VARCHAR2 (10),
                      v_access_qref,
                      --o_extqref         VARCHAR2 (50),
                      NULL,                  --o_reqstatus       varchar2(50),
                      NULL,                 --o_errdesc         varchar2(100),
                      NULL,                --o_pripricingstatus  varchar2(50),
                      NULL,                --o_secpricingstatus  varchar2(50),
                      NULL,                    --o_quanty              NUMBER,
                      NULL,                     --o_rent_price NUMBER (10, 2),
                      NULL,                   --o_line_item_detail_id  NUMBER,
                      NULL,                                --o_Row_id  NUMBER,
                      NULL,                            --o_product_id  NUMBER,
                      NULL,                               --o_netprice number,
                      NULL,                   --o_pln_inventory_id number(10),
                      NULL,                           --o_ptp_eup varchar2(5),
                      NULL,                         --o_ptp_eup_id NUMBER(10),
                      NULL,               --o_discount_requested NUMBER(10,5),
                      NULL,            --o_discount_proposed     NUMBER(10,5),
                      NULL,              --o_classic_element_id VARCHAR2(255),
                      NULL,            --o_classic_element_name VARCHAR2(255),
                      NULL,
                      --ppsr_price_line_id  varchar2(255),
                      NULL,        --ppsr_price_line_description  varchar2(255),
                      NULL,          --o_billing_id,             Added for GHUCS R16 by KHADER,
                         NULL,        --o_billing_reference_name,   Added for GHUCS R16 by KHADER,
                         NULL,           --o_billing_start_date,     Added for GHUCS R16 by KHADER,
                         NULL           -- o_billing_end_date          Added for GHUCS R16 by KHADER
                     );
      pkg_lineitem.spi_multisite_pricing (v_quoteheaderid,
                                          v_pricing_tab,
                                          in_createdby,
                                          out_status,
                                          out_errmsg
                                         );
   END LOOP;

   out_status := pkg_constants.con_status_success;
EXCEPTION
   WHEN OTHERS
   THEN
      out_status := pkg_constants.con_status_failure;
      out_errmsg := SQLERRM;
END spi_associate_aqref_with_quote;

PROCEDURE spi_pricing_tobe_pri_to_sec ( in_quote_header_id  IN   quote_header.quote_header_id%TYPE,
                                                          in_site_id          IN   site.site_id%TYPE,
                                                          out_status          OUT  NUMBER,
                                                          out_errmsg          OUT  VARCHAR2,
                                                          in_prod_list        IN   VARCHAR2
                                                         )
AS
    v_pricing_tab    pricing_tab                := pricing_tab();
    v_service_name   quote_site_service.service_name%TYPE;

BEGIN

   SELECT PRICING_OBJ(
                       li.site_id,
                       li.product_name,
                       pli.price_line_description||'-Delete',
                       plid.price,
                       plid.currency,
                       plid.CHARGE_TYPE,
                       plid.DISCOUNT,
                       DISCOUNT_TYPE,
                       'Secondary',--'li.fallback_type,
                       null,--cd.cost,
                       null,--cd.cost_type,
                       null,--cd.CURRENCY,
                       plid.EXTERNAL_QREF,
                       plid.REQUEST_STATUS,
                       plid.ERROR_DESCRIPTION,
                       plid.PRIMARY_PRICING_STATUS,
                       plid.SECONDARY_PRICING_STATUS,
                       plid.quantity,
                       plid.RENT_PRICE,
                       li.line_item_id,
                       plid.row_id,
                       li.product_id,
                       plid.NET_PRICE,
                       plid.PLN_INVENTORY_ID,
                       plid.PTP_EUP,
                       plid.PTP_EUP_ID,
                       plid.DISCOUNT_REQUESTED,
                       plid.DISCOUNT_PROPOSED,
                       plid.CLASSIC_ELEMENT_ID,
                       plid.CLASSIC_ELEMENT_NAME,
                       plid.PPSR_PRICE_LINE_ID,
                       plid.PPSR_PRICE_LINE_DESCRIPTION,
                        NULL,          --o_billing_id,             Added for GHUCS R16 by KHADER,
                        NULL,        --o_billing_reference_name,   Added for GHUCS R16 by KHADER,
                        NULL,           --o_billing_start_date,     Added for GHUCS R16 by KHADER,
                        NULL           -- o_billing_end_date          Added for GHUCS R16 by KHADER
                      ) bulk collect into v_pricing_tab
   FROM quote_line_item_as_is li, price_line_item pli, price_line_item_detail_as_is plid--, cost_detail_as_is cd
   WHERE li.quote_headeR_id =in_quote_header_id
   AND li.site_id =in_site_id
   AND plid.line_item_id = li.line_item_id
   AND pli.price_line_item_id = plid.price_line_item_id
   AND li.active = 'Y'
   AND plid.active = 'Y'
   --AND cd.price_line_item_detail_id = plid.price_line_item_detail_id
   AND UPPER(li.fallback_type) = 'PRIMARY'
   --AND UPPER(li.product_name) <>'BT IVPN2 GLOBAL'
   AND UPPER(li.product_name) IN (
                                   SELECT UPPER(column_value)
                                     FROM TABLE
                                             (CAST
                                                 (pkg_common.fn_splitdata (in_prod_list,
                                                                           ','
                                                                          ) AS varchar2_ntt
                                                 )
                                             ))
   AND EXISTS(SELECT 1 FROM price_line_item WHERE price_line_description =pli.price_line_description||'-Delete');


  SELECT DISTINCT service_name into v_service_name
  FROM quote_site_service qss, line_item li
  WHERE li.quote_header_id = in_quote_header_id
  AND li.site_id = in_site_id
  AND qss.quote_site_service_id = li.quote_site_service_id
  AND UPPER(li.fallback_type) = 'PRIMARY';



      pkg_lineitem.spi_pricing_modify (
                          in_quote_header_id,
                          v_pricing_tab,
                          in_site_id,
                          v_service_name,
                          null,
                          out_status,
                          out_errmsg
                       );

    IF   out_status <>1  THEN
        out_errmsg :=out_errmsg||'-spi_pricing_modify failed';
        RETURN;
    END IF;

    UPDATE price_line_item_detail
     SET action_code='DELETE'
     WHERE line_item_id IN (
              SELECT line_item_id
                FROM line_item li
               WHERE li.quote_header_id = in_quote_header_id
                 AND li.site_id = in_site_id
                 AND active = 'Y'
                 AND UPPER (li.fallback_type) = 'SECONDARY'
                 --AND UPPER (li.product_name) <> 'BT IVPN2 GLOBAL')
                   AND UPPER(li.product_name) IN (
                                                   SELECT UPPER(column_value)
                                                     FROM TABLE
                                                             (CAST
                                                                 (pkg_common.fn_splitdata (in_prod_list,
                                                                                           ','
                                                                                          ) AS varchar2_ntt
                                                                 )
                                                             )))
     AND active = 'Y'
     AND price_line_item_id in (SELECT price_line_item_id FROM price_line_item pli WHERE pli.price_line_item_id between 2203 and 2216);
    /*
    FOR i IN v_pricing_tab.FIRST .. v_pricing_tab.LAST
      LOOP
        dbms_output.put_line(v_pricing_tab (i).o_fallback);
      END LOOP;
   */

      out_status := pkg_constants.con_status_success;
EXCEPTION
   WHEN OTHERS
   THEN
      out_status := pkg_constants.con_status_failure;
      out_errmsg := SQLERRM;

END;


   PROCEDURE spi_pricing_quoteheader(
    in_quote_id             IN NUMBER,
    in_quote_header_id      IN NUMBER,
    in_site_id              IN NUMBER,
    in_product_id           IN NUMBER,
    in_quote_status         IN VARCHAR2,
    in_createdby            IN VARCHAR2,
    in_discount_app         IN VARCHAR2,
    in_bid_manager_email_id IN VARCHAR2,
    in_sales_user_reason    IN VARCHAR2,
    in_bid_manager_reason   IN VARCHAR2,
    out_status                out VARCHAR2,
    in_product_name               IN       VARCHAR2 DEFAULT NULL)
AS
/******************************************************************************
   NAME:       SQE Mobile Express -spi_pricing_quoteheader mx.
   PURPOSE:    Pricing Header Grid
   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        26/12/2010   Archana


 ******************************************************************************/
  v_count NUMBER;
  v_bid   NUMBER;
  v_sql_code     NUMBER;
  v_sql_errm     VARCHAR2(150);
BEGIN
  SELECT count (*)
  INTO v_count
  FROM quote_header
  WHERE quote_header_id = in_quote_header_id
  AND quote_id          =in_quote_id;


  IF (v_count           = 0) THEN
      out_status         := pkg_constants.con_status_duplicate;
  ELSE
      BEGIN
            UPDATE quote_header
            SET status              = in_quote_status,
                modified_by         = in_createdby,
                modified_date       = SYSDATE ()
            WHERE quote_header_id = in_quote_header_id;
            UPDATE quote_status
            SET status              = in_quote_status
            WHERE quote_header_id = in_quote_header_id
             AND upper(product_name) = upper(in_product_name);
      END;
  END IF ;

  SELECT count(*)
  INTO v_bid
  FROM bid_detail bd
  WHERE bd.quote_header_id=in_quote_header_id;

  IF(v_bid                =0) THEN
    INSERT
    INTO bid_detail
      (
        bid_detail_id,
        quote_header_id,
        site_id,
        product_id,
        product_name,
        created_by,
        created_date,
        active,
        discount_approved_rejected_by,
        bid_manager_email_id,
        sales_user_reason,
        bid_manager_reason
      )
      VALUES
      (
        bid_detail_id.nextval,
        in_quote_header_id,
        in_site_id,
        in_product_id,
        'BT MobileXpress',
        in_createdby,
        SYSDATE,
        'Y',
        in_discount_app,
        in_bid_manager_email_id,
        in_sales_user_reason,
        in_bid_manager_reason
      );
  ELSE
    UPDATE bid_detail
    SET discount_approved_rejected_by=in_discount_app,
      bid_manager_email_id           =in_bid_manager_email_id,
      sales_user_reason              =in_sales_user_reason,
      bid_manager_reason             =in_bid_manager_reason,
      site_id                         =in_site_id
      WHERE quote_header_id =  in_quote_header_id
      AND product_id      =in_product_id;

  END IF;
  out_status := pkg_constants.con_status_success;

exception
WHEN others THEN
   out_status := pkg_constants.con_status_failure;
       v_sql_code := sqlcode;
       pkg_common.spi_error_log(
                                  in_quote_id,
                                  in_quote_header_id,
                                  in_site_id,
                                  NULL,
                                  NULL,
                                  'SPI_PRICING_QUOTE',
                                  v_sql_code,
                                  substr(sqlerrm,1,150)
                                 );

END SPI_PRICING_QUOTEHEADER;

-- Added the below SP on 5/9/2011 - Start
PROCEDURE spi_associate_cheap_optqref (
   in_quoteheader_id     IN       quote_header.quote_header_id%TYPE,
   in_createdby          IN       quote_header.created_by%TYPE,
   out_status            OUT      NUMBER,
   out_errmsg            OUT      VARCHAR2
 )
AS

    v_aqref_obj_hash_tab        aqref_obj_hash_tab := aqref_obj_hash_tab();
    v_line_item_detail_tbl      config_attr_tab    := config_attr_tab();
    v_line_item_detail_acc_tbl  config_attr_tab    := config_attr_tab();
    v_line_item_tbl             config_tab         := config_tab();
    v_pricing_tab               pricing_tab        := pricing_tab();

    v_site_id               number;
    v_resiliency            varchar2(500);
    v_cheap_aqref           varchar2(500);
    v_acc_tech              varchar2(500);
    v_acc_type              varchar2(500);
    v_acc_speed             varchar2(500);
    v_supplier              varchar2(500);
    v_leg_id                varchar2(500);
    v_pair_id               number;
    v_install_cost          number(10,2);
    v_monthly_cost          number(10,2);
    v_currency              varchar2(500);
    v_cheapest_cost         number(10,2);
    v_prev_cheapest_cost    number(10,2);
    v_nextsite              number;
    v_fallback_type         varchar2(500);

    v_aqref_pair            varchar2(500);
    v_acc_tech_pair         varchar2(500);
    v_acc_type_pair         varchar2(500);
    v_acc_speed_pair        varchar2(500);
    v_supplier_pair         varchar2(500);
    v_leg_id_pair           varchar2(500);
    v_pair_id_pair          number;
    v_install_cost_pair     number(10,2);
    v_monthly_cost_pair     number(10,2);
    v_currency_pair         varchar2(500);

    x                       number;


BEGIN

   SELECT aqref_obj_hash(qs.site_id,
              CAST (MULTISET (SELECT site_id, access_qref, pricing_status,
                                     access_speed, supplier, lead_time,
                                     port_speed, one_time_charge,
                                     recurring_charge, port_speed_value,
                                     port_uom, access_speed_value, access_uom,
                                     access_product_type, access_technology,
                                     supplier_product_name, gpop_node,
                                     distance_gpop, apop_node, distance_apop,
                                     term, leg_id, pair_id,
                                     expiry_date_time_zone, tariff_zone_name,
                                     no_of_copper_pairs, circuit_interface,
                                     auto_priced_flag, budgetary_priced_flag,
                                     interface_type, framing_details,
                                     connector, install_cost, supplier_cost,
                                     backhaul_cost, local_tail_cost,
                                     cost_access_currency, resiliency_flag,
                                     comments, nni_flag, support_24x7,
                                     sent_to_ape, monthly_cost, access_type,
                                     expiry_date, apop_flag, port_status,
                                     gpop_id, apop_id,
                                     port_speed_avail_status, method,
                                     aggregator_quote_line_id, encapsulation,
                                     guaranteed_speed, time_to_deliver,
                                     isp_addressing, monthly_recurring_charge,
                                     non_recurring_charge,
                                     access_availability, service_catagory,
                                     other_service_notes, additional_charges,
                                     tranaction_type, hvpn_access_technology,
                                     pricing_id, service_id, copper_details,
                                     copper_service_id, rfa_notes, mrc, nrc,
                                     tarrif_zone, rfo_notes,null, copper_pair,
                                     ethernet_phase_attribute,
                                     non_std_qref_flag, ape_comments,
                                     apop_code, cease_charges, gpop,
                                     gpop_code, network_type, partner_name,
                                     ptp_mrc, ptp_nrc, qref_type, rbpurl,
                                     resiliency, staff_member_email,
                                     staff_member_name, support_24_7,
                                     workflow_status, service_variant,
                                     optm_qref, optm_rental_cost_y1,
                                     optm_rental_cost_y2, optm_rental_cost_y3,
                                     optm_rental_cost_y4, optm_rental_cost_y5,
                                     optm_rental_price_y1,
                                     optm_rental_price_y2,
                                     optm_rental_price_y3,
                                     optm_rental_price_y4,
                                     optm_rental_price_y5, optm_install_y1,
                                     install_percent_reduction_y1,
                                     percent_reduction_cost_y1,
                                     percent_reduction_cost_y2,
                                     percent_reduction_cost_y3,
                                     percent_reduction_cost_y4,
                                     percent_reduction_cost_y5, tpe_ref_id,
                                     supplier_ref_id
                                FROM access_qref
                               WHERE quote_site_id = qs.quote_site_id
                                 AND UPPER (workflow_status) = 'OPTIMIZED'
                             ) AS aqref_tab
                   )
             )
 BULK COLLECT INTO v_aqref_obj_hash_tab
  FROM quote_site qs
 WHERE qs.active = 'Y'
   --AND UPPER (aq.workflow_status) = 'OPTIMIZED'
   AND qs.quote_header_id = in_quoteheader_id
   AND EXISTS (
          SELECT 1
            FROM price_line_item_detail plid, line_item li
           WHERE li.quote_header_id = in_quoteheader_id
             AND li.site_id = qs.site_id
             AND li.active = 'Y'
             AND plid.active = 'Y'
             AND plid.line_item_id = li.line_item_id
             AND TRIM (plid.external_qref) IS NOT NULL);

   FOR i IN v_aqref_obj_hash_tab.FIRST .. v_aqref_obj_hash_tab.LAST
   LOOP

       v_site_id := v_aqref_obj_hash_tab(i).o_site_id;

       x := 1;

       FOR j IN v_aqref_obj_hash_tab(i).o_aqref.FIRST .. v_aqref_obj_hash_tab(i).o_aqref.LAST
       LOOP

           v_install_cost  := v_aqref_obj_hash_tab(i).o_aqref(j).o_installcost;
           v_monthly_cost  := v_aqref_obj_hash_tab(i).o_aqref(j).o_mnthlycost;
           v_cheapest_cost := v_install_cost + (12* v_monthly_cost);

           IF v_cheapest_cost < v_prev_cheapest_cost
           THEN
              v_cheap_aqref := v_aqref_obj_hash_tab(i).o_aqref(j).o_aqref;
              v_acc_tech    := v_aqref_obj_hash_tab(i).o_aqref(j).o_acctech;
              v_acc_type    := v_aqref_obj_hash_tab(i).o_aqref(j).o_acctype;
              v_acc_speed   := v_aqref_obj_hash_tab(i).o_aqref(j).o_accspeed;
              v_supplier    := v_aqref_obj_hash_tab(i).o_aqref(j).o_supplier;
              v_leg_id      := v_aqref_obj_hash_tab(i).o_aqref(j).o_legid;
              v_pair_id     := v_aqref_obj_hash_tab(i).o_aqref(j).o_pairid;
              -- Required for saving pricing details
              v_install_cost  := v_aqref_obj_hash_tab(i).o_aqref(j).o_installcost;
              v_monthly_cost  := v_aqref_obj_hash_tab(i).o_aqref(j).o_mnthlycost;
              v_currency      := v_aqref_obj_hash_tab(i).o_aqref(j).o_costacccur;
              --
              v_prev_cheapest_cost := v_cheapest_cost;

           END IF;

           IF x = 1 THEN
              v_prev_cheapest_cost := v_cheapest_cost;

              v_cheap_aqref := v_aqref_obj_hash_tab(i).o_aqref(j).o_aqref;
              v_acc_tech    := v_aqref_obj_hash_tab(i).o_aqref(j).o_acctech;
              v_acc_type    := v_aqref_obj_hash_tab(i).o_aqref(j).o_acctype;
              v_acc_speed   := v_aqref_obj_hash_tab(i).o_aqref(j).o_accspeed;
              v_supplier    := v_aqref_obj_hash_tab(i).o_aqref(j).o_supplier;
              v_leg_id      := v_aqref_obj_hash_tab(i).o_aqref(j).o_legid;
              v_pair_id     := v_aqref_obj_hash_tab(i).o_aqref(j).o_pairid;
              -- Required for saving pricing details
              v_install_cost  := v_aqref_obj_hash_tab(i).o_aqref(j).o_installcost;
              v_monthly_cost  := v_aqref_obj_hash_tab(i).o_aqref(j).o_mnthlycost;
              v_currency      := v_aqref_obj_hash_tab(i).o_aqref(j).o_costacccur;
              --

           END IF;

           -- Access Tech being returned from APE can be like hVPN-Wireless, hVPN-DSL, hVPN-Cable, etc
           IF UPPER(v_acc_tech) LIKE '%LEASED LINE%'
           THEN
              v_acc_tech := 'Leased Line';
           ELSIF UPPER(v_acc_tech) LIKE '%ETHERNET%'
           THEN
              v_acc_tech := 'Ethernet';
           ELSIF UPPER(v_acc_tech) LIKE '%HVPN%'
           THEN
              v_acc_tech := 'HVPN';
           END IF;

           x := x+1;

       END LOOP;

       BEGIN
       SELECT lid.value
         INTO v_resiliency
         FROM line_item_detail lid,
              line_item li
        WHERE lid.line_item_id = li.line_item_id
          AND li.active = 'Y'
          AND lid.active = 'Y'
          AND li.site_id IS NOT NULL
          AND li.quote_header_id = in_quoteheader_id
          AND li.site_id = v_site_id
          AND lid.attribute_mapping_id = 1;
       EXCEPTION
       WHEN OTHERS THEN
           out_status := pkg_constants.con_status_failure;
           out_errmsg := 'Access Resiliency not found';
       END;


       IF UPPER(v_resiliency) IN ('STANDARD', 'STANDARD - UNBUNDLED')
       THEN

       --- Attributes 'Access Technology', 'Access Type', 'Access Speed'
       --- are to be saved under 'Configuration - General'
       v_line_item_detail_tbl.extend(1);
       v_line_item_detail_tbl(1) :=
                     config_attr_obj
                     (
                        3,
                        'Configuration - General',
                        v_acc_tech,
                        0,
                        null,
                        'N'
                     ) ;

       v_line_item_detail_tbl.extend(1);
       v_line_item_detail_tbl(2) :=
                     config_attr_obj
                     (
                        5,
                        'Configuration - General',
                        v_acc_type,
                        0,
                        null,
                        'N'
                     ) ;

       v_line_item_detail_tbl.extend(1);
       v_line_item_detail_tbl(3) :=
                     config_attr_obj
                     (
                        7,
                        'Configuration - General',
                        v_acc_speed,
                        0,
                        null,
                        'N'
                     );

       v_line_item_tbl.extend(1);
       v_line_item_tbl(1) :=
                    config_obj
                    (
                       v_site_id,
                       967966,
                       'BT iVPN2 Global',
                       'Primary',
                       null,
                       v_line_item_detail_tbl
                    );
       ------ End of passing General section attributes ------

       --- Attribute 'Supplier Name' to be saved under 'Configuration - Access'
       v_line_item_detail_acc_tbl.extend(1);
       v_line_item_detail_acc_tbl(1) :=
                     config_attr_obj
                     (
                        104,
                        'Configuration - Access',
                        v_supplier,
                        0,
                        null,
                        'N'
                     );

       v_line_item_tbl.extend(1);
       v_line_item_tbl(2) :=
                    config_obj
                    (
                       v_site_id,
                       222222,
                       'BT iVPN2 Access',
                       'Primary',
                       null,
                       v_line_item_detail_acc_tbl
                    );
       ------ End of passing Access configuration attribute ------

       pkg_quote.spi_multisite_config
                (
                  in_quoteheader_id,
                  v_line_item_tbl,
                  'Quote',
                  NULL,
                  in_createdby,
                  v_nextsite
                );

       /******** Saving pricing details for Primary fallback ********/
         v_pricing_tab.EXTEND(1);
         v_pricing_tab (1) :=
            pricing_obj (v_site_id,
                         'BT iVPN2 Access',
                         v_acc_tech||' Access - '||v_fallback_type|| ' - Install-non-recurring', -- o_pricelineitem
                         v_install_cost,                 -- o_price
                         v_currency,                     -- o_currency
                         'Install',                      -- o_chargetype
                         NULL,                           -- o_discount
                         NULL,                           -- o_disctype
                         'Primary',                      -- o_fallback
                         v_install_cost,                 -- o_cost
                         'Install Cost',                 -- o_costtype
                         v_currency,                     -- o_costcur
                         v_cheap_aqref,                  -- o_extqref
                         NULL,                           -- o_reqstatus
                         NULL,                           -- o_errdesc
                         NULL,                           -- o_pripricingstatus
                         NULL,                           -- o_secpricingstatus
                         NULL,                           -- o_quanty
                         NULL,                           -- o_rent_price
                         NULL,                           -- o_line_item_detail_id
                         NULL,                           -- o_Row_id
                         NULL,                           -- o_product_id
                         NULL,                           -- o_netprice
                         NULL,                           -- o_pln_inventory_id
                         NULL,                           -- o_ptp_eup
                         NULL,                           -- o_ptp_eup_id
                         NULL,                           -- o_discount_requested
                         NULL,                           -- o_discount_proposed
                         NULL,                           -- o_classic_element_id
                         NULL,                           -- o_classic_element_name
                         NULL,                           -- ppsr_price_line_id
                         NULL,                           -- ppsr_price_line_description
                         NULL,                           -- o_billing_id,             Added for GHUCS R16 by KHADER,
                         NULL,                           -- o_billing_reference_name, Added for GHUCS R16 by KHADER,
                         NULL,                           -- o_billing_start_date,     Added for GHUCS R16 by KHADER,
                         NULL                            -- o_billing_end_date        Added for GHUCS R16 by KHADER
);

         v_pricing_tab.EXTEND(1);
         v_pricing_tab (2) :=
            pricing_obj (v_site_id,
                         'BT iVPN2 Access',
                         v_acc_tech||' Access - '||v_fallback_type|| ' - Mthly-recurring', -- o_pricelineitem
                         v_monthly_cost,                 -- o_price
                         v_currency,                     -- o_currency
                         'Mthly',                        -- o_chargetype
                         NULL,                           -- o_discount
                         NULL,                           -- o_disctype
                         'Primary',                      -- o_fallback
                         v_monthly_cost,                 -- o_cost
                         'Monthly Cost',                 -- o_costtype
                         v_currency,                     -- o_costcur
                         v_cheap_aqref,                  -- o_extqref
                         NULL,                           -- o_reqstatus
                         NULL,                           -- o_errdesc
                         NULL,                           -- o_pripricingstatus
                         NULL,                           -- o_secpricingstatus
                         NULL,                           -- o_quanty
                         NULL,                           -- o_rent_price
                         NULL,                           -- o_line_item_detail_id
                         NULL,                           -- o_Row_id
                         NULL,                           -- o_product_id
                         NULL,                           -- o_netprice
                         NULL,                           -- o_pln_inventory_id
                         NULL,                           -- o_ptp_eup
                         NULL,                           -- o_ptp_eup_id
                         NULL,                           -- o_discount_requested
                         NULL,                           -- o_discount_proposed
                         NULL,                           -- o_classic_element_id
                         NULL,                           -- o_classic_element_name
                         NULL,                           -- ppsr_price_line_id
                         NULL,                           -- ppsr_price_line_description
                         NULL,                           -- o_billing_id,             Added for GHUCS R16 by KHADER,
                         NULL,                           -- o_billing_reference_name, Added for GHUCS R16 by KHADER,
                         NULL,                           -- o_billing_start_date,     Added for GHUCS R16 by KHADER,
                         NULL                            -- o_billing_end_date        Added for GHUCS R16 by KHADER
);

         pkg_lineitem.spi_multisite_pricing
                      (
                          in_quoteheader_id,
                          v_pricing_tab,
                          in_createdby,
                          out_status,
                          out_errmsg
                      );
       /******** Saving pricing details for Primary fallback ********/

       ELSIF UPPER(v_resiliency) IN ('SECURE', 'SECURE+', 'ACCESS BACKUP')
       THEN
           IF (upper(v_leg_id) = 'LEG1' or v_leg_id is null)
           THEN
              v_fallback_type := 'Primary';
           ELSE
              v_fallback_type := 'Secondary';
           END IF;

           --- Attributes 'Access Technology', 'Access Type', 'Access Speed'
           --- are to be saved under 'Configuration - General'
           v_line_item_detail_tbl.extend(1);
           v_line_item_detail_tbl(1) :=
                         config_attr_obj
                         (
                            3,
                            'Configuration - General',
                            v_acc_tech,
                            0,
                            null,
                            'N'
                         ) ;

           v_line_item_detail_tbl.extend(1);
           v_line_item_detail_tbl(2) :=
                         config_attr_obj
                         (
                            5,
                            'Configuration - General',
                            v_acc_type,
                            0,
                            null,
                            'N'
                         ) ;

           v_line_item_detail_tbl.extend(1);
           v_line_item_detail_tbl(3) :=
                         config_attr_obj
                         (
                            7,
                            'Configuration - General',
                            v_acc_speed,
                            0,
                            null,
                            'N'
                         );

           v_line_item_tbl.extend(1);
           v_line_item_tbl(1) :=
                        config_obj
                        (
                           v_site_id,
                           967966,
                           'BT iVPN2 Global',
                           v_fallback_type,
                           null,
                           v_line_item_detail_tbl
                        );
           ------ End of passing General section attributes ------

           --- Attribute 'Supplier Name' to be saved under 'Configuration - Access'
           v_line_item_detail_acc_tbl.extend(1);
           v_line_item_detail_acc_tbl(1) :=
                         config_attr_obj
                         (
                            104,
                            'Configuration - Access',
                            v_supplier,
                            0,
                            null,
                            'N'
                         );

           v_line_item_tbl.extend(1);
           v_line_item_tbl(2) :=
                        config_obj
                        (
                           v_site_id,
                           222222,
                           'BT iVPN2 Access',
                           v_fallback_type,
                           null,
                           v_line_item_detail_acc_tbl
                        );
           ------ End of passing Access configuration attribute ------

           pkg_quote.spi_multisite_config
                    (
                      in_quoteheader_id,
                      v_line_item_tbl,
                      'Quote',
                      NULL,
                      in_createdby,
                      v_nextsite
                    );

           /******** Saving pricing details for Primary fallback ********/
             v_pricing_tab.EXTEND(1);
             v_pricing_tab (1) :=
                pricing_obj (v_site_id,
                             'BT iVPN2 Access',
                             v_acc_tech||' Access - '||v_fallback_type|| ' - Install-non-recurring', -- o_pricelineitem
                             v_install_cost,                 -- o_price
                             v_currency,                     -- o_currency
                             'Install',                      -- o_chargetype
                             NULL,                           -- o_discount
                             NULL,                           -- o_disctype
                             v_fallback_type,                -- o_fallback
                             v_install_cost,                 -- o_cost
                             'Install Cost',                 -- o_costtype
                             v_currency,                     -- o_costcur
                             v_cheap_aqref,                  -- o_extqref
                             NULL,                           -- o_reqstatus
                             NULL,                           -- o_errdesc
                             NULL,                           -- o_pripricingstatus
                             NULL,                           -- o_secpricingstatus
                             NULL,                           -- o_quanty
                             NULL,                           -- o_rent_price
                             NULL,                           -- o_line_item_detail_id
                             NULL,                           -- o_Row_id
                             NULL,                           -- o_product_id
                             NULL,                           -- o_netprice
                             NULL,                           -- o_pln_inventory_id
                             NULL,                           -- o_ptp_eup
                             NULL,                           -- o_ptp_eup_id
                             NULL,                           -- o_discount_requested
                             NULL,                           -- o_discount_proposed
                             NULL,                           -- o_classic_element_id
                             NULL,                           -- o_classic_element_name
                             NULL,                           -- ppsr_price_line_id
                             NULL,                           -- ppsr_price_line_description
                             NULL,                           -- o_billing_id,             Added for GHUCS R16 by KHADER,
                             NULL,                           -- o_billing_reference_name, Added for GHUCS R16 by KHADER,
                             NULL,                           -- o_billing_start_date,     Added for GHUCS R16 by KHADER,
                             NULL                            -- o_billing_end_date        Added for GHUCS R16 by KHADER
);

             v_pricing_tab.EXTEND(1);
             v_pricing_tab (2) :=
                pricing_obj (v_site_id,
                             'BT iVPN2 Access',
                             v_acc_tech||' Access - '||v_fallback_type|| ' - Mthly-recurring', -- o_pricelineitem
                             v_monthly_cost,                 -- o_price
                             v_currency,                     -- o_currency
                             'Mthly',                        -- o_chargetype
                             NULL,                           -- o_discount
                             NULL,                           -- o_disctype
                             v_fallback_type,                -- o_fallback
                             v_monthly_cost,                 -- o_cost
                             'Monthly Cost',                 -- o_costtype
                             v_currency,                     -- o_costcur
                             v_cheap_aqref,                  -- o_extqref
                             NULL,                           -- o_reqstatus
                             NULL,                           -- o_errdesc
                             NULL,                           -- o_pripricingstatus
                             NULL,                           -- o_secpricingstatus
                             NULL,                           -- o_quanty
                             NULL,                           -- o_rent_price
                             NULL,                           -- o_line_item_detail_id
                             NULL,                           -- o_Row_id
                             NULL,                           -- o_product_id
                             NULL,                           -- o_netprice
                             NULL,                           -- o_pln_inventory_id
                             NULL,                           -- o_ptp_eup
                             NULL,                           -- o_ptp_eup_id
                             NULL,                           -- o_discount_requested
                             NULL,                           -- o_discount_proposed
                             NULL,                           -- o_classic_element_id
                             NULL,                           -- o_classic_element_name
                             NULL,                           -- ppsr_price_line_id
                             NULL,                           -- ppsr_price_line_description
                             NULL,                           -- o_billing_id,             Added for GHUCS R16 by KHADER,
                             NULL,                           -- o_billing_reference_name, Added for GHUCS R16 by KHADER,
                             NULL,                           -- o_billing_start_date,     Added for GHUCS R16 by KHADER,
                             NULL                            -- o_billing_end_date        Added for GHUCS R16 by KHADER
);

             pkg_lineitem.spi_multisite_pricing
                          (
                              in_quoteheader_id,
                              v_pricing_tab,
                              in_createdby,
                              out_status,
                              out_errmsg
                          );
           /******** Saving pricing details for Primary fallback ********/

             -- If primary is already saved then save the other pair with secondary
             -- and vice versa
             IF v_fallback_type = 'Primary' THEN
                v_fallback_type := 'Secondary';
             ELSIF v_fallback_type = 'Secondary' THEN
                v_fallback_type := 'Primary';
             END IF;

             BEGIN
                 -- Get paired qref details for the cheapest qref's pair_id
                 select access_qref, access_technology, access_type, access_speed,
                        supplier, leg_id, pair_id, install_cost,
                        monthly_cost, cost_access_currency
                   into v_aqref_pair, v_acc_tech_pair, v_acc_type_pair, v_acc_speed_pair,
                        v_supplier_pair, v_leg_id_pair, v_pair_id_pair, v_install_cost_pair,
                        v_monthly_cost_pair, v_currency_pair
                 from access_qref aq, quote_site qs
                 where qs.quote_header_id = in_quoteheader_id
                 and qs.site_id = v_site_id
                 and pair_id = v_pair_id
                 and rownum = 1; -- Incase if it retrieves more than 1 row
             EXCEPTION
             WHEN OTHERS THEN
                 out_status := pkg_constants.con_status_failure;
                 out_errmsg := 'No paired qref found';
             END;

               -- Access Tech being returned from APE can be like hVPN-Wireless, hVPN-DSL, hVPN-Cable, etc
               IF UPPER(v_acc_tech_pair) LIKE '%LEASED LINE%'
               THEN
                  v_acc_tech_pair := 'Leased Line';
               ELSIF UPPER(v_acc_tech_pair) LIKE '%ETHERNET%'
               THEN
                  v_acc_tech_pair := 'Ethernet';
               ELSIF UPPER(v_acc_tech_pair) LIKE '%HVPN%'
               THEN
                  v_acc_tech_pair := 'HVPN';
               END IF;

               --- Attributes 'Access Technology', 'Access Type', 'Access Speed'
               --- are to be saved under 'Configuration - General'
               v_line_item_detail_tbl.extend(1);
               v_line_item_detail_tbl(1) :=
                             config_attr_obj
                             (
                                3,
                                'Configuration - General',
                                v_acc_tech_pair,
                                0,
                                null,
                                'N'
                             ) ;

               v_line_item_detail_tbl.extend(1);
               v_line_item_detail_tbl(2) :=
                             config_attr_obj
                             (
                                5,
                                'Configuration - General',
                                v_acc_type_pair,
                                0,
                                null,
                                'N'
                             ) ;

               v_line_item_detail_tbl.extend(1);
               v_line_item_detail_tbl(3) :=
                             config_attr_obj
                             (
                                7,
                                'Configuration - General',
                                v_acc_speed_pair,
                                0,
                                null,
                                'N'
                             );

               v_line_item_tbl.extend(1);
               v_line_item_tbl(1) :=
                            config_obj
                            (
                               v_site_id,
                               967966,
                               'BT iVPN2 Global',
                               v_fallback_type,
                               null,
                               v_line_item_detail_tbl
                            );
               ------ End of passing General section attributes ------

               --- Attribute 'Supplier Name' to be saved under 'Configuration - Access'
               v_line_item_detail_acc_tbl.extend(1);
               v_line_item_detail_acc_tbl(1) :=
                             config_attr_obj
                             (
                                104,
                                'Configuration - Access',
                                v_supplier_pair,
                                0,
                                null,
                                'N'
                             );

               v_line_item_tbl.extend(1);
               v_line_item_tbl(2) :=
                            config_obj
                            (
                               v_site_id,
                               222222,
                               'BT iVPN2 Access',
                               v_fallback_type,
                               null,
                               v_line_item_detail_acc_tbl
                            );
               ------ End of passing Access configuration attribute ------

               pkg_quote.spi_multisite_config
                        (
                          in_quoteheader_id,
                          v_line_item_tbl,
                          'Quote',
                          NULL,
                          in_createdby,
                          v_nextsite
                        );

               /******** Saving pricing details for Primary fallback ********/
                 v_pricing_tab.EXTEND(1);
                 v_pricing_tab (1) :=
                    pricing_obj (v_site_id,
                                 'BT iVPN2 Access',
                                 v_acc_tech_pair||' Access - '||v_fallback_type|| ' - Install-non-recurring', -- o_pricelineitem
                                 v_install_cost_pair,            -- o_price
                                 v_currency_pair,                -- o_currency
                                 'Install',                      -- o_chargetype
                                 NULL,                           -- o_discount
                                 NULL,                           -- o_disctype
                                 v_fallback_type,                -- o_fallback
                                 v_install_cost_pair,            -- o_cost
                                 'Install Cost',                 -- o_costtype
                                 v_currency_pair,                -- o_costcur
                                 v_aqref_pair,                   -- o_extqref
                                 NULL,                           -- o_reqstatus
                                 NULL,                           -- o_errdesc
                                 NULL,                           -- o_pripricingstatus
                                 NULL,                           -- o_secpricingstatus
                                 NULL,                           -- o_quanty
                                 NULL,                           -- o_rent_price
                                 NULL,                           -- o_line_item_detail_id
                                 NULL,                           -- o_Row_id
                                 NULL,                           -- o_product_id
                                 NULL,                           -- o_netprice
                                 NULL,                           -- o_pln_inventory_id
                                 NULL,                           -- o_ptp_eup
                                 NULL,                           -- o_ptp_eup_id
                                 NULL,                           -- o_discount_requested
                                 NULL,                           -- o_discount_proposed
                                 NULL,                           -- o_classic_element_id
                                 NULL,                           -- o_classic_element_name
                                 NULL,                           -- ppsr_price_line_id
                                 NULL,                           -- ppsr_price_line_description
                                 NULL,                           -- o_billing_id,             Added for GHUCS R16 by KHADER,
                                 NULL,                           -- o_billing_reference_name, Added for GHUCS R16 by KHADER,
                                 NULL,                           -- o_billing_start_date,     Added for GHUCS R16 by KHADER,
                                 NULL                            -- o_billing_end_date        Added for GHUCS R16 by KHADER
);

                 v_pricing_tab.EXTEND(1);
                 v_pricing_tab (2) :=
                    pricing_obj (v_site_id,
                                 'BT iVPN2 Access',
                                 v_acc_tech_pair||' Access - '||v_fallback_type|| ' - Mthly-recurring', -- o_pricelineitem
                                 v_monthly_cost_pair,            -- o_price
                                 v_currency_pair,                -- o_currency
                                 'Mthly',                        -- o_chargetype
                                 NULL,                           -- o_discount
                                 NULL,                           -- o_disctype
                                 v_fallback_type,                -- o_fallback
                                 v_monthly_cost_pair,            -- o_cost
                                 'Monthly Cost',                 -- o_costtype
                                 v_currency_pair,                -- o_costcur
                                 v_aqref_pair,                   -- o_extqref
                                 NULL,                           -- o_reqstatus
                                 NULL,                           -- o_errdesc
                                 NULL,                           -- o_pripricingstatus
                                 NULL,                           -- o_secpricingstatus
                                 NULL,                           -- o_quanty
                                 NULL,                           -- o_rent_price
                                 NULL,                           -- o_line_item_detail_id
                                 NULL,                           -- o_Row_id
                                 NULL,                           -- o_product_id
                                 NULL,                           -- o_netprice
                                 NULL,                           -- o_pln_inventory_id
                                 NULL,                           -- o_ptp_eup
                                 NULL,                           -- o_ptp_eup_id
                                 NULL,                           -- o_discount_requested
                                 NULL,                           -- o_discount_proposed
                                 NULL,                           -- o_classic_element_id
                                 NULL,                           -- o_classic_element_name
                                 NULL,                           -- ppsr_price_line_id
                                 NULL,                           -- ppsr_price_line_description
                                 NULL,                           -- o_billing_id,             Added for GHUCS R16 by KHADER,
                                 NULL,                           -- o_billing_reference_name, Added for GHUCS R16 by KHADER,
                                 NULL,                           -- o_billing_start_date,     Added for GHUCS R16 by KHADER,
                                 NULL                            -- o_billing_end_date        Added for GHUCS R16 by KHADER
);

                 pkg_lineitem.spi_multisite_pricing
                              (
                                  in_quoteheader_id,
                                  v_pricing_tab,
                                  in_createdby,
                                  out_status,
                                  out_errmsg
                              );
           /******** Saving pricing details for Primary fallback ********/



       END IF;


   END LOOP;


EXCEPTION
   WHEN OTHERS THEN
      out_status := pkg_constants.con_status_failure;
      out_errmsg := SQLERRM;
END;
--


END pkg_lineitem;
/


CREATE OR REPLACE PACKAGE BODY pkg_order
IS
   FUNCTION arrachment_tbl_to_cur (in_attachment_tbl attachment_tbl)
      RETURN attachment_tbl PIPELINED
   IS
   BEGIN
      FOR i IN in_attachment_tbl.FIRST .. in_attachment_tbl.LAST
      LOOP
         PIPE ROW (in_attachment_tbl (i));
      END LOOP;

      RETURN;
   END;

--This sp is used to fetch the value for customerinfo
--In this SP for a quote_id , customer is displayed and for each customer the site and t
--the related contact details will be displayed. In query below we are filtering
--the result set on basis of contact type and main site flag as for each customer
--only one valid address should be returned. Refer the wsdl to get the structure for customer info
   PROCEDURE sps_customerinfo (
      in_quoteid            IN       quote.quote_id%TYPE,
      out_details           OUT      sys_refcursor,
      out_contacts          OUT      sys_refcursor,
      out_ord_pdt_details   OUT      sys_refcursor
   )
   AS
   BEGIN
--Basic Customer Info quote and order are returned here
      OPEN out_details FOR
         SELECT DISTINCT q.quote_id, c.customer_id,
                         c.company_name AS "FULL_LEGAL_NAME",
                         c.company_name AS "CUSTOMER_NAME",
                         bt.bt_subsidiary_id, bt.NAME AS "SUBSIDIARY",
                         sc.NAME AS "SALESCHANNEL",
                         c.vat_number AS "VATNUMBER", s.site_id,
                         DECODE
                            (s.main_site_flag,
                             pkg_constants.con_activeflag_yes, pkg_constants.con_centralsite
                            ) AS centralsitename,
                         s.classic_site_id,
                         s.line_of_site_billing AS centralsite_losb,
---Added by SRK on 29Jun2010
                                                                    cu.NAME,
                         ad.address_line1, ad.address_line2, ad.room,
                         ad.FLOOR, ad.building_number, ad.city,
                         ad.post_zip_code, ad.state,
                         DECODE
                            (c.classic_customer_id,
                             NULL, pkg_constants.con_activeflag_no,
                             pkg_constants.con_activeflag_yes
                            ) AS is_existing_customer,
                         c.classic_customer_id, c.classic_customer_name,
                         oh.contract_id, oh.comments "order_notes",

--R1 IP Clear Reach out begin
                         oh.is_order_ipclearreachoutsite, oh.ftip_number,

--R1 IP Clear Reach out end
                         qh.opportunity_id "SIEBEL_ID", c.tax_exempt_ref_num,

-- added for customer billing(R1)
                         c.line_of_site_billing,
                         c.created_date "Customer_creation_date"
                    FROM quote q LEFT OUTER JOIN customer c
                         ON c.customer_id = q.customer_id
                         LEFT OUTER JOIN quote_header qh
                         ON q.quote_id = qh.quote_id
                         LEFT OUTER JOIN order_header oh
                         ON qh.quote_header_id = oh.quote_header_id
                         LEFT OUTER JOIN bt_subsidiary bt
                         ON c.bt_subsidiary_id = bt.bt_subsidiary_id
                         LEFT OUTER JOIN sales_channel sc
                         ON c.sales_channel_id = sc.sales_channel_id
                         LEFT OUTER JOIN site s
                         ON c.customer_id = s.customer_id
                       AND s.main_site_flag = pkg_constants.con_activeflag_yes
                         LEFT OUTER JOIN address ad
                         ON ad.address_id = s.address_id
                         LEFT OUTER JOIN country cu
                         ON ad.country_id = cu.country_id
                   WHERE q.quote_id = in_quoteid;

--Customer contacts and order related contacts are retuned here
      OPEN out_contacts FOR
         SELECT co.contact_id, co.first_name, co.last_name, co.job_title,
                co.phone_number, co.mobile_number, co.fax, co.email,
                co.contact_type, co.user_id, co.ein, cc.customer_id
           FROM quote q LEFT OUTER JOIN customer_contact cc
                ON q.customer_id = cc.customer_id
                LEFT OUTER JOIN contact co ON cc.contact_id = co.contact_id
          WHERE q.quote_id = in_quoteid
            AND co.contact_type IN
                   (pkg_constants.con_primary_custcontact,
                    pkg_constants.con_secondary_custcontact
                   )
         UNION ALL
         SELECT ct.contact_id, ct.first_name, ct.last_name, ct.job_title,
                ct.phone_number, ct.mobile_number, ct.fax, ct.email,
                ct.contact_type, ct.user_id, ct.ein, c.customer_id
           FROM quote q LEFT OUTER JOIN customer c
                ON c.customer_id = q.customer_id
                LEFT OUTER JOIN quote_header qh ON q.quote_id = qh.quote_id
                LEFT OUTER JOIN order_header oh
                ON qh.quote_header_id = oh.quote_header_id
                LEFT OUTER JOIN order_contact_detail ocd
                ON oh.order_header_id = ocd.order_header_id
                LEFT OUTER JOIN contact ct ON ocd.contact_id = ct.contact_id
          WHERE q.quote_id = in_quoteid;

--Product Selection details are returned here
      OPEN out_ord_pdt_details FOR
         SELECT DISTINCT q.quote_id, qh.quote_header_id,
                         q.customer_service_center, qh.currency,
                         qh.contract_term, qh.comments,
                         ps.product_selection_id, ps.product_id,
                         ps.product_name, ps.proposition_id,
                         ps.proposition_name, ps.sub_proposition_id,
                         ps.sub_proposition_name,
                         NVL (bs.order_type, q.order_type), qh.capcheck_refno,
                         qp.price_list_name "PRICE_VERSION", er.edca_order_id
                    FROM quote q INNER JOIN quote_header qh
                         ON q.quote_id = qh.quote_id
                         LEFT OUTER JOIN edca_response er
                         ON er.quote_header_id = qh.quote_header_id
                         LEFT OUTER JOIN product_selection ps
                         ON qh.quote_id = ps.quote_id
                         LEFT OUTER JOIN quote_price_list qp
                         ON qh.quote_header_id = qp.quote_header_id
                         LEFT OUTER JOIN bundle_selection bs
                         ON qh.quote_header_id = bs.quote_header_id
                   WHERE q.quote_id = in_quoteid;
   END sps_customerinfo;

--This sp is used to fetch the value for siteinfo
--In this SP for a quote_header_id , customer is displayed and for each customer the site and t
--the related contact details will be displayed. In query below we are filtering
--the result set on basis of contact type and for each customer
--only one bot primary and secondary details should be returned because
--the structure is such that primary and secondary details is available address
--should be returned. Refer the wsdl to get the structure for site info
   PROCEDURE sps_siteinfo (
      in_quote_headerid   IN       quote_header.quote_header_id%TYPE,
      out_sitedetails     OUT      sys_refcursor
   )
   AS
   BEGIN
--site info
--When isNNIEnabledSite is False there is no need for Partner name
--hence not sending Partner Name here
--Resilience,CustomizationLevel,PricingBook and CpeSupplier are present at Attribute level
      OPEN out_sitedetails FOR
         SELECT   x.quote_header_id, x.customer_id, x.isexistingsite,
                  x.classic_site_id, x.site_id, x.sitename,
                  x.notes "SiteNotes", x.address_id, x.country,
                  x.address_line1, x.address_line2, x.city, x.FLOOR, x.room,
                  x.state, x.post_zip_code, x.building_number,
                  x.street_number, x."SiteAddressID", x."SiteCOUNTRY",
                  x."SiteAddressLine1", x."SiteAddressLine2", x."SiteCity",
                  x."SiteFloor", x."SiteRoom", x."SiteState", x."SiteZip",
                  x."SiteBuilding", x.bank_code, x.branch_code,
                  x.control_code, x.account_number, x.currency_code,
                  x.billing_id, x.invoice_period, x.activation_date,
                  y.contact_id, y.first_name, y.last_name, y.email,
                  y.phone_number, y.fax, y.mobile_number, y.job_title,
                  y.title, y.contact_type, x.customer_required_date,
                  x.order_form_sign_date, x.centralbillingid,
                  x."BillingIdSystem", x."STATE_CODE",
                  x."CNTRY_SPEC_NOTES_REQ", x."URL", x."PPSR_NOTE"
-- ##### Change for 904 - B-End validation  begin
                  ,
                  x."LOCAL BUSINESS CUSTOMER NAME", x.ivs_migration_order,
                  x.ivs_migration_team, x.ivs_phase2gateway, x.tpe_id,
                  x.url_details, x.account_name, x.information_currency,
                  x.bill_period, x.payment_method, x.inv_lang, x.edi_address,
                  x.us_touching_scenario, x.edca_parent_site_id,
                  x.site_status, x.payment_days, x.active,
                  x.line_of_site_billing, x.customer_report_site_name
-- ##### Change for 904 - B-End validation  end
         FROM     (SELECT DISTINCT qs.quote_header_id, s.customer_id,
                                   DECODE
                                      (s.classic_site_id,
                                       NULL, pkg_constants.con_activeflag_no,
                                       pkg_constants.con_activeflag_yes
                                      ) AS "ISEXISTINGSITE",
                                   s.classic_site_id, s.site_id,
                                   s.NAME AS "SITENAME", s.notes,
                                   ad.address_id, cu.NAME AS "COUNTRY",
                                   ad.address_line1, ad.address_line2,
                                   ad.city, ad.FLOOR, ad.room, ad.state,
                                   ad.post_zip_code, ad.building_number,
                                   ad.street_number,
                                   ads.address_id "SiteAddressID",
                                   cus.NAME AS "SiteCOUNTRY",
                                   ads.address_line1 "SiteAddressLine1",
                                   ads.address_line2 "SiteAddressLine2",
                                   ads.city "SiteCity",
                                   ads.FLOOR "SiteFloor",
                                   ads.room "SiteRoom",
                                   ads.state "SiteState",
                                   ads.state_code AS "STATE_CODE",
                                   ads.post_zip_code "SiteZip",
                                   ads.building_number "SiteBuilding",
                                   ac.bank_code, ac.branch_code,
                                   ac.control_code, ac.account_number,
                                   b.currency currency_code,
                                   b.invoice_period, b.activation_date,

--R1---customer billing
                                   b.account_name, b.information_currency,
                                   b.bill_period, b.payment_method,
                                   b.inv_lang, b.edi_address,
                                   b.us_touching_scenario,
--R1--customer billing
                                                          osd.billing_id,
                                   osd.customer_required_date,
                                   oh.order_form_sign_date,
                                   b.contact_id billingcontact,
                                   sod.contact_id sitecontact,
                                   cbi.billing_id centralbillingid,
                                   osd.SYSTEM "BillingIdSystem",
                                   s.cntry_spec_notes_req
                                                      "CNTRY_SPEC_NOTES_REQ",
                                   s.url "URL", s.ppsr_note "PPSR_NOTE",

-- ##### Change for 904 - B-End validation  begin
                                   s.local_business_customer_name
                                              "LOCAL BUSINESS CUSTOMER NAME",

-- ##### Change for 904 - B-End validation  end
                                   sit1.ivs_migration_order,
                                   sit1.ivs_migration_team,
                                   sit1.ivs_phase2gateway, sit1.tpe_id,
                                   sit1.url_details, er.edca_parent_site_id,
                                   er.site_status, b.payment_days, qs.active,
                                   s.line_of_site_billing,
                                   s.customer_report_site_name
                              FROM quote_site qs LEFT OUTER JOIN order_header oh
                                   ON qs.quote_header_id = oh.quote_header_id
---  AND qs.active = pkg_constants.con_activeflag_yes
                                   LEFT OUTER JOIN edca_response er
                                   ON er.quote_header_id = oh.quote_header_id
                                 AND er.site_id = qs.site_id
                                   LEFT OUTER JOIN site s
                                   ON qs.site_id = s.site_id
                                   LEFT OUTER JOIN customer_billing_info cbi
                                   ON s.customer_id = cbi.customer_id
                                 AND oh.order_header_id = cbi.order_header_id
                                 AND is_default =
                                              pkg_constants.con_activeflag_yes
                                   LEFT OUTER JOIN site_contact_detail sod
                                   ON s.site_id = sod.site_id
                                   LEFT OUTER JOIN site_infonet sit1
----- 904 Added
                                   ON DECODE (sit1.site_type,
                                              'CLASSIC', s.classic_site_id,
                                              'NON CLASSIC', s.site_id
                                             ) = sit1.site_id
                                   LEFT OUTER JOIN order_site_detail osd
                                   ON s.site_id = osd.site_id
                                 AND oh.order_header_id = osd.order_header_id
                                 AND osd.active =
                                              pkg_constants.con_activeflag_yes
                                   LEFT OUTER JOIN address ads
                                   ON s.address_id = ads.address_id
                                   LEFT OUTER JOIN country cus
                                   ON ads.country_id = cus.country_id
                                   LEFT OUTER JOIN billing b
--ON s.billing_id = b.billing_id
---Modified by syed to pick billing info based on info
--saved during order
                                   ON osd.billing_id = b.billing_code
                                 AND osd.SYSTEM = pkg_constants.con_system_sqe
                                 AND b.customer_id = s.customer_id
                                   LEFT OUTER JOIN address ad
                                   ON b.address_id = ad.address_id
                                   LEFT OUTER JOIN country cu
                                   ON ad.country_id = cu.country_id
                                   LEFT OUTER JOIN ACCOUNT ac
                                   ON b.account_id = ac.account_id
                                   ) x
                  LEFT OUTER JOIN
                  (SELECT DISTINCT co.contact_id, co.first_name, co.last_name,
                                   co.email, co.phone_number, co.fax,
                                   co.mobile_number, co.job_title, co.title,
                                   co.contact_type
                              FROM contact co) y
                  ON (   x.sitecontact = y.contact_id
                      OR x.billingcontact = y.contact_id
                     )
            WHERE x.quote_header_id = in_quote_headerid
              AND x.active = pkg_constants.con_activeflag_yes
              AND UPPER (NVL (x.site_status, '-1')) <> 'CANCELLED'
         ORDER BY x.sitename;
   END sps_siteinfo;

   PROCEDURE sps_lineiteminfo (
      in_quoteid           IN       quote.quote_id%TYPE,
      in_quoteheaderid     IN       quote_header.quote_header_id%TYPE,
      out_details          OUT      sys_refcursor,
      out_bgpprice         OUT      sys_refcursor,
      out_port_ip_routes   OUT      sys_refcursor
   )
--out_parent_child OUT sys_refcursor)
   AS
   BEGIN
      OPEN out_details FOR
--added access_qref details in all the selects
--Quote related line item and attributes
         SELECT   q.quote_id, qh.quote_header_id, s.site_id,
                  s.NAME AS site_name, qs.active AS "SITE_ACTIVE",
                  lm.product_id, lm.product_name,
                  lm.active AS "LINE_ITEM_ACTIVE",
                  lm.currency AS "LINE_ITEM_CURRENCY", lm.fallback_type,
                  NVL (ld.quantity, 1) AS "LINE_ITEM_QUANTITY", lm.part_type,
                  ld.line_item_detail_id,
                  ld.active AS "LINE_ITEM_DETAILS_ACTIVE",
                  am.attribute_mapping_id, edca.service_element,
                  edca.attribute_type,
                  edca.attribute_value AS edca_attribute_value,
                  edca.interface_field AS attribute_name,
                  NVL (am.edca_attribute, 'N/A') edca_attribute,
                  am.ppsr_attribute_id, am.ppsr_attribute,
                  am.sqe_attribute_id, am.sqe_attribute,
                  am.active AS "ATTRIBUTE_ACTIVE", am.attribute_level,
                  am.sqe_display_text, ld.VALUE AS "ATTRIBUTE_VALUE",
                  pd.currency AS "PRICE_CURRENCY",
                  pd.charge_type AS "Domain", pd.discount,
                  pd.active AS "PRICE_LINE_ITEM_ACTIVE",
                  pl.price_line_description, pl.ppsr_id,
                  pd.price AS "LINE_ITEM_DETAIL_PRICE",

--lm.priced "Price_linked_Flag",
                  edca.price_linked "Price_linked_Flag", aq.access_qref,
                  interface_type, framing_details, connector, apop_node,
                  gpop_node, aq.supplier, NULL row_id,
                  cpeq.pri_supplier_name, aq.apop_flag, aq.port_status,
                  cpeq.pri_ssp_bid_ref_no, cpeq.sec_ssp_bid_ref_no,
                  cpeq.pri_status, aq.method, aq.aggregator_quote_line_id,
                  NVL (aq.hvpn_access_technology,
                       'UNKNOWN'
                      ) hvpn_access_technology,
                  NVL (aq.access_speed, 'UNKNOWN') access_speed,
                  aq.copper_details, aq.copper_service_id "Copper Offer",
                  aq.supplier_product_name, lm.non_std_flag
             FROM quote q INNER JOIN quote_header qh ON q.quote_id =
                                                                  qh.quote_id
                  LEFT OUTER JOIN quote_site qs
                  ON qh.quote_header_id = qs.quote_header_id
                  INNER JOIN site s ON qs.site_id = s.site_id
                  INNER JOIN line_item lm
                  ON s.site_id = lm.site_id
                AND lm.quote_header_id = in_quoteheaderid
                  INNER JOIN line_item_detail ld
                  ON lm.line_item_id = ld.line_item_id
                  LEFT OUTER JOIN attribute_mapping am
                  ON ld.attribute_mapping_id = am.attribute_mapping_id
                  LEFT OUTER JOIN edca_interface_mapping edca
                  ON edca.attribute_mapping_id = am.attribute_mapping_id
                  LEFT OUTER JOIN price_line_item_detail pd
                  ON lm.line_item_id = pd.line_item_id
                  LEFT OUTER JOIN price_line_item pl
                  ON pd.price_line_item_id = pl.price_line_item_id
                  LEFT OUTER JOIN access_qref aq
                  ON (pd.external_qref) = UPPER (aq.access_qref)
                  LEFT OUTER JOIN cpe_qref cpeq
                  ON qs.quote_site_id = cpeq.quote_site_id
            WHERE q.quote_id = in_quoteid
              AND qh.quote_header_id = in_quoteheaderid
              AND (qs.active = pkg_constants.con_activeflag_yes)
              AND (lm.active = pkg_constants.con_activeflag_yes)
              AND (ld.active = pkg_constants.con_activeflag_yes)
              AND (   pd.active = pkg_constants.con_activeflag_yes
                   OR pd.active IS NULL
                  )
         UNION ALL
--Order related line items and attributes
         SELECT   qo.quote_id, qho.quote_header_id, oli.site_id,
                  so.NAME AS site_name, oli.active AS "SITE_ACTIVE",
                  oli.product_id, oli.product_name,
                  oli.active AS "LINE_ITEM_ACTIVE",
                  oli.currency AS "LINE_ITEM_CURRENCY", oli.fallback_type,
                  NVL (olid.quantity, 1) AS "LINE_ITEM_QUANTITY",
                  '' part_type,
                  olid.order_line_item_det_id line_item_detail_id,
                  olid.active AS "LINE_ITEM_DETAILS_ACTIVE",
                  amo.attribute_mapping_id, edcao.service_element,
                  edcao.attribute_type,
                  edcao.attribute_value AS edca_attribute_value,
                  edcao.interface_field AS attribute_name,
                  NVL (amo.edca_attribute, 'N/A') edca_attribute,
                  amo.ppsr_attribute_id, amo.ppsr_attribute,
                  amo.sqe_attribute_id, amo.sqe_attribute,
                  amo.active AS "ATTRIBUTE_ACTIVE", amo.attribute_level,
                  amo.sqe_display_text, olid.VALUE AS "ATTRIBUTE_VALUE",
                  NULL AS "PRICE_CURRENCY", NULL AS "Domain",
                  NULL AS discount, NULL AS "PRICE_LINE_ITEM_ACTIVE",
                  NULL AS "price_line_description", NULL AS "PPSR_ID",
                  NULL AS "LINE_ITEM_DETAIL_PRICE",

--oli.priced "Price_linked_Flag",
                  edcao.price_linked "Price_linked_Flag",
                  NULL AS "access_qref", NULL AS interface_type,
                  NULL AS framing_details, NULL AS connector,
                  NULL AS apop_node, NULL AS gpop_node, NULL AS supplier,
                  oli.row_id, '' pri_supplier_name, NULL AS apop_flag,
                  NULL AS port_status, NULL AS pri_ssp_bid_ref_no,
                  NULL AS sec_ssp_bid_ref_no, NULL AS pri_status,

--, cpeq.pri_supplier_name
                  NULL AS method, NULL AS aggregator_quote_line_id,
                  NULL AS hvpn_access_technology, NULL AS access_speed,
                  NULL AS copper_details, NULL AS "Copper Offer",
                  NULL AS supplier_product_name, NULL AS non_std_flag
--, cpeq.pri_supplier_name
         FROM     quote qo LEFT OUTER JOIN quote_header qho
                  ON qo.quote_id = qho.quote_id
                  LEFT OUTER JOIN order_header oh
                  ON qho.quote_header_id = oh.quote_header_id
                  LEFT OUTER JOIN order_line_item oli
                  ON oh.order_header_id = oli.order_header_id
                  INNER JOIN site so ON oli.site_id = so.site_id
                  LEFT OUTER JOIN order_line_item_detail olid
                  ON oli.order_line_item_id = olid.order_line_item_id
                  LEFT OUTER JOIN attribute_mapping amo
                  ON olid.attribute_mapping_id = amo.attribute_mapping_id
                  LEFT OUTER JOIN edca_interface_mapping edcao
                  ON edcao.attribute_mapping_id = amo.attribute_mapping_id
            WHERE qo.quote_id = in_quoteid
              AND qho.quote_header_id = in_quoteheaderid
              AND (oli.active = pkg_constants.con_activeflag_yes)
              AND (olid.active = pkg_constants.con_activeflag_yes)
         UNION ALL
--for product selection attributes
         SELECT   q.quote_id, qh.quote_header_id, 0 site_id, '' AS site_name,
                  '' AS "SITE_ACTIVE", lm.product_id, lm.product_name,
                  lm.active AS "LINE_ITEM_ACTIVE",
                  lm.currency AS "LINE_ITEM_CURRENCY", lm.fallback_type,
                  NVL (ld.quantity, 1) AS "LINE_ITEM_QUANTITY", lm.part_type,
                  ld.line_item_detail_id,
                  ld.active AS "LINE_ITEM_DETAILS_ACTIVE",
                  am.attribute_mapping_id, edca.service_element,
                  edca.attribute_type,
                  edca.attribute_value AS edca_attribute_value,
                  edca.interface_field AS attribute_name,
                  NVL (am.edca_attribute, 'N/A') edca_attribute,
                  am.ppsr_attribute_id, am.ppsr_attribute,
                  am.sqe_attribute_id, am.sqe_attribute,
                  am.active AS "ATTRIBUTE_ACTIVE", am.attribute_level,
                  am.sqe_display_text, ld.VALUE AS "ATTRIBUTE_VALUE",
                  pd.currency AS "PRICE_CURRENCY", pd.charge_type AS "Domain",
                  pd.discount, pd.active AS "PRICE_LINE_ITEM_ACTIVE",
                  pl.price_line_description, pl.ppsr_id,
                  pd.price AS "LINE_ITEM_DETAIL_PRICE",

--lm.priced "Price_linked_Flag",
                  edca.price_linked "Price_linked_Flag", aq.access_qref,
                  interface_type, framing_details, connector, apop_node,
                  gpop_node, aq.supplier, NULL row_id, '' pri_supplier_name,
                  aq.apop_flag, aq.port_status, NULL AS pri_ssp_bid_ref_no,
                  NULL AS sec_ssp_bid_ref_no, NULL AS pri_status, aq.method,
                  aq.aggregator_quote_line_id,
                  NVL (aq.hvpn_access_technology,
                       'UNKNOWN'
                      ) hvpn_access_technology,
                  NVL (aq.access_speed, 'UNKNOWN') access_speed,
                  aq.copper_details, aq.copper_service_id "Copper Offer",
                  aq.supplier_product_name, lm.non_std_flag
--, cpeq.pri_supplier_name
         FROM     quote q INNER JOIN quote_header qh ON q.quote_id =
                                                                   qh.quote_id
                  INNER JOIN line_item lm
                  ON lm.quote_header_id = qh.quote_header_id
                  INNER JOIN line_item_detail ld
                  ON lm.line_item_id = ld.line_item_id
                  LEFT OUTER JOIN attribute_mapping am
                  ON ld.attribute_mapping_id = am.attribute_mapping_id
                  LEFT OUTER JOIN edca_interface_mapping edca
                  ON edca.attribute_mapping_id = am.attribute_mapping_id
                  LEFT OUTER JOIN price_line_item_detail pd
                  ON lm.line_item_id = pd.line_item_id
                  LEFT OUTER JOIN price_line_item pl
                  ON pd.price_line_item_id = pl.price_line_item_id
                  LEFT OUTER JOIN access_qref aq
                  ON (pd.external_qref) = UPPER (aq.access_qref)
--                  LEFT OUTER JOIN cpe_qref cpeq
--                  ON qs.quote_site_id = cpeq.quote_site_id
         WHERE    q.quote_id = in_quoteid
              AND qh.quote_header_id = in_quoteheaderid
              AND (lm.active = pkg_constants.con_activeflag_yes)
              AND (ld.active = pkg_constants.con_activeflag_yes)
              AND (   pd.active = pkg_constants.con_activeflag_yes
                   OR pd.active IS NULL
                  )
              AND (   am.config_level = 'Product Selection'
                   OR am.config_level = 'Configuration - Quote Header'
                  )
         ORDER BY site_id,
                  fallback_type,
                  service_element,
                  row_id,
                  part_type,
                  product_id,
                  non_std_flag,
                  sqe_display_text,
                  attribute_name,
                  attribute_type;

      OPEN out_bgpprice FOR
         SELECT DISTINCT li.site_id, li.fallback_type,
                         pli.price_line_description "priceDes", plid.price,
                         plid.currency, plid.charge_type, plid.external_qref,
                         plid.discount, plid.discount_type, pli.ppsr_id
                    FROM quote q INNER JOIN quote_header qh
                         ON q.quote_id = qh.quote_id
                         INNER JOIN line_item li
                         ON qh.quote_header_id = li.quote_header_id
                       AND qh.quote_header_id = in_quoteheaderid
                         INNER JOIN line_item_detail lid
                         ON li.line_item_id = lid.line_item_id
                         INNER JOIN attribute_mapping am
                         ON lid.attribute_mapping_id = am.attribute_mapping_id
                         INNER JOIN price_line_item_detail plid
                         ON li.line_item_id = plid.line_item_id
                       AND plid.active = pkg_constants.con_activeflag_yes
                         LEFT OUTER JOIN price_line_item pli
                         ON pli.price_line_item_id = plid.price_line_item_id
                   WHERE q.quote_id = in_quoteid
                     AND qh.quote_header_id = in_quoteheaderid
                     AND li.active = pkg_constants.con_activeflag_yes
                     AND lid.active = pkg_constants.con_activeflag_yes
                     AND (   pli.price_line_description LIKE '%BGP%'
                          OR pli.price_line_description LIKE '%VPN%'
                          OR pli.price_line_description LIKE '%Non Std%'
                          OR pli.price_line_description LIKE
                                                            '%Copper service%'
                         );

      OPEN out_port_ip_routes FOR
         SELECT   pir.port_ip_route_id, pir.order_line_item_id, pir.row_id,
                  oli.site_id, pir.fallback_type, pir.serial_number,
                  pir.subnet_address, pir.subnet_mask,
                  pir.next_hop_ip_address
             FROM port_ip_routes pir, order_line_item oli
            WHERE oli.order_header_id =
                                   (SELECT order_header_id
                                      FROM order_header
                                     WHERE quote_header_id = in_quoteheaderid)
              AND oli.active = 'Y'
              AND pir.order_line_item_id = oli.order_line_item_id
              AND oli.fallback_type = oli.fallback_type
              AND EXISTS (
                     SELECT 1
                       FROM order_line_item_detail
                      WHERE order_line_item_id = oli.order_line_item_id
                        AND VALUE = 'Y'
                        AND active = 'Y')
         ORDER BY oli.site_id, pir.fallback_type, pir.serial_number;
   END sps_lineiteminfo;

   PROCEDURE spi_order_configuration (
      in_orderheaderid    IN       order_header.order_header_id%TYPE,
      in_siteid           IN       site.site_id%TYPE,
      in_attributelist    IN       CLOB,
      in_attributelevel   IN       attribute_mapping.attribute_level%TYPE,
      in_createdby        IN       order_line_item.created_by%TYPE,
      out_status          OUT      NUMBER,
      out_errmsg          OUT      VARCHAR2
   )
   AS
      CURSOR c_attributelist
      IS
         SELECT *
           FROM TABLE
                   (CAST
                       (pkg_common.fn_splitbulkupload (in_attributelist, '~') AS varchar2_clob
                       )
                   );

      v_prodid         order_line_item.product_id%TYPE;
      v_prodname       order_line_item.product_name%TYPE;
      v_fallback       order_line_item.fallback_type%TYPE;
      v_rowid          order_line_item.row_id%TYPE;
      v_tattrid        t_attrmapid;
      v_tconfiglevel   t_configlevel;
      v_tattrval       t_value;
      v_qty            t_qty;
      v_lineitemid     order_line_item.order_line_item_id%TYPE;
      v_lineitemids    VARCHAR2 (2000);
      v_attrlevel      attribute_mapping.attribute_level%TYPE;
      v_configlevel    attribute_mapping.config_level%TYPE;
      v_rowcount       NUMBER;
      v_prodattr       VARCHAR2 (4000);
      v_proddet        VARCHAR2 (4000);
      v_attrdet        VARCHAR2 (4000);
      v_attrcnt        NUMBER;
      v_curdate        DATE                                      := SYSDATE;
   BEGIN
      IF (in_attributelist IS NOT NULL)
      THEN
         BEGIN
            OPEN c_attributelist;

            LOOP
               FETCH c_attributelist
                INTO v_prodattr;

               EXIT WHEN c_attributelist%NOTFOUND;
               v_proddet :=
                     SUBSTR (v_prodattr, 1, INSTR (v_prodattr, ';', 1, 1) - 1);
               v_attrdet :=
                        SUBSTR (v_prodattr, INSTR (v_prodattr, ';', 1, 1) + 1);
               v_attrdet := v_attrdet || '##';

               SELECT pkg_common.fn_countbulkupload (v_attrdet, '##')
                 INTO v_attrcnt
                 FROM DUAL;

--dbms_output.put_line('1' || v_attrcnt);
               IF (v_attrcnt != 0)
               THEN
                  BEGIN
--get the list of products from the input string
                     v_prodid :=
                        SUBSTR (v_proddet,
                                INSTR (v_proddet, '|||') + 3,
                                  (INSTR (v_proddet, '::') - 3
                                  )
                                - INSTR (v_proddet, '|||')
                               );
                     v_proddet :=
                          SUBSTR (v_proddet, INSTR (v_proddet, '::', 1, 1) + 2);
                     v_prodname :=
                        SUBSTR (v_proddet,
                                INSTR (v_proddet, '|||') + 3,
                                  (INSTR (v_proddet, '::') - 3
                                  )
                                - INSTR (v_proddet, '|||')
                               );
                     v_proddet :=
                          SUBSTR (v_proddet, INSTR (v_proddet, '::', 1, 1) + 2);
                     v_fallback :=
                        SUBSTR (v_proddet,
                                INSTR (v_proddet, '|||') + 3,
                                  (INSTR (v_proddet, '::') - 3
                                  )
                                - INSTR (v_proddet, '|||')
                               );
                     v_proddet :=
                          SUBSTR (v_proddet, INSTR (v_proddet, '::', 1, 1) + 2);
                     v_rowid :=
                         SUBSTR (v_proddet, INSTR (v_proddet, '|||', 1, 1) + 3);

--if order_line_item exists
                     SELECT COUNT (*)
                       INTO v_rowcount
                       FROM order_line_item
                      WHERE order_header_id = in_orderheaderid
                        AND site_id = in_siteid
                        AND UPPER (product_name) = UPPER (v_prodname)
                        AND UPPER (fallback_type) = UPPER (v_fallback)
                        AND active = pkg_constants.con_activeflag_yes;

--dbms_output.put_line('2' || v_rowcount);
                     IF (v_rowcount = 0)
                     THEN
                        BEGIN
                           INSERT INTO order_line_item
                                       (order_line_item_id,
                                        order_header_id, site_id,
                                        product_id, product_name,
                                        fallback_type, quantity,
                                        active,
                                        created_by, created_date, row_id
                                       )
                                VALUES (order_line_item_id.NEXTVAL,
                                        in_orderheaderid, in_siteid,
                                        v_prodid, v_prodname,
                                        v_fallback, DEFAULT,
                                        pkg_constants.con_activeflag_yes,
                                        in_createdby, v_curdate, v_rowid
                                       )
                             RETURNING order_line_item_id
                                  INTO v_lineitemid;
                        END;
                     ELSE
                        BEGIN
                           IF (v_rowid IS NOT NULL)
--for VPN Connection
                           THEN
                              BEGIN
                                 SELECT COUNT (*)
                                   INTO v_rowcount
                                   FROM order_line_item
                                  WHERE order_header_id = in_orderheaderid
                                    AND site_id = in_siteid
                                    AND UPPER (product_name) =
                                                            UPPER (v_prodname)
                                    AND UPPER (fallback_type) =
                                                            UPPER (v_fallback)
                                    AND created_date < v_curdate
                                    AND modified_by IS NULL
                                    AND active =
                                              pkg_constants.con_activeflag_yes;

                                 IF (v_rowcount > 0)
                                 THEN
--inactivate all existing VPN line items created previously
                                    UPDATE order_line_item
                                       SET active =
                                               pkg_constants.con_activeflag_no,
                                           modified_by = in_createdby,
                                           modified_date = v_curdate
                                     WHERE order_header_id = in_orderheaderid
                                       AND site_id = in_siteid
                                       AND product_name = v_prodname
                                       AND created_date < v_curdate
                                       AND modified_by IS NULL;
                                 END IF;

--dbms_output.put_line('3' || v_rowcount);
--insert VPN line items
                                 INSERT INTO order_line_item
                                             (order_line_item_id,
                                              order_header_id, site_id,
                                              product_id, product_name,
                                              fallback_type, quantity,
                                              active,
                                              created_by, created_date, row_id
                                             )
                                      VALUES (order_line_item_id.NEXTVAL,
                                              in_orderheaderid, in_siteid,
                                              v_prodid, v_prodname,
                                              v_fallback, DEFAULT,
                                              pkg_constants.con_activeflag_yes,
                                              in_createdby, v_curdate, v_rowid
                                             )
                                   RETURNING order_line_item_id
                                        INTO v_lineitemid;
                              END;
                           END IF;

-----Start Moved to below update stmt to get inactive order line item ids
---- Modified by SRK on 18-Feb for improving performance
/*  SELECT pkg_common.to_string
(CAST
(COLLECT (TO_CHAR (order_line_item_id)
) AS varchar2_ntt
)
)
INTO v_lineitemids
FROM order_line_item
WHERE order_header_id = in_orderheaderid
AND site_id = in_siteid
AND UPPER (product_name) = UPPER (v_prodname)
AND (row_id = v_rowid OR row_id IS NULL);
IF (INSTR (v_lineitemids, ',', 1) = 0)
THEN
v_lineitemids := v_lineitemids || ',';
END IF;
*/   ----End Moved to below update stmt
--select existing order_line_item to insert into order_line_item_detail
                           SELECT order_line_item_id
                             INTO v_lineitemid
                             FROM order_line_item
                            WHERE order_header_id = in_orderheaderid
                              AND site_id = in_siteid
                              AND UPPER (product_name) = UPPER (v_prodname)
                              AND UPPER (fallback_type) = UPPER (v_fallback)
                              AND (   NVL (DECODE (row_id, 0, NULL, row_id),
                                           -1
                                          ) = NVL (v_rowid, -1)
                                   OR row_id IS NULL
                                  )
                              AND active = pkg_constants.con_activeflag_yes;
                        END;
                     END IF;

--dbms_output.put_line('5' || v_rowcount);
                     FOR i IN 1 .. v_attrcnt
                     LOOP
                        v_tattrid (i) :=
                           SUBSTR (v_attrdet,
                                   INSTR (v_attrdet, '|||') + 3,
                                     (INSTR (v_attrdet, '::') - 3
                                     )
                                   - INSTR (v_attrdet, '|||')
                                  );
                        v_attrdet :=
                           SUBSTR (v_attrdet,
                                   INSTR (v_attrdet, '::', 1, 1) + 2);
                        v_tconfiglevel (i) :=
                           SUBSTR (v_attrdet,
                                   INSTR (v_attrdet, '|||') + 3,
                                     (INSTR (v_attrdet, '::') - 3
                                     )
                                   - INSTR (v_attrdet, '|||')
                                  );
                        v_attrdet :=
                           SUBSTR (v_attrdet,
                                   INSTR (v_attrdet, '::', 1, 1) + 2);
                        v_tattrval (i) :=
                           SUBSTR (v_attrdet,
                                   INSTR (v_attrdet, '|||') + 3,
                                     (INSTR (v_attrdet, '::') - 3
                                     )
                                   - INSTR (v_attrdet, '|||')
                                  );
                        v_attrdet :=
                           SUBSTR (v_attrdet,
                                   INSTR (v_attrdet, '::', 1, 1) + 2);
                        v_qty (i) :=
                           SUBSTR (v_attrdet,
                                   INSTR (v_attrdet, '|||') + 3,
                                     (INSTR (v_attrdet, '##') - 3
                                     )
                                   - INSTR (v_attrdet, '|||')
                                  );
                        v_attrdet :=
                             SUBSTR (v_attrdet, INSTR (v_attrdet, '##', 1) + 2);
--dbms_output.put_line('6' || v_attrdet);
                     END LOOP;

--dbms_output.put_line('7' || v_rowcount);
--Update all previous order_line_item_details for the exisiting order_line_items
--Update modified by SRK on 18-Feb for improving performance
                     FORALL i IN v_tconfiglevel.FIRST .. v_tconfiglevel.LAST
                        UPDATE order_line_item_detail OLD
                           SET active = pkg_constants.con_activeflag_no,
                               modified_date = v_curdate,
                               modified_by = in_createdby
                         WHERE order_line_item_id IN (
                                  SELECT order_line_item_id
                                    FROM order_line_item
                                   WHERE order_header_id = in_orderheaderid
                                     AND site_id = in_siteid
                                     AND UPPER (product_name) =
                                                            UPPER (v_prodname)
                                     AND (row_id = v_rowid OR row_id IS NULL
                                         ))
                           AND EXISTS (
                                  SELECT 1
                                    FROM attribute_mapping am
                                   WHERE UPPER (config_level) =
                                                    UPPER (v_tconfiglevel (i))
                                     AND UPPER (attribute_level) =
                                                     UPPER (in_attributelevel)
                                     AND OLD.attribute_mapping_id =
                                                       am.attribute_mapping_id)
                           AND created_date < v_curdate
                           AND modified_date IS NULL;
--insert into order_line-item_detail all the attributes after making
--existing attributes as inactive
                     FORALL i IN 1 .. v_attrcnt
                        INSERT INTO order_line_item_detail
                                    (order_line_item_det_id,
                                     order_line_item_id,
                                     attribute_mapping_id, VALUE,
                                     active,
                                     created_by, created_date, quantity
                                    )
                             VALUES (order_line_item_det_id.NEXTVAL,
                                     v_lineitemid,
                                     v_tattrid (i), v_tattrval (i),
                                     pkg_constants.con_activeflag_yes,
                                     in_createdby, v_curdate, v_qty (i)
                                    );
                     out_status := pkg_constants.con_status_success;
---  COMMIT;
                  END;
               ELSE
                  BEGIN
                     out_status := pkg_constants.con_status_failure;
                     out_errmsg := 'Invalid Product-Attribute List';
                  END;
               END IF;
            END LOOP;

--dbms_output.put_line('8' || v_attrdet);
            CLOSE c_attributelist;
         END;
      ELSE
         BEGIN
            out_status := pkg_constants.con_status_failure;
            out_errmsg := 'Invalid Product-Attribute List';
         END;
      END IF;
--dbms_output.put_line('9' || v_attrdet);
   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         out_errmsg := SQLERRM;
-- ROLLBACK;
   END;

   PROCEDURE spi_order (
      in_quoteheaderid              IN       quote_header.quote_header_id%TYPE,
      in_bid                        IN       quote_header.bid_number%TYPE,
      in_oppid                      IN       quote_header.opportunity_id%TYPE,
      in_orderstatus                IN       order_header.order_status%TYPE,
      in_ordertype                  IN       order_header.order_type%TYPE,
      in_createdby                  IN       order_header.created_by%TYPE,
      in_contractid                 IN       order_header.contract_id%TYPE,
      in_comments                   IN       order_header.comments%TYPE,
      in_ofsd                       IN       VARCHAR2,
      in_quotestatus                IN       VARCHAR2,
      in_is_order_rejected          IN       VARCHAR2,
--904 Sprint2 clean order management
--904 R1 IP Clear Reach out begin
      in_is_order_ipclearreachout   IN       order_header.is_order_ipclearreachoutsite%TYPE,
      in_ftip_number                IN       order_header.ftip_number%TYPE,
      in_emailid                    IN       order_header.emailid%TYPE,
--904 R1 IP Clear Reach out end
--R3 Hub and Spoke begin
      in_vpn_connectivity_mode      IN       order_header.vpn_connectivity_mode%TYPE,
--R3 Hub and Spoke end
      io_orderheaderid              IN OUT   order_header.order_header_id%TYPE,
      out_status                    OUT      NUMBER,
      out_errmsg                    OUT      VARCHAR2,
      in_product_name               IN       VARCHAR2 DEFAULT NULL
   )
   AS
      v_ordercount   NUMBER;
      v_ofsd         DATE;
--v_orderheaderid order_header.order_header_id%TYPE;
   BEGIN
      v_ofsd := TO_DATE (in_ofsd, 'DD-MON-YYYY');

      IF (io_orderheaderid IS NULL)
      THEN
         BEGIN
--904 R1 IP Clear Reach out begin
--R3 Hub and Spoke begin - added vpn_connectivity_mode in INSERT statement
            INSERT INTO order_header
                        (order_header_id, quote_header_id,
                         order_type, order_status, contract_id,
                         comments, order_form_sign_date, created_by,
                         created_date, is_order_rejected,
                         is_order_ipclearreachoutsite, ftip_number,
                         emailid, vpn_connectivity_mode,
                         product_name
                        )
                 VALUES (order_header_id.NEXTVAL, in_quoteheaderid,
                         in_ordertype, in_orderstatus, in_contractid,
                         in_comments, v_ofsd, in_createdby,
                         SYSDATE, in_is_order_rejected,
                         in_is_order_ipclearreachout, in_ftip_number,
                         in_emailid, in_vpn_connectivity_mode,
                         in_product_name
                        )
              RETURNING order_header_id
                   INTO io_orderheaderid;

--R3 Hub and Spoke end - added vpn_connectivity_mode in INSERT statement
--904 R1 IP Clear Reach out end
--   COMMIT;
            out_errmsg := 'Order Created';
            out_status := pkg_constants.con_status_success;
         END;
      ELSE
         BEGIN
            SELECT COUNT (*)
              INTO v_ordercount
              FROM order_header
             WHERE order_header_id = io_orderheaderid;

            IF (v_ordercount = 0)
            THEN
               BEGIN
                  out_errmsg := 'Invalid Order';
                  out_status := pkg_constants.con_status_failure;
               END;
            ELSE
               BEGIN
--904 R1 IP Clear Reach out begin
--R3 Hub and Spoke begin - updating vpn_connectivity_mode
                  UPDATE order_header
                     SET quote_header_id = in_quoteheaderid,
                         order_type = in_ordertype,
                         order_status = in_orderstatus,
                         contract_id = in_contractid,
                         comments = in_comments,
                         order_form_sign_date = v_ofsd,
                         modified_by = in_createdby,
                         modified_date = SYSDATE,
                         is_order_rejected = in_is_order_rejected,
                         is_order_ipclearreachoutsite =
                                                   in_is_order_ipclearreachout,
                         ftip_number = in_ftip_number,
                         emailid = in_emailid,
                         vpn_connectivity_mode = in_vpn_connectivity_mode,
                         product_name = in_product_name
                   WHERE order_header_id = io_orderheaderid;

--R3 Hub and Spoke end - updating vpn_connectivity_mode
--904 R1 IP Clear Reach out end
                  out_errmsg := 'Order Modified';
                  out_status := pkg_constants.con_status_success;
               END;
            END IF;
         END;
      END IF;

      UPDATE quote_header
         SET opportunity_id = in_oppid,
             bid_number = in_bid,
             status = in_quotestatus,
             modified_by = in_createdby,
             modified_date = SYSDATE
       WHERE quote_header_id = in_quoteheaderid;

-- Added by Sujana on 17/12/2010 as part of introducing new table QUOTE_STATUS
      UPDATE quote_status
         SET status = in_quotestatus
       WHERE quote_header_id = in_quoteheaderid
         AND product_name = in_product_name;
--
   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         out_errmsg := SQLERRM;
--   ROLLBACK;
   END;

   PROCEDURE spu_order_contact (
      in_orderheaderid   IN       order_contact_detail.order_header_id%TYPE,
      in_sscontact       IN       VARCHAR2,
      in_secontact       IN       VARCHAR2,
      in_amcontact       IN       VARCHAR2,
      in_omcontact       IN       VARCHAR2,
      in_bpmcontact      IN       VARCHAR2,
      in_modifiedby      IN       order_contact_detail.created_by%TYPE,
      out_status         OUT      NUMBER,
      out_errmsg         OUT      VARCHAR2
   )
   AS
      v_custcontcnt   NUMBER;
      v_firstname     contact.first_name%TYPE;
      v_lastname      contact.last_name%TYPE;
      v_userid        contact.user_id%TYPE;
      v_ein           contact.ein%TYPE;
      v_email         contact.email%TYPE;
      v_phone         contact.phone_number%TYPE;
      v_mobile        contact.mobile_number%TYPE;
      v_fax           contact.fax%TYPE;
      v_row           VARCHAR2 (500);
      v_contactid     contact.contact_id%TYPE;
   BEGIN
      SELECT COUNT (*)
        INTO v_custcontcnt
        FROM order_contact_detail
       WHERE order_header_id = in_orderheaderid;

      IF (v_custcontcnt > 0)
      THEN
         BEGIN
            DELETE FROM order_contact_detail
                  WHERE order_header_id = in_orderheaderid;
         END;
      END IF;

-- sales support contact
      v_row := in_sscontact;
      v_firstname := SUBSTR (v_row, 1, INSTR (v_row, '|', 1, 1) - 1);
      v_row :=
         SUBSTR (v_row,
                 INSTR (v_row, '|', 1, 1) + 1,
                 LENGTH (v_row) - INSTR (v_row, '|', 1, 1)
                );
      v_lastname := SUBSTR (v_row, 1, INSTR (v_row, '|', 1, 1) - 1);
      v_row :=
         SUBSTR (v_row,
                 INSTR (v_row, '|', 1, 1) + 1,
                 LENGTH (v_row) - INSTR (v_row, '|', 1, 1)
                );
      v_userid := SUBSTR (v_row, 1, INSTR (v_row, '|', 1, 1) - 1);
      v_row :=
         SUBSTR (v_row,
                 INSTR (v_row, '|', 1, 1) + 1,
                 LENGTH (v_row) - INSTR (v_row, '|', 1, 1)
                );
      v_ein := TO_NUMBER (SUBSTR (v_row, 1, INSTR (v_row, '|', 1, 1) - 1));
      v_row :=
         SUBSTR (v_row,
                 INSTR (v_row, '|', 1, 1) + 1,
                 LENGTH (v_row) - INSTR (v_row, '|', 1, 1)
                );
      v_email := SUBSTR (v_row, 1, INSTR (v_row, '|', 1, 1) - 1);
      v_row :=
         SUBSTR (v_row,
                 INSTR (v_row, '|', 1, 1) + 1,
                 LENGTH (v_row) - INSTR (v_row, '|', 1, 1)
                );
      v_phone := SUBSTR (v_row, 1, INSTR (v_row, '|', 1, 1) - 1);
      v_row :=
         SUBSTR (v_row,
                 INSTR (v_row, '|', 1, 1) + 1,
                 LENGTH (v_row) - INSTR (v_row, '|', 1, 1)
                );
      v_mobile := SUBSTR (v_row, 1, INSTR (v_row, '|', 1, 1) - 1);
      v_row :=
         SUBSTR (v_row,
                 INSTR (v_row, '|', 1, 1) + 1,
                 LENGTH (v_row) - INSTR (v_row, '|', 1, 1)
                );
      v_fax := v_row;

      IF (   v_firstname IS NOT NULL
          OR v_lastname IS NOT NULL
          OR v_userid IS NOT NULL
          OR v_ein IS NOT NULL
          OR v_email IS NOT NULL
          OR v_phone IS NOT NULL
          OR v_mobile IS NOT NULL
          OR v_fax IS NOT NULL
         )
      THEN
         BEGIN
            INSERT INTO contact
                        (contact_id, first_name, last_name,
                         user_id, ein, email, phone_number, mobile_number,
                         fax, contact_type,
                         created_by, created_date
                        )
                 VALUES (contact_id.NEXTVAL, v_firstname, v_lastname,
                         v_userid, v_ein, v_email, v_phone, v_mobile,
                         v_fax, pkg_constants.con_cus_sales_supp_contact,
                         in_modifiedby, SYSDATE
                        )
              RETURNING contact_id
                   INTO v_contactid;

            INSERT INTO order_contact_detail
                        (order_contact_detail_id, order_header_id,
                         contact_id, created_by, created_date
                        )
                 VALUES (order_contact_detail_id.NEXTVAL, in_orderheaderid,
                         v_contactid, in_modifiedby, SYSDATE
                        );
         END;
      END IF;

-- System Engg contact
      v_row := in_secontact;
      v_firstname := SUBSTR (v_row, 1, INSTR (v_row, '|', 1, 1) - 1);
      v_row :=
         SUBSTR (v_row,
                 INSTR (v_row, '|', 1, 1) + 1,
                 LENGTH (v_row) - INSTR (v_row, '|', 1, 1)
                );
      v_lastname := SUBSTR (v_row, 1, INSTR (v_row, '|', 1, 1) - 1);
      v_row :=
         SUBSTR (v_row,
                 INSTR (v_row, '|', 1, 1) + 1,
                 LENGTH (v_row) - INSTR (v_row, '|', 1, 1)
                );
      v_email := SUBSTR (v_row, 1, INSTR (v_row, '|', 1, 1) - 1);
      v_row :=
         SUBSTR (v_row,
                 INSTR (v_row, '|', 1, 1) + 1,
                 LENGTH (v_row) - INSTR (v_row, '|', 1, 1)
                );
      v_phone := SUBSTR (v_row, 1, INSTR (v_row, '|', 1, 1) - 1);
      v_row :=
         SUBSTR (v_row,
                 INSTR (v_row, '|', 1, 1) + 1,
                 LENGTH (v_row) - INSTR (v_row, '|', 1, 1)
                );
      v_mobile := v_row;

      IF (   v_firstname IS NOT NULL
          OR v_lastname IS NOT NULL
          OR v_email IS NOT NULL
          OR v_phone IS NOT NULL
          OR v_mobile IS NOT NULL
         )
      THEN
         BEGIN
            INSERT INTO contact
                        (contact_id, first_name, last_name,
                         email, phone_number, mobile_number,
                         contact_type,
                         created_by, created_date
                        )
                 VALUES (contact_id.NEXTVAL, v_firstname, v_lastname,
                         v_email, v_phone, v_mobile,
                         pkg_constants.con_cus_sys_engg_contact,
                         in_modifiedby, SYSDATE
                        )
              RETURNING contact_id
                   INTO v_contactid;

            INSERT INTO order_contact_detail
                        (order_contact_detail_id, order_header_id,
                         contact_id, created_by, created_date
                        )
                 VALUES (order_contact_detail_id.NEXTVAL, in_orderheaderid,
                         v_contactid, in_modifiedby, SYSDATE
                        );
         END;
      END IF;

-- Acct Manager contact
      v_row := in_amcontact;
      v_firstname := SUBSTR (v_row, 1, INSTR (v_row, '|', 1, 1) - 1);
      v_row :=
         SUBSTR (v_row,
                 INSTR (v_row, '|', 1, 1) + 1,
                 LENGTH (v_row) - INSTR (v_row, '|', 1, 1)
                );
      v_lastname := SUBSTR (v_row, 1, INSTR (v_row, '|', 1, 1) - 1);
      v_row :=
         SUBSTR (v_row,
                 INSTR (v_row, '|', 1, 1) + 1,
                 LENGTH (v_row) - INSTR (v_row, '|', 1, 1)
                );
      v_userid := SUBSTR (v_row, 1, INSTR (v_row, '|', 1, 1) - 1);
      v_row :=
         SUBSTR (v_row,
                 INSTR (v_row, '|', 1, 1) + 1,
                 LENGTH (v_row) - INSTR (v_row, '|', 1, 1)
                );
      v_ein := TO_NUMBER (SUBSTR (v_row, 1, INSTR (v_row, '|', 1, 1) - 1));
      v_row :=
         SUBSTR (v_row,
                 INSTR (v_row, '|', 1, 1) + 1,
                 LENGTH (v_row) - INSTR (v_row, '|', 1, 1)
                );
      v_email := SUBSTR (v_row, 1, INSTR (v_row, '|', 1, 1) - 1);
      v_row :=
         SUBSTR (v_row,
                 INSTR (v_row, '|', 1, 1) + 1,
                 LENGTH (v_row) - INSTR (v_row, '|', 1, 1)
                );
      v_phone := SUBSTR (v_row, 1, INSTR (v_row, '|', 1, 1) - 1);
      v_row :=
         SUBSTR (v_row,
                 INSTR (v_row, '|', 1, 1) + 1,
                 LENGTH (v_row) - INSTR (v_row, '|', 1, 1)
                );
      v_mobile := SUBSTR (v_row, 1, INSTR (v_row, '|', 1, 1) - 1);
      v_row :=
         SUBSTR (v_row,
                 INSTR (v_row, '|', 1, 1) + 1,
                 LENGTH (v_row) - INSTR (v_row, '|', 1, 1)
                );
      v_fax := v_row;

      IF (   v_firstname IS NOT NULL
          OR v_lastname IS NOT NULL
          OR v_userid IS NOT NULL
          OR v_ein IS NOT NULL
          OR v_email IS NOT NULL
          OR v_phone IS NOT NULL
          OR v_mobile IS NOT NULL
          OR v_fax IS NOT NULL
         )
      THEN
         BEGIN
            INSERT INTO contact
                        (contact_id, first_name, last_name,
                         user_id, ein, email, phone_number, mobile_number,
                         fax, contact_type,
                         created_by, created_date
                        )
                 VALUES (contact_id.NEXTVAL, v_firstname, v_lastname,
                         v_userid, v_ein, v_email, v_phone, v_mobile,
                         v_fax, pkg_constants.con_cus_acct_mgr_contact,
                         in_modifiedby, SYSDATE
                        )
              RETURNING contact_id
                   INTO v_contactid;

            INSERT INTO order_contact_detail
                        (order_contact_detail_id, order_header_id,
                         contact_id, created_by, created_date
                        )
                 VALUES (order_contact_detail_id.NEXTVAL, in_orderheaderid,
                         v_contactid, in_modifiedby, SYSDATE
                        );
         END;
      END IF;

-- Order Mgr contact
      v_row := in_omcontact;
      v_firstname := SUBSTR (v_row, 1, INSTR (v_row, '|', 1, 1) - 1);
      v_row :=
         SUBSTR (v_row,
                 INSTR (v_row, '|', 1, 1) + 1,
                 LENGTH (v_row) - INSTR (v_row, '|', 1, 1)
                );
      v_lastname := SUBSTR (v_row, 1, INSTR (v_row, '|', 1, 1) - 1);
      v_row :=
         SUBSTR (v_row,
                 INSTR (v_row, '|', 1, 1) + 1,
                 LENGTH (v_row) - INSTR (v_row, '|', 1, 1)
                );
      v_email := SUBSTR (v_row, 1, INSTR (v_row, '|', 1, 1) - 1);
      v_row :=
         SUBSTR (v_row,
                 INSTR (v_row, '|', 1, 1) + 1,
                 LENGTH (v_row) - INSTR (v_row, '|', 1, 1)
                );
      v_phone := SUBSTR (v_row, 1, INSTR (v_row, '|', 1, 1) - 1);
      v_row :=
         SUBSTR (v_row,
                 INSTR (v_row, '|', 1, 1) + 1,
                 LENGTH (v_row) - INSTR (v_row, '|', 1, 1)
                );
      v_mobile := v_row;

      IF (   v_firstname IS NOT NULL
          OR v_lastname IS NOT NULL
          OR v_email IS NOT NULL
          OR v_phone IS NOT NULL
          OR v_mobile IS NOT NULL
         )
      THEN
         BEGIN
            INSERT INTO contact
                        (contact_id, first_name, last_name,
                         email, phone_number, mobile_number,
                         contact_type,
                         created_by, created_date
                        )
                 VALUES (contact_id.NEXTVAL, v_firstname, v_lastname,
                         v_email, v_phone, v_mobile,
                         pkg_constants.con_cus_order_mgr_contact,
                         in_modifiedby, SYSDATE
                        )
              RETURNING contact_id
                   INTO v_contactid;

            INSERT INTO order_contact_detail
                        (order_contact_detail_id, order_header_id,
                         contact_id, created_by, created_date
                        )
                 VALUES (order_contact_detail_id.NEXTVAL, in_orderheaderid,
                         v_contactid, in_modifiedby, SYSDATE
                        );
         END;
      END IF;

-- Order Mgr contact
      v_row := in_bpmcontact;
      v_firstname := SUBSTR (v_row, 1, INSTR (v_row, '|', 1, 1) - 1);
      v_row :=
         SUBSTR (v_row,
                 INSTR (v_row, '|', 1, 1) + 1,
                 LENGTH (v_row) - INSTR (v_row, '|', 1, 1)
                );
      v_lastname := SUBSTR (v_row, 1, INSTR (v_row, '|', 1, 1) - 1);
      v_row :=
         SUBSTR (v_row,
                 INSTR (v_row, '|', 1, 1) + 1,
                 LENGTH (v_row) - INSTR (v_row, '|', 1, 1)
                );
      v_email := SUBSTR (v_row, 1, INSTR (v_row, '|', 1, 1) - 1);
      v_row :=
         SUBSTR (v_row,
                 INSTR (v_row, '|', 1, 1) + 1,
                 LENGTH (v_row) - INSTR (v_row, '|', 1, 1)
                );
      v_phone := SUBSTR (v_row, 1, INSTR (v_row, '|', 1, 1) - 1);
      v_row :=
         SUBSTR (v_row,
                 INSTR (v_row, '|', 1, 1) + 1,
                 LENGTH (v_row) - INSTR (v_row, '|', 1, 1)
                );
      v_mobile := v_row;

      IF (   v_firstname IS NOT NULL
          OR v_lastname IS NOT NULL
          OR v_email IS NOT NULL
          OR v_phone IS NOT NULL
          OR v_mobile IS NOT NULL
         )
      THEN
         BEGIN
            INSERT INTO contact
                        (contact_id, first_name, last_name,
                         email, phone_number, mobile_number,
                         contact_type,
                         created_by, created_date
                        )
                 VALUES (contact_id.NEXTVAL, v_firstname, v_lastname,
                         v_email, v_phone, v_mobile,
                         pkg_constants.con_cus_bt_prj_mgr_contact,
                         in_modifiedby, SYSDATE
                        )
              RETURNING contact_id
                   INTO v_contactid;

            INSERT INTO order_contact_detail
                        (order_contact_detail_id, order_header_id,
                         contact_id, created_by, created_date
                        )
                 VALUES (order_contact_detail_id.NEXTVAL, in_orderheaderid,
                         v_contactid, in_modifiedby, SYSDATE
                        );
         END;
      END IF;

      out_status := pkg_constants.con_status_success;
-- COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         out_errmsg := SQLERRM;
--  ROLLBACK;
   END;

--This SP is used to fetch all the billing IDs from classic and SQE and also selects defaults billing ID
   PROCEDURE sps_site_billing (
      in_orderheaderid   IN       order_header.quote_header_id%TYPE,
      in_siteid          IN       site.site_id%TYPE,
      in_customerid      IN       customer.customer_id%TYPE,
      out_sitebilling    OUT      sys_refcursor
   )
   AS
      v_billingcnt   NUMBER;
   BEGIN
--Check If billing ID is already available for the site and order
      SELECT COUNT (*)
        INTO v_billingcnt
        FROM order_site_detail
       WHERE order_header_id = in_orderheaderid
         AND site_id = in_siteid
         AND active = pkg_constants.con_activeflag_yes;

      IF (v_billingcnt > 0
         )               -- if billing ID already available for site and order
      THEN
         BEGIN
--select billing ID for the selected order and site
            OPEN out_sitebilling FOR
               SELECT   billing_id, SYSTEM, NULL AS currency,
                        pkg_constants.con_activeflag_yes "Default"
                   FROM order_site_detail
                  WHERE order_header_id = in_orderheaderid
                    AND site_id = in_siteid
                    AND active = pkg_constants.con_activeflag_yes
               UNION ALL
-- select default billing ID for the customer
               SELECT   billing_id, SYSTEM, currency,
                        pkg_constants.con_activeflag_no "Default"
                   FROM customer_billing_info
                  WHERE customer_id = in_customerid
                    AND order_header_id = in_orderheaderid
                    AND is_default = pkg_constants.con_activeflag_yes
                    AND TO_CHAR (billing_id) NOT IN (
                           SELECT billing_id
                             FROM order_site_detail
                            WHERE order_header_id = in_orderheaderid
                              AND site_id = in_siteid
                              AND active = pkg_constants.con_activeflag_yes)
-- select classic billing IDs for the customer
               UNION ALL
               SELECT   billing_id, SYSTEM, currency,
                        pkg_constants.con_activeflag_no "Default"
                   FROM customer_billing_info
                  WHERE customer_id = in_customerid
                    AND order_header_id = in_orderheaderid
                    AND is_default = pkg_constants.con_activeflag_no
                    AND billing_id NOT IN (
                           SELECT billing_id
                             FROM order_site_detail
                            WHERE order_header_id = in_orderheaderid
                              AND site_id = in_siteid
                              AND active = pkg_constants.con_activeflag_yes)
               UNION ALL
-- select SQE billing IDs
               SELECT   billing_code, pkg_constants.con_system_sqe, currency,
                        pkg_constants.con_activeflag_no "Default"
                   FROM billing
                  WHERE customer_id = in_customerid
                    AND billing_code NOT IN (
                           SELECT billing_id
                             FROM order_site_detail
                            WHERE order_header_id = in_orderheaderid
                              AND site_id = in_siteid
                              AND active = pkg_constants.con_activeflag_yes
                              AND SYSTEM = pkg_constants.con_system_sqe)
                    AND billing_code NOT IN (
                           SELECT billing_id
                             FROM customer_billing_info
                            WHERE customer_id = in_customerid
                              AND order_header_id = in_orderheaderid
                              AND is_default =
                                              pkg_constants.con_activeflag_yes
                              AND SYSTEM = pkg_constants.con_system_sqe)
               ORDER BY 2, 1;
         END;
      ELSE
         BEGIN              -- if billing ID not available for site and order
            OPEN out_sitebilling FOR
-- select default billing ID for the customer
               SELECT   billing_id, SYSTEM, currency,
                        pkg_constants.con_activeflag_yes "Default"
                   FROM customer_billing_info
                  WHERE customer_id = in_customerid
                    AND order_header_id = in_orderheaderid
                    AND is_default = pkg_constants.con_activeflag_yes
               UNION ALL
-- select classic billing IDs for the customer
               SELECT   billing_id, SYSTEM, currency,
                        pkg_constants.con_activeflag_no "Default"
                   FROM customer_billing_info
                  WHERE customer_id = in_customerid
                    AND order_header_id = in_orderheaderid
                    AND is_default = pkg_constants.con_activeflag_no
               UNION ALL
-- select SQE billing IDs
               SELECT   billing_code, pkg_constants.con_system_sqe, currency,
                        pkg_constants.con_activeflag_no "Default"
                   FROM billing
                  WHERE customer_id = in_customerid
                    AND billing_code NOT IN (
                           SELECT billing_id
                             FROM customer_billing_info
                            WHERE customer_id = in_customerid
                              AND order_header_id = in_orderheaderid
                              AND is_default =
                                              pkg_constants.con_activeflag_yes
                              AND SYSTEM = pkg_constants.con_system_sqe)
               ORDER BY 2, 1;
         END;
      END IF;
   END;

   PROCEDURE spi_customer_billing (
      in_customerid         IN       customer.customer_id%TYPE,
      in_orderheaderid      IN       order_header.quote_header_id%TYPE,
      in_billinglist        IN       VARCHAR2,
      in_defaultbillingid   IN       VARCHAR2,
      in_defaultsystem      IN       customer_billing_info.SYSTEM%TYPE,
      in_currency           IN       customer_billing_info.currency%TYPE,
---Added by Srini
      in_modifiedby         IN       NUMBER,
      out_status            OUT      NUMBER,
      out_errmsg            OUT      VARCHAR2
   )
   AS
      v_billing      t_billing;
      v_billingcnt   NUMBER;
      v_createdate   DATE;
      v_count        NUMBER;
   BEGIN
      v_createdate := SYSDATE;

----Modified on 10-Feb-10 in_billinglist is null then update the billing id,
--- corresponding details.
      IF (in_billinglist IS NULL)
      THEN
         BEGIN
            UPDATE customer_billing_info
               SET is_default = pkg_constants.con_activeflag_no
             WHERE customer_id = in_customerid
               AND order_header_id = in_orderheaderid
               AND SYSTEM = pkg_constants.con_system_classic;

            SELECT COUNT (*)
              INTO v_count
              FROM customer_billing_info
             WHERE customer_id = in_customerid
               AND order_header_id = in_orderheaderid
               AND SYSTEM = pkg_constants.con_system_sqe;

            IF (v_count > 0)
            THEN
               BEGIN
                  UPDATE customer_billing_info
                     SET billing_id = in_defaultbillingid,
                         is_default = pkg_constants.con_activeflag_yes,
                         SYSTEM = in_defaultsystem
                   WHERE customer_id = in_customerid
                     AND order_header_id = in_orderheaderid
                     AND SYSTEM = pkg_constants.con_system_sqe;
               END;
            ELSE
               BEGIN
                  INSERT INTO customer_billing_info
                              (customer_billing_info_id,
                               customer_id, order_header_id,
                               billing_id,
                               SYSTEM,
                               is_default,
                               created_by, created_date,
                               currency                      ---Added By Srini
                              )
                       VALUES (customer_billing_info_id.NEXTVAL,
                               in_customerid, in_orderheaderid,
                               in_defaultbillingid,
                               UPPER (in_defaultsystem),
                               pkg_constants.con_activeflag_yes,
                               in_modifiedby, v_createdate,
                               in_currency
                              );
               END;
            END IF;

            out_status := pkg_constants.con_status_success;
         END;
      ELSE
         BEGIN
            DELETE FROM customer_billing_info
                  WHERE customer_id = in_customerid
                    AND order_header_id = in_orderheaderid;

            IF (in_billinglist IS NOT NULL)
            THEN
               SELECT pkg_common.fn_countfields (in_billinglist || '|', '|')
                 INTO v_billingcnt
                 FROM DUAL;
            END IF;

            IF (v_billingcnt > 0)
            THEN
               BEGIN
                  SELECT DISTINCT COLUMN_VALUE
                  BULK COLLECT INTO v_billing
                             FROM TABLE
                                     (CAST
                                         (pkg_common.fn_splitdata
                                                              (in_billinglist,
                                                               '|'
                                                              ) AS varchar2_ntt
                                         )
                                     );

                  FORALL i IN v_billing.FIRST .. v_billing.LAST
                     INSERT INTO customer_billing_info
                                 (customer_billing_info_id,
                                  customer_id, order_header_id,
                                  billing_id,
                                  SYSTEM,
                                  is_default,
                                  created_by, created_date,
                                  currency                   ---Added By Srini
                                 )
                          VALUES (customer_billing_info_id.NEXTVAL,
                                  in_customerid, in_orderheaderid,
                                  v_billing (i),
                                  pkg_constants.con_system_classic,
                                  pkg_constants.con_activeflag_no,
                                  in_modifiedby, v_createdate,
                                  in_currency
                                 );
               END;
            END IF;

            IF (in_defaultbillingid IS NOT NULL)
            THEN
               BEGIN
                  SELECT COUNT (*)
                    INTO v_billingcnt
                    FROM customer_billing_info
                   WHERE customer_id = in_customerid
                     AND order_header_id = in_orderheaderid
                     AND billing_id = in_defaultbillingid
                     AND SYSTEM = in_defaultsystem;

                  IF (v_billingcnt > 0)
                  THEN
                     BEGIN
                        UPDATE customer_billing_info
                           SET is_default = pkg_constants.con_activeflag_yes,
                               SYSTEM = in_defaultsystem
                         WHERE customer_id = in_customerid
                           AND order_header_id = in_orderheaderid
                           AND billing_id = in_defaultbillingid
                           AND SYSTEM = pkg_constants.con_system_classic;
                     END;
                  ELSE
                     BEGIN
                        INSERT INTO customer_billing_info
                                    (customer_billing_info_id,
                                     customer_id, order_header_id,
                                     billing_id,
                                     SYSTEM,
                                     is_default,
                                     created_by, created_date,
                                     currency                ---Added By Srini
                                    )
                             VALUES (customer_billing_info_id.NEXTVAL,
                                     in_customerid, in_orderheaderid,
                                     in_defaultbillingid,
                                     UPPER (in_defaultsystem),
                                     pkg_constants.con_activeflag_yes,
                                     in_modifiedby, v_createdate,
                                     in_currency
                                    );
                     END;
                  END IF;

                  out_status := pkg_constants.con_status_success;
               END;
            ELSE
               BEGIN
                  out_status := pkg_constants.con_status_failure;
                  out_errmsg := 'Invalid Billing Account Info';
               END;
            END IF;
         END;
      END IF;

      out_status := pkg_constants.con_status_success;
   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         out_errmsg := SQLERRM;
   END;

-- this SP Updates classic site information to the SQE site table
-- also inserts other site level informations such as customer required date
-- selected billing Id for the site in the order_site_detail table
-- if details are already available for the selected site and order
-- the information is soft deleted and a new set of values will be inserted
   PROCEDURE spi_order_site_detail (
      in_orderheaderid     IN       order_header.order_header_id%TYPE,
      in_customerid        IN       customer.customer_id%TYPE,
      in_siteid            IN       order_site_detail.site_id%TYPE,
      in_classicsiteid     IN       site.classic_site_id%TYPE,
      in_classicsitename   IN       site.classic_site_name%TYPE,
      in_crd               IN       VARCHAR2,
      in_sitebillingid     IN       order_site_detail.billing_id%TYPE,
      in_system            IN       order_site_detail.SYSTEM%TYPE,
      in_modifiedby        IN       order_site_detail.created_by%TYPE,
      out_status           OUT      NUMBER,
      out_errmsg           OUT      VARCHAR2
   )
   AS
      v_crd              DATE;
      v_createdate       DATE   := SYSDATE;
      v_siteordercount   NUMBER;
      v_ofsd             DATE;
   BEGIN
      v_crd := TO_DATE (in_crd, 'DD-MON-YYYY');

      IF (in_classicsiteid IS NOT NULL OR in_classicsitename IS NOT NULL)
-- If any of the classic site information is valid  the update the site table
-- with classic site information
      THEN
         BEGIN
            UPDATE site
               SET classic_site_id = in_classicsiteid,
                   classic_site_name = in_classicsitename,
                   modified_by = in_modifiedby,
                   modified_date = v_createdate
             WHERE site_id = in_siteid AND customer_id = in_customerid;
         END;
      END IF;

      SELECT COUNT (*)
        INTO v_siteordercount
        FROM order_site_detail
       WHERE order_header_id = in_orderheaderid
         AND site_id = in_siteid
         AND active = pkg_constants.con_activeflag_yes;

-- check if the site has already got site detail for the order
      IF (v_siteordercount > 0)
      THEN
-- if yes the soft delete the details in the order site detail table
         BEGIN
            UPDATE order_site_detail
               SET active = pkg_constants.con_activeflag_no,
                   modified_by = in_modifiedby,
                   modified_date = v_createdate
             WHERE order_header_id = in_orderheaderid AND site_id = in_siteid;
         END;
      END IF;

      IF (in_sitebillingid IS NOT NULL)
      THEN
         INSERT INTO order_site_detail
                     (order_site_detail_id, order_header_id,
                      site_id, billing_id, SYSTEM, customer_required_date,
                      active, created_by,
                      created_date
                     )
              VALUES (order_site_detail_id.NEXTVAL, in_orderheaderid,
                      in_siteid, in_sitebillingid, in_system, v_crd,
                      pkg_constants.con_activeflag_yes, in_modifiedby,
                      v_createdate
                     );
      END IF;

--         SELECT MAX(customer_signed_date) INTO   v_ofsd
--                FROM  order_site_detail WHERE order_header_id = in_orderheaderid
--                                        AND  active   = pkg_constants.con_activeflag_yes;
--
--         UPDATE order_header SET  ORDER_FORM_SIGN_DATE = v_ofsd,
--                                  modified_by =  in_modifiedby,
--                                  modified_date = v_createDate
--                      WHERE order_header_id = in_orderheaderid;
      out_status := pkg_constants.con_status_success;
      out_errmsg := 'Successfully Updated Site Details';
-- COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         out_errmsg := SQLERRM;
--   ROLLBACK;
   END;

   PROCEDURE sps_validate_classic (
      in_customerid   IN       customer.customer_id%TYPE,
      out_status      OUT      NUMBER
--  out_errmsg      OUT      VARCHAR2
   )
   AS
      v_custcnt     NUMBER;
      v_stbillcnt   NUMBER;
      v_sitecnt     NUMBER;
      v_status      NUMBER;
   BEGIN
      SELECT COUNT (*)
        INTO v_custcnt
        FROM customer
       WHERE customer_id = in_customerid
         AND (   classic_customer_id IS NOT NULL
              OR classic_customer_name IS NOT NULL
             );

      SELECT COUNT (*)
        INTO v_sitecnt
        FROM site
       WHERE customer_id = in_customerid
         AND (classic_site_id IS NOT NULL OR classic_site_name IS NOT NULL)
         AND main_site_flag IS NULL;

      SELECT COUNT (*)
        INTO v_stbillcnt
        FROM order_site_detail
       WHERE site_id IN (SELECT site_id
                           FROM site
                          WHERE customer_id = in_customerid)
         AND SYSTEM = pkg_constants.con_system_classic
         AND active = pkg_constants.con_activeflag_yes;

      out_status :=
         CASE
            WHEN v_stbillcnt != 0
               THEN 3                             --if billing is from classic
            WHEN v_sitecnt != 0
               THEN 2                                --if site is from classic
            WHEN v_custcnt != 0
               THEN 1                            --if customer is from classic
            ELSE 0                                  --if validation has passed
         END;
   END;

   PROCEDURE spu_customer_classic (
      in_customerid   IN       customer.customer_id%TYPE,
      in_modifiedby   IN       customer.modified_by%TYPE,
      out_status      OUT      NUMBER,
      out_errmsg      OUT      VARCHAR2
   )
   AS
      v_rowcount   NUMBER;
   BEGIN
      SELECT COUNT (*)
        INTO v_rowcount
        FROM customer
       WHERE customer_id = in_customerid
         AND (   classic_customer_id IS NOT NULL
              OR classic_customer_name IS NOT NULL
             );

      IF (v_rowcount <> 0)
      THEN
         BEGIN
            DELETE FROM customer_billing_info
                  WHERE customer_id = in_customerid
                    AND SYSTEM = pkg_constants.con_system_classic;

            UPDATE customer
               SET classic_customer_id = NULL,
                   classic_customer_name = NULL,
                   modified_by = in_modifiedby,
                   modified_date = SYSDATE
             WHERE customer_id = in_customerid;

            out_status := pkg_constants.con_status_success;
         END;
      ELSE
         out_status := pkg_constants.con_status_failure;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         out_errmsg := SQLERRM;
--  ROLLBACK;
   END;

   PROCEDURE spu_site_classic (
      in_siteid       IN       site.site_id%TYPE,
      in_modifiedby   IN       site.modified_by%TYPE,
      out_status      OUT      NUMBER,
      out_errmsg      OUT      VARCHAR2
   )
   AS
      v_rowcount   NUMBER;
   BEGIN
      SELECT COUNT (*)
        INTO v_rowcount
        FROM site
       WHERE site_id = in_siteid
         AND (classic_site_id IS NOT NULL OR classic_site_name IS NOT NULL);

      IF (v_rowcount <> 0)
      THEN
         BEGIN
            DELETE FROM order_site_detail
                  WHERE site_id = in_siteid
                    AND SYSTEM = pkg_constants.con_system_classic
                    AND active = pkg_constants.con_activeflag_yes;

            UPDATE site
               SET classic_site_id = NULL,
                   classic_site_name = NULL,
                   modified_by = in_modifiedby,
                   modified_date = SYSDATE
             WHERE site_id = in_siteid;

            out_status := pkg_constants.con_status_success;
         END;
      ELSE
         out_status := pkg_constants.con_status_failure;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         out_errmsg := SQLERRM;
-- ROLLBACK;
   END;

   PROCEDURE sps_validate_order (
      in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
      out_status         OUT      NUMBER,
      out_icb_status     OUT      NUMBER,
-- Added in_product_name on 17/12/2010 as part of introducing new table QUOTE_STATUS
      in_product_name    IN       VARCHAR2 DEFAULT NULL
   )
   AS
/*returns 1 if for a given quote header
if all the sites are priced
pricing status ofthe selected access_qref is 'Firm''
access_type for the selected access_qref is not null
status of the quote is 'Customer Approved''
connector type returned from APE (i.e., in access_qref)
is same as connector type saved in CPE config
otherwise, if dsl is there, then dsl connector type
should be same as CPE connector type
*/
      v_price                      VARCHAR2 (20);
      v_sitecount                  NUMBER;
      v_pricecount                 NUMBER;
      v_aqrefcnt                   NUMBER;
      v_conncnt                    NUMBER;
      v_budgetcnt                  NUMBER;
      v_dslcnt                     NUMBER;
      v_rescnt                     NUMBER;
      v_othercnt                   NUMBER;
      v_acctypcnt                  NUMBER;
      v_sitecnt                    NUMBER                  := 0;
      v_consitecnt                 NUMBER                  := 0;
      v_dslsitecnt                 NUMBER                  := 0;
      v_active_access_qref_count   NUMBER                  := 0;
      v_common_qref_count          NUMBER                  := 0;
      v_isaccess_dsl               NUMBER (1)              := 0;
--added for 904 sprint 2
      v_bid_request                NUMBER;
      v_bid_status                 NUMBER;
      v_is_access_mode_customer    NUMBER                  := 0;
      v_is_hvpn                    NUMBER                  := 0;
      v_do_check_for_qref_expir    NUMBER (1)              := 0;
      v_cnt                        NUMBER                  := 0;
      v_quote_id                   NUMBER                  := NULL;
      v_journey_type               quote.order_type%TYPE;
      v_manual_price               NUMBER                  := 0;
/* Added for resolving defect 81846 Jay*/
      v_access_t                   VARCHAR2 (15);
      v_access_m                   VARCHAR2 (150);
      v_hvpn_site_id               VARCHAR2 (90);
      v_bid_expiry_status          NUMBER                  := 0;
--The below variable added to skip validation for connector type if the special bid is port only hardwire
      v_port_only_hardwire         NUMBER                  := 0;
-- Below variables added on 27/5/2011 as part of the defect 108940
      v_order_type                 VARCHAR2 (100);
      v_res_opt_comm_cnt           NUMBER                  := 0;
      v_tot_site_cnt               NUMBER                  := 0;
-- Added on 30/6/2011
      v_acc_othr_conn_type_pri     NUMBER                  := 0;
      v_acc_othr_conn_type_sec     NUMBER                  := 0;
      v_cpe_conn_type_pri          NUMBER                  := 0;
      v_cpe_conn_type_sec          NUMBER                  := 0;

-- Added on 11/8/2011
      v_acc_bkp_exists             NUMBER                  := 0;
      v_multisite_dsl_cnt          NUMBER                  := 0;
      v_active_cpe_qref_count      NUMBER                  := 0;
      v_is_cpe_stdunbld            NUMBER                  := 0;
      v_ICB                        NUMBER                  := 0; -- added to skip CPE_QREF Expiry for ICB

      CURSOR c1
      IS
         SELECT site_id
           FROM quote_site
          WHERE quote_header_id = in_quoteheaderid AND active = 'Y';
   BEGIN
      out_status := pkg_constants.con_status_success;

--- Added on 30/6/2011 to populate access_qref conn type with cpe_qref conn type,
--  if the former is of 'Firm' and connector type is NULL or 'OTHER / NON STANDARD'
      FOR i IN c1
      LOOP
         SELECT COUNT (1)
           INTO v_acc_othr_conn_type_pri
           FROM access_qref
          WHERE quote_site_id IN (
                   SELECT quote_site_id
                     FROM quote_site
                    WHERE quote_header_id = in_quoteheaderid
                      AND site_id = i.site_id
                      AND active = 'Y')
            AND pricing_status = 'Firm'
            AND (   UPPER (connector) LIKE '%OTHER / NON STANDARD%'
                 OR connector IS NULL
                )
            AND active = 'Y'
            AND NVL (UPPER (leg_id), 'LEG1') = 'LEG1';

         IF v_acc_othr_conn_type_pri > 0
         THEN
            BEGIN
               SELECT lid.VALUE
                 INTO v_cpe_conn_type_pri
                 FROM line_item li, line_item_detail lid
                WHERE li.quote_header_id = in_quoteheaderid
                  AND li.site_id = i.site_id
                  AND li.line_item_id = lid.line_item_id
                  AND li.active = 'Y'
                  AND lid.active = 'Y'
                  AND lid.attribute_mapping_id = 307
                  AND UPPER (li.fallback_type) = 'PRIMARY'
                  AND ROWNUM < 2;    -- Incase if it retrieves more than a row

               UPDATE access_qref
                  SET connector = v_cpe_conn_type_pri
                WHERE quote_site_id IN (
                         SELECT quote_site_id
                           FROM quote_site
                          WHERE quote_header_id = in_quoteheaderid
                            AND site_id = i.site_id
                            AND active = 'Y')
                  AND pricing_status = 'Firm'
                  AND (   UPPER (connector) LIKE '%OTHER / NON STANDARD%'
                       OR connector IS NULL
                      )
                  AND active = 'Y'
                  AND NVL (UPPER (leg_id), 'LEG1') = 'LEG1';
            EXCEPTION
               WHEN OTHERS
               THEN
                  out_status := pkg_constants.con_status_failure;
                  pkg_common.spi_error_log
                     (NULL,
                      in_quoteheaderid,
                      NULL,
                      NULL,
                      'PKG_ORDER',
                      'SPS_VALIDATE_ORDER',
                      out_status,
                      'No CPE connector type found to update access_qref connector type - primary'
                     );
            END;
         END IF;

         SELECT COUNT (1)
           INTO v_acc_othr_conn_type_sec
           FROM access_qref
          WHERE quote_site_id IN (
                   SELECT quote_site_id
                     FROM quote_site
                    WHERE quote_header_id = in_quoteheaderid
                      AND site_id = i.site_id
                      AND active = 'Y')
            AND pricing_status = 'Firm'
            AND (   UPPER (connector) LIKE '%OTHER / NON STANDARD%'
                 OR connector IS NULL
                )
            AND active = 'Y'
            AND UPPER (leg_id) = 'LEG2';

         IF v_acc_othr_conn_type_sec > 0
         THEN
            BEGIN
               SELECT lid.VALUE
                 INTO v_cpe_conn_type_sec
                 FROM line_item li, line_item_detail lid
                WHERE li.quote_header_id = in_quoteheaderid
                  AND li.site_id = i.site_id
                  AND li.line_item_id = lid.line_item_id
                  AND li.active = 'Y'
                  AND lid.active = 'Y'
                  AND lid.attribute_mapping_id = 307
                  AND UPPER (li.fallback_type) = 'SECONDARY'
                  AND ROWNUM < 2;    -- Incase if it retrieves more than a row

               UPDATE access_qref
                  SET connector = v_cpe_conn_type_sec
                WHERE quote_site_id IN (
                         SELECT quote_site_id
                           FROM quote_site
                          WHERE quote_header_id = in_quoteheaderid
                            AND site_id = i.site_id
                            AND active = 'Y')
                  AND pricing_status = 'Firm'
                  AND (   UPPER (connector) LIKE '%OTHER / NON STANDARD%'
                       OR connector IS NULL
                      )
                  AND active = 'Y'
                  AND UPPER (leg_id) = 'LEG2';
            EXCEPTION
               WHEN OTHERS
               THEN
                  out_status := pkg_constants.con_status_failure;
                  pkg_common.spi_error_log
                     (NULL,
                      in_quoteheaderid,
                      NULL,
                      NULL,
                      'PKG_ORDER',
                      'SPS_VALIDATE_ORDER',
                      out_status,
                      'No CPE connector type found to update access_qref connector type - secondary'
                     );
            END;
         END IF;
-------- End ------------
      END LOOP;

--count of active sites for that quote_header_id
      SELECT COUNT (DISTINCT site_id)
        INTO v_sitecount
        FROM line_item
       WHERE quote_header_id = in_quoteheaderid
         AND UPPER (product_name) IN (SELECT UPPER (product_name)
                                        FROM product_master_details
                                       WHERE parent_group_id = 1)
         AND active = pkg_constants.con_activeflag_yes;

--count of sites which are priced for that quote_header_id
      SELECT COUNT (DISTINCT site_id)
        INTO v_pricecount
        FROM line_item
       WHERE quote_header_id = in_quoteheaderid
         AND UPPER (product_name) IN (SELECT UPPER (product_name)
                                        FROM product_master_details
                                       WHERE parent_group_id = 1)
         AND active = pkg_constants.con_activeflag_yes
         AND priced = pkg_constants.con_activeflag_yes;

-----------for hvpn----------
      BEGIN
         FOR i IN c1
         LOOP
            BEGIN
               SELECT DISTINCT ld.VALUE
                          INTO v_access_t
                          FROM line_item_detail ld
                         WHERE line_item_id IN (
                                  SELECT line_item_id
                                    FROM line_item li
                                   WHERE li.quote_header_id = in_quoteheaderid
                                     AND li.site_id = i.site_id
                                     AND li.active = 'Y')
                           AND ld.attribute_mapping_id = 3
                           AND ld.active = 'Y';

               SELECT DISTINCT ld.VALUE
                          INTO v_access_m
                          FROM line_item_detail ld
                         WHERE line_item_id IN (
                                  SELECT line_item_id
                                    FROM line_item li
                                   WHERE li.quote_header_id = in_quoteheaderid
                                     AND li.site_id = i.site_id
                                     AND li.active = 'Y')
                           AND ld.attribute_mapping_id = 111
                           AND ld.active = 'Y';

               IF     NVL (v_access_t, 'X') = 'HVPN'
                  AND NVL (v_access_m, 'Y') = 'Customer Provided Access'
               THEN
                  v_hvpn_site_id := i.site_id;
                  EXIT;
               END IF;
            EXCEPTION
               WHEN NO_DATA_FOUND
               THEN
                  NULL;
               WHEN OTHERS
               THEN
                  NULL;
            END;
         END LOOP;

         IF v_hvpn_site_id IS NOT NULL
         THEN
            GOTO icb_check;
         END IF;
      END;

      v_port_only_hardwire := 0;

      SELECT COUNT (*)
        INTO v_port_only_hardwire
        FROM bid_request_status
       WHERE quote_header_id = in_quoteheaderid
         AND UPPER (non_std_comp) = 'PORTONLYHARDWIRE'
         AND active = 'Y';

-- Added on 27/5/2011 as part of defect 108940 -- Modify C6.6 scenario
      BEGIN
         SELECT NVL (bs.order_type, q.order_type)
           INTO v_order_type
           FROM bundle_selection bs, quote q, quote_header qh
          WHERE q.quote_id = qh.quote_id
            AND bs.quote_header_id = qh.quote_header_id
            AND bs.quote_header_id = in_quoteheaderid;
      EXCEPTION
         WHEN OTHERS
         THEN
            v_order_type := NULL;
      END;

      SELECT COUNT (DISTINCT li.site_id)
        INTO v_tot_site_cnt
        FROM line_item li
       WHERE li.active = 'Y'
         AND li.site_id IS NOT NULL
         AND li.quote_header_id = in_quoteheaderid;

      SELECT COUNT (DISTINCT li.site_id)
        INTO v_res_opt_comm_cnt
        FROM line_item_detail lid,
             line_item li,
             attribute_mapping am,
             quote_header qh
       WHERE li.active = 'Y'
         AND li.site_id IS NOT NULL
         AND lid.active = 'Y'
         AND lid.line_item_id = li.line_item_id
         AND am.attribute_mapping_id = lid.attribute_mapping_id
         AND li.quote_header_id = qh.quote_header_id
         AND qh.quote_header_id = in_quoteheaderid
         AND lid.attribute_mapping_id = 32
         AND UPPER (lid.VALUE) = 'COMMERCIAL ONLY';

---- Ends here ---
      IF (v_sitecount <> v_pricecount)
--check if all sites for that quote header are priced
      THEN
         BEGIN
            out_status := pkg_constants.con_status_failure;
            pkg_common.spi_error_log
                    (NULL,
                     in_quoteheaderid,
                     NULL,
                     NULL,
                     'PKG_ORDER',
                     'SPS_VALIDATE_ORDER',
                     out_status,
                     'some of the sites for that quote header are not priced'
                    );
         END;
      ELSE
         BEGIN
--to check if access_qrefs exist for that quote_header
            SELECT COUNT (*)
              INTO v_aqrefcnt
              FROM access_qref
             WHERE quote_site_id IN (
                      SELECT quote_site_id
                        FROM quote_site
                       WHERE quote_header_id = in_quoteheaderid
                         AND active = pkg_constants.con_activeflag_yes)
               AND active = pkg_constants.con_activeflag_yes;

            IF (v_aqrefcnt > 0)
            THEN
               BEGIN
--if access_type in access_qref is null
                  SELECT COUNT (*)
                    INTO v_acctypcnt
                    FROM access_qref aq LEFT OUTER JOIN quote_site qtst
                         ON qtst.quote_site_id = aq.quote_site_id
                         LEFT OUTER JOIN line_item li
                         ON li.quote_header_id = qtst.quote_header_id
                         LEFT OUTER JOIN price_line_item_detail plid
                         ON aq.access_qref = plid.external_qref
                       AND plid.line_item_id = li.line_item_id
                   WHERE li.quote_header_id = in_quoteheaderid
                     AND UPPER (li.product_name) IN (
                                                   SELECT UPPER (product_name)
                                                     FROM product_master_details
                                                    WHERE parent_group_id = 1)
                     AND plid.active = pkg_constants.con_activeflag_yes
                     AND li.active = pkg_constants.con_activeflag_yes
                     AND li.priced = pkg_constants.con_activeflag_yes
                     AND (aq.access_type IS NULL OR aq.access_type = '');

                  IF (v_acctypcnt > 0)
                  THEN
                     out_status := pkg_constants.con_status_failure;
                     pkg_common.spi_error_log
                                        (NULL,
                                         in_quoteheaderid,
                                         NULL,
                                         NULL,
                                         'PKG_ORDER',
                                         'SPS_VALIDATE_ORDER',
                                         out_status,
                                         'access_type in access_qref is null'
                                        );
                  END IF;

--get count of rows and sites having resiliency standard - unbundled
                  SELECT COUNT (*), COUNT (DISTINCT res.site_id)
                    INTO v_rescnt, v_sitecnt
                    FROM (SELECT li.site_id, lid.VALUE
                            FROM line_item li INNER JOIN line_item_detail lid
                                 ON li.line_item_id = lid.line_item_id
                               AND li.active =
                                              pkg_constants.con_activeflag_yes
                               AND lid.active =
                                              pkg_constants.con_activeflag_yes
                               AND li.quote_header_id = in_quoteheaderid
                               AND UPPER (li.product_name) IN (
                                                   SELECT UPPER (product_name)
                                                     FROM product_master_details
                                                    WHERE parent_group_id = 1)
                               AND lid.attribute_mapping_id =
                                        pkg_constants.con_resiliency_attrmapid
                                 ) res
                   WHERE UPPER (res.VALUE) = pkg_constants.con_resiliency;

--get count of rows and sites having other resiliency
                  SELECT COUNT (*)
                    INTO v_othercnt
                    FROM (SELECT li.site_id, lid.VALUE
                            FROM line_item li INNER JOIN line_item_detail lid
                                 ON li.line_item_id = lid.line_item_id
                               AND li.active =
                                              pkg_constants.con_activeflag_yes
                               AND lid.active =
                                              pkg_constants.con_activeflag_yes
                               AND li.quote_header_id = in_quoteheaderid
                               AND UPPER (li.product_name) IN (
                                                   SELECT UPPER (product_name)
                                                     FROM product_master_details
                                                    WHERE parent_group_id = 1)
                               AND lid.attribute_mapping_id =
                                        pkg_constants.con_resiliency_attrmapid
                                 ) res
                   WHERE UPPER (res.VALUE) != pkg_constants.con_resiliency;

--get count of rows and sites where qref connetor type is same as CPE connector type
-- added by Mahim , CASE to handle non std scenario-in case of non std  connetor type match is not required
                  SELECT COUNT (*), COUNT (DISTINCT y.site_id)
                    INTO v_conncnt, v_consitecnt
                    FROM (SELECT qtst.quote_header_id, qtst.site_id,
                                 aq.access_qref, aq.connector
                            FROM quote_site qtst INNER JOIN access_qref aq
                                 ON qtst.quote_site_id = aq.quote_site_id
                           WHERE qtst.quote_header_id = in_quoteheaderid
                             AND qtst.active =
                                              pkg_constants.con_activeflag_yes
                             AND aq.active = pkg_constants.con_activeflag_yes) x
                         INNER JOIN
                         (SELECT li.quote_header_id, li.site_id, lid.VALUE,
                                 lid.non_std_flag
                            FROM line_item li INNER JOIN line_item_detail lid
                                 ON li.line_item_id = lid.line_item_id
                           WHERE li.active = pkg_constants.con_activeflag_yes
                             AND lid.active = pkg_constants.con_activeflag_yes
                             AND lid.attribute_mapping_id =
                                    CASE
                                       WHEN (NVL (lid.non_std_flag, 'N') = 'N'
                                            )
                                          THEN pkg_constants.con_conntype_attrmapid
                                       ELSE lid.attribute_mapping_id
                                    END
--pkg_constants.con_conntype_attrmapid
                             AND li.quote_header_id = in_quoteheaderid
                             AND UPPER (li.product_name) IN (
                                                   SELECT UPPER (product_name)
                                                     FROM product_master_details
                                                    WHERE parent_group_id = 1)) y
                         ON x.quote_header_id = y.quote_header_id
                       AND x.site_id = y.site_id
                       AND UPPER (x.connector) LIKE
                              CASE
                                 WHEN (NVL (y.non_std_flag, 'N') = 'N')
                                    THEN UPPER (y.VALUE) || '%'
                                 ELSE UPPER (x.connector) || '%'
                              END
                         ;

--*************** Start Modified By Tanmayi ************************
/* If sites are DSL and non-DSL , then for non-DSL it will
come in this if loop since access_qrefs are there
+ it should check if any other sites are also DSL
for which access_qref will not be there
*/
--check connector types for dsl
                  SELECT COUNT (*), COUNT (DISTINCT y.site_id)
                    INTO v_dslcnt, v_dslsitecnt
                    FROM (SELECT li.quote_header_id, li.site_id, lid.VALUE,

-- Added on 12/4/2011 as part of defect fix for 104683
                                 lid.non_std_flag
                            FROM line_item li INNER JOIN line_item_detail lid
                                 ON li.line_item_id = lid.line_item_id
                                 LEFT OUTER JOIN quote_header qthdr
                                 ON li.quote_header_id = qthdr.quote_header_id
-- Added on 17/12/2010 as part of using status in quote_status table
                                 LEFT OUTER JOIN quote_status qs
                                 ON qthdr.quote_header_id = qs.quote_header_id
                               AND qs.product_name = in_product_name
                           WHERE li.active = pkg_constants.con_activeflag_yes
                             AND lid.active = pkg_constants.con_activeflag_yes
                             AND lid.attribute_mapping_id =
--pkg_constants.con_conntype_attrmapid
-- Added on 12/4/2011 as part of defect fix for 104683
                                    CASE
                                       WHEN (NVL (lid.non_std_flag, 'N') = 'N'
                                            )
                                          THEN pkg_constants.con_conntype_attrmapid
                                       ELSE lid.attribute_mapping_id
                                    END
                             AND qthdr.quote_header_id = in_quoteheaderid
                             AND UPPER (li.product_name) IN (
                                                   SELECT UPPER (product_name)
                                                     FROM product_master_details
                                                    WHERE parent_group_id = 1)
-- Added on 17/12/2010 as part of using status in quote_status table
                             AND UPPER (NVL (qs.status, qthdr.status)) =
                                                pkg_constants.con_quote_status) x
                         INNER JOIN

---- To check not equal STANDARD - UNBUNDLED  added on 24-Aug-2010 By SRK
                         (SELECT li.quote_header_id, li.site_id, lid.VALUE
                            FROM line_item li INNER JOIN line_item_detail lid
                                 ON li.line_item_id = lid.line_item_id
                               AND li.active =
                                              pkg_constants.con_activeflag_yes
                               AND lid.active =
                                              pkg_constants.con_activeflag_yes
                               AND li.quote_header_id = in_quoteheaderid
                               AND UPPER (li.product_name) IN (
                                                   SELECT UPPER (product_name)
                                                     FROM product_master_details
                                                    WHERE parent_group_id = 1)
                               AND lid.attribute_mapping_id =
                                        pkg_constants.con_resiliency_attrmapid
                           WHERE UPPER (lid.VALUE) !=
                                                  pkg_constants.con_resiliency) x1
                         ON x.site_id = x1.site_id
                       AND x.quote_header_id = x1.quote_header_id
                         INNER JOIN
                         (SELECT li.quote_header_id, li.site_id, lid.VALUE,

-- Added on 12/4/2011 as part of defect fix for 104683
                                 lid.non_std_flag
                            FROM line_item li INNER JOIN line_item_detail lid
                                 ON li.line_item_id = lid.line_item_id
                               AND li.active =
                                              pkg_constants.con_activeflag_yes
                               AND lid.active =
                                              pkg_constants.con_activeflag_yes
                               AND lid.attribute_mapping_id =
                                       pkg_constants.con_dslconntype_attrmapid
                               AND li.quote_header_id = in_quoteheaderid
                               AND UPPER (li.product_name) IN (
                                                   SELECT UPPER (product_name)
                                                     FROM product_master_details
                                                    WHERE parent_group_id = 1)
                                 ) y
                         ON x.quote_header_id = y.quote_header_id
                       AND x.site_id = y.site_id
--AND upper(x.VALUE) LIKE upper(y.VALUE) || '%'
-- Added on 12/4/2011 as part of defect fix for 104683
                       AND UPPER (x.VALUE) LIKE
                              CASE
                                 WHEN (NVL (y.non_std_flag, 'X') =
                                                     NVL (x.non_std_flag, 'X')
                                      )
                                    THEN UPPER (y.VALUE) || '%'
                                 ELSE UPPER (x.VALUE) || '%'
                              END
                         ;

--Added v_sitecnt condition by Tanmayi on 20/09/2010
                  IF (v_dslcnt = 0 AND v_sitecnt = 0)
                  THEN
--to check STANDARD - UNBUNDLED added on 24-Aug-2010 By SRK
-- v_cnt has count of sites with resiliency standard-unbundled.
                     SELECT COUNT (*)
                       INTO v_cnt
                       FROM line_item li INNER JOIN line_item_detail lid
                            ON li.line_item_id = lid.line_item_id
                          AND li.active = pkg_constants.con_activeflag_yes
                          AND lid.active = pkg_constants.con_activeflag_yes
                          AND li.quote_header_id = in_quoteheaderid
                          AND UPPER (li.product_name) IN (
                                                   SELECT UPPER (product_name)
                                                     FROM product_master_details
                                                    WHERE parent_group_id = 1)
                          AND lid.attribute_mapping_id =
                                        pkg_constants.con_resiliency_attrmapid
                          AND UPPER (lid.VALUE) = pkg_constants.con_resiliency
                            ;

--if DSL connector type does not match
--if STANDARD - UNBUNDLED equal to 0 then failure else sucess added on 24-Aug-2010 By SRK
                     IF     (v_cnt = 0 AND (v_consitecnt != v_sitecount))
                        AND v_port_only_hardwire =
                               0
/* and v_port_only_hardwire = 0 is added to skip connector type validation for port only hardwire*/
                     THEN
                        out_status := pkg_constants.con_status_failure;
                        pkg_common.spi_error_log
                                         (NULL,
                                          in_quoteheaderid,
                                          NULL,
                                          NULL,
                                          'PKG_ORDER',
                                          'SPS_VALIDATE_ORDER',
                                          out_status,
                                          'dsl connector type does not match'
                                         );
                     END IF;
                  END IF;

--****************END Modified By Tanmayi **********************
--   AND x.connector LIKE y.VALUE || '%'
                  IF (   (v_rescnt > 0 AND v_othercnt = 0)
                      OR (v_othercnt > 0 AND v_conncnt > 0 AND v_rescnt = 0)
                      OR (v_othercnt > 0 AND v_conncnt > 0 AND v_rescnt > 0)
                     )
--validations :   resiliency is only standard - unbundled
--                resiliency is others and connectors match
--                resiliency is both standard - unbundled and others and connectors match
                  THEN
                     BEGIN
--if connector type is same, check the pricing status
                        SELECT COUNT (DISTINCT pricing_status)
                          INTO v_budgetcnt
                          FROM access_qref aq LEFT JOIN price_line_item_detail plid
                               ON aq.access_qref = plid.external_qref
                               LEFT OUTER JOIN line_item li
                               ON plid.line_item_id = li.line_item_id
                               LEFT OUTER JOIN quote_site qtst
                               ON aq.quote_site_id = qtst.quote_site_id
                               LEFT OUTER JOIN quote_header qthdr
                               ON qtst.quote_header_id = qthdr.quote_header_id
-- Added on 17/12/2010 as part of using status in quote_status table
                               LEFT OUTER JOIN quote_status qs
                               ON qthdr.quote_header_id = qs.quote_header_id
                             AND qs.product_name = in_product_name
                         WHERE qthdr.quote_header_id = in_quoteheaderid
                           AND UPPER (li.product_name) IN (
                                                   SELECT UPPER (product_name)
                                                     FROM product_master_details
                                                    WHERE parent_group_id = 1)
                           AND aq.active = pkg_constants.con_activeflag_yes
                           AND qtst.active = pkg_constants.con_activeflag_yes
                           AND plid.active = pkg_constants.con_activeflag_yes
                           AND li.active = pkg_constants.con_activeflag_yes
-- Added on 17/12/2010 as part of using status in quote_status table
                           AND UPPER (NVL (qs.status, qthdr.status)) =
                                                pkg_constants.con_quote_status
                           AND UPPER (aq.pricing_status) =
                                              pkg_constants.con_pricing_status;

                        IF (v_budgetcnt <> 0)
                        THEN
--if pricing status is budgetary
                           out_status := pkg_constants.con_status_failure;
                           pkg_common.spi_error_log
                                               (NULL,
                                                in_quoteheaderid,
                                                NULL,
                                                NULL,
                                                'PKG_ORDER',
                                                'SPS_VALIDATE_ORDER',
                                                out_status,
                                                'pricing status is budgetary'
                                               );
                        END IF;
                     END;
                  ELSE
--if connector types dont match
                     IF (v_port_only_hardwire = 0)
                     THEN
                        out_status := pkg_constants.con_status_failure;
                        pkg_common.spi_error_log (NULL,
                                                  in_quoteheaderid,
                                                  NULL,
                                                  NULL,
                                                  'PKG_ORDER',
                                                  'SPS_VALIDATE_ORDER',
                                                  out_status,
                                                  'connector types not match'
                                                 );
                     END IF;
                  END IF;
               END;
            ELSE
               BEGIN
--check connector types for dsl
                  SELECT COUNT (*), COUNT (DISTINCT y.site_id)
                    INTO v_dslcnt, v_dslsitecnt
                    FROM (SELECT li.quote_header_id, li.site_id, lid.VALUE,

-- Added on 12/4/2011 as part of defect fix for 104683
                                 lid.non_std_flag
                            FROM line_item li INNER JOIN line_item_detail lid
                                 ON li.line_item_id = lid.line_item_id
                                 LEFT OUTER JOIN quote_header qthdr
                                 ON li.quote_header_id = qthdr.quote_header_id
-- Added on 17/12/2010 as part of using status in quote_status table
                                 LEFT OUTER JOIN quote_status qs
                                 ON qthdr.quote_header_id = qs.quote_header_id
                               AND qs.product_name = in_product_name
                           WHERE li.active = pkg_constants.con_activeflag_yes
                             AND lid.active = pkg_constants.con_activeflag_yes
                             AND lid.attribute_mapping_id =
--pkg_constants.con_conntype_attrmapid
-- Added on 12/4/2011 as part of defect fix for 104683
                                    CASE
                                       WHEN (NVL (lid.non_std_flag, 'N') = 'N'
                                            )
                                          THEN pkg_constants.con_conntype_attrmapid
                                       ELSE lid.attribute_mapping_id
                                    END
                             AND qthdr.quote_header_id = in_quoteheaderid
                             AND UPPER (li.product_name) IN (
                                                   SELECT UPPER (product_name)
                                                     FROM product_master_details
                                                    WHERE parent_group_id = 1)
-- Added on 17/12/2010 as part of using status in quote_status table
                             AND UPPER (NVL (qs.status, qthdr.status)) =
                                                pkg_constants.con_quote_status) x
                         INNER JOIN

---- To check not equal STANDARD - UNBUNDLED  added on 24-Aug-2010 By SRK
                         (SELECT li.quote_header_id, li.site_id, lid.VALUE
                            FROM line_item li INNER JOIN line_item_detail lid
                                 ON li.line_item_id = lid.line_item_id
                               AND li.active =
                                              pkg_constants.con_activeflag_yes
                               AND lid.active =
                                              pkg_constants.con_activeflag_yes
                               AND li.quote_header_id = in_quoteheaderid
                               AND UPPER (li.product_name) IN (
                                                   SELECT UPPER (product_name)
                                                     FROM product_master_details
                                                    WHERE parent_group_id = 1)
                               AND lid.attribute_mapping_id =
                                        pkg_constants.con_resiliency_attrmapid
                           WHERE UPPER (lid.VALUE) !=
                                                  pkg_constants.con_resiliency) x1
                         ON x.site_id = x1.site_id
                       AND x.quote_header_id = x1.quote_header_id
                         INNER JOIN
                         (SELECT li.quote_header_id, li.site_id, lid.VALUE,

-- Added on 12/4/2011 as part of defect fix for 104683
                                 lid.non_std_flag
                            FROM line_item li INNER JOIN line_item_detail lid
                                 ON li.line_item_id = lid.line_item_id
                               AND li.active =
                                              pkg_constants.con_activeflag_yes
                               AND lid.active =
                                              pkg_constants.con_activeflag_yes
                               AND lid.attribute_mapping_id =
                                       pkg_constants.con_dslconntype_attrmapid
                               AND li.quote_header_id = in_quoteheaderid
                               AND UPPER (li.product_name) IN (
                                                   SELECT UPPER (product_name)
                                                     FROM product_master_details
                                                    WHERE parent_group_id = 1)
                                 ) y
                         ON x.quote_header_id = y.quote_header_id
                       AND x.site_id = y.site_id
--AND upper(x.VALUE) LIKE upper(y.VALUE) || '%'
-- Added on 12/4/2011 as part of defect fix for 104683
                       AND UPPER (x.VALUE) LIKE
                              CASE
                                 WHEN (NVL (y.non_std_flag, 'X') =
                                                     NVL (x.non_std_flag, 'X')
                                      )
                                    THEN UPPER (y.VALUE) || '%'
                                 ELSE UPPER (x.VALUE) || '%'
                              END
                         ;

                  IF (v_dslcnt = 0)
                  THEN
--to check STANDARD - UNBUNDLED added on 24-Aug-2010 By SRK
-- v_cnt has count of sites with resiliency standard-unbundled.
                     SELECT COUNT (*)
                       INTO v_cnt
                       FROM line_item li INNER JOIN line_item_detail lid
                            ON li.line_item_id = lid.line_item_id
                          AND li.active = pkg_constants.con_activeflag_yes
                          AND lid.active = pkg_constants.con_activeflag_yes
                          AND li.quote_header_id = in_quoteheaderid
                          AND UPPER (li.product_name) IN (
                                                   SELECT UPPER (product_name)
                                                     FROM product_master_details
                                                    WHERE parent_group_id = 1)
                          AND lid.attribute_mapping_id =
                                        pkg_constants.con_resiliency_attrmapid
                          AND UPPER (lid.VALUE) = pkg_constants.con_resiliency
                            ;

--if DSL connector type does not match
--if STANDARD - UNBUNDLED equal to 0 then failure else sucess added on 24-Aug-2010 By SRK
-- Below condition modified to skip the validation if it is 'Mofify' journey and resign option is 'Commercial Only'  -- defect 108940 -- Start
                     IF     (v_cnt = 0)
                        AND NOT (    UPPER (v_order_type) = 'MODIFY'
                                 AND (v_res_opt_comm_cnt = v_tot_site_cnt)
                                )
                     THEN
                        out_status := pkg_constants.con_status_failure;
                        pkg_common.spi_error_log
                           (NULL,
                            in_quoteheaderid,
                            NULL,
                            NULL,
                            'PKG_ORDER',
                            'SPS_VALIDATE_ORDER',
                            out_status,
                            'count of sites with resiliency standard-unbundled'
                           );
                     ELSE
                        NULL;
                     END IF;
                  END IF;
               END;
            END IF;

--added v_cnt to check if resiliency is STANDARD-Unbundled. added by Tanmayi on 25/08/2010
            IF (v_dslsitecnt + v_sitecnt + v_consitecnt + v_cnt <> v_sitecount
               )
--check if connector types for all sites match based on the above validations
            THEN
/*added on 19/11/2010 to check in case of access_backup
where connector types also match and dsl is also there for the same site
then site_count should be taken
*/          -- Added on 11/8/2011 as part of skipping the validation where DSL
            -- comes up under Access Backup scenario - START

               -- To check if there are more than one resiliencies and also includes
               -- 'Access Backup' scenario in it
               SELECT COUNT (1)
                 INTO v_acc_bkp_exists
                 FROM line_item_detail lid, line_item li
                WHERE li.line_item_id = lid.line_item_id
                  AND li.quote_header_id =
                            in_quoteheaderid
                                            --and li.site_id in (55767, 55766)
                  AND li.active = 'Y'
                  AND lid.active = 'Y'
                  AND attribute_mapping_id = 1
                  AND EXISTS (
                         SELECT 1
                           FROM line_item_detail lid, line_item li
                          WHERE li.line_item_id = lid.line_item_id
                            AND li.quote_header_id =
                                   in_quoteheaderid
                                            --and li.site_id in (55767, 55766)
                            AND li.active = 'Y'
                            AND lid.active = 'Y'
                            AND attribute_mapping_id = 1
                            AND lid.VALUE = 'Access Backup');

               -- To check if DSL is there in 'Access Backup' scenario and non 'Access Backup'
               -- scenario, then skip the validation
               IF v_acc_bkp_exists > 1
               THEN
                  SELECT COUNT (1)
                    INTO v_multisite_dsl_cnt
                    FROM line_item_detail lid, line_item li
                   WHERE li.line_item_id = lid.line_item_id
                     AND li.quote_header_id =
                            in_quoteheaderid
                                            --and li.site_id in (55767, 55766)
                     AND li.active = 'Y'
                     AND lid.active = 'Y'
                     AND lid.attribute_mapping_id = 3
                     AND lid.VALUE = 'DSL';
               END IF;

               IF v_multisite_dsl_cnt = 0
               THEN
                  -- Added on 11/8/2011 - END

                  IF (    v_dslsitecnt <> v_consitecnt
                      AND (v_dslsitecnt + v_consitecnt) <> v_sitecount
                     )
                  THEN
                     out_status := pkg_constants.con_status_failure;
                     pkg_common.spi_error_log
                        (NULL,
                         in_quoteheaderid,
                         NULL,
                         NULL,
                         'PKG_ORDER',
                         'SPS_VALIDATE_ORDER',
                         out_status,
                         'where connector types also match and dsl is also there for the same site'
                        );
                  END IF;

               END IF;                           -- IF v_multisite_dsl_cnt = 0

            END IF;
         END;
      END IF;

----904 Sprint 2 Qref expiry date Validation
---IF access technology is DSL, dont do validation QREF validation
      v_isaccess_dsl := 0;

      BEGIN
         SELECT COUNT (1)
           INTO v_isaccess_dsl
           FROM line_item_detail
          WHERE attribute_mapping_id = 3                                 --DSL
            AND VALUE = 'DSL'
            AND active = pkg_constants.con_activeflag_yes
            AND line_item_id IN (
                   SELECT line_item_id
                     FROM line_item
                    WHERE quote_header_id = in_quoteheaderid
                      AND active = pkg_constants.con_activeflag_yes);
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            v_isaccess_dsl := 0;
         WHEN OTHERS
         THEN
            v_isaccess_dsl := 0;
      END;


      BEGIN
         SELECT COUNT (1)
           INTO v_is_hvpn
           FROM line_item_detail
          WHERE attribute_mapping_id = 3                                 --DSL
            AND (UPPER (VALUE) = 'HVPN')
            AND active = pkg_constants.con_activeflag_yes
            AND line_item_id IN (
                   SELECT line_item_id
                     FROM line_item
                    WHERE quote_header_id = in_quoteheaderid
                      AND active = pkg_constants.con_activeflag_yes);
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            v_is_hvpn := 0;
         WHEN OTHERS
         THEN
            v_is_hvpn := 0;
      END;

      BEGIN
         SELECT COUNT (1)
           INTO v_is_access_mode_customer
           FROM line_item_detail
          WHERE attribute_mapping_id = 111                               --DSL
            AND VALUE = 'Customer Provided Access'
            AND active = pkg_constants.con_activeflag_yes
            AND line_item_id IN (
                   SELECT line_item_id
                     FROM line_item
                    WHERE quote_header_id = in_quoteheaderid
                      AND active = pkg_constants.con_activeflag_yes);
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            v_is_access_mode_customer := 0;
         WHEN OTHERS
         THEN
            v_is_access_mode_customer := 0;
      END;

      v_do_check_for_qref_expir := 1;
      v_manual_price := 1;

      BEGIN
         SELECT COUNT (1)
           INTO v_manual_price
           FROM line_item_detail
          WHERE attribute_mapping_id = 35                       --manual price
            AND active = pkg_constants.con_activeflag_yes
            AND line_item_id IN (
                   SELECT line_item_id
                     FROM line_item
                    WHERE quote_header_id = in_quoteheaderid
                      AND active = pkg_constants.con_activeflag_yes);
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            v_manual_price := 0;
         WHEN OTHERS
         THEN
            v_manual_price := 0;
      END;

--Modified on 19-11-2010 by SRK if more than one site has DSL then count will be > 1
      IF v_isaccess_dsl >= 1
      THEN
         v_do_check_for_qref_expir := 0;
      END IF;

      IF v_is_hvpn = 1 AND v_is_access_mode_customer = 1
      THEN
         v_do_check_for_qref_expir := 0;
      END IF;

      IF v_manual_price = 1
      THEN
         v_do_check_for_qref_expir := 0;
      END IF;

      IF v_do_check_for_qref_expir = 1
      THEN
         v_active_access_qref_count := 0;

         SELECT COUNT (1)
           INTO v_active_access_qref_count
           FROM access_qref aq,
                quote_site qs,
                line_item li,
                price_line_item_detail plid
          WHERE aq.quote_site_id = qs.quote_site_id
            AND TRUNC (NVL (expiry_date, TO_DATE ('19000101', 'YYYYMMDD')),
                       'DD'
                      ) >= TRUNC (SYSDATE, 'DD')
            AND qs.quote_header_id = in_quoteheaderid
            AND li.quote_header_id = qs.quote_header_id
            AND plid.line_item_id = li.line_item_id
            AND aq.access_qref = plid.external_qref
            AND plid.active = 'Y'
            AND li.active = 'Y'
            AND aq.active = 'Y'
            AND qs.active = 'Y';

-- Added on 27/5/2011 as part of defect 108940 -- Modify C6.6 scenario
         BEGIN
            SELECT NVL (bs.order_type, q.order_type)
              INTO v_order_type
              FROM bundle_selection bs, quote q, quote_header qh
             WHERE q.quote_id = qh.quote_id
               AND bs.quote_header_id = qh.quote_header_id
               AND bs.quote_header_id = in_quoteheaderid;
         EXCEPTION
            WHEN OTHERS
            THEN
               v_order_type := NULL;
         END;

         SELECT COUNT (DISTINCT li.site_id)
           INTO v_tot_site_cnt
           FROM line_item li
          WHERE li.active = 'Y'
            AND li.site_id IS NOT NULL
            AND li.quote_header_id = in_quoteheaderid;

         SELECT COUNT (DISTINCT li.site_id)
           INTO v_res_opt_comm_cnt
           FROM line_item_detail lid,
                line_item li,
                attribute_mapping am,
                quote_header qh
          WHERE li.active = 'Y'
            AND li.site_id IS NOT NULL
            AND lid.active = 'Y'
            AND lid.line_item_id = li.line_item_id
            AND am.attribute_mapping_id = lid.attribute_mapping_id
            AND li.quote_header_id = qh.quote_header_id
            AND qh.quote_header_id = in_quoteheaderid
            AND lid.attribute_mapping_id = 32
            AND UPPER (lid.VALUE) = 'COMMERCIAL ONLY';

-- Ends here ---

         -- Below condition modified to skip the validation if it is 'Mofify' journey and resign option is 'Commercial Only'  -- defect 108940
         IF     v_active_access_qref_count = 0
            AND NOT (    UPPER (v_order_type) = 'MODIFY'
                     AND (v_res_opt_comm_cnt = v_tot_site_cnt)
                    )
         THEN
            out_status := pkg_constants.con_status_failure_qref_expir;
            pkg_common.spi_error_log (NULL,
                                      in_quoteheaderid,
                                      NULL,
                                      NULL,
                                      'PKG_ORDER',
                                      'SPS_VALIDATE_ORDER',
                                      out_status,
                                      'qref expired error'
                                     );
--Value 3 for qref expired error
         END IF;




         v_common_qref_count := 0;
/* Modified for resolving defect 81846 Jay
We will use quote id instead of quote header id for checking qref used multiple times for the same customer
This should have implemented as a part of clean order validation but that time quote versioning was not there
and so quote header id is used instead of quote id.
*/
         v_quote_id := NULL;

         SELECT quote_id
           INTO v_quote_id
           FROM quote_header
          WHERE quote_header_id = in_quoteheaderid;

/*****Do the qref multi validation only for Provide journey****/
         SELECT order_type
           INTO v_journey_type
           FROM quote
          WHERE quote_id = v_quote_id;

         IF UPPER (TRIM (v_journey_type)) = 'PROVIDE'
         THEN
            SELECT COUNT (1)
              INTO v_common_qref_count
              FROM (SELECT plid.external_qref "QREF"
                      FROM access_qref aq,
                           quote_header qh,
                           quote q,
                           line_item li,
                           price_line_item_detail plid,
                           quote_site qs
                     WHERE aq.quote_site_id = qs.quote_site_id
                       AND q.customer_id = (SELECT DISTINCT customer_id
                                                       FROM quote
                                                      WHERE quote_id =
                                                                    v_quote_id)
                       AND qh.quote_id = q.quote_id
                       AND qs.quote_header_id = qh.quote_header_id
                       AND li.quote_header_id = qh.quote_header_id
                       AND UPPER (li.product_name) IN (
                                                   SELECT UPPER (product_name)
                                                     FROM product_master_details
                                                    WHERE parent_group_id = 1)
                       AND plid.line_item_id = li.line_item_id
                       AND aq.access_qref = plid.external_qref
                       AND plid.active = 'Y'
                       AND li.active = 'Y'
                       AND aq.active = 'Y'
                       AND qs.active = 'Y'
                       AND q.quote_id <> v_quote_id
                    INTERSECT
                    SELECT plid.external_qref "QREF"
                      FROM access_qref aq,
                           quote_site qs,
                           line_item li,
                           price_line_item_detail plid,
                           quote_header qh
                     WHERE aq.quote_site_id = qs.quote_site_id
                       AND qs.quote_header_id = qh.quote_header_id
                       AND qh.quote_id = v_quote_id
                       AND li.quote_header_id = qs.quote_header_id
                       AND plid.line_item_id = li.line_item_id
                       AND UPPER (li.product_name) IN (
                                                   SELECT UPPER (product_name)
                                                     FROM product_master_details
                                                    WHERE parent_group_id = 1)
                       AND aq.access_qref = plid.external_qref
                       AND plid.active = 'Y'
                       AND li.active = 'Y'
                       AND aq.active = 'Y'
                       AND qs.active = 'Y') a;

/* Modification ends for resolving defect 81846 Jay*/
            IF v_common_qref_count > 0
            THEN
               out_status := pkg_constants.con_status_failure_qref_multi;
               pkg_common.spi_error_log
                  (NULL,
                   in_quoteheaderid,
                   NULL,
                   NULL,
                   'PKG_ORDER',
                   'SPS_VALIDATE_ORDER',
                   out_status,
                   'for qref used in other order placed by the same customer'
                  );
---value 4 - for qref used in other order placed by the same customer
            END IF;
         END IF;
      END IF;


--Added on 18-AUG-2011
-- CPE QREF - Resilency -- If Standard Unbundled skip CPE QREF Exp date check

         v_is_cpe_stdunbld := 0;

         BEGIN
             SELECT COUNT (1)
               INTO v_is_cpe_stdunbld
               FROM line_item_detail
              WHERE attribute_mapping_id = 1 -- Resilency
                AND UPPER(VALUE)         <> 'STANDARD - UNBUNDLED'
                AND active               = pkg_constants.con_activeflag_yes
                AND line_item_id IN (
                                       SELECT line_item_id
                                         FROM line_item
                                        WHERE quote_header_id = in_quoteheaderid
                                          AND active = pkg_constants.con_activeflag_yes);
         EXCEPTION
             WHEN NO_DATA_FOUND THEN
                v_is_cpe_stdunbld := 0;
             WHEN OTHERS THEN
                v_is_cpe_stdunbld := 0;
         END;


         BEGIN

            v_ICB := 0;

             SELECT COUNT (1)
                INTO v_ICB
             FROM cpe_qref aq,
                  quote_site qs,
                  line_item li,
                  price_line_item_detail plid
            WHERE aq.quote_site_id    = qs.quote_site_id
              AND qs.quote_header_id  = in_quoteheaderid
              AND li.quote_header_id  = qs.quote_header_id
              AND plid.line_item_id   = li.line_item_id
              AND aq.cpe_qref         = plid.external_qref
              AND plid.active         = 'Y'
              AND li.active           = 'Y'
              AND qs.active           = 'Y'
              AND (UPPER(aq.pri_status) IN ('ICB') OR UPPER(aq.sec_status) IN ('ICB'));

         EXCEPTION
             WHEN NO_DATA_FOUND THEN
                v_ICB := 0;
             WHEN OTHERS THEN
                v_ICB := 0;
         END;


         IF v_ICB = 0 THEN -- NOT ICB

              IF v_is_cpe_stdunbld >= 1 THEN

                v_active_cpe_qref_count := 0;

               SELECT COUNT (1)
                   INTO v_active_cpe_qref_count
                   FROM cpe_qref aq,
                        quote_site qs,
                        line_item li,
                        price_line_item_detail plid
                  WHERE aq.quote_site_id = qs.quote_site_id
                    AND TRUNC (NVL (expiry_date, TO_DATE ('19000101', 'YYYYMMDD')),
                               'DD'
                              ) >= TRUNC (SYSDATE, 'DD')
                    AND qs.quote_header_id  = in_quoteheaderid
                    AND li.quote_header_id  = qs.quote_header_id
                    AND plid.line_item_id   = li.line_item_id
                    AND aq.cpe_qref         = plid.external_qref
                    AND plid.active         = 'Y'
                    AND li.active           = 'Y'
                    AND qs.active           = 'Y';


               -- Below condition modified to skip the validation if it is 'Mofify' journey and resign option is 'Commercial Only'  -- defect 108940
                  IF     v_active_cpe_qref_count = 0
                        AND NOT (    UPPER (v_order_type) = 'MODIFY'
                                 AND (v_res_opt_comm_cnt = v_tot_site_cnt)
                                )
                     THEN
                        out_status :=pkg_constants.con_status_fail_cpe_qref_expir ;
                        pkg_common.spi_error_log (NULL,
                                                  in_quoteheaderid,
                                                  NULL,
                                                  NULL,
                                                  'PKG_ORDER',
                                                  'SPS_VALIDATE_ORDER',
                                                  out_status,
                                                  'cpe qref expired error'
                                                 );



                  END IF;

              END IF;
         END IF;
        --End on 19-AUG-2011


----904 Sprint 2 Qref expiry date Validation
      <<icb_check>>
/* ICB Checks starts here */
      BEGIN
         SELECT DISTINCT 1
                    INTO out_icb_status
                    FROM                  /*quote q INNER JOIN quote_header qh
                         ON q.quote_id = qh.quote_id*/
                         quote_header qh LEFT OUTER JOIN quote_site qs
                         ON qh.quote_header_id = qs.quote_header_id
                         INNER JOIN site s ON qs.site_id = s.site_id
                         INNER JOIN line_item lm
                         ON s.site_id = lm.site_id
                       AND lm.quote_header_id = in_quoteheaderid
                         INNER JOIN line_item_detail ld
                         ON lm.line_item_id = ld.line_item_id
                       AND ld.attribute_mapping_id != 3                  --DSL
                       AND UPPER (ld.VALUE) != 'DSL'
                         LEFT OUTER JOIN attribute_mapping am
                         ON ld.attribute_mapping_id = am.attribute_mapping_id
                         LEFT OUTER JOIN access_qref aq
                         ON qs.quote_site_id = aq.quote_site_id
                         INNER JOIN price_line_item_detail plid
                         ON aq.access_qref = plid.external_qref
                       AND lm.line_item_id = plid.line_item_id
                   WHERE           /*q.quote_id = in_quoteid
                         AND*/ qh.quote_header_id = in_quoteheaderid
                     AND UPPER (lm.product_name) IN (
                                                   SELECT UPPER (product_name)
                                                     FROM product_master_details
                                                    WHERE parent_group_id = 1)
                     AND (qs.active = 'Y')
                     AND lm.active = 'Y'
                     AND ld.active = 'Y'
                     AND UPPER (aq.port_status) =
                                               UPPER ('Individual Case Basis')
                     AND qh.capcheck_refno IS NULL;
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            out_icb_status := 0;
      END;

/* ICB Checks ends here */
/* Bid Request Status Validation starts here */
      SELECT COUNT (*)
        INTO v_bid_request
        FROM quote_header qh LEFT OUTER JOIN quote_site qs
             ON qh.quote_header_id = qs.quote_header_id
             INNER JOIN site s ON qs.site_id = s.site_id
             INNER JOIN bid_request_status brs
             ON brs.site_id = s.site_id
           AND brs.quote_header_id = in_quoteheaderid
       WHERE qh.quote_header_id = in_quoteheaderid
         AND (qs.active = 'Y')
         AND brs.active = 'Y';

      IF v_bid_request > 0
      THEN
         SELECT COUNT (*)
           INTO v_bid_status
           FROM bid_request_status
          WHERE quote_header_id = in_quoteheaderid
            AND UPPER (bid_status) = UPPER ('Responded')
/* AND ( UPPER(data_build_done) ='YES' OR
UPPER(data_build_done) ='NA')*/
            AND one_time_install_cost IS NOT NULL
            AND monthly_recurring_cost IS NOT NULL
            AND SYSDATE <= activation_due_date
            AND active = 'Y';

         v_bid_expiry_status := 0;

--For checking bid expiry
         SELECT COUNT (*)
           INTO v_bid_expiry_status
           FROM bid_request_status
          WHERE quote_header_id = in_quoteheaderid
            AND UPPER (bid_status) = UPPER ('Responded')
            /* AND ( UPPER(data_build_done) ='YES' OR
                 UPPER(data_build_done) ='NA')*/
            AND one_time_install_cost IS NOT NULL
            AND monthly_recurring_cost IS NOT NULL
            AND TRUNC (NVL (bid_expiry_date, TO_DATE ('19000101', 'YYYYMMDD')),
                       'DD'
                      ) >= TRUNC (SYSDATE, 'DD')
            AND active = 'Y';

         IF v_bid_status <> v_bid_request
         THEN
            out_status := pkg_constants.con_status_fail_bidreq_status;
            pkg_common.spi_error_log (NULL,
                                      in_quoteheaderid,
                                      NULL,
                                      NULL,
                                      'PKG_ORDER',
                                      'SPS_VALIDATE_ORDER',
                                      out_status,
                                      'bid request status validation error'
                                     );
         END IF;

         IF v_bid_expiry_status <> v_bid_request
         THEN
            out_status := pkg_constants.con_status_fail_bid_exp_status;
            pkg_common.spi_error_log (NULL,
                                      in_quoteheaderid,
                                      NULL,
                                      NULL,
                                      'PKG_ORDER',
                                      'SPS_VALIDATE_ORDER',
                                      out_status,
                                      'bid request status validation error'
                                     );
         END IF;
      END IF;

/* Bid Request Status Validation ends here */
      pkg_common.spi_error_log (NULL,
                                in_quoteheaderid,
                                NULL,
                                NULL,
                                'PKG_ORDER',
                                'SPS_VALIDATE_ORDER',
                                out_status,
                                'sucess'
                               );
   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         pkg_common.spi_error_log (NULL,
                                   in_quoteheaderid,
                                   NULL,
                                   NULL,
                                   'PKG_ORDER',
                                   'SPS_VALIDATE_ORDER',
                                   out_status,
                                   'failure'
                                  );
/*ROLLBACK;    commented by Jay*/
   END;

   PROCEDURE spu_classic_custsite (
      in_customerid     IN       customer.customer_id%TYPE,
      in_customerflag   IN       customer.classic_customer%TYPE,
      in_siteid         IN       site.site_id%TYPE,
      in_siteflag       IN       site.classic_site%TYPE,
      out_status        OUT      NUMBER,
      out_errmsg        OUT      NVARCHAR2
   )
   AS
   BEGIN
      IF (in_customerid != '-1')
      THEN
         UPDATE customer
            SET classic_customer = in_customerflag
          WHERE customer_id = in_customerid;
      END IF;

      IF (in_siteid != '-1')
      THEN
         UPDATE site
            SET classic_site = in_siteflag
          WHERE site_id = in_siteid;
      END IF;

      out_status := pkg_constants.con_status_success;
   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         out_errmsg := SQLERRM;
   END;

   PROCEDURE sps_rfo_customer (
      in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
      out_status         OUT      NUMBER
   )
   AS
--returns 1 if classic_customer is not null
--returns 0 if classic_customer is null
      v_isclassic   customer.classic_customer%TYPE;
      v_custid      customer.customer_id%TYPE;
   BEGIN
      SELECT customer_id
        INTO v_custid
        FROM quote q, quote_header qh
       WHERE q.quote_id = qh.quote_id
             AND qh.quote_header_id = in_quoteheaderid;

      SELECT classic_customer
        INTO v_isclassic
        FROM customer
       WHERE customer_id = v_custid;

      out_status :=
         CASE
            WHEN v_isclassic IS NULL
               THEN pkg_constants.con_status_failure
            ELSE pkg_constants.con_status_success
         END;
   END;

   PROCEDURE sps_attachment (
      in_quote_header_id    IN       NUMBER,
      in_site_id            IN       NUMBER,
      out_cur_attachments   OUT      sys_refcursor
   )
   AS
   BEGIN
      OPEN out_cur_attachments FOR
         SELECT oa.attachment_id "Attachment_id",
                oa.order_header_id "Order_Id", oa.site_id "Site_Id",
                s.NAME "Site_Name", oad.url "URL",
                oa.attachment_type "Attachment_Type",
                oad.downloaded_to_classic "Downloaded_to_Classic",
                SOURCE "Source",
                attachment_applies_to "Attachment_applies_to"
           FROM order_attachment oa,
                order_attachment_detail oad,
                order_header oh,
                site s
          WHERE oa.order_header_id = oh.order_header_id
            AND oad.attachment_id = oa.attachment_id
            AND s.site_id = oa.site_id
            AND oh.quote_header_id = in_quote_header_id
            AND oa.site_id = in_site_id;
   END sps_attachment;

   PROCEDURE sps_quote_attachment (
      in_quote_header_id    IN       NUMBER,
      in_site_id            IN       NUMBER,
      in_attachment_type    IN       VARCHAR2,
      out_cur_attachments   OUT      sys_refcursor
   )
   AS
   BEGIN
      OPEN out_cur_attachments FOR
         SELECT oa.attachment_id "Attachment_id",
                oa.quote_header_id "Quote_header_Id", oa.site_id "Site_Id",
                s.NAME "Site_Name", oad.url "URL",
                oa.attachment_type "Attachment_Type",
                oad.downloaded_to_classic "Downloaded_to_Classic",
                SOURCE "Source"
           FROM order_attachment oa,
                order_attachment_detail oad,
                quote_header oh,
                site s
          WHERE oa.quote_header_id = oh.quote_header_id
            AND oad.attachment_id = oa.attachment_id
            AND s.site_id = oa.site_id
            AND oh.quote_header_id = in_quote_header_id
            AND oa.site_id = in_site_id
            AND oa.attachment_type = in_attachment_type;
   END sps_quote_attachment;

   PROCEDURE spi_attachment (
      in_order_id         IN OUT   NUMBER,
      in_attachment_tbl   IN       attachment_tbl,
      in_quoteheaderid    IN OUT   NUMBER,
      out_status          OUT      NUMBER,
      out_errmsg          OUT      VARCHAR2
   )
   AS
      v_count                   NUMBER (3);
      new_attachment_id         NUMBER (10, 0);
      v_sorted_attachment_tbl   attachment_tbl := attachment_tbl ();
      v_current_site_id         NUMBER (10, 0);
      v_attachment_type         VARCHAR2 (2);
   BEGIN
      v_current_site_id := 0;

      IF in_quoteheaderid IS NOT NULL AND in_quoteheaderid <> 0
      THEN
         FOR i IN in_attachment_tbl.FIRST .. in_attachment_tbl.LAST
         LOOP
            DELETE FROM order_attachment_detail
                  WHERE attachment_id IN (
                           SELECT attachment_id
                             FROM order_attachment
                            WHERE quote_header_id = in_quoteheaderid
                              AND attachment_type =
                                         in_attachment_tbl (i).attachment_type
                              AND NVL (site_id, 0) =
                                        NVL (in_attachment_tbl (i).site_id, 0));
         END LOOP;
/* DELETE FROM order_attachment
WHERE quote_header_id = in_quoteheaderid; */
      ELSE
         FOR i IN in_attachment_tbl.FIRST .. in_attachment_tbl.LAST
         LOOP
            DELETE FROM order_attachment_detail
                  WHERE attachment_id IN (
                           SELECT attachment_id
                             FROM order_attachment
                            WHERE order_header_id = in_order_id
                              AND NVL (site_id, 0) =
                                        NVL (in_attachment_tbl (i).site_id, 0));

            DELETE FROM order_attachment
                  WHERE order_header_id = in_order_id
                    AND NVL (site_id, 0) =
                                        NVL (in_attachment_tbl (i).site_id, 0);
         END LOOP;
      END IF;

      IF in_attachment_tbl.COUNT > 0
      THEN
         SELECT   attachment_obj (site_id,
                                  url,
                                  downloaded_to_classic,
                                  attachment_type,
                                  SOURCE,
                                  attachment_applies_to
                                 )
         BULK COLLECT INTO v_sorted_attachment_tbl
             FROM TABLE (arrachment_tbl_to_cur (in_attachment_tbl))
         ORDER BY site_id;

         v_attachment_type := '-1';

         FOR i IN
            v_sorted_attachment_tbl.FIRST .. v_sorted_attachment_tbl.LAST
         LOOP
            IF v_sorted_attachment_tbl (i).downloaded_to_classic = '-'
            THEN
               out_status := pkg_constants.con_status_success;
               out_errmsg := 'No more records';
               RETURN;
            END IF;

            IF v_attachment_type <>
                                   v_sorted_attachment_tbl (i).attachment_type
            THEN
               INSERT INTO order_attachment
                           (attachment_id, order_header_id,
                            site_id,
                            attachment_type,
                            quote_header_id
                           )
                    VALUES (order_attachment_id.NEXTVAL, in_order_id,
                            v_sorted_attachment_tbl (i).site_id,
                            v_sorted_attachment_tbl (i).attachment_type,
                            in_quoteheaderid
                           )
                 RETURNING attachment_id
                      INTO new_attachment_id;

               v_attachment_type :=
                                   v_sorted_attachment_tbl (i).attachment_type;
            END IF;

            INSERT INTO order_attachment_detail
                        (order_attachment_detail_id,
                         attachment_id, url,
                         downloaded_to_classic,
                         SOURCE,
                         attachment_applies_to
                        )
                 VALUES (order_attachment_detail_id.NEXTVAL,
                         new_attachment_id, v_sorted_attachment_tbl (i).url,
                         v_sorted_attachment_tbl (i).downloaded_to_classic,
                         v_sorted_attachment_tbl (i).SOURCE,
                         v_sorted_attachment_tbl (i).attachment_applies_to
                        );
         END LOOP;
      END IF;

      out_status := pkg_constants.con_status_success;
/*COMMIT;commented by Jay */
   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         out_errmsg := SQLERRM;
/*ROLLBACK; Commented by Jay*/
   END spi_attachment;

-- ##### Change for 904 - Report Bundles        begin
   PROCEDURE spu_centralsite_cust (
      in_cid               IN       customer.customer_id%TYPE,
      in_comp              IN       customer.company_name%TYPE,
      in_vat               IN       customer.vat_number%TYPE,
      in_salid             IN       customer.sales_channel_id%TYPE,
      in_ccntryid          IN       address.country_id%TYPE,
      in_caddr1            IN       address.address_line1%TYPE,
      in_caddr2            IN       address.address_line2%TYPE,
      in_ccity             IN       address.city%TYPE,
      in_czip              IN       address.post_zip_code%TYPE,
      in_contacts          IN       VARCHAR2,
      in_vpndet            IN       VARCHAR2,
      in_billingdet        IN       VARCHAR2,
      in_modifiedby        IN       customer.modified_by%TYPE,
      in_classicsiteid     IN       site.classic_site_id%TYPE,
-- central siteid for a customer from classic
      in_classicsitename   IN       site.classic_site_name%TYPE,
--central sitename for a customer from classic
      out_status           OUT      NUMBER,
      out_errmsg           OUT      VARCHAR2
   )
   AS
      v_row             VARCHAR2 (8000);
      v_rowcnt          NUMBER;
      v_bfname          contact.first_name%TYPE;
      v_blname          contact.last_name%TYPE;
      v_bemail          contact.email%TYPE;
      v_bphno           contact.phone_number%TYPE;
      v_bcode           ACCOUNT.bank_code%TYPE;
      v_branch          ACCOUNT.branch_code%TYPE;
      v_bctrl           ACCOUNT.control_code%TYPE;
      v_bacctno         ACCOUNT.account_number%TYPE;
      v_bstrtno         address.street_number%TYPE;
      v_bcity           address.city%TYPE;
      v_bcntryid        address.country_id%TYPE;
      v_bzip            address.post_zip_code%TYPE;
-- v_bcurid         currency.currency_id%TYPE;
      v_bcurrency       billing.currency%TYPE;
      v_binvprd         billing.invoice_period%TYPE;
      v_bactdt          billing.activation_date%TYPE;
      v_siebelid        billing.siebel_id%TYPE;
      v_bicode          billing.billing_code%TYPE;
      v_bcontactid      contact.contact_id%TYPE;
      v_baddressid      address.address_id%TYPE;
      v_bacctid         ACCOUNT.account_id%TYPE;
      v_pcontid         contact.contact_id%TYPE;
      v_scontid         contact.contact_id%TYPE;
      v_caddrid         address.address_id%TYPE;
      v_bacctidu        VARCHAR2 (500);
      v_bcontactidu     VARCHAR2 (500);
      v_baddressidu     VARCHAR2 (500);
      v_sitebillcodeu   varchar2_ntt                   := varchar2_ntt ();
      v_count           NUMBER;
      v_vfrnm           vpn.vpn_friendly_name%TYPE;
      v_vvpn            vpn.vpn_index%TYPE;
      v_vct             vpn.connection_type%TYPE;
      v_vcm             vpn.connectivity_mode%TYPE;
      v_vmss            vpn.mss_id%TYPE;
      v_fname           contact.first_name%TYPE;
      v_lname           contact.last_name%TYPE;
      v_job             contact.job_title%TYPE;
      v_email           contact.email%TYPE;
      v_phno            contact.phone_number%TYPE;
      v_fax             contact.fax%TYPE;
      v_mob             contact.mobile_number%TYPE;
      v_ctype           contact.contact_type%TYPE;
      v_bilcode         billing.billing_code%TYPE;
      v_lenbil          NUMBER;
      i                 NUMBER                         := 1;
      v_finalbilcode    VARCHAR (9);

      CURSOR c_billdet
      IS
         SELECT *
           FROM TABLE
                   (CAST
                       (pkg_common.fn_splitdata (in_billingdet, '|') AS varchar2_ntt
                       )
                   );

      CURSOR c_vpndet
      IS
         SELECT *
           FROM TABLE
                     (CAST (pkg_common.fn_splitdata (in_vpndet, '|') AS varchar2_ntt
                           )
                     );

      CURSOR c_contacts
      IS
         SELECT *
           FROM TABLE
                   (CAST (pkg_common.fn_splitdata (in_contacts, '|') AS varchar2_ntt
                         )
                   );
   BEGIN
      SET TRANSACTION READ WRITE NAME 't_billdet';

      BEGIN
         SELECT COUNT (*)
           INTO v_count
           FROM customer
          WHERE customer_id = in_cid;

         IF (v_count = 0)
         THEN
--Customer Does Not Exist
            out_status := pkg_constants.con_status_duplicate;
         ELSE
            BEGIN
               UPDATE customer
                  SET company_name = in_comp,
                      vat_number = in_vat,
                      sales_channel_id = in_salid,
                      modified_by = in_modifiedby,
                      modified_date = SYSDATE
                WHERE customer_id = in_cid;

--If Primary Contact Exists
               SELECT COUNT (*)
                 INTO v_pcontid
                 FROM customer c, customer_contact ct, contact co
                WHERE c.customer_id = in_cid
                  AND c.customer_id = ct.customer_id
                  AND ct.contact_id = co.contact_id
                  AND co.contact_type = pkg_constants.con_primary_custcontact;

-- AND co.contact_type = pkg_constants.con_primary_sitecontact;
               IF (v_pcontid != 0)
               THEN
                  SELECT ct.contact_id
                    INTO v_pcontid
                    FROM customer c, customer_contact ct, contact co
                   WHERE c.customer_id = in_cid
                     AND c.customer_id = ct.customer_id
                     AND ct.contact_id = co.contact_id
                     AND co.contact_type =
                                         pkg_constants.con_primary_custcontact;

--pkg_constants.con_primary_sitecontact;
                  DELETE FROM customer_contact
                        WHERE contact_id = v_pcontid AND customer_id = in_cid;

                  DELETE FROM contact
                        WHERE contact_id = v_pcontid;
               END IF;

--If Secondary Contact Exists
               SELECT COUNT (*)
                 INTO v_scontid
                 FROM customer c, customer_contact ct, contact co
                WHERE c.customer_id = in_cid
                  AND c.customer_id = ct.customer_id
                  AND ct.contact_id = co.contact_id
                  AND co.contact_type =
                                       pkg_constants.con_secondary_custcontact;

-- pkg_constants.con_secondary_sitecontact;
               IF (v_scontid != 0)
               THEN
                  SELECT ct.contact_id
                    INTO v_scontid
                    FROM customer c, customer_contact ct, contact co
                   WHERE c.customer_id = in_cid
                     AND c.customer_id = ct.customer_id
                     AND ct.contact_id = co.contact_id
                     AND co.contact_type =
                                       pkg_constants.con_secondary_custcontact;

--   pkg_constants.con_secondary_sitecontact;
                  DELETE FROM customer_contact
                        WHERE contact_id = v_scontid AND customer_id = in_cid;

                  DELETE FROM contact
                        WHERE contact_id = v_scontid;
               END IF;

----------------------------ADDED Contact Related-----------------------------
               IF (in_contacts != '-1')
               THEN
                  FOR v_rowcnt IN c_contacts
                  LOOP
                     SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                    1,
                                      INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 1)
                                    - 1
                                   )
                       INTO v_fname
                       FROM DUAL;

                     SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                      INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 1)
                                    + 1,
                                    (  INSTR (v_rowcnt.COLUMN_VALUE, '~', 1,
                                              2)
                                     - INSTR (v_rowcnt.COLUMN_VALUE, '~', 1)
                                     - 1
                                    )
                                   )
                       INTO v_lname
                       FROM DUAL;

                     SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                      INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 2)
                                    + 1,
                                    (  INSTR (v_rowcnt.COLUMN_VALUE, '~', 1,
                                              3)
                                     - INSTR (v_rowcnt.COLUMN_VALUE, '~', 1,
                                              2)
                                     - 1
                                    )
                                   )
                       INTO v_job
                       FROM DUAL;

                     SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                      INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 3)
                                    + 1,
                                    (  INSTR (v_rowcnt.COLUMN_VALUE, '~', 1,
                                              4)
                                     - INSTR (v_rowcnt.COLUMN_VALUE, '~', 1,
                                              3)
                                     - 1
                                    )
                                   )
                       INTO v_email
                       FROM DUAL;

                     SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                      INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 4)
                                    + 1,
                                    (  INSTR (v_rowcnt.COLUMN_VALUE, '~', 1,
                                              5)
                                     - INSTR (v_rowcnt.COLUMN_VALUE, '~', 1,
                                              4)
                                     - 1
                                    )
                                   )
                       INTO v_phno
                       FROM DUAL;

                     SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                      INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 5)
                                    + 1,
                                    (  INSTR (v_rowcnt.COLUMN_VALUE, '~', 1,
                                              6)
                                     - INSTR (v_rowcnt.COLUMN_VALUE, '~', 1,
                                              5)
                                     - 1
                                    )
                                   )
                       INTO v_fax
                       FROM DUAL;

                     SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                      INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 6)
                                    + 1,
                                    (  INSTR (v_rowcnt.COLUMN_VALUE, '~', 1,
                                              7)
                                     - INSTR (v_rowcnt.COLUMN_VALUE, '~', 1,
                                              6)
                                     - 1
                                    )
                                   )
                       INTO v_mob
                       FROM DUAL;

                     SELECT (SUBSTR (v_rowcnt.COLUMN_VALUE,
                                       INSTR (v_rowcnt.COLUMN_VALUE, '~', 1,
                                              7)
                                     + 1,
                                     LENGTH (v_rowcnt.COLUMN_VALUE) - 1
                                    )
                            )
                       INTO v_ctype
                       FROM DUAL;

                     IF (v_fname IS NOT NULL)
                     THEN
                        CASE v_ctype
                           WHEN pkg_constants.con_primary_flag
                           THEN
                              SELECT contact_id.NEXTVAL
                                INTO v_pcontid
                                FROM DUAL;

                              INSERT INTO contact
                                          (contact_id, first_name, last_name,
                                           phone_number, mobile_number, fax,
                                           contact_type,
                                           job_title, created_date, email,
                                           created_by
                                          )
                                   VALUES (v_pcontid, v_fname, v_lname,
                                           v_phno, v_mob, v_fax,
                                           pkg_constants.con_primary_custcontact,
--pkg_constants.con_primary_sitecontact,
                                           v_job, SYSDATE, v_email,
                                           in_modifiedby
                                          );

                              INSERT INTO customer_contact
                                          (customer_contact_id,
                                           customer_id, contact_id,
                                           created_date, created_by
                                          )
                                   VALUES (customer_contact_id.NEXTVAL,
                                           in_cid, v_pcontid,
                                           SYSDATE, in_modifiedby
                                          );
                           WHEN pkg_constants.con_secondary_flag
                           THEN
                              SELECT contact_id.NEXTVAL
                                INTO v_scontid
                                FROM DUAL;

                              INSERT INTO contact
                                          (contact_id, first_name, last_name,
                                           phone_number, mobile_number, fax,
                                           contact_type,
                                           job_title, created_date, email,
                                           created_by
                                          )
                                   VALUES (v_scontid, v_fname, v_lname,
                                           v_phno, v_mob, v_fax,
                                           pkg_constants.con_secondary_custcontact,
--pkg_constants.con_secondary_sitecontact,
                                           v_job, SYSDATE, v_email,
                                           in_modifiedby
                                          );

--For new Structure
                              INSERT INTO customer_contact
                                          (customer_contact_id,
                                           customer_id, contact_id,
                                           created_date, created_by
                                          )
                                   VALUES (customer_contact_id.NEXTVAL,
                                           in_cid, v_scontid,
                                           SYSDATE, in_modifiedby
                                          );
                        END CASE;
                     END IF;
                  END LOOP;
               END IF;

------------------------------------------------------------------------------
--Check id Adress Details are present
               SELECT COUNT (*)
                 INTO v_caddrid
                 FROM site
                WHERE customer_id = in_cid;

--If records exist for address  delete them
               IF (v_caddrid != 0)
               THEN
                  DELETE FROM site
                        WHERE customer_id = in_cid
                          AND address_id IN (
                                 SELECT address_id
                                   FROM site
                                  WHERE customer_id = in_cid
                                    AND main_site_flag =
                                              pkg_constants.con_activeflag_yes);

                  DELETE FROM address
                        WHERE address_id IN (
                                 SELECT address_id
                                   FROM site
                                  WHERE customer_id = in_cid
                                    AND main_site_flag =
                                              pkg_constants.con_activeflag_yes);
               END IF;

--After deletion Create new records
               IF (in_ccntryid IS NOT NULL)
               THEN
                  SELECT address_id.NEXTVAL
                    INTO v_caddrid
                    FROM DUAL;

                  INSERT INTO address
                              (address_id, country_id, address_line2, city,
                               post_zip_code, created_date, address_line1,
                               created_by
                              )
                       VALUES (v_caddrid, in_ccntryid, in_caddr2, in_ccity,
                               in_czip, SYSDATE, in_caddr1,
                               in_modifiedby
                              );

                  INSERT INTO site
                              (site_id, address_id, customer_id,
                               main_site_flag, created_by
                              )
                       VALUES (site_id.NEXTVAL, v_caddrid, in_cid,
                               pkg_constants.con_activeflag_yes, in_modifiedby
                              );
               END IF;

-- ##### Change for 904 - Report Bundles   begin
               IF (   in_classicsiteid IS NOT NULL
                   OR in_classicsitename IS NOT NULL
                  )
               THEN
                  BEGIN
                     UPDATE site
                        SET classic_site_id = in_classicsiteid,
                            classic_site_name = in_classicsitename,
                            modified_by = in_modifiedby,
                            modified_date = SYSDATE
                      WHERE customer_id = in_cid
                        AND main_site_flag = pkg_constants.con_activeflag_yes;
                  END;
               END IF;

-- ##### Change for 904 - Report Bundles     end
------------------------------
--Deletions to be done FOR VPN
               SELECT COUNT (*)
                 INTO v_count
                 FROM vpn
                WHERE customer_id = in_cid;

               IF (v_count != 0)
               THEN
                  DELETE FROM vpn
                        WHERE customer_id = in_cid;
               END IF;

               IF (in_vpndet != '-1')
               THEN
                  FOR v_rowcnt IN c_vpndet
                  LOOP
                     SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                    1,
                                      INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 1)
                                    - 1
                                   )
                       INTO v_vfrnm
                       FROM DUAL;

                     SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                      INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 1)
                                    + 1,
                                    (  INSTR (v_rowcnt.COLUMN_VALUE, '~', 1,
                                              2)
                                     - INSTR (v_rowcnt.COLUMN_VALUE, '~', 1)
                                     - 1
                                    )
                                   )
                       INTO v_vct
                       FROM DUAL;

                     SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                      INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 2)
                                    + 1,
                                    (  INSTR (v_rowcnt.COLUMN_VALUE, '~', 1,
                                              3)
                                     - INSTR (v_rowcnt.COLUMN_VALUE, '~', 1,
                                              2)
                                     - 1
                                    )
                                   )
                       INTO v_vvpn
                       FROM DUAL;

                     SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                      INSTR (v_rowcnt.COLUMN_VALUE, '~', 1, 3)
                                    + 1,
                                    (  INSTR (v_rowcnt.COLUMN_VALUE, '~', 1,
                                              4)
                                     - INSTR (v_rowcnt.COLUMN_VALUE, '~', 1,
                                              3)
                                     - 1
                                    )
                                   )
                       INTO v_vmss
                       FROM DUAL;

                     SELECT (SUBSTR (v_rowcnt.COLUMN_VALUE,
                                       INSTR (v_rowcnt.COLUMN_VALUE, '~', 1,
                                              4)
                                     + 1,
                                     LENGTH (v_rowcnt.COLUMN_VALUE) - 1
                                    )
                            )
                       INTO v_vcm
                       FROM DUAL;

                     IF (v_vct IS NOT NULL)
                     THEN
                        INSERT INTO vpn
                                    (vpn_id, customer_id, vpn_friendly_name,
                                     connection_type, connectivity_mode,
                                     mss_id, vpn_index, created_date,
                                     created_by
                                    )
                             VALUES (vpn_id.NEXTVAL, in_cid, v_vfrnm,
                                     v_vct, v_vcm,
                                     v_vmss, v_vvpn, SYSDATE,
                                     in_modifiedby
                                    );
                     END IF;
                  END LOOP;
               END IF;

-----------------------------------
--Deletions to be done for Billing Info (Account,Address,Contact and Customer Contact)
               SELECT COUNT (*)
                 INTO v_count
                 FROM billing
                WHERE customer_id = in_cid;

               IF (v_count != 0)
               THEN
                  BEGIN
                     SELECT   pkg_common.to_string
                                 (CAST
                                     (COLLECT (TO_CHAR (contact_id)) AS varchar2_ntt
                                     )
                                 )
                         INTO v_bcontactidu
                         FROM billing
                        WHERE customer_id = in_cid
                     GROUP BY customer_id;

                     SELECT   pkg_common.to_string
                                 (CAST
                                     (COLLECT (TO_CHAR (address_id)) AS varchar2_ntt
                                     )
                                 )
                         INTO v_baddressidu
                         FROM billing
                        WHERE customer_id = in_cid
                     GROUP BY customer_id;

                     SELECT   pkg_common.to_string
                                 (CAST
                                     (COLLECT (TO_CHAR (account_id)) AS varchar2_ntt
                                     )
                                 )
                         INTO v_bacctidu
                         FROM billing
                        WHERE customer_id = in_cid
                     GROUP BY customer_id;

--Collect site ids and billing codes
                     SELECT CAST
                               (COLLECT (TO_CHAR (   s.site_id
                                                  || '-'
                                                  || NVL (b.billing_code, '')
                                                 )
                                        ) AS varchar2_ntt
                               )
                       INTO v_sitebillcodeu
                       FROM site s, billing b
                      WHERE s.customer_id = in_cid
                        AND s.billing_id = b.billing_id;

                     UPDATE site
                        SET billing_id = NULL
                      WHERE site_id IN (
                                SELECT SUBSTR (val, 1, INSTR (val, '-', 1) - 1)
                                  FROM (SELECT COLUMN_VALUE val
                                          FROM TABLE (v_sitebillcodeu)));

                     DELETE FROM billing
                           WHERE customer_id = in_cid;

                     DELETE FROM ACCOUNT
                           WHERE account_id IN (
                                    SELECT TO_NUMBER (COLUMN_VALUE)
                                      FROM TABLE
                                              (CAST
                                                  (pkg_common.fn_splitdata
                                                                  (v_bacctidu,
                                                                   ','
                                                                  ) AS varchar2_ntt
                                                  )
                                              ));

                     DELETE FROM address
                           WHERE address_id IN (
                                    SELECT TO_NUMBER (COLUMN_VALUE)
                                      FROM TABLE
                                              (CAST
                                                  (pkg_common.fn_splitdata
                                                               (v_baddressidu,
                                                                ','
                                                               ) AS varchar2_ntt
                                                  )
                                              ));

                     DELETE FROM customer_contact
                           WHERE customer_id = in_cid
                             AND contact_id IN (
                                    SELECT c.contact_id
                                      FROM customer_contact cc, contact c
                                     WHERE c.contact_type =
                                              pkg_constants.con_billingcontact
                                       AND cc.customer_id = in_cid
                                       AND c.contact_id = cc.contact_id);

                     DELETE FROM contact
                           WHERE contact_id IN (
                                    SELECT TO_NUMBER (COLUMN_VALUE)
                                      FROM TABLE
                                              (CAST
                                                  (pkg_common.fn_splitdata
                                                               (v_bcontactidu,
                                                                ','
                                                               ) AS varchar2_ntt
                                                  )
                                              ))
                             AND contact_type =
                                              pkg_constants.con_billingcontact;
                  END;
               END IF;

               IF (in_billingdet != '-1')
               THEN
                  BEGIN
                     FOR v_rowcnt IN c_billdet
                     LOOP
                        SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                       1,
                                         INSTR (v_rowcnt.COLUMN_VALUE,
                                                '~',
                                                1,
                                                1
                                               )
                                       - 1
                                      )
                          INTO v_bfname
                          FROM DUAL;

                        SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                         INSTR (v_rowcnt.COLUMN_VALUE,
                                                '~',
                                                1,
                                                1
                                               )
                                       + 1,
                                       (  INSTR (v_rowcnt.COLUMN_VALUE,
                                                 '~',
                                                 1,
                                                 2
                                                )
                                        - INSTR (v_rowcnt.COLUMN_VALUE, '~',
                                                 1)
                                        - 1
                                       )
                                      )
                          INTO v_blname
                          FROM DUAL;

                        SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                         INSTR (v_rowcnt.COLUMN_VALUE,
                                                '~',
                                                1,
                                                2
                                               )
                                       + 1,
                                       (  INSTR (v_rowcnt.COLUMN_VALUE,
                                                 '~',
                                                 1,
                                                 3
                                                )
                                        - INSTR (v_rowcnt.COLUMN_VALUE,
                                                 '~',
                                                 1,
                                                 2
                                                )
                                        - 1
                                       )
                                      )
                          INTO v_bemail
                          FROM DUAL;

                        SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                         INSTR (v_rowcnt.COLUMN_VALUE,
                                                '~',
                                                1,
                                                3
                                               )
                                       + 1,
                                       (  INSTR (v_rowcnt.COLUMN_VALUE,
                                                 '~',
                                                 1,
                                                 4
                                                )
                                        - INSTR (v_rowcnt.COLUMN_VALUE,
                                                 '~',
                                                 1,
                                                 3
                                                )
                                        - 1
                                       )
                                      )
                          INTO v_bphno
                          FROM DUAL;

                        SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                         INSTR (v_rowcnt.COLUMN_VALUE,
                                                '~',
                                                1,
                                                4
                                               )
                                       + 1,
                                       (  INSTR (v_rowcnt.COLUMN_VALUE,
                                                 '~',
                                                 1,
                                                 5
                                                )
                                        - INSTR (v_rowcnt.COLUMN_VALUE,
                                                 '~',
                                                 1,
                                                 4
                                                )
                                        - 1
                                       )
                                      )
                          INTO v_bcode
                          FROM DUAL;

                        SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                         INSTR (v_rowcnt.COLUMN_VALUE,
                                                '~',
                                                1,
                                                5
                                               )
                                       + 1,
                                       (  INSTR (v_rowcnt.COLUMN_VALUE,
                                                 '~',
                                                 1,
                                                 6
                                                )
                                        - INSTR (v_rowcnt.COLUMN_VALUE,
                                                 '~',
                                                 1,
                                                 5
                                                )
                                        - 1
                                       )
                                      )
                          INTO v_branch
                          FROM DUAL;

                        SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                         INSTR (v_rowcnt.COLUMN_VALUE,
                                                '~',
                                                1,
                                                6
                                               )
                                       + 1,
                                       (  INSTR (v_rowcnt.COLUMN_VALUE,
                                                 '~',
                                                 1,
                                                 7
                                                )
                                        - INSTR (v_rowcnt.COLUMN_VALUE,
                                                 '~',
                                                 1,
                                                 6
                                                )
                                        - 1
                                       )
                                      )
                          INTO v_bctrl
                          FROM DUAL;

                        SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                         INSTR (v_rowcnt.COLUMN_VALUE,
                                                '~',
                                                1,
                                                7
                                               )
                                       + 1,
                                       (  INSTR (v_rowcnt.COLUMN_VALUE,
                                                 '~',
                                                 1,
                                                 8
                                                )
                                        - INSTR (v_rowcnt.COLUMN_VALUE,
                                                 '~',
                                                 1,
                                                 7
                                                )
                                        - 1
                                       )
                                      )
                          INTO v_bacctno
                          FROM DUAL;

                        SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                         INSTR (v_rowcnt.COLUMN_VALUE,
                                                '~',
                                                1,
                                                8
                                               )
                                       + 1,
                                       (  INSTR (v_rowcnt.COLUMN_VALUE,
                                                 '~',
                                                 1,
                                                 9
                                                )
                                        - INSTR (v_rowcnt.COLUMN_VALUE,
                                                 '~',
                                                 1,
                                                 8
                                                )
                                        - 1
                                       )
                                      )
                          INTO v_bstrtno
                          FROM DUAL;

                        SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                         INSTR (v_rowcnt.COLUMN_VALUE,
                                                '~',
                                                1,
                                                9
                                               )
                                       + 1,
                                       (  INSTR (v_rowcnt.COLUMN_VALUE,
                                                 '~',
                                                 1,
                                                 10
                                                )
                                        - INSTR (v_rowcnt.COLUMN_VALUE,
                                                 '~',
                                                 1,
                                                 9
                                                )
                                        - 1
                                       )
                                      )
                          INTO v_bcity
                          FROM DUAL;

                        SELECT TO_NUMBER
                                      (SUBSTR (v_rowcnt.COLUMN_VALUE,
                                                 INSTR (v_rowcnt.COLUMN_VALUE,
                                                        '~',
                                                        1,
                                                        10
                                                       )
                                               + 1,
                                               (  INSTR
                                                       (v_rowcnt.COLUMN_VALUE,
                                                        '~',
                                                        1,
                                                        11
                                                       )
                                                - INSTR
                                                       (v_rowcnt.COLUMN_VALUE,
                                                        '~',
                                                        1,
                                                        10
                                                       )
                                                - 1
                                               )
                                              )
                                      )
                          INTO v_bcntryid
                          FROM DUAL;

                        SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                         INSTR (v_rowcnt.COLUMN_VALUE,
                                                '~',
                                                1,
                                                11
                                               )
                                       + 1,
                                       (  INSTR (v_rowcnt.COLUMN_VALUE,
                                                 '~',
                                                 1,
                                                 12
                                                )
                                        - INSTR (v_rowcnt.COLUMN_VALUE,
                                                 '~',
                                                 1,
                                                 11
                                                )
                                        - 1
                                       )
                                      )
                          INTO v_bzip
                          FROM DUAL;

                        SELECT
--TO_NUMBER
                               (SUBSTR (v_rowcnt.COLUMN_VALUE,
                                          INSTR (v_rowcnt.COLUMN_VALUE,
                                                 '~',
                                                 1,
                                                 12
                                                )
                                        + 1,
                                        (  INSTR (v_rowcnt.COLUMN_VALUE,
                                                  '~',
                                                  1,
                                                  13
                                                 )
                                         - INSTR (v_rowcnt.COLUMN_VALUE,
                                                  '~',
                                                  1,
                                                  12
                                                 )
                                         - 1
                                        )
                                       )
                               )
--INTO v_bcurid
                        INTO   v_bcurrency
                          FROM DUAL;

                        SELECT SUBSTR (v_rowcnt.COLUMN_VALUE,
                                         INSTR (v_rowcnt.COLUMN_VALUE,
                                                '~',
                                                1,
                                                13
                                               )
                                       + 1,
                                       (  INSTR (v_rowcnt.COLUMN_VALUE,
                                                 '~',
                                                 1,
                                                 14
                                                )
                                        - INSTR (v_rowcnt.COLUMN_VALUE,
                                                 '~',
                                                 1,
                                                 13
                                                )
                                        - 1
                                       )
                                      )
                          INTO v_binvprd
                          FROM DUAL;

                        SELECT TO_DATE
                                      (SUBSTR (v_rowcnt.COLUMN_VALUE,
                                                 INSTR (v_rowcnt.COLUMN_VALUE,
                                                        '~',
                                                        1,
                                                        14
                                                       )
                                               + 1,
                                               (  INSTR
                                                       (v_rowcnt.COLUMN_VALUE,
                                                        '~',
                                                        1,
                                                        15
                                                       )
                                                - INSTR
                                                       (v_rowcnt.COLUMN_VALUE,
                                                        '~',
                                                        1,
                                                        14
                                                       )
                                                - 1
                                               )
                                              )
                                      )
                          INTO v_bactdt
                          FROM DUAL;

                        SELECT (SUBSTR (v_rowcnt.COLUMN_VALUE,
                                          INSTR (v_rowcnt.COLUMN_VALUE,
                                                 '~',
                                                 1,
                                                 15
                                                )
                                        + 1,
                                        (  INSTR (v_rowcnt.COLUMN_VALUE,
                                                  '~',
                                                  1,
                                                  16
                                                 )
                                         - INSTR (v_rowcnt.COLUMN_VALUE,
                                                  '~',
                                                  1,
                                                  15
                                                 )
                                         - 1
                                        )
                                       )
                               )
                          INTO v_siebelid
                          FROM DUAL;

                        SELECT (SUBSTR (v_rowcnt.COLUMN_VALUE,
                                          INSTR (v_rowcnt.COLUMN_VALUE,
                                                 '~',
                                                 1,
                                                 16
                                                )
                                        + 1,
                                        LENGTH (v_rowcnt.COLUMN_VALUE) - 1
                                       )
                               )
                          INTO v_bicode
                          FROM DUAL;

                        SELECT contact_id.NEXTVAL
                          INTO v_bcontactid
                          FROM DUAL;

                        SELECT address_id.NEXTVAL
                          INTO v_baddressid
                          FROM DUAL;

                        SELECT account_id.NEXTVAL
                          INTO v_bacctid
                          FROM DUAL;

                        INSERT INTO contact
                                    (contact_id, first_name, last_name,
                                     phone_number, email, created_date,
                                     contact_type,
                                     created_by
                                    )
                             VALUES (v_bcontactid, v_bfname, v_blname,
                                     v_bphno, v_bemail, SYSDATE,
                                     pkg_constants.con_billingcontact,
                                     in_modifiedby
                                    );

                        INSERT INTO customer_contact
                                    (customer_contact_id, customer_id,
                                     contact_id, created_date, created_by
                                    )
                             VALUES (customer_contact_id.NEXTVAL, in_cid,
                                     v_bcontactid, SYSDATE, in_modifiedby
                                    );

                        INSERT INTO address
                                    (address_id, country_id, street_number,
                                     city, post_zip_code, created_date,
                                     created_by
                                    )
                             VALUES (v_baddressid, v_bcntryid, v_bstrtno,
                                     v_bcity, v_bzip, SYSDATE,
                                     in_modifiedby
                                    );

                        INSERT INTO ACCOUNT
                                    (account_id, account_number, bank_code,
                                     branch_code, control_code, created_date,
                                     created_by
                                    )
                             VALUES (v_bacctid, v_bacctno, v_bcode,
                                     v_branch, v_bctrl, SYSDATE,
                                     in_modifiedby
                                    );

--This is executed only when a new billing record is added generate new Billing Code
                        IF (v_bicode = '-1')
                        THEN
                           BEGIN
--Find max billing code for the customer(when null its 1)
                              SELECT TO_NUMBER
                                          (NVL (  MAX (TO_NUMBER (billing_code)
                                                      )
                                                + 1,
                                                1
                                               )
                                          )
                                INTO v_bilcode
                                FROM billing
                               WHERE customer_id = in_cid;

                              SELECT LENGTH (v_bilcode)
                                INTO v_lenbil
                                FROM DUAL;

                              v_bicode := NULL;

--Total Length of Billing Code is 9 , this logic calculated number of '0' to be appended
-- to generate the billing code
                              LOOP
                                 EXIT WHEN i = (9 - v_lenbil) + 1;
                                 v_bicode := v_bicode || '0';
                                 i := i + 1;
                              END LOOP;

                              i := 1;
                              v_bicode := v_bicode || v_bilcode;
                           END;
                        END IF;

                        INSERT INTO billing
                                    (billing_id, address_id,
                                     customer_id, account_id, contact_id,
--currency_id
                                     currency, activation_date,
                                     invoice_period, created_date, siebel_id,
                                     created_by, billing_code
                                    )
                             VALUES (billing_id.NEXTVAL, v_baddressid,
                                     in_cid, v_bacctid, v_bcontactid,
--v_bcurid
                                     v_bcurrency, v_bactdt,
                                     v_binvprd, SYSDATE, v_siebelid,
                                     in_modifiedby, v_bicode
                                    );
                     END LOOP;

                     IF v_sitebillcodeu.COUNT > 0
-- Modified by Syed. Update only if there are billing ids mapped to site.
                     THEN
                        BEGIN
                           FOR i IN 1 .. v_sitebillcodeu.LAST
                           LOOP
                              UPDATE site
                                 SET billing_id =
                                        (SELECT billing_id
                                           FROM billing
                                          WHERE billing_code =
                                                   SUBSTR
                                                      (v_sitebillcodeu (i),
                                                         INSTR
                                                            (v_sitebillcodeu
                                                                           (i),
                                                             '-'
                                                            )
                                                       + 1
                                                      )
                                            AND customer_id = in_cid)
                               WHERE site_id =
                                        SUBSTR (v_sitebillcodeu (i),
                                                1,
                                                  INSTR (v_sitebillcodeu (i),
                                                         '-',
                                                         1
                                                        )
                                                - 1
                                               );
                           END LOOP;
                        END;
                     END IF;
                  END;
               END IF;                                --end of billing id null
            END;
         END IF;
      END;

/*  COMMIT; commented by Jay */
      out_status := pkg_constants.con_status_success;
   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         out_errmsg := SQLERRM;
/*ROLLBACK; Commented by Jay*/
   END;

   PROCEDURE spi_order_infonetsite_detail (
      in_siteid           IN       site_infonet.site_id%TYPE,
      in_ivs_migr_order   IN       site_infonet.ivs_migration_order%TYPE,
      in_ivs_migr_team    IN       site_infonet.ivs_migration_team%TYPE,
      in_ivsgateway       IN       site_infonet.ivs_phase2gateway%TYPE,
      in_tpe_id           IN       site_infonet.tpe_id%TYPE,
      in_url              IN       site_infonet.url_details%TYPE,
--in_modifiedby         IN       order_site_detail.created_by%TYPE,
      out_status          OUT      NUMBER,
      out_errmsg          OUT      VARCHAR2
   )
   AS
      v_createdate   DATE          := SYSDATE;
      v_site_type    VARCHAR2 (20);
      v_count        NUMBER;
   BEGIN
/* select decode(count(*),0,'Classic','Non Classic') into v_site_type from site
where site_id = in_siteid;*/
      SELECT COUNT (*)
        INTO v_count
        FROM site_infonet
       WHERE site_id = in_siteid;

      IF v_count = 0
      THEN
         INSERT INTO site_infonet
                     (site_id, site_type, ivs_migration_order,
                      ivs_migration_team, ivs_phase2gateway, tpe_id,
                      url_details
                     )
              VALUES (in_siteid, v_site_type, in_ivs_migr_order,
                      in_ivs_migr_team, in_ivsgateway, in_tpe_id,
                      in_url
                     );
/*  UPDATE site_infonet SET SITE_TYPE ='NON CLASSIC'
WHERE SITE_ID = in_siteid AND site_id = (SELECT site_id FROM site WHERE
site_id = in_siteid);*/
      ELSE
         UPDATE site_infonet
            SET ivs_migration_order = in_ivs_migr_order,
                ivs_migration_team = in_ivs_migr_team,
                ivs_phase2gateway = in_ivsgateway,
                tpe_id = in_tpe_id,
                url_details = in_url
          WHERE site_id = in_siteid;
      END IF;

      UPDATE site_infonet
         SET site_type = 'CLASSIC'
       WHERE site_id = in_siteid
         AND site_id = (SELECT DISTINCT classic_site_id
                                   FROM site
                                  WHERE classic_site_id = in_siteid);

      IF SQL%NOTFOUND
      THEN
         UPDATE site_infonet
            SET site_type = 'NON CLASSIC'
          WHERE site_id = in_siteid;
      END IF;

      out_status := pkg_constants.con_status_success;
      out_errmsg := 'Successfully Updated Site Details';
/*COMMIT;commented by Jay */
   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         out_errmsg := SQLERRM;
/*ROLLBACK; commented by Jay*/
   END;

/********Reach NNI ********/
   PROCEDURE spi_port_ip_routes (
      in_orderheaderid        IN       NUMBER,
      in_siteid               IN       NUMBER,
      in_attribute_level      IN       VARCHAR2,
      in_port_ip_routes_tbl   IN       port_ip_routes_tbl,
      out_status              OUT      NUMBER,
      out_errmsg              OUT      VARCHAR2
   )
   AS
      v_order_line_item_id   order_line_item.order_line_item_id%TYPE;
      v_rowid                order_line_item.row_id%TYPE               := 0;
      v_fallback             order_line_item.fallback_type%TYPE        := '';
   BEGIN
      DELETE FROM port_ip_routes
            WHERE order_line_item_id IN (
                                     SELECT order_line_item_id
                                       FROM order_line_item
                                      WHERE order_header_id =
                                                             in_orderheaderid);

--jay_debug('ip_route',in_PORT_IP_ROUTES_tbl.count,in_attribute_level);
      FOR i IN in_port_ip_routes_tbl.FIRST .. in_port_ip_routes_tbl.LAST
      LOOP
         IF    v_rowid <> in_port_ip_routes_tbl (i).row_id
            OR v_fallback <> in_port_ip_routes_tbl (i).fallback
         THEN
            v_rowid := in_port_ip_routes_tbl (i).row_id;
            v_fallback := in_port_ip_routes_tbl (i).fallback;

            BEGIN
               SELECT order_line_item_id
                 INTO v_order_line_item_id
                 FROM order_line_item
                WHERE order_header_id = in_orderheaderid
                  AND site_id = in_siteid
                  AND product_name = in_port_ip_routes_tbl (i).product_name
                  AND created_date < SYSDATE
                  AND row_id = in_port_ip_routes_tbl (i).row_id
                  AND fallback_type = in_port_ip_routes_tbl (i).fallback
                  AND active = pkg_constants.con_activeflag_yes;
            EXCEPTION
               WHEN NO_DATA_FOUND
               THEN
                  EXIT;
            END;
         END IF;

         INSERT INTO port_ip_routes
                     (port_ip_route_id, order_line_item_id,
                      row_id,
                      serial_number,
                      subnet_address,
                      subnet_mask,
                      next_hop_ip_address,
                      fallback_type
                     )
              VALUES (port_ip_route_id.NEXTVAL, v_order_line_item_id,
                      in_port_ip_routes_tbl (i).row_id,
                      in_port_ip_routes_tbl (i).serial_number,
                      in_port_ip_routes_tbl (i).subnet_address,
                      in_port_ip_routes_tbl (i).subnet_mask,
                      in_port_ip_routes_tbl (i).next_hop_ip_address,
                      in_port_ip_routes_tbl (i).fallback
                     );
--in_PORT_IP_ROUTES_tbl(i).order_line_item_id := v_order_line_item_id;
      END LOOP;

      out_status := pkg_constants.con_status_success;
      out_errmsg := SQLERRM;
   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         out_errmsg := SQLERRM;
   END;

--  EDCA Proc starts--
   PROCEDURE sp_edca_response (
      in_edca_order_id                VARCHAR2,
      in_quote_header_id              VARCHAR2,
      in_classic_customer_id          VARCHAR2,
      in_first_name                   VARCHAR2,
      in_last_name                    VARCHAR2,
      in_email                        VARCHAR2,
      in_phone                        VARCHAR2,
      in_fax                          VARCHAR2,
      in_mobile                       VARCHAR2,
      in_title                        VARCHAR2,
      in_user_id                      VARCHAR2,
      in_ein                          VARCHAR2,
      in_role                         VARCHAR2,
      in_edca_parent_site_id          VARCHAR2,
      in_edca_child_order_id          VARCHAR2,
      in_edca_child_site_id           VARCHAR2,
      in_site_id                      VARCHAR2,
      in_site_status                  VARCHAR2,
      in_classic_site_id              VARCHAR2,
      in_customer_signed_date         VARCHAR2,
      in_last_assigned_user           VARCHAR2,
      in_last_assigned_team           VARCHAR2,
      in_order_status                 VARCHAR2,
      in_rejection_type               VARCHAR2,
      in_reason                       VARCHAR2,
      in_team_wrote_reason            VARCHAR2,
      in_modified_by                  edca_response.modified_by%TYPE,
      in_modified_date                edca_response.modified_date%TYPE,
      out_errmsg                OUT   VARCHAR2
   )
   AS
      v_count        NUMBER (10);
      v_edca_count   NUMBER (10);
      v_site_count   NUMBER (10);
   BEGIN
      SELECT COUNT (*)
        INTO v_count
        FROM /*quote q LEFT OUTER JOIN */ quote_header qh
--ON q.quote_id = qh.quote_id
              LEFT OUTER JOIN quote_site qs
              ON qh.quote_header_id = qs.quote_header_id
              INNER JOIN site s ON qs.site_id = s.site_id
       WHERE s.site_id = in_site_id
         AND qh.quote_header_id = in_quote_header_id
         AND (qs.active = pkg_constants.con_activeflag_yes);

      IF v_count <> 0
      THEN
         SELECT COUNT (*)
           INTO v_edca_count
           FROM edca_response
          WHERE site_id = in_site_id AND quote_header_id = in_quote_header_id;

         IF v_edca_count = 0
         THEN
            INSERT INTO edca_response
                        (edca_order_id, quote_header_id,
                         classic_customer_id, first_name,
                         last_name, email, phone, fax,
                         mobile, title, user_id, ein, ROLE,
                         edca_parent_site_id, edca_child_order_id,
                         edca_child_site_id, site_id, site_status,
                         classic_site_id, customer_signed_date,
                         last_assigned_user, last_assigned_team,
                         order_status, rejection_type, reason,
                         team_wrote_reason, modified_by,
                         modified_date
                        )
                 VALUES (in_edca_order_id, in_quote_header_id,
                         in_classic_customer_id, in_first_name,
                         in_last_name, in_email, in_phone, in_fax,
                         in_mobile, in_title, in_user_id, in_ein, in_role,
                         in_edca_parent_site_id, in_edca_child_order_id,
                         in_edca_child_site_id, in_site_id, in_site_status,
                         in_classic_site_id, in_customer_signed_date,
                         in_last_assigned_user, in_last_assigned_team,
                         in_order_status, in_rejection_type, in_reason,
                         in_team_wrote_reason, in_modified_by,
                         in_modified_date
                        );
         ELSE
            UPDATE edca_response
               SET edca_order_id = in_edca_order_id,
                   quote_header_id = in_quote_header_id,
                   classic_customer_id = in_classic_customer_id,
                   first_name = in_first_name,
                   last_name = in_last_name,
                   email = in_email,
                   phone = in_phone,
                   fax = in_fax,
                   mobile = in_mobile,
                   title = in_title,
                   user_id = in_user_id,
                   ein = in_ein,
                   ROLE = in_role,
                   edca_parent_site_id = in_edca_parent_site_id,
                   edca_child_order_id = in_edca_child_order_id,
                   edca_child_site_id = in_edca_child_site_id,
                   site_id = in_site_id,
                   site_status = in_site_status,
                   classic_site_id = in_classic_site_id,
                   customer_signed_date = in_customer_signed_date,
                   last_assigned_user = in_last_assigned_user,
                   last_assigned_team = in_last_assigned_team,
                   order_status = in_order_status,
                   rejection_type = in_rejection_type,
                   reason = in_reason,
                   team_wrote_reason = in_team_wrote_reason,
                   modified_by = in_modified_by,
                   modified_date = in_modified_date
             WHERE site_id = in_site_id
               AND quote_header_id = in_quote_header_id;

            IF SQL%NOTFOUND
            THEN
               NULL;
            END IF;

            out_errmsg := 'Successful';
         END IF;
      ELSIF (in_quote_header_id IS NOT NULL AND in_site_id IS NULL)
      THEN
         SELECT COUNT (*)
           INTO v_edca_count
           FROM edca_response
          WHERE site_id IS NULL AND quote_header_id = in_quote_header_id;

         IF v_edca_count = 0
         THEN
            INSERT INTO edca_response
                        (edca_order_id, quote_header_id,
                         classic_customer_id, first_name,
                         last_name, email, phone, fax,
                         mobile, title, user_id, ein, ROLE,
                         edca_parent_site_id, edca_child_order_id,
                         edca_child_site_id, site_id, site_status,
                         classic_site_id, customer_signed_date,
                         last_assigned_user, last_assigned_team,
                         order_status, rejection_type, reason,
                         team_wrote_reason, modified_by,
                         modified_date
                        )
                 VALUES (in_edca_order_id, in_quote_header_id,
                         in_classic_customer_id, in_first_name,
                         in_last_name, in_email, in_phone, in_fax,
                         in_mobile, in_title, in_user_id, in_ein, in_role,
                         in_edca_parent_site_id, in_edca_child_order_id,
                         in_edca_child_site_id, in_site_id, in_site_status,
                         in_classic_site_id, in_customer_signed_date,
                         in_last_assigned_user, in_last_assigned_team,
                         in_order_status, in_rejection_type, in_reason,
                         in_team_wrote_reason, in_modified_by,
                         in_modified_date
                        );
         ELSE
            UPDATE edca_response
               SET edca_order_id = in_edca_order_id,
                   quote_header_id = in_quote_header_id,
                   classic_customer_id = in_classic_customer_id,
                   first_name = in_first_name,
                   last_name = in_last_name,
                   email = in_email,
                   phone = in_phone,
                   fax = in_fax,
                   mobile = in_mobile,
                   title = in_title,
                   user_id = in_user_id,
                   ein = in_ein,
                   ROLE = in_role,
                   edca_parent_site_id = in_edca_parent_site_id,
                   edca_child_order_id = in_edca_child_order_id,
                   edca_child_site_id = in_edca_child_site_id,
                   site_id = in_site_id,
                   site_status = in_site_status,
                   classic_site_id = in_classic_site_id,
                   customer_signed_date = in_customer_signed_date,
                   last_assigned_user = in_last_assigned_user,
                   last_assigned_team = in_last_assigned_team,
                   order_status = in_order_status,
                   rejection_type = in_rejection_type,
                   reason = in_reason,
                   team_wrote_reason = in_team_wrote_reason,
                   modified_by = in_modified_by,
                   modified_date = in_modified_date
             WHERE site_id IS NULL AND quote_header_id = in_quote_header_id;

            IF SQL%NOTFOUND
            THEN
               NULL;
            END IF;

            out_errmsg := 'Successful';
         END IF;
      ELSE                                         --IF v_site_count <> 0 THEN
-- out_status := pkg_constants.con_status_failure;
         out_errmsg := 'INVALID QUOTE AND SITE';
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
--    out_status := pkg_constants.con_status_failure;
         out_errmsg := SQLERRM;
   END sp_edca_response;

-------  EDCA Proc Ends---------
-----bill details info starts here----
   PROCEDURE sps_billdetailsinfo (
      in_quoteid         IN       quote.quote_id%TYPE,
      in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
      out_core           OUT      sys_refcursor,
      out_access         OUT      sys_refcursor,
      out_cpe            OUT      sys_refcursor,
      out_port           OUT      sys_refcursor,
      out_servicewrap    OUT      sys_refcursor
   )
   AS
   BEGIN
      OPEN out_core FOR
         SELECT DISTINCT brs.site_id, NULL "TPEIDCore", NULL "TPEURLCore"
                    FROM quote q INNER JOIN quote_header qh
                         ON q.quote_id = qh.quote_id
                         LEFT OUTER JOIN quote_site qs
                         ON qh.quote_header_id = qs.quote_header_id
                         INNER JOIN site s ON qs.site_id = s.site_id
                         INNER JOIN bid_request_status brs
                         ON qh.quote_header_id = brs.quote_header_id
                       AND s.site_id = brs.site_id
                       AND brs.active = pkg_constants.con_activeflag_yes
                   WHERE q.quote_id = in_quoteheaderid
                     AND qh.quote_header_id = in_quoteheaderid
                     AND (qs.active = pkg_constants.con_activeflag_yes);

      OPEN out_access FOR
         SELECT DISTINCT brs.site_id, special_bid_number "TPEIDAccess",
                         tpp_url "TPEURLAccess"
                    FROM quote q INNER JOIN quote_header qh
                         ON q.quote_id = qh.quote_id
                         LEFT OUTER JOIN quote_site qs
                         ON qh.quote_header_id = qs.quote_header_id
                         INNER JOIN site s ON qs.site_id = s.site_id
                         INNER JOIN bid_request_status brs
                         ON qh.quote_header_id = brs.quote_header_id
                       AND s.site_id = brs.site_id
                       AND brs.active = pkg_constants.con_activeflag_yes
                   WHERE q.quote_id = in_quoteheaderid
                     AND qh.quote_header_id = in_quoteheaderid
                     AND (qs.active = pkg_constants.con_activeflag_yes)
                     AND brs.product_name = 'BT iVPN2 Access';

      OPEN out_cpe FOR
         SELECT DISTINCT brs.site_id, special_bid_number "TPEIDCPE",
                         tpp_url "TPEURLCPE"
                    FROM quote q INNER JOIN quote_header qh
                         ON q.quote_id = qh.quote_id
                         LEFT OUTER JOIN quote_site qs
                         ON qh.quote_header_id = qs.quote_header_id
                         INNER JOIN site s ON qs.site_id = s.site_id
                         INNER JOIN bid_request_status brs
                         ON qh.quote_header_id = brs.quote_header_id
                       AND s.site_id = brs.site_id
                       AND brs.active = pkg_constants.con_activeflag_yes
                   WHERE q.quote_id = in_quoteheaderid
                     AND qh.quote_header_id = in_quoteheaderid
                     AND (qs.active = pkg_constants.con_activeflag_yes)
                     AND brs.product_name = 'BT CPE';

      OPEN out_port FOR
         SELECT DISTINCT brs.site_id, special_bid_number "TPEPort",
                         tpp_url "TPEURLPort"
                    FROM quote q INNER JOIN quote_header qh
                         ON q.quote_id = qh.quote_id
                         LEFT OUTER JOIN quote_site qs
                         ON qh.quote_header_id = qs.quote_header_id
                         INNER JOIN site s ON qs.site_id = s.site_id
                         INNER JOIN bid_request_status brs
                         ON qh.quote_header_id = brs.quote_header_id
                       AND s.site_id = brs.site_id
                       AND brs.active = pkg_constants.con_activeflag_yes
                   WHERE q.quote_id = in_quoteheaderid
                     AND qh.quote_header_id = in_quoteheaderid
                     AND (qs.active = pkg_constants.con_activeflag_yes)
                     AND brs.product_name = 'BT iVPN2 Port';

      OPEN out_servicewrap FOR
         SELECT DISTINCT brs.site_id, special_bid_number "TPEIDServiceWrap",
                         tpp_url "TPEURLServiceWrap"
                    FROM quote q INNER JOIN quote_header qh
                         ON q.quote_id = qh.quote_id
                         LEFT OUTER JOIN quote_site qs
                         ON qh.quote_header_id = qs.quote_header_id
                         INNER JOIN site s ON qs.site_id = s.site_id
                         INNER JOIN bid_request_status brs
                         ON qh.quote_header_id = brs.quote_header_id
                       AND s.site_id = brs.site_id
                       AND brs.active = pkg_constants.con_activeflag_yes
                   WHERE q.quote_id = in_quoteheaderid
                     AND qh.quote_header_id = in_quoteheaderid
                     AND (qs.active = pkg_constants.con_activeflag_yes)
                     AND brs.product_name IN
                                   ('BT iVPN2 CONFIGURATION', 'BT iVPN2 SLA');
   END sps_billdetailsinfo;

-----bill details info ends here----
/* Bill validation starts here */
   PROCEDURE sps_billvalidate_order (
      in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
      out_status         OUT      NUMBER
   )
   AS
      v_bid_request   NUMBER;
      v_bid_status    NUMBER;
   BEGIN
      out_status := pkg_constants.con_status_success;

      SELECT COUNT (*)
        INTO v_bid_request
        FROM quote_header qh LEFT OUTER JOIN quote_site qs
             ON qh.quote_header_id = qs.quote_header_id
             INNER JOIN site s ON qs.site_id = s.site_id
             INNER JOIN bid_request_status brs
             ON brs.site_id = s.site_id
           AND brs.quote_header_id = in_quoteheaderid
       WHERE qh.quote_header_id = in_quoteheaderid
         AND (qs.active = 'Y')
         AND brs.active = 'Y';

      IF v_bid_request > 0
      THEN
         SELECT COUNT (*)
           INTO v_bid_status
           FROM bid_request_status
          WHERE quote_header_id = in_quoteheaderid
            AND UPPER (bid_status) = UPPER ('Committed')
            AND SYSDATE <= bid_expiry_date
            AND (   UPPER (data_build_done) = 'YES'
                 OR UPPER (data_build_done) = 'NA'
                )
            AND active = 'Y';

         IF v_bid_status = 0
         THEN
            out_status := pkg_constants.con_status_failure;
         END IF;
      END IF;
   END sps_billvalidate_order;

/* Bill validation ends here */
/*** Modify **/
   PROCEDURE spi_as_is_to_order (
      in_quoteheaderid   IN       order_line_item_as_is.quote_header_id%TYPE,
      in_createdby       IN       order_line_item.created_by%TYPE,
      out_status         OUT      NUMBER,
      out_errmsg         OUT      VARCHAR2
   )
   AS
      v_prodid                       order_line_item_as_is.product_id%TYPE;
      v_prodname                     order_line_item_as_is.product_name%TYPE;
      v_fallback                     order_line_item_as_is.fallback_type%TYPE;
      v_rowid                        order_line_item_as_is.row_id%TYPE;
      v_tattrid                      pkg_order.t_attrmapid;
      v_tconfiglevel                 pkg_order.t_configlevel;
      v_tattrval                     pkg_order.t_value;
      v_qty                          pkg_order.t_qty;
      v_lineitemid                   order_line_item_as_is.order_line_item_id%TYPE;
      v_lineitemids                  VARCHAR2 (2000);
      v_attrlevel                    attribute_mapping.attribute_level%TYPE;
      v_configlevel                  attribute_mapping.config_level%TYPE;
      v_rowcount                     NUMBER;
      v_prodattr                     VARCHAR2 (4000);
      v_proddet                      VARCHAR2 (4000);
      v_attrdet                      VARCHAR2 (4000);
      v_attrcnt                      NUMBER;
      v_curdate                      DATE                          := SYSDATE;
      v_quote_site_service_id        NUMBER (16, 0);
      v_order_header_id              order_header.order_header_id%TYPE;
      v_order_line_item              order_line_item_tbl
                                                    := order_line_item_tbl
                                                                          ();
      v_order_line_item_detail_tbl   order_line_item_detail_tbl
                                             := order_line_item_detail_tbl
                                                                          ();
      v_productid                    NUMBER;

      CURSOR c1
      IS
         SELECT DISTINCT quote_header_id, site_id, quote_site_service_id,
                         product_id
                    FROM order_line_item_as_is
                   WHERE quote_header_id = in_quoteheaderid AND active = 'Y';
   BEGIN
      SELECT order_header_id
        INTO v_order_header_id
        FROM order_header oh
       WHERE oh.quote_header_id = in_quoteheaderid;

      FOR i IN c1
      LOOP
         IF v_order_line_item IS NOT NULL
         THEN
            v_order_line_item.DELETE;
         END IF;

---------Suman Change for MX-r11 of the rowid
         IF i.product_id = pkg_constants.con_mx_product_key
         THEN
            SELECT order_line_item_obj
                      (product_id,
                       product_name,
                       fallback_type,
                       '',
                       row_id,
                       '',
                       CAST
                          (MULTISET
                              (SELECT olid.attribute_mapping_id,
                                      am.config_level, olid.VALUE,
                                      olid.quantity, olid.row_id,
                                            -- oli --> olid changed by Sandeep
                                      classic_element_id,
                                      classic_element_name
                                 FROM order_line_item_detail_as_is olid,
                                      attribute_mapping am
                                WHERE olid.active =
                                              pkg_constants.con_activeflag_yes
                                  AND olid.order_line_item_id =
                                                        oli.order_line_item_id
                                  AND am.attribute_mapping_id =
                                                     olid.attribute_mapping_id
                              ) AS order_line_item_detail_tbl
                          ),
                       NULL,
                       scode,
                       classic_element_id,
                       classic_element_name
                      )
            BULK COLLECT INTO v_order_line_item
              FROM order_line_item_as_is oli
             WHERE oli.quote_header_id = i.quote_header_id
               AND (   oli.site_id = i.site_id
                    OR (oli.site_id IS NULL AND NVL (i.site_id, -1) = -1)
                   )
               AND (quote_site_service_id = i.quote_site_service_id)
               AND active = pkg_constants.con_activeflag_yes;
                                                         -- Added on 25/1/2011
         ELSE
            SELECT order_line_item_obj
                      (product_id,
                       product_name,
                       fallback_type,
                       '',
                       row_id,
                       '',
                       CAST
                          (MULTISET
                              (SELECT olid.attribute_mapping_id,
                                      am.config_level, olid.VALUE,
                                      olid.quantity, oli.row_id,
                                            -- oli --> olid changed by Sandeep
                                      classic_element_id,
                                      classic_element_name
                                 FROM order_line_item_detail_as_is olid,
                                      attribute_mapping am
                                WHERE olid.active =
                                              pkg_constants.con_activeflag_yes
                                  AND olid.order_line_item_id =
                                                        oli.order_line_item_id
                                  AND am.attribute_mapping_id =
                                                     olid.attribute_mapping_id
                              ) AS order_line_item_detail_tbl
                          ),
                       NULL,
                       scode,
                       classic_element_id,
                       classic_element_name
                      )
            BULK COLLECT INTO v_order_line_item
              FROM order_line_item_as_is oli
             WHERE oli.quote_header_id = i.quote_header_id
               AND (   oli.site_id = i.site_id
                    OR (oli.site_id IS NULL AND NVL (i.site_id, -1) = -1)
                   )
               AND (quote_site_service_id = i.quote_site_service_id)
               AND active = pkg_constants.con_activeflag_yes;
                                                         -- Added on 25/1/2011
         END IF;

         IF v_order_line_item IS NOT NULL
         THEN
            pkg_order.spi_order_config_modify (v_order_header_id,
                                               i.site_id,
                                               i.quote_site_service_id,
                                               v_order_line_item,
                                               'Order',
                                               in_createdby,
                                               out_status,
                                               out_errmsg
                                              );
         END IF;
      END LOOP;

      IF out_status = 1                                  -- Added on 25/1/2011
      THEN
         DELETE FROM order_contact_detail
               WHERE order_header_id = v_order_header_id;

         IF v_order_header_id IS NOT NULL
         THEN
            BEGIN
               SELECT DISTINCT product_id
                          INTO v_productid
                          FROM order_line_item
                         WHERE order_header_id = v_order_header_id
                           AND active = 'Y';
            EXCEPTION
               WHEN NO_DATA_FOUND
               THEN
                  v_productid := NULL;
               WHEN TOO_MANY_ROWS
               THEN
                  v_productid := NULL;
            END;

            IF v_productid = 1012437
            THEN
               INSERT INTO order_contact_detail
                           (order_header_id, contact_id, created_by,
                            created_date, order_contact_detail_id,
                            address_id, bfg_cnr_id, bfg_cnt_id)
                  (SELECT v_order_header_id, contact_id, created_by,
                          created_date, order_contact_detail_id.NEXTVAL,
                          address_id, bfg_cnr_id, bfg_cnt_id
                     FROM order_contact_detail_as_is
                    WHERE quote_header_id = in_quoteheaderid);
            END IF;
         END IF;
      END IF;
--  out_status := pkg_constants.con_status_success;  -- 25/1/2011
   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         out_errmsg := SQLERRM;
   END;

   PROCEDURE spi_order_configuration_to_be (
      in_orderheaderid    IN       order_header.order_header_id%TYPE,
      in_siteid           IN       site.site_id%TYPE,
      in_service_name     IN       quote_site_service.service_name%TYPE,
      in_attributelist    IN       CLOB,
      in_attributelevel   IN       attribute_mapping.attribute_level%TYPE,
      in_createdby        IN       order_line_item.created_by%TYPE,
      out_status          OUT      NUMBER,
      out_errmsg          OUT      VARCHAR2
   )
   AS
      CURSOR c_attributelist
      IS
         SELECT *
           FROM TABLE
                   (CAST
                       (pkg_common.fn_splitbulkupload (in_attributelist, '~') AS varchar2_clob
                       )
                   );

      v_prodid                  order_line_item.product_id%TYPE;
      v_prodname                order_line_item.product_name%TYPE;
      v_fallback                order_line_item.fallback_type%TYPE;
      v_rowid                   order_line_item.row_id%TYPE;
      v_tattrid                 t_attrmapid;
      v_tconfiglevel            t_configlevel;
      v_tattrval                t_value;
      v_qty                     t_qty;
      v_lineitemid              order_line_item.order_line_item_id%TYPE;
      v_lineitemids             VARCHAR2 (2000);
      v_attrlevel               attribute_mapping.attribute_level%TYPE;
      v_configlevel             attribute_mapping.config_level%TYPE;
      v_rowcount                NUMBER;
      v_prodattr                VARCHAR2 (4000);
      v_proddet                 VARCHAR2 (4000);
      v_attrdet                 VARCHAR2 (4000);
      v_attrcnt                 NUMBER;
      v_curdate                 DATE                                := SYSDATE;
      v_quote_site_service_id   NUMBER (16, 0);
   BEGIN
      BEGIN
         SELECT quote_site_service_id
           INTO v_quote_site_service_id
           FROM quote_site_service qss, order_header oh
          WHERE oh.quote_header_id =
                                   (SELECT quote_header_id
                                      FROM order_header
                                     WHERE order_header_id = in_orderheaderid)
            AND qss.quote_header_id = oh.quote_header_id
            AND qss.site_id = in_siteid
            AND UPPER (service_name) = UPPER (in_service_name);
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            out_status := pkg_constants.con_status_failure;
            out_errmsg :=
                        'Could not find quote_site_service_id for this order';
            RETURN;
      END;

      IF (in_attributelist IS NOT NULL)
      THEN
         BEGIN
            OPEN c_attributelist;

            LOOP
               FETCH c_attributelist
                INTO v_prodattr;

               EXIT WHEN c_attributelist%NOTFOUND;
               v_proddet :=
                     SUBSTR (v_prodattr, 1, INSTR (v_prodattr, ';', 1, 1) - 1);
               v_attrdet :=
                        SUBSTR (v_prodattr, INSTR (v_prodattr, ';', 1, 1) + 1);
               v_attrdet := v_attrdet || '##';

               SELECT pkg_common.fn_countbulkupload (v_attrdet, '##')
                 INTO v_attrcnt
                 FROM DUAL;

               IF (v_attrcnt != 0)
               THEN
                  BEGIN
--get the list of products from the input string
                     v_prodid :=
                        SUBSTR (v_proddet,
                                INSTR (v_proddet, '|||') + 3,
                                  (INSTR (v_proddet, '::') - 3
                                  )
                                - INSTR (v_proddet, '|||')
                               );
                     v_proddet :=
                          SUBSTR (v_proddet, INSTR (v_proddet, '::', 1, 1) + 2);
                     v_prodname :=
                        SUBSTR (v_proddet,
                                INSTR (v_proddet, '|||') + 3,
                                  (INSTR (v_proddet, '::') - 3
                                  )
                                - INSTR (v_proddet, '|||')
                               );
                     v_proddet :=
                          SUBSTR (v_proddet, INSTR (v_proddet, '::', 1, 1) + 2);
                     v_fallback :=
                        SUBSTR (v_proddet,
                                INSTR (v_proddet, '|||') + 3,
                                  (INSTR (v_proddet, '::') - 3
                                  )
                                - INSTR (v_proddet, '|||')
                               );
                     v_proddet :=
                          SUBSTR (v_proddet, INSTR (v_proddet, '::', 1, 1) + 2);
                     v_rowid :=
                         SUBSTR (v_proddet, INSTR (v_proddet, '|||', 1, 1) + 3);

--if order_line_item exists
                     SELECT COUNT (*)
                       INTO v_rowcount
                       FROM order_line_item
                      WHERE order_header_id = in_orderheaderid
                        AND site_id = in_siteid
                        AND UPPER (product_name) = UPPER (v_prodname)
                        AND UPPER (fallback_type) = UPPER (v_fallback)
                        AND active = pkg_constants.con_activeflag_yes
                        AND quote_site_service_id = v_quote_site_service_id;

                     IF (v_rowcount = 0)
                     THEN
                        BEGIN
                           INSERT INTO order_line_item
                                       (order_line_item_id,
                                        order_header_id, site_id,
                                        product_id, product_name,
                                        fallback_type, quantity,
                                        active,
                                        created_by, created_date, row_id,
                                        quote_site_service_id
                                       )
                                VALUES (order_line_item_id.NEXTVAL,
                                        in_orderheaderid, in_siteid,
                                        v_prodid, v_prodname,
                                        v_fallback, DEFAULT,
                                        pkg_constants.con_activeflag_yes,
                                        in_createdby, v_curdate, v_rowid,
                                        v_quote_site_service_id
                                       )
                             RETURNING order_line_item_id
                                  INTO v_lineitemid;
                        END;
                     ELSE
                        BEGIN
                           IF (v_rowid IS NOT NULL)
--for VPN Connection
                           THEN
                              BEGIN
                                 SELECT COUNT (*)
                                   INTO v_rowcount
                                   FROM order_line_item
                                  WHERE order_header_id = in_orderheaderid
                                    AND site_id = in_siteid
                                    AND UPPER (product_name) =
                                                            UPPER (v_prodname)
                                    AND UPPER (fallback_type) =
                                                            UPPER (v_fallback)
                                    AND created_date < v_curdate
                                    AND modified_by IS NULL
                                    AND active =
                                              pkg_constants.con_activeflag_yes
                                    AND quote_site_service_id =
                                                       v_quote_site_service_id;

                                 IF (v_rowcount > 0)
                                 THEN
--inactivate all existing VPN line items created previously
                                    UPDATE order_line_item
                                       SET active =
                                               pkg_constants.con_activeflag_no,
                                           modified_by = in_createdby,
                                           modified_date = v_curdate
                                     WHERE order_header_id = in_orderheaderid
                                       AND site_id = in_siteid
                                       AND quote_site_service_id =
                                                       v_quote_site_service_id
                                       AND product_name = v_prodname
                                       AND created_date < v_curdate
                                       AND modified_by IS NULL;
                                 END IF;

--insert VPN line items
                                 INSERT INTO order_line_item
                                             (order_line_item_id,
                                              order_header_id, site_id,
                                              product_id, product_name,
                                              fallback_type, quantity,
                                              active,
                                              created_by, created_date,
                                              row_id, quote_site_service_id
                                             )
                                      VALUES (order_line_item_id.NEXTVAL,
                                              in_orderheaderid, in_siteid,
                                              v_prodid, v_prodname,
                                              v_fallback, DEFAULT,
                                              pkg_constants.con_activeflag_yes,
                                              in_createdby, v_curdate,
                                              v_rowid, v_quote_site_service_id
                                             )
                                   RETURNING order_line_item_id
                                        INTO v_lineitemid;
                              END;
                           END IF;

----Start Moved to below update stmt to get inactive order line item ids
----Modified by SRK on 20-Feb for improving performance
/*  SELECT pkg_common.to_string
(CAST
(COLLECT (TO_CHAR (order_line_item_id)
) AS varchar2_ntt
)
)
INTO v_lineitemids
FROM order_line_item
WHERE order_header_id = in_orderheaderid
AND site_id = in_siteid
AND quote_site_service_id =
v_quote_site_service_id
AND UPPER (product_name) = UPPER (v_prodname)
AND (row_id = v_rowid OR row_id IS NULL);
IF (INSTR (v_lineitemids, ',', 1) = 0)
THEN
v_lineitemids := v_lineitemids || ',';
END IF;
*/   ----End Moved to below update stmt
--select existing order_line_item to insert into order_line_item_detail
                           SELECT order_line_item_id
                             INTO v_lineitemid
                             FROM order_line_item
                            WHERE order_header_id = in_orderheaderid
                              AND site_id = in_siteid
                              AND quote_site_service_id =
                                                       v_quote_site_service_id
                              AND UPPER (product_name) = UPPER (v_prodname)
                              AND UPPER (fallback_type) = UPPER (v_fallback)
                              AND (   NVL (DECODE (row_id, 0, NULL, row_id),
                                           -1
                                          ) = NVL (v_rowid, -1)
                                   OR row_id IS NULL
                                  )
                              AND active = pkg_constants.con_activeflag_yes;
                        END;
                     END IF;

                     FOR i IN 1 .. v_attrcnt
                     LOOP
                        v_tattrid (i) :=
                           SUBSTR (v_attrdet,
                                   INSTR (v_attrdet, '|||') + 3,
                                     (INSTR (v_attrdet, '::') - 3
                                     )
                                   - INSTR (v_attrdet, '|||')
                                  );
                        v_attrdet :=
                           SUBSTR (v_attrdet,
                                   INSTR (v_attrdet, '::', 1, 1) + 2);
                        v_tconfiglevel (i) :=
                           SUBSTR (v_attrdet,
                                   INSTR (v_attrdet, '|||') + 3,
                                     (INSTR (v_attrdet, '::') - 3
                                     )
                                   - INSTR (v_attrdet, '|||')
                                  );
                        v_attrdet :=
                           SUBSTR (v_attrdet,
                                   INSTR (v_attrdet, '::', 1, 1) + 2);
                        v_tattrval (i) :=
                           SUBSTR (v_attrdet,
                                   INSTR (v_attrdet, '|||') + 3,
                                     (INSTR (v_attrdet, '::') - 3
                                     )
                                   - INSTR (v_attrdet, '|||')
                                  );
                        v_attrdet :=
                           SUBSTR (v_attrdet,
                                   INSTR (v_attrdet, '::', 1, 1) + 2);
                        v_qty (i) :=
                           SUBSTR (v_attrdet,
                                   INSTR (v_attrdet, '|||') + 3,
                                     (INSTR (v_attrdet, '##') - 3
                                     )
                                   - INSTR (v_attrdet, '|||')
                                  );
                        v_attrdet :=
                             SUBSTR (v_attrdet, INSTR (v_attrdet, '##', 1) + 2);
                     END LOOP;

--Update all previous order_line_item_details for the exisiting order_line_items
--Update modified by SRK on 20-Feb for improving performance
                     FORALL i IN v_tconfiglevel.FIRST .. v_tconfiglevel.LAST
                        UPDATE order_line_item_detail OLD
                           SET active = pkg_constants.con_activeflag_no,
                               modified_date = v_curdate,
                               modified_by = in_createdby
                         WHERE order_line_item_id IN (
                                  SELECT order_line_item_id
                                    FROM order_line_item
                                   WHERE order_header_id = in_orderheaderid
                                     AND site_id = in_siteid
                                     AND quote_site_service_id =
                                                       v_quote_site_service_id
                                     AND UPPER (product_name) =
                                                            UPPER (v_prodname)
                                     AND (row_id = v_rowid OR row_id IS NULL
                                         ))
                           AND EXISTS (
                                  SELECT 1
                                    FROM attribute_mapping am
                                   WHERE UPPER (config_level) =
                                                    UPPER (v_tconfiglevel (i))
                                     AND UPPER (attribute_level) =
                                                     UPPER (in_attributelevel)
                                     AND OLD.attribute_mapping_id =
                                                       am.attribute_mapping_id)
                           AND created_date < v_curdate
                           AND modified_date IS NULL;
--insert into order_line-item_detail all the attributes after making
--existing attributes as inactive
                     FORALL i IN 1 .. v_attrcnt
                        INSERT INTO order_line_item_detail
                                    (order_line_item_det_id,
                                     order_line_item_id,
                                     attribute_mapping_id, VALUE,
                                     active,
                                     created_by, created_date, quantity
                                    )
                             VALUES (order_line_item_det_id.NEXTVAL,
                                     v_lineitemid,
                                     v_tattrid (i), v_tattrval (i),
                                     pkg_constants.con_activeflag_yes,
                                     in_createdby, v_curdate, v_qty (i)
                                    );
                     out_status := pkg_constants.con_status_success;
---  COMMIT;
                  END;
               ELSE
                  BEGIN
                     out_status := pkg_constants.con_status_failure;
                     out_errmsg := 'Invalid Product-Attribute List';
                  END;
               END IF;
            END LOOP;

            CLOSE c_attributelist;
         END;
      ELSE
         BEGIN
            out_status := pkg_constants.con_status_failure;
            out_errmsg := 'Invalid Product-Attribute List';
         END;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         out_errmsg := SQLERRM;
-- ROLLBACK;
   END;

   PROCEDURE spi_order_config_modify (
      in_orderheaderid           IN       order_header.order_header_id%TYPE,
      in_siteid                  IN       site.site_id%TYPE,
      in_quote_site_service_id   IN       quote_site_service.quote_site_service_id%TYPE,
--  in_attributelist  IN line_item_tbl, arch commented
      in_attributelist           IN       order_line_item_tbl,
      in_attributelevel          IN       attribute_mapping.attribute_level%TYPE,
      in_createdby               IN       order_line_item.created_by%TYPE,
      out_status                 OUT      NUMBER,
      out_errmsg                 OUT      VARCHAR2
   )
   AS
/* CURSOR c_attributelist
IS
SELECT *
FROM TABLE
(CAST
(pkg_common.fn_splitbulkupload (in_attributelist, '~') AS varchar2_clob
)
); */
      v_prodid                        order_line_item.product_id%TYPE;
      v_prodname                      order_line_item.product_name%TYPE;
      v_fallback                      order_line_item.fallback_type%TYPE;
      v_rowid                         order_line_item.row_id%TYPE;
      v_tattrid                       pkg_order.t_attrmapid;
      v_tconfiglevel                  pkg_order.t_configlevel;
      v_tattrval                      pkg_order.t_value;
      v_qty                           pkg_order.t_qty;
      v_lineitemid                    order_line_item.order_line_item_id%TYPE;
      v_lineitemids                   VARCHAR2 (2000);
      v_attrlevel                     attribute_mapping.attribute_level%TYPE;
      v_configlevel                   attribute_mapping.config_level%TYPE;
      v_rowcount                      NUMBER;
      v_prodattr                      VARCHAR2 (4000);
      v_proddet                       VARCHAR2 (4000);
      v_attrdet                       VARCHAR2 (4000);
      v_attrcnt                       NUMBER;
      v_curdate                       DATE                         := SYSDATE;
      v_quote_site_service_id         NUMBER (16, 0);
      v_order_line_item               order_line_item_tbl
                                                    := order_line_item_tbl
                                                                          ();
      v_order_line_item_detail_tbl    order_line_item_detail_tbl
                                             := order_line_item_detail_tbl
                                                                          ();
      v_classic_element_id            quote_line_item_as_is.classic_element_id%TYPE;
      v_classic_element_name          quote_line_item_as_is.classic_element_name%TYPE;
      v_classic_element_id_detail     t_classic_element_id;
      v_classic_element_name_detail   t_classic_element_name;

-- ARCH created t_rowid ,MX
      TYPE t_rowid IS TABLE OF order_line_item_detail.row_id%TYPE
         INDEX BY BINARY_INTEGER;

      v_rowid1                        t_rowid;
   BEGIN
      IF (in_attributelist.EXISTS (1))
      THEN
         BEGIN
            v_quote_site_service_id := in_quote_site_service_id;

            FOR j IN in_attributelist.FIRST .. in_attributelist.LAST
            LOOP
--  v_proddet := SUBSTR (v_prodattr, 1, INSTR (v_prodattr, ';', 1, 1) - 1);
--  v_attrdet := SUBSTR (v_prodattr, INSTR (v_prodattr, ';', 1, 1)    + 1);
--   v_attrdet := v_attrdet || '##';
--SELECT pkg_common.fn_countbulkupload (v_attrdet, '##')
-- INTO v_attrcnt
-- FROM DUAL;
               BEGIN
/*--get the list of products from the input string*/
                  v_prodid := in_attributelist (j).o_pid;
                  v_prodname := in_attributelist (j).o_product_name;
                  v_fallback := in_attributelist (j).o_fallback;
                  v_rowid := in_attributelist (j).o_rowid;
                  v_classic_element_id :=
                                    in_attributelist (j).o_classic_element_id;
                  v_classic_element_name :=
                                  in_attributelist (j).o_classic_element_name;

/*--if order_line_item exists*/
                  SELECT COUNT (*)
                    INTO v_rowcount
                    FROM order_line_item
                   WHERE order_header_id = in_orderheaderid
                     AND site_id = in_siteid
                     AND UPPER (product_name) = UPPER (v_prodname)
                     AND UPPER (fallback_type) = UPPER (v_fallback)
                     AND active = pkg_constants.con_activeflag_yes
                     AND quote_site_service_id = v_quote_site_service_id;

                  IF (v_rowcount = 0)
                  THEN
                     BEGIN
                        INSERT INTO order_line_item
                                    (order_line_item_id,
                                     order_header_id, site_id, product_id,
                                     product_name, fallback_type, quantity,
                                     active,
                                     created_by, created_date, row_id,
                                     quote_site_service_id,
                                     classic_element_id,
                                     classic_element_name
                                    )
                             VALUES (order_line_item_id.NEXTVAL,
                                     in_orderheaderid, in_siteid, v_prodid,
                                     v_prodname, v_fallback, DEFAULT,
                                     pkg_constants.con_activeflag_yes,
                                     in_createdby, v_curdate, v_rowid,
                                     v_quote_site_service_id,
                                     v_classic_element_id,
                                     v_classic_element_name
                                    )
                          RETURNING order_line_item_id
                               INTO v_lineitemid;
                     END;
                  ELSE
                     BEGIN
                        IF (v_rowid IS NOT NULL)
/*--for VPN Connection*/
                        THEN
                           BEGIN
                              SELECT COUNT (*)
                                INTO v_rowcount
                                FROM order_line_item
                               WHERE order_header_id = in_orderheaderid
                                 AND site_id = in_siteid
                                 AND UPPER (product_name) = UPPER (v_prodname)
                                 AND UPPER (fallback_type) =
                                                            UPPER (v_fallback)
                                 AND created_date < v_curdate
                                 AND modified_by IS NULL
                                 AND active = pkg_constants.con_activeflag_yes
                                 AND quote_site_service_id =
                                                       v_quote_site_service_id;

                              IF (v_rowcount > 0)
                              THEN
/*--inactivate all existing VPN line items created previously*/
                                 UPDATE order_line_item
                                    SET active =
                                               pkg_constants.con_activeflag_no,
                                        modified_by = in_createdby,
                                        modified_date = v_curdate
                                  WHERE order_header_id = in_orderheaderid
                                    AND site_id = in_siteid
                                    AND product_name = v_prodname
                                    AND created_date < v_curdate
                                    AND modified_by IS NULL
                                    AND quote_site_service_id =
                                                       v_quote_site_service_id;
                              END IF;

/*--insert VPN line items*/
                              INSERT INTO order_line_item
                                          (order_line_item_id,
                                           order_header_id, site_id,
                                           product_id, product_name,
                                           fallback_type, quantity,
                                           active,
                                           created_by, created_date, row_id,
                                           quote_site_service_id,
                                           classic_element_id,
                                           classic_element_name
                                          )
                                   VALUES (order_line_item_id.NEXTVAL,
                                           in_orderheaderid, in_siteid,
                                           v_prodid, v_prodname,
                                           v_fallback, DEFAULT,
                                           pkg_constants.con_activeflag_yes,
                                           in_createdby, v_curdate, v_rowid,
                                           v_quote_site_service_id,
                                           v_classic_element_id,
                                           v_classic_element_name
                                          )
                                RETURNING order_line_item_id
                                     INTO v_lineitemid;
                           END;
                        END IF;

----Start Moved to below update stmt to get inactive order line item ids
----Modified by SRK on 20-Feb for improving performance
/* SELECT pkg_common.to_string
(CAST
(COLLECT (TO_CHAR (order_line_item_id)) AS varchar2_ntt
)
)
INTO v_lineitemids
FROM order_line_item
WHERE order_header_id = in_orderheaderid
AND site_id = in_siteid
AND UPPER (product_name) = UPPER (v_prodname)
AND (row_id = v_rowid OR row_id IS NULL)
AND quote_site_service_id = v_quote_site_service_id;
IF (INSTR (v_lineitemids, ',', 1) = 0)
THEN
v_lineitemids := v_lineitemids || ',';
END IF;
*/   ----End Moved to below update stmt
/*--select existing order_line_item to insert into order_line_item_detail*/
                        SELECT order_line_item_id
                          INTO v_lineitemid
                          FROM order_line_item
                         WHERE order_header_id = in_orderheaderid
                           AND site_id = in_siteid
                           AND UPPER (product_name) = UPPER (v_prodname)
                           AND UPPER (fallback_type) = UPPER (v_fallback)
                           AND (row_id = v_rowid OR row_id IS NULL)
                           AND active = pkg_constants.con_activeflag_yes
                           AND quote_site_service_id = v_quote_site_service_id;
                     END;
                  END IF;

                  v_order_line_item_detail_tbl :=
                             in_attributelist (j).o_order_line_item_detail_tbl;
                  v_tattrid.DELETE;
                  v_tconfiglevel.DELETE;
                  v_tattrval.DELETE;
                  v_qty.DELETE;
                  v_rowid1.DELETE;
                  v_classic_element_id_detail.DELETE;
                  v_classic_element_name_detail.DELETE;

                  FOR i IN
                     v_order_line_item_detail_tbl.FIRST .. v_order_line_item_detail_tbl.LAST
                  LOOP
                     v_tattrid (i) := v_order_line_item_detail_tbl (i).o_aid;
                     v_tconfiglevel (i) :=
                              v_order_line_item_detail_tbl (i).o_config_level;
                     v_tattrval (i) :=
                                     v_order_line_item_detail_tbl (i).o_value;
                     v_qty (i) := v_order_line_item_detail_tbl (i).o_qty;
--ARCH added ROWID, MX
                     v_rowid1 (i) := v_order_line_item_detail_tbl (i).o_rowid;
                     v_classic_element_id_detail (i) :=
                        v_order_line_item_detail_tbl (i).o_classic_element_id;
                     v_classic_element_name_detail (i) :=
                        v_order_line_item_detail_tbl (i).o_classic_element_name;
                  END LOOP;

----Modified by SRK on 20-Feb for improving performance
/*--update all previous order_line_item_details for the exisiting*/
/*--order_line_items*/
                  FORALL i IN in_attributelist (j).o_order_line_item_detail_tbl.FIRST .. in_attributelist
                                                                                           (j
                                                                                           ).o_order_line_item_detail_tbl.LAST
                     UPDATE order_line_item_detail OLD
                        SET active = pkg_constants.con_activeflag_no,
                            modified_date = v_curdate,
                            modified_by = in_createdby
                      WHERE order_line_item_id IN (
                               SELECT order_line_item_id
                                 FROM order_line_item
                                WHERE order_header_id = in_orderheaderid
                                  AND site_id = in_siteid
                                  AND UPPER (product_name) =
                                                            UPPER (v_prodname)
                                  AND (row_id = v_rowid OR row_id IS NULL)
                                  AND quote_site_service_id =
                                                       v_quote_site_service_id)
                        AND EXISTS (
                               SELECT 1
                                 FROM attribute_mapping am
                                WHERE UPPER (config_level) =
                                                    UPPER (v_tconfiglevel (i))
                                  AND UPPER (attribute_level) =
                                                     UPPER (in_attributelevel)
                                  AND OLD.attribute_mapping_id =
                                                       am.attribute_mapping_id)
                        AND created_date < v_curdate
                        AND modified_date IS NULL;
/*--insert into order_line-item_detail all the attributes after making*/
/*--existing attributes as inactive*/
                  FORALL i IN v_order_line_item_detail_tbl.FIRST .. v_order_line_item_detail_tbl.LAST
                     INSERT INTO order_line_item_detail
                                 (order_line_item_det_id,
                                  order_line_item_id, attribute_mapping_id,
                                  VALUE,
                                  active,
                                  created_by, created_date, quantity,
                                  row_id,                    -- Arch added ,MX
                                  classic_element_id,
                                  classic_element_name
                                 )
                          VALUES (order_line_item_det_id.NEXTVAL,
                                  v_lineitemid, v_tattrid (i),
                                  v_tattrval (i),
                                  pkg_constants.con_activeflag_yes,
                                  in_createdby, v_curdate, v_qty (i),
                                  v_rowid1 (i),              -- Arch added ,MX
                                  v_classic_element_id_detail (i),
                                  v_classic_element_name_detail (i)
                                 );
                  out_status := pkg_constants.con_status_success;
/*---  COMMIT;*/
               END;
            END LOOP;
         END;
      ELSE
         BEGIN
            out_status := pkg_constants.con_status_failure;
            out_errmsg := 'Invalid Product-Attribute List';
         END;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         out_errmsg := SQLERRM;
/*-- ROLLBACK;*/
   END;

   PROCEDURE sps_lineiteminfo_modify (
      in_quoteid            IN       quote.quote_id%TYPE,
      in_quoteheaderid      IN       quote_header.quote_header_id%TYPE,
      out_details           OUT      sys_refcursor,
      out_bgpprice          OUT      sys_refcursor,
      out_port_ip_routes    OUT      sys_refcursor,
      out_act_cod_service   OUT      sys_refcursor
   )
--out_parent_child OUT sys_refcursor)
   AS
   BEGIN
      OPEN out_details FOR
         SELECT   q.quote_id, qh.quote_header_id, s.site_id,
                  s.NAME AS site_name, qs.active AS "SITE_ACTIVE",
                  lm.product_id, lm.product_name,
                  lm.active AS "LINE_ITEM_ACTIVE",
                  lm.currency AS "LINE_ITEM_CURRENCY", lm.fallback_type,
                  NVL (ld.quantity, 1) AS "LINE_ITEM_QUANTITY", lm.part_type,
                  ld.line_item_detail_id,
                  ld.active AS "LINE_ITEM_DETAILS_ACTIVE",
                  am.attribute_mapping_id, edca.service_element,
                  edca.attribute_type,
                  edca.attribute_value AS edca_attribute_value,
                  edca.interface_field AS attribute_name,
                  NVL (am.edca_attribute, 'N/A') edca_attribute,
                  am.ppsr_attribute_id, am.ppsr_attribute,
                  am.sqe_attribute_id, am.sqe_attribute,
                  am.active AS "ATTRIBUTE_ACTIVE", am.attribute_level,
                  am.sqe_display_text, ld.VALUE AS "ATTRIBUTE_VALUE",
                  pd.currency AS "PRICE_CURRENCY",
                  pd.charge_type AS "Domain", pd.discount,
                  pd.active AS "PRICE_LINE_ITEM_ACTIVE",
                  pl.price_line_description, pl.ppsr_id,
                  pd.net_price AS "LINE_ITEM_DETAIL_PRICE",

--lm.priced "Price_linked_Flag",
                  edca.price_linked "Price_linked_Flag", aq.access_qref,
                  interface_type, framing_details, connector, apop_node,
                  gpop_node, aq.supplier, NULL row_id,
                  cpeq.pri_supplier_name, aq.apop_flag, aq.port_status,
                  cpeq.pri_ssp_bid_ref_no, cpeq.sec_ssp_bid_ref_no,
                  cpeq.pri_status, aq.method, aq.aggregator_quote_line_id,
                  aq.hvpn_access_technology, aq.access_speed,
                  aq.copper_details, aq.copper_service_id "Copper Offer",
                  aq.supplier_product_name, NULL AS "Service_name",
                  'N' AS "AS_IS_FLAG", NULL AS "primary",
                  NULL AS "Secondary", aq.network_type, aq.partner_name,
                  aq.tariff_zone_name, pd.price "LINE_ITEM_DETAIL_CAT_PRICE",
                  ld.action_code, pd.action_code AS "Price_Action_Code"
             FROM quote q INNER JOIN quote_header qh ON q.quote_id =
                                                                  qh.quote_id
                  LEFT OUTER JOIN quote_site qs
                  ON qh.quote_header_id = qs.quote_header_id
                  INNER JOIN site s ON qs.site_id = s.site_id
                  INNER JOIN line_item lm
                  ON s.site_id = lm.site_id
                AND lm.quote_header_id = in_quoteheaderid
                  INNER JOIN line_item_detail ld
                  ON lm.line_item_id = ld.line_item_id
                  LEFT OUTER JOIN attribute_mapping am
                  ON ld.attribute_mapping_id = am.attribute_mapping_id
                  LEFT OUTER JOIN edca_interface_mapping edca
                  ON edca.attribute_mapping_id = am.attribute_mapping_id
                  LEFT OUTER JOIN price_line_item_detail pd
                  ON lm.line_item_id = pd.line_item_id
                  LEFT OUTER JOIN price_line_item pl
                  ON pd.price_line_item_id = pl.price_line_item_id
                  LEFT OUTER JOIN access_qref aq
                  ON (pd.external_qref) = UPPER (aq.access_qref)
                  LEFT OUTER JOIN cpe_qref cpeq
                  ON qs.quote_site_id = cpeq.quote_site_id
            WHERE q.quote_id = in_quoteid
              AND qh.quote_header_id = in_quoteheaderid
              AND (qs.active = pkg_constants.con_activeflag_yes)
              AND (lm.active = pkg_constants.con_activeflag_yes)
              AND (ld.active = pkg_constants.con_activeflag_yes)
              AND (   pd.active = pkg_constants.con_activeflag_yes
                   OR pd.active IS NULL
                  )
         UNION
-- removing duplicate records as per Jiju's request on 07-Jul-2010
---AS is Quote records and pricing
         SELECT   q.quote_id, qh.quote_header_id, s.site_id,
                  s.NAME AS site_name, qs.active AS "SITE_ACTIVE",
                  lm.product_id, lm.product_name,
                  lm.active AS "LINE_ITEM_ACTIVE",
                  lm.currency AS "LINE_ITEM_CURRENCY", lm.fallback_type,
                  NVL (ld.quantity, 1) AS "LINE_ITEM_QUANTITY", lm.part_type,
                  ld.line_item_detail_id,
                  ld.active AS "LINE_ITEM_DETAILS_ACTIVE",
                  am.attribute_mapping_id, edca.service_element,
                  edca.attribute_type,
                  edca.attribute_value AS edca_attribute_value,
                  edca.interface_field AS attribute_name,
                  NVL (am.edca_attribute, 'N/A') edca_attribute,
                  am.ppsr_attribute_id, am.ppsr_attribute,
                  am.sqe_attribute_id, am.sqe_attribute,
                  am.active AS "ATTRIBUTE_ACTIVE", am.attribute_level,
                  am.sqe_display_text, ld.VALUE AS "ATTRIBUTE_VALUE",
                  pd.currency AS "PRICE_CURRENCY", pd.charge_type AS "Domain",
                  pd.discount, pd.active AS "PRICE_LINE_ITEM_ACTIVE",
                  pl.price_line_description, pl.ppsr_id,
                  pd.net_price AS "LINE_ITEM_DETAIL_PRICE",

--lm.priced "Price_linked_Flag",
                  edca.price_linked "Price_linked_Flag", aq.access_qref,
                  interface_type, framing_details, connector, apop_node,
                  gpop_node, aq.supplier, NULL row_id, cpeq.pri_supplier_name,
                  aq.apop_flag, aq.port_status, cpeq.pri_ssp_bid_ref_no,
                  cpeq.sec_ssp_bid_ref_no, cpeq.pri_status, aq.method,
                  aq.aggregator_quote_line_id, aq.hvpn_access_technology,
                  aq.access_speed, aq.copper_details,
                  aq.copper_service_id "Copper Offer",
                  aq.supplier_product_name,
                  qss.service_name AS "Service_name", 'Y' AS "AS_IS_FLAG",
                  qss.PRIMARY, qss.secondary, aq.network_type,
                  aq.partner_name, aq.tariff_zone_name,
                  pd.price "LINE_ITEM_DETAIL_CAT_PRICE", ld.action_code,
                  pd.action_code AS "Price_Action_Code"
             FROM quote q INNER JOIN quote_header qh ON q.quote_id =
                                                                   qh.quote_id
                  LEFT OUTER JOIN quote_site qs
                  ON qh.quote_header_id = qs.quote_header_id
                  INNER JOIN site s ON qs.site_id = s.site_id
                  INNER JOIN quote_line_item_as_is lm
                  ON s.site_id = lm.site_id
                AND lm.quote_header_id = in_quoteheaderid
                  INNER JOIN quote_site_service qss
                  ON qss.quote_header_id = in_quoteheaderid
                AND qss.site_id = lm.site_id
                  INNER JOIN quote_line_item_detail_as_is ld
                  ON lm.line_item_id = ld.line_item_id
                  LEFT OUTER JOIN attribute_mapping am
                  ON ld.attribute_mapping_id = am.attribute_mapping_id
                  LEFT OUTER JOIN edca_interface_mapping edca
                  ON edca.attribute_mapping_id = am.attribute_mapping_id
                  LEFT OUTER JOIN price_line_item_detail_as_is pd
                  ON lm.line_item_id = pd.line_item_id
                  LEFT OUTER JOIN price_line_item pl
                  ON pd.price_line_item_id = pl.price_line_item_id
                  LEFT OUTER JOIN access_qref aq
                  ON (pd.external_qref) = UPPER (aq.access_qref)
                  LEFT OUTER JOIN cpe_qref cpeq
                  ON qs.quote_site_id = cpeq.quote_site_id
            WHERE q.quote_id = in_quoteid
              AND qh.quote_header_id = in_quoteheaderid
              AND (qs.active = pkg_constants.con_activeflag_yes)
              AND (lm.active = pkg_constants.con_activeflag_yes)
              AND (ld.active = pkg_constants.con_activeflag_yes)
              AND (   pd.active = pkg_constants.con_activeflag_yes
                   OR pd.active IS NULL
                  )
         UNION
-- removing duplicate records as per Jiju's request on 07-Jul-2010
--Order related line items and attributes
         SELECT   qo.quote_id, qho.quote_header_id, oli.site_id,
                  so.NAME AS site_name, oli.active AS "SITE_ACTIVE",
                  oli.product_id, oli.product_name,
                  oli.active AS "LINE_ITEM_ACTIVE",
                  oli.currency AS "LINE_ITEM_CURRENCY", oli.fallback_type,
                  NVL (olid.quantity, 1) AS "LINE_ITEM_QUANTITY",
                  '' part_type,
                  olid.order_line_item_det_id line_item_detail_id,
                  olid.active AS "LINE_ITEM_DETAILS_ACTIVE",
                  amo.attribute_mapping_id, edcao.service_element,
                  edcao.attribute_type,
                  edcao.attribute_value AS edca_attribute_value,
                  edcao.interface_field AS attribute_name,
                  NVL (amo.edca_attribute, 'N/A') edca_attribute,
                  amo.ppsr_attribute_id, amo.ppsr_attribute,
                  amo.sqe_attribute_id, amo.sqe_attribute,
                  amo.active AS "ATTRIBUTE_ACTIVE", amo.attribute_level,
                  amo.sqe_display_text, olid.VALUE AS "ATTRIBUTE_VALUE",
                  NULL AS "PRICE_CURRENCY", NULL AS "Domain",
                  NULL AS discount, NULL AS "PRICE_LINE_ITEM_ACTIVE",
                  NULL AS "price_line_description", NULL AS "PPSR_ID",
                  NULL AS "LINE_ITEM_DETAIL_PRICE",

--oli.priced "Price_linked_Flag",
                  edcao.price_linked "Price_linked_Flag",
                  NULL AS "access_qref", NULL AS interface_type,
                  NULL AS framing_details, NULL AS connector,
                  NULL AS apop_node, NULL AS gpop_node, NULL AS supplier,
                  oli.row_id, '' pri_supplier_name, NULL AS apop_flag,
                  NULL AS port_status, NULL AS pri_ssp_bid_ref_no,
                  NULL AS sec_ssp_bid_ref_no, NULL AS pri_status,

--, cpeq.pri_supplier_name
                  NULL AS method, NULL AS aggregator_quote_line_id,
                  NULL AS hvpn_access_technology, NULL AS access_speed,
                  NULL AS copper_details, NULL AS "Copper Offer",
                  NULL AS supplier_product_name, NULL AS "Service_name",
                  'N' AS "AS_IS_FLAG", NULL AS "primary", NULL AS "Secondary",
                  NULL AS network_type, NULL AS partner_name,
                  NULL AS tariff_zone_name,
                  NULL AS "LINE_ITEM_DETAIL_CAT_PRICE", NULL AS action_code,
                  NULL AS "Price_Action_Code"
--, cpeq.pri_supplier_name
         FROM     quote qo LEFT OUTER JOIN quote_header qho
                  ON qo.quote_id = qho.quote_id
                  LEFT OUTER JOIN order_header oh
                  ON qho.quote_header_id = oh.quote_header_id
                  LEFT OUTER JOIN order_line_item oli
                  ON oh.order_header_id = oli.order_header_id
                  INNER JOIN site so ON oli.site_id = so.site_id
                  LEFT OUTER JOIN order_line_item_detail olid
                  ON oli.order_line_item_id = olid.order_line_item_id
                  LEFT OUTER JOIN attribute_mapping amo
                  ON olid.attribute_mapping_id = amo.attribute_mapping_id
                  LEFT OUTER JOIN edca_interface_mapping edcao
                  ON edcao.attribute_mapping_id = amo.attribute_mapping_id
            WHERE qo.quote_id = in_quoteid
              AND qho.quote_header_id = in_quoteheaderid
              AND (oli.active = pkg_constants.con_activeflag_yes)
              AND (olid.active = pkg_constants.con_activeflag_yes)
         UNION
-- removing duplicate records as per Jiju's request on 07-Jul-2010
--for ass_is_order
         SELECT   qo.quote_id, qho.quote_header_id, oli.site_id,
                  so.NAME AS site_name, oli.active AS "SITE_ACTIVE",
                  oli.product_id, oli.product_name,
                  oli.active AS "LINE_ITEM_ACTIVE",
                  oli.currency AS "LINE_ITEM_CURRENCY", oli.fallback_type,
                  NVL (olid.quantity, 1) AS "LINE_ITEM_QUANTITY",
                  '' part_type,
                  olid.order_line_item_det_id line_item_detail_id,
                  olid.active AS "LINE_ITEM_DETAILS_ACTIVE",
                  amo.attribute_mapping_id, edcao.service_element,
                  edcao.attribute_type,
                  edcao.attribute_value AS edca_attribute_value,
                  edcao.interface_field AS attribute_name,
                  NVL (amo.edca_attribute, 'N/A') edca_attribute,
                  amo.ppsr_attribute_id, amo.ppsr_attribute,
                  amo.sqe_attribute_id, amo.sqe_attribute,
                  amo.active AS "ATTRIBUTE_ACTIVE", amo.attribute_level,
                  amo.sqe_display_text, olid.VALUE AS "ATTRIBUTE_VALUE",
                  NULL AS "PRICE_CURRENCY", NULL AS "Domain",
                  NULL AS discount, NULL AS "PRICE_LINE_ITEM_ACTIVE",
                  NULL AS "price_line_description", NULL AS "PPSR_ID",
                  NULL AS "LINE_ITEM_DETAIL_PRICE",

--oli.priced "Price_linked_Flag",
                  edcao.price_linked "Price_linked_Flag",
                  NULL AS "access_qref", NULL AS interface_type,
                  NULL AS framing_details, NULL AS connector,
                  NULL AS apop_node, NULL AS gpop_node, NULL AS supplier,
                  oli.row_id, '' pri_supplier_name, NULL AS apop_flag,
                  NULL AS port_status, NULL AS pri_ssp_bid_ref_no,
                  NULL AS sec_ssp_bid_ref_no, NULL AS pri_status,

--, cpeq.pri_supplier_name
                  NULL AS method, NULL AS aggregator_quote_line_id,
                  NULL AS hvpn_access_technology, NULL AS access_speed,
                  NULL AS copper_details, NULL AS "Copper Offer",
                  NULL AS supplier_product_name,
                  qss.service_name AS "Service_name", 'Y' AS "AS_IS_FLAG",
                  qss.PRIMARY, qss.secondary, NULL AS network_type,
                  NULL AS partner_name, NULL AS tariff_zone_name,
                  NULL AS "LINE_ITEM_DETAIL_CAT_PRICE", NULL AS action_code,
                  NULL AS "Price_Action_Code"
             FROM quote qo LEFT OUTER JOIN quote_header qho
                  ON qo.quote_id = qho.quote_id
                  LEFT OUTER JOIN order_header oh
                  ON qho.quote_header_id = oh.quote_header_id
                  LEFT OUTER JOIN order_line_item_as_is oli
                  ON oh.order_header_id = oli.quote_header_id
                  INNER JOIN site so ON oli.site_id = so.site_id
                  INNER JOIN quote_site_service qss
                  ON qss.quote_header_id = qho.quote_header_id
                AND qss.site_id = oli.site_id
                  LEFT OUTER JOIN order_line_item_detail_as_is olid
                  ON oli.order_line_item_id = olid.order_line_item_id
                  LEFT OUTER JOIN attribute_mapping amo
                  ON olid.attribute_mapping_id = amo.attribute_mapping_id
                  LEFT OUTER JOIN edca_interface_mapping edcao
                  ON edcao.attribute_mapping_id = amo.attribute_mapping_id
            WHERE qo.quote_id = in_quoteid
              AND qho.quote_header_id = in_quoteheaderid
              AND (oli.active = pkg_constants.con_activeflag_yes)
              AND (olid.active = pkg_constants.con_activeflag_yes)
         UNION
-- removing duplicate records as per Jiju's request on 07-Jul-2010
--for product selection attributes
         SELECT   q.quote_id, qh.quote_header_id, 0 site_id, '' AS site_name,
                  '' AS "SITE_ACTIVE", lm.product_id, lm.product_name,
                  lm.active AS "LINE_ITEM_ACTIVE",
                  lm.currency AS "LINE_ITEM_CURRENCY", lm.fallback_type,
                  NVL (ld.quantity, 1) AS "LINE_ITEM_QUANTITY", lm.part_type,
                  ld.line_item_detail_id,
                  ld.active AS "LINE_ITEM_DETAILS_ACTIVE",
                  am.attribute_mapping_id, edca.service_element,
                  edca.attribute_type,
                  edca.attribute_value AS edca_attribute_value,
                  edca.interface_field AS attribute_name,
                  NVL (am.edca_attribute, 'N/A') edca_attribute,
                  am.ppsr_attribute_id, am.ppsr_attribute,
                  am.sqe_attribute_id, am.sqe_attribute,
                  am.active AS "ATTRIBUTE_ACTIVE", am.attribute_level,
                  am.sqe_display_text, ld.VALUE AS "ATTRIBUTE_VALUE",
                  pd.currency AS "PRICE_CURRENCY", pd.charge_type AS "Domain",
                  pd.discount, pd.active AS "PRICE_LINE_ITEM_ACTIVE",
                  pl.price_line_description, pl.ppsr_id,
                  pd.net_price AS "LINE_ITEM_DETAIL_PRICE",

--lm.priced "Price_linked_Flag",
                  edca.price_linked "Price_linked_Flag", aq.access_qref,
                  interface_type, framing_details, connector, apop_node,
                  gpop_node, aq.supplier, NULL row_id, '' pri_supplier_name,
                  aq.apop_flag, aq.port_status, NULL AS pri_ssp_bid_ref_no,
                  NULL AS sec_ssp_bid_ref_no, NULL AS pri_status, aq.method,
                  aq.aggregator_quote_line_id, aq.hvpn_access_technology,
                  aq.access_speed, aq.copper_details,
                  aq.copper_service_id "Copper Offer",
                  aq.supplier_product_name, NULL AS "Service_name",
                  'N' AS "AS_IS_FLAG", NULL AS "primary", NULL AS "Secondary",
                  aq.network_type, aq.partner_name, aq.tariff_zone_name,
                  pd.price "LINE_ITEM_DETAIL_CAT_PRICE",
                  ld.action_code "action_code",
                  pd.action_code "Price_Action_Code"
--, cpeq.pri_supplier_name
         FROM     quote q INNER JOIN quote_header qh ON q.quote_id =
                                                                   qh.quote_id
                  INNER JOIN line_item lm
                  ON lm.quote_header_id = qh.quote_header_id
                  INNER JOIN line_item_detail ld
                  ON lm.line_item_id = ld.line_item_id
                  LEFT OUTER JOIN attribute_mapping am
                  ON ld.attribute_mapping_id = am.attribute_mapping_id
                  LEFT OUTER JOIN edca_interface_mapping edca
                  ON edca.attribute_mapping_id = am.attribute_mapping_id
                  LEFT OUTER JOIN price_line_item_detail pd
                  ON lm.line_item_id = pd.line_item_id
                  LEFT OUTER JOIN price_line_item pl
                  ON pd.price_line_item_id = pl.price_line_item_id
                  LEFT OUTER JOIN access_qref aq
                  ON (pd.external_qref) = UPPER (aq.access_qref)
--                  LEFT OUTER JOIN cpe_qref cpeq
--                  ON qs.quote_site_id = cpeq.quote_site_id
         WHERE    q.quote_id = in_quoteid
              AND qh.quote_header_id = in_quoteheaderid
              AND (lm.active = pkg_constants.con_activeflag_yes)
              AND (ld.active = pkg_constants.con_activeflag_yes)
              AND (   pd.active = pkg_constants.con_activeflag_yes
                   OR pd.active IS NULL
                  )
              AND (   am.config_level = 'Product Selection'
                   OR am.config_level = 'Configuration - Quote Header'
                  )
         UNION                               /*  for As is product selection*/
         SELECT   q.quote_id, qh.quote_header_id, 0 site_id, '' AS site_name,
                  '' AS "SITE_ACTIVE", lm.product_id, lm.product_name,
                  lm.active AS "LINE_ITEM_ACTIVE",
                  lm.currency AS "LINE_ITEM_CURRENCY", lm.fallback_type,
                  NVL (ld.quantity, 1) AS "LINE_ITEM_QUANTITY", lm.part_type,
                  ld.line_item_detail_id,
                  ld.active AS "LINE_ITEM_DETAILS_ACTIVE",
                  am.attribute_mapping_id, edca.service_element,
                  edca.attribute_type,
                  edca.attribute_value AS edca_attribute_value,
                  edca.interface_field AS attribute_name,
                  NVL (am.edca_attribute, 'N/A') edca_attribute,
                  am.ppsr_attribute_id, am.ppsr_attribute,
                  am.sqe_attribute_id, am.sqe_attribute,
                  am.active AS "ATTRIBUTE_ACTIVE", am.attribute_level,
                  am.sqe_display_text, ld.VALUE AS "ATTRIBUTE_VALUE",
                  pd.currency AS "PRICE_CURRENCY", pd.charge_type AS "Domain",
                  pd.discount, pd.active AS "PRICE_LINE_ITEM_ACTIVE",
                  pl.price_line_description, pl.ppsr_id,
                  pd.net_price AS "LINE_ITEM_DETAIL_PRICE",

--lm.priced "Price_linked_Flag",
                  edca.price_linked "Price_linked_Flag", aq.access_qref,
                  interface_type, framing_details, connector, apop_node,
                  gpop_node, aq.supplier, NULL row_id, '' pri_supplier_name,
                  aq.apop_flag, aq.port_status, NULL AS pri_ssp_bid_ref_no,
                  NULL AS sec_ssp_bid_ref_no, NULL AS pri_status, aq.method,
                  aq.aggregator_quote_line_id, aq.hvpn_access_technology,
                  aq.access_speed, aq.copper_details,
                  aq.copper_service_id "Copper Offer",
                  aq.supplier_product_name, NULL AS "Service_name",
                  'Y' AS "AS_IS_FLAG", NULL AS "primary", NULL AS "Secondary",
                  aq.network_type, aq.partner_name, aq.tariff_zone_name,
                  pd.price "LINE_ITEM_DETAIL_CAT_PRICE",
                  ld.action_code "action_code",
                  pd.action_code AS "Price_Action_Code"
--, cpeq.pri_supplier_name
         FROM     quote q INNER JOIN quote_header qh ON q.quote_id =
                                                                   qh.quote_id
                  INNER JOIN quote_line_item_as_is lm
                  ON lm.quote_header_id = qh.quote_header_id
                  INNER JOIN quote_line_item_detail_as_is ld
                  ON lm.line_item_id = ld.line_item_id
                  LEFT OUTER JOIN attribute_mapping am
                  ON ld.attribute_mapping_id = am.attribute_mapping_id
                  LEFT OUTER JOIN edca_interface_mapping edca
                  ON edca.attribute_mapping_id = am.attribute_mapping_id
                  LEFT OUTER JOIN price_line_item_detail pd
                  ON lm.line_item_id = pd.line_item_id
                  LEFT OUTER JOIN price_line_item pl
                  ON pd.price_line_item_id = pl.price_line_item_id
                  LEFT OUTER JOIN access_qref aq
                  ON (pd.external_qref) = UPPER (aq.access_qref)
--                  LEFT OUTER JOIN cpe_qref cpeq
--                  ON qs.quote_site_id = cpeq.quote_site_id
         WHERE    q.quote_id = in_quoteid
              AND qh.quote_header_id = in_quoteheaderid
              AND (lm.active = pkg_constants.con_activeflag_yes)
              AND (ld.active = pkg_constants.con_activeflag_yes)
              AND (   pd.active = pkg_constants.con_activeflag_yes
                   OR pd.active IS NULL
                  )
              AND (   am.config_level = 'Product Selection'
                   OR am.config_level = 'Configuration - Quote Header'
                  )
         ORDER BY site_id,
                  fallback_type,
                  service_element,
                  row_id,
                  part_type,
                  product_id,
                  sqe_display_text,
                  attribute_name,
                  attribute_type;

      OPEN out_bgpprice FOR
         SELECT DISTINCT li.site_id, li.fallback_type,
                         pli.price_line_description "priceDes",
                         plid.net_price, plid.currency, plid.charge_type,
                         plid.external_qref, plid.discount,
                         plid.discount_type, pli.ppsr_id, plid.row_id,
                         plid.price "LINE_ITEM_DETAIL_CAT_PRICE"
                    FROM quote q INNER JOIN quote_header qh
                         ON q.quote_id = qh.quote_id
                         INNER JOIN line_item li
                         ON qh.quote_header_id = li.quote_header_id
                       AND qh.quote_header_id = in_quoteheaderid
                         INNER JOIN line_item_detail lid
                         ON li.line_item_id = lid.line_item_id
                         INNER JOIN attribute_mapping am
                         ON lid.attribute_mapping_id = am.attribute_mapping_id
                         INNER JOIN price_line_item_detail plid
                         ON li.line_item_id = plid.line_item_id
                       AND plid.active = pkg_constants.con_activeflag_yes
                         LEFT OUTER JOIN price_line_item pli
                         ON pli.price_line_item_id = plid.price_line_item_id
                   WHERE q.quote_id = in_quoteid
                     AND qh.quote_header_id = in_quoteheaderid
                     AND li.active = pkg_constants.con_activeflag_yes
                     AND lid.active = pkg_constants.con_activeflag_yes
                     AND (   pli.price_line_description LIKE '%BGP%'
                          OR pli.price_line_description LIKE '%VPN%'
                          OR pli.price_line_description LIKE '%Non Std%'
                          OR pli.price_line_description LIKE
                                                            '%Copper service%'
                         );

      OPEN out_port_ip_routes FOR
         SELECT   pir.port_ip_route_id, pir.order_line_item_id, pir.row_id,
                  oli.site_id, pir.fallback_type, pir.serial_number,
                  pir.subnet_address, pir.subnet_mask,
                  pir.next_hop_ip_address
             FROM port_ip_routes pir, order_line_item oli
            WHERE oli.order_header_id =
                                   (SELECT order_header_id
                                      FROM order_header
                                     WHERE quote_header_id = in_quoteheaderid)
              AND oli.active = 'Y'
              AND pir.order_line_item_id = oli.order_line_item_id
              AND oli.fallback_type = oli.fallback_type
              AND EXISTS (
                     SELECT 1
                       FROM order_line_item_detail
                      WHERE order_line_item_id = oli.order_line_item_id
                        AND VALUE = 'Y'
                        AND active = 'Y')
         ORDER BY oli.site_id, pir.fallback_type, pir.serial_number;

      OPEN out_act_cod_service FOR
         SELECT   config_level, fallback_type,
                  (CASE
                      WHEN SUM (flag) = 0
                         THEN 'NO CHANGE'
                      WHEN MOD (SUM (flag), 1000000) = 0
                         THEN 'ADD'
                      WHEN MOD (SUM (flag), 1000) = 0
                         THEN 'CEASE'
                      ELSE 'UPDATE'
                   END
                  ) action_code
             FROM (SELECT (CASE
                              WHEN con_level_asis IS NULL
                                 THEN con_level_tobe
                              ELSE con_level_asis
                           END
                          ) config_level,
                          (CASE
                              WHEN fallback_type_asis IS NULL
                                 THEN fallback_type_tobe
                              ELSE fallback_type_asis
                           END
                          ) fallback_type,
                          (CASE
                              WHEN action_code_asis = 'CEASE'
                                 THEN 1000
                              WHEN action_code_tobe = 'ADD'
                                 THEN 1000000
                              WHEN action_code_tobe = 'UPDATE'
                                 THEN 1
                              ELSE 0
                           END
                          ) flag
                     FROM (SELECT a.attribute_mapping_id
                                                    attribute_mapping_id_tobe,
                                  b.attribute_mapping_id
                                                    attribute_mapping_id_asis,
                                  a.action_code action_code_tobe,
                                  b.action_code action_code_asis,
                                  a.fallback_type fallback_type_tobe,
                                  b.fallback_type fallback_type_asis,
                                  a.VALUE value_tobe, b.VALUE value_asis,
                                  a.con_level con_level_tobe,
                                  b.con_level con_level_asis,
                                  a.sqe_display_text sqe_display_text_tobe,
                                  b.sqe_display_text sqe_display_text_asis
                             FROM (SELECT am.attribute_mapping_id,
                                          sqe_display_text,
                                          CASE
                                             WHEN sqe_display_text =
                                                    'Router Bundle'
                                                THEN 'CPE level'
                                             WHEN sqe_display_text IN
                                                    ('Access Type',
                                                     'Access Speed',
                                                     'Access Technology',
                                                     'DSL Type',
                                                     'DSL Speed',
                                                     'Port Speed',
                                                     'Access Supplier',
                                                     'GPoP'
                                                    )
                                                THEN 'Access Level'
                                             WHEN sqe_display_text IN
                                                    ('CoS Assignment',
                                                     'CoS Customization Level',
                                                     'EF CIPR',
                                                     'AF1 CIPR',
                                                     'AF2 CIPR',
                                                     'AF3 CIPR',
                                                     'AF4 CIPR'
                                                    )
                                                THEN 'Cos service'
                                             WHEN sqe_display_text IN
                                                        ('Total No. of VPNs')
                                                THEN 'VPN Service'
                                          END con_level,
                                          am.config_level, lid.action_code,
                                          li.quote_header_id,
                                          lid.VALUE AS VALUE,
                                          NVL
                                             (li.fallback_type,
                                              0
                                             ) fallback_type,
                                          NVL (li.product_id, 0) product_id,
                                          NVL (li.part_type, 0) part_type,
                                          NVL (li.non_std_flag,
                                               0
                                              ) non_std_flag,
                                          NVL (li.row_id, 0) row_id
                                     FROM line_item_detail lid,
                                          line_item li,
                                          attribute_mapping am
                                    WHERE li.quote_header_id =
                                                              in_quoteheaderid
                                      AND li.active = 'Y'
                                      AND lid.line_item_id = li.line_item_id
                                      AND lid.active = 'Y'
                                      AND am.attribute_mapping_id =
                                                      lid.attribute_mapping_id
                                      AND am.attribute_level = 'Quote'
                                      AND sqe_display_text IN
                                             ('Access Type',
                                              'Access Speed',
                                              'Access Technology',
                                              'DSL Type',
                                              'DSL Speed',
                                              'Port Speed',
                                              'Access Supplier',
                                              'CoS Assignment',
                                              'CoS Customization Level',
                                              'EF CIPR',
                                              'AF1 CIPR',
                                              'AF2 CIPR',
                                              'AF3 CIPR',
                                              'AF4 CIPR',
                                              'Total No. of VPNs',
                                              'Router Bundle',
                                              'GPoP'
                                             )) a
                                  FULL OUTER JOIN
                                  (SELECT am.attribute_mapping_id,
                                          sqe_display_text,
                                          CASE
                                             WHEN sqe_display_text =
                                                    'Router Bundle'
                                                THEN 'CPE level'
                                             WHEN sqe_display_text IN
                                                    ('Access Type',
                                                     'Access Speed',
                                                     'Access Technology',
                                                     'DSL Type',
                                                     'DSL Speed',
                                                     'Port Speed',
                                                     'Access Supplier',
                                                     'GPoP'
                                                    )
                                                THEN 'Access Level'
                                             WHEN sqe_display_text IN
                                                    ('CoS Assignment',
                                                     'CoS Customization Level',
                                                     'EF CIPR',
                                                     'AF1 CIPR',
                                                     'AF2 CIPR',
                                                     'AF3 CIPR',
                                                     'AF4 CIPR'
                                                    )
                                                THEN 'Cos service'
                                             WHEN sqe_display_text IN
                                                        ('Total No. of VPNs')
                                                THEN 'VPN Service '
                                          END con_level,
                                          am.config_level, lid.action_code,
                                          li.quote_header_id,
                                          lid.VALUE AS VALUE,
                                          NVL
                                             (li.fallback_type,
                                              0
                                             ) fallback_type,
                                          NVL (li.product_id, 0) product_id,
                                          NVL (li.part_type, 0) part_type,
                                          NVL (li.non_std_flag,
                                               0
                                              ) non_std_flag,
                                          NVL (li.row_id, 0) row_id
                                     FROM quote_line_item_detail_as_is lid,
                                          quote_line_item_as_is li,
                                          attribute_mapping am
                                    WHERE li.quote_header_id =
                                                              in_quoteheaderid
                                      AND li.active = 'Y'
                                      AND lid.line_item_id = li.line_item_id
                                      AND lid.active = 'Y'
                                      AND am.attribute_mapping_id =
                                                      lid.attribute_mapping_id
                                      AND am.attribute_level = 'Quote'
                                      AND sqe_display_text IN
                                             ('Access Type',
                                              'Access Speed',
                                              'Access Technology',
                                              'DSL Type',
                                              'DSL Speed',
                                              'Port Speed',
                                              'Access Supplier',
                                              'CoS Assignment',
                                              'CoS Customization Level',
                                              'EF CIPR',
                                              'AF1 CIPR',
                                              'AF2 CIPR',
                                              'AF3 CIPR',
                                              'AF4 CIPR',
                                              'Total No. of VPNs',
                                              'Router Bundle',
                                              'GPoP'
                                             )) b
                                  ON a.quote_header_id = b.quote_header_id
                                AND a.attribute_mapping_id =
                                                        b.attribute_mapping_id
                                AND a.fallback_type = b.fallback_type
                                AND a.product_id = b.product_id
                                AND a.part_type = b.part_type
                                AND a.non_std_flag = b.non_std_flag
                                AND a.row_id = b.row_id
                                AND a.VALUE IS NOT NULL
                                AND b.VALUE IS NOT NULL
                                  ))
         GROUP BY config_level, fallback_type
         ORDER BY config_level, fallback_type;
   END sps_lineiteminfo_modify;

--
------------------Specification-----------------
-- Added new sp to save Order Configuration Details using Objects ,MX
   PROCEDURE spi_order_config_obj (
      in_orderheaderid    IN       order_header.order_header_id%TYPE,
      in_siteid           IN       site.site_id%TYPE,
      in_attributelist    IN       order_line_item_tbl,
      in_attributelevel   IN       attribute_mapping.attribute_level%TYPE,
      in_createdby        IN       order_line_item.created_by%TYPE,
      out_status          OUT      NUMBER,
      out_errmsg          OUT      VARCHAR2,
      in_attrstrlist      IN       CLOB DEFAULT NULL
   )
   AS
      v_prodid                       order_line_item.product_id%TYPE;
      v_prodname                     order_line_item.product_name%TYPE;
      v_fallback                     order_line_item.fallback_type%TYPE;
      v_rowid                        order_line_item.row_id%TYPE;
      v_tattrid                      pkg_order.t_attrmapid;
      v_tconfiglevel                 pkg_order.t_configlevel;
      v_tattrval                     pkg_order.t_value;
      v_qty                          pkg_order.t_qty;
      v_lineitemid                   order_line_item.order_line_item_id%TYPE;
      v_lineitemids                  VARCHAR2 (2000);
      v_attrlevel                    attribute_mapping.attribute_level%TYPE;
      v_configlevel                  attribute_mapping.config_level%TYPE;
      v_rowcount                     NUMBER;
      v_prodattr                     VARCHAR2 (4000);
      v_proddet                      VARCHAR2 (4000);
      v_attrdet                      VARCHAR2 (4000);
      v_attrcnt                      NUMBER;
      v_curdate                      DATE                          := SYSDATE;
      v_order_line_item              order_line_item_tbl
                                                    := order_line_item_tbl
                                                                          ();
      v_order_line_item_detail_tbl   order_line_item_detail_tbl
                                             := order_line_item_detail_tbl
                                                                          ();
      v_scode_bom                    VARCHAR2 (4000);
      in_quoteheaderid               NUMBER;

      TYPE t_rowid IS TABLE OF order_line_item_detail.row_id%TYPE
         INDEX BY BINARY_INTEGER;

      v_rowid1                       t_rowid;
   BEGIN
      IF in_attrstrlist IS NOT NULL
      THEN
         SELECT quote_header_id
           INTO in_quoteheaderid
           FROM order_header
          WHERE order_header_id = in_orderheaderid
            AND UPPER (product_name) = 'BT MOBILEXPRESS';

         pkg_quote.spu_configure_obj (in_quoteheaderid,
                                      in_siteid,
                                      1012437,
                                      in_attrstrlist,
                                      in_createdby,
                                      out_status,
                                      out_errmsg
                                     );
      END IF;

      IF (in_attributelist.EXISTS (1))
      THEN
         BEGIN
            FOR j IN in_attributelist.FIRST .. in_attributelist.LAST
            LOOP
               BEGIN
/*--get the list of products from the input string*/
                  v_prodid := in_attributelist (j).o_pid;
                  v_prodname := in_attributelist (j).o_product_name;
                  v_fallback := in_attributelist (j).o_fallback;
                  v_rowid := in_attributelist (j).o_rowid;

/*--if order_line_item exists*/
                  SELECT COUNT (*)
                    INTO v_rowcount
                    FROM order_line_item
                   WHERE order_header_id = in_orderheaderid
                     AND (   site_id = in_siteid
                          OR (site_id IS NULL AND NVL (in_siteid, -1) = -1)
                         )
                     AND UPPER (product_name) = UPPER (v_prodname)
                     AND UPPER (fallback_type) = UPPER (v_fallback)
                     AND active = pkg_constants.con_activeflag_yes;

                  IF (v_rowcount = 0)
                  THEN
                     BEGIN
                        INSERT INTO order_line_item
                                    (order_line_item_id,
                                     order_header_id, site_id, product_id,
                                     product_name, fallback_type, quantity,
                                     active,
                                     created_by, created_date, row_id
                                    )
                             VALUES (order_line_item_id.NEXTVAL,
                                     in_orderheaderid, in_siteid, v_prodid,
                                     v_prodname, v_fallback, DEFAULT,
                                     pkg_constants.con_activeflag_yes,
                                     in_createdby, v_curdate, v_rowid
                                    )
                          RETURNING order_line_item_id
                               INTO v_lineitemid;
                     END;
                  ELSE
                     BEGIN
                        IF (v_rowid IS NOT NULL)
/*--for VPN Connection*/
                        THEN
                           BEGIN
                              SELECT COUNT (*)
                                INTO v_rowcount
                                FROM order_line_item
                               WHERE order_header_id = in_orderheaderid
                                 AND (   site_id = in_siteid
                                      OR (    site_id IS NULL
                                          AND NVL (in_siteid, -1) = -1
                                         )
                                     )
                                 AND UPPER (product_name) = UPPER (v_prodname)
                                 AND UPPER (fallback_type) =
                                                            UPPER (v_fallback)
                                 AND created_date < v_curdate
                                 AND modified_by IS NULL
                                 AND active = pkg_constants.con_activeflag_yes;

                              IF (v_rowcount > 0)
                              THEN
/*--inactivate all existing VPN line items created previously*/
                                 UPDATE order_line_item
                                    SET active =
                                               pkg_constants.con_activeflag_no,
                                        modified_by = in_createdby,
                                        modified_date = v_curdate
                                  WHERE order_header_id = in_orderheaderid
                                    AND (   site_id = in_siteid
                                         OR (    site_id IS NULL
                                             AND NVL (in_siteid, -1) = -1
                                            )
                                        )
                                    AND product_name = v_prodname
                                    AND created_date < v_curdate
                                    AND modified_by IS NULL;
                              END IF;

/*--insert VPN line items*/
                              INSERT INTO order_line_item
                                          (order_line_item_id,
                                           order_header_id, site_id,
                                           product_id, product_name,
                                           fallback_type, quantity,
                                           active,
                                           created_by, created_date, row_id
                                          )
                                   VALUES (order_line_item_id.NEXTVAL,
                                           in_orderheaderid, in_siteid,
                                           v_prodid, v_prodname,
                                           v_fallback, DEFAULT,
                                           pkg_constants.con_activeflag_yes,
                                           in_createdby, v_curdate, v_rowid
                                          )
                                RETURNING order_line_item_id
                                     INTO v_lineitemid;
                           END;
                        END IF;

/*--select previous order_line_items to update order_line_item_detail*/
                        SELECT pkg_common.to_string
                                  (CAST
                                      (COLLECT (TO_CHAR (order_line_item_id)) AS varchar2_ntt
                                      )
                                  )
                          INTO v_lineitemids
                          FROM order_line_item
                         WHERE order_header_id = in_orderheaderid
                           AND (   site_id = in_siteid
                                OR (site_id IS NULL AND NVL (in_siteid, -1) =
                                                                            -1
                                   )
                               )
                           AND UPPER (product_name) = UPPER (v_prodname)
                           AND (row_id = v_rowid OR row_id IS NULL);

/*--select existing order_line_item to insert into order_line_item_detail*/
                        SELECT order_line_item_id
                          INTO v_lineitemid
                          FROM order_line_item
                         WHERE order_header_id = in_orderheaderid
                           AND (   site_id = in_siteid
                                OR (site_id IS NULL AND NVL (in_siteid, -1) =
                                                                            -1
                                   )
                               )
                           AND UPPER (product_name) = UPPER (v_prodname)
                           AND UPPER (fallback_type) = UPPER (v_fallback)
                           AND (row_id = v_rowid OR row_id IS NULL)
                           AND active = pkg_constants.con_activeflag_yes;

                        IF (INSTR (v_lineitemids, ',', 1) = 0)
                        THEN
                           v_lineitemids := v_lineitemids || ',';
                        END IF;
                     END;
                  END IF;

                  v_order_line_item_detail_tbl :=
                             in_attributelist (j).o_order_line_item_detail_tbl;

                  FOR i IN
                     v_order_line_item_detail_tbl.FIRST .. v_order_line_item_detail_tbl.LAST
                  LOOP
                     v_tattrid (i) := v_order_line_item_detail_tbl (i).o_aid;
                     v_tconfiglevel (i) :=
                              v_order_line_item_detail_tbl (i).o_config_level;
                     v_tattrval (i) :=
                                     v_order_line_item_detail_tbl (i).o_value;
                     v_qty (i) := v_order_line_item_detail_tbl (i).o_qty;
                     v_rowid1 (i) := v_order_line_item_detail_tbl (i).o_rowid;
                  END LOOP;

/*--update all previous order_line_item_details for the exisiting*/
/*--order_line_items*/
                  FORALL i IN in_attributelist (j).o_order_line_item_detail_tbl.FIRST .. in_attributelist
                                                                                           (j
                                                                                           ).o_order_line_item_detail_tbl.LAST
                     UPDATE order_line_item_detail
                        SET active = pkg_constants.con_activeflag_no,
                            modified_date = v_curdate,
                            modified_by = in_createdby
                      WHERE order_line_item_id IN (
                               SELECT TO_NUMBER (COLUMN_VALUE)
                                 FROM TABLE
                                         (CAST
                                             (pkg_common.fn_splitdata
                                                               (v_lineitemids,
                                                                ','
                                                               ) AS varchar2_ntt
                                             )
                                         ))
                        AND attribute_mapping_id IN (
                               SELECT attribute_mapping_id
                                 FROM attribute_mapping
                                WHERE UPPER (config_level) =
                                                    UPPER (v_tconfiglevel (i))
                                  AND UPPER (attribute_level) =
                                                     UPPER (in_attributelevel))
                        AND created_date < v_curdate
                        AND modified_date IS NULL;
/*--insert into order_line-item_detail all the attributes after making*/
/*--existing attributes as inactive*/
                  FORALL i IN v_order_line_item_detail_tbl.FIRST .. v_order_line_item_detail_tbl.LAST
                     INSERT INTO order_line_item_detail
                                 (order_line_item_det_id,
                                  order_line_item_id, attribute_mapping_id,
                                  VALUE,
                                  active,
                                  created_by, created_date, quantity,
                                  row_id                     -- Arch added ,MX
                                 )
                          VALUES (order_line_item_det_id.NEXTVAL,
                                  v_lineitemid, v_tattrid (i),
                                  v_tattrval (i),
                                  pkg_constants.con_activeflag_yes,
                                  in_createdby, v_curdate, v_qty (i),
                                  v_rowid1 (i)               -- Arch added ,MX
                                 );
                  out_status := pkg_constants.con_status_success;
               END;
            END LOOP;
         END;
      ELSE
         BEGIN
            out_status := pkg_constants.con_status_failure;
            out_errmsg := 'Invalid Product-Attribute List';
         END;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         out_errmsg := SQLERRM;
/*-- ROLLBACK;*/
   END;

--Begins, Archana added new sp for MX to update order status on 17/08/2010
   PROCEDURE spu_orderheader (
      in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
      in_orderheaderid   IN       order_header.order_header_id%TYPE,
      in_orderstatus     IN       order_header.order_status%TYPE,
      in_modifiedby      IN       quote_header.modified_by%TYPE,
      out_status         OUT      NUMBER,
      out_errmsg         OUT      VARCHAR2,
      in_product_name    IN       VARCHAR2 DEFAULT NULL
   )
   AS
      v_count   NUMBER;
   BEGIN
      SELECT COUNT (*)
        INTO v_count
        FROM order_header
       WHERE quote_header_id = in_quoteheaderid
         AND order_header_id = in_orderheaderid
         AND product_name = in_product_name;

      IF (v_count = 0)
      THEN
         out_status := pkg_constants.con_status_duplicate;
      ELSE
         BEGIN
            UPDATE order_header
               SET order_status = in_orderstatus,
                   modified_by = in_modifiedby,
                   modified_date = SYSDATE ()
             WHERE quote_header_id = in_quoteheaderid
               AND order_header_id = in_orderheaderid
               AND product_name = in_product_name;

            out_status := pkg_constants.con_status_success;
         END;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         out_errmsg := SQLERRM;
   END spu_orderheader;

--Ends, Archana added new sp for MX to update order status on 17/08/2010
   PROCEDURE spi_as_is_to_order_ivpn2 (
      in_quoteheaderid   IN       order_line_item_as_is.quote_header_id%TYPE,
      in_createdby       IN       order_line_item.created_by%TYPE,
      out_status         OUT      NUMBER,
      out_errmsg         OUT      VARCHAR2
   )
   AS
      v_prodid                       order_line_item_as_is.product_id%TYPE;
      v_prodname                     order_line_item_as_is.product_name%TYPE;
      v_fallback                     order_line_item_as_is.fallback_type%TYPE;
      v_rowid                        order_line_item_as_is.row_id%TYPE;
      v_tattrid                      pkg_order.t_attrmapid;
      v_tconfiglevel                 pkg_order.t_configlevel;
      v_tattrval                     pkg_order.t_value;
      v_qty                          pkg_order.t_qty;
      v_lineitemid                   order_line_item_as_is.order_line_item_id%TYPE;
      v_lineitemids                  VARCHAR2 (2000);
      v_attrlevel                    attribute_mapping.attribute_level%TYPE;
      v_configlevel                  attribute_mapping.config_level%TYPE;
      v_rowcount                     NUMBER;
      v_prodattr                     VARCHAR2 (4000);
      v_proddet                      VARCHAR2 (4000);
      v_attrdet                      VARCHAR2 (4000);
      v_attrcnt                      NUMBER;
      v_curdate                      DATE                          := SYSDATE;
      v_quote_site_service_id        NUMBER (16, 0);
      v_order_header_id              order_header.order_header_id%TYPE;
      v_order_line_item              order_line_item_tbl
                                                    := order_line_item_tbl
                                                                          ();
      v_order_line_item_detail_tbl   order_line_item_detail_tbl
                                             := order_line_item_detail_tbl
                                                                          ();

      CURSOR c1
      IS
         SELECT DISTINCT quote_header_id, site_id, quote_site_service_id
                    FROM order_line_item_as_is
                   WHERE quote_header_id = in_quoteheaderid AND active = 'Y';
   BEGIN
      SELECT order_header_id
        INTO v_order_header_id
        FROM order_header oh
       WHERE oh.quote_header_id = in_quoteheaderid;

      UPDATE order_line_item_detail
         SET active = 'N'
       WHERE order_line_item_id IN (
                    SELECT order_line_item_id
                      FROM order_line_item
                     WHERE order_header_id = v_order_header_id
                           AND active = 'Y');

      UPDATE order_line_item
         SET active = 'N'
       WHERE order_header_id = v_order_header_id AND active = 'Y';

      FOR i IN c1
      LOOP
         IF v_order_line_item IS NOT NULL
         THEN
            v_order_line_item.DELETE;
         END IF;

         SELECT order_line_item_obj
                   (product_id,
                    product_name,
                    fallback_type,
                    '',
                    row_id,
                    '',
                    CAST
                       (MULTISET (SELECT olid.attribute_mapping_id,
                                         am.config_level, olid.VALUE,
                                         olid.quantity, oli.row_id,
                                         olid.classic_element_id,
                                         olid.classic_element_name
                                    FROM order_line_item_detail_as_is olid,
                                         attribute_mapping am
                                   WHERE olid.active = 'Y'
                                     AND olid.order_line_item_id =
                                                        oli.order_line_item_id
                                     AND am.attribute_mapping_id =
                                                     olid.attribute_mapping_id
                                 ) AS order_line_item_detail_tbl
                       ),
                    NULL,
                    scode,
                    classic_element_id,
                    classic_element_name
                   )
         BULK COLLECT INTO v_order_line_item
           FROM order_line_item_as_is oli
          WHERE oli.quote_header_id = i.quote_header_id
            AND (   oli.site_id = i.site_id
                 OR (oli.site_id IS NULL AND NVL (i.site_id, -1) = -1)
                )
            AND (quote_site_service_id = i.quote_site_service_id)
            AND oli.active = 'Y';

         IF v_order_line_item IS NOT NULL
         THEN
            pkg_order.spi_order_config_modify (v_order_header_id,
                                               i.site_id,
                                               i.quote_site_service_id,
                                               v_order_line_item,
                                               'Order',
                                               in_createdby,
                                               out_status,
                                               out_errmsg
                                              );
         END IF;
      END LOOP;

      out_status := pkg_constants.con_status_success;
   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         out_errmsg := SQLERRM;
   END;

   PROCEDURE spi_as_is_to_order_mx (
      in_quoteheaderid   IN       order_line_item_as_is.quote_header_id%TYPE,
      in_createdby       IN       order_line_item.created_by%TYPE,
      out_status         OUT      NUMBER,
      out_errmsg         OUT      VARCHAR2
   )
   AS
      v_prodid                       order_line_item_as_is.product_id%TYPE;
      v_prodname                     order_line_item_as_is.product_name%TYPE;
      v_fallback                     order_line_item_as_is.fallback_type%TYPE;
      v_rowid                        order_line_item_as_is.row_id%TYPE;
      v_tattrid                      pkg_order.t_attrmapid;
      v_tconfiglevel                 pkg_order.t_configlevel;
      v_tattrval                     pkg_order.t_value;
      v_qty                          pkg_order.t_qty;
      v_lineitemid                   order_line_item_as_is.order_line_item_id%TYPE;
      v_lineitemids                  VARCHAR2 (2000);
      v_attrlevel                    attribute_mapping.attribute_level%TYPE;
      v_configlevel                  attribute_mapping.config_level%TYPE;
      v_rowcount                     NUMBER;
      v_prodattr                     VARCHAR2 (4000);
      v_proddet                      VARCHAR2 (4000);
      v_attrdet                      VARCHAR2 (4000);
      v_attrcnt                      NUMBER;
      v_curdate                      DATE                          := SYSDATE;
      v_quote_site_service_id        NUMBER (16, 0);
      v_order_header_id              order_header.order_header_id%TYPE;
      v_order_line_item              order_line_item_tbl
                                                    := order_line_item_tbl
                                                                          ();
      v_order_line_item_detail_tbl   order_line_item_detail_tbl
                                             := order_line_item_detail_tbl
                                                                          ();
      v_productid                    NUMBER;

      CURSOR c1
      IS
         SELECT DISTINCT quote_header_id, site_id, quote_site_service_id
                    FROM order_line_item_as_is
                   WHERE quote_header_id = in_quoteheaderid AND active = 'Y';
   BEGIN
      SELECT order_header_id
        INTO v_order_header_id
        FROM order_header oh
       WHERE oh.quote_header_id = in_quoteheaderid;

      FOR i IN c1
      LOOP
         IF v_order_line_item IS NOT NULL
         THEN
            v_order_line_item.DELETE;
         END IF;

---------Suman Change for MX-r11 of the rowid
--------Suman Removing the Check condition.
         SELECT order_line_item_obj
                   (product_id,
                    product_name,
                    fallback_type,
                    '',
                    row_id,
                    '',
                    CAST
                       (MULTISET
                           (SELECT olid.attribute_mapping_id, am.config_level,
                                   olid.VALUE, olid.quantity, olid.row_id,
                                            -- oli --> olid changed by Sandeep
                                   classic_element_id, classic_element_name
                              FROM order_line_item_detail_as_is olid,
                                   attribute_mapping am
                             WHERE olid.active =
                                              pkg_constants.con_activeflag_yes
                               AND olid.order_line_item_id =
                                                        oli.order_line_item_id
                               AND am.attribute_mapping_id =
                                                     olid.attribute_mapping_id
                           ) AS order_line_item_detail_tbl
                       ),
                    NULL,
                    scode,
                    classic_element_id,
                    classic_element_name
                   )
         BULK COLLECT INTO v_order_line_item
           FROM order_line_item_as_is oli
          WHERE oli.quote_header_id = i.quote_header_id
            AND (   oli.site_id = i.site_id
                 OR (oli.site_id IS NULL AND NVL (i.site_id, -1) = -1)
                )
            AND (quote_site_service_id = i.quote_site_service_id)
            AND active = pkg_constants.con_activeflag_yes
            AND (tobe_modified IS NULL OR tobe_modified = 'Y');
                                                         -- Added on 25/1/2011

         IF v_order_line_item IS NOT NULL
         THEN
            pkg_order.spi_order_config_modify (v_order_header_id,
                                               i.site_id,
                                               i.quote_site_service_id,
                                               v_order_line_item,
                                               'Order',
                                               in_createdby,
                                               out_status,
                                               out_errmsg
                                              );
         END IF;
      END LOOP;

      IF out_status = 1                                  -- Added on 25/1/2011
      THEN
         DELETE FROM order_contact_detail
               WHERE order_header_id = v_order_header_id;

         IF v_order_header_id IS NOT NULL
         THEN
            BEGIN
               SELECT DISTINCT product_id
                          INTO v_productid
                          FROM order_line_item
                         WHERE order_header_id = v_order_header_id
                           AND active = 'Y';
            EXCEPTION
               WHEN NO_DATA_FOUND
               THEN
                  v_productid := NULL;
               WHEN TOO_MANY_ROWS
               THEN
                  v_productid := NULL;
            END;

            INSERT INTO order_contact_detail
                        (order_header_id, contact_id, created_by,
                         created_date, order_contact_detail_id, address_id,
                         bfg_cnr_id, bfg_cnt_id, site_id)
               (SELECT v_order_header_id, contact_id, created_by,
                       created_date, order_contact_detail_id.NEXTVAL,
                       address_id, bfg_cnr_id, bfg_cnt_id, site_id
                  FROM order_contact_detail_as_is
                 WHERE quote_header_id = in_quoteheaderid);
         END IF;
      END IF;
--  out_status := pkg_constants.con_status_success;  -- 25/1/2011
   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         out_errmsg := SQLERRM;
   END;

-----Order Contact MX Project
   PROCEDURE spi_order_contacts (
      in_orderheaderid     IN       order_contact_detail.order_header_id%TYPE,
      in_contact_type1     IN       VARCHAR2,
      in_contact1          IN       VARCHAR2,
      in_contact_type2     IN       VARCHAR2,
      in_contact2          IN       VARCHAR2,
      in_modifiedby        IN       price_line_item_detail.modified_by%TYPE,
      in_site_id           IN       site.site_id%TYPE,
      in_bfg_customer_id   IN       customer.bfg_customer_id%TYPE,
      out_status           OUT      NUMBER,
      out_errmsg           OUT      VARCHAR2
   )
   AS
      v_name                     contact.first_name%TYPE;
      v_job                      contact.job_title%TYPE;
      v_floor                    address.FLOOR%TYPE;
      v_address_line_1           address.address_line1%TYPE;
      v_address_line_2           address.address_line2%TYPE;
      v_city                     address.city%TYPE;
      v_state                    address.state%TYPE;
      v_post                     address.post_zip_code%TYPE;
      v_country                  country.NAME%TYPE;
      v_email                    contact.email%TYPE;
      v_phone                    contact.phone_number%TYPE;
      v_row                      VARCHAR2 (1000);
      v_contactid                contact.contact_id%TYPE;
      v_addressid                address.address_id%TYPE;
      v_country_id               country.country_id%TYPE;
      v_existing_address_id      address.address_id%TYPE;
      v_existing_contact_id      contact.contact_id%TYPE;
      v_mobile                   contact.mobile_number%TYPE;
      v_pager                    contact.pager%TYPE;
      v_fax                      contact.fax%TYPE;
      v_site_name                site.NAME%TYPE;
      v_sur_name                 contact.last_name%TYPE;
      v_site_id                  site.site_id%TYPE;
      v_existing_account_id      address.address_id%TYPE;
      piv_uniqueid               VARCHAR2 (200);
      piv_cnt_position           VARCHAR2 (200);
      piv_cnt_forename           VARCHAR2 (200);
      piv_cnt_surname            VARCHAR2 (200);
      piv_cnt_phone_number       VARCHAR2 (200);
      piv_cnt_fax_number         VARCHAR2 (200);
      piv_cnt_email_address      VARCHAR2 (200);
      piv_cnt_mobile_number      VARCHAR2 (200);
      piv_cnt_pager_number       VARCHAR2 (200);
      piv_username               VARCHAR2 (200);
      pin_cnr_ctp_type           VARCHAR2 (200);
      pin_cnr_sit_id             NUMBER;
      pov_bfg_cnr_id             NUMBER;
      pin_cnr_cus_id             NUMBER;
      pov_bfg_cnt_id             NUMBER;
      lv_error_location          NUMBER                       := 0;
      v_bfg_customer_name        VARCHAR2 (100);
      v_bfg_site_id              NUMBER;
      v_bfg_customer_id          NUMBER;
      v_site_address_id          NUMBER;
      v_sit_country_id           NUMBER;
      v_existing_orderdetailid   NUMBER;
      v_order_cont               NUMBER;
      in_contact_type1_bfg       VARCHAR2 (100);
      in_contact_type2_bfg       VARCHAR2 (100);
      pov_error_code             VARCHAR2 (100);
      pov_error_message          VARCHAR2 (100);
      v_sql_code                 NUMBER;
      v_sql_errm                 VARCHAR2 (150);
      piv_cnt_ein                VARCHAR2 (50);
      v_site_country             VARCHAR2 (150);
      pin_cnr_cnp_id             NUMBER;
      piv_cnt_adr_id             NUMBER;
   BEGIN
      SELECT bfg_customer_name, created_by
        INTO v_bfg_customer_name, piv_cnt_ein
        FROM customer
       WHERE bfg_customer_id = in_bfg_customer_id;

      SELECT TO_NUMBER (in_bfg_customer_id)
        INTO v_bfg_customer_id
        FROM DUAL;

      SELECT bfg_site_id, address_id, bfg_address_id
        INTO v_bfg_site_id, v_site_address_id, piv_cnt_adr_id
        FROM site
       WHERE site_id = in_site_id;

      SELECT DECODE (in_contact_type1,
                     'CUSTOMER SECURITY OFFICER', 'Service Contact'
                                                                 ----Mobile Id
                                                                   ,
                     'WORK PLACE CORPORATE ADMINISTRATOR', 'Service Contact'
                                                                       ----ITW
                                                                            ,
                     '3G ADMINISTRATOR CONTACT', 'Service Contact'      ----3G
                                                                  ,
                     'RADIUS CONTACT', 'Service Contact'
                    )
        INTO in_contact_type1_bfg
        FROM DUAL;

      SELECT DECODE (in_contact_type2,
                     'MOBILE ID DELIVERY ADDRESS', 'Delivery Contact'
                                                                 ----Mobile Id
                                                                     ,
                     'ITW BILLING CONTACT', 'Billing Contact'          ----ITW
                                                             ,
                     '3G FRANCE BILLING CONTACT', 'Delivery Contact'
                    )                                                   ----3G
        INTO in_contact_type2_bfg
        FROM DUAL;

      SELECT a.country_id, c.NAME
        INTO v_sit_country_id, v_site_country
        FROM address a, country c
       WHERE c.country_id = a.country_id AND address_id = v_site_address_id;

      IF TRIM (in_contact1) IS NOT NULL AND TRIM (in_contact_type1) IS NOT NULL
      THEN
         lv_error_location := 200;
         v_row := in_contact1;
         v_name := SUBSTR (v_row, 1, INSTR (v_row, '|', 1, 1) - 1);
         v_row :=
            SUBSTR (v_row,
                    INSTR (v_row, '|', 1, 1) + 1,
                    LENGTH (v_row) - INSTR (v_row, '|', 1, 1)
                   );
         v_job := SUBSTR (v_row, 1, INSTR (v_row, '|', 1, 1) - 1);
         v_row :=
            SUBSTR (v_row,
                    INSTR (v_row, '|', 1, 1) + 1,
                    LENGTH (v_row) - INSTR (v_row, '|', 1, 1)
                   );
         v_floor := SUBSTR (v_row, 1, INSTR (v_row, '|', 1, 1) - 1);
         v_row :=
            SUBSTR (v_row,
                    INSTR (v_row, '|', 1, 1) + 1,
                    LENGTH (v_row) - INSTR (v_row, '|', 1, 1)
                   );
         v_address_line_1 := SUBSTR (v_row, 1, INSTR (v_row, '|', 1, 1) - 1);
         v_row :=
            SUBSTR (v_row,
                    INSTR (v_row, '|', 1, 1) + 1,
                    LENGTH (v_row) - INSTR (v_row, '|', 1, 1)
                   );
         v_address_line_2 := SUBSTR (v_row, 1, INSTR (v_row, '|', 1, 1) - 1);
         v_row :=
            SUBSTR (v_row,
                    INSTR (v_row, '|', 1, 1) + 1,
                    LENGTH (v_row) - INSTR (v_row, '|', 1, 1)
                   );
         v_city := SUBSTR (v_row, 1, INSTR (v_row, '|', 1, 1) - 1);
         v_row :=
            SUBSTR (v_row,
                    INSTR (v_row, '|', 1, 1) + 1,
                    LENGTH (v_row) - INSTR (v_row, '|', 1, 1)
                   );
         v_state := SUBSTR (v_row, 1, INSTR (v_row, '|', 1, 1) - 1);
         v_row :=
            SUBSTR (v_row,
                    INSTR (v_row, '|', 1, 1) + 1,
                    LENGTH (v_row) - INSTR (v_row, '|', 1, 1)
                   );
         v_post := SUBSTR (v_row, 1, INSTR (v_row, '|', 1, 1) - 1);  /* ... */
         v_row :=
            SUBSTR (v_row,
                    INSTR (v_row, '|', 1, 1) + 1,
                    LENGTH (v_row) - INSTR (v_row, '|', 1, 1)
                   );
         v_country := SUBSTR (v_row, 1, INSTR (v_row, '|', 1, 1) - 1);
         v_row :=
            SUBSTR (v_row,
                    INSTR (v_row, '|', 1, 1) + 1,
                    LENGTH (v_row) - INSTR (v_row, '|', 1, 1)
                   );
         v_phone := SUBSTR (v_row, 1, INSTR (v_row, '|', 1, 1) - 1);
         v_row :=
            SUBSTR (v_row,
                    INSTR (v_row, '|', 1, 1) + 1,
                    LENGTH (v_row) - INSTR (v_row, '|', 1, 1)
                   );
         v_mobile := SUBSTR (v_row, 1, INSTR (v_row, '|', 1, 1) - 1);
         v_row :=
            SUBSTR (v_row,
                    INSTR (v_row, '|', 1, 1) + 1,
                    LENGTH (v_row) - INSTR (v_row, '|', 1, 1)
                   );
         v_fax := SUBSTR (v_row, 1, INSTR (v_row, '|', 1, 1) - 1);
         v_row :=
            SUBSTR (v_row,
                    INSTR (v_row, '|', 1, 1) + 1,
                    LENGTH (v_row) - INSTR (v_row, '|', 1, 1)
                   );
         v_email := SUBSTR (v_row, 1, INSTR (v_row, '|', 1, 1) - 1);
         v_email := v_row;
         --checking whether update or insert
         v_existing_address_id := NULL;

         BEGIN
            SELECT a.address_id, a.contact_id,
                   a.order_contact_detail_id
              INTO v_existing_address_id, v_existing_contact_id,
                   v_existing_orderdetailid
              FROM order_contact_detail a, contact c
             WHERE a.order_header_id = in_orderheaderid
               AND c.contact_id = a.contact_id
               AND TRIM (UPPER (c.contact_type)) =
                                               TRIM (UPPER (in_contact_type1));
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN                                                 --then insert
               v_existing_address_id := NULL;
               v_existing_contact_id := NULL;
         END;

         IF v_existing_address_id IS NULL
         THEN
            ----calling  bfg_sp starts
         /*   create_contact_bfg_sp
               (piv_uniqueid               => NULL,
                piv_cnt_position           => NULL,
                piv_cnt_forename           => v_name,
                piv_cnt_surname            => v_row,
                piv_cnt_phone_number       => v_phone,
                piv_cnt_fax_number         => NULL,
                piv_cnt_email_address      => v_email,
                piv_cnt_mobile_number      => v_phone,
                piv_cnt_pager_number       => NULL,
                piv_username               => v_bfg_customer_name,
                pin_cnr_ctp_type           => in_contact_type1_bfg,
                                                          --'Billing Contact',
                pin_cnr_sit_id             => v_bfg_site_id,
                pin_cnr_cus_id             => v_bfg_customer_id,
                piv_adr_post_zip_code      => v_post,                    --NEW
                piv_adr_county             => v_country,                 --NEW
                piv_cnt_ein                => piv_cnt_ein,
                piv_cnt_adr_id             => piv_cnt_adr_id,
                pin_cnr_cnp_id             => pin_cnr_cnp_id,
                pov_bfg_cnt_id             => pov_bfg_cnt_id,
                pov_bfg_cnr_id             => pov_bfg_cnr_id,
                pov_error_code             => pov_error_code,
                pov_error_message          => pov_error_message
               );
				*/
            ----calling  bfg_sp ends
            INSERT INTO contact
                        (contact_id, first_name, email, phone_number,
                         contact_type, created_by, created_date, job_title,
                         fax, mobile_number
                        )
                 VALUES (contact_id.NEXTVAL, v_name, v_email, v_phone,
                         in_contact_type1, in_modifiedby, SYSDATE, v_job,
                         v_fax, v_mobile
                        )
              RETURNING contact_id
                   INTO v_contactid;

            SELECT country_id
              INTO v_country_id
              FROM country
             WHERE UPPER (NAME) = UPPER (v_country);

            SELECT address_id.NEXTVAL
              INTO v_addressid
              FROM DUAL;

            INSERT INTO address
                        (address_id, country_id, address_line2, city,
                         post_zip_code, created_date, address_line1,
                         created_by, FLOOR, state
                        )
                 VALUES (v_addressid, v_country_id, v_address_line_2, v_city,
                         v_post, SYSDATE, v_address_line_1,
                         in_modifiedby, v_floor, v_state
                        );

            INSERT INTO order_contact_detail
                        (order_contact_detail_id, order_header_id,
                         contact_id, created_by, created_date, address_id,
                         bfg_cnt_id, bfg_cnr_id, site_id
                        )
                 VALUES (order_contact_detail_id.NEXTVAL, in_orderheaderid,
                         v_contactid, in_modifiedby, SYSDATE, v_addressid,
                         pov_bfg_cnt_id, pov_bfg_cnr_id, in_site_id
                        );

            --R9
            INSERT INTO site_contact_detail
                        (site_contact_detail_id, site_id,
                         contact_id, created_by, created_date
                        )
                 VALUES (site_contact_detail_id.NEXTVAL, in_site_id,
                         v_contactid, in_modifiedby, SYSDATE
                        );
         ELSE
            /*create_contact_bfg_sp
               (piv_uniqueid               => NULL,
                piv_cnt_position           => NULL,
                piv_cnt_forename           => v_name,
                piv_cnt_surname            => v_row,
                piv_cnt_phone_number       => v_phone,
                piv_cnt_fax_number         => NULL,
                piv_cnt_email_address      => v_email,
                piv_cnt_mobile_number      => v_phone,
                piv_cnt_pager_number       => NULL,
                piv_username               => v_bfg_customer_name,
                pin_cnr_ctp_type           => in_contact_type1_bfg,
                                                          --'Billing Contact',
                pin_cnr_sit_id             => v_bfg_site_id,
                pin_cnr_cus_id             => v_bfg_customer_id,
                piv_adr_post_zip_code      => v_post,                    --NEW
                piv_adr_county             => v_country,                 --NEW
                piv_cnt_ein                => piv_cnt_ein,
                piv_cnt_adr_id             => piv_cnt_adr_id,
                pin_cnr_cnp_id             => pin_cnr_cnp_id,
                pov_bfg_cnt_id             => pov_bfg_cnt_id,
                pov_bfg_cnr_id             => pov_bfg_cnr_id,
                pov_error_code             => pov_error_code,
                pov_error_message          => pov_error_message
               );
						*/
            UPDATE contact
               SET first_name = v_name,
                   email = v_email,
                   phone_number = v_phone,
                   modified_by = in_modifiedby,
                   modified_date = SYSDATE,
                   job_title = v_job,
                   fax = v_fax,
                   mobile_number = v_mobile
             WHERE contact_id = v_existing_contact_id;

            SELECT country_id
              INTO v_country_id
              FROM country
             WHERE UPPER (NAME) = UPPER (v_country);

            UPDATE address
               SET country_id = v_country_id,
                   address_line2 = v_address_line_2,
                   city = v_city,
                   post_zip_code = v_post,
                   modified_date = SYSDATE,
                   address_line1 = v_address_line_1,
                   modified_by = in_modifiedby,
                   FLOOR = v_floor,
                   state = v_state
             WHERE address_id = v_existing_address_id;

            UPDATE order_contact_detail
               SET bfg_cnt_id = pov_bfg_cnt_id,
                   bfg_cnr_id = pov_bfg_cnr_id,
                   site_id = in_site_id
             WHERE order_contact_detail_id = v_existing_orderdetailid;
         END IF;
      END IF;

      IF TRIM (in_contact2) IS NOT NULL AND TRIM (in_contact_type2) IS NOT NULL
      THEN
         v_row := in_contact2;
         v_name := SUBSTR (v_row, 1, INSTR (v_row, '|', 1, 1) - 1);
         v_row :=
            SUBSTR (v_row,
                    INSTR (v_row, '|', 1, 1) + 1,
                    LENGTH (v_row) - INSTR (v_row, '|', 1, 1)
                   );
         /* ... */
         v_job := SUBSTR (v_row, 1, INSTR (v_row, '|', 1, 1) - 1);
         v_row :=
            SUBSTR (v_row,
                    INSTR (v_row, '|', 1, 1) + 1,
                    LENGTH (v_row) - INSTR (v_row, '|', 1, 1)
                   );
         v_floor := SUBSTR (v_row, 1, INSTR (v_row, '|', 1, 1) - 1);
         v_row :=
            SUBSTR (v_row,
                    INSTR (v_row, '|', 1, 1) + 1,
                    LENGTH (v_row) - INSTR (v_row, '|', 1, 1)
                   );
         v_address_line_1 := SUBSTR (v_row, 1, INSTR (v_row, '|', 1, 1) - 1);
         v_row :=
            SUBSTR (v_row,
                    INSTR (v_row, '|', 1, 1) + 1,
                    LENGTH (v_row) - INSTR (v_row, '|', 1, 1)
                   );
         v_address_line_2 := SUBSTR (v_row, 1, INSTR (v_row, '|', 1, 1) - 1);
         v_row :=
            SUBSTR (v_row,
                    INSTR (v_row, '|', 1, 1) + 1,
                    LENGTH (v_row) - INSTR (v_row, '|', 1, 1)
                   );
         v_city := SUBSTR (v_row, 1, INSTR (v_row, '|', 1, 1) - 1);
         v_row :=
            SUBSTR (v_row,
                    INSTR (v_row, '|', 1, 1) + 1,
                    LENGTH (v_row) - INSTR (v_row, '|', 1, 1)
                   );
         v_state := SUBSTR (v_row, 1, INSTR (v_row, '|', 1, 1) - 1);
         v_row :=
            SUBSTR (v_row,
                    INSTR (v_row, '|', 1, 1) + 1,
                    LENGTH (v_row) - INSTR (v_row, '|', 1, 1)
                   );
         v_post := SUBSTR (v_row, 1, INSTR (v_row, '|', 1, 1) - 1);  /* ... */
         v_row :=
            SUBSTR (v_row,
                    INSTR (v_row, '|', 1, 1) + 1,
                    LENGTH (v_row) - INSTR (v_row, '|', 1, 1)
                   );
         v_country := SUBSTR (v_row, 1, INSTR (v_row, '|', 1, 1) - 1);
         /* ... */
         v_row :=
            SUBSTR (v_row,
                    INSTR (v_row, '|', 1, 1) + 1,
                    LENGTH (v_row) - INSTR (v_row, '|', 1, 1)
                   );
         v_phone := SUBSTR (v_row, 1, INSTR (v_row, '|', 1, 1) - 1); /* ... */
         v_row :=
            SUBSTR (v_row,
                    INSTR (v_row, '|', 1, 1) + 1,
                    LENGTH (v_row) - INSTR (v_row, '|', 1, 1)
                   );
         v_mobile := SUBSTR (v_row, 1, INSTR (v_row, '|', 1, 1) - 1);
         v_row :=
            SUBSTR (v_row,
                    INSTR (v_row, '|', 1, 1) + 1,
                    LENGTH (v_row) - INSTR (v_row, '|', 1, 1)
                   );
         v_fax := SUBSTR (v_row, 1, INSTR (v_row, '|', 1, 1) - 1);
         v_row :=
            SUBSTR (v_row,
                    INSTR (v_row, '|', 1, 1) + 1,
                    LENGTH (v_row) - INSTR (v_row, '|', 1, 1)
                   );
         v_email := SUBSTR (v_row, 1, INSTR (v_row, '|', 1, 1) - 1);
         v_email := v_row;
         --checking whether update or insert
         v_existing_address_id := NULL;
         v_existing_contact_id := NULL;

         BEGIN
            SELECT a.address_id, a.contact_id,
                   a.order_contact_detail_id
              INTO v_existing_address_id, v_existing_contact_id,
                   v_existing_orderdetailid
              FROM order_contact_detail a, contact c
             WHERE a.order_header_id = in_orderheaderid
               AND c.contact_id = a.contact_id
               AND TRIM (UPPER (c.contact_type)) =
                                               TRIM (UPPER (in_contact_type2));
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN                                                 --then insert
               v_existing_address_id := NULL;
               v_existing_contact_id := NULL;
         END;

         IF v_existing_address_id IS NULL
         THEN
          /*  create_contact_bfg_sp
               (piv_uniqueid               => NULL,
                piv_cnt_position           => NULL,
                piv_cnt_forename           => v_name,
                piv_cnt_surname            => v_name,
                piv_cnt_phone_number       => v_phone,
                piv_cnt_fax_number         => NULL,
                piv_cnt_email_address      => v_email,
                piv_cnt_mobile_number      => v_phone,
                piv_cnt_pager_number       => NULL,
                piv_username               => v_bfg_customer_name,
                pin_cnr_ctp_type           => in_contact_type2_bfg,
                                                          --'Billing Contact',
                pin_cnr_sit_id             => v_bfg_site_id,
                pin_cnr_cus_id             => v_bfg_customer_id,
                piv_adr_post_zip_code      => v_post,                    --NEW
                piv_adr_county             => v_country,                 --NEW
                piv_cnt_ein                => piv_cnt_ein,
                piv_cnt_adr_id             => piv_cnt_adr_id,
                pin_cnr_cnp_id             => pin_cnr_cnp_id,
                pov_bfg_cnt_id             => pov_bfg_cnt_id,
                pov_bfg_cnr_id             => pov_bfg_cnr_id,
                pov_error_code             => pov_error_code,
                pov_error_message          => pov_error_message
               );
						*/
            INSERT INTO contact
                        (contact_id, first_name, email, phone_number,
                         contact_type, created_by, created_date, job_title,
                         mobile_number, fax
                        )
                 VALUES (contact_id.NEXTVAL, v_name, v_email, v_phone,
                         in_contact_type2, in_modifiedby, SYSDATE, v_job,
                         v_mobile, v_fax
                        )
              RETURNING contact_id
                   INTO v_contactid;

            SELECT country_id
              INTO v_country_id
              FROM country
             WHERE UPPER (NAME) = UPPER (v_country);

            SELECT address_id.NEXTVAL
              INTO v_addressid
              FROM DUAL;

            INSERT INTO address
                        (address_id, country_id, address_line2, city,
                         post_zip_code, created_date, address_line1,
                         created_by, FLOOR, state
                        )
                 VALUES (v_addressid, v_country_id, v_address_line_2, v_city,
                         v_post, SYSDATE, v_address_line_1,
                         in_modifiedby, v_floor, v_state
                        );

            lv_error_location := 370;

            INSERT INTO order_contact_detail
                        (order_contact_detail_id, order_header_id,
                         contact_id, created_by, created_date, address_id,
                         bfg_cnt_id, bfg_cnr_id, site_id
                        )
                 VALUES (order_contact_detail_id.NEXTVAL, in_orderheaderid,
                         v_contactid, in_modifiedby, SYSDATE, v_addressid,
                         pov_bfg_cnt_id, pov_bfg_cnr_id, in_site_id
                        );

            --R9
            INSERT INTO site_contact_detail
                        (site_contact_detail_id, site_id,
                         contact_id, created_by, created_date
                        )
                 VALUES (site_contact_detail_id.NEXTVAL, in_site_id,
                         v_contactid, in_modifiedby, SYSDATE
                        );
         ELSE
            ----calling  bfg_sp starts
            /*create_contact_bfg_sp
               (piv_uniqueid               => NULL,
                piv_cnt_position           => NULL,
                piv_cnt_forename           => v_name,
                piv_cnt_surname            => v_name,
                piv_cnt_phone_number       => v_phone,
                piv_cnt_fax_number         => NULL,
                piv_cnt_email_address      => v_email,
                piv_cnt_mobile_number      => v_phone,
                piv_cnt_pager_number       => NULL,
                piv_username               => v_bfg_customer_name,
                pin_cnr_ctp_type           => in_contact_type2_bfg,
                                                         ---'Billing Contact',
                pin_cnr_sit_id             => v_bfg_site_id,
                pin_cnr_cus_id             => v_bfg_customer_id,
                piv_adr_post_zip_code      => v_post,                    --NEW
                piv_adr_county             => v_country,                 --NEW
                piv_cnt_ein                => piv_cnt_ein,
                piv_cnt_adr_id             => piv_cnt_adr_id,
                pin_cnr_cnp_id             => pin_cnr_cnp_id,
                pov_bfg_cnt_id             => pov_bfg_cnt_id,
                pov_bfg_cnr_id             => pov_bfg_cnr_id,
                pov_error_code             => pov_error_code,
                pov_error_message          => pov_error_message
               );
						*/
            ----calling  bfg_sp ends
            UPDATE contact
               SET first_name = v_name,
                   email = v_email,
                   phone_number = v_phone,
                   modified_by = in_modifiedby,
                   modified_date = SYSDATE,
                   job_title = v_job,
                   fax = v_fax,
                   mobile_number = v_mobile
             WHERE contact_id = v_existing_contact_id;

            SELECT country_id
              INTO v_country_id
              FROM country
             WHERE UPPER (NAME) = UPPER (v_country);

            UPDATE address
               SET country_id = v_country_id,
                   address_line2 = v_address_line_2,
                   city = v_city,
                   post_zip_code = v_post,
                   modified_date = SYSDATE,
                   address_line1 = v_address_line_1,
                   modified_by = in_modifiedby,
                   FLOOR = v_floor,
                   state = v_state
             WHERE address_id = v_existing_address_id;

            UPDATE order_contact_detail
               SET bfg_cnt_id = pov_bfg_cnt_id,
                   bfg_cnr_id = pov_bfg_cnr_id
             WHERE order_contact_detail_id = v_existing_orderdetailid;
         END IF;
      END IF;

      out_status := pkg_constants.con_status_success;
   EXCEPTION
      WHEN NO_DATA_FOUND
      THEN
         out_status := pkg_constants.con_status_failure;
         out_errmsg :=
                 'error at location :' || lv_error_location || ' ' || SQLERRM;
      WHEN DUP_VAL_ON_INDEX
      THEN
         out_status := pkg_constants.con_status_failure;
         out_errmsg :=
                 'error at location :' || lv_error_location || ' ' || SQLERRM;
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         out_errmsg := SUBSTR (SQLERRM, 1, 150);
         v_sql_code := SQLCODE;
         pkg_common.spi_error_log (in_bfg_customer_id,
                                   in_orderheaderid,
                                   in_site_id,
                                   NULL,
                                   NULL,
                                   'SPI_ORDER_CONTACTS',
                                   v_sql_code,
                                   out_errmsg
                                  );
   END;

   PROCEDURE spi_order_conf_obj_r9 (
      in_siteid            IN       site_detials_tab,
      in_attributelevel    IN       VARCHAR2,
      in_createdby         IN       quote_header.created_by%TYPE,
      in_bfg_customer_id   IN       customer.bfg_customer_id%TYPE,
      in_orderheaderid     IN       order_header.order_header_id%TYPE,
      in_order_item        IN       order_line_item_tbl,
      in_inter_conf        IN       VARCHAR2,
      in_contact_role      IN       VARCHAR2,
      out_status           OUT      VARCHAR2,
      out_errmsg           OUT      VARCHAR2
   )
   AS
/******************************************************************************
   NAME:       SQE MX Ordeer Confi.
   PURPOSE:    This SP is used to save the detils for the Order Configuration Detials for
               IPSEC and SSL for MX -R9

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        26/1/2011    Suman          1. Modification of the SP to adding new contact log for BT GLOBAL CPE
   2.0        31/1/2011    Suresh         2. Modification of the SP to put ssl and ipsec logic in one insert contact.
   3.0        13/6/2011    Suman          3. Modification about BT CPE Contact.
	 4.0        25/8/2011    Suman					4. Comment the code for calling the BFG SP
 ******************************************************************************/
      v_site_id                  NUMBER (15);
      v_site_name                VARCHAR2 (255);
      v_site_country             VARCHAR2 (255);
      v_site_city                VARCHAR2 (22);
      v_count_site_id            NUMBER (10);
      v_count_order              NUMBER;
      v_first_name               VARCHAR2 (50);
      v_surname                  VARCHAR2 (50);
      v_job_title                VARCHAR2 (50);
      v_state_province           VARCHAR2 (50);
      v_post_zip_code            VARCHAR2 (255);
      v_phone_number             VARCHAR2 (255);
      v_address_line_1           VARCHAR2 (50);
      v_address_line_2           VARCHAR2 (50);
      v_email                    VARCHAR2 (255);
      v_customerid               NUMBER;
      v_countryid                NUMBER                          := 0;
      site_id                    NUMBER;
      v_order_line_item          order_line_item_tbl:= order_line_item_tbl();
      j_order_line_item          order_line_item_tbl:= order_line_item_tbl();
      j                          NUMBER                          := 0;
      v_mx_bfg_bill_account_id   VARCHAR2 (100);
      v_addressid                address.address_id%TYPE;
      v_contactid                NUMBER;
      v_order_det_count          NUMBER;
      ------contact
      v_bfg_address_id           site.bfg_address_id%TYPE;
      v_bfg_location_id          site.bfg_subloc_id%TYPE;
      v_bfg_contact_id           site.bfg_site_contact_id%TYPE;
      v_existing_contact_id      NUMBER;
      v_existing_address_id      NUMBER;
      v_existing_ocdid_id        NUMBER;
      --Merging bfg sp's for contact_role_id
      piv_uniqueid               VARCHAR2 (200);
      piv_cnt_position           VARCHAR2 (200);
      piv_cnt_forename           VARCHAR2 (200);
      piv_cnt_surname            VARCHAR2 (200);
      piv_cnt_phone_number       VARCHAR2 (200);
      piv_cnt_fax_number         VARCHAR2 (200);
      piv_cnt_email_address      VARCHAR2 (200);
      piv_cnt_mobile_number      VARCHAR2 (200);
      piv_cnt_pager_number       VARCHAR2 (200);
      piv_username               VARCHAR2 (200);
      pin_cnr_ctp_type           VARCHAR2 (200);
      pin_cnr_sit_id             NUMBER;
      pov_bfg_cnr_id             NUMBER;
      pin_cnr_cus_id             NUMBER;
      pov_bfg_cnt_id             NUMBER;
      --pin_cnr_cnp_id             NUMBER;
      pov_error_code             VARCHAR2 (200);
      pov_error_message          VARCHAR2 (200);
      in_bfg_customer_id2        NUMBER;
      v_sql_code                 NUMBER;
      v_sql_errm                 VARCHAR2 (150);
      v_mx_bfg_org_name          VARCHAR2 (1000);
      v_mx_bfg_org_id            VARCHAR2 (1000);
      v_sales_channel            customer.sales_channel%TYPE;
      e_bfg_cont_role_id         EXCEPTION;
      piv_cnt_ein                VARCHAR2 (15);
      v_address_line2            VARCHAR2 (100);
      v_address_line1            VARCHAR2 (100);
      v_city                     VARCHAR2 (100);
      v_state                    VARCHAR2 (100);
      v_post                     VARCHAR2 (100);
      v_addressid2               NUMBER;
      v_errorline                NUMBER;
      piv_cnt_adr_id             NUMBER;
     -- pin_cnr_cnp_id             NUMBER;
   BEGIN
      FOR site_cusr IN in_siteid.FIRST .. in_siteid.LAST
      LOOP
         /*getting Customer_id */
         SELECT DISTINCT q.customer_id
                    INTO v_customerid
                    FROM order_header oh, quote_header qh, quote q
                   WHERE oh.quote_header_id = qh.quote_header_id
                     AND q.quote_id = qh.quote_id
                     AND oh.quote_header_id = qh.quote_header_id
                     AND oh.order_header_id = in_orderheaderid;

         /*getting site_id */
         SELECT DISTINCT site_id
                    INTO v_count_site_id
                    FROM site
                   WHERE bfg_site_id = in_siteid (site_cusr).site_id
                      OR (    TO_NUMBER (TO_CHAR (expedio_site_id)) =
                                 TO_NUMBER
                                    (TRIM
                                        (TO_CHAR (in_siteid (site_cusr).site_id
                                                 )
                                        )
                                    )
                          AND REGEXP_LIKE (expedio_site_id, '^[0-9]')
                         );

         SELECT sales_channel, created_by
           INTO v_sales_channel, piv_cnt_ein
           FROM customer
          WHERE bfg_customer_id = in_bfg_customer_id;

         v_errorline := 101;

         IF (in_siteid (site_cusr).site_id IS NOT NULL)
         THEN
            v_site_id := in_siteid (site_cusr).site_id;
            v_site_name := in_siteid (site_cusr).site_name;
            v_site_country := in_siteid (site_cusr).site_country;
            v_site_city := in_siteid (site_cusr).site_city;
            v_first_name := in_siteid (site_cusr).first_name;
            v_surname := in_siteid (site_cusr).surname;
            v_job_title := in_siteid (site_cusr).job_title;
            v_state_province := in_siteid (site_cusr).state_province;
            v_post_zip_code := in_siteid (site_cusr).post_zip_code;
            v_phone_number := in_siteid (site_cusr).phone_number;
            v_address_line_1 := in_siteid (site_cusr).address_line_1;
            v_address_line_2 := in_siteid (site_cusr).address_line_2;
            v_email := in_siteid (site_cusr).email;
            v_mx_bfg_bill_account_id := in_siteid (site_cusr).o_billing_id;
            v_mx_bfg_org_name := in_siteid (site_cusr).o_org_name;
            v_mx_bfg_org_id := in_siteid (site_cusr).o_org_id;

            --------Checking Condition for intermediate save
            IF UPPER (in_inter_conf) = 'YES'
            THEN
               SELECT country_id
                 INTO v_countryid
                 FROM country
                WHERE UPPER (NAME) =
                                    UPPER (in_siteid (site_cusr).site_country);

               v_errorline := 102;

               SELECT ibes.bfg_address_id, ibes.bfg_location_id,
                      ibec.bfg_contact_id
                 INTO v_bfg_address_id, v_bfg_location_id,
                      v_bfg_contact_id
                 FROM ivpn_bfg_expedio_sites ibes,
                      ivpn_bfg_expedio_contacts ibec
                WHERE (   ibes.bfg_site_id = ibec.bfg_site_id
                       OR ibes.expedio_site_id = ibec.expedio_site_id
                      )
                  AND ibes.bfg_customer_id = in_bfg_customer_id
                  AND ibec.ROLE = pkg_constants.con_cus_mx_bfg_sitprim_cont
                  AND NVL (ibes.bfg_site_id, ibes.expedio_site_id) = v_site_id;

               BEGIN
                  pkg_order.spu_site_ipsec
                                   (in_customerid             => v_customerid,
                                    in_siteid                 => v_count_site_id,
                                    in_buildingno             => NULL,
                                    in_addressline1           => v_address_line_1,
                                    in_city                   => v_site_city,
                                    in_state                  => v_state_province,
                                    in_state_code             => NULL,
                                    in_countryid              => v_countryid,
                                    in_postzipcode            => v_post_zip_code,
                                    in_telephoneareacode      => v_phone_number,
                                    in_county                 => v_state_province,
                                    in_additionalsite         => NULL,
                                    in_bfgsiteid              => v_site_id,
                                    in_bfgsitename            => v_site_name,
                                    in_modifiedby             => in_createdby,
                                    in_orderheaderid          => in_orderheaderid,
                                    out_status                => out_status,
                                    out_errmsg                => out_errmsg,
                                    in_contact_role           => UPPER
                                                                    (in_contact_role
                                                                    )
                                   );
                  v_errorline := 103;
               END;
            END IF;

            IF out_status = 1 OR in_inter_conf = 'NO'
            THEN
               BEGIN
                  v_order_line_item.DELETE;
                  j := 0;

                  FOR i IN in_order_item.FIRST .. in_order_item.LAST
                  LOOP
                     IF in_order_item (i).o_site_id =
                                                in_siteid (site_cusr).site_id
                     THEN
                        j := j + 1;
                        v_order_line_item.EXTEND (1);
                        v_order_line_item (j) := in_order_item (i);
                     END IF;
                  END LOOP;

                  v_errorline := 104;

                  BEGIN
                     pkg_order.spi_order_config_obj
                                     (in_orderheaderid       => in_orderheaderid,
                                      in_siteid              => v_count_site_id,
                                      in_attributelist       => v_order_line_item,
                                      in_attributelevel      => in_attributelevel,
                                      in_createdby           => in_createdby,
                                      out_status             => out_status,
                                      out_errmsg             => out_errmsg
                                     );
                  END;

                  v_errorline := 105;

                  IF UPPER (in_inter_conf) = 'YES' AND out_status = 1
                  THEN
                     SELECT DISTINCT address_id
                                INTO v_addressid
                                FROM site
                               WHERE site_id = v_count_site_id;

                     UPDATE site
                        SET bfg_address_id = v_bfg_address_id,
                            bfg_subloc_id = v_bfg_location_id,
                            mx_bfg_bill_account_id = v_mx_bfg_bill_account_id,
                            bfg_site_contact_id = v_bfg_contact_id
                      WHERE site_id = v_count_site_id;

                     BEGIN
                        UPDATE address
                           SET address_line2 = v_address_line_2
                         WHERE address_id = v_addressid;

                        v_errorline := 106;

                        SELECT sc.contact_id, ocd.order_contact_detail_id
                          INTO v_existing_contact_id, v_existing_ocdid_id
                          FROM site s,
                               site_contact_detail sc,
                               contact c,
                               order_line_item oli,
                               order_contact_detail ocd
                         WHERE oli.order_header_id = in_orderheaderid
                           AND s.site_id = sc.site_id
                           AND sc.contact_id = c.contact_id
                           AND oli.site_id = s.site_id
                           AND ocd.order_header_id = oli.order_header_id
                           AND ocd.contact_id = sc.contact_id
                           AND oli.active = pkg_constants.con_activeflag_yes
                           AND TRIM (UPPER (c.contact_type)) =
                                                       UPPER (in_contact_role)
                           AND oli.product_id =
                                              pkg_constants.con_mx_product_key
                           AND UPPER (oli.product_name) =
                                  DECODE
                                     (UPPER (in_contact_role),
                                      pkg_constants.con_contacttype_primary, pkg_constants.con_prod_bt_mx_sslvpn,
                                      pkg_constants.con_ipsec_contact_sitecontact, pkg_constants.con_prod_bt_mx_ipsec
                                     )
                           AND sc.site_id = v_count_site_id;
                     EXCEPTION
                        WHEN NO_DATA_FOUND
                        THEN
                           v_existing_ocdid_id := NULL;
                           v_existing_contact_id := NULL;
                     END;

                     IF v_existing_contact_id IS NULL
                     THEN
                       /* BEGIN
                           create_contact_bfg_sp
                              (piv_uniqueid               => NULL,
                               piv_cnt_position           => NULL,
                               piv_cnt_forename           => v_first_name,
                               piv_cnt_surname            => v_surname,
                               piv_cnt_phone_number       => v_phone_number,
                               piv_cnt_fax_number         => NULL,
                               piv_cnt_email_address      => v_email,
                               piv_cnt_mobile_number      => v_phone_number,
                               piv_cnt_pager_number       => NULL,
                               piv_username               => in_createdby,
                               pin_cnr_ctp_type           => pkg_constants.con_cus_mx_bfg_service_cont,
                               pin_cnr_sit_id             => in_siteid
                                                                    (site_cusr).site_id,
                                                                  --v_site_id,
                               pin_cnr_cus_id             => in_bfg_customer_id,
                               piv_adr_post_zip_code      => v_post_zip_code,
                                                                         --NEW
                               piv_adr_county             => v_site_country,
                                                                         --NEW
                               piv_cnt_ein                => in_bfg_customer_id,
                                                        --piv_cnt_ein        ,
                               piv_cnt_adr_id             => v_bfg_address_id,
                               pin_cnr_cnp_id             => NULL,
                               pov_bfg_cnt_id             => pov_bfg_cnt_id,
                                                                  ---------Out
                               pov_bfg_cnr_id             => pov_bfg_cnr_id,
                                                                  ---------Out
                               pov_error_code             => pov_error_code,
                                                                  ---------Out
                               pov_error_message          => pov_error_message
                                                                        ---Out
                              );

                           IF (pov_bfg_cnt_id IS NULL
                               OR pov_bfg_cnr_id IS NULL
                              )
                           THEN
                              RAISE e_bfg_cont_role_id;
                           END IF;
                        EXCEPTION
                           WHEN e_bfg_cont_role_id
                           THEN
                              out_status := pkg_constants.con_status_failure;
                              out_errmsg := 'BFG CONTACT SP IS FAILURE';
                              v_sql_code := SQLCODE;
                              pkg_common.spi_error_log
                                                    (pov_bfg_cnt_id,
                                                     v_site_id,
                                                     NULL,
                                                     NULL,
                                                     NULL,
                                                     'create_contact_bfg_sp',
                                                     pov_error_code,
                                                     pov_error_message
                                                    );
                        END;
											*/
                        v_errorline := 107;

                        INSERT INTO address
                                    (address_id, country_id,
                                     city, post_zip_code, created_date,
                                     created_by, county,
                                     state, address_line1,
                                     address_line2
                                    )
                             VALUES (address_id.NEXTVAL, v_countryid,
                                     v_site_city, v_post_zip_code, SYSDATE,
                                     in_createdby, v_countryid,
                                     v_state_province, v_address_line_1,
                                     v_address_line_2
                                    )
                          RETURNING address_id
                               INTO v_addressid2;

                        INSERT INTO contact
                                    (contact_id, first_name,
                                     email, phone_number,
                                     contact_type, created_by,
                                     created_date, job_title, last_name,
                                     orga_name, org_id
                                    )
                             VALUES (contact_id.NEXTVAL, v_first_name,
                                     v_email, v_phone_number,
                                     UPPER (in_contact_role), in_createdby,
                                     SYSDATE, v_job_title, v_surname,
                                     v_mx_bfg_org_name, v_mx_bfg_org_id
                                    )
                          RETURNING contact_id
                               INTO v_contactid;

                        INSERT INTO site_contact_detail
                                    (site_contact_detail_id,
                                     site_id, contact_id,
                                     created_by, created_date
                                    )
                             VALUES (site_contact_detail_id.NEXTVAL,
                                     v_count_site_id, v_contactid,
                                     in_createdby, SYSDATE
                                    );

                        INSERT INTO order_contact_detail
                                    (order_contact_detail_id,
                                     order_header_id, contact_id,
                                     created_by, created_date, bfg_cnt_id,
                                     address_id, bfg_cnr_id,
                                     site_id
                                    )
                             VALUES (order_contact_detail_id.NEXTVAL,
                                     in_orderheaderid, v_contactid,
                                     in_createdby, SYSDATE, pov_bfg_cnt_id,
                                     v_addressid2, pov_bfg_cnr_id,
                                     v_count_site_id
                                    );
                     END IF;

                     v_errorline := 108;

                     IF UPPER (in_contact_role) =
                                   pkg_constants.con_ipsec_contact_sitecontact
                     THEN
                        ---BTGLOBAL CPE DETIALS PROCESS
                        FOR i IN 1 .. 2
                        LOOP
                           BEGIN
                              SELECT sc.contact_id
                                INTO v_existing_contact_id
                                FROM site s,
                                     site_contact_detail sc,
                                     contact c,
                                     order_contact_detail ocd
                               WHERE ocd.order_header_id = in_orderheaderid
                                 AND s.site_id = sc.site_id
                                 AND sc.contact_id = c.contact_id
                                 AND ocd.contact_id = sc.contact_id
                                 AND TRIM (UPPER (c.contact_type)) =
                                        DECODE
                                           (i,
                                            1, pkg_constants.con_cus_mx_ord_org_cont,
                                            2, pkg_constants.con_cus_mx_deli_org_cont
                                           )
                                 AND sc.site_id = v_count_site_id;

                              IF v_existing_contact_id IS NOT NULL
                              THEN
                                 DELETE FROM order_contact_detail
                                       WHERE contact_id =
                                                        v_existing_contact_id;

                                 DELETE FROM site_contact_detail
                                       WHERE contact_id =
                                                        v_existing_contact_id;

                                 DELETE FROM contact
                                       WHERE contact_id =
                                                        v_existing_contact_id;
                              END IF;
                           EXCEPTION
                              WHEN NO_DATA_FOUND
                              THEN
                                 v_existing_contact_id := NULL;
                           END;

                           INSERT INTO contact
                                       (contact_id,
                                        contact_type,
                                        created_by, created_date,
                                        orga_name,
                                        org_id
                                       )
                                VALUES (contact_id.NEXTVAL,
                                        DECODE
                                           (i,
                                            1, pkg_constants.con_cus_mx_ord_org_cont,
                                            2, pkg_constants.con_cus_mx_deli_org_cont
                                           ),
                                        in_createdby, SYSDATE,
                                        DECODE (i,
                                                1, v_sales_channel,
                                                2, v_mx_bfg_org_name
                                               ),
                                        v_mx_bfg_org_id
                                       )
                             RETURNING contact_id
                                  INTO v_contactid;

                           INSERT INTO site_contact_detail
                                       (site_contact_detail_id,
                                        site_id, contact_id,
                                        created_by, created_date
                                       )
                                VALUES (site_contact_detail_id.NEXTVAL,
                                        v_count_site_id, v_contactid,
                                        in_createdby, SYSDATE
                                       );

                           INSERT INTO order_contact_detail
                                       (order_contact_detail_id,
                                        order_header_id, contact_id,
                                        created_by, created_date, address_id,
                                        site_id
                                       )
                                VALUES (order_contact_detail_id.NEXTVAL,
                                        in_orderheaderid, v_contactid,
                                        in_createdby, SYSDATE, v_addressid,
                                        v_count_site_id
                                       );
                        END LOOP;
                     --end ipsec
                     END IF;
                  END IF;
               END;
            END IF;
         END IF;
      END LOOP;

      COMMIT;
   --   out_status := pkg_constants.con_status_success;
   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         out_errmsg := SQLERRM || 'SQE Error Number' || v_errorline;
         v_sql_code := SQLCODE;
         pkg_common.spi_error_log (in_bfg_customer_id,
                                   in_orderheaderid,
                                   NULL,
                                   NULL,
                                   NULL,
                                   'SPI_ORDER_CONF_OBJ_R9',
                                   v_sql_code,
                                   out_errmsg
                                  );
         ROLLBACK;
   END spi_order_conf_obj_r9;

   PROCEDURE spu_site_ipsec (
      in_customerid          IN       customer.customer_id%TYPE,
      in_siteid              IN       site.site_id%TYPE,
      in_buildingno          IN       address.building_number%TYPE,
      in_addressline1        IN       address.address_line1%TYPE,
      in_city                IN       address.city%TYPE,
      in_state               IN       address.state%TYPE,
      in_state_code          IN       address.state_code%TYPE,
      in_countryid           IN       country.country_id%TYPE,
      in_postzipcode         IN       address.post_zip_code%TYPE,
      in_telephoneareacode   IN       site.telephone_area_code%TYPE,
      in_county              IN       address.county%TYPE,
      in_additionalsite      IN       VARCHAR2,                  --for address
      in_bfgsiteid           IN       site.bfg_site_id%TYPE,
      in_bfgsitename         IN       site.bfg_site_name%TYPE,
      in_modifiedby          IN       site.modified_by%TYPE,
      in_orderheaderid       IN       order_header.order_header_id%TYPE,
      out_status             OUT      NUMBER,
      out_errmsg             OUT      VARCHAR2,
      in_contact_role        IN       VARCHAR2 DEFAULT NULL
   )
   AS
      v_addrline2             address.address_line2%TYPE;
      v_rowcount              NUMBER;
      v_addressid             address.address_id%TYPE;
      v_pricontactid          site.primary_contact_id%TYPE;
      v_siteid                site.site_id%TYPE;
      v_fldcnt                NUMBER;
      v_kgiflag               NUMBER                         := 1;
      v_contactcnt            NUMBER;
      v_countryname           country.NAME%TYPE;
      v_sql_code              NUMBER;
      v_ipsec_contact_id      contact.contact_id%TYPE;
      v_ipsec_contact_count   NUMBER;
   BEGIN
      BEGIN
         SELECT COUNT (*)
           INTO v_rowcount
           FROM site
          WHERE site_id = in_siteid AND customer_id = in_customerid;

         IF (v_rowcount = 1)
         THEN
            BEGIN
               SELECT address_id
                 INTO v_addressid
                 FROM site s
                WHERE s.site_id = in_siteid AND customer_id = in_customerid;

               v_pricontactid := NULL;

               IF UPPER (in_contact_role) IN
                     (UPPER (pkg_constants.con_primary_sitecontact),
                      UPPER (pkg_constants.con_ipsec_contact_sitecontact)
                     )
               THEN
                  SELECT COUNT (*)
                    INTO v_contactcnt
                    FROM site_contact_detail sc,
                         contact c,
                         order_contact_detail ocd
                   WHERE ocd.contact_id = c.contact_id
                     AND sc.contact_id = c.contact_id
                     AND sc.site_id = ocd.site_id
                     AND UPPER (c.contact_type) = UPPER (in_contact_role)
                     AND ocd.site_id = in_siteid
                     AND order_header_id = in_orderheaderid;

                  IF (v_contactcnt <> 0)
                  THEN
                     BEGIN
                        SELECT ocd.contact_id, ocd.address_id
                          INTO v_pricontactid, v_addrline2
                          FROM site_contact_detail sc,
                               contact c,
                               order_contact_detail ocd
                         WHERE ocd.contact_id = c.contact_id
                           AND sc.contact_id = c.contact_id
                           AND sc.site_id = ocd.site_id
                           AND UPPER (c.contact_type) =
                                                       UPPER (in_contact_role)
                           AND ocd.site_id = in_siteid
                           AND order_header_id = in_orderheaderid;
                     END;
                  ELSE
                     BEGIN
                        v_pricontactid := NULL;
                     END;
                  END IF;
               END IF;

               DELETE FROM site_contact_detail
                     WHERE contact_id IN (v_pricontactid, v_ipsec_contact_id);

               DELETE FROM order_contact_detail
                     WHERE contact_id IN
                              (v_pricontactid, v_ipsec_contact_id,
                               v_addrline2);

               DELETE FROM contact
                     WHERE contact_id IN (v_pricontactid, v_ipsec_contact_id);

               DELETE FROM address
                     WHERE address_id = v_addrline2;
            END;
         END IF;
      END;

      out_status := pkg_constants.con_status_success;
   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         out_errmsg := SUBSTR (SQLERRM, 1, 150);
         v_sql_code := SQLCODE;
         pkg_common.spi_error_log (NULL,
                                   in_orderheaderid,
                                   in_siteid,
                                   NULL,
                                   'spu_site_ipsec ' || in_contact_role,
                                   'spu_site_ipsec',
                                   v_sql_code,
                                   out_errmsg
                                  );
   END;
END pkg_order;
/


CREATE OR REPLACE PACKAGE BODY PKG_QUOTE
AS
/******************************************************************************
   NAME:       PRODSQE
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0      11/07/2009    Rajkamal        1.Package for QUOTE related  CRUD Operations
   1.1      11/13/2009    Rajkamal        1.Added Bid ,Opportunityid,Sales Rep Name,QuoteName,
                                            ype,status and quote reference number
   1.2     1/16/2010      Tanmayi         1.Modified spi_configuration to check for CPE
   1.3     1/18/2010      Tanmayi         1.Modified spi_configuration to check for change in
                                            bundle and multiple part types
   1.4     05/04/2010     Ghucs           1.Added new parameter in_contractid in spi_quote procedure
                                          2.Created new SP spi_service_configuration
   1.5     08/10/2010     MX              1.Created New SP spi_quote_config_obj
   1.6     08/26/2010     Ghucs           1.Created new SP sps_product_lovs for populating Product
                                            configuration LOVs
                                          2.Created new SP spd_quote_config for deleting Product
                                            configuration
   1.7     11/04/2010     Sandeep Singh   1.Included new Parameter in_contract_id in sps_product_lovs
                                            for GHUCS R9
   1.8     02/14/2011     Sandeep Singh   1.GHUCS AGENT Products restriction for PROVIDE Journey removed in
                                            sps_product_lovs for GHUCS R11
   1.9     24/02/2011     Sandeep Singh   1.Modifications done in sps_product_lovs for GHUCS ORT LBIBO/CBIBO
                                             (new parameter in_cbibo included).
   1.10    2/20/2011      Suman           1)Add new parameter for spi_quote_config_obj
   1.11    27/06/2011     Suman           1.0 Create New to SP for the MX spi_asset_from_bfg_multisite,spi_order_contact_detils_as_is
******************************************************************************/

  FUNCTION site_details_tbl_to_cur(
      in_site_detials_tbl site_detials_tab)
    RETURN site_detials_tab PIPELINED
  IS
  BEGIN
    FOR i IN in_site_detials_tbl.FIRST .. in_site_detials_tbl.LAST
    LOOP
      PIPE ROW (in_site_detials_tbl (i));
    END LOOP;
    RETURN;
  END;


   PROCEDURE sps_quote (
      in_customerid   IN       customer.customer_id%TYPE,
      in_searchby     IN       VARCHAR2,
      in_keyword      IN       VARCHAR2,
      out_quote       OUT      sys_refcursor,
      -- Added in_product_name on 17/12/2010 as part of introducing new table QUOTE_STATUS
      in_product_name  IN       VARCHAR2 DEFAULT NULL
   )
   AS
   BEGIN
      IF (in_keyword IS NULL)
      THEN
         BEGIN
            OPEN out_quote FOR
               SELECT   q.quote_id "quote id", qh.quote_name "quote name",
                        qh.VERSION "quote version", nvl(qs.status,qh.status) "quote status", -- Added on 17/12/2010 as part of using status in quote_status table
                        qh.comments "quote comments"
                   FROM quote q, quote_header qh, quote_status qs
                  WHERE qh.quote_id = q.quote_id
                -- Added on 17/12/2010 as part of using status in quote_status table
            AND qh.quote_header_id = qs.quote_header_id(+)
                    AND qs.product_name(+) = in_product_name
            AND q.customer_id = in_customerid
               ORDER BY q.quote_id;
         END;
      ELSE
         BEGIN
            CASE UPPER (in_searchby)
               WHEN 'QUOTE NAME'
               THEN
                  BEGIN
                     OPEN out_quote FOR
                        SELECT   q.quote_id "quote id",
                                 qh.quote_name "quote name",
                                 qh.VERSION "quote version",
                                 nvl(qs.status,qh.status) "quote status", -- Added on 17/12/2010 as part of using status in quote_status table
                                 qh.comments "quote comments"
                            FROM quote q, quote_header qh,  quote_status qs
                           WHERE qh.quote_name LIKE in_keyword
                             AND qh.quote_id = q.quote_id
                 -- Added on 17/12/2010 as part of using status in quote_status table
                             AND qh.quote_header_id = qs.quote_header_id(+)
                             AND qs.product_name(+) = in_product_name
                 AND q.customer_id = in_customerid
                        ORDER BY q.quote_id;
                  END;
               WHEN 'QUOTE ID'
               THEN
                  BEGIN
                     OPEN out_quote FOR
                        SELECT   q.quote_id "quote id",
                                 qh.quote_name "quote name",
                                 qh.VERSION "quote version",
                                 nvl(qs.status,qh.status) "quote status", -- Added on 17/12/2010 as part of using status in quote_status table
                                 qh.comments "quote comments"
                            FROM quote q, quote_header qh, quote_status qs
                           WHERE q.quote_id LIKE in_keyword
                             AND qh.quote_id = q.quote_id
                 -- Added on 17/12/2010 as part of using status in quote_status table
                             AND qh.quote_header_id = qs.quote_header_id(+)
                             AND qs.product_name(+) = in_product_name
                             AND q.customer_id = in_customerid
                        ORDER BY q.quote_id;
                  END;
               ELSE
                  BEGIN
                     IF (in_searchby IS NULL)
                     THEN
                        OPEN out_quote FOR
                           SELECT   q.quote_id "quote id",
                                    qh.quote_name "quote name",
                                    qh.VERSION "quote version",
                                    nvl(qs.status,qh.status) "quote status", -- Added on 17/12/2010 as part of using status in quote_status table
                                    qh.comments "quote comments"
                               FROM quote q, quote_header qh, quote_status qs
                              WHERE qh.quote_id = q.quote_id
                 -- Added on 17/12/2010 as part of using status in quote_status table
                             AND qh.quote_header_id = qs.quote_header_id(+)
                             AND qs.product_name(+) = in_product_name
                 AND q.customer_id = in_customerid
                           ORDER BY q.quote_id;
                     END IF;
                  END;
            END CASE;
         END;
      END IF;
   END;

   PROCEDURE spi_prodselection (
      in_quoteid       IN       quote.quote_id%TYPE,
      in_productid     IN       product_selection.product_id%TYPE,
      in_prodname      IN       product_selection.product_name%TYPE,
      in_propid        IN       product_selection.proposition_id%TYPE,
      in_propname      IN       product_selection.proposition_name%TYPE,
      in_subpropid     IN       product_selection.sub_proposition_id%TYPE,
      in_subpropname   IN       product_selection.sub_proposition_name%TYPE,
      in_createdby     IN       product_selection.created_by%TYPE,
      out_status       OUT      NUMBER,
      out_errmsg       OUT      VARCHAR2
   )
   AS
      v_count   NUMBER;
   BEGIN
      SELECT COUNT (*)
        INTO v_count
        FROM product_selection
       WHERE quote_id = in_quoteid
         AND proposition_id = in_propid
         AND sub_proposition_id = in_subpropid
         AND product_id = in_productid;

      IF (v_count >= 1)
      THEN
         out_status := pkg_constants.con_status_duplicate;
      --Data already exists
      ELSE
         BEGIN
            INSERT INTO product_selection
                        (product_selection_id, quote_id,
                         proposition_id, sub_proposition_id, product_id,
                         created_date, created_by, proposition_name,
                         sub_proposition_name, product_name,
                         active
                        )
                 VALUES (product_selection_id.NEXTVAL, in_quoteid,
                         in_propid, in_subpropid, in_productid,
                         SYSDATE (), in_createdby, in_propname,
                         in_subpropname, in_prodname,
                         pkg_constants.con_activeflag_yes
                        );

            out_status := pkg_constants.con_status_success;
         END;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         out_errmsg := SQLERRM;
   END;

   PROCEDURE spi_pricelist (
      -- ##### Change for 904 - Multiple Price Book  begin
      --in_pricelistid   IN       quote_price_list.price_list_id%TYPE,
      in_pricelistname   IN       quote_price_list.price_list_name%TYPE,
      -- ##### Change for 904 - Multiple Price Book  end
      in_quotehrdid      IN       quote_price_list.quote_header_id%TYPE,
      in_createdby       IN       quote_price_list.created_by%TYPE,
      out_status         OUT      NUMBER,
      out_errmsg         OUT      VARCHAR2
   )
   AS
      v_count   NUMBER;
   BEGIN
      -- ##### Change for 904 - Multiple Price Book  begin
         /*SELECT COUNT (*)
           INTO v_count
           FROM quote_price_list
          WHERE quote_header_id = in_quotehrdid
                AND price_list_id = in_pricelistid;*/
      SELECT COUNT (*)
        INTO v_count
        FROM quote_price_list
       WHERE quote_header_id = in_quotehrdid
         AND price_list_name = in_pricelistname;

      -- ##### Change for 904 - Multiple Price Book  end
      IF (v_count = 0)
      THEN
         -- ##### Change for 904 - Multiple Price Book  begin
          /*INSERT INTO quote_price_list
                      (quote_price_list_id, quote_header_id,
                       price_list_id, created_by, created_date
                      )
               VALUES (quote_price_list_id.NEXTVAL, in_quotehrdid,
                       in_pricelistid, in_createdby, SYSDATE ()
                      );*/
         INSERT INTO quote_price_list
                     (quote_price_list_id, quote_header_id,
                      price_list_name, created_by, created_date
                     )
              VALUES (quote_price_list_id.NEXTVAL, in_quotehrdid,
                      in_pricelistname, in_createdby, SYSDATE ()
                     );

         -- ##### Change for 904 - Multiple Price Book  end
         out_status := pkg_constants.con_status_success;
      ELSE
         out_status := pkg_constants.con_status_duplicate;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         out_errmsg := SQLERRM;
   END;


   PROCEDURE spi_configuration (
      in_quoteheaderid    IN       quote_header.quote_header_id%TYPE,
      in_siteid           IN       site.site_id%TYPE,
      in_attributelist    IN       CLOB,
      in_attributelevel   IN       attribute_mapping.attribute_level%TYPE,
      in_createdby        IN       line_item.created_by%TYPE,
      out_status          OUT      NUMBER,
      out_errmsg          OUT      VARCHAR2
  )

--Row separator is ~ for products
--attribute separator is ##
--parameters for an attribute separated by ::
AS
   CURSOR c_attributelist
   IS
      SELECT *
        FROM TABLE
                (CAST
                    (pkg_common.fn_splitbulkupload (in_attributelist, '~') AS varchar2_clob
                    )
                );

   i                      NUMBER                                   := 1;
   v_prodid               line_item.product_id%TYPE;
   v_prodname             line_item.product_name%TYPE;
   v_fallback             line_item.fallback_type%TYPE;
   v_parttype             line_item.part_type%TYPE;
   v_tattrid              t_attrmapid;
   v_tconfiglevel         t_configlevel;
   v_tattrval             t_value;
   v_qty                  t_qty;
   v_lineitemid           line_item.line_item_id%TYPE;
   v_lineitemids          VARCHAR2 (8000);
   v_attrlevel            attribute_mapping.attribute_level%TYPE;
   v_configlevel          attribute_mapping.config_level%TYPE;
   v_rowcount             PLS_INTEGER;
   v_prodattr             VARCHAR2 (8000);
   v_proddet              VARCHAR2 (8000);
   v_attrdet              VARCHAR2 (8000);
   v_attrcnt              NUMBER;
   v_curdate              TIMESTAMP;
   v_flag                 CHAR (1)                                 := '1';
   v_existintlineitemid   line_item.line_item_id%TYPE;
   v_non_std_flag         VARCHAR2 (1);
   v_caseflag             CHAR (1);
    v_str_chk                 VARCHAR2 (10);
   v_rowid                   t_rowid;
 v_access_qref        access_qref.access_qref%TYPE;
    v_quote_site_id        quote_site.quote_site_id%TYPE;
    v_cpe_conntype        VARCHAR2(50);

BEGIN
   SELECT SYSDATE
     INTO v_curdate
     FROM DUAL;

   IF (in_attributelist IS NOT NULL)
   THEN
      BEGIN
/* c_attributelist contain Product details and all its attributes.Using cursor loop
 we can cover all products and attributes in one string only*/
         OPEN c_attributelist;

         --Loop therough the products in the input string
         LOOP
            FETCH c_attributelist
             INTO v_prodattr;

            v_lineitemid := NULL;
            v_flag := '1';
            EXIT WHEN c_attributelist%NOTFOUND;
            v_proddet :=
                     SUBSTR (v_prodattr, 1, INSTR (v_prodattr, ';', 1, 1) - 1);
            v_attrdet :=
                        SUBSTR (v_prodattr, INSTR (v_prodattr, ';', 1, 1) + 1);
            v_attrdet := v_attrdet || '##';
            v_attrcnt:= pkg_common.fn_countbulkupload (v_attrdet, '##');
            /*SELECT pkg_common.fn_countbulkupload (v_attrdet, '##')
              INTO v_attrcnt
              FROM DUAL;  Commented this and replaced with above line. done by Jay April 09 2011*/

            IF (v_attrcnt != 0)
            THEN
               BEGIN
                  --get the list of products from the input string
                  v_prodid :=
                     SUBSTR (v_proddet,
                             INSTR (v_proddet, '|||') + 3,
                               (INSTR (v_proddet, '::') - 3
                               )
                             - INSTR (v_proddet, '|||')
                            );
                  v_proddet :=
                          SUBSTR (v_proddet, INSTR (v_proddet, '::', 1, 1) + 2);
                  v_prodname :=
                     SUBSTR (v_proddet,
                             INSTR (v_proddet, '|||') + 3,
                               (INSTR (v_proddet, '::') - 3
                               )
                             - INSTR (v_proddet, '|||')
                            );
                  v_proddet :=
                          SUBSTR (v_proddet, INSTR (v_proddet, '::', 1, 1) + 2);
                  v_fallback :=
                     SUBSTR (v_proddet,
                             INSTR (v_proddet, '|||', 1, 1) + 3,
                               (INSTR (v_proddet, '::', 1, 1) - 1
                               )
                             - (INSTR (v_proddet, '|||', 1, 1) + 2)
                            );
                  v_proddet :=
                          SUBSTR (v_proddet, INSTR (v_proddet, '::', 1, 1) + 2);
                  v_parttype :=
                     SUBSTR (v_proddet,
                             INSTR (v_proddet, '|||', 1, 1) + 3,
                               (INSTR (v_proddet, '::', 1, 1) - 1
                               )
                             - (INSTR (v_proddet, '|||', 1, 1) + 2)
                            );
                  v_proddet :=
                          SUBSTR (v_proddet, INSTR (v_proddet, '::', 1, 1) + 2);
                  v_non_std_flag :=
                         SUBSTR (v_proddet, INSTR (v_proddet, '|||', 1, 1) + 3);

                  --validation if fallback is null
                  IF (v_fallback IS NULL)
                  THEN
                     BEGIN
                        v_fallback := 'Primary';
                     END;
                  END IF;

                  --validation for parttype incase of CPE
                  IF (UPPER (v_prodname) LIKE '%CPE%')
                  THEN
                     BEGIN
                        IF (v_parttype IS NULL)
                        THEN
                           BEGIN
                              out_status := pkg_constants.con_status_failure;
                              out_errmsg :=
                                           'Part Type cannot be null for CPE';
                              v_flag := '0';
                           END;

                        END IF;
                     END;
                  END IF;

                  IF (v_flag = '1')
                  THEN
                     BEGIN
                        -- Check if record exists for the current product in line item
                        SELECT COUNT (*)
                          INTO v_rowcount
                          FROM line_item
                         WHERE quote_header_id = in_quoteheaderid
                           AND (   site_id = in_siteid
                                OR (site_id IS NULL AND NVL (in_siteid, 0) = 0
                                   )
                               )
                           AND UPPER (product_name) = UPPER (v_prodname)
                           AND UPPER (fallback_type) = UPPER (v_fallback)
                           AND active = pkg_constants.con_activeflag_yes;

                        --If record does not exist, create a  line item
                        IF (v_rowcount = 0)
                        THEN
                           BEGIN
                              INSERT INTO line_item
                                          (line_item_id,
                                           quote_header_id, site_id,
                                           product_id, product_name,
                                           fallback_type, part_type,
                                           quantity,
                                           active,
                                           --non_std_flag,
                                           created_by, created_date
                                          )
                                   VALUES (line_item_id.NEXTVAL,
                                           in_quoteheaderid, in_siteid,
                                           v_prodid, v_prodname,
                                           v_fallback, v_parttype,
                                           DEFAULT,
                                           pkg_constants.con_activeflag_yes,
                                           -- v_non_std_flag,
                                           in_createdby, v_curdate
                                          )
                                RETURNING line_item_id
                                     INTO v_lineitemid;
                           END;
                        ELSE
                           BEGIN
                              --Logic to incorporate CPE parts Insert/ Update
                              IF (v_parttype IS NOT NULL)
                              THEN
                                 BEGIN
                                    -- To update line_item for part type other than Bundle
                                    IF (UPPER (v_parttype) <> 'BUNDLE')
                                    THEN
                                       BEGIN
                                          --if it is not bundle, update all previous records
                                          -- and insert new record
                                          UPDATE line_item
                                             SET active =
                                                    pkg_constants.con_activeflag_no,
                                                 modified_date = v_curdate
                                           WHERE (   part_type IS NOT NULL
                                                  OR part_type <> ''
                                                 )
                                             AND quote_header_id =
                                                              in_quoteheaderid
                                             AND (   site_id = in_siteid
                                                  OR (    site_id IS NULL
                                                      AND NVL (in_siteid, 0) =
                                                                             0
                                                     )
                                                 )
                                             AND product_name = v_prodname
                                             AND created_date < v_curdate
                                             AND UPPER (fallback_type) =
                                                            UPPER (v_fallback)
                                             AND UPPER (part_type) =
                                                     UPPER (TRIM (v_parttype))
                                             AND modified_date IS NULL;

                                          INSERT INTO line_item
                                                      (line_item_id,
                                                       quote_header_id,
                                                       site_id, product_id,
                                                       product_name,
                                                       fallback_type,
                                                       part_type, quantity,
                                                       active,
                                                       --  non_std_flag,
                                                       created_by,
                                                       created_date
                                                      )
                                               VALUES (line_item_id.NEXTVAL,
                                                       in_quoteheaderid,
                                                       in_siteid, v_prodid,
                                                       v_prodname,
                                                       v_fallback,
                                                       v_parttype, DEFAULT,
                                                       pkg_constants.con_activeflag_yes,
                                                       --    v_non_std_flag,
                                                       in_createdby,
                                                       v_curdate
                                                      )
                                            RETURNING line_item_id
                                                 INTO v_lineitemid;
                                       END;
                                    ELSE
                                       BEGIN
                                          --For a bundle, check if it is existing
                                          SELECT COUNT (*)
                                            INTO v_rowcount
                                            FROM line_item
                                           WHERE quote_header_id =
                                                              in_quoteheaderid
                                             AND (   site_id = in_siteid
                                                  OR (    site_id IS NULL
                                                      AND NVL (in_siteid, 0) =
                                                                             0
                                                     )
                                                 )
                                             AND product_name = v_prodname
                                             AND active =
                                                    pkg_constants.con_activeflag_yes
                                             AND UPPER (fallback_type) =
                                                            UPPER (v_fallback)
                                             AND created_date < v_curdate
                                             AND product_id <> v_prodid
                                             AND modified_date IS NULL;

                                          IF (v_rowcount > 0)
                                          THEN
                                             BEGIN
                                                --A bundle exists with different product id, so soft delete and
                                                --then insert a new line item
                                                UPDATE line_item
                                                   SET active =
                                                          pkg_constants.con_activeflag_no,
                                                       modified_date =
                                                                     v_curdate
                                                 WHERE UPPER (part_type) =
                                                                      'BUNDLE'
                                                   AND quote_header_id =
                                                              in_quoteheaderid
                                                   AND (   site_id = in_siteid
                                                        OR (    site_id IS NULL
                                                            AND NVL
                                                                   (in_siteid,
                                                                    0
                                                                   ) = 0
                                                           )
                                                       )
                                                   AND product_name =
                                                                    v_prodname
                                                   AND created_date <
                                                                     v_curdate
                                                   AND UPPER (fallback_type) =
                                                            UPPER (v_fallback)
                                                   AND product_id <> v_prodid
                                                   --     AND NVL(non_std_flag,-1) = NVL(v_non_std_flag,-1)
                                                   AND modified_date IS NULL;

                                                --previous bundle with different product id
                                                -- has been to inactive. for same product id, check
                                                --if bundle is present
                                                SELECT COUNT (*)
                                                  INTO v_rowcount
                                                  FROM line_item
                                                 WHERE quote_header_id =
                                                              in_quoteheaderid
                                                   AND (   site_id = in_siteid
                                                        OR (    site_id IS NULL
                                                            AND NVL
                                                                   (in_siteid,
                                                                    0
                                                                   ) = 0
                                                           )
                                                       )
                                                   AND product_name =
                                                                    v_prodname
                                                   AND active =
                                                          pkg_constants.con_activeflag_yes
                                                   AND UPPER (fallback_type) =
                                                            UPPER (v_fallback)
                                                   -- AND NVL(non_std_flag,-1) = NVL(v_non_std_flag,-1)
                                                   AND UPPER (part_type) =
                                                            UPPER (v_parttype)
                                                   --AND created_date < v_curdate
                                                   --AND product_id <> v_prodid
                                                   AND modified_date IS NULL;

                                                --if not present, insert new record
                                                --else select existing line item
                                                IF (v_rowcount = 0)
                                                THEN
                                                   INSERT INTO line_item
                                                               (line_item_id,
                                                                quote_header_id,
                                                                site_id,
                                                                product_id,
                                                                product_name,
                                                                fallback_type,
                                                                part_type,
                                                                quantity,
                                                                active,
                                                                -- non_std_flag,
                                                                created_by,
                                                                created_date
                                                               )
                                                        VALUES (line_item_id.NEXTVAL,
                                                                in_quoteheaderid,
                                                                in_siteid,
                                                                v_prodid,
                                                                v_prodname,
                                                                v_fallback,
                                                                v_parttype,
                                                                DEFAULT,
                                                                pkg_constants.con_activeflag_yes,
                                                                -- v_non_std_flag,
                                                                in_createdby,
                                                                v_curdate
                                                               )
                                                     RETURNING line_item_id
                                                          INTO v_lineitemid;
                                                ELSE
                                                   --select existing line item
                                                   ---DEBUG Information
                                                   BEGIN
                                                   SELECT line_item_id
                                                     INTO v_lineitemid
                                                     FROM line_item
                                                    WHERE quote_header_id =
                                                              in_quoteheaderid
                                                      AND (   site_id =
                                                                     in_siteid
                                                           OR (    site_id IS NULL
                                                               AND NVL
                                                                      (in_siteid,
                                                                       0
                                                                      ) = 0
                                                              )
                                                          )
                                                      AND product_name =
                                                                    v_prodname
                                                      AND active =
                                                             pkg_constants.con_activeflag_yes
                                                      AND UPPER (fallback_type) =
                                                             UPPER (v_fallback)
                                                      AND UPPER (part_type) =
                                                             UPPER (v_parttype)
                                                      AND modified_date IS NULL;
                                                  EXCEPTION WHEN NO_DATA_FOUND THEN
                                                  out_status := pkg_constants.con_status_failure;
                                                  out_errmsg :=sqlerrm||'EXP 2 in_quoteheaderid'||in_quoteheaderid||'in_siteid'||in_siteid||'v_prodname'||v_prodname||'v_fallback'||v_fallback||'v_parttype'||v_parttype;
                                                  return;
                                                  WHEN TOO_MANY_ROWS THEN
                                                  out_status := pkg_constants.con_status_failure;
                                                  out_errmsg :=sqlerrm||'EXP 2 in_quoteheaderid'||in_quoteheaderid||'in_siteid'||in_siteid||'v_prodname'||v_prodname||'v_fallback'||v_fallback||'v_parttype'||v_parttype;
                                                  RETURN;
                                                  END;

                                                END IF;
                                             END;
                                          ELSE
                                             BEGIN
                                                --added for no_data_found error starts
                                                            --previous bundle saved also has same product id
                                                SELECT line_item_id
                                                  INTO v_lineitemid
                                                  FROM line_item
                                                 WHERE quote_header_id =
                                                              in_quoteheaderid
                                                   AND (   site_id = in_siteid
                                                        OR (    site_id IS NULL
                                                            AND NVL
                                                                   (in_siteid,
                                                                    0
                                                                   ) = 0
                                                           )
                                                       )
                                                   AND UPPER (product_name) =
                                                            UPPER (v_prodname)
                                                   AND UPPER (fallback_type) =
                                                            UPPER (v_fallback)
                                                   AND active =
                                                          pkg_constants.con_activeflag_yes
                                                   AND product_id = v_prodid;
                                             EXCEPTION
                                                WHEN NO_DATA_FOUND
                                                THEN
                                                BEGIN
                                                   SELECT line_item_id
                                                     INTO v_lineitemid
                                                     FROM line_item
                                                    WHERE quote_header_id =
                                                              in_quoteheaderid
                                                      AND (   site_id =
                                                                     in_siteid
                                                           OR (    site_id IS NULL
                                                               AND NVL
                                                                      (in_siteid,
                                                                       0
                                                                      ) = 0
                                                              )
                                                          )
                                                      AND UPPER (product_name) =
                                                             UPPER (v_prodname)
                                                      AND UPPER (fallback_type) =
                                                             UPPER (v_fallback)
                                                      AND active =
                                                             pkg_constants.con_activeflag_yes
                                                      AND EXISTS (
                                                             SELECT 1
                                                               FROM line_item
                                                              WHERE quote_header_id =
                                                                       in_quoteheaderid
                                                                AND (   site_id =
                                                                           in_siteid
                                                                     OR (    site_id IS NULL
                                                                         AND NVL
                                                                                (in_siteid,
                                                                                 0
                                                                                ) =
                                                                                0
                                                                        )
                                                                    )
                                                                AND UPPER
                                                                       (product_name
                                                                       ) =
                                                                       UPPER
                                                                          (v_prodname
                                                                          )
                                                                AND UPPER
                                                                       (fallback_type
                                                                       ) =
                                                                       UPPER
                                                                          (v_fallback
                                                                          )
                                                                AND active =
                                                                       pkg_constants.con_activeflag_yes
                                                                AND UPPER
                                                                       (part_type
                                                                       ) =
                                                                       UPPER
                                                                          (TRIM
                                                                              (v_parttype
                                                                              )
                                                                          ));
                                                  EXCEPTION WHEN NO_DATA_FOUND THEN
                                                  out_status := pkg_constants.con_status_failure;
                                                  out_errmsg :=sqlerrm||'EXP 3 in_quoteheaderid'||in_quoteheaderid||'in_siteid'||in_siteid||'v_prodname'||v_prodname||'v_fallback'||v_fallback||'v_parttype'||v_parttype;
                                                  return;
                                                  WHEN TOO_MANY_ROWS THEN
                                                  out_status := pkg_constants.con_status_failure;
                                                  out_errmsg :=sqlerrm||'EXP 3 in_quoteheaderid'||in_quoteheaderid||'in_siteid'||in_siteid||'v_prodname'||v_prodname||'v_fallback'||v_fallback||'v_parttype'||v_parttype;
                                                  RETURN;
                                                  END;
                                             END;
                                          --added for no_data_found error ends
                                          END IF;
                                       END;
                                    END IF;
                                 END;
                              ELSE
                                 BEGIN
                                    --for non - BT CPE products
                                    SELECT line_item_id
                                      INTO v_lineitemid
                                      FROM line_item
                                     WHERE quote_header_id = in_quoteheaderid
                                       AND (   site_id = in_siteid
                                            OR (    site_id IS NULL
                                                AND NVL (in_siteid, 0) = 0
                                               )
                                           )
                                       AND UPPER (product_name) =
                                                            UPPER (v_prodname)
                                       AND UPPER (fallback_type) =
                                                            UPPER (v_fallback)
                                       AND active =
                                              pkg_constants.con_activeflag_yes
                                       AND product_id = v_prodid;
                                       EXCEPTION WHEN NO_DATA_FOUND THEN
                                                  out_status := pkg_constants.con_status_failure;
                                                  out_errmsg :=sqlerrm||'EXP 4 in_quoteheaderid'||in_quoteheaderid||'in_siteid'||in_siteid||'v_prodname'||v_prodname||'v_fallback'||v_fallback||'v_prodid'||v_prodid;
                                                  return;
                                                  WHEN TOO_MANY_ROWS THEN
                                                  out_status := pkg_constants.con_status_failure;
                                                  out_errmsg :=sqlerrm||'EXP 4 in_quoteheaderid'||in_quoteheaderid||'in_siteid'||in_siteid||'v_prodname'||v_prodname||'v_fallback'||v_fallback||'v_prodid'||v_prodid;
                                                  RETURN;

                                 END;
                              END IF;

                           -----Start Moved to below update stmt to get inactive line item ids
                           /* SELECT pkg_common.to_string
                                       (CAST
                                           (COLLECT (TO_CHAR (line_item_id)
                                                    ) AS varchar2_ntt
                                           )
                                       )
                               INTO v_lineitemids
                               FROM line_item
                              WHERE quote_header_id = in_quoteheaderid
                                AND (   site_id = in_siteid
                                     OR (    site_id IS NULL
                                         AND NVL (in_siteid, 0) = 0
                                        )
                                    )
                                AND UPPER (product_name) =
                                                        UPPER (v_prodname)
                                AND UPPER (fallback_type) =
                                                        UPPER (v_fallback)
                                AND active =
                                       CASE
                                       WHEN (   (    v_parttype IS NULL
                                                 AND modified_date IS NULL
                                                )
                                             OR (    v_parttype = ''
                                                 AND modified_date IS NULL
                                                )
                                             OR (    UPPER (v_parttype) =
                                                                  'BUNDLE'
                                                 AND product_id = v_prodid
                                                 AND modified_date IS NULL
                                                )
                                            )
                                             THEN pkg_constants.con_activeflag_yes
                                          ELSE pkg_constants.con_activeflag_no
                                       END;

                           IF (INSTR (v_lineitemids, ',', 1) = 0)
                           THEN
                              v_lineitemids := v_lineitemids || ',';
                           END IF;
                                  */      -----End Moved to below update stmt

                           END;
                        END IF;

                        --get the individual parameters from the input string
                        FOR i IN 1 .. v_attrcnt
                        LOOP

                           v_tattrid (i) :=
                              SUBSTR (v_attrdet,
                                      INSTR (v_attrdet, '|||') + 3,
                                        (INSTR (v_attrdet, '::') - 3
                                        )
                                      - INSTR (v_attrdet, '|||')
                                     );

                           v_attrdet :=
                              SUBSTR (v_attrdet,
                                      INSTR (v_attrdet, '::', 1, 1) + 2
                                     );
                           v_tconfiglevel (i) :=
                              SUBSTR (v_attrdet,
                                      INSTR (v_attrdet, '|||') + 3,
                                        (INSTR (v_attrdet, '::') - 3
                                        )
                                      - INSTR (v_attrdet, '|||')
                                     );

                           v_attrdet :=
                              SUBSTR (v_attrdet,
                                      INSTR (v_attrdet, '::', 1, 1) + 2
                                     );
                           v_tattrval (i) :=
                              SUBSTR (v_attrdet,
                                      INSTR (v_attrdet, '|||') + 3,
                                        (INSTR (v_attrdet, '::') - 3
                                        )
                                      - INSTR (v_attrdet, '|||')
                                     );

                           v_attrdet :=
                              SUBSTR (v_attrdet,
                                      INSTR (v_attrdet, '::', 1, 1) + 2
                                     );
                          /*v_qty (i) :=
                              SUBSTR (v_attrdet,
                                      INSTR (v_attrdet, '|||') + 3,
                                        (INSTR (v_attrdet, '##') - 3
                                        )
                                      - INSTR (v_attrdet, '|||')
                                     );
                           v_attrdet :=
                              SUBSTR (v_attrdet,
                                      INSTR (v_attrdet, '##', 1) + 2); */
                                      -------Added for row id
                          v_str_chk := NULL;

                            /*  SELECT CASE
                                        WHEN (   INSTR (v_attrdet, '##') <
                                                       INSTR (v_attrdet, '::')
                                              OR INSTR (v_attrdet, '::') = 0
                                             )
                                           THEN 1
                                        ELSE 0
                                     END
                                INTO v_str_chk
                                FROM DUAL;  Commented this part and below line replaced this . Done by Jay*/
                        IF INSTR (v_attrdet, '##') <INSTR (v_attrdet, '::') OR INSTR (v_attrdet, '::') = 0 then
                            v_str_chk :=1;
                        ELSE
                            v_str_chk :=0;
                        END IF;

                              IF v_str_chk = 1
                              THEN
                                 v_qty (i) :=
                                    SUBSTR (v_attrdet,
                                            INSTR (v_attrdet, '|||') + 3,
                                              (INSTR (v_attrdet, '##') - 3
                                              )
                                            - INSTR (v_attrdet, '|||')
                                           );
                                 v_rowid (i) := NULL;
                              ELSE
                                 v_qty (i) :=
                                    SUBSTR (v_attrdet,
                                            INSTR (v_attrdet, '|||') + 3,
                                              (INSTR (v_attrdet, '::') - 3
                                              )
                                            - INSTR (v_attrdet, '|||')
                                           );
                                 v_attrdet :=
                                    SUBSTR (v_attrdet,
                                            INSTR (v_attrdet, '::', 1, 1) + 2
                                           );
                                 v_rowid (i) :=
                                    SUBSTR (v_attrdet,
                                            INSTR (v_attrdet, '|||') + 3,
                                              (INSTR (v_attrdet, '##') - 3
                                              )
                                            - INSTR (v_attrdet, '|||')
                                           );
                              END IF;

                              v_attrdet :=
                                 SUBSTR (v_attrdet,
                                         INSTR (v_attrdet, '##', 1) + 2
                                        );

                               -------Added for row id

                        END LOOP;

                        --update active status for all attributes in line_item_detail
                        --for the given product and given config level and attribute level

                        FORALL i IN v_tconfiglevel.FIRST .. v_tconfiglevel.LAST
                           UPDATE line_item_detail ld
                              SET active = pkg_constants.con_activeflag_no,
                                  modified_date = v_curdate,
                                  modified_by = in_createdby
                            WHERE line_item_id IN (
                                     SELECT line_item_id
                                       FROM line_item
                                      WHERE quote_header_id = in_quoteheaderid
                                        AND (   site_id = in_siteid
                                             OR (    site_id IS NULL
                                                 AND NVL (in_siteid, 0) = 0
                                                )
                                            )
                                        AND UPPER (product_name) =
                                                            UPPER (v_prodname)
                                        AND UPPER (fallback_type) =
                                                            UPPER (v_fallback)
                                        AND active =
                                               CASE
                                                  WHEN (   (    v_parttype IS NULL
                                                            AND modified_date IS NULL
                                                           )
                                                        OR (    v_parttype =
                                                                            ''
                                                            AND modified_date IS NULL
                                                           )
                                                        OR (    UPPER
                                                                   (v_parttype) =
                                                                      'BUNDLE'
                                                            AND product_id =
                                                                      v_prodid
                                                            AND modified_date IS NULL
                                                           )
                                                       )
                                                     THEN pkg_constants.con_activeflag_yes
                                                  ELSE pkg_constants.con_activeflag_no
                                               END)
                              AND EXISTS (
                                     SELECT 1
                                       FROM attribute_mapping am
                                      WHERE UPPER (config_level) =
                                                    UPPER (v_tconfiglevel (i))
                                        AND UPPER (attribute_level) =
                                                     UPPER (in_attributelevel)
                                        AND ld.attribute_mapping_id =
                                                       am.attribute_mapping_id)
                              AND created_date < v_curdate
                              AND modified_date IS NULL
                              AND NVL (non_std_flag, -1) =
                                     CASE
                                        WHEN (non_std_flag = v_non_std_flag)
                                           THEN v_non_std_flag
                                        WHEN non_std_flag IS NULL
                                           THEN NVL (non_std_flag, -1)
                                        WHEN (    v_non_std_flag =
                                                     pkg_constants.con_activeflag_yes
                                              AND non_std_flag <>
                                                                v_non_std_flag
                                             )
                                           THEN pkg_constants.con_activeflag_no
                                        ELSE pkg_constants.con_activeflag_yes
                                     END;
                        --insert into line-item_detail all the attributes after making
                        --existing attributes as inactive
                                   FORALL i IN 1 .. v_attrcnt
                           INSERT INTO line_item_detail
                                       (line_item_detail_id,
                                        line_item_id, attribute_mapping_id,
                                        VALUE,
                                        active,
                                        non_std_flag, created_by,
                                        created_date, quantity,row_id
                                       )
                                VALUES (line_item_detail_id.NEXTVAL,
                                        v_lineitemid, v_tattrid (i),
                                        v_tattrval (i),
                                        pkg_constants.con_activeflag_yes,
                                        v_non_std_flag, in_createdby,
                                        v_curdate, v_qty (i),v_rowid (i)
                                       );
                        out_status := pkg_constants.con_status_success;
                     END;
                  END IF;
               END;
            ELSE
               BEGIN
                  out_status := pkg_constants.con_status_failure;
                  out_errmsg := 'Invalid Product-Attribute List';
               END;
            END IF;
         END LOOP;

         CLOSE c_attributelist;

         --COMMIT;
      END;
   ELSE
      BEGIN
         out_status := pkg_constants.con_status_failure;
         out_errmsg := 'Invalid Product-Attribute List';
      END;
   END IF;


    BEGIN--TO UPDATE ACCESS_QREF CONNECTOR TYPE

         SELECT x.access_qref,x.quote_site_id,y.value
                    INTO v_access_qref,v_quote_site_id,v_cpe_conntype
                    FROM (SELECT qtst.quote_site_id,qtst.quote_header_id, qtst.site_id,
                                 aq.access_qref, aq.connector,pricing_status
                            FROM quote_site qtst INNER JOIN access_qref aq
                                 ON qtst.quote_site_id = aq.quote_site_id
                           WHERE qtst.quote_header_id = in_quoteheaderid
                  AND (   qtst.site_id = in_siteid
                                                  OR (    qtst.site_id IS NULL
                                                      AND NVL (in_siteid, 0) =
                                                                             0
                                                     )
                                                 )
                             AND qtst.active =
                                              pkg_constants.con_activeflag_yes
                             AND aq.active = pkg_constants.con_activeflag_yes) x
                         INNER JOIN
                         (SELECT li.quote_header_id, li.site_id, lid.VALUE,
                                 lid.non_std_flag
                            FROM line_item li INNER JOIN line_item_detail lid
                                 ON li.line_item_id = lid.line_item_id
                           WHERE li.active = pkg_constants.con_activeflag_yes
                             AND lid.active = pkg_constants.con_activeflag_yes
                             AND lid.attribute_mapping_id =
                                    CASE
                                       WHEN (NVL (lid.non_std_flag, 'N') = 'N'
                                            )
                                          THEN pkg_constants.con_conntype_attrmapid
                                       ELSE lid.attribute_mapping_id
                                    END
                             --pkg_constants.con_conntype_attrmapid
                             AND li.quote_header_id = in_quoteheaderid
                AND (   li.site_id = in_siteid
                                                  OR (    li.site_id IS NULL
                                                      AND NVL (in_siteid, 0) =
                                                                             0
                                                     )
                                                 )
                            AND UPPER(li.product_name) IN (SELECT UPPER(product_name) FROM product_master_details WHERE PARENT_GROUP_ID=1)
                            ) y
                         ON x.quote_header_id = y.quote_header_id
                       AND x.site_id = y.site_id
            AND UPPER(x.connector) = 'OTHER / NON STANDARD'
            AND UPPER(x.pricing_status) = 'FIRM'
            AND NVL (y.non_std_flag, 'N') = 'N';

            UPDATE access_qref aq
            SET aq.connector = v_cpe_conntype
            WHERE aq.quote_site_id = v_quote_site_id
                AND aq.access_qref = v_access_qref
                AND UPPER(aq.connector) = 'OTHER / NON STANDARD'
                AND UPPER(aq.pricing_status) = 'FIRM';
        --COMMIT;


    EXCEPTION WHEN NO_DATA_FOUND THEN
        NULL;
         PKG_COMMON.SPI_ERROR_LOG(null,IN_QUOTEHEADERID,IN_SITEID,DBMS_LOB.SUBSTR('NO DATA FOUND WHILE SELECTING CONNETOR TYPE',4000,1),
                   'PKG_QUOTE','SPI_CONFIGURATION',out_status,out_errmsg);
        WHEN TOO_MANY_ROWS THEN
        NULL;
        PKG_COMMON.SPI_ERROR_LOG(null,IN_QUOTEHEADERID,IN_SITEID,DBMS_LOB.SUBSTR('TOO MANY ROWS WHILE SELECTING CONNETOR TYPE',4000,1),
                   'PKG_QUOTE','SPI_CONFIGURATION',out_status,out_errmsg);

    END;--Update ends here



EXCEPTION
   WHEN OTHERS
   THEN
      out_status := pkg_constants.con_status_failure;
      OUT_ERRMSG := SQLERRM;
      PKG_COMMON.SPI_ERROR_LOG(null,IN_QUOTEHEADERID,IN_SITEID,DBMS_LOB.SUBSTR(IN_ATTRIBUTELIST,4000,1),
                   'PKG_QUOTE','SPI_CONFIGURATION',out_status,out_errmsg);
      ROLLBACK;
END;

   PROCEDURE spi_quote (
      in_cid          IN       quote.customer_id%TYPE,
      in_cname        IN       quote.customer_name%TYPE,
      in_ordtype      IN       quote.order_type%TYPE,
      in_ordver       IN       quote_header.VERSION%TYPE,
      in_qref         IN       quote.reference_number%TYPE,
      in_status       IN       quote_header.status%TYPE,
      in_type         IN       quote_header.TYPE%TYPE,
      in_quotename    IN       quote_header.quote_name%TYPE,
      in_contractid   IN       quote_header.contract_id%TYPE,
      ---GHUCS,added new field contract_id for NEW QUOTE CREATION
      in_contterm     IN       quote_header.contract_term%TYPE,
      in_bid          IN       quote_header.bid_number%TYPE,
      in_oppid        IN       quote_header.opportunity_id%TYPE,
      in_currency     IN       quote_header.currency%TYPE,
      --in_curid           IN       quote_header.currency_id%TYPE,
      in_comments     IN       quote_header.comments%TYPE,
      in_createdby    IN       quote.created_by%TYPE,
      out_quoteid     OUT      quote.quote_id%TYPE,
      out_qthdrid     OUT      quote_header.quote_header_id%TYPE,
      out_qtname      OUT      quote_header.quote_name%TYPE,
      out_status      OUT      NUMBER,
      out_errmsg      OUT      VARCHAR2,
      -- Added in_product_name on 17/12/2010 as part of introducing new table QUOTE_STATUS
      in_product_name  IN       VARCHAR2 DEFAULT NULL,
      in_csd           IN       quote_header.customer_signed_date%TYPE default null,  --Added by Khader for GHUCS R16
      in_saleschannel  IN       quote.sales_channel%TYPE default null                 --Added by Khader for GHUCS R16
   )
   AS
      v_quoteid      quote.quote_id%TYPE;
      v_quotehdrid   quote_header.quote_header_id%TYPE;
      v_count        NUMBER;
   BEGIN
      SELECT quote_id.NEXTVAL
        INTO v_quoteid
        FROM DUAL;

      INSERT INTO quote
                  (quote_id, customer_id, customer_name, reference_number,
                   order_type, created_date, created_by,sales_channel   --Added by Khader for GHUCS R16
                  )
           VALUES (v_quoteid, in_cid, in_cname, in_qref,
                   in_ordtype, SYSDATE, in_createdby,in_saleschannel     --Added by Khader for GHUCS R16
                  );

      SELECT quote_header_id.NEXTVAL
        INTO v_quotehdrid
        FROM DUAL;

      INSERT INTO quote_header
                  (quote_header_id, quote_id, contract_term, quote_name,
                   opportunity_id, bid_number, comments, status, TYPE,
                   --currency_id,
                   currency, VERSION, created_date, created_by,
                   contract_id,customer_signed_date  --Added by Khader for GHUCS R16
                  )
           VALUES (v_quotehdrid, v_quoteid, in_contterm, in_quotename,
                   in_oppid, in_bid, in_comments, in_status, in_type,
                   --in_curid,
                   in_currency, in_ordver, SYSDATE, in_createdby,
                   in_contractid,in_csd  --Added by Khader for GHUCS R16
                  );

      -- Added on 17/12/2010 as part of introducing new table QUOTE_STATUS
      INSERT INTO quote_status
                  (quote_id, quote_header_id, product_name, status, quote_status_id)
           VALUES (v_quoteid, v_quotehdrid, in_product_name, in_status, quote_status_id.NEXTVAL);
      --

      out_quoteid := v_quoteid;
      out_qthdrid := v_quotehdrid;
      out_qtname := in_quotename;
      out_status := pkg_constants.con_status_success;
   EXCEPTION
      WHEN OTHERS
      THEN
         out_quoteid := 0;
         out_qthdrid := 0;
         out_qtname := NULL;
         out_status := pkg_constants.con_status_failure;
         out_errmsg := SQLERRM;
   END;

   PROCEDURE spu_quote (
      in_quotehdrid   IN       quote_header.quote_header_id%TYPE,
      in_ordver       IN       quote_header.VERSION%TYPE,
      in_contterm     IN       quote_header.contract_term%TYPE,
      in_bid          IN       quote_header.bid_number%TYPE,
      in_oppid        IN       quote_header.opportunity_id%TYPE,
      in_currency     IN       quote_header.currency%TYPE,
      --in_curid              IN          quote_header.currency_id%TYPE,
      in_comments     IN       quote_header.comments%TYPE,
      in_modifiedby   IN       quote.modified_by%TYPE,
      out_status      OUT      NUMBER,
      out_errmsg      OUT      VARCHAR2,
      in_csd          IN       quote_header.customer_signed_date%TYPE default null  --Added by Khader for GHUCS R16
   )
   AS
      v_count   NUMBER;
   BEGIN
      SELECT COUNT (*)
        INTO v_count
        FROM quote_header
       WHERE quote_header_id = in_quotehdrid;

      IF (v_count = 0)
      THEN
         out_status := pkg_constants.con_status_duplicate;
      --Data to be updated is not present
      ELSE
         BEGIN

            UPDATE quote_header
               SET contract_term = in_contterm,
                   opportunity_id = in_oppid,
                   bid_number = in_bid,
                   comments = in_comments,
                   currency = in_currency,
                   -- currency_id = in_curid,
                   VERSION = in_ordver,
                   modified_by = in_modifiedby,
                   modified_date = SYSDATE,
                   customer_signed_date=in_csd   --Added by Khader for GHUCS R16
             WHERE quote_header_id = in_quotehdrid;

            out_status := pkg_constants.con_status_success;
         END;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         out_errmsg := SQLERRM;
   END;

   PROCEDURE spu_configure (
      in_quotehdrid   IN       quote_header.quote_header_id%TYPE,
      in_siteid       IN       site.site_id%TYPE,
      in_config       IN       VARCHAR2,
      in_pricing      IN       VARCHAR2,
      in_modifiedby   IN       site.modified_by%TYPE,
      out_status      OUT      NUMBER,
      out_errmsg      OUT      VARCHAR2
   --Status returned as 2 when there are no quote_siteid's for input
   )
   AS
      v_quotesiteid   quote_site.quote_site_id%TYPE;
      v_count         NUMBER;
      v_globalparam   VARCHAR2 (2000);
   BEGIN
      SELECT COUNT (*)
        INTO v_count
        FROM quote_site
       WHERE site_id = in_siteid
         AND quote_header_id = in_quotehdrid
         AND active = pkg_constants.con_activeflag_yes;

      IF (v_count != 0)
      THEN
         SELECT quote_site_id
           INTO v_quotesiteid
           FROM quote_site
          WHERE site_id = in_siteid
            AND quote_header_id = in_quotehdrid
            AND active = pkg_constants.con_activeflag_yes;

         CASE
            WHEN INSTR (UPPER (in_pricing), 'BT MPLS ACCESS') > 0
            --Only when Config for Access is changed
         THEN
               --Access Related Tables
               DELETE FROM access_caveat
                     WHERE access_qref_id IN (
                              SELECT access_qref_id
                                FROM access_qref
                               WHERE quote_site_id = v_quotesiteid
                                 AND active = pkg_constants.con_activeflag_yes);

               DELETE FROM access_qref
                     WHERE quote_site_id = v_quotesiteid;
            WHEN INSTR (UPPER (in_pricing), 'BT CPE') > 0
            --Only when Config for CPE is changed
         THEN
               --CPE Related Tables
               DELETE FROM cpe_caveat
                     WHERE cpe_qref_id IN (
                              SELECT cpe_qref_id
                                FROM cpe_qref
                               WHERE quote_site_id = v_quotesiteid
                                 AND active = pkg_constants.con_activeflag_yes);

               --No Active Flag in CPE_QREF hence deleting
               DELETE FROM cpe_qref
                     WHERE quote_site_id = v_quotesiteid;
            ELSE
               NULL;
         END CASE;

         IF INSTR (UPPER (in_config), 'BT MPLS GLOBAL') > 0
         --Only when Config for BT MPLS GLOBAL is changed
         THEN
            SELECT SUBSTR (in_config,
                           INSTR (in_config, '-') + 1,
                             INSTR (SUBSTR (in_config,
                                            INSTR (in_config, '-') + 1
                                           ),
                                    ','
                                   )
                           - 1
                          )
              INTO v_globalparam
              FROM DUAL;

            --LINE_ITEM_DETAIL
            UPDATE line_item_detail
               SET active = pkg_constants.con_activeflag_no,
                   modified_by = in_modifiedby,
                   modified_date = SYSDATE ()
             WHERE line_item_id IN (
                      SELECT line_item_id
                        FROM line_item
                       WHERE quote_header_id = in_quotehdrid
                         AND site_id = in_siteid
                         AND active = pkg_constants.con_activeflag_yes
                         AND UPPER (product_name) IN (
                                SELECT DECODE (UPPER (COLUMN_VALUE),
                                               'PORT', 'BT MPLS PORT',
                                               'ACCESS', 'BT MPLS ACCESS',
                                               'BT CPE'
                                              )
                                  FROM TABLE
                                          (CAST
                                              (pkg_common.fn_splitdata
                                                                   (in_config,
                                                                    ','
                                                                   ) AS varchar2_ntt
                                              )
                                          )))
               AND attribute_mapping_id IN (
                      SELECT attribute_mapping_id
                        FROM attribute_mapping
                       WHERE config_level != 'Product Selection'
                         AND attribute_level = 'Quote');

            --LINE_ITEM
            UPDATE line_item
               SET active = pkg_constants.con_activeflag_no,
                   modified_by = in_modifiedby,
                   modified_date = SYSDATE ()
             WHERE quote_header_id = in_quotehdrid
               AND site_id = in_siteid
               AND active = pkg_constants.con_activeflag_yes
               AND UPPER (product_name) IN (
                      SELECT DECODE (UPPER (COLUMN_VALUE),
                                     'PORT', 'BT MPLS PORT',
                                     'ACCESS', 'BT MPLS ACCESS',
                                     'BT CPE'
                                    )
                        FROM TABLE
                                (CAST
                                    (pkg_common.fn_splitdata (in_config, ',') AS varchar2_ntt
                                    )
                                ))
               AND UPPER (product_name) != 'BT MPLS GLOBAL';
         END IF;

         --LINE_ITEM_DETAIL
         UPDATE line_item_detail
            SET active = pkg_constants.con_activeflag_no,
                modified_by = in_modifiedby,
                modified_date = SYSDATE ()
          WHERE line_item_id IN (
                   SELECT line_item_id
                     FROM line_item
                    WHERE quote_header_id = in_quotehdrid
                      AND site_id = in_siteid
                      AND active = pkg_constants.con_activeflag_yes
                      AND UPPER (product_name) IN (
                             SELECT UPPER (COLUMN_VALUE)
                               FROM TABLE
                                       (CAST
                                           (pkg_common.fn_splitdata
                                                                   (in_config,
                                                                    ','
                                                                   ) AS varchar2_ntt
                                           )
                                       )))
            AND attribute_mapping_id IN (
                   SELECT attribute_mapping_id
                     FROM attribute_mapping
                    WHERE config_level != 'Product Selection'
                      AND attribute_level = 'Quote');

         --PRICE_LINE_ITEM_DETAIL
         UPDATE price_line_item_detail
            SET active = pkg_constants.con_activeflag_no,
                modified_by = in_modifiedby,
                modified_date = SYSDATE ()
          WHERE line_item_id IN (
                   SELECT line_item_id
                     FROM line_item
                    WHERE quote_header_id = in_quotehdrid
                      AND (   site_id = in_siteid
                           OR (site_id IS NULL AND NVL (in_siteid, 0) = 0)
                          )                    /*904 Order Site to Site SLA */
                      AND active = pkg_constants.con_activeflag_yes
                      AND UPPER (product_name) IN (
                             SELECT UPPER (COLUMN_VALUE)
                               FROM TABLE
                                       (CAST
                                           (pkg_common.fn_splitdata
                                                                  (in_pricing,
                                                                   ','
                                                                  ) AS varchar2_ntt
                                           )
                                       )));

         --LINE_ITEM
         UPDATE line_item
            SET active = pkg_constants.con_activeflag_no,
                modified_by = in_modifiedby,
                modified_date = SYSDATE ()
          WHERE quote_header_id = in_quotehdrid
            AND site_id = in_siteid
            AND active = pkg_constants.con_activeflag_yes
            AND UPPER (product_name) IN (
                   SELECT UPPER (COLUMN_VALUE)
                     FROM TABLE
                             (CAST
                                 (pkg_common.fn_splitdata (in_config, ',') AS varchar2_ntt
                                 )
                             ))
            AND UPPER (product_name) != 'BT MPLS GLOBAL';

         out_status := pkg_constants.con_status_success;
         --COMMIT;
      ELSE
         --when quote is not linked to site
         out_status := pkg_constants.con_status_duplicate;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         out_errmsg := SQLERRM;
         ROLLBACK;
   END;

---GHUCS
   PROCEDURE spi_service_configuration (
      in_quoteheaderid    IN       quote_header.quote_header_id%TYPE,
      in_siteid           IN       site.site_id%TYPE,
      in_attributelist    IN       CLOB,
      in_attributelevel   IN       attribute_mapping.attribute_level%TYPE,
      in_createdby        IN       line_item.created_by%TYPE,
      out_status          OUT      NUMBER,
      out_errmsg          OUT      VARCHAR2
   )
   --Row separator is ~ for products
   --attribute separator is ##
   --parameters for an attribute separated by ::
   AS
      CURSOR c_attributelist
      IS
         SELECT *
           FROM TABLE
                   (CAST
                       (pkg_common.fn_splitbulkupload (in_attributelist, '~') AS varchar2_clob
                       )
                   );

      v_prodid               line_item.product_id%TYPE;
      v_prodname             line_item.product_name%TYPE;
      v_fallback             line_item.fallback_type%TYPE;
      v_parttype             line_item.part_type%TYPE;
      v_tattrid              t_attrmapid;
      v_tconfiglevel         t_configlevel;
      v_tattrval             t_value;
      v_qty                  t_qty;
      v_lineitemid           line_item.line_item_id%TYPE;
      v_lineitemids          VARCHAR2 (2000);
      v_attrlevel            attribute_mapping.attribute_level%TYPE;
      v_configlevel          attribute_mapping.config_level%TYPE;
      v_rowcount             NUMBER;
      v_prodattr             VARCHAR2 (8000);
      v_proddet              VARCHAR2 (8000);
      v_attrdet              VARCHAR2 (8000);
      v_attrcnt              NUMBER;
      v_curdate              TIMESTAMP;
      v_flag                 CHAR (1)                                 := '1';
      v_existintlineitemid   line_item.line_item_id%TYPE;
      numb                   NUMBER;
      v_rowid                NUMBER;                               ------GHUCS
      v_desc                 t_desc;                               ------GHUCS
      v_lineitem_id          NUMBER;
      v_rowcount1            NUMBER;
      v_countitem            NUMBER;
      v_delval               NUMBER;
   BEGIN
      SELECT SYSDATE
        INTO v_curdate
        FROM DUAL;

      IF (in_attributelist IS NULL)
      THEN
         SELECT COUNT (*)
           INTO v_countitem
           FROM line_item
          WHERE quote_header_id = in_quoteheaderid
            AND (site_id = in_siteid)
            AND active = pkg_constants.con_activeflag_yes
            AND modified_date IS NULL
            AND ROWID IS NOT NULL;

         IF (v_countitem > 0)
         THEN
            UPDATE line_item_detail
               SET active = pkg_constants.con_activeflag_no,
                   modified_date = v_curdate
             WHERE line_item_id IN (
                      SELECT line_item_id
                        FROM line_item
                       WHERE quote_header_id = in_quoteheaderid
                         AND (site_id = in_siteid)
                         AND active = pkg_constants.con_activeflag_yes
                         AND modified_date IS NULL
                         AND ROWID IS NOT NULL)
               AND active = pkg_constants.con_activeflag_yes;

            UPDATE price_line_item_detail
               SET active = pkg_constants.con_activeflag_no,
                   modified_date = v_curdate
             WHERE line_item_id IN (
                      SELECT line_item_id
                        FROM line_item
                       WHERE quote_header_id = in_quoteheaderid
                         AND (site_id = in_siteid)
                         AND active = pkg_constants.con_activeflag_yes
                         AND modified_date IS NULL
                         AND ROWID IS NOT NULL)
               AND active = pkg_constants.con_activeflag_yes;

            UPDATE line_item
               SET active = pkg_constants.con_activeflag_no,
                   modified_date = v_curdate
             WHERE quote_header_id = in_quoteheaderid
               AND (site_id = in_siteid)
               AND active = pkg_constants.con_activeflag_yes
               AND modified_date IS NULL;
         END IF;
      END IF;

      IF (in_attributelist IS NOT NULL)
      THEN
         -----GHUC1
         SELECT COUNT (*)
           INTO v_countitem
           FROM line_item
          WHERE quote_header_id = in_quoteheaderid
            AND (site_id = in_siteid)
            AND active = pkg_constants.con_activeflag_yes
            AND modified_date IS NULL
            AND ROWID IS NOT NULL;

         IF (v_countitem > 0)
         THEN
            UPDATE line_item_detail
               SET active = pkg_constants.con_activeflag_no,
                   modified_date = v_curdate
             WHERE line_item_id IN (
                      SELECT line_item_id
                        FROM line_item
                       WHERE quote_header_id = in_quoteheaderid
                         AND (site_id = in_siteid)
                         AND active = pkg_constants.con_activeflag_yes
                         AND modified_date IS NULL
                         AND ROWID IS NOT NULL)
               AND active = pkg_constants.con_activeflag_yes;

            UPDATE price_line_item_detail
               SET active = pkg_constants.con_activeflag_no,
                   modified_date = v_curdate
             WHERE line_item_id IN (
                      SELECT line_item_id
                        FROM line_item
                       WHERE quote_header_id = in_quoteheaderid
                         AND (site_id = in_siteid)
                         AND active = pkg_constants.con_activeflag_yes
                         AND modified_date IS NULL
                         AND ROWID IS NOT NULL)
               AND active = pkg_constants.con_activeflag_yes;

            UPDATE line_item
               SET active = pkg_constants.con_activeflag_no,
                   modified_date = v_curdate
             WHERE quote_header_id = in_quoteheaderid
               AND (site_id = in_siteid)
               AND active = pkg_constants.con_activeflag_yes
               AND modified_date IS NULL;
         END IF;

         SELECT COUNT (*)
           INTO v_delval
           FROM line_item
          WHERE site_id = in_siteid
            AND quote_header_id = in_quoteheaderid
            AND active = pkg_constants.con_activeflag_no
            AND row_id IS NOT NULL
            AND created_date < SYSDATE - 30;

         IF v_delval > 0
         THEN
            DELETE FROM price_line_item_detail
                  WHERE line_item_id IN (
                           SELECT line_item_id
                             FROM line_item
                            WHERE site_id = in_siteid
                              AND quote_header_id = in_quoteheaderid
                              AND active = pkg_constants.con_activeflag_no
                              AND row_id IS NOT NULL)
                    AND active = pkg_constants.con_activeflag_no
                    AND created_date < SYSDATE - 30;

            DELETE FROM line_item_detail
                  WHERE line_item_id IN (
                           SELECT line_item_id
                             FROM line_item
                            WHERE site_id = in_siteid
                              AND quote_header_id = in_quoteheaderid
                              AND active = pkg_constants.con_activeflag_no
                              AND row_id IS NOT NULL)
                    AND active = pkg_constants.con_activeflag_no
                    AND created_date < SYSDATE - 30;

            DELETE FROM line_item
                  WHERE site_id = in_siteid
                    AND quote_header_id = in_quoteheaderid
                    AND active = pkg_constants.con_activeflag_no
                    AND row_id IS NOT NULL
                    AND created_date < SYSDATE - 30;
         END IF;

         -----GHUCS2
         BEGIN
            OPEN c_attributelist;

            --SET TRANSACTION READ WRITE NAME 'Product configuration';

            --Loop therough the products in the input string
            LOOP
               FETCH c_attributelist
                INTO v_prodattr;

               v_lineitemid := NULL;
               v_flag := '1';
               EXIT WHEN c_attributelist%NOTFOUND;
               v_proddet :=
                     SUBSTR (v_prodattr, 1, INSTR (v_prodattr, ';', 1, 1) - 1);
               v_attrdet :=
                        SUBSTR (v_prodattr, INSTR (v_prodattr, ';', 1, 1) + 1);
               v_attrdet := v_attrdet || '##';

               SELECT pkg_common.fn_countbulkupload (v_attrdet, '##')
                 INTO v_attrcnt
                 FROM DUAL;

               IF (v_attrcnt != 0)
               THEN
                  BEGIN
                     --get the list of products from the input string
                     v_prodid :=
                        SUBSTR (v_proddet,
                                INSTR (v_proddet, '|||') + 3,
                                  (INSTR (v_proddet, '::') - 3
                                  )
                                - INSTR (v_proddet, '|||')
                               );
                     v_proddet :=
                          SUBSTR (v_proddet, INSTR (v_proddet, '::', 1, 1) + 2);
                     v_prodname :=
                        SUBSTR (v_proddet,
                                INSTR (v_proddet, '|||') + 3,
                                  (INSTR (v_proddet, '::') - 3
                                  )
                                - INSTR (v_proddet, '|||')
                               );
                     v_proddet :=
                          SUBSTR (v_proddet, INSTR (v_proddet, '::', 1, 1) + 2);
                     v_fallback :=
                        SUBSTR (v_proddet,
                                INSTR (v_proddet, '|||', 1, 1) + 3,
                                  (INSTR (v_proddet, '::', 1, 1) - 1
                                  )
                                - (INSTR (v_proddet, '|||', 1, 1) + 2)
                               );
                     v_proddet :=
                          SUBSTR (v_proddet, INSTR (v_proddet, '::', 1, 1) + 2);
/*                     v_parttype :=
                         SUBSTR (v_proddet, INSTR (v_proddet, '|||', 1, 1) + 3);*/   ---Below v_parttype and v_rowid is for GHUCs
                     v_parttype :=
                        SUBSTR (v_proddet,
                                INSTR (v_proddet, '|||', 1, 1) + 3,
                                  (INSTR (v_proddet, '::', 1, 1) - 1
                                  )
                                - (INSTR (v_proddet, '|||', 1, 1) + 2)
                               );
                     v_proddet :=
                          SUBSTR (v_proddet, INSTR (v_proddet, '::', 1, 1) + 2);
                     v_rowid :=
                         SUBSTR (v_proddet, INSTR (v_proddet, '|||', 1, 1) + 3);

                     --validation if fallback is null
                     IF (v_fallback IS NULL)
                     THEN
                        BEGIN
                           v_fallback := 'Primary';
                        END;
                     END IF;

                     --validation for parttype incase of CPE
                     IF (UPPER (v_prodname) LIKE '%CPE%')
                     THEN
                        BEGIN
                           IF (v_parttype IS NULL)
                           THEN
                              BEGIN
                                 out_status :=
                                             pkg_constants.con_status_failure;
                                 out_errmsg :=
                                           'Part Type cannot be null for CPE';
                                 v_flag := '0';
                              END;
                           END IF;
                        END;
                     END IF;

                     IF (v_flag = '1')
                     THEN
                        BEGIN
                           -- Check if record exists for the current product in line item
                           SELECT COUNT (*)
                             INTO v_rowcount
                             FROM line_item
                            WHERE quote_header_id = in_quoteheaderid
                              AND (   site_id = in_siteid
                                   OR (    site_id IS NULL
                                       AND NVL (in_siteid, 0) = 0
                                      )
                                  )            /*904 Order Site to Site SLA */
                              AND UPPER (product_name) = UPPER (v_prodname)
                              AND UPPER (fallback_type) = UPPER (v_fallback)
                              AND active = pkg_constants.con_activeflag_yes;

                           --If record does not exist, create a  line item
                           IF (v_rowcount = 0)
                           THEN
                              BEGIN
                                 INSERT INTO line_item
                                             (line_item_id,
                                              quote_header_id, site_id,
                                              product_id, product_name,
                                              fallback_type, part_type,
                                              quantity,
                                              active,
                                              created_by, created_date,
                                              row_id
                                             )
                                      VALUES (line_item_id.NEXTVAL,
                                              in_quoteheaderid, in_siteid,
                                              v_prodid, v_prodname,
                                              v_fallback, v_parttype,
                                              DEFAULT,
                                              pkg_constants.con_activeflag_yes,
                                              in_createdby, v_curdate,
                                              v_rowid
                                             )
                                   RETURNING line_item_id
                                        INTO v_lineitemid;
                              END;
                           ELSE
                              BEGIN
                                 --Logic to incorporate CPE parts Insert/ Update
                                 IF (v_parttype IS NOT NULL)
                                 THEN
                                    BEGIN
                                       --added if condition on 16/1/2010 to update
                                       --line_item for part type other than Bundle
                                       IF (UPPER (v_parttype) <> 'BUNDLE')
                                       THEN
                                          BEGIN
                                             --if it is not bundle, update all previous records
                                             -- and insert new record
                                             UPDATE line_item
                                                SET active =
                                                       pkg_constants.con_activeflag_no,
                                                    modified_date = v_curdate
                                              WHERE (   part_type IS NOT NULL
                                                     OR part_type <> ''
                                                    )
                                                AND quote_header_id =
                                                              in_quoteheaderid
                                                AND (   site_id = in_siteid
                                                     OR (    site_id IS NULL
                                                         AND NVL (in_siteid,
                                                                  0) = 0
                                                        )
                                                    )
                                                /*904 Order Site to Site SLA */
                                                AND product_name = v_prodname
                                                AND created_date < v_curdate
                                                AND UPPER (fallback_type) =
                                                            UPPER (v_fallback)
                                                AND UPPER (part_type) =
                                                       UPPER (TRIM (v_parttype)
                                                             )
                                                -- AND product_id = v_prodid
                                                AND modified_date IS NULL;

                                             INSERT INTO line_item
                                                         (line_item_id,
                                                          quote_header_id,
                                                          site_id,
                                                          product_id,
                                                          product_name,
                                                          fallback_type,
                                                          part_type,
                                                          quantity,
                                                          active,
                                                          created_by,
                                                          created_date, row_id
                                                         )
                                                  VALUES (line_item_id.NEXTVAL,
                                                          in_quoteheaderid,
                                                          in_siteid,
                                                          v_prodid,
                                                          v_prodname,
                                                          v_fallback,
                                                          v_parttype,
                                                          DEFAULT,
                                                          pkg_constants.con_activeflag_yes,
                                                          in_createdby,
                                                          v_curdate, v_rowid
                                                         )
                                               RETURNING line_item_id
                                                    INTO v_lineitemid;
                                          END;
                                       ELSE
                                          BEGIN
                                             --For a bundle, check if it is existing
                                             SELECT COUNT (*)
                                               INTO v_rowcount
                                               FROM line_item
                                              WHERE quote_header_id =
                                                              in_quoteheaderid
                                                AND (   site_id = in_siteid
                                                     OR (    site_id IS NULL
                                                         AND NVL (in_siteid,
                                                                  0) = 0
                                                        )
                                                    )
                                                /*904 Order Site to Site SLA */
                                                AND product_name = v_prodname
                                                AND active =
                                                       pkg_constants.con_activeflag_yes
                                                AND UPPER (fallback_type) =
                                                            UPPER (v_fallback)
                                                AND created_date < v_curdate
                                                AND product_id <> v_prodid
                                                AND modified_date IS NULL;

                                             IF (v_rowcount > 0)
                                             THEN
                                                BEGIN
                                                   --A bundle exists with different product id, so soft delete and
                                                   --then insert a new line item
                                                   UPDATE line_item
                                                      SET active =
                                                             pkg_constants.con_activeflag_no,
                                                          modified_date =
                                                                     v_curdate
                                                    WHERE UPPER (part_type) =
                                                                      'BUNDLE'
                                                      AND quote_header_id =
                                                              in_quoteheaderid
                                                      AND (   site_id =
                                                                     in_siteid
                                                           OR (    site_id IS NULL
                                                               AND NVL
                                                                      (in_siteid,
                                                                       0
                                                                      ) = 0
                                                              )
                                                          )
                                                      /*904 Order Site to Site SLA */
                                                      AND product_name =
                                                                    v_prodname
                                                      AND created_date <
                                                                     v_curdate
                                                      AND UPPER (fallback_type) =
                                                             UPPER (v_fallback)
                                                      AND product_id <>
                                                                      v_prodid
                                                      AND modified_date IS NULL;

                                                   --previous bundle with different product id
                                                   -- has been to inactive. for same product id, check
                                                   --if bundle is present
                                                   SELECT COUNT (*)
                                                     INTO v_rowcount
                                                     FROM line_item
                                                    WHERE quote_header_id =
                                                              in_quoteheaderid
                                                      AND (   site_id =
                                                                     in_siteid
                                                           OR (    site_id IS NULL
                                                               AND NVL
                                                                      (in_siteid,
                                                                       0
                                                                      ) = 0
                                                              )
                                                          )
                                                      /*904 Order Site to Site SLA */
                                                      AND product_name =
                                                                    v_prodname
                                                      AND active =
                                                             pkg_constants.con_activeflag_yes
                                                      AND UPPER (fallback_type) =
                                                             UPPER (v_fallback)
                                                      AND UPPER (part_type) =
                                                             UPPER (v_parttype)
                                                      --AND created_date < v_curdate
                                                      --AND product_id <> v_prodid
                                                      AND modified_date IS NULL;

                                                   --if not present, insert new record
                                                   --else select existing line item
                                                   IF (v_rowcount = 0)
                                                   THEN
                                                      INSERT INTO line_item
                                                                  (line_item_id,
                                                                   quote_header_id,
                                                                   site_id,
                                                                   product_id,
                                                                   product_name,
                                                                   fallback_type,
                                                                   part_type,
                                                                   quantity,
                                                                   active,
                                                                   created_by,
                                                                   created_date,
                                                                   row_id
                                                                  )
                                                           VALUES (line_item_id.NEXTVAL,
                                                                   in_quoteheaderid,
                                                                   in_siteid,
                                                                   v_prodid,
                                                                   v_prodname,
                                                                   v_fallback,
                                                                   v_parttype,
                                                                   DEFAULT,
                                                                   pkg_constants.con_activeflag_yes,
                                                                   in_createdby,
                                                                   v_curdate,
                                                                   v_rowid
                                                                  )
                                                        RETURNING line_item_id
                                                             INTO v_lineitemid;
                                                   ELSE
                                                      SELECT line_item_id
                                                        INTO v_lineitemid
                                                        FROM line_item
                                                       WHERE quote_header_id =
                                                                in_quoteheaderid
                                                         AND (   site_id =
                                                                     in_siteid
                                                              OR (    site_id IS NULL
                                                                  AND NVL
                                                                         (in_siteid,
                                                                          0
                                                                         ) = 0
                                                                 )
                                                             )
                                                         /*904 Order Site to Site SLA */
                                                         AND product_name =
                                                                    v_prodname
                                                         AND active =
                                                                pkg_constants.con_activeflag_yes
                                                         AND UPPER
                                                                (fallback_type) =
                                                                UPPER
                                                                   (v_fallback)
                                                         AND UPPER (part_type) =
                                                                UPPER
                                                                   (v_parttype)
                                                         --AND created_date < v_curdate
                                                         --AND product_id <> v_prodid
                                                         AND modified_date IS NULL;
                                                   END IF;
                                                END;
                                             ELSE
                                                --previous bundle saved also has same product id
                                                SELECT line_item_id
                                                  INTO v_lineitemid
                                                  FROM line_item
                                                 WHERE quote_header_id =
                                                              in_quoteheaderid
                                                   AND (   site_id = in_siteid
                                                        OR (    site_id IS NULL
                                                            AND NVL
                                                                   (in_siteid,
                                                                    0
                                                                   ) = 0
                                                           )
                                                       )
                                                   /*904 Order Site to Site SLA */
                                                   AND UPPER (product_name) =
                                                            UPPER (v_prodname)
                                                   AND UPPER (fallback_type) =
                                                            UPPER (v_fallback)
                                                   AND active =
                                                          pkg_constants.con_activeflag_yes
                                                   AND product_id = v_prodid;
                                             END IF;
                                          END;
                                       END IF;
                                    END;
                                 ELSE
                                    BEGIN
                                       --for non - BT CPE products
                                       SELECT line_item_id
                                         INTO v_lineitemid
                                         FROM line_item
                                        WHERE quote_header_id =
                                                              in_quoteheaderid
                                          AND (   site_id = in_siteid
                                               OR (    site_id IS NULL
                                                   AND NVL (in_siteid, 0) = 0
                                                  )
                                              )
                                          AND UPPER (product_name) =
                                                            UPPER (v_prodname)
                                          AND UPPER (fallback_type) =
                                                            UPPER (v_fallback)
                                          AND active =
                                                 pkg_constants.con_activeflag_yes
                                          AND product_id = v_prodid;
                                    END;
                                 END IF;

                     ----Start Moved to below update stmt to get inactive order line item ids
                     ----Modified by SRK on 23-Feb for improve the performance

                                /* SELECT pkg_common.to_string
                                           (CAST
                                               (COLLECT (TO_CHAR (line_item_id)
                                                        ) AS varchar2_ntt
                                               )
                                           )
                                   INTO v_lineitemids
                                   FROM line_item
                                  WHERE quote_header_id = in_quoteheaderid
                                    AND (   site_id = in_siteid
                                         OR (    site_id IS NULL
                                             AND NVL (in_siteid, 0) = 0
                                            )
                                        )
                                    AND UPPER (product_name) =
                                                            UPPER (v_prodname)
                                    AND UPPER (fallback_type) =
                                                            UPPER (v_fallback)
                                    AND active =
                                           CASE
                                              --added case condition for when line_item
                                              --is not updated for part type bundle
                                           WHEN (   (    v_parttype IS NULL
                                                     AND modified_date IS NULL
                                                    )
                                                 OR (    v_parttype = ''
                                                     AND modified_date IS NULL
                                                    )
                                                 OR (    UPPER (v_parttype) =
                                                                      'BUNDLE'
                                                     AND product_id = v_prodid
                                                     AND modified_date IS NULL
                                                    )
                                                )
                                                 THEN pkg_constants.con_activeflag_yes
                                              ELSE pkg_constants.con_activeflag_no
                                           END;

                                 IF (INSTR (v_lineitemids, ',', 1) = 0)
                                 THEN
                                    v_lineitemids := v_lineitemids || ',';
                                 END IF;
                                     */   ----End Moved to below update stmt
                              END;
                           END IF;

                           --get the individual parameters from the input string
                           FOR i IN 1 .. v_attrcnt
                           LOOP
                              v_tattrid (i) :=
                                 SUBSTR (v_attrdet,
                                         INSTR (v_attrdet, '|||') + 3,
                                           (INSTR (v_attrdet, '::') - 3
                                           )
                                         - INSTR (v_attrdet, '|||')
                                        );
                              v_attrdet :=
                                 SUBSTR (v_attrdet,
                                         INSTR (v_attrdet, '::', 1, 1) + 2
                                        );
                              v_tconfiglevel (i) :=
                                 SUBSTR (v_attrdet,
                                         INSTR (v_attrdet, '|||') + 3,
                                           (INSTR (v_attrdet, '::') - 3
                                           )
                                         - INSTR (v_attrdet, '|||')
                                        );
                              v_attrdet :=
                                 SUBSTR (v_attrdet,
                                         INSTR (v_attrdet, '::', 1, 1) + 2
                                        );
                              v_tattrval (i) :=
                                 SUBSTR (v_attrdet,
                                         INSTR (v_attrdet, '|||') + 3,
                                           (INSTR (v_attrdet, '::') - 3
                                           )
                                         - INSTR (v_attrdet, '|||')
                                        );
                              v_attrdet :=
                                 SUBSTR (v_attrdet,
                                         INSTR (v_attrdet, '::', 1, 1) + 2
                                        );
                              v_qty (i) :=
                                 SUBSTR (v_attrdet,
                                         INSTR (v_attrdet, '|||') + 3,
                                           (INSTR (v_attrdet, '::') - 3
                                           )
                                         - INSTR (v_attrdet, '|||')
                                        );
                              v_attrdet :=
                                 SUBSTR (v_attrdet,
                                         INSTR (v_attrdet, '::', 1, 1) + 2
                                        );
                              v_desc (i) :=
                                 SUBSTR (v_attrdet,
                                         INSTR (v_attrdet, '|||') + 3,
                                           (INSTR (v_attrdet, '##') - 3
                                           )
                                         - INSTR (v_attrdet, '|||')
                                        );
                              v_attrdet :=
                                 SUBSTR (v_attrdet,
                                         INSTR (v_attrdet, '##', 1) + 2
                                        );
                           END LOOP;

                           --update active status for all attributes in line_item_detail
                           --for the given product and given config level and attribute level
                           SELECT TO_NUMBER (COLUMN_VALUE)
                             INTO numb
                             FROM TABLE
                                     (CAST
                                         (pkg_common.fn_splitdata
                                                               (v_lineitemids,
                                                                ','
                                                               ) AS varchar2_ntt
                                         )
                                     )
                            WHERE ROWNUM < 2;


                           ----Modified by SRK on 23-Feb for improve the performance

                           FORALL i IN v_tconfiglevel.FIRST .. v_tconfiglevel.LAST
                              UPDATE line_item_detail ld
                                 SET active = pkg_constants.con_activeflag_no,
                                     modified_date = v_curdate,
                                     modified_by = in_createdby
                               WHERE line_item_id IN (
                                        SELECT line_item_id from line_item
                                  WHERE quote_header_id = in_quoteheaderid
                                    AND (   site_id = in_siteid
                                         OR (    site_id IS NULL
                                             AND NVL (in_siteid, 0) = 0
                                            )
                                        )
                                    AND UPPER (product_name) =
                                                            UPPER (v_prodname)
                                    AND UPPER (fallback_type) =
                                                            UPPER (v_fallback)
                                    AND active =
                                           CASE
                                              --added case condition for when line_item
                                              --is not updated for part type bundle
                                           WHEN (   (    v_parttype IS NULL
                                                     AND modified_date IS NULL
                                                    )
                                                 OR (    v_parttype = ''
                                                     AND modified_date IS NULL
                                                    )
                                                 OR (    UPPER (v_parttype) =
                                                                      'BUNDLE'
                                                     AND product_id = v_prodid
                                                     AND modified_date IS NULL
                                                    )
                                                )
                                                 THEN pkg_constants.con_activeflag_yes
                                              ELSE pkg_constants.con_activeflag_no
                                           END)
                                     AND EXISTS (
                                     SELECT 1 from attribute_mapping am
                                         WHERE UPPER (config_level) =
                                                    UPPER (v_tconfiglevel (i))
                                           AND UPPER (attribute_level) =
                                                     UPPER (in_attributelevel)
                                           AND ld.attribute_mapping_id =
                                                       am.attribute_mapping_id)
                                 AND created_date < v_curdate
                                 AND modified_date IS NULL;
                           --insert into line-item_detail all the attributes after making
                           --existing attributes as inactive
                           FORALL i IN 1 .. v_attrcnt
                              INSERT INTO line_item_detail
                                          (line_item_detail_id,
                                           line_item_id,
                                           attribute_mapping_id, VALUE,
                                           active,
                                           created_by, created_date,
                                           quantity,
                                           line_item_description      ---GHUCS
                                          )
                                   VALUES (line_item_detail_id.NEXTVAL,
                                           v_lineitemid,
                                           v_tattrid (i), v_tattrval (i),
                                           pkg_constants.con_activeflag_yes,
                                           in_createdby, v_curdate,
                                           v_qty (i),
                                           v_desc (i)
                                          );
                           out_status := pkg_constants.con_status_success;
                        --  COMMIT;
                        END;
                     END IF;
                  END;
               ELSE
                  BEGIN
                     out_status := pkg_constants.con_status_failure;
                     out_errmsg := 'Invalid Product-Attribute List';
                  END;
               END IF;
            END LOOP;

            CLOSE c_attributelist;
         END;
      ELSE
         BEGIN
            out_status := pkg_constants.con_status_failure;
            out_errmsg := 'Invalid Product-Attribute List';
         END;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         out_errmsg := SQLERRM;
   --   ROLLBACK;
   END;

   PROCEDURE spi_multisite_config (
      --added on 13/05/2010 for multisite-uploads in R3
           --saves configuration details for each site
      in_quoteheaderid   IN       line_item.quote_header_id%TYPE,
      in_list            IN       config_tab,
      in_attrlvl         IN       attribute_mapping.attribute_level%TYPE,
      in_batchid         IN       site_log.batch_id%TYPE,
      in_createdby       IN       line_item.created_by%TYPE,
      out_nextsite       OUT      site.site_id%TYPE
   )
   AS
      v_fallback      line_item.fallback_type%TYPE;
      v_flag          CHAR (1)                       := '1';
      v_rowcount      NUMBER;
      v_lineitemid    line_item.line_item_id%TYPE;
      v_lineitemids   VARCHAR2 (2000);
      v_curdate       TIMESTAMP;
      v_i             NUMBER;
      v_errmsg        VARCHAR2 (2000);
      v_sitelogid     site_log.site_log_id%TYPE;
      v_non_std_flag  varchar2(3):='';
      v_config_level  attribute_mapping.config_level%TYPE;

      -- Added on 19/8/2011
      v_resiliency    varchar2(100);
   BEGIN
      SELECT SYSDATE
        INTO v_curdate
        FROM DUAL;

      FOR i IN in_list.FIRST .. in_list.LAST
      LOOP
          --select the site_log_id to update site_log table
         /* SELECT site_log_id
            INTO v_sitelogid
            FROM site_log
           WHERE batch_id = in_batchid
             AND created_date =
                    (SELECT MAX (created_date)
                       FROM site_log
                      WHERE UPPER (site_name) =
                                        (SELECT UPPER (NAME)
                                           FROM site
                                          WHERE site_id = in_list (i).o_siteid));*/
         IF (i = in_list.LAST)
         THEN
            out_nextsite := NULL;
         ELSE
            out_nextsite := in_list (i + 1).o_siteid;
         END IF;

         IF (in_list (i).o_fallback IS NULL)
         THEN
            v_fallback := 'PRIMARY';
         ELSE
            v_fallback := in_list (i).o_fallback;
         END IF;

         IF (UPPER (in_list (i).o_pname) LIKE '%CPE%')
         THEN
            IF (in_list (i).o_parttype IS NULL)
            THEN
               BEGIN
                  v_errmsg := 'Part Type cannot be null for CPE';

                  UPDATE site_log
                     SET status = pkg_constants.con_status_failure,
                         reason = reason || ' ' || v_errmsg,
                         modified_by = in_createdby,
                         modified_date = v_curdate
                   WHERE site_log_id = v_sitelogid;

                  v_flag := '0';
               END;
            END IF;
         END IF;

         IF (v_flag = 1)
         THEN
            BEGIN
               SELECT COUNT (*)
                 INTO v_rowcount
                 FROM line_item
                WHERE quote_header_id = in_quoteheaderid
                  AND site_id = in_list (i).o_siteid
                  AND UPPER (product_name) = UPPER (in_list (i).o_pname)
                  AND UPPER (fallback_type) = UPPER (v_fallback)
                  AND active = pkg_constants.con_activeflag_yes;

               IF (v_rowcount = 0)                                --new insert
               THEN
                  INSERT INTO line_item
                              (line_item_id, quote_header_id,
                               site_id, product_id,
                               product_name, quantity,
                               active, fallback_type,
                               part_type, created_by,
                               created_date
                              )
                       VALUES (line_item_id.NEXTVAL, in_quoteheaderid,
                               in_list (i).o_siteid, in_list (i).o_pid,
                               in_list (i).o_pname, DEFAULT,
                               pkg_constants.con_activeflag_yes, v_fallback,
                               in_list (i).o_parttype, in_createdby,
                               v_curdate
                              )
                    RETURNING line_item_id
                         INTO v_lineitemid;
               ELSE
                  BEGIN
                     IF (in_list (i).o_parttype IS NOT NULL)
                     THEN
                        BEGIN
                           --added if condition on 16/1/2010 to update
                           --line_item for part type other than Bundle
                           IF (UPPER (in_list (i).o_parttype) <> 'BUNDLE')
                           THEN
                              BEGIN
                                 --if it is not bundle, update all previous records
                                 -- and insert new record
                                 UPDATE line_item
                                    SET active =
                                               pkg_constants.con_activeflag_no,
                                        modified_date = v_curdate
                                  WHERE (   part_type IS NOT NULL
                                         OR part_type <> ''
                                        )
                                    AND quote_header_id = in_quoteheaderid
                                    AND site_id = in_list (i).o_siteid
                                    AND product_name = in_list (i).o_pname
                                    AND created_date < v_curdate
                                    AND UPPER (fallback_type) =
                                                            UPPER (v_fallback)
                        -- Fix done on 2/5/2011 as part of defect# 104737
                    AND UPPER (part_type) =
                                                            UPPER (in_list (i).o_parttype)
                                    AND modified_date IS NULL;

                                 INSERT INTO line_item
                                             (line_item_id,
                                              quote_header_id,
                                              site_id,
                                              product_id,
                                              product_name,
                                              fallback_type,
                                              part_type,
                                              quantity,
                                              active,
                                              created_by, created_date
                                             )
                                      VALUES (line_item_id.NEXTVAL,
                                              in_quoteheaderid,
                                              in_list (i).o_siteid,
                                              in_list (i).o_pid,
                                              in_list (i).o_pname,
                                              v_fallback,
                                              in_list (i).o_parttype,
                                              DEFAULT,
                                              pkg_constants.con_activeflag_yes,
                                              in_createdby, v_curdate
                                             )
                                   RETURNING line_item_id
                                        INTO v_lineitemid;
                              END;
                           ELSE
                              BEGIN
                                 --For a bundle, check if it is existing
                                 SELECT COUNT (*)
                                   INTO v_rowcount
                                   FROM line_item
                                  WHERE quote_header_id = in_quoteheaderid
                                    AND site_id = in_list (i).o_siteid
                                    AND product_name = in_list (i).o_pname
                                    AND active =
                                              pkg_constants.con_activeflag_yes
                                    AND UPPER (fallback_type) =
                                                            UPPER (v_fallback)
                                    AND created_date < v_curdate
                                    AND product_id <> in_list (i).o_pid
                                    AND modified_date IS NULL;

                                 IF (v_rowcount > 0)
                                 THEN
                                    BEGIN
                                       --A bundle exists with different product id, so soft delete and
                                       --then insert a new line item
                                       UPDATE line_item
                                          SET active =
                                                 pkg_constants.con_activeflag_no,
                                              modified_date = v_curdate
                                        WHERE UPPER (part_type) = 'BUNDLE'
                                          AND quote_header_id =
                                                              in_quoteheaderid
                                          AND site_id = in_list (i).o_siteid
                                          AND product_name =
                                                           in_list (i).o_pname
                                          AND created_date < v_curdate
                                          AND UPPER (fallback_type) =
                                                            UPPER (v_fallback)
                                          AND product_id <> in_list (i).o_pid
                                          AND modified_date IS NULL;

                                       --previous bundle with different product id
                                       -- has been to inactive. for same product id, check
                                       --if bundle is present
                                       SELECT COUNT (*)
                                         INTO v_rowcount
                                         FROM line_item
                                        WHERE quote_header_id =
                                                              in_quoteheaderid
                                          AND site_id = in_list (i).o_siteid
                                          AND product_name =
                                                           in_list (i).o_pname
                                          AND active =
                                                 pkg_constants.con_activeflag_yes
                                          AND UPPER (fallback_type) =
                                                            UPPER (v_fallback)
                                          AND UPPER (part_type) =
                                                 UPPER (in_list (i).o_parttype)
                                          AND modified_date IS NULL;

                                       --if not present, insert new record
                                       --else select existing line item
                                       IF (v_rowcount = 0)
                                       THEN
                                          INSERT INTO line_item
                                                      (line_item_id,
                                                       quote_header_id,
                                                       site_id,
                                                       product_id,
                                                       product_name,
                                                       fallback_type,
                                                       part_type,
                                                       quantity,
                                                       active,
                                                       created_by,
                                                       created_date
                                                      )
                                               VALUES (line_item_id.NEXTVAL,
                                                       in_quoteheaderid,
                                                       in_list (i).o_siteid,
                                                       in_list (i).o_pid,
                                                       in_list (i).o_pname,
                                                       v_fallback,
                                                       in_list (i).o_parttype,
                                                       DEFAULT,
                                                       pkg_constants.con_activeflag_yes,
                                                       in_createdby,
                                                       v_curdate
                                                      )
                                            RETURNING line_item_id
                                                 INTO v_lineitemid;
                                       ELSE
                                          SELECT line_item_id
                                            INTO v_lineitemid
                                            FROM line_item
                                           WHERE quote_header_id =
                                                              in_quoteheaderid
                                             AND site_id =
                                                          in_list (i).o_siteid
                                             AND product_name =
                                                           in_list (i).o_pname
                                             AND active =
                                                    pkg_constants.con_activeflag_yes
                                             AND UPPER (fallback_type) =
                                                            UPPER (v_fallback)
                                             AND UPPER (part_type) =
                                                    UPPER
                                                        (in_list (i).o_parttype
                                                        )
                                             AND modified_date IS NULL;
                                       END IF;
                                    END;
                                 ELSE
                                    --previous bundle saved also has same product id
                                    SELECT line_item_id
                                      INTO v_lineitemid
                                      FROM line_item
                                     WHERE quote_header_id = in_quoteheaderid
                                       AND site_id = in_list (i).o_siteid
                                       AND UPPER (product_name) =
                                                   UPPER (in_list (i).o_pname)
                                       AND UPPER (fallback_type) =
                                                            UPPER (v_fallback)
                                       AND active =
                                              pkg_constants.con_activeflag_yes
                                       AND product_id = in_list (i).o_pid;
                                 END IF;
                              END;
                           END IF;
                        END;
                     ELSE
                        BEGIN
                           --for non - BT CPE products
                           SELECT line_item_id
                             INTO v_lineitemid
                             FROM line_item
                            WHERE quote_header_id = in_quoteheaderid
                              AND site_id = in_list (i).o_siteid
                              AND UPPER (product_name) =
                                                   UPPER (in_list (i).o_pname)
                              AND UPPER (fallback_type) = UPPER (v_fallback)
                              AND active = pkg_constants.con_activeflag_yes
                              AND product_id = in_list (i).o_pid;
                        END;
                     END IF;
                  END;
               END IF;

                 ----Start Moved to below update stmt to get inactive order line item ids
                 ----Modified by SRK on 23-Feb for improve the performance

              /* SELECT pkg_common.to_string
                          (CAST (COLLECT (TO_CHAR (line_item_id)) AS varchar2_ntt
                                )
                          )
                 INTO v_lineitemids
                 FROM line_item
                WHERE quote_header_id = in_quoteheaderid
                  AND site_id = in_list (i).o_siteid
                  AND UPPER (product_name) = UPPER (in_list (i).o_pname)
                  AND UPPER (fallback_type) = UPPER (v_fallback)
                  AND active =
                         CASE
                            --added case condition for when line_item
                            --is not updated for part type bundle
                         WHEN (   (    in_list (i).o_parttype IS NULL
                                   AND modified_date IS NULL
                                  )
                               OR (    in_list (i).o_parttype = ''
                                   AND modified_date IS NULL
                                  )
                               OR (    UPPER (in_list (i).o_parttype) =
                                                                      'BUNDLE'
                                   AND product_id = in_list (i).o_pid
                                   AND modified_date IS NULL
                                  )
                              )
                               THEN pkg_constants.con_activeflag_yes
                            ELSE pkg_constants.con_activeflag_no
                         END;

               IF (INSTR (v_lineitemids, ',', 1) = 0)
               THEN
                  v_lineitemids := v_lineitemids || ',';
               END IF;
                         */   ----End Moved to below update stmt
               --attribute list

               --update active status for all attributes in line_item_detail
               --for the given product and given config level and attribute level
               ----Modified by SRK on 23-Feb for improve the performance

               FOR j IN
                  in_list (i).o_config_attr_tab.FIRST .. in_list (i).o_config_attr_tab.LAST
               LOOP
                  UPDATE line_item_detail ld
                     SET active = pkg_constants.con_activeflag_no,
                         modified_date = v_curdate,
                         modified_by = in_createdby
                   WHERE line_item_id IN (
                           select line_item_id from line_item
                WHERE quote_header_id = in_quoteheaderid
                  AND site_id = in_list (i).o_siteid
                  AND UPPER (product_name) = UPPER (in_list (i).o_pname)
                  AND UPPER (fallback_type) = UPPER (v_fallback)
                  AND active =
                         CASE
                            --added case condition for when line_item
                            --is not updated for part type bundle
                         WHEN (   (    in_list (i).o_parttype IS NULL
                                   AND modified_date IS NULL
                                  )
                               OR (    in_list (i).o_parttype = ''
                                   AND modified_date IS NULL
                                  )
                               OR (    UPPER (in_list (i).o_parttype) =
                                                                      'BUNDLE'
                                   AND product_id = in_list (i).o_pid
                                   AND modified_date IS NULL
                                  )
                              )
                               THEN pkg_constants.con_activeflag_yes
                            ELSE pkg_constants.con_activeflag_no
                         END)
                        AND EXISTS (
                                     SELECT 1 from attribute_mapping am
                             WHERE UPPER (config_level) =
                                      UPPER
                                         (in_list (i).o_config_attr_tab (j).o_aconfig
                                         )
                               AND UPPER (attribute_level) =
                                                            UPPER (in_attrlvl)
                               AND ld.attribute_mapping_id =
                                                       am.attribute_mapping_id)
                     AND created_date < v_curdate
                     AND modified_date IS NULL;
               END LOOP;

               --               --insert into line-item_detail all the attributes after making
--                --existing attributes as inactive
               FOR j IN
                  in_list (i).o_config_attr_tab.FIRST .. in_list (i).o_config_attr_tab.LAST
               LOOP
               v_config_level :='';
               v_non_std_flag:='';
                SELECT config_level
                INTO v_config_level
                FROM attribute_mapping
                WHERE attribute_mapping_id = in_list (i).o_config_attr_tab (j).o_aid;


              /*  IF (   UPPER (TRIM (v_config_level)) = 'CONFIGURATION - PORT'
                OR UPPER (TRIM (v_config_level)) = 'CONFIGURATION - CPE'
                OR UPPER (TRIM (v_config_level)) = 'CONFIGURATION - ACCESS'
                    )
                THEN
                    v_non_std_flag := 'N';
                ELSE
                    v_non_std_flag := '';
                END IF;*/

                  INSERT INTO line_item_detail
                              (line_item_detail_id, line_item_id,
                               attribute_mapping_id,
                               VALUE,
                               active,
                               created_by, created_date,
                               quantity,
                               row_id,
                               non_std_flag
                              )
                       VALUES (line_item_detail_id.NEXTVAL, v_lineitemid,
                               in_list (i).o_config_attr_tab (j).o_aid,
                               in_list (i).o_config_attr_tab (j).o_aval,
                               pkg_constants.con_activeflag_yes,
                               in_createdby, v_curdate,
                               in_list (i).o_config_attr_tab (j).o_qty,
                               in_list (i).o_config_attr_tab (j).o_row_id,
                in_list (i).o_config_attr_tab (j).o_non_std_flag --   v_non_std_flag
                              );
               END LOOP;
            END;
         END IF;

         -- This block is called to inactivate all the secondary leg records incase if there
         -- is a change in the resiliency from any resiliency which has 2 legs TO either
         -- 'Standard' or 'Standard-Unbundled'  -- Added on 19/8/2011 as part of defect 2138
         BEGIN
           SELECT lid.value
             INTO v_resiliency
             FROM line_item_detail lid,
                  line_item li
            WHERE lid.line_item_id = li.line_item_id
              AND li.active = 'Y'
              AND lid.active = 'Y'
              AND li.site_id IS NOT NULL
              AND li.quote_header_id = in_quoteheaderid
              AND li.site_id = in_list(i).o_siteid
              AND lid.attribute_mapping_id = 1;

              IF UPPER(v_resiliency) IN ('STANDARD', 'STANDARD - UNBUNDLED')
              THEN

                 -- Deactivating Secondary leg records from line_item_detail
                 UPDATE line_item_detail
                    SET active = pkg_constants.con_activeflag_no,
                        modified_date = v_curdate,
                        modified_by = in_createdby
                  WHERE line_item_id IN (
                                         SELECT line_item_id FROM line_item
                                          WHERE quote_header_id = in_quoteheaderid
                                            AND site_id = in_list(i).o_siteid
                                            AND UPPER(fallback_type) = 'SECONDARY'
                                            AND active = 'Y'
                                        );
--                    AND created_date < v_curdate
--                    AND modified_date IS NULL;

                 -- Deactivating Secondary leg records from line_item
                 UPDATE line_item
                    SET active = pkg_constants.con_activeflag_no,
                        modified_date = v_curdate,
                        modified_by = in_createdby
                  WHERE quote_header_id = in_quoteheaderid
                    AND site_id = in_list(i).o_siteid
                    AND UPPER(fallback_type) = 'SECONDARY'
                    AND active = 'Y';
--                    AND created_date < v_curdate
--                    AND modified_date IS NULL;

              END IF;

         EXCEPTION
         WHEN OTHERS THEN
            NULL;
         END;
         -- Added on 19/8/2011 as part of defect 2138  - End

      END LOOP;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_errmsg := SQLERRM;

         UPDATE site_log
            SET status = pkg_constants.con_status_failure,
                reason = reason || ' ' || v_errmsg,
                modified_by = in_createdby,
                modified_date = v_curdate
          WHERE site_log_id = v_sitelogid;
   END;

   PROCEDURE spu_prodselection (
      --added on 18/05/2010
      in_quoteid       IN       quote.quote_id%TYPE,
      in_productid     IN       product_selection.product_id%TYPE,
      in_prodname      IN       product_selection.product_name%TYPE,
      in_propid        IN       product_selection.proposition_id%TYPE,
      in_propname      IN       product_selection.proposition_name%TYPE,
      in_subpropid     IN       product_selection.sub_proposition_id%TYPE,
      in_subpropname   IN       product_selection.sub_proposition_name%TYPE,
      in_createdby     IN       product_selection.created_by%TYPE,
      out_status       OUT      NUMBER,
      out_errmsg       OUT      VARCHAR2
   )
   AS
      v_count   NUMBER;
   BEGIN
      SELECT COUNT (*)
        INTO v_count
        FROM product_selection
       WHERE quote_id = in_quoteid
         AND proposition_id = in_propid
         AND sub_proposition_id = in_subpropid
         AND product_id = in_productid;

      IF (v_count < 1)
      THEN
         out_status := pkg_constants.con_status_failure;
      ELSE
         BEGIN
            UPDATE product_selection
               SET proposition_id = in_propid,
                   sub_proposition_id = in_subpropid,
                   product_id = in_productid,
                   modified_date = SYSDATE,
                   modified_by = in_createdby,
                   proposition_name = in_subpropname,
                   sub_proposition_name = in_subpropname,
                   product_name = in_prodname
             WHERE quote_id = in_quoteid;

            out_status := pkg_constants.con_status_success;
         END;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         out_errmsg := SQLERRM;
   END;

   PROCEDURE spi_non_std_as_is_data (
      in_quoteheaderid    IN       quote_header.quote_header_id%TYPE,
      in_siteid           IN       site.site_id%TYPE,
      in_bid_detail       IN       bid_detail_tab,
      in_bid_req_status   IN       bid_request_status_tab,
      in_createdby        IN       bid_detail.created_by%TYPE,
      out_status          OUT      NUMBER,
      out_errmsg          OUT      VARCHAR2
    )
    AS
 --   v_bid_detail             bid_detail_tab := bid_detail_tab();

    v_prod_id           bid_detail.product_id%TYPE;
    v_prod_name         bid_detail.product_name%TYPE;
    v_request_name      bid_detail.request_name%TYPE;
    v_non_std_flag      bid_detail.non_standard_flag%TYPE;
    v_spl_bid_num       bid_request_status.special_bid_number%TYPE;
    v_non_std_bid_items bid_request_status.non_std_bid_items%TYPE;
    v_tpp_url           bid_request_status.tpp_url%TYPE;
    v_row_id            bid_request_status.row_id%TYPE;
    v_non_std_comp      bid_request_status.non_std_comp%TYPE;
    v_fallback_type     bid_request_status.fallback_type%TYPE;
    v_active            bid_request_status.active%TYPE;

    v_bid_dtl_cnt       NUMBER := 0;
    v_bd_as_is_cnt      NUMBER := 0;
    v_bid_req_stat_cnt  NUMBER := 0;
    v_brs_as_is_cnt     NUMBER := 0;
    v_bid_detail_id     NUMBER;
    v_bid_req_stat_id   NUMBER;

    BEGIN

    IF in_bid_detail.EXISTS(1)
    THEN
      FOR i IN in_bid_detail.FIRST .. in_bid_detail.LAST
      LOOP
        v_prod_id := in_bid_detail(i).product_id;
        v_prod_name := in_bid_detail(i).product_name;
        v_request_name := in_bid_detail(i).request_name;
        v_non_std_flag := in_bid_detail(i).non_standard_flag;
        v_active := in_bid_detail(i).active;

       SELECT COUNT (*)
         INTO v_bd_as_is_cnt
         FROM bid_detail_as_is
        WHERE quote_header_id = in_quoteheaderid
          AND site_id = in_siteid
          AND product_id = v_prod_id
          AND active = pkg_constants.con_activeflag_yes;

       SELECT COUNT (*)
         INTO v_bid_dtl_cnt
         FROM bid_detail
        WHERE quote_header_id = in_quoteheaderid
          AND site_id = in_siteid
          AND product_id = v_prod_id
          AND active = pkg_constants.con_activeflag_yes;


       IF (v_bd_as_is_cnt = 0)
       THEN
             INSERT INTO bid_detail_as_is
                         (bid_detail_id,
                          quote_header_id,
                          site_id,
                          product_id,
                          product_name,
                          request_name,
                          non_standard_flag,
                          active,
                          created_by,
                          created_date
                         )
                  VALUES (bid_detail_id.NEXTVAL,
                          in_quoteheaderid,
                          in_siteid,
                          v_prod_id,
                          v_prod_name,
                          v_request_name,
                          v_non_std_flag,
                          v_active,
                          in_createdby,
                          sysdate
                         );

       END IF;

       IF (v_bid_dtl_cnt = 0)
       THEN
             INSERT INTO bid_detail
                         (bid_detail_id,
                          quote_header_id,
                          site_id,
                          product_id,
                          product_name,
                          request_name,
                          non_standard_flag,
                          active,
                          created_by,
                          created_date
                         )
                  VALUES (bid_detail_id.NEXTVAL,
                          in_quoteheaderid,
                          in_siteid,
                          v_prod_id,
                          v_prod_name,
                          v_request_name,
                          v_non_std_flag,
                          v_active,
                          in_createdby,
                          sysdate
                         )
               RETURNING bid_detail_id
                    INTO v_bid_detail_id;

               dbms_output.put_line('v_bid_detail_id '||v_bid_detail_id);
       END IF;

      END LOOP;

    END IF;


    IF in_bid_req_status.EXISTS(1)
    THEN
      FOR i IN in_bid_req_status.FIRST .. in_bid_req_status.LAST
      LOOP
        v_prod_id       := in_bid_req_status(i).product_id;
        v_prod_name     := in_bid_req_status(i).product_name;
        v_spl_bid_num   := in_bid_req_status(i).special_bid_number;
        v_non_std_bid_items := in_bid_req_status(i).non_std_bid_items;
        v_tpp_url       := in_bid_req_status(i).tpp_url;
        v_row_id        := in_bid_req_status(i).row_id;
        v_non_std_comp  := in_bid_req_status(i).non_std_comp;
        v_fallback_type := in_bid_req_status(i).fallback_type;
        v_active        := in_bid_detail(i).active;

       SELECT COUNT (*)
         INTO v_brs_as_is_cnt
         FROM bid_request_status_as_is
        WHERE quote_header_id = in_quoteheaderid
          AND site_id = in_siteid
          AND product_id = v_prod_id
          AND upper(product_name) = upper(v_prod_name)
          AND NVL(non_std_bid_items,'z') =NVL(v_non_std_bid_items,'z')
          AND active = pkg_constants.con_activeflag_yes;

       SELECT COUNT (*)
         INTO v_bid_req_stat_cnt
         FROM bid_request_status
        WHERE quote_header_id = in_quoteheaderid
          AND site_id = in_siteid
          AND product_id = v_prod_id
          AND upper(product_name) = upper(v_prod_name)
          AND NVL(non_std_bid_items,'z') =NVL(v_non_std_bid_items,'z')
          AND active = pkg_constants.con_activeflag_yes;


       IF (v_brs_as_is_cnt = 0)
       THEN
             INSERT INTO bid_request_status_as_is
                         (bid_request_status_id,
                          quote_header_id,
                          site_id,
                          product_id,
                          product_name,
                          special_bid_number,
                          non_std_bid_items,
                          tpp_url,
                          row_id,
                          non_std_comp,
                          fallback_type,
                          active,
                          created_by,
                          created_date
                         )
                  VALUES (bid_request_status_id.NEXTVAL,
                          in_quoteheaderid,
                          in_siteid,
                          v_prod_id,
                          v_prod_name,
                          v_spl_bid_num,
                          v_non_std_bid_items,
                          v_tpp_url,
                          v_row_id,
                          v_non_std_comp,
                          v_fallback_type,
                          v_active,
                          in_createdby,
                          sysdate
                         );
       END IF;

       IF (v_bid_req_stat_cnt = 0)
       THEN

             INSERT INTO bid_request_status
                         (bid_request_status_id,
                          quote_header_id,
                          site_id,
                          product_id,
                          product_name,
                          special_bid_number,
                          non_std_bid_items,
                          tpp_url,
                          row_id,
                          non_std_comp,
                          fallback_type,
                          active,
                          created_by,
                          created_date
                         )
                  VALUES (bid_request_status_id.NEXTVAL,
                          in_quoteheaderid,
                          in_siteid,
                          v_prod_id,
                          v_prod_name,
                          v_spl_bid_num,
                          v_non_std_bid_items,
                          v_tpp_url,
                          v_row_id,
                          v_non_std_comp,
                          v_fallback_type,
                          v_active,
                          in_createdby,
                          sysdate
                         )
              RETURNING bid_request_status_id
                   INTO v_bid_req_stat_id;

               dbms_output.put_line('v_bid_req_stat_id '||v_bid_req_stat_id);
       END IF;

      END LOOP;

    END IF;

    EXCEPTION
    WHEN OTHERS
    THEN
      out_status := pkg_constants.con_status_failure;
      out_errmsg := SQLERRM;
    END;
   -- Added this SP on 5/2/2011 to save non-std data into as_is and to_be tables - End


/********MODIFY R3 Changes starts(merging done on 28th June 2010) *****/
PROCEDURE spi_save_asset_from_bfg (
   in_quoteheaderid    IN       quote_header.quote_header_id%TYPE,
   in_siteid           IN       site.site_id%TYPE,
   in_line_item_tbl    IN       line_item_tbl,
   in_attributelevel   IN       VARCHAR2,
   in_service_name     IN       VARCHAR2,
   in_createdby        IN       quote_site_service.created_by%TYPE,
   out_status          OUT      NUMBER,
   out_errmsg          OUT      VARCHAR2
)
AS
   v_curdate                 TIMESTAMP;
   v_quote_site_service_id   quote_site_service.quote_site_service_id%TYPE;
   v_varchar2_ntt            varchar2_ntt                  := varchar2_ntt();
   v_line_item_tbl           line_item_tbl                := line_item_tbl();
   v_line_item_detail_tbl    line_item_detail_tbl  := line_item_detail_tbl();
   v_in_line_item            order_line_item_tbl    := order_line_item_tbl();
   v_in_line_item_detail     order_line_item_detail_tbl:= order_line_item_detail_tbl();
   v_order_count             NUMBER (2);
   v_attribute_mapping_id    attribute_mapping.attribute_mapping_id%TYPE;
   v_row_found               NUMBER (1)                                  := 0;
   w                         NUMBER (10);
   x                         NUMBER (10);
   in_line_item              line_item_tbl                := line_item_tbl();
   v_as_is                   NUMBER (3);
BEGIN
   in_line_item := in_line_item_tbl;

   SELECT SYSDATE
     INTO v_curdate
     FROM DUAL;

   BEGIN
      SELECT quote_site_service_id
        INTO v_quote_site_service_id
        FROM quote_site_service qss
       WHERE qss.quote_header_id = in_quoteheaderid
         AND (   qss.site_id = in_siteid
              OR (qss.site_id IS NULL AND NVL (in_siteid, -1) = -1)
             )
         AND (   UPPER (service_name) = UPPER (in_service_name)
              OR (    TRIM (in_service_name) IS NULL
                  AND NVL (TRIM (in_service_name), -1) = -1
                 )
             );
   EXCEPTION
      WHEN NO_DATA_FOUND
      THEN
         SELECT quote_site_service_id.NEXTVAL
           INTO v_quote_site_service_id
           FROM DUAL;

         INSERT INTO quote_site_service
                     (quote_site_service_id, quote_header_id, site_id,
                      created_by, created_date, service_name
                     )
              VALUES (v_quote_site_service_id, in_quoteheaderid, in_siteid,
                      in_createdby, SYSDATE, UPPER (in_service_name)
                     );
      WHEN OTHERS
      THEN
         out_status := 0;
     out_errmsg := 'Error while searching for quote_site_service id->'||SQLCODE||SQLERRM;
         RETURN;
   END;

/** adding lines to delete configuration ****/
/***********************************************/
/***********************************************/
/***********************************************/
   UPDATE line_item_detail
      SET active = pkg_constants.con_activeflag_no
    WHERE line_item_id IN (
             SELECT line_item_id
               FROM line_item
              WHERE quote_header_id = in_quoteheaderid
                AND (   site_id = in_siteid
                     OR (site_id IS NULL AND NVL (in_siteid, -1) = -1)
                    )
                AND quote_site_service_id = v_quote_site_service_id
                AND active = pkg_constants.con_activeflag_yes)
      AND active = pkg_constants.con_activeflag_yes;

   UPDATE quote_line_item_detail_as_is
      SET active = pkg_constants.con_activeflag_no
    WHERE line_item_id IN (
             SELECT line_item_id
               FROM quote_line_item_as_is
              WHERE quote_header_id = in_quoteheaderid
                AND (   site_id = in_siteid
                     OR (site_id IS NULL AND NVL (in_siteid, -1) = -1)
                    )
                AND quote_site_service_id = v_quote_site_service_id
                AND active = pkg_constants.con_activeflag_yes)
      AND active = pkg_constants.con_activeflag_yes;

   UPDATE price_line_item_detail
      SET active = pkg_constants.con_activeflag_no
    WHERE line_item_id IN (
             SELECT line_item_id
               FROM line_item
              WHERE quote_header_id = in_quoteheaderid
                AND (   site_id = in_siteid
                     OR (site_id IS NULL AND NVL (in_siteid, -1) = -1)
                    )
                AND active = pkg_constants.con_activeflag_yes
                AND quote_site_service_id = v_quote_site_service_id)
      AND active = pkg_constants.con_activeflag_yes;

   UPDATE price_line_item_detail_as_is
      SET active = pkg_constants.con_activeflag_no
    WHERE line_item_id IN (
             SELECT line_item_id
               FROM quote_line_item_as_is
              WHERE quote_header_id = in_quoteheaderid
                AND (   site_id = in_siteid
                     OR (site_id IS NULL AND NVL (in_siteid, -1) = -1)
                    )
                AND active = pkg_constants.con_activeflag_yes
                AND quote_site_service_id = v_quote_site_service_id)
      AND active = pkg_constants.con_activeflag_yes;

   UPDATE line_item
      SET active = pkg_constants.con_activeflag_no
    WHERE quote_header_id = in_quoteheaderid
      AND (site_id = in_siteid OR (site_id IS NULL AND NVL (in_siteid, -1) =
                                                                            -1)
          )
      AND active = pkg_constants.con_activeflag_yes
      AND quote_site_service_id = v_quote_site_service_id;

   UPDATE quote_line_item_as_is
      SET active = pkg_constants.con_activeflag_no
    WHERE quote_header_id = in_quoteheaderid
      AND (site_id = in_siteid OR (site_id IS NULL AND NVL (in_siteid, -1) =
                                                                            -1)
          )
      AND active = pkg_constants.con_activeflag_yes
      AND quote_site_service_id = v_quote_site_service_id;

   UPDATE order_line_item_detail_as_is
      SET active = pkg_constants.con_activeflag_no
    WHERE order_line_item_id IN (
             SELECT order_line_item_id
               FROM order_line_item_as_is
              WHERE quote_header_id = in_quoteheaderid
                AND (   site_id = in_siteid
                     OR (site_id IS NULL AND NVL (in_siteid, -1) = -1)
                    )
                AND quote_site_service_id = v_quote_site_service_id
                AND active = pkg_constants.con_activeflag_yes)
      AND active = pkg_constants.con_activeflag_yes;

   UPDATE order_line_item_as_is
      SET active = pkg_constants.con_activeflag_no
    WHERE quote_header_id = in_quoteheaderid
      AND (site_id = in_siteid OR (site_id IS NULL AND NVL (in_siteid, -1) =
                                                                            -1)
          )
      AND active = pkg_constants.con_activeflag_yes
      AND quote_site_service_id = v_quote_site_service_id;



/***********************************************/
/***********************************************/
/***** Deleting configuration ends here ***/
   x := 0;
   IF in_line_item.EXISTS (1) Then
   FOR j IN in_line_item.FIRST .. in_line_item.LAST
   LOOP
      v_row_found := 0;
      w := 0;

      IF in_line_item (j).o_line_item_detail_tbl.EXISTS (1)
      THEN
           v_in_line_item_detail.DELETE;
         FOR k IN
            in_line_item (j).o_line_item_detail_tbl.FIRST .. in_line_item (j).o_line_item_detail_tbl.LAST
         LOOP
            v_attribute_mapping_id :=in_line_item (j).o_line_item_detail_tbl (k).o_aid;
            v_order_count := 0;

            -- jay_debug('save_asset_fromBFGaaa','in_quoteheaderid'||in_quoteheaderid,'site_id'||in_siteid||'AID'||in_line_item (j).o_line_item_detail_tbl (k).o_aid||'in_line_item (j).o_part_type'||in_line_item (j).o_part_type||'Product_name'||in_line_item (j).o_product_name||'Fallback'||in_line_item (j).o_fallback||'part type'||in_line_item (j).o_part_type);
            SELECT COUNT (1)
              INTO v_order_count
              FROM attribute_mapping
             WHERE attribute_mapping_id = v_attribute_mapping_id
               AND UPPER (attribute_level) = 'ORDER';

            IF v_order_count > 0
            THEN
               v_in_line_item_detail.EXTEND;
               w := w + 1;

               SELECT order_line_item_details_obj
                         (in_line_item (j).o_line_item_detail_tbl (k).o_aid,
                          in_line_item (j).o_line_item_detail_tbl (k).o_config_level,
                          in_line_item (j).o_line_item_detail_tbl (k).o_value,
                          in_line_item (j).o_line_item_detail_tbl (k).o_qty,
                          in_line_item (j).o_line_item_detail_tbl (k).o_rowid,
                          in_line_item (j).o_line_item_detail_tbl (k).o_classic_element_ID,
                          in_line_item (j).o_line_item_detail_tbl (k).o_classic_element_name

                         )
                 INTO v_in_line_item_detail (w)
                 FROM DUAL;

               /*v_in_line_item_detail (w) :=
                 in_line_item (j).o_line_item_detail_tbl (k); */
               --in_line_item (j).o_line_item_detail_tbl.DELETE (k);
               v_row_found := 1;
            END IF;
         END LOOP;
      END IF;

      IF v_row_found = 1
      THEN
         x := x + 1;
         v_in_line_item.EXTEND;
         v_in_line_item (x) :=
            order_line_item_obj (in_line_item (j).o_pid,
                                 in_line_item (j).o_product_name,
                                 in_line_item (j).o_fallback,
                                 in_line_item (j).o_part_type,
                                 in_line_item (j).o_rowid,
                                 in_line_item (j).o_non_std_flag,
                                 v_in_line_item_detail,
                 in_line_item (j).o_site_id,
                               in_line_item (j).o_scode,
                             in_line_item (j).o_classic_element_id,
                             in_line_item (j).o_classic_element_name
                                );
      END IF;
   END LOOP;
   ELSE
     out_status := 0;
     out_errmsg := 'input array is empty';
   RETURN;

   END IF;

      /* commented this code as this functionality need to be discussed again
    select count(line_item_id)
    into v_as_is
    from quote_line_item_as_is
    where quote_header_id = in_quoteheaderid
     and  site_id = in_siteid
     and quote_site_service_id = v_quote_site_service_id;
   */

   --Insert into Test1 (Value,PID) Values(out_errmsg,1);

   if v_in_line_item.EXISTS (1) then
   --Insert into Test1 (Value,PID) Values(out_errmsg,1);
   /* Calling the below SP to save all order technical elements */
   pkg_quote.spi_config_order_as_is (in_quoteheaderid,
                                     in_siteid,
                                     in_service_name,
                                     v_in_line_item,
                                     'Order',
                                     in_createdby,
                                     out_status,
                                     out_errmsg
                                    );
if   out_status <>1  then
out_errmsg :=out_errmsg||'-spi_config_order_as_is failed';
return;
end if;

end if;

   --Insert into Test1 (Value,PID) Values(out_errmsg,2);
   /*Calling the below SP to save data into as is table. The same copy of data will go to Tobe tables as well   */
   pkg_quote.spi_config_modify_as_is_data
                     (in_quoteheaderid,
                      in_siteid,
                      in_line_item,
                      'Quote',
                      in_service_name,
                                      --              v_quote_site_service_id,
                      in_createdby,
                      out_status,
                      out_errmsg
                     );
if   out_status <>1  then
out_errmsg :=out_errmsg||'-spi_config_modify_as_is_data failed';
return;
end if;
   --   if (v_as_is = 0) then
   --Insert into Test1 (Value,PID) Values(out_errmsg,3);
   /*Calling the below SP to save data into tobe table. The same copy of data which is saved in as is tables  */
   pkg_quote.spi_config_modify_obj (in_quoteheaderid,
                                    in_siteid,
                                    in_line_item,
                                    in_service_name,
                                    'Quote',
                                    in_createdby,
                                    out_status,
                                    out_errmsg
                                   );
if   out_status <>1  then
out_errmsg :=out_errmsg||'-spi_config_modify_obj failed';
return;
end if;
--Insert into Test1 (Value,PID) Values(out_errmsg,4);
   --end if;
    BEGIN

FOR I IN (SELECT PART_type ,ROWID,fallback_type
          FROM line_item
          WHERE Quote_header_id = in_quoteheaderid
          AND Site_id= in_siteid
          AND product_name ='BT CPE'
          and upper(part_type) <> 'BUNDLE'
          ORDER BY PART_type) LOOP
UPDATE line_item
SET row_id = (SELECT NVL(MAX(Row_ID),0) +1
              FROM line_item
              WHERE Quote_header_id = in_quoteheaderid
              AND Site_id= in_siteid
              AND product_name ='BT CPE'
              AND part_type=I.part_type
              and fallback_type = i.fallback_type
              and upper(part_type) <> 'BUNDLE')
WHERE Quote_header_id = in_quoteheaderid
AND Site_id= in_siteid
AND product_name ='BT CPE'
and fallback_type = i.fallback_type
AND part_type = I.part_type
and upper(part_type) <> 'BUNDLE'
AND ROWID = I.ROWID
and row_id is null;

END LOOP;
END;

-- to save row_id in asis table
  BEGIN

FOR I IN (SELECT PART_type ,ROWID,fallback_type
          FROM quote_line_item_as_is
          WHERE Quote_header_id = in_quoteheaderid
          AND Site_id= in_siteid
          AND product_name ='BT CPE'
          and upper(part_type) <> 'BUNDLE'
          ORDER BY PART_type) LOOP
UPDATE quote_line_item_as_is
SET row_id = (SELECT NVL(MAX(Row_ID),0) +1
              FROM quote_line_item_as_is
              WHERE Quote_header_id = in_quoteheaderid
              AND Site_id= in_siteid
              AND product_name ='BT CPE'
              AND part_type=I.part_type
              and fallback_type = i.fallback_type
              and upper(part_type) <> 'BUNDLE')
WHERE Quote_header_id = in_quoteheaderid
AND Site_id= in_siteid
AND product_name ='BT CPE'
and fallback_type = i.fallback_type
AND part_type = I.part_type
and upper(part_type) <> 'BUNDLE'
AND ROWID = I.ROWID
and row_id is null;

END LOOP;
END;

EXCEPTION
   WHEN OTHERS
   THEN
      out_status := pkg_constants.con_status_failure;
      out_errmsg := SQLERRM;
-- ROLLBACK;
END;

PROCEDURE spi_config_order_as_is(
    in_quoteheaderid IN order_header.quote_header_id%TYPE,
    in_siteid        IN site.site_id%TYPE,
    in_service_name  IN quote_site_service.service_name%TYPE,
    in_attributelist  IN order_line_item_tbl,
    in_attributelevel IN attribute_mapping.attribute_level%TYPE,
    in_createdby IN order_line_item_as_is.created_by%TYPE,
    out_status out NUMBER,
    out_errmsg out VARCHAR2 )
AS
  v_prodid order_line_item_as_is.product_id%TYPE;
  v_prodname order_line_item_as_is.product_name%TYPE;
  v_fallback order_line_item_as_is.fallback_type%TYPE;
  v_rowid order_line_item_as_is.row_id%TYPE;
  v_tattrid pkg_order.t_attrmapid;
  v_tconfiglevel pkg_order.t_configlevel;
  v_tattrval pkg_order.t_value;
  v_qty pkg_order.t_qty;
  v_lineitemid order_line_item_as_is.order_line_item_id%TYPE;
  v_lineitemids VARCHAR2 (30000);
  v_attrlevel attribute_mapping.attribute_level%TYPE;
  v_configlevel attribute_mapping.config_level%TYPE;
  v_rowcount NUMBER;
  v_prodattr VARCHAR2 (30000);
  v_proddet  VARCHAR2 (30000);
  v_attrdet  VARCHAR2 (30000);
  v_attrcnt  NUMBER;
  v_curdate DATE := SYSDATE;
  v_quote_site_service_id NUMBER (16, 0);
  v_order_line_item order_line_item_tbl                  := order_line_item_tbl();
  v_order_line_item_detail_tbl order_line_item_detail_tbl:= order_line_item_detail_tbl();
TYPE t_rowid
IS
  TABLE OF order_line_item_detail_as_is.row_id%TYPE INDEX BY binary_integer;
  v_rowid1 t_rowid;
  v_classic_element_id order_line_item_as_is.classic_element_id%TYPE;
  v_classic_element_name order_line_item_as_is.classic_element_name%TYPE;
  v_classic_element_id_detail t_classic_element_id;
  v_classic_element_name_detail t_classic_element_name;
BEGIN
  IF (in_attributelist.EXISTS (1)) THEN
    BEGIN
      BEGIN
        SELECT quote_site_service_id
        INTO v_quote_site_service_id
        FROM quote_site_service qss
        WHERE qss.quote_header_id            = in_quoteheaderid
        AND ( qss.site_id                    = in_siteid
        OR (qss.site_id                     IS NULL
        AND nvl (in_siteid, -1)              = -1) )
        AND ( upper (service_name)           = upper (in_service_name)
        OR ( trim (in_service_name)         IS NULL
        AND nvl (trim (in_service_name), -1) = -1 ) );
      exception
      WHEN no_data_found THEN
        out_status := pkg_constants.con_status_failure;
        out_errmsg := 'Could not find quote_site_service_id for this order';
        RETURN;
      END;
      FOR j IN in_attributelist.FIRST .. in_attributelist.LAST
      loop
        BEGIN
          v_prodid   := in_attributelist (j).o_pid;
          v_prodname := in_attributelist (j).o_product_name;
          v_fallback := in_attributelist (j).o_fallback;

          IF v_prodid =1012437 THEN
            v_rowid  :=in_attributelist (j).o_rowid;
          ELSE
            SELECT decode(in_attributelist (j).o_rowid,0,NULL,in_attributelist (j).o_rowid)
            INTO v_rowid
            FROM dual;
          END IF;

          v_classic_element_id   := in_attributelist (j).o_classic_element_id;
          v_classic_element_name := in_attributelist (j).o_classic_element_name;
          SELECT count (*)
          INTO v_rowcount
          FROM order_line_item_as_is
          WHERE quote_header_id     = in_quoteheaderid
          AND site_id               = in_siteid
          AND upper (product_name)  = upper (v_prodname)
          AND upper (fallback_type) = upper (v_fallback)
          AND active                = pkg_constants.con_activeflag_yes
          AND quote_site_service_id = v_quote_site_service_id;
          IF (v_rowcount            = 0) THEN
            BEGIN
              INSERT
              INTO order_line_item_as_is
                (
                  order_line_item_id,
                  quote_header_id,
                  site_id,
                  product_id,
                  product_name,
                  fallback_type,
                  quantity,
                  active,
                  created_by,
                  created_date,
                  row_id,
                  quote_site_service_id,
                  classic_element_id ,
                  classic_element_name
                )
                VALUES
                (
                  order_line_item_id.nextval,
                  in_quoteheaderid,
                  in_siteid,
                  v_prodid,
                  v_prodname,
                  v_fallback,
                  DEFAULT,
                  pkg_constants.con_activeflag_yes,
                  in_createdby,
                  v_curdate,
                  v_rowid,
                  v_quote_site_service_id,
                  v_classic_element_id ,
                  v_classic_element_name
                )
              RETURNING order_line_item_id
              INTO v_lineitemid;
            END;
          ELSE
            BEGIN
              IF(v_rowid IS NOT NULL)
                /*--for VPN Connection*/
                THEN
                BEGIN
                  SELECT count (*)
                  INTO v_rowcount
                  FROM order_line_item_as_is
                  WHERE quote_header_id     = in_quoteheaderid
                  AND site_id               = in_siteid
                  AND upper (product_name)  = upper (v_prodname)
                  AND upper (fallback_type) = upper (v_fallback)
                  AND created_date          < v_curdate
                  AND modified_by          IS NULL
                  AND active                = pkg_constants.con_activeflag_yes
                  AND quote_site_service_id = v_quote_site_service_id;
                  IF (v_rowcount            > 0) THEN
                    /*--inactivate all existing VPN line items created previously*/
                    UPDATE order_line_item_as_is
                    SET active                = pkg_constants.con_activeflag_no,
                      modified_by             = in_createdby,
                      modified_date           = v_curdate
                    WHERE quote_header_id     = in_quoteheaderid
                    AND site_id               = in_siteid
                    AND product_name          = v_prodname
                    AND created_date          < v_curdate
                    AND modified_by          IS NULL
                    AND quote_site_service_id = v_quote_site_service_id;
                  END IF;
                  --Insert into Test1 (Value,PID) Values('Test',200);
                  /*--insert VPN line items*/
                  INSERT
                  INTO order_line_item_as_is
                    (
                      order_line_item_id,
                      quote_header_id,
                      site_id,
                      product_id,
                      product_name,
                      fallback_type,
                      quantity,
                      active,
                      created_by,
                      created_date,
                      row_id,
                      quote_site_service_id,
                      classic_element_id ,
                      classic_element_name
                    )
                    VALUES
                    (
                      order_line_item_id.nextval,
                      in_quoteheaderid,
                      in_siteid,
                      v_prodid,
                      v_prodname,
                      v_fallback,
                      DEFAULT,
                      pkg_constants.con_activeflag_yes,
                      in_createdby,
                      v_curdate,
                      v_rowid,
                      v_quote_site_service_id,
                      v_classic_element_id ,
                      v_classic_element_name
                    )
                  RETURNING order_line_item_id
                  INTO v_lineitemid;
                END;
              END IF;
              /*--select existing order_line_item_stg to insert into order_line_item_detail_stg*/
              BEGIN
                SELECT order_line_item_id
                INTO v_lineitemid
                FROM order_line_item_as_is
                WHERE quote_header_id                     = in_quoteheaderid
                AND site_id                               = in_siteid
                AND upper (product_name)                  = upper (v_prodname)
                AND upper (fallback_type)                 = upper (v_fallback)
                AND (nvl(decode(row_id,0,NULL,row_id),-1) = nvl(v_rowid,-1)
                OR row_id                                IS NULL)
                AND active                                = pkg_constants.con_activeflag_yes
                AND quote_site_service_id                 = v_quote_site_service_id;
              exception
              WHEN no_data_found THEN
                out_status := pkg_constants.con_status_failure;
                out_errmsg :=sqlerrm||'EXP 1 in_quoteheaderid'||in_quoteheaderid||'in_siteid'||
                            in_siteid||'v_prodname'||v_prodname||'v_fallback'||v_fallback||'v_rowid'||v_rowid;
                RETURN;
              WHEN too_many_rows THEN
                out_status := pkg_constants.con_status_failure;
                out_errmsg :=sqlerrm||'EXP 1 in_quoteheaderid'||in_quoteheaderid||'in_siteid'
                            ||in_siteid||'v_prodname'||v_prodname||'v_fallback'||v_fallback||'v_rowid'||v_rowid;
                RETURN;
              END;
            END;
          END IF;
          v_order_line_item_detail_tbl :=in_attributelist (j).o_order_line_item_detail_tbl;
          v_tattrid.DELETE;
          v_tconfiglevel.DELETE;
          v_tattrval.DELETE;
          v_qty.DELETE;
          v_rowid1.DELETE;
          v_classic_element_id_detail.DELETE;
          v_classic_element_name_detail.DELETE;

          IF in_attributelist (j).o_order_line_item_detail_tbl.EXISTS (1) THEN
            FOR i IN v_order_line_item_detail_tbl.FIRST .. v_order_line_item_detail_tbl.LAST
            loop
              v_tattrid (i)                     := v_order_line_item_detail_tbl (i).o_aid;
              v_tconfiglevel (i)                := v_order_line_item_detail_tbl (i).o_config_level;
              v_tattrval (i)                    := v_order_line_item_detail_tbl (i).o_value;
              v_qty (i)                         := v_order_line_item_detail_tbl (i).o_qty;
              v_classic_element_id_detail (i)   := v_order_line_item_detail_tbl (i).o_classic_element_id;
              v_classic_element_name_detail (i) :=v_order_line_item_detail_tbl (i).o_classic_element_name;
              ----Change  by suman
              IF v_prodid     =1012437 THEN
                v_rowid1 (i) :=v_order_line_item_detail_tbl (i).o_rowid;
              ELSE
                SELECT decode(v_order_line_item_detail_tbl (i).o_rowid,0,NULL,v_order_line_item_detail_tbl (i).o_rowid)
                INTO v_rowid1 (i)
                FROM dual;
              END IF;
            END loop;
            /*--update all previous order_line_item_details for the exisiting*/
            /*--order_line_items*/
            ----Modified by SRK on 23-Feb for improve the performance
            forall i IN in_attributelist (j).o_order_line_item_detail_tbl.FIRST .. in_attributelist (j ).o_order_line_item_detail_tbl.LAST
            UPDATE order_line_item_detail_as_is OLD
            SET active                = pkg_constants.con_activeflag_no,
              modified_date           = v_curdate,
              modified_by             = in_createdby
            WHERE order_line_item_id IN
              (SELECT order_line_item_id
              FROM order_line_item_as_is
              WHERE quote_header_id     = in_quoteheaderid
              AND site_id               = in_siteid
              AND upper (product_name)  = upper (v_prodname)
              AND (row_id               = v_rowid
              OR row_id                IS NULL)
              AND quote_site_service_id = v_quote_site_service_id
              )
            AND EXISTS
              (SELECT 1
              FROM attribute_mapping am
              WHERE upper (config_level)   = upper (v_tconfiglevel (i))
              AND upper (attribute_level)  = upper (in_attributelevel)
              AND OLD.attribute_mapping_id = am.attribute_mapping_id
              )
            AND created_date   < v_curdate
            AND modified_date IS NULL;
            /*--insert into order_line-item_detail all the attributes after making*/
            /*--existing attributes as inactive*/
            forall i IN v_order_line_item_detail_tbl.FIRST .. v_order_line_item_detail_tbl.LAST
            INSERT
            INTO order_line_item_detail_as_is
              (
                order_line_item_det_id,
                order_line_item_id,
                attribute_mapping_id,
                VALUE,
                active,
                created_by,
                created_date,
                quantity,
                row_id, -- Arch added ,MX
                classic_element_id,
                classic_element_name
              )
              VALUES
              (
                order_line_item_det_id.nextval,
                v_lineitemid,
                v_tattrid (i),
                v_tattrval (i),
                pkg_constants.con_activeflag_yes,
                in_createdby,
                v_curdate,
                v_qty (i),
                DECODE(v_prodid,1012437,v_rowid1 (i),NULL),
                v_classic_element_id_detail(i),
                v_classic_element_name_detail(i)
              );
          END IF;
          out_status := pkg_constants.con_status_success;
        END;
      END loop;
    END;
  END IF;
  out_status := pkg_constants.con_status_success;
exception
WHEN others THEN
  out_status := pkg_constants.con_status_failure;
  out_errmsg := sqlerrm;
END;


PROCEDURE spi_config_modify_as_is_data(
in_quoteheaderid  IN quote_header.quote_header_id%TYPE,
in_siteid         IN site.site_id%TYPE,
in_line_item_tbl  IN line_item_tbl,
in_attributelevel IN VARCHAR2,
in_service_name   IN VARCHAR2,
in_createdby      IN quote_site_service.created_by%TYPE,
out_status out NUMBER,
out_errmsg out VARCHAR2 )
AS
v_prodid line_item.product_id%TYPE;
v_prodname line_item.product_name%TYPE;
v_fallback line_item.fallback_type%TYPE;
v_parttype line_item.part_type%TYPE;
v_tattrid t_attrmapid;
v_tconfiglevel t_configlevel;
v_tattrval t_value;
v_qty t_qty;
v_rowid t_rowid;
/*Start: Added by Amit for GHUCS MODIFY */
v_bfg_inventry_id t_invid;
v_pkg_instance_id quote_line_item_as_is.pkg_instance_id%TYPE;
/*End: Added by Amit for GHUCS MODIFY */
v_no_voice_channel           t_no_voice_channel;--Added by Khader for GHUCS R15
v_max_qty                    t_max_qty;--Added by Nagendra for GHUCS R16 Billing
v_lineitemid line_item.line_item_id%TYPE;
v_lineitemids VARCHAR2 (30000);
v_attrlevel attribute_mapping.attribute_level%TYPE;
v_configlevel attribute_mapping.config_level%TYPE;
v_rowcount NUMBER;
v_prodattr VARCHAR2 (30000);
v_proddet  VARCHAR2 (30000);
v_attrdet  VARCHAR2 (30000);
v_attrcnt  NUMBER;
v_curdate TIMESTAMP;
v_flag char (1) := '1';
v_existintlineitemid line_item.line_item_id%TYPE;
v_non_std_flag VARCHAR2 (2);
v_bidcount_pr  NUMBER := 0;
v_bidcount_sec NUMBER := 0;
v_caseflag     char (1);
v_quote_site_service_id quote_site_service.quote_site_service_id%TYPE;
in_createddate quote_site_service.created_date%TYPE := SYSDATE;
v_to_be_record_exist NUMBER (3);
v_varchar2_ntt varchar2_ntt                      := varchar2_ntt();
v_line_item_tbl line_item_tbl                    := line_item_tbl();
v_line_item_detail_tbl line_item_detail_tbl      := line_item_detail_tbl();
v_in_line_item order_line_item_tbl               := order_line_item_tbl();
v_in_line_item_detail order_line_item_detail_tbl := order_line_item_detail_tbl();
v_order_count NUMBER (3);
v_attribute_mapping_id attribute_mapping.attribute_mapping_id%TYPE;
v_row_found NUMBER (3) := 0;
w           NUMBER (10);
x           NUMBER (10);
in_line_item line_item_tbl := line_item_tbl();
v_count NUMBER (10);
l       NUMBER := 0;
v_classic_element_id quote_line_item_as_is.classic_element_id%TYPE;
v_classic_element_name quote_line_item_as_is.classic_element_name%TYPE;
v_classic_element_id_detail t_classic_element_id;
v_classic_element_name_detail t_classic_element_name;
v_config_level VARCHAR2(100):='';
v_non_std_fag_1 t_classic_element_name;
BEGIN
in_line_item := in_line_item_tbl;

SELECT SYSDATE
INTO v_curdate
FROM dual;

BEGIN
SELECT quote_site_service_id
INTO v_quote_site_service_id
FROM quote_site_service qss
WHERE qss.quote_header_id            = in_quoteheaderid
AND ( qss.site_id                    = in_siteid
OR (qss.site_id                     IS NULL
AND nvl (in_siteid, -1)              = -1) )
AND ( upper (service_name)           = upper (in_service_name)
OR ( trim (in_service_name)         IS NULL
AND nvl (trim (in_service_name), -1) = -1 ) );
exception
WHEN no_data_found THEN
SELECT quote_site_service_id.nextval
  INTO v_quote_site_service_id FROM dual;
INSERT
INTO quote_site_service
  (
    quote_site_service_id,
    quote_header_id,
    site_id,
    created_by,
    created_date,
    service_name
  )
  VALUES
  (
    v_quote_site_service_id,
    in_quoteheaderid,
    in_siteid,
    in_createdby,
    SYSDATE,
    upper (in_service_name)
  );
WHEN others THEN
out_status := 0;
RETURN;
END;

IF in_line_item.EXISTS(1)    THEN
FOR j IN in_line_item.FIRST .. in_line_item.LAST
loop
  v_lineitemid := NULL;
  v_flag       := '1';
  IF( in_line_item (j).o_line_item_detail_tbl IS NOT NULL)         THEN
    v_prodid := in_line_item(j).o_pid;
    v_prodname := in_line_item(j).o_product_name;
    v_fallback := in_line_item(j).o_fallback;
    v_parttype := in_line_item(j).o_part_type;
    v_non_std_flag := in_line_item(j).o_non_std_flag;
    v_pkg_instance_id := in_line_item(j).o_pkg_instance_id;
    --Added By Amit For GHUCS MODIFY
    v_classic_element_id := in_line_item(j).o_classic_element_id;
    v_classic_element_name := in_line_item(j).o_classic_element_name;
    IF (UPPER(TRIM(v_prodname)) = 'BT IVPN2 VPN CONNECTION') THEN
    v_classic_element_id := '';
    v_classic_element_name := '';
    END IF;
    /*--validation if fallback is null*/
    IF( v_fallback IS NULL )
      THEN
      BEGIN
        v_fallback := 'Primary';
      END;
    END IF;
    /*--validation for parttype incase of CPE*/
    IF(upper (v_prodname) LIKE '%CPE%')
      THEN
      IF
        (
          v_parttype IS NULL
        )
        THEN
        BEGIN
          out_status := pkg_constants.con_status_failure;
          out_errmsg := 'Part Type cannot be null for CPE';
          v_flag     := '0';
        END;
      END IF;
    END IF;
    IF(v_flag = '1')
      THEN
      BEGIN
        /*-- Check if record exists for the current product in line item*/
        SELECT count (*)
        INTO v_rowcount
        FROM quote_line_item_as_is li
        WHERE quote_header_id  = in_quoteheaderid
        AND ( site_id          = in_siteid
        OR (site_id           IS NULL
        AND nvl (in_siteid, 0) = 0) )
         AND upper (product_name)  = upper (v_prodname)
        AND upper (fallback_type) = upper (v_fallback)
        AND active                = pkg_constants.con_activeflag_yes
        AND quote_site_service_id = v_quote_site_service_id;
                /*--If record does not exist, create a  line item*/
        IF (v_rowcount = 0) THEN
          /*-- Check if record exists for the current product in line item*/
          INSERT
          INTO quote_line_item_as_is
            (
              line_item_id,
              quote_header_id,
              site_id,
              product_id,
              product_name,
              fallback_type,
              part_type,
              quantity,
              active,
              /*--non_std_flag,*/
              created_by,
              created_date,
              quote_site_service_id
              /*Start: Added by Amit for GHUCS MODIFY*/
              ,
              pkg_instance_id,
              /*End: Added by Amit for GHUCS MODIFY*/
              classic_element_id,
              classic_element_name
            )
            VALUES
            (
              line_item_id.nextval,
              in_quoteheaderid,
              in_siteid,
              v_prodid,
              v_prodname,
              v_fallback,
              v_parttype,
              DEFAULT,
              pkg_constants.con_activeflag_yes,
              /*-- v_non_std_flag,*/
              in_createdby,
              v_curdate,
              v_quote_site_service_id
              /*Start: Added by Amit for GHUCS MODIFY*/
              ,
              v_pkg_instance_id,
              /*End: Added by Amit for GHUCS MODIFY*/
              v_classic_element_id,
              v_classic_element_name
            )
          RETURNING line_item_id
          INTO v_lineitemid;
        ELSE
          BEGIN
            /*--Logic to incorporate CPE parts Insert/ Update*/
            IF ( v_parttype IS NOT NULL)
              THEN
              BEGIN
                /*--added if condition on 16/1/2010 to update*/
                /*--quote_line_item_as_is for part type other than Bundle*/
                IF(upper (v_parttype) <> 'BUNDLE')
                  THEN
                  BEGIN
                    /*--if it is not bundle, update all previous records*/
                    /*-- and insert new record*/
                    UPDATE quote_line_item_as_is li
                    SET active                = pkg_constants.con_activeflag_no,
                      modified_date           = v_curdate
                    WHERE ( part_type        IS NOT NULL
                    OR part_type             <> '' )
                    AND quote_header_id       = in_quoteheaderid
                    AND ( site_id             = in_siteid
                    OR ( site_id             IS NULL
                    AND nvl (in_siteid, 0)    = 0 ) )
                    AND quote_site_service_id = v_quote_site_service_id
                    AND product_name          = v_prodname
                    AND created_date          < v_curdate
                    AND upper (fallback_type) = upper (v_fallback)
                    AND upper (part_type)     = upper (trim (v_parttype))
                      /*-- AND product_id = v_prodid*/
                    AND modified_date IS NULL;

                    INSERT
                    INTO quote_line_item_as_is
                      (
                        line_item_id,
                        quote_header_id,
                        site_id,
                        product_id,
                        product_name,
                        fallback_type,
                        part_type,
                        quantity,
                        active,
                        created_by,
                        created_date,
                        quote_site_service_id
                        /*Start: Added by Amit for GHUCS MODIFY*/
                        ,
                        pkg_instance_id,
                        /*End: Added by Amit for GHUCS MODIFY*/
                        classic_element_id,
                        classic_element_name
                      )
                      VALUES
                      (
                        line_item_id.nextval,
                        in_quoteheaderid,
                        in_siteid,
                        v_prodid,
                        v_prodname,
                        v_fallback,
                        v_parttype,
                        DEFAULT,
                        pkg_constants.con_activeflag_yes,
                        in_createdby,
                        v_curdate,
                        v_quote_site_service_id
                        /*Start: Added by Amit for GHUCS MODIFY*/
                        ,
                        v_pkg_instance_id,
                        /*End: Added by Amit for GHUCS MODIFY*/
                        v_classic_element_id,
                        v_classic_element_name
                      )
                    RETURNING line_item_id
                    INTO v_lineitemid;
                  END;
                ELSE
                  BEGIN
                    /*--For a bundle, check if it is existing*/
                    SELECT count (*)
                    INTO v_rowcount
                    FROM quote_line_item_as_is li
                    WHERE quote_header_id     = in_quoteheaderid
                    AND ( site_id             = in_siteid
                    OR ( site_id             IS NULL
                    AND nvl (in_siteid, 0)    = 0 ) )
                    AND quote_site_service_id = v_quote_site_service_id
                    AND product_name          = v_prodname
                    AND active                = pkg_constants.con_activeflag_yes
                    AND upper (fallback_type) = upper (v_fallback)
                    AND created_date          < v_curdate
                    AND product_id           <> v_prodid
                    AND modified_date        IS NULL;


                    IF (v_rowcount > 0) THEN
                      BEGIN
                        /*--A bundle exists with different product id, so soft delete and*/
                        /*--then insert a new line item*/
                        UPDATE quote_line_item_as_is li
                        SET active                = pkg_constants.con_activeflag_no,
                          modified_date           = v_curdate
                        WHERE upper (part_type)   = 'BUNDLE'
                        AND quote_header_id       = in_quoteheaderid
                        AND ( site_id             = in_siteid
                        OR ( site_id             IS NULL
                        AND nvl (in_siteid, 0)    = 0 ) )
                        AND quote_site_service_id = v_quote_site_service_id
                        AND product_name          = v_prodname
                        AND created_date          < v_curdate
                        AND upper (fallback_type) = upper (v_fallback)
                        AND product_id           <> v_prodid
                        AND modified_date        IS NULL;
                        /*--previous bundle with different product id*/
                        /*-- has been to inactive. for same product id, check*/
                        /*--if bundle is present*/
                        SELECT count (*)
                        INTO v_rowcount
                        FROM quote_line_item_as_is li
                        WHERE quote_header_id     = in_quoteheaderid
                        AND ( site_id             = in_siteid
                        OR ( site_id             IS NULL
                        AND nvl (in_siteid, 0)    = 0 ) )
                        AND quote_site_service_id = v_quote_site_service_id
                        AND product_name          = v_prodname
                        AND active                = pkg_constants.con_activeflag_yes
                        AND upper (fallback_type) = upper (v_fallback)
                        AND upper (part_type)     = upper (v_parttype)
                          AND modified_date IS NULL;
                        /*--if not present, insert new record*/
                        /*--else select existing line item*/
                        IF (v_rowcount = 0) THEN
                          INSERT
                          INTO quote_line_item_as_is
                            (
                              line_item_id,
                              quote_header_id,
                              site_id,
                              product_id,
                              product_name,
                              fallback_type,
                              part_type,
                              quantity,
                              active,
                              created_by,
                              created_date,
                              quote_site_service_id,
                              pkg_instance_id,
                              classic_element_id,
                              classic_element_name
                            )
                            VALUES
                            (
                              line_item_id.nextval,
                              in_quoteheaderid,
                              in_siteid,
                              v_prodid,
                              v_prodname,
                              v_fallback,
                              v_parttype,
                              DEFAULT,
                              pkg_constants.con_activeflag_yes,
                              in_createdby,
                              v_curdate,
                              v_quote_site_service_id,
                              v_pkg_instance_id,
                              v_classic_element_id,
                              v_classic_element_name
                            )
                          RETURNING line_item_id
                          INTO v_lineitemid;
                        ELSE
                          BEGIN
                            SELECT line_item_id
                            INTO v_lineitemid
                            FROM quote_line_item_as_is li
                            WHERE quote_header_id     = in_quoteheaderid
                            AND ( site_id             = in_siteid
                            OR ( site_id             IS NULL
                            AND nvl (in_siteid, 0)    = 0 ) )
                            AND quote_site_service_id = v_quote_site_service_id
                            AND product_name          = v_prodname
                            AND active                = pkg_constants.con_activeflag_yes
                            AND upper (fallback_type) = upper (v_fallback)
                            AND upper (part_type)     = upper (v_parttype)
                              /*--AND created_date < v_curdate*/
                              /*--AND product_id <> v_prodid*/
                            AND modified_date IS NULL;
                          exception
                          WHEN no_data_found THEN
                            out_status := pkg_constants.con_status_failure;
                            out_errmsg :=sqlerrm||'EXP NUMBER 8 in_quoteheaderid'||in_quoteheaderid||'in_siteid'||in_siteid||'v_prodname'||v_prodname||'v_fallback'||v_fallback||'v_parttype'||v_parttype;
                            RETURN;
                          WHEN too_many_rows THEN
                            out_status := pkg_constants.con_status_failure;
                            out_errmsg :=sqlerrm||'EXP NUMBER 8 in_quoteheaderid'||in_quoteheaderid||'in_siteid'||in_siteid||'v_prodname'||v_prodname||'v_fallback'||v_fallback||'v_parttype'||v_parttype;
                            RETURN;
                          END;
                        END IF;
                      END;
                    ELSE
                      BEGIN
                        /*--added for no_data_found error starts*/
                        /*--previous bundle saved also has same product id*/
                        SELECT line_item_id
                        INTO v_lineitemid
                        FROM quote_line_item_as_is li
                        WHERE quote_header_id     = in_quoteheaderid
                        AND site_id               = in_siteid
                        AND quote_site_service_id = v_quote_site_service_id
                        AND upper (product_name)  = upper (v_prodname)
                        AND upper (fallback_type) = upper (v_fallback)
                        AND active                = pkg_constants.con_activeflag_yes
                        AND product_id            = v_prodid
                        AND upper (part_type)     = upper (v_parttype);
                        --added on 14th aug 2010 jay
                      exception
                      WHEN no_data_found THEN
                        BEGIN
                          SELECT line_item_id
                          INTO v_lineitemid
                          FROM quote_line_item_as_is
                          WHERE quote_header_id                    = in_quoteheaderid
                          AND ( site_id                            = in_siteid
                          OR ( site_id                            IS NULL
                          AND nvl (in_siteid, 0)                   = 0 ) )
                          AND upper (product_name)                 = upper (v_prodname)
                          AND upper (fallback_type)                = upper (v_fallback)
                          AND active                               = pkg_constants.con_activeflag_yes
                          AND nvl (trim (upper (part_type)), '0' ) = nvl (trim (upper (v_parttype) ), '0' )
                          AND product_id                           =
                            (SELECT DISTINCT product_id
                            FROM quote_line_item_as_is
                            WHERE quote_header_id      = in_quoteheaderid
                            AND ( site_id              = in_siteid
                            OR ( site_id              IS NULL
                            AND nvl (in_siteid, 0 )    = 0 ) )
                            AND upper (product_name )  = upper (v_prodname )
                            AND upper (fallback_type ) = upper (v_fallback )
                            AND active                 = pkg_constants.con_activeflag_yes
                            AND upper (part_type )     = upper (trim (v_parttype ) )
                            );
                        exception
                        WHEN no_data_found THEN
                          out_status := pkg_constants.con_status_failure;
                          out_errmsg :=sqlerrm||'EXP NUMBER 9 in_quoteheaderid'||in_quoteheaderid||'in_siteid'||in_siteid||'v_prodname'||v_prodname||'v_fallback'||v_fallback||'v_parttype'||v_parttype;
                          RETURN;
                        WHEN too_many_rows THEN
                          out_status := pkg_constants.con_status_failure;
                          out_errmsg :=sqlerrm||'EXP NUMBER 9 in_quoteheaderid'||in_quoteheaderid||'in_siteid'||in_siteid||'v_prodname'||v_prodname||'v_fallback'||v_fallback||'v_parttype'||v_parttype;
                          RETURN;
                        END;
                      END;
                      /*--added for no_data_found error ends*/
                    END IF;
                  END;
                END IF;
              END;
            ELSE
              BEGIN
                /*--for non - BT CPE products*/
                SELECT line_item_id
                INTO v_lineitemid
                FROM quote_line_item_as_is li
                WHERE quote_header_id     = in_quoteheaderid
                AND ( site_id             = in_siteid
                OR ( site_id             IS NULL
                AND nvl (in_siteid, 0)    = 0 ) )
                AND quote_site_service_id = v_quote_site_service_id
                AND upper (product_name)  = upper (v_prodname)
                AND upper (fallback_type) = upper (v_fallback)
                AND active                = pkg_constants.con_activeflag_yes
                AND product_id            = v_prodid;
                --excep number 10
              exception
              WHEN no_data_found THEN
                out_status := pkg_constants.con_status_failure;
                out_errmsg :=sqlerrm||'EXP NUMBER 10 in_quoteheaderid'||in_quoteheaderid||'in_siteid'||in_siteid||'v_prodname'||v_prodname||'v_fallback'||v_fallback||'v_prodid'||v_prodid;
                RETURN;
              WHEN too_many_rows THEN
                out_status := pkg_constants.con_status_failure;
                out_errmsg :=sqlerrm||'EXP NUMBER 10 in_quoteheaderid'||in_quoteheaderid||'in_siteid'||in_siteid||'v_prodname'||v_prodname||'v_fallback'||v_fallback||'v_prodid'||v_prodid;
                RETURN;
              END;
            END IF;
               /*----May be a performance bottleneck!*/
            /*--collect line_item_ids to update line_item_detail*/
            IF (instr (v_lineitemids, ',', 1) = 0) THEN
              v_lineitemids                  := v_lineitemids || ',';
            END IF;
          END;
        END IF;
        /*--get the individual parameters from the input string*/
        l := 0;
        v_tattrid.DELETE;
        v_tconfiglevel.DELETE;
        v_tattrval.DELETE;
        v_qty.DELETE;
        v_rowid.DELETE;
         v_no_voice_channel.delete;    --added by Khader for GHUCS R15
        v_classic_element_id_detail.DELETE;
        v_classic_element_name_detail.DELETE;
        v_non_std_fag_1.DELETE;
        v_max_qty.delete;    --added by Nagendra for GHUCS R16 Billing
        IF in_line_item (j).o_line_item_detail_tbl.EXISTS (1) THEN
          FOR k IN in_line_item (j).o_line_item_detail_tbl.FIRST .. in_line_item (j).o_line_item_detail_tbl.LAST
          loop
            SELECT count (1)
            INTO v_count
            FROM attribute_mapping
            WHERE attribute_mapping_id  = in_line_item (j).o_line_item_detail_tbl (k).o_aid
            AND upper (attribute_level) = 'ORDER';
            IF v_count                  = 0 THEN
              l                        := l + 1;
              v_config_level           :='';
              v_non_std_flag           :='';
              SELECT config_level
              INTO v_config_level
              FROM attribute_mapping
              WHERE attribute_mapping_id         = in_line_item (j).o_line_item_detail_tbl (k).o_aid;
              IF ( upper (trim (v_config_level)) = 'CONFIGURATION - PORT' OR
                  upper (trim (v_config_level)) = 'CONFIGURATION - CPE' OR
                  upper (trim (v_config_level)) = 'CONFIGURATION - ACCESS' ) THEN
                v_non_std_flag                  := 'N';
              ELSE
                v_non_std_flag := '';
              END IF;
              v_non_std_fag_1(l) :=v_non_std_flag;
              v_tattrid (l)      := in_line_item (j).o_line_item_detail_tbl (k).o_aid;
              v_tconfiglevel (l) := in_line_item (j).o_line_item_detail_tbl (k).o_config_level;
              v_tattrval (l)     := in_line_item (j).o_line_item_detail_tbl (k).o_value;
              v_qty (l)          := in_line_item (j).o_line_item_detail_tbl (k).o_qty;
              /*Start: Added by Amit for GHUCS MODIFY */
              v_bfg_inventry_id (l) := in_line_item (j).o_line_item_detail_tbl (k).o_bfg_inventory_id;
              /*END: Added by Amit for GHUCS MODIFY */
     /*Start: Added by Khader for GHUCS R15 */
                        v_no_voice_channel (l) :=
                               in_line_item (j).o_line_item_detail_tbl (k).o_no_voice_channel;
                     /*End: Added by Khader for GHUCS R15  */
               /*Start: Added by Nagendra for GHUCS R16 Billing */
                        v_max_qty (l) :=
                               in_line_item (j).o_line_item_detail_tbl (k).o_max_qty;
                     /*End: Added by Nagendra for GHUCS R16 Billing  */
              v_classic_element_id_detail (l)   := in_line_item (j).o_line_item_detail_tbl (k).o_classic_element_id;
              v_classic_element_name_detail (l) := in_line_item (j).o_line_item_detail_tbl (k).o_classic_element_name;
              IF v_prodid                        =1012437 THEN
                v_rowid (l)                     :=in_line_item (j).o_line_item_detail_tbl (k).o_rowid;
              ELSE
                SELECT decode(in_line_item (j).o_line_item_detail_tbl (k).o_rowid,0,NULL, in_line_item (j).o_line_item_detail_tbl (k).o_rowid)
                INTO v_rowid (l)
                FROM dual;
              END IF;
            END IF;
            v_count := 0;
          END loop;

          /*--update active status for all attributes in line_item_detail*/
          /*--for the given product and given config level and attribute level*/
          forall i IN v_tconfiglevel.FIRST .. v_tconfiglevel.LAST
          UPDATE quote_line_item_detail_as_is ld
          SET active          = pkg_constants.con_activeflag_no,
              modified_date     = v_curdate,
              modified_by       = in_createdby
          WHERE line_item_id IN
            (SELECT line_item_id
            FROM quote_line_item_as_is
            WHERE quote_header_id     = in_quoteheaderid
            AND ( site_id             = in_siteid
            OR ( site_id             IS NULL
            AND nvl (in_siteid, 0)    = 0 ) )
            AND upper (product_name)  = upper (v_prodname)
            AND upper (fallback_type) = upper (v_fallback)
            AND active                =
              CASE
                WHEN ( ( v_parttype    IS NULL
                AND modified_date      IS NULL )
                OR ( v_parttype         = ''
                AND modified_date      IS NULL )
                OR ( upper (v_parttype) = 'BUNDLE'
                AND product_id          = v_prodid
                AND modified_date      IS NULL ) )
                THEN pkg_constants.con_activeflag_yes
                ELSE pkg_constants.con_activeflag_no
              END
            )
          AND EXISTS
            (SELECT 1
            FROM attribute_mapping am
            WHERE upper (config_level)  = upper (v_tconfiglevel (i))
            AND upper (attribute_level) = upper (in_attributelevel)
            AND ld.attribute_mapping_id = am.attribute_mapping_id
            )
          AND created_date           < v_curdate
          AND modified_date         IS NULL
          AND nvl (non_std_flag, -1) =
            CASE
              WHEN (non_std_flag = v_non_std_flag)
              THEN v_non_std_flag
              WHEN non_std_flag IS NULL
              THEN nvl (non_std_flag, -1)
              WHEN ( v_non_std_flag = pkg_constants.con_activeflag_yes
              AND non_std_flag     <> v_non_std_flag )
              THEN pkg_constants.con_activeflag_no
              ELSE pkg_constants.con_activeflag_yes
            END;
       forall i IN 1 .. v_tattrval.count
          INSERT
          INTO quote_line_item_detail_as_is
            (
              line_item_detail_id,
              line_item_id,
              attribute_mapping_id,
              VALUE,
              active,
              created_by,
              created_date,
              quantity,
              row_id,
              non_std_flag
              /*Start: Added by Amit for GHUCS MODIFY*/
              ,
              bfg_inventory_id,
              /*End: Added by Amit for GHUCS MODIFY*/
              no_voice_channel,   --Added by Khader for GHUCS R15
              classic_element_id,
              classic_element_name,
              max_qty  --Added by Nagendra for GHUCS R16 Billing
            )
            VALUES
            (
              line_item_detail_id.nextval,
              v_lineitemid,
              v_tattrid (i),
              v_tattrval (i),
              pkg_constants.con_activeflag_yes,
              in_createdby,
              v_curdate,
              v_qty (i),
              v_rowid (i),
              v_non_std_fag_1(i),
              v_bfg_inventry_id (i),
              /*Start: Added by Amit for GHUCS MODIFY*/
              v_no_voice_channel(i),  --Added by Khader for Ghucs R15
              v_classic_element_id_detail (i),
              v_classic_element_name_detail (i),
              v_max_qty(i)  --Added by Nagendra for Ghucs R16 Billing
            );
        END IF;
        out_status := pkg_constants.con_status_success;
      END;
    END IF;
  ELSE
    BEGIN
      out_status := pkg_constants.con_status_failure;
      out_errmsg := 'Invalid Product-Attribute List';
    END;
  END IF;
END loop;
ELSE
out_status := pkg_constants.con_status_failure;
out_errmsg := 'Input array is empty';
END IF;
exception
WHEN others THEN
out_status := pkg_constants.con_status_failure;
out_errmsg := sqlerrm;
END spi_config_modify_as_is_data;


PROCEDURE spi_config_modify_obj (
   in_quoteheaderid    IN       quote_header.quote_header_id%TYPE,
   in_siteid           IN       site.site_id%TYPE,
   in_line_item_tbl    IN       line_item_tbl,
   in_service_name     IN       VARCHAR2,
   in_attributelevel   IN       VARCHAR2,
   in_createdby        IN       quote_site_service.created_by%TYPE,
   out_status          OUT      NUMBER,
   out_errmsg          OUT      VARCHAR2
)
AS
   v_prodid                  line_item.product_id%TYPE;
   v_prodname                line_item.product_name%TYPE;
   v_fallback                line_item.fallback_type%TYPE;
   v_parttype                line_item.part_type%TYPE;
   v_tattrid                 t_attrmapid;
   v_tconfiglevel            t_configlevel;
   v_tattrval                t_value;
   v_qty                     t_qty;
   v_rowid                   t_rowid;
   /*Start: Added by Amit for GHUCS MODIFY */
   v_bfg_inventry_id         t_invid;
   v_pkg_instance_id         quote_line_item_as_is.pkg_instance_id%TYPE;
   /*End: Added by Amit for GHUCS MODIFY */
   v_no_voice_channel         t_no_voice_channel;    --Added by Khader for GHUCS R15
   v_max_qty                  t_max_qty;    --Added by Nagendra for GHUCS R16 Billing
   v_lineitemid              line_item.line_item_id%TYPE;
   v_lineitemids             VARCHAR2 (8000);
   v_attrlevel               attribute_mapping.attribute_level%TYPE;
   v_configlevel             attribute_mapping.config_level%TYPE;
   v_rowcount                NUMBER;
   v_prodattr                VARCHAR2 (8000);
   v_proddet                 VARCHAR2 (8000);
   v_attrdet                 VARCHAR2 (8000);
   v_attrcnt                 NUMBER;
   v_curdate                 TIMESTAMP;
   v_flag                    CHAR (1)                                  := '1';
   v_existintlineitemid      line_item.line_item_id%TYPE;
   v_non_std_flag            VARCHAR2 (2);
   v_bidcount_pr             NUMBER                                      := 0;
   v_bidcount_sec            NUMBER                                      := 0;
   v_caseflag                CHAR (1);
   v_quote_site_service_id   quote_site_service.quote_site_service_id%TYPE;
   in_createddate            quote_site_service.created_date%TYPE  := SYSDATE;
   v_to_be_record_exist      NUMBER (3);
   v_varchar2_ntt            varchar2_ntt                  := varchar2_ntt
                                                                          ();
   v_line_item_tbl           line_item_tbl                := line_item_tbl
                                                                          ();
   v_line_item_detail_tbl    line_item_detail_tbl  := line_item_detail_tbl
                                                                          ();
   v_in_line_item            order_line_item_tbl    := order_line_item_tbl
                                                                          ();
   v_in_line_item_detail     order_line_item_detail_tbl
                                             := order_line_item_detail_tbl
                                                                          ();
   v_order_count             NUMBER (3);
   v_attribute_mapping_id    attribute_mapping.attribute_mapping_id%TYPE;
   v_row_found               NUMBER (1)                                  := 0;
   w                         NUMBER (10);
   x                         NUMBER (10);
   in_line_item              line_item_tbl                := line_item_tbl
                                                                          ();
   l                         NUMBER                                      := 0;
   v_count                   NUMBER;
   v_classic_element_id      quote_line_item_as_is.classic_element_id%TYPE;
   v_classic_element_name    quote_line_item_as_is.classic_element_name%TYPE;
   v_classic_element_id_detail     t_classic_element_id;
   v_classic_element_name_detail     t_classic_element_name;
   v_config_level           VARCHAR2(100):='';
   v_non_std_fag_1     t_classic_element_name;
BEGIN
   in_line_item := in_line_item_tbl;

   SELECT SYSDATE
     INTO v_curdate
     FROM DUAL;

   BEGIN
      SELECT quote_site_service_id
        INTO v_quote_site_service_id
        FROM quote_site_service qss
       WHERE qss.quote_header_id = in_quoteheaderid
         AND (   qss.site_id = in_siteid
              OR (qss.site_id IS NULL AND NVL (in_siteid, -1) = -1)
             )
         AND (   UPPER (service_name) = UPPER (in_service_name)
              OR (    TRIM (in_service_name) IS NULL
                  AND NVL (TRIM (in_service_name), -1) = -1
                 )
             );
   EXCEPTION
      WHEN NO_DATA_FOUND
      THEN
         SELECT quote_site_service_id.NEXTVAL
           INTO v_quote_site_service_id
           FROM DUAL;

         INSERT INTO quote_site_service
                     (quote_site_service_id, quote_header_id, site_id,
                      created_by, created_date, service_name
                     )
              VALUES (v_quote_site_service_id, in_quoteheaderid, in_siteid,
                      in_createdby, SYSDATE, UPPER (in_service_name)
                     );
      WHEN OTHERS
      THEN
         out_status := 0;
         RETURN;
   END;
   IF in_line_item.exists(1) THEN
   FOR j IN in_line_item.FIRST .. in_line_item.LAST
   LOOP
      v_lineitemid := NULL;
      v_flag := '1';

      IF (in_line_item (j).o_line_item_detail_tbl IS NOT NULL)
      THEN
         /*--BEGIN*/
         /*--get the list of products from the input string*/
         v_prodid := in_line_item (j).o_pid;
         v_prodname := in_line_item (j).o_product_name;
         v_fallback := in_line_item (j).o_fallback;
         v_parttype := in_line_item (j).o_part_type;
         v_non_std_flag := in_line_item (j).o_non_std_flag;
         v_pkg_instance_id := in_line_item (j).o_pkg_instance_id;
                                             --Added By Amit For GHUCS MODIFY
        v_classic_element_id:=  in_line_item (j).o_classic_element_id;  --added by arpitha
        v_classic_element_name:=  in_line_item (j).o_classic_element_name;  --added by arpitha
          IF (UPPER(TRIM(v_prodname)) = 'BT IVPN2 VPN CONNECTION') THEN
            v_classic_element_id := '';
            v_classic_element_name := '';
          END IF;
         /*--validation if fallback is null*/
         IF (v_fallback IS NULL)
         THEN
            BEGIN
               v_fallback := 'Primary';
            END;
         END IF;

         /*--validation for parttype incase of CPE*/
         IF (UPPER (v_prodname) LIKE '%CPE%')
         THEN
            IF (v_parttype IS NULL)
            THEN
               BEGIN
                  out_status := pkg_constants.con_status_failure;
                  out_errmsg := 'Part Type cannot be null for CPE';
                  v_flag := '0';
               END;
            END IF;
         END IF;

         IF (v_flag = '1')
         THEN
            BEGIN
               /*-- Check if record exists for the current product in line item*/
               SELECT COUNT (*)
                 INTO v_rowcount
                 FROM line_item li
                WHERE quote_header_id = in_quoteheaderid
                  AND (   site_id = in_siteid
                       OR (site_id IS NULL AND NVL (in_siteid, 0) = 0)
                      )
                  /*904 Order Site to Site SLA */
                  AND UPPER (product_name) = UPPER (v_prodname)
                  AND UPPER (fallback_type) = UPPER (v_fallback)
                  AND active = pkg_constants.con_activeflag_yes
                  AND quote_site_service_id = v_quote_site_service_id;

               /*--     AND NVL(non_std_flag,-1) = NVL(v_non_std_flag,-1) ;*/
               /*--      DBMS_OUTPUT.put_line ('  v_rowcount   ' || v_rowcount);*/
               /*--If record does not exist, create a  line item*/
               IF (v_rowcount = 0)
               THEN
                  /*-- Check if record exists for the current product in line item*/
                  INSERT INTO line_item
                              (line_item_id, quote_header_id,
                               site_id, product_id, product_name,
                               fallback_type, part_type, quantity,
                               active,
                               /*--non_std_flag,*/
                               created_by, created_date,
                               quote_site_service_id/*Start: Added by Amit for GHUCS MODIFY*/
                                ,            pkg_instance_id,
                                 /*End: Added by Amit for GHUCS MODIFY*/
                                 classic_element_id, classic_element_name

                              )
                       VALUES (line_item_id.NEXTVAL, in_quoteheaderid,
                               in_siteid, v_prodid, v_prodname,
                               v_fallback, v_parttype, DEFAULT,
                               pkg_constants.con_activeflag_yes,
                               /*-- v_non_std_flag,*/
                               in_createdby, v_curdate,
                               v_quote_site_service_id
                               /*Start: Added by Amit for GHUCS MODIFY*/
                     ,            v_pkg_instance_id,
                                 /*End: Added by Amit for GHUCS MODIFY*/
                                 v_classic_element_id, v_classic_element_name
                              )
                    RETURNING line_item_id
                         INTO v_lineitemid;
               ELSE
                  BEGIN
                     /*--Logic to incorporate CPE parts Insert/ Update*/
                     IF (v_parttype IS NOT NULL)
                     THEN
                        BEGIN
                           /*--added if condition on 16/1/2010 to update*/
                           /*--line_item for part type other than Bundle*/
                           IF (UPPER (v_parttype) <> 'BUNDLE')
                           THEN
                              BEGIN
                                 /*--if it is not bundle, update all previous records*/
                                 /*-- and insert new record*/
                                 UPDATE line_item li
                                    SET active =
                                               pkg_constants.con_activeflag_no,
                                        modified_date = v_curdate
                                  WHERE (   part_type IS NOT NULL
                                         OR part_type <> ''
                                        )
                                    AND quote_header_id = in_quoteheaderid
                                    AND (   site_id = in_siteid
                                         OR (    site_id IS NULL
                                             AND NVL (in_siteid, 0) = 0
                                            )
                                        )
                                    AND quote_site_service_id =
                                                       v_quote_site_service_id
                                    AND product_name = v_prodname
                                    AND created_date < v_curdate
                                    AND UPPER (fallback_type) =
                                                            UPPER (v_fallback)
                                    AND UPPER (part_type) =
                                                     UPPER (TRIM (v_parttype))
                                    /*-- AND product_id = v_prodid*/
                                    AND modified_date IS NULL;

                                 INSERT INTO line_item
                                             (line_item_id,
                                              quote_header_id, site_id,
                                              product_id, product_name,
                                              fallback_type, part_type,
                                              quantity,
                                              active,
                                              created_by, created_date,
                                              quote_site_service_id/*Start: Added by Amit for GHUCS MODIFY*/
                                    ,
                                                 pkg_instance_id,
                                                /*End: Added by Amit for GHUCS MODIFY*/
                                            classic_element_id, classic_element_name
                                             )
                                      VALUES (line_item_id.NEXTVAL,
                                              in_quoteheaderid, in_siteid,
                                              v_prodid, v_prodname,
                                              v_fallback, v_parttype,
                                              DEFAULT,
                                              pkg_constants.con_activeflag_yes,
                                              in_createdby, v_curdate,
                                              v_quote_site_service_id
                                               /*Start: Added by Amit for GHUCS MODIFY*/
                                    ,
                                                 v_pkg_instance_id,
                                                /*End: Added by Amit for GHUCS MODIFY*/
                                                v_classic_element_id, v_classic_element_name


                                             )
                                   RETURNING line_item_id
                                        INTO v_lineitemid;
                              END;
                           ELSE
                              BEGIN
                                 /*--For a bundle, check if it is existing*/
                                 SELECT COUNT (*)
                                   INTO v_rowcount
                                   FROM line_item li
                                  WHERE quote_header_id = in_quoteheaderid
                                    AND (   site_id = in_siteid
                                         OR (    site_id IS NULL
                                             AND NVL (in_siteid, 0) = 0
                                            )
                                        )
                                    AND quote_site_service_id =
                                                       v_quote_site_service_id
                                    AND product_name = v_prodname
                                    AND active =
                                              pkg_constants.con_activeflag_yes
                                    AND UPPER (fallback_type) =
                                                            UPPER (v_fallback)
                                    AND created_date < v_curdate
                                    AND product_id <> v_prodid
                                    AND modified_date IS NULL;

                                 DBMS_OUTPUT.put_line (   'v_rowcount'
                                                       || v_rowcount
                                                      );

                                 IF (v_rowcount > 0)
                                 THEN
                                    BEGIN
                                       /*--A bundle exists with different product id, so soft delete and*/
                                       /*--then insert a new line item*/
                                       UPDATE line_item li
                                          SET active =
                                                 pkg_constants.con_activeflag_no,
                                              modified_date = v_curdate
                                        WHERE UPPER (part_type) = 'BUNDLE'
                                          AND quote_header_id =
                                                              in_quoteheaderid
                                          AND (   site_id = in_siteid
                                               OR (    site_id IS NULL
                                                   AND NVL (in_siteid, 0) = 0
                                                  )
                                              )
                                          AND quote_site_service_id =
                                                       v_quote_site_service_id
                                          AND product_name = v_prodname
                                          AND created_date < v_curdate
                                          AND UPPER (fallback_type) =
                                                            UPPER (v_fallback)
                                          AND product_id <> v_prodid
                                          AND modified_date IS NULL;

                                       /*--previous bundle with different product id*/
                                       /*-- has been to inactive. for same product id, check*/
                                       /*--if bundle is present*/
                                       SELECT COUNT (*)
                                         INTO v_rowcount
                                         FROM line_item li
                                        WHERE quote_header_id =
                                                              in_quoteheaderid
                                          AND (   site_id = in_siteid
                                               OR (    site_id IS NULL
                                                   AND NVL (in_siteid, 0) = 0
                                                  )
                                              )
                                          AND quote_site_service_id =
                                                       v_quote_site_service_id
                                          AND product_name = v_prodname
                                          AND active =
                                                 pkg_constants.con_activeflag_yes
                                          AND UPPER (fallback_type) =
                                                            UPPER (v_fallback)
                                          AND UPPER (part_type) =
                                                            UPPER (v_parttype)
                                          /*--AND created_date < v_curdate*/
                                          /*--AND product_id <> v_prodid*/
                                          AND modified_date IS NULL;

                                       /*--if not present, insert new record*/
                                       /*--else select existing line item*/
                                       IF (v_rowcount = 0)
                                       THEN
                                          INSERT INTO line_item
                                                      (line_item_id,
                                                       quote_header_id,
                                                       site_id, product_id,
                                                       product_name,
                                                       fallback_type,
                                                       part_type, quantity,
                                                       active,
                                                       created_by,
                                                       created_date,
                                                       quote_site_service_id,
                                                       pkg_instance_id,
                              classic_element_id, classic_element_name
                                                      )
                                               VALUES (line_item_id.NEXTVAL,
                                                       in_quoteheaderid,
                                                       in_siteid, v_prodid,
                                                       v_prodname,
                                                       v_fallback,
                                                       v_parttype, DEFAULT,
                                                       pkg_constants.con_activeflag_yes,
                                                       in_createdby,
                                                       v_curdate,
                                                       v_quote_site_service_id,
                                                       v_pkg_instance_id,
                              v_classic_element_id, v_classic_element_name
                                                      )
                                            RETURNING line_item_id
                                                 INTO v_lineitemid;
                                       ELSE
                                       BEGIN
                                          SELECT line_item_id
                                            INTO v_lineitemid
                                            FROM line_item li
                                           WHERE quote_header_id =
                                                              in_quoteheaderid
                                             AND (   site_id = in_siteid
                                                  OR (    site_id IS NULL
                                                      AND NVL (in_siteid, 0) =
                                                                             0
                                                     )
                                                 )
                                             AND quote_site_service_id =
                                                       v_quote_site_service_id
                                             AND product_name = v_prodname
                                             AND active =
                                                    pkg_constants.con_activeflag_yes
                                             AND UPPER (fallback_type) =
                                                            UPPER (v_fallback)
                                             AND UPPER (part_type) =
                                                            UPPER (v_parttype)
                                             /*--AND created_date < v_curdate*/
                                             /*--AND product_id <> v_prodid*/
                                             AND modified_date IS NULL;
                                             EXCEPTION WHEN NO_DATA_FOUND THEN
                                                  out_status := pkg_constants.con_status_failure;
                                                  out_errmsg :=sqlerrm||'EXP NUMBER 11 in_quoteheaderid'||in_quoteheaderid||'in_siteid'||in_siteid||'v_prodname'||v_prodname||'v_fallback'||v_fallback||'v_parttype'||v_parttype;
                                                  return;
                                                  WHEN TOO_MANY_ROWS THEN
                                                  out_status := pkg_constants.con_status_failure;
                                                  out_errmsg :=sqlerrm||'EXP NUMBER 11 in_quoteheaderid'||in_quoteheaderid||'in_siteid'||in_siteid||'v_prodname'||v_prodname||'v_fallback'||v_fallback||'v_parttype'||v_parttype;
                                                  RETURN;
                                        END;
                                       END IF;
                                    END;
                                 ELSE
                                    BEGIN
                                                /*--added for no_data_found error starts*/
                                       /*--previous bundle saved also has same product id*/
                                       SELECT line_item_id
                                         INTO v_lineitemid
                                         FROM line_item li
                                        WHERE quote_header_id =
                                                              in_quoteheaderid
                                          AND site_id = in_siteid
                                          AND quote_site_service_id =
                                                       v_quote_site_service_id
                                          AND UPPER (product_name) =
                                                            UPPER (v_prodname)
                                          AND UPPER (fallback_type) =
                                                            UPPER (v_fallback)
                                          AND active =
                                                 pkg_constants.con_activeflag_yes
                                          AND product_id = v_prodid
                                          AND UPPER (part_type) =
                                                            UPPER (v_parttype);
                                    EXCEPTION
                                       WHEN NO_DATA_FOUND
                                       THEN
                                       BEGIN
                                          SELECT line_item_id
                                            INTO v_lineitemid
                                            FROM line_item
                                           WHERE quote_header_id =
                                                              in_quoteheaderid
                                             AND (   site_id = in_siteid
                                                  OR (    site_id IS NULL
                                                      AND NVL (in_siteid, 0) =
                                                                             0
                                                     )
                                                 )
                                             AND UPPER (product_name) =
                                                            UPPER (v_prodname)
                                             AND UPPER (fallback_type) =
                                                            UPPER (v_fallback)
                                             AND active =
                                                    pkg_constants.con_activeflag_yes
                                             AND NVL (TRIM (UPPER (part_type)),
                                                      '0'
                                                     ) =
                                                    NVL
                                                       (TRIM
                                                            (UPPER (v_parttype)
                                                            ),
                                                        '0'
                                                       )
                                             AND product_id =
                                                    (SELECT DISTINCT product_id
                                                                FROM line_item
                                                               WHERE quote_header_id =
                                                                        in_quoteheaderid
                                                                 AND (   site_id =
                                                                            in_siteid
                                                                      OR (    site_id IS NULL
                                                                          AND NVL
                                                                                 (in_siteid,
                                                                                  0
                                                                                 ) =
                                                                                 0
                                                                         )
                                                                     )
                                                                 AND UPPER
                                                                        (product_name
                                                                        ) =
                                                                        UPPER
                                                                           (v_prodname
                                                                           )
                                                                 AND UPPER
                                                                        (fallback_type
                                                                        ) =
                                                                        UPPER
                                                                           (v_fallback
                                                                           )
                                                                 AND active =
                                                                        pkg_constants.con_activeflag_yes
                                                                 AND UPPER
                                                                        (part_type
                                                                        ) =
                                                                        UPPER
                                                                           (TRIM
                                                                               (v_parttype
                                                                               )
                                                                           ));
                                                  EXCEPTION WHEN NO_DATA_FOUND THEN
                                                  out_status := pkg_constants.con_status_failure;
                                                  out_errmsg :=sqlerrm||'EXP NUMBER 12 in_quoteheaderid'||in_quoteheaderid||'in_siteid'||in_siteid||'v_prodname'||v_prodname||'v_fallback'||v_fallback||'v_parttype'||v_parttype;
                                                  return;
                                                  WHEN TOO_MANY_ROWS THEN
                                                  out_status := pkg_constants.con_status_failure;
                                                  out_errmsg :=sqlerrm||'EXP NUMBER 12 in_quoteheaderid'||in_quoteheaderid||'in_siteid'||in_siteid||'v_prodname'||v_prodname||'v_fallback'||v_fallback||'v_parttype'||v_parttype;
                                                  RETURN;
                                        END;
                                    END;
                                 /*--added for no_data_found error ends*/
                                 END IF;
                              END;
                           END IF;
                        END;
                     ELSE
                        BEGIN
                           /*--for non - BT CPE products*/
                           SELECT line_item_id
                             INTO v_lineitemid
                             FROM line_item li
                            WHERE quote_header_id = in_quoteheaderid
                              AND (   site_id = in_siteid
                                   OR (    site_id IS NULL
                                       AND NVL (in_siteid, 0) = 0
                                      )
                                  )
                              AND quote_site_service_id =
                                                       v_quote_site_service_id
                              AND UPPER (product_name) = UPPER (v_prodname)
                              AND UPPER (fallback_type) = UPPER (v_fallback)
                              AND active = pkg_constants.con_activeflag_yes
                              AND product_id = v_prodid;
                        EXCEPTION WHEN NO_DATA_FOUND THEN
                                                  out_status := pkg_constants.con_status_failure;
                                                  out_errmsg :=sqlerrm||'EXP NUMBER 13 in_quoteheaderid'||in_quoteheaderid||'in_siteid'||in_siteid||'v_prodname'||v_prodname||'v_fallback'||v_fallback||'v_prodid'||v_prodid;
                                                  return;
                                                  WHEN TOO_MANY_ROWS THEN
                                                  out_status := pkg_constants.con_status_failure;
                                                  out_errmsg :=sqlerrm||'EXP NUMBER 13 in_quoteheaderid'||in_quoteheaderid||'in_siteid'||in_siteid||'v_prodname'||v_prodname||'v_fallback'||v_fallback||'v_prodid'||v_prodid;
                                                  RETURN;
                        END;
                     END IF;

                     /*----May be a performance bottleneck!*/



                     IF (INSTR (v_lineitemids, ',', 1) = 0)
                     THEN
                        v_lineitemids := v_lineitemids || ',';
                     END IF;
                  END;
               END IF;

               l := 0;
               v_tattrid.DELETE;
               v_tconfiglevel.DELETE;
               v_tattrval.DELETE;
               v_qty.DELETE;
               v_rowid.DELETE;
               v_no_voice_channel.delete;    --Added by Khader for GHUCS R15
               v_classic_element_id_detail.delete;
               v_classic_element_name_detail.delete;
               v_non_std_fag_1.delete;
               v_max_qty.delete;    --Added by Nagendra for GHUCS R16 Billing
              /*--get the individual parameters from the input string*/
               IF in_line_item (j).o_line_item_detail_tbl.exists(1) THEN
               FOR k IN
                  in_line_item (j).o_line_item_detail_tbl.FIRST .. in_line_item
                                                                           (j).o_line_item_detail_tbl.LAST
               LOOP
                  SELECT COUNT (1)
                    INTO v_count
                    FROM attribute_mapping
                   WHERE attribute_mapping_id =
                             in_line_item (j).o_line_item_detail_tbl (k).o_aid
                     AND UPPER (attribute_level) = 'ORDER';

                  IF v_count = 0
                  THEN
                     l := l + 1;
                     v_config_level :='';
                     v_non_std_flag:='';
                     SELECT config_level
                     INTO v_config_level
                     FROM attribute_mapping
                     WHERE attribute_mapping_id =  in_line_item (j).o_line_item_detail_tbl (k).o_aid;


                        IF (   UPPER (TRIM (v_config_level)) = 'CONFIGURATION - PORT'
                        OR UPPER (TRIM (v_config_level)) = 'CONFIGURATION - CPE'
                        OR UPPER (TRIM (v_config_level)) = 'CONFIGURATION - ACCESS'
                            )
                        THEN
                            v_non_std_flag := 'N';
                        ELSE
                            v_non_std_flag := '';
                        END IF;
                        v_non_std_fag_1(l):=v_non_std_flag;
                     v_tattrid (l) :=
                            in_line_item (j).o_line_item_detail_tbl (k).o_aid;
                     v_tconfiglevel (l) :=
                        in_line_item (j).o_line_item_detail_tbl (k).o_config_level;
                     v_tattrval (l) :=
                          in_line_item (j).o_line_item_detail_tbl (k).o_value;
                     v_qty (l) :=
                            in_line_item (j).o_line_item_detail_tbl (k).o_qty;
                     select  decode(in_line_item (j).o_line_item_detail_tbl (k).o_rowid,0,null,in_line_item (j).o_line_item_detail_tbl (k).o_rowid) into v_rowid (l) from dual;
                    /*Start: Added by Amit for GHUCS MODIFY */
                        v_bfg_inventry_id (l) :=
                           in_line_item (j).o_line_item_detail_tbl (k).o_bfg_inventory_id;
                     /*END: Added by Amit for GHUCS MODIFY */
                           /*Start: Added by Khader for GHUCS R15 MODIFY */
                        v_no_voice_channel (l) :=
                               in_line_item (j).o_line_item_detail_tbl (k).o_no_voice_channel;
                     /*End: Added by Khader for GHUCS R15 MODIFY */
                         v_classic_element_id_detail (l) :=
                           in_line_item (j).o_line_item_detail_tbl (k).o_classic_element_id;
                       v_classic_element_name_detail (l) :=
                           in_line_item (j).o_line_item_detail_tbl (k).o_classic_element_name;
                            /*Start: Added by Nagendra for GHUCS R16 Billing */
                        v_max_qty (l) :=
                               in_line_item (j).o_line_item_detail_tbl (k).o_max_qty;
                     /*End: AAdded by Nagendra for GHUCS R16 Billing  */
                   END IF;

                  v_count := 0;
               END LOOP;

               /*--update active status for all attributes in line_item_detail*/
               /*--for the given product and given config level and attribute level*/
               FORALL i IN v_tconfiglevel.FIRST .. v_tconfiglevel.LAST
                  UPDATE line_item_detail ld
                     SET active = pkg_constants.con_activeflag_no,
                         modified_date = v_curdate,
                         modified_by = in_createdby
                   WHERE line_item_id IN (
                            SELECT line_item_id
                              FROM line_item
                             WHERE quote_header_id = in_quoteheaderid
                               AND (   site_id = in_siteid
                                    OR (    site_id IS NULL
                                        AND NVL (in_siteid, 0) = 0
                                       )
                                   )
                               AND UPPER (product_name) = UPPER (v_prodname)
                               AND UPPER (fallback_type) = UPPER (v_fallback)
                               AND active =
                                      CASE
                                         WHEN (   (    v_parttype IS NULL
                                                   AND modified_date IS NULL
                                                  )
                                               OR (    v_parttype = ''
                                                   AND modified_date IS NULL
                                                  )
                                               OR (    UPPER (v_parttype) =
                                                                      'BUNDLE'
                                                   AND product_id = v_prodid
                                                   AND modified_date IS NULL
                                                  )
                                              )
                                            THEN pkg_constants.con_activeflag_yes
                                         ELSE pkg_constants.con_activeflag_no
                                      END)
                     AND EXISTS (
                            SELECT 1
                              FROM attribute_mapping am
                             WHERE UPPER (config_level) =
                                                    UPPER (v_tconfiglevel (i))
                               AND UPPER (attribute_level) =
                                                     UPPER (in_attributelevel)
                               AND ld.attribute_mapping_id =
                                                       am.attribute_mapping_id)
                     AND created_date < v_curdate
                     AND modified_date IS NULL
                     AND NVL (non_std_flag, -1) =
                            CASE
                               WHEN (non_std_flag = v_non_std_flag)
                                  THEN v_non_std_flag
                               WHEN non_std_flag IS NULL
                                  THEN NVL (non_std_flag, -1)
                               WHEN (    v_non_std_flag =
                                              pkg_constants.con_activeflag_yes
                                     AND non_std_flag <> v_non_std_flag
                                    )
                                  THEN pkg_constants.con_activeflag_no
                               ELSE pkg_constants.con_activeflag_yes
                            END;
                   /*
                            SELECT TO_NUMBER (COLUMN_VALUE)
                              FROM TABLE
                                      (CAST
                                          (pkg_common.fn_splitdata
                                                            (v_lineitemids,
                                                             ','
                                                            ) AS varchar2_ntt
                                          )
                                      ))
                     AND attribute_mapping_id IN (
                            SELECT attribute_mapping_id
                              FROM attribute_mapping
                             WHERE UPPER (config_level) =
                                                 UPPER (v_tconfiglevel (i))
                               AND UPPER (attribute_level) =
                                                  UPPER (in_attributelevel))
                     AND created_date < v_curdate
                     AND modified_date IS NULL; */
               /*--insert into line-item_detail all the attributes after making*/
               /*--existing attributes as inactive*/
               FORALL i IN 1 .. v_tattrval.COUNT
                  INSERT INTO line_item_detail
                              (line_item_detail_id, line_item_id,
                               attribute_mapping_id, VALUE,
                               active,
                               created_by, created_date, quantity,
                               row_id, non_std_flag/*Start: Added by Amit for GHUCS MODIFY*/
                     ,
                                  bfg_inventory_id,
                                 /*End: Added by Amit for GHUCS MODIFY*/
                                 no_voice_channel,   --Added by Khader for Ghucs R15
                                 classic_element_id,classic_element_name,
                                 max_qty --added by Nagendra for Ghucs R16
                               )
                       VALUES (line_item_detail_id.NEXTVAL, v_lineitemid,
                               v_tattrid (i), v_tattrval (i),
                               pkg_constants.con_activeflag_yes,
                               in_createdby, v_curdate, v_qty (i),
                               v_rowid (i), v_non_std_fag_1(i)
                               /*Start: Added by Amit for GHUCS MODIFY*/
                     ,
                                  v_bfg_inventry_id (i),
                                 /*End: Added by Amit for GHUCS MODIFY*/
                                 v_no_voice_channel(i),  --Added by Khader for Ghucs R15
                                v_classic_element_id_detail (i),v_classic_element_name_detail(i),
                                v_max_qty(i) --Added by Nagendra for Ghucs R16 Biling
                                );
            END IF;
               out_status := pkg_constants.con_status_success;
            /*--  COMMIT;*/
            END;
         END IF;
      /*--  END;*/
      ELSE
         BEGIN
            out_status := pkg_constants.con_status_failure;
            out_errmsg := 'Invalid Product-Attribute List';
         END;
      END IF;
   END LOOP;
   ELSE
       out_status := pkg_constants.con_status_failure;
       out_errmsg := 'Input Array is empty';

   END IF;
        out_status := pkg_constants.con_status_success;
EXCEPTION
   WHEN OTHERS
   THEN
      out_status := pkg_constants.con_status_failure;
      out_errmsg := SQLERRM;
-- ROLLBACK;
END;

PROCEDURE spi_configuration_to_be (
   in_quoteheaderid    IN       quote_header.quote_header_id%TYPE,
   in_siteid           IN       site.site_id%TYPE,
   in_attributelist    IN       CLOB,
   in_attributelevel   IN       attribute_mapping.attribute_level%TYPE,
   in_service_name     IN       quote_site_service.service_name%TYPE,
   in_createdby        IN       line_item.created_by%TYPE,
   out_status          OUT      NUMBER,
   out_errmsg          OUT      VARCHAR2
)
AS
   --Row separator is ~ for products
   --attribute separator is ##
   --parameters for an attribute separated by ::
   CURSOR c_attributelist
   IS
      SELECT *
        FROM TABLE
                (CAST
                    (pkg_common.fn_splitbulkupload (in_attributelist, '~') AS varchar2_clob
                    )
                );

   i                         NUMBER                                   := 1;
   v_prodid                  line_item.product_id%TYPE;
   v_prodname                line_item.product_name%TYPE;
   v_fallback                line_item.fallback_type%TYPE;
   v_parttype                line_item.part_type%TYPE;
   v_tattrid                 t_attrmapid;
   v_tconfiglevel            t_configlevel;
   v_tattrval                t_value;
   v_qty                     t_qty;
   v_lineitemid              line_item.line_item_id%TYPE;
   v_lineitemids             VARCHAR2 (8000);
   v_attrlevel               attribute_mapping.attribute_level%TYPE;
   v_configlevel             attribute_mapping.config_level%TYPE;
   v_rowcount                NUMBER;
   v_prodattr                VARCHAR2 (8000);
   v_proddet                 VARCHAR2 (8000);
   v_attrdet                 VARCHAR2 (8000);
   v_attrcnt                 NUMBER;
   v_curdate                 TIMESTAMP;
   v_flag                    CHAR (1)                                 := '1';
   v_existintlineitemid      line_item.line_item_id%TYPE;
   v_non_std_flag            VARCHAR2 (1);
   v_bidcount_pr             NUMBER                                   := 0;
   v_bidcount_sec            NUMBER                                   := 0;
   v_caseflag                CHAR (1);
   v_quote_site_service_id   line_item.quote_site_service_id%TYPE;
   v_str_chk                 VARCHAR2 (10);
   v_rowid                   t_rowid;
BEGIN
   SELECT SYSDATE
     INTO v_curdate
     FROM DUAL;

   BEGIN
      SELECT quote_site_service_id
        INTO v_quote_site_service_id
        FROM quote_site_service qss
       WHERE qss.quote_header_id = in_quoteheaderid
         AND (   qss.site_id = in_siteid
              OR (qss.site_id IS NULL AND NVL (in_siteid, -1) = -1)
             )
         AND UPPER (service_name) = UPPER (in_service_name);
   EXCEPTION
      WHEN NO_DATA_FOUND
      THEN
         SELECT quote_site_service_id.NEXTVAL
           INTO v_quote_site_service_id
           FROM DUAL;

         INSERT INTO quote_site_service
                     (quote_site_service_id, quote_header_id, site_id,
                      created_by, created_date, service_name
                     )
              VALUES (v_quote_site_service_id, in_quoteheaderid, in_siteid,
                      in_createdby, SYSDATE, UPPER (in_service_name)
                     );
      WHEN OTHERS
      THEN
         out_status := 0;
         RETURN;
   END;

   IF (in_attributelist IS NOT NULL)
   THEN
      BEGIN
         OPEN c_attributelist;

         --SET TRANSACTION READ WRITE NAME 'Product configuration';
         --Loop therough the products in the input string
         LOOP
            FETCH c_attributelist
             INTO v_prodattr;

            v_lineitemid := NULL;
            v_flag := '1';
            EXIT WHEN c_attributelist%NOTFOUND;
            v_proddet :=
                     SUBSTR (v_prodattr, 1, INSTR (v_prodattr, ';', 1, 1) - 1);
            v_attrdet :=
                        SUBSTR (v_prodattr, INSTR (v_prodattr, ';', 1, 1) + 1);
            v_attrdet := v_attrdet || '##';
            /*
            SELECT pkg_common.fn_countbulkupload (v_attrdet, '##')
              INTO v_attrcnt
              FROM DUAL; commented this line and below line is written. Done by Jay 09 April 2011*/
            v_attrcnt := pkg_common.fn_countbulkupload (v_attrdet, '##');

            IF (v_attrcnt != 0)
            THEN
               BEGIN
                  --get the list of products from the input string
                  v_prodid :=
                     SUBSTR (v_proddet,
                             INSTR (v_proddet, '|||') + 3,
                               (INSTR (v_proddet, '::') - 3
                               )
                             - INSTR (v_proddet, '|||')
                            );
                  v_proddet :=
                          SUBSTR (v_proddet, INSTR (v_proddet, '::', 1, 1) + 2);
                  v_prodname :=
                     SUBSTR (v_proddet,
                             INSTR (v_proddet, '|||') + 3,
                               (INSTR (v_proddet, '::') - 3
                               )
                             - INSTR (v_proddet, '|||')
                            );
                  v_proddet :=
                          SUBSTR (v_proddet, INSTR (v_proddet, '::', 1, 1) + 2);
                  v_fallback :=
                     SUBSTR (v_proddet,
                             INSTR (v_proddet, '|||', 1, 1) + 3,
                               (INSTR (v_proddet, '::', 1, 1) - 1
                               )
                             - (INSTR (v_proddet, '|||', 1, 1) + 2)
                            );
                  v_proddet :=
                          SUBSTR (v_proddet, INSTR (v_proddet, '::', 1, 1) + 2);
                  v_parttype :=
                     SUBSTR (v_proddet,
                             INSTR (v_proddet, '|||', 1, 1) + 3,
                               (INSTR (v_proddet, '::', 1, 1) - 1
                               )
                             - (INSTR (v_proddet, '|||', 1, 1) + 2)
                            );
                  v_proddet :=
                          SUBSTR (v_proddet, INSTR (v_proddet, '::', 1, 1) + 2);
                  v_non_std_flag :=
                         SUBSTR (v_proddet, INSTR (v_proddet, '|||', 1, 1) + 3);

                  /*  DBMS_OUTPUT.put_line ('  v_non_std_flag   '
                  || v_non_std_flag
                  );*/
                  --validation if fallback is null
                  IF (v_fallback IS NULL)
                  THEN
                     BEGIN
                        v_fallback := 'Primary';
                     END;
                  END IF;

                  --validation for parttype incase of CPE
                  IF (UPPER (v_prodname) LIKE '%CPE%')
                  THEN
                     BEGIN
                        IF (v_parttype IS NULL)
                        THEN
                           BEGIN
                              out_status := pkg_constants.con_status_failure;
                              out_errmsg :=
                                           'Part Type cannot be null for CPE';
                              v_flag := '0';
                           END;
                        --                            ELSIF  (upper(v_parttype) ='BUNDLE') THEN
                        --                              v_non_std_flag := '';
                        END IF;
                     END;
                  END IF;

                  IF (v_flag = '1')
                  THEN
                     BEGIN
                        -- Check if record exists for the current product in line item
                        SELECT COUNT (*)
                          INTO v_rowcount
                          FROM line_item li
                         WHERE quote_header_id = in_quoteheaderid
                           AND (   site_id = in_siteid
                                OR (site_id IS NULL AND NVL (in_siteid, 0) = 0
                                   )
                               )
                           --904 Order Site to Site SLA
                           AND quote_site_service_id = v_quote_site_service_id
                           AND UPPER (product_name) = UPPER (v_prodname)
                           AND UPPER (fallback_type) = UPPER (v_fallback)
                           AND active = pkg_constants.con_activeflag_yes;

                        --If record does not exist, create a  line item
                        IF (v_rowcount = 0)
                        THEN
                           BEGIN
                              INSERT INTO line_item
                                          (line_item_id,
                                           quote_header_id, site_id,
                                           product_id, product_name,
                                           fallback_type, part_type,
                                           quantity,
                                           active,
                                           --non_std_flag,
                                           created_by, created_date,
                                           quote_site_service_id
                                          )
                                   VALUES (line_item_id.NEXTVAL,
                                           in_quoteheaderid, in_siteid,
                                           v_prodid, v_prodname,
                                           v_fallback, v_parttype,
                                           DEFAULT,
                                           pkg_constants.con_activeflag_yes,
                                           -- v_non_std_flag,
                                           in_createdby, v_curdate,
                                           v_quote_site_service_id
                                          )
                                RETURNING line_item_id
                                     INTO v_lineitemid;
                           END;
                        /* DBMS_OUTPUT.put_line (   '  v_lineitemid   '
                        || v_lineitemid
                        );*/
                        ELSE
                           BEGIN
                              --Logic to incorporate CPE parts Insert/ Update
                              IF (v_parttype IS NOT NULL)
                              THEN
                                 BEGIN
                                    --added if condition on 16/1/2010 to update
                                    --line_item for part type other than Bundle
                                    IF (UPPER (v_parttype) <> 'BUNDLE')
                                    THEN
                                       BEGIN
                                          --if it is not bundle, update all previous records
                                          -- and insert new record
                                          UPDATE line_item li
                                             SET active =
                                                    pkg_constants.con_activeflag_no,
                                                 modified_date = v_curdate
                                           WHERE (   part_type IS NOT NULL
                                                  OR part_type <> ''
                                                 )
                                             AND quote_header_id =
                                                              in_quoteheaderid
                                             AND (   site_id = in_siteid
                                                  OR (    site_id IS NULL
                                                      AND NVL (in_siteid, 0) =
                                                                             0
                                                     )
                                                 )
                                             --904 Order Site to Site SLA
                                             AND quote_site_service_id =
                                                       v_quote_site_service_id
                                             AND product_name = v_prodname
                                             AND created_date < v_curdate
                                             AND UPPER (fallback_type) =
                                                            UPPER (v_fallback)
                                             AND UPPER (part_type) =
                                                     UPPER (TRIM (v_parttype))
                                             -- AND NVL(non_std_flag,-1) <> NVL(v_non_std_flag,-1)
                                             -- AND product_id = v_prodid
                                             AND modified_date IS NULL;

                                          INSERT INTO line_item
                                                      (line_item_id,
                                                       quote_header_id,
                                                       site_id, product_id,
                                                       product_name,
                                                       fallback_type,
                                                       part_type, quantity,
                                                       active,
                                                       --  non_std_flag,
                                                       created_by,
                                                       created_date,
                                                       quote_site_service_id
                                                      )
                                               VALUES (line_item_id.NEXTVAL,
                                                       in_quoteheaderid,
                                                       in_siteid, v_prodid,
                                                       v_prodname,
                                                       v_fallback,
                                                       v_parttype, DEFAULT,
                                                       pkg_constants.con_activeflag_yes,
                                                       --    v_non_std_flag,
                                                       in_createdby,
                                                       v_curdate,
                                                       v_quote_site_service_id
                                                      )
                                            RETURNING line_item_id
                                                 INTO v_lineitemid;
                                       END;
                                    ELSE
                                       BEGIN
                                          --For a bundle, check if it is existing
                                          SELECT COUNT (*)
                                            INTO v_rowcount
                                            FROM line_item li
                                           WHERE quote_header_id =
                                                              in_quoteheaderid
                                             AND (   site_id = in_siteid
                                                  OR (    site_id IS NULL
                                                      AND NVL (in_siteid, 0) =
                                                                             0
                                                     )
                                                 )
                                             --904 Order Site to Site SLA
                                             AND quote_site_service_id =
                                                       v_quote_site_service_id
                                             AND product_name = v_prodname
                                             AND active =
                                                    pkg_constants.con_activeflag_yes
                                             AND UPPER (fallback_type) =
                                                            UPPER (v_fallback)
                                             --    AND NVL(non_std_flag,-1) = NVL(v_non_std_flag,-1)
                                             AND created_date < v_curdate
                                             AND product_id <> v_prodid
                                             AND modified_date IS NULL;

                                          IF (v_rowcount > 0)
                                          THEN
                                             BEGIN
                                                --A bundle exists with different product id, so soft delete and
                                                --then insert a new line item
                                                UPDATE line_item li
                                                   SET active =
                                                          pkg_constants.con_activeflag_no,
                                                       modified_date =
                                                                     v_curdate
                                                 WHERE UPPER (part_type) =
                                                                      'BUNDLE'
                                                   AND quote_header_id =
                                                              in_quoteheaderid
                                                   AND (   site_id = in_siteid
                                                        OR (    site_id IS NULL
                                                            AND NVL
                                                                   (in_siteid,
                                                                    0
                                                                   ) = 0
                                                           )
                                                       )
                                                   --904 Order Site to Site SLA
                                                   AND quote_site_service_id =
                                                          v_quote_site_service_id
                                                   AND product_name =
                                                                    v_prodname
                                                   AND created_date <
                                                                     v_curdate
                                                   AND UPPER (fallback_type) =
                                                            UPPER (v_fallback)
                                                   AND product_id <> v_prodid
                                                   --     AND NVL(non_std_flag,-1) = NVL(v_non_std_flag,-1)
                                                   AND modified_date IS NULL;

                                                --previous bundle with different product id
                                                -- has been to inactive. for same product id, check
                                                --if bundle is present
                                                SELECT COUNT (*)
                                                  INTO v_rowcount
                                                  FROM line_item li
                                                 WHERE quote_header_id =
                                                              in_quoteheaderid
                                                   AND (   site_id = in_siteid
                                                        OR (    site_id IS NULL
                                                            AND NVL
                                                                   (in_siteid,
                                                                    0
                                                                   ) = 0
                                                           )
                                                       )
                                                   --904 Order Site to Site SLA
                                                   AND quote_site_service_id =
                                                          v_quote_site_service_id
                                                   AND product_name =
                                                                    v_prodname
                                                   AND active =
                                                          pkg_constants.con_activeflag_yes
                                                   AND UPPER (fallback_type) =
                                                            UPPER (v_fallback)
                                                   -- AND NVL(non_std_flag,-1) = NVL(v_non_std_flag,-1)
                                                   AND UPPER (part_type) =
                                                            UPPER (v_parttype)
                                                   --AND created_date < v_curdate
                                                   --AND product_id <> v_prodid
                                                   AND modified_date IS NULL;

                                                --if not present, insert new record
                                                --else select existing line item
                                                IF (v_rowcount = 0)
                                                THEN
                                                   INSERT INTO line_item
                                                               (line_item_id,
                                                                quote_header_id,
                                                                site_id,
                                                                product_id,
                                                                product_name,
                                                                fallback_type,
                                                                part_type,
                                                                quantity,
                                                                active,
                                                                -- non_std_flag,
                                                                created_by,
                                                                created_date,
                                                                quote_site_service_id
                                                               )
                                                        VALUES (line_item_id.NEXTVAL,
                                                                in_quoteheaderid,
                                                                in_siteid,
                                                                v_prodid,
                                                                v_prodname,
                                                                v_fallback,
                                                                v_parttype,
                                                                DEFAULT,
                                                                pkg_constants.con_activeflag_yes,
                                                                -- v_non_std_flag,
                                                                in_createdby,
                                                                v_curdate,
                                                                v_quote_site_service_id
                                                               )
                                                     RETURNING line_item_id
                                                          INTO v_lineitemid;
                                                ELSE
                                                BEGIN
                                                   SELECT line_item_id
                                                     INTO v_lineitemid
                                                     FROM line_item li
                                                    WHERE quote_header_id =
                                                              in_quoteheaderid
                                                      AND (   site_id =
                                                                     in_siteid
                                                           OR (    site_id IS NULL
                                                               AND NVL
                                                                      (in_siteid,
                                                                       0
                                                                      ) = 0
                                                              )
                                                          )
                                                      --904 Order Site to Site SLA
                                                      AND quote_site_service_id =
                                                             v_quote_site_service_id
                                                      AND product_name =
                                                                    v_prodname
                                                      AND active =
                                                             pkg_constants.con_activeflag_yes
                                                      AND UPPER (fallback_type) =
                                                             UPPER (v_fallback)
                                                      AND UPPER (part_type) =
                                                             UPPER (v_parttype)
                                                      -- AND NVL(non_std_flag,-1) = NVL(v_non_std_flag,-1)
                                                      --AND created_date < v_curdate
                                                      --AND product_id <> v_prodid
                                                      AND modified_date IS NULL;
                                                      EXCEPTION WHEN NO_DATA_FOUND THEN
                                                  out_status := pkg_constants.con_status_failure;
                                                  out_errmsg :=sqlerrm||'EXP NUMBER 14 in_quoteheaderid'||in_quoteheaderid||'in_siteid'||in_siteid||'v_prodname'||v_prodname||'v_fallback'||v_fallback||'v_parttype'||v_parttype;
                                                  return;
                                                  WHEN TOO_MANY_ROWS THEN
                                                  out_status := pkg_constants.con_status_failure;
                                                  out_errmsg :=sqlerrm||'EXP NUMBER 14 in_quoteheaderid'||in_quoteheaderid||'in_siteid'||in_siteid||'v_prodname'||v_prodname||'v_fallback'||v_fallback||'v_parttype'||v_parttype;
                                                  RETURN;
                                        END;
                                                END IF;
                                             END;
                                          ELSE
                                             BEGIN
                                                --added for no_data_found error starts
                                                            --previous bundle saved also has same product id
                                                SELECT line_item_id
                                                  INTO v_lineitemid
                                                  FROM line_item li
                                                 WHERE quote_header_id =
                                                              in_quoteheaderid
                                                   AND (   site_id = in_siteid
                                                        OR (    site_id IS NULL
                                                            AND NVL
                                                                   (in_siteid,
                                                                    0
                                                                   ) = 0
                                                           )
                                                       )
                                                   --904 Order Site to Site SLA
                                                   AND quote_site_service_id =
                                                          v_quote_site_service_id
                                                   AND UPPER (product_name) =
                                                            UPPER (v_prodname)
                                                   AND UPPER (fallback_type) =
                                                            UPPER (v_fallback)
                                                   --AND NVL(non_std_flag,-1) = NVL(v_non_std_flag,-1)
                                                   AND UPPER (NVL (part_type,
                                                                   'A'
                                                                  )
                                                             ) =
                                                          UPPER
                                                             (NVL (v_parttype,
                                                                   'A'
                                                                  )
                                                             )
                                                   ----added for multiple row fetch error
                                                   AND active =
                                                          pkg_constants.con_activeflag_yes
                                                   AND product_id = v_prodid;
                                             EXCEPTION
                                                WHEN NO_DATA_FOUND
                                                THEN
                                                BEGIN
                                                   SELECT line_item_id
                                                     INTO v_lineitemid
                                                     FROM line_item
                                                    WHERE quote_header_id =
                                                              in_quoteheaderid
                                                      AND (   site_id =
                                                                     in_siteid
                                                           OR (    site_id IS NULL
                                                               AND NVL
                                                                      (in_siteid,
                                                                       0
                                                                      ) = 0
                                                              )
                                                          )
                                                      AND UPPER (product_name) =
                                                             UPPER (v_prodname)
                                                      AND UPPER (fallback_type) =
                                                             UPPER (v_fallback)
                                                      AND active =
                                                             pkg_constants.con_activeflag_yes
                                                      AND UPPER
                                                              (NVL (part_type,
                                                                    'A'
                                                                   )
                                                              ) =
                                                             UPPER
                                                                (NVL
                                                                    (v_parttype,
                                                                     'A'
                                                                    )
                                                                )
                                                      ----added for multiple row fetch error
                                                      AND product_id =
                                                             (SELECT DISTINCT product_id
                                                                         FROM line_item
                                                                        WHERE quote_header_id =
                                                                                 in_quoteheaderid
                                                                          AND (   site_id =
                                                                                     in_siteid
                                                                               OR (    site_id IS NULL
                                                                                   AND NVL
                                                                                          (in_siteid,
                                                                                           0
                                                                                          ) =
                                                                                          0
                                                                                  )
                                                                              )
                                                                          AND UPPER
                                                                                 (product_name
                                                                                 ) =
                                                                                 UPPER
                                                                                    (v_prodname
                                                                                    )
                                                                          AND UPPER
                                                                                 (fallback_type
                                                                                 ) =
                                                                                 UPPER
                                                                                    (v_fallback
                                                                                    )
                                                                          AND active =
                                                                                 pkg_constants.con_activeflag_yes
                                                                          AND UPPER
                                                                                 (part_type
                                                                                 ) =
                                                                                 UPPER
                                                                                    (TRIM
                                                                                        (v_parttype
                                                                                        )
                                                                                    ));
                                                                                    EXCEPTION WHEN NO_DATA_FOUND THEN
                                                  out_status := pkg_constants.con_status_failure;
                                                  out_errmsg :=sqlerrm||'EXP NUMBER 15 in_quoteheaderid'||in_quoteheaderid||'in_siteid'||in_siteid||'v_prodname'||v_prodname||'v_fallback'||v_fallback||'v_parttype'||v_parttype;
                                                  return;
                                                  WHEN TOO_MANY_ROWS THEN
                                                  out_status := pkg_constants.con_status_failure;
                                                  out_errmsg :=sqlerrm||'EXP NUMBER 15 in_quoteheaderid'||in_quoteheaderid||'in_siteid'||in_siteid||'v_prodname'||v_prodname||'v_fallback'||v_fallback||'v_parttype'||v_parttype;
                                                  RETURN;
                                        END;
                                             END;
                                          --added for no_data_found error ends
                                          END IF;
                                       END;
                                    END IF;
                                 END;
                              ELSE
                                 BEGIN
                                    --for non - BT CPE products
                                    SELECT line_item_id
                                      INTO v_lineitemid
                                      FROM line_item li
                                     WHERE quote_header_id = in_quoteheaderid
                                       AND (   site_id = in_siteid
                                            OR (    site_id IS NULL
                                                AND NVL (in_siteid, 0) = 0
                                               )
                                           )
                                       --904 Order Site to Site SLA
                                       AND quote_site_service_id =
                                                       v_quote_site_service_id
                                       AND UPPER (product_name) =
                                                            UPPER (v_prodname)
                                       AND UPPER (fallback_type) =
                                                            UPPER (v_fallback)
                                       AND active =
                                              pkg_constants.con_activeflag_yes
                                       AND product_id = v_prodid;
                                    EXCEPTION WHEN NO_DATA_FOUND THEN
                                                  out_status := pkg_constants.con_status_failure;
                                                  out_errmsg :=sqlerrm||'EXP NUMBER 16 in_quoteheaderid'||in_quoteheaderid||'in_siteid'||in_siteid||'v_prodname'||v_prodname||'v_fallback'||v_fallback||'v_prodid'||v_prodid;
                                                  return;
                                                  WHEN TOO_MANY_ROWS THEN
                                                  out_status := pkg_constants.con_status_failure;
                                                  out_errmsg :=sqlerrm||'EXP NUMBER 16 in_quoteheaderid'||in_quoteheaderid||'in_siteid'||in_siteid||'v_prodname'||v_prodname||'v_fallback'||v_fallback||'v_prodid'||v_prodid;
                                                  RETURN;
                                 END;
                              END IF;

                              ----May be a performance bottleneck!
                              --collect line_item_ids to update line_item_detail

                              IF (INSTR (v_lineitemids, ',', 1) = 0)
                              THEN
                                 v_lineitemids := v_lineitemids || ',';
                              END IF;
                           END;
                        END IF;

                        v_tattrid.DELETE;
                        v_tconfiglevel.DELETE;
                        v_tattrval.DELETE;
                        v_qty.DELETE;
                        v_rowid.DELETE;

                        --get the individual parameters from the input string
                        FOR i IN 1 .. v_attrcnt
                        LOOP
                           v_tattrid (i) :=
                              SUBSTR (v_attrdet,
                                      INSTR (v_attrdet, '|||') + 3,
                                        (INSTR (v_attrdet, '::') - 3
                                        )
                                      - INSTR (v_attrdet, '|||')
                                     );
                           v_attrdet :=
                              SUBSTR (v_attrdet,
                                      INSTR (v_attrdet, '::', 1, 1) + 2
                                     );
                           v_tconfiglevel (i) :=
                              SUBSTR (v_attrdet,
                                      INSTR (v_attrdet, '|||') + 3,
                                        (INSTR (v_attrdet, '::') - 3
                                        )
                                      - INSTR (v_attrdet, '|||')
                                     );
                           v_attrdet :=
                              SUBSTR (v_attrdet,
                                      INSTR (v_attrdet, '::', 1, 1) + 2
                                     );
                           v_tattrval (i) :=
                              SUBSTR (v_attrdet,
                                      INSTR (v_attrdet, '|||') + 3,
                                        (INSTR (v_attrdet, '::') - 3
                                        )
                                      - INSTR (v_attrdet, '|||')
                                     );
                           v_attrdet :=
                              SUBSTR (v_attrdet,
                                      INSTR (v_attrdet, '::', 1, 1) + 2
                                     );
                           v_str_chk := NULL;

                        /*   SELECT CASE
                                     WHEN (   INSTR (v_attrdet, '##') <
                                                       INSTR (v_attrdet, '::')
                                           OR INSTR (v_attrdet, '::') = 0
                                          )
                                        THEN 1
                                     ELSE 0
                                  END
                             INTO v_str_chk
                             FROM DUAL; Below new line replaced this query. Done by Jay*/
                        IF INSTR (v_attrdet, '##') <INSTR (v_attrdet, '::') OR INSTR (v_attrdet, '::') = 0 then
                            v_str_chk :=1;
                        ELSE
                            v_str_chk :=0;
                        END IF;

                           IF v_str_chk = 1
                           THEN
                              v_qty (i) :=
                                 SUBSTR (v_attrdet,
                                         INSTR (v_attrdet, '|||') + 3,
                                           (INSTR (v_attrdet, '##') - 3
                                           )
                                         - INSTR (v_attrdet, '|||')
                                        );
                              v_rowid (i) := NULL;
                           ELSE
                              v_qty (i) :=
                                 SUBSTR (v_attrdet,
                                         INSTR (v_attrdet, '|||') + 3,
                                           (INSTR (v_attrdet, '::') - 3
                                           )
                                         - INSTR (v_attrdet, '|||')
                                        );
                              v_attrdet :=
                                 SUBSTR (v_attrdet,
                                         INSTR (v_attrdet, '::', 1, 1) + 2
                                        );
                              v_rowid (i) :=
                                 SUBSTR (v_attrdet,
                                         INSTR (v_attrdet, '|||') + 3,
                                           (INSTR (v_attrdet, '##') - 3
                                           )
                                         - INSTR (v_attrdet, '|||')
                                        );
                           END IF;

                           v_attrdet :=
                              SUBSTR (v_attrdet,
                                      INSTR (v_attrdet, '##', 1) + 2);
                        END LOOP;

                        --update active status for all attributes in line_item_detail
                        --for the given product and given config level and attribute level
                        FORALL i IN v_tconfiglevel.FIRST .. v_tconfiglevel.LAST
                           UPDATE line_item_detail ld
                              SET active = pkg_constants.con_activeflag_no,
                                  modified_date = v_curdate,
                                  modified_by = in_createdby
                            WHERE line_item_id IN (
                                     SELECT line_item_id
                                       FROM line_item
                                      WHERE quote_header_id = in_quoteheaderid
                                        AND (   site_id = in_siteid
                                             OR (    site_id IS NULL
                                                 AND NVL (in_siteid, 0) = 0
                                                )
                                            )
                                        AND UPPER (product_name) =
                                                            UPPER (v_prodname)
                                        AND UPPER (fallback_type) =
                                                            UPPER (v_fallback)
                                        AND active =
                                               CASE
                                                  WHEN (   (    v_parttype IS NULL
                                                            AND modified_date IS NULL
                                                           )
                                                        OR (    v_parttype =
                                                                            ''
                                                            AND modified_date IS NULL
                                                           )
                                                        OR (    UPPER
                                                                   (v_parttype) =
                                                                      'BUNDLE'
                                                            AND product_id =
                                                                      v_prodid
                                                            AND modified_date IS NULL
                                                           )
                                                       )
                                                     THEN pkg_constants.con_activeflag_yes
                                                  ELSE pkg_constants.con_activeflag_no
                                               END)
                              AND EXISTS (
                                     SELECT 1
                                       FROM attribute_mapping am
                                      WHERE UPPER (config_level) =
                                                    UPPER (v_tconfiglevel (i))
                                        AND UPPER (attribute_level) =
                                                     UPPER (in_attributelevel)
                                        AND ld.attribute_mapping_id =
                                                       am.attribute_mapping_id)
                              AND created_date < v_curdate
                              AND modified_date IS NULL
                              AND NVL (non_std_flag, -1) =
                                     CASE
                                        WHEN (non_std_flag = v_non_std_flag)
                                           THEN v_non_std_flag
                                        WHEN non_std_flag IS NULL
                                           THEN NVL (non_std_flag, -1)
                                        WHEN (    v_non_std_flag =
                                                     pkg_constants.con_activeflag_yes
                                              AND non_std_flag <>
                                                                v_non_std_flag
                                             )
                                           THEN pkg_constants.con_activeflag_no
                                        ELSE pkg_constants.con_activeflag_yes
                                     END;
                            /*
                                     SELECT TO_NUMBER (COLUMN_VALUE)
                                       FROM TABLE
                                               (CAST
                                                   (pkg_common.fn_splitdata
                                                            (v_lineitemids,
                                                             ','
                                                            ) AS varchar2_ntt
                                                   )
                                               ))
                              AND attribute_mapping_id IN (
                                     SELECT attribute_mapping_id
                                       FROM attribute_mapping
                                      WHERE UPPER (config_level) =
                                                 UPPER (v_tconfiglevel (i))
                                        AND UPPER (attribute_level) =
                                                  UPPER (in_attributelevel))
                              AND created_date < v_curdate
                              AND modified_date IS NULL
                              --and  nvl(non_std_flag,-1) <> nvl(v_non_std_flag,-2)
                              AND NVL (non_std_flag, -1) =
                                     CASE
                                        WHEN (non_std_flag = v_non_std_flag
                                             )
                                           THEN v_non_std_flag
                                        WHEN non_std_flag IS NULL
                                           THEN NVL (non_std_flag, -1)
                                        WHEN (    v_non_std_flag =
                                                     pkg_constants.con_activeflag_yes
                                              AND non_std_flag <>
                                                             v_non_std_flag
                                             )
                                           THEN pkg_constants.con_activeflag_no
                                        ELSE pkg_constants.con_activeflag_yes
                                     END; */
                        --insert into line-item_detail all the attributes after making
                        --existing attributes as inactive
                        FORALL i IN 1 .. v_attrcnt
                           INSERT INTO line_item_detail
                                       (line_item_detail_id,
                                        line_item_id, attribute_mapping_id,
                                        VALUE,
                                        active,
                                        non_std_flag, row_id,
                                        created_by, created_date, quantity
                                       )
                                VALUES (line_item_detail_id.NEXTVAL,
                                        v_lineitemid, v_tattrid (i),
                                        v_tattrval (i),
                                        pkg_constants.con_activeflag_yes,
                                        v_non_std_flag, v_rowid (i),
                                        in_createdby, v_curdate, v_qty (i)
                                       );
                        out_status := pkg_constants.con_status_success;
                     END;
                  END IF;
               END;
            ELSE
               BEGIN
                  out_status := pkg_constants.con_status_failure;
                  out_errmsg := 'Invalid Product-Attribute List';
               END;
            END IF;
         END LOOP;

         CLOSE c_attributelist;
      --   COMMIT;
      END;
   ELSE
      BEGIN
         out_status := pkg_constants.con_status_failure;
         out_errmsg := 'Invalid Product-Attribute List';
      END;
   END IF;
   -- added to implement rowid for CPE part start

   BEGIN

   FOR i IN ( select tobe.line_item_id, asis.row_id from
                    (select lm.fallback_type,lm.line_item_id,lm.part_type, ld.value,
            row_number() over (partition by lm.fallback_type, lm.part_type, ld.value order by lm.part_type) rno
                    from line_item lm, line_item_detail ld
                    where lm.line_item_id = ld.line_item_id
                    and lm.quote_header_id = in_quoteheaderid and lm.site_id = in_siteid
                    and lm.active = 'Y' and ld.active = 'Y'
                    and product_name ='BT CPE'
                    and upper(part_type) <> 'BUNDLE'
                    and attribute_mapping_id = 310
                    )tobe
                    inner join
                    (select lm.fallback_type,lm.part_type, ld.value,lm.row_id,
            row_number() over (partition by lm.fallback_type, lm.part_type, ld.value order by lm.part_type) rno
                    from quote_line_item_as_is lm, quote_line_item_detail_as_is ld
                    where lm.line_item_id = ld.line_item_id
                    and lm.quote_header_id = in_quoteheaderid and lm.site_id = in_siteid
                    and lm.active = 'Y' and ld.active = 'Y'
                    and product_name ='BT CPE'
                    and upper(part_type) <> 'BUNDLE'
                    and attribute_mapping_id = 310)asis
                    on tobe.fallback_type = asis.fallback_type
                    AND tobe.part_type = asis.part_type
                    and tobe.value = asis.value
                    and tobe.rno = asis.rno)
LOOP
UPDATE line_item li
SET li.row_id = i.row_id
WHERE li.line_item_id = i.line_item_id;
END LOOP;


    FOR I IN (SELECT PART_type ,ROWID,fallback_type
          FROM line_item
          WHERE Quote_header_id = in_quoteheaderid
          AND Site_id= in_siteid
          AND product_name ='BT CPE'
          and upper(part_type) <> 'BUNDLE'
      AND row_id is NULL
          ORDER BY PART_type) LOOP
UPDATE line_item
SET row_id = (SELECT NVL(MAX(Row_ID),0) +1
              FROM line_item
              WHERE Quote_header_id = in_quoteheaderid
              AND Site_id= in_siteid
              AND product_name ='BT CPE'
              AND part_type=I.part_type
              and fallback_type = i.fallback_type
              and upper(part_type) <> 'BUNDLE')
WHERE Quote_header_id = in_quoteheaderid
AND Site_id= in_siteid
AND product_name ='BT CPE'
and fallback_type = i.fallback_type
AND part_type = I.part_type
and upper(part_type) <> 'BUNDLE'
AND ROWID = I.ROWID
and row_id is null;

END LOOP;
END;
-- rowid updation end

EXCEPTION
   WHEN OTHERS
   THEN
      out_status := pkg_constants.con_status_failure;
      out_errmsg := SQLERRM;
--   ROLLBACK;
END;


   PROCEDURE spu_pricelist (
      in_quotehrdid      IN       quote_header.quote_header_id%TYPE,
      in_pricelistname   IN       quote_price_list.price_list_name%TYPE,
      in_modified_by     IN       quote_price_list.modified_by%TYPE,
      out_status         OUT      NUMBER,
      out_errmsg         OUT      VARCHAR2
   )
   AS
      v_price_list   VARCHAR (100);
   BEGIN
      UPDATE quote_price_list
         SET price_list_name = in_pricelistname,
             modified_by = in_modified_by,
             modified_date = SYSDATE
       WHERE quote_header_id = in_quotehrdid;

      --in_createdby
      out_status := pkg_constants.con_status_success;

      SELECT price_list_name
        INTO v_price_list
        FROM quote_price_list
       WHERE quote_header_id = in_quotehrdid;
   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         out_errmsg := SQLERRM;
   END;

   PROCEDURE spu_currency_management (
      in_quotehrdid        IN       quote_price_list.quote_header_id%TYPE,
      in_currency          IN       quote_header.currency%TYPE,
      in_management_type   IN       VARCHAR2,
      in_modified_by       IN       quote_price_list.modified_by%TYPE,
      out_status           OUT      NUMBER,
      out_errmsg           OUT      VARCHAR2
   )
   AS
      v_price_list   VARCHAR (100);
   BEGIN
      UPDATE quote_header
         SET currency = in_currency,
             -- currency_id = in_curid,
             modified_by = in_modified_by,
             modified_date = SYSDATE
       WHERE quote_header_id = in_quotehrdid;

      UPDATE line_item_detail
         SET VALUE = in_management_type
       WHERE line_item_id IN (
                        SELECT line_item_id
                          FROM line_item
                         WHERE quote_header_id = in_quotehrdid
                               AND active = 'Y')
         AND active = 'Y'
         AND attribute_mapping_id = 402;

      out_status := pkg_constants.con_status_success;
   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         out_errmsg := SQLERRM;
   END;

   PROCEDURE sps_compare_cur_man_price (
      in_quotehrdid        IN       quote_price_list.quote_header_id%TYPE,
      in_siteid              IN       site.site_id%TYPE,
      in_currency          IN       quote_header.currency%TYPE,
      in_management_type   IN       VARCHAR2,
      in_pricelistname     IN       quote_price_list.price_list_name%TYPE,
      out_status           OUT      NUMBER,
      out_errmsg           OUT      VARCHAR2
   )
   AS
      v_currency          quote_header.currency%TYPE;
      v_management_type   VARCHAR2 (100);
      v_pricelistname     quote_price_list.price_list_name%TYPE;
   BEGIN
      out_status := pkg_constants.con_status_success;

      SELECT currency
        INTO v_currency
        FROM quote_header
       WHERE quote_header_id = in_quotehrdid;

      BEGIN
         SELECT VALUE
           INTO v_management_type
           FROM line_item_detail
          WHERE line_item_id IN (
                        SELECT line_item_id
                          FROM line_item
                         WHERE quote_header_id = in_quotehrdid AND site_id = in_siteid
                               AND active = 'Y')
            AND active = 'Y'
            AND attribute_mapping_id = 402;
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            v_management_type := NULL;
      END;

      BEGIN
         SELECT price_list_name
           INTO v_pricelistname
           FROM quote_price_list
          WHERE quote_header_id = in_quotehrdid  AND site_id = in_siteid;
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            v_pricelistname := NULL;
      END;

      IF NVL (UPPER (TRIM (v_currency)), '-1') <>
                                        NVL (UPPER (TRIM (in_currency)), '-1')
      THEN
         out_status := pkg_constants.con_status_failure;
      END IF;

      IF NVL (UPPER (TRIM (v_management_type)), '-1') <>
                                 NVL (UPPER (TRIM (in_management_type)), '-1')
      THEN
         out_status := pkg_constants.con_status_failure;
      END IF;

      IF NVL (UPPER (TRIM (in_pricelistname)), '-1') <>
                                    NVL (UPPER (TRIM (v_pricelistname)), '-1')
      THEN
         out_status := pkg_constants.con_status_failure;
      END IF;

      IF out_status = pkg_constants.con_status_failure
      THEN
         out_errmsg :=
            'Selected site should have same Currency or Price book or management type to proceed to Quote';
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         out_errmsg := SQLERRM;
   END;

   PROCEDURE spu_service_instance_name (
   in_quote_headerid   IN       quote_site_service.quote_header_id%TYPE,
   in_siteid           IN       quote_site_service.site_id%TYPE,
   in_service_name     IN       quote_site_service.service_name%TYPE,
   in_primary          IN       quote_site_service.PRIMARY%TYPE,
   in_secondary        IN       quote_site_service.secondary%TYPE,
   in_floor            IN       address.FLOOR%TYPE,
                    /**added room and floor for R9 IVPN2 Retrieve asset part*/
   in_room             IN       address.room%TYPE,
   /***Added bfg_address_id and sublocation id as a part of new requirement JIRA Request SQEIVPNMOD-15*****/
   in_bfgsubloc_id     IN       site.bfg_subloc_id%TYPE,
   in_modified_by      IN       quote_site_service.modified_by%TYPE,
   out_status          OUT      NUMBER,
   out_errmsg          OUT      VARCHAR2,
   in_primary_child_1     IN       VARCHAR2 DEFAULT NULL,
   in_primary_child_2     IN       VARCHAR2 DEFAULT NULL,
   in_primary_child_3     IN       VARCHAR2 DEFAULT NULL,
   in_secondary_child_1   IN       VARCHAR2 DEFAULT NULL,
   in_secondary_child_2   IN       VARCHAR2 DEFAULT NULL,
   in_secondary_child_3   IN       VARCHAR2 DEFAULT NULL
)
AS
   v_quote_site_service_id   quote_site_service.quote_site_service_id%TYPE;
   v_address_id              address.address_id%TYPE;
BEGIN
   SELECT quote_site_service_id
     INTO v_quote_site_service_id
     FROM quote_site_service qss
    WHERE qss.quote_header_id = in_quote_headerid
      AND (   qss.site_id = in_siteid
           OR (qss.site_id IS NULL AND NVL (in_siteid, -1) = -1)
          )
      AND (   UPPER (service_name) = UPPER (in_service_name)
           OR (    TRIM (in_service_name) IS NULL
               AND NVL (TRIM (in_service_name), -1) = -1
              )
          );

   UPDATE quote_site_service
      SET PRIMARY = in_primary,
          secondary = in_secondary,
          modified_by = in_modified_by,
          modified_date = SYSDATE,
          primary_child_1 = in_primary_child_1,
          primary_child_2 = in_primary_child_2,
          primary_child_3 = in_primary_child_3,
          secondary_child_1 = in_secondary_child_1,
          secondary_child_2 = in_secondary_child_2,
          secondary_child_3 = in_secondary_child_3
    WHERE quote_header_id = in_quote_headerid
      AND (site_id = in_siteid OR (site_id IS NULL AND NVL (in_siteid, -1) =
                                                                            -1)
          )
      AND quote_site_service_id = v_quote_site_service_id;

   IF in_bfgsubloc_id IS NOT NULL
   THEN
      UPDATE site
         SET bfg_subloc_id = in_bfgsubloc_id
       WHERE site_id = in_siteid;
   END IF;

   IF (TRIM (in_floor) IS NOT NULL) OR (TRIM (in_room) IS NOT NULL)
   THEN
      BEGIN
         SELECT address_id
           INTO v_address_id
           FROM site
          WHERE site_id = in_siteid;

         UPDATE address
            SET room = in_room,
                FLOOR = in_floor
          WHERE address_id = v_address_id;
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            out_status := pkg_constants.con_status_failure;
            out_errmsg :=
                        'Site is not present so cannot update room and floor';
            RETURN;
      END;
   END IF;

   out_status := pkg_constants.con_status_success;
EXCEPTION
   WHEN OTHERS
   THEN
      out_status := pkg_constants.con_status_failure;
      out_errmsg := SQLERRM;
END;


/* Start: New SP added to provide Product Configuration LOV ,GHUCS on 26/08/2010 by Sandeep*/
-- New parameter in_contract_id included and existing LOVs queries changed for GHUCS Agent - R9 on 04-Nov-2010
PROCEDURE sps_product_lovs(in_product_id        IN     line_item.product_id%TYPE,
                           in_contract_id       IN     VARCHAR2,
                           in_major_action      IN     VARCHAR2,
                           in_conditioner       IN     VARCHAR2,
                           in_friendly_name     IN     line_item.product_name%TYPE,
                           in_attribute_name    IN     attribute_mapping.sqe_attribute%TYPE,
                           in_cbibo             IN     VARCHAR2,
                           out_data_ref_cursor  OUT    SYS_REFCURSOR,
                           out_status           OUT    NUMBER,
                           out_errmsg           OUT    VARCHAR2)
IS
v_product_name          line_item.product_name%TYPE;
v_prop_name             VARCHAR2(50);
v_sub_prop_name         VARCHAR2(50);
v_product_friendly_name line_item.product_name%TYPE;
v_attribute_name        attribute_mapping.sqe_attribute%TYPE;
v_attribute_value       line_item_detail.value%TYPE;
v_major_action          VARCHAR2(10) := in_major_action;
v_friendly_ref_cursor   SYS_REFCURSOR;
v_attr_ref_cursor       SYS_REFCURSOR;
v_value_ref_cursor      SYS_REFCURSOR;
lv_error_location       NUMBER(5) :=0;
lv_count                NUMBER(5) :=0;
lv_contract_id          VARCHAR2(10);
BEGIN
  lv_contract_id := in_contract_id;
  IF v_major_action = pkg_constants.GHUCS_MAJOR_ACTION_PROVIDE THEN
    lv_error_location  := 10;

    SELECT DISTINCT  prd.product_name,prop.PROP_NAME,plpt.sub_prop_name INTO v_product_name,v_prop_name,v_sub_prop_name
      FROM ppsr_owner.ppsr_products_v@dblink_ppsr prd,
           ppsr_link_prop_trans_v@dblink_ppsr plpt,ppsr_link_rule_v@dblink_ppsr plr,
           PPSR_LINK_PROP_V@dblink_ppsr prop
     WHERE prd.prodkey        = plpt.prodkey
       AND prop.prodkey       = prd.prodkey
       AND plpt.trans_link_id = plr.rule_trans_link_id
       AND prd.prodkey        = in_product_id;


    IF in_conditioner = pkg_constants.GHUCS_FRIENDLY_NAME_IDENTIFIER THEN
    lv_error_location  := 20;
      IF lv_contract_id IS NULL THEN
        OPEN v_friendly_ref_cursor FOR
          SELECT DISTINCT plpt.product_friendly_name AS "Friendly Name",
                (SELECT MAX(Attribute_mapping_id) from attribute_mapping where UPPER(sqe_attribute) = UPPER(plpt.product_friendly_name)) AS "Attribute ID"
            FROM ppsr_owner.ppsr_products_v@dblink_ppsr prd, ppsr_link_prop_trans_v@dblink_ppsr plpt,
                 ppsr_link_rule_v@dblink_ppsr plr
           WHERE prd.prodkey             = plpt.prodkey
             AND plpt.trans_link_id      = plr.rule_trans_link_id
             AND plpt.prop_name          = v_prop_name
             AND plpt.sub_prop_name      = v_sub_prop_name
             AND prd.product_name        = v_product_name
             AND plpt.major_action_desc  = v_major_action
             AND plpt.product_friendly_name  NOT IN (pkg_constants.GHUCS_FRDLY_NAME_MAC,                 -- GHUCS AGENT Products restriction removed for PROVIDE by Sandeep on 14-Feb-2011  -- changes reverted back on 4-Mar-2011
                                                     pkg_constants.GHUCS_FRDLY_NAME_HSTD_CISCO,
                                                     pkg_constants.GHUCS_FRDLY_NAME_CNTCT_CSCO,
                                                     pkg_constants.GHUCS_FRDLY_NAME_CNTCT_CNTR_MM,
                                                     pkg_constants.GHUCS_FRDLY_NAME_AGNT_OPTN_MM,
                                                     pkg_constants.GHUCS_FRDLY_NAME_AGNT_OPTN_VCE,
                                                     pkg_constants.GHUCS_FRDLY_NAME_ANCILRY_FTRS,
                                                     pkg_constants.GHUCS_FRDLY_NAME_CNTR_OTHR_CHG
                                                     )
            ORDER BY plpt.product_friendly_name;

         out_data_ref_cursor := v_friendly_ref_cursor;
      ELSE
        OPEN v_friendly_ref_cursor FOR
          SELECT DISTINCT plp.product_friendly_name AS "Friendly Name",
                (SELECT MAX(Attribute_mapping_id) from attribute_mapping where UPPER(sqe_attribute) = UPPER(plp.product_friendly_name)) AS "Attribute ID"
            FROM ppsr_owner.ppsr_int_contract@dblink_ppsr pic,
                 ppsr_owner.ppsr_price_book_mast@dblink_ppsr ppbm,
                 ppsr_owner.ppsr_prod_avail@dblink_ppsr ppa,
                 ppsr_owner.ppsr_link_prop@dblink_ppsr plp
           WHERE pic.bfg_contract_id = ppbm.bfg_con_id
             AND ppbm.price_book_id = ppa.price_book_id
             AND ppa.prop_link_id = plp.prop_link_id
             AND pic.bfg_contract_id = lv_contract_id
             AND plp.product_friendly_name  NOT IN (pkg_constants.GHUCS_FRDLY_NAME_MAC)--,                  -- GHUCS AGENT Products restriction removed for PROVIDE by Sandeep on 14-Feb-2011  -- changes reverted back on 4-Mar-2011
                                                   /*  pkg_constants.GHUCS_FRDLY_NAME_HSTD_CISCO,
                                                     pkg_constants.GHUCS_FRDLY_NAME_CNTCT_CSCO,
                                                     pkg_constants.GHUCS_FRDLY_NAME_CNTCT_CNTR_MM,
                                                     pkg_constants.GHUCS_FRDLY_NAME_AGNT_OPTN_MM,
                                                     pkg_constants.GHUCS_FRDLY_NAME_AGNT_OPTN_VCE,
                                                     pkg_constants.GHUCS_FRDLY_NAME_ANCILRY_FTRS,
                                                     pkg_constants.GHUCS_FRDLY_NAME_CNTR_OTHR_CHG
                                                     )*/
        ORDER BY plp.product_friendly_name;
        out_data_ref_cursor := v_friendly_ref_cursor;

     END IF;
    ELSIF in_conditioner = pkg_constants.GHUCS_ATTR_NAME_IDENTIFIER THEN

    lv_error_location  := 30;
     v_product_friendly_name := in_friendly_name ;

       OPEN v_attr_ref_cursor FOR
        SELECT a.attribute_name AS "Attribute Name",
               (SELECT attribute_mapping_id
                  FROM attribute_mapping
                 WHERE ppsr_attribute = a.attribute_name) AS "Attribute ID"
         FROM (SELECT Distinct plr.attribute_name_1 attribute_name
                 FROM ppsr_owner.ppsr_products_v@dblink_ppsr prd,
                      ppsr_link_prop_trans_v@dblink_ppsr plpt,
                      ppsr_link_rule_v@dblink_ppsr plr
                WHERE prd.prodkey              = plpt.prodkey
                  AND plpt.trans_link_id         = plr.rule_trans_link_id
                  AND plpt.prop_name             = v_prop_name
                  AND plpt.sub_prop_name         = v_sub_prop_name
                  AND plpt.product_friendly_name = v_product_friendly_name
                  AND prd.product_name           = v_product_name
                  AND plr.attribute_name_1       NOT IN (pkg_constants.GHUCS_ATTR_NAME_HIPT_PLATFORM,
                                                         pkg_constants.GHUCS_ATTR_NAME_SALES_CHANNEL,
                                                         pkg_constants.GHUCS_ATTR_NAME_USG_COMM_UOM)
                  AND plpt.major_action_desc     = v_major_action
                  AND plr.validation            IS NOT NULL) a;

       out_data_ref_cursor := v_attr_ref_cursor;

    ELSIF in_conditioner = pkg_constants.GHUCS_VALIDATION_IDENTIFIER THEN

     lv_error_location  := 40;
     v_product_friendly_name := in_friendly_name;
     v_attribute_name        := in_attribute_name;
       IF in_cbibo = 'Y' THEN
          OPEN v_value_ref_cursor FOR
            SELECT DISTINCT plr.validation AS "Value"
              FROM ppsr_owner.ppsr_products_v@dblink_ppsr prd, ppsr_link_prop_trans_v@dblink_ppsr plpt,
                   ppsr_link_rule_v@dblink_ppsr plr
             WHERE prd.prodkey                = plpt.prodkey
               AND plpt.trans_link_id         = plr.rule_trans_link_id
               AND plpt.prop_name             = v_prop_name
               AND plpt.sub_prop_name         = v_sub_prop_name
               AND plpt.product_friendly_name = v_product_friendly_name
               AND prd.product_name           = v_product_name
               AND plr.attribute_name_1       = v_attribute_name
               AND plpt.major_action_desc     = v_major_action
             AND UPPER(plr.validation)         NOT LIKE UPPER('%Non-Int. VoIP%')
               AND plr.validation IS NOT NULL;
       ELSIF in_cbibo = 'N' THEN
          OPEN v_value_ref_cursor FOR
            SELECT DISTINCT plr.validation AS "Value"
              FROM ppsr_owner.ppsr_products_v@dblink_ppsr prd, ppsr_link_prop_trans_v@dblink_ppsr plpt,
                   ppsr_link_rule_v@dblink_ppsr plr
             WHERE prd.prodkey                = plpt.prodkey
               AND plpt.trans_link_id         = plr.rule_trans_link_id
               AND plpt.prop_name             = v_prop_name
               AND plpt.sub_prop_name         = v_sub_prop_name
               AND plpt.product_friendly_name = v_product_friendly_name
               AND prd.product_name           = v_product_name
               AND plr.attribute_name_1       = v_attribute_name
               AND plpt.major_action_desc     = v_major_action
               AND UPPER(plr.validation)   LIKE UPPER('%Non-Int. VoIP%')
               AND plr.validation IS NOT NULL;

       END IF;
       out_data_ref_cursor := v_value_ref_cursor;
    END IF;


  ELSIF v_major_action = pkg_constants.GHUCS_MAJOR_ACTION_AMEND THEN
    lv_error_location  := 50;

    SELECT DISTINCT  prd.product_name,prop.PROP_NAME,plpt.sub_prop_name INTO v_product_name,v_prop_name,v_sub_prop_name
      FROM ppsr_owner.ppsr_products_v@dblink_ppsr prd,
           ppsr_link_prop_trans_v@dblink_ppsr plpt,ppsr_link_rule_v@dblink_ppsr plr,
           PPSR_LINK_PROP_V@dblink_ppsr prop
     WHERE prd.prodkey        = plpt.prodkey
       AND prop.prodkey       = prd.prodkey
       AND plpt.trans_link_id = plr.rule_trans_link_id
       AND prd.prodkey        = in_product_id;


   IF in_conditioner = pkg_constants.GHUCS_FRIENDLY_NAME_IDENTIFIER THEN

    lv_error_location  := 60;
      IF lv_contract_id IS NULL THEN
        OPEN v_friendly_ref_cursor FOR
          SELECT DISTINCT plpt.product_friendly_name AS "Friendly Name",
            (SELECT MAX(Attribute_mapping_id) from attribute_mapping where UPPER(sqe_attribute) = UPPER(plpt.product_friendly_name)) AS "Attribute ID"
            FROM ppsr_owner.ppsr_products_v@dblink_ppsr prd, ppsr_link_prop_trans_v@dblink_ppsr plpt,
                 ppsr_link_rule_v@dblink_ppsr plr
           WHERE prd.prodkey             = plpt.prodkey
             AND plpt.trans_link_id      = plr.rule_trans_link_id
             AND plpt.prop_name          = v_prop_name
             AND plpt.sub_prop_name      = v_sub_prop_name
             AND PRD.PRODUCT_NAME        = V_PRODUCT_NAME
             AND PLPT.PRODUCT_FRIENDLY_NAME  NOT IN (PKG_CONSTANTS.GHUCS_FRDLY_NAME_CNTCT_CNTR,PKG_CONSTANTS.GHUCS_FRDLY_NAME_HSTD_CISCO)
             AND ((plpt.major_action_desc = pkg_constants.GHUCS_MAJOR_ACTION_AMEND AND plpt.minor_action_desc = pkg_constants.GHUCS_MINOR_ACTION_OTHER) OR
                  (plpt.major_action_desc = pkg_constants.GHUCS_MAJOR_ACTION_AMEND AND plpt.minor_action_desc = pkg_constants.GHUCS_MINOR_ACTION_REGRADE) OR
                  (plpt.major_action_desc = pkg_constants.GHUCS_MAJOR_ACTION_PROVIDE AND plpt.minor_action_desc = pkg_constants.GHUCS_MINOR_ACTION_PROVIDE))
           ORDER BY plpt.product_friendly_name;
         out_data_ref_cursor := v_friendly_ref_cursor;
      ELSE
        OPEN v_friendly_ref_cursor FOR
          SELECT DISTINCT plp.product_friendly_name AS "Friendly Name",
                (SELECT MAX(Attribute_mapping_id) from attribute_mapping where UPPER(sqe_attribute) = UPPER(plp.product_friendly_name)) AS "Attribute ID"
            FROM ppsr_owner.ppsr_int_contract@dblink_ppsr pic,
                 ppsr_owner.ppsr_price_book_mast@dblink_ppsr ppbm,
                 ppsr_owner.ppsr_prod_avail@dblink_ppsr ppa,
                 ppsr_owner.ppsr_link_prop@dblink_ppsr plp
           WHERE pic.bfg_contract_id = ppbm.bfg_con_id
             AND ppbm.price_book_id = ppa.price_book_id
             AND ppa.prop_link_id = plp.prop_link_id
             AND pic.bfg_contract_id = lv_contract_id
        ORDER BY plp.product_friendly_name;
             out_data_ref_cursor := v_friendly_ref_cursor; ----Added by Amit for Ghucs R9 on 27-Nov-10
      END IF;

    ELSIF in_conditioner = pkg_constants.GHUCS_ATTR_NAME_IDENTIFIER   THEN
    lv_error_location  := 70;
     v_product_friendly_name := in_friendly_name ;

       OPEN v_attr_ref_cursor FOR

        SELECT a.attribute_name AS "Attribute Name",
               (SELECT attribute_mapping_id FROM attribute_mapping
                 WHERE ppsr_attribute = a.attribute_name) AS "Attribute ID"
          FROM(SELECT Distinct plr.attribute_name_1 attribute_name
                 FROM ppsr_owner.ppsr_products_v@dblink_ppsr prd,
                      ppsr_link_prop_trans_v@dblink_ppsr plpt,
                      ppsr_link_rule_v@dblink_ppsr plr
                WHERE prd.prodkey                = plpt.prodkey
                  AND plpt.trans_link_id         = plr.rule_trans_link_id
                  AND plpt.prop_name             = v_prop_name
                  AND plpt.sub_prop_name         = v_sub_prop_name
                  AND plpt.product_friendly_name = v_product_friendly_name
                  AND prd.product_name           = v_product_name
                  AND plr.attribute_name_1       NOT IN (pkg_constants.GHUCS_ATTR_NAME_HIPT_PLATFORM,
                                                         pkg_constants.GHUCS_ATTR_NAME_SALES_CHANNEL,
                                                         pkg_constants.GHUCS_ATTR_NAME_USG_COMM_UOM)
                  AND ((plpt.major_action_desc = pkg_constants.GHUCS_MAJOR_ACTION_AMEND AND plpt.minor_action_desc = pkg_constants.GHUCS_MINOR_ACTION_OTHER) OR
                       (plpt.major_action_desc = pkg_constants.GHUCS_MAJOR_ACTION_AMEND AND plpt.minor_action_desc = pkg_constants.GHUCS_MINOR_ACTION_REGRADE) OR
                       (plpt.major_action_desc = pkg_constants.GHUCS_MAJOR_ACTION_PROVIDE AND plpt.minor_action_desc = pkg_constants.GHUCS_MINOR_ACTION_PROVIDE))
                  AND plr.validation is NOT NULL)a;


       out_data_ref_cursor := v_attr_ref_cursor;


    ELSIF in_conditioner = pkg_constants.GHUCS_VALIDATION_IDENTIFIER THEN

    lv_error_location  := 80;
    v_product_friendly_name := in_friendly_name;
    v_attribute_name        := in_attribute_name;
      IF in_cbibo = 'Y' THEN
         OPEN v_value_ref_cursor FOR
           SELECT DISTINCT plr.validation AS "Value"
             FROM ppsr_owner.ppsr_products_v@dblink_ppsr prd, ppsr_link_prop_trans_v@dblink_ppsr plpt,
                  ppsr_link_rule_v@dblink_ppsr plr
            WHERE prd.prodkey                = plpt.prodkey
              AND plpt.trans_link_id         = plr.rule_trans_link_id
              AND plpt.prop_name             = v_prop_name
              AND plpt.sub_prop_name         = v_sub_prop_name
              AND plpt.product_friendly_name = v_product_friendly_name
              AND prd.product_name           = v_product_name
              AND plr.attribute_name_1       = v_attribute_name
              AND ((plpt.major_action_desc = pkg_constants.GHUCS_MAJOR_ACTION_AMEND AND plpt.minor_action_desc = pkg_constants.GHUCS_MINOR_ACTION_OTHER) OR
                   (plpt.major_action_desc = pkg_constants.GHUCS_MAJOR_ACTION_AMEND AND plpt.minor_action_desc = pkg_constants.GHUCS_MINOR_ACTION_REGRADE) OR
                   (plpt.major_action_desc = pkg_constants.GHUCS_MAJOR_ACTION_PROVIDE AND plpt.minor_action_desc = pkg_constants.GHUCS_MINOR_ACTION_PROVIDE))
              AND UPPER(plr.validation)         NOT LIKE UPPER('%Non-Int. VoIP%')
              AND plr.validation IS NOT NULL;
      ELSIF in_cbibo = 'N' THEN
         OPEN v_value_ref_cursor FOR
           SELECT DISTINCT plr.validation AS "Value"
             FROM ppsr_owner.ppsr_products_v@dblink_ppsr prd, ppsr_link_prop_trans_v@dblink_ppsr plpt,
                  ppsr_link_rule_v@dblink_ppsr plr
            WHERE prd.prodkey                = plpt.prodkey
              AND plpt.trans_link_id         = plr.rule_trans_link_id
              AND plpt.prop_name             = v_prop_name
              AND plpt.sub_prop_name         = v_sub_prop_name
              AND plpt.product_friendly_name = v_product_friendly_name
              AND prd.product_name           = v_product_name
              AND plr.attribute_name_1       = v_attribute_name
              AND ((plpt.major_action_desc = pkg_constants.GHUCS_MAJOR_ACTION_AMEND AND plpt.minor_action_desc = pkg_constants.GHUCS_MINOR_ACTION_OTHER) OR
                   (plpt.major_action_desc = pkg_constants.GHUCS_MAJOR_ACTION_AMEND AND plpt.minor_action_desc = pkg_constants.GHUCS_MINOR_ACTION_REGRADE) OR
                   (plpt.major_action_desc = pkg_constants.GHUCS_MAJOR_ACTION_PROVIDE AND plpt.minor_action_desc = pkg_constants.GHUCS_MINOR_ACTION_PROVIDE))
              AND UPPER(plr.validation) LIKE UPPER('%Non-Int. VoIP%')
              AND plr.validation IS NOT NULL;
      END IF;
      out_data_ref_cursor := v_value_ref_cursor;

    END IF;
  END IF;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
       out_status := pkg_constants.con_status_failure;
       out_errmsg :='No Data Available at location :'||lv_error_location;
  WHEN OTHERS THEN
       out_errmsg := 'At Location :'||lv_error_location||'-'||SQLCODE||'-'||SQLERRM;
       out_status := pkg_constants.con_status_failure;
END sps_product_lovs;
/* End: New SP added to provide Product Configuration LOV ,GHUCS on 26/08/2010 by Sandeep*/

   -- Begins, New Sp added to save Quote configuration using objects, MX on 10/08/2010
   PROCEDURE spi_quote_config_obj (
      in_quoteheaderid    IN       quote_header.quote_header_id%TYPE,
      in_siteid           IN       site.site_id%TYPE,
      in_line_item        IN       line_item_tbl,
      in_attributelevel   IN       VARCHAR2,
      in_createdby        IN       quote_site_service.created_by%TYPE,
      out_status          OUT      NUMBER,
      out_errmsg          OUT      VARCHAR2,
      in_attributelist       IN       CLOB DEFAULT NULL
   )
   AS
/******************************************************************************
   Usage Product Name:GHCUS/MX
   PURPOSE: fOR saving the Conf. quote screen

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0         22/8/00        Suman                            1.0 Add History Comment for  this procedure
     2.0         22/7/00        Suman                            1.0 Add addition code for check the BT product name save or not
  ******************************************************************************/
      TYPE t_qty IS TABLE OF NUMBER
         INDEX BY BINARY_INTEGER;

      v_prodid                  line_item.product_id%TYPE;
      v_prodname                line_item.product_name%TYPE;
      v_fallback                line_item.fallback_type%TYPE;
      v_parttype                line_item.part_type%TYPE;
      v_tattrid                 t_attrmapid;
      v_tconfiglevel            t_configlevel;
      v_tattrval                t_value;
      v_qty                     t_qty;
      v_rowid                   t_rowid;
      v_description             t_desc;
      v_bfg_inventry_id         t_invidd;
      v_pkg_instance_id         quote_line_item_as_is.PKG_INSTANCE_ID%TYPE;
      v_Actioncode              t_actioncode;
      v_no_voice_channel        t_no_voice_channel;--Added by Khader for GHUCS R15
      v_max_qty                 t_max_qty;--Added by Nagendra for GHUCS R16 Billing
      v_lineitemid              line_item.line_item_id%TYPE;
      v_lineitemids             VARCHAR2 (2000);
      v_attrlevel               attribute_mapping.attribute_level%TYPE;
      v_configlevel             attribute_mapping.config_level%TYPE;
      v_rowcount                NUMBER;
      v_prodattr                VARCHAR2 (8000);
      v_proddet                 VARCHAR2 (8000);
      v_attrdet                 VARCHAR2 (8000);
      v_attrcnt                 NUMBER;
      v_curdate                 TIMESTAMP;
      v_flag                    CHAR (1)                               := '1';
      v_existintlineitemid      line_item.line_item_id%TYPE;
      v_non_std_flag            VARCHAR2 (1);
      v_bidcount_pr             NUMBER                                   := 0;
      v_bidcount_sec            NUMBER                                   := 0;
      v_caseflag                CHAR (1);
      v_quote_site_service_id   quote_site_service.quote_site_service_id%TYPE;
      in_createddate            quote_site_service.created_date%TYPE:= SYSDATE;
      v_to_be_record_exist      NUMBER (3);
      v_varchar2_ntt            varchar2_ntt               := varchar2_ntt();
      v_line_item_tbl           line_item_tbl             := line_item_tbl ();
      v_line_item_detail_tbl    line_item_detail_tbl:= line_item_detail_tbl();
      v_scode                   t_scode;
      v_scode_bom               VARCHAR2 (8000);
   BEGIN

   if in_attributelist is not null then
       PKG_QUOTE.spu_configure_obj
      (
        in_quoteheaderid,
        in_siteid,
        1012437,
        in_attributelist, --------------3004~3005&&&&
        in_createdby,
        out_status,
        out_errmsg
      );
   end if;

      SELECT SYSDATE
        INTO v_curdate
        FROM DUAL;

      FOR j IN in_line_item.FIRST .. in_line_item.LAST
      LOOP
         v_lineitemid := NULL;
         v_flag := '1';

         IF (in_line_item (j).o_line_item_detail_tbl IS NOT NULL)
         THEN
            v_prodid := in_line_item (j).o_pid;
            v_prodname := in_line_item (j).o_product_name;
            v_fallback := in_line_item (j).o_fallback;
            v_parttype := in_line_item (j).o_part_type;
            v_non_std_flag := in_line_item (j).o_non_std_flag;
            v_scode_bom := in_line_item (j).o_scode;
            v_pkg_instance_id := in_line_item (j).o_pkg_instance_id;  --Added By Amit For GHUCS R7 MODIFY

          /* this for update the productid for the mxproduct only          */
            IF v_prodid=pkg_constants.con_mx_product_key THEN
              BEGIN
                IF (upper(v_prodname)<>pkg_constants.con_prod_bt_mobilexpress) THEN
                  BEGIN
                    UPDATE line_item
                    SET prod_friendly_id=pkg_constants.con_mx_product_key
                    WHERE line_item_id  =
                      (SELECT line_item_id
                      FROM line_item
                      WHERE quote_header_id  =in_quoteheaderid
                      AND active             =pkg_constants.con_activeflag_yes
                      AND upper(product_name)=pkg_constants.con_prod_bt_mobilexpress
                      );
                  END;
                END IF;
              END;
            END IF;


            IF (V_FALLBACK IS NULL)
            THEN
               BEGIN
                  v_fallback := 'Primary';
               END;
            END IF;

            /*--validation for parttype incase of CPE*/
            IF (UPPER (v_prodname) LIKE '%CPE%')
            THEN
               IF (v_parttype IS NULL)
               THEN
                  BEGIN
                     out_status := pkg_constants.con_status_failure;
                     out_errmsg := 'Part Type cannot be null for CPE';
                     v_flag := '0';
                  END;
               END IF;
            END IF;

            IF (v_flag = '1')
            THEN
               BEGIN
                  /*-- Check if record exists for the current product in line item*/
                  SELECT COUNT (*)
                    INTO v_rowcount
                    FROM line_item li
                   WHERE quote_header_id = in_quoteheaderid
                     AND (   site_id = in_siteid
                          OR (site_id IS NULL AND NVL (in_siteid, 0) = 0)
                         )
                     /*904 Order Site to Site SLA */
                     AND UPPER (product_name) = UPPER (v_prodname)
                     AND UPPER (fallback_type) = UPPER (v_fallback)
                     AND active = pkg_constants.con_activeflag_yes;

                  IF (v_rowcount = 0)
                  THEN
                     /*-- Check if record exists for the current product in line item*/
                     INSERT INTO line_item
                                 (line_item_id, quote_header_id,
                                  site_id, product_id, product_name,
                                  fallback_type, part_type, quantity,
                                  active,
                                  created_by, created_date, scode
                                  ,pkg_instance_id
                                 )
                          VALUES (line_item_id.NEXTVAL, in_quoteheaderid,
                                  in_siteid, v_prodid, v_prodname,
                                  v_fallback, v_parttype, DEFAULT,
                                  pkg_constants.con_activeflag_yes,
                                  in_createdby, v_curdate, v_scode_bom
                                  ,v_pkg_instance_id
                                 )
                       RETURNING line_item_id
                            INTO v_lineitemid;
                  ELSE
                     BEGIN
                        /*--Logic to incorporate CPE parts Insert/ Update*/
                        IF (v_parttype IS NOT NULL)
                        THEN
                           BEGIN
                              IF (UPPER (v_parttype) <> 'BUNDLE')
                              THEN
                                 BEGIN
                                    /*--if it is not bundle, update all previous records*/
                                    /*-- and insert new record*/
                                    UPDATE line_item li
                                       SET active =
                                               pkg_constants.con_activeflag_no,
                                           modified_date = v_curdate
                                     WHERE (   part_type IS NOT NULL
                                            OR part_type <> ''
                                           )
                                       AND quote_header_id = in_quoteheaderid
                                       AND (   site_id = in_siteid
                                            OR (    site_id IS NULL
                                                AND NVL (in_siteid, 0) = 0
                                               )
                                           )
                                       AND product_name = v_prodname
                                       AND created_date < v_curdate
                                       AND UPPER (fallback_type) =
                                                            UPPER (v_fallback)
                                       AND UPPER (part_type) =
                                                     UPPER (TRIM (v_parttype))
                                       AND modified_date IS NULL;

                                    INSERT INTO line_item
                                                (line_item_id,
                                                 quote_header_id, site_id,
                                                 product_id, product_name,
                                                 fallback_type, part_type,
                                                 quantity,
                                                 active,
                                                 created_by, created_date,
                                                 scode
                                                 ,pkg_instance_id
                                                )
                                         VALUES (line_item_id.NEXTVAL,
                                                 in_quoteheaderid, in_siteid,
                                                 v_prodid, v_prodname,
                                                 v_fallback, v_parttype,
                                                 DEFAULT,
                                                 pkg_constants.con_activeflag_yes,
                                                 in_createdby, v_curdate,
                                                 v_scode_bom
                                                 ,v_pkg_instance_id
                                                )
                                      RETURNING line_item_id
                                           INTO v_lineitemid;
                                 END;
                              ELSE
                                 BEGIN
                                    /*--For a bundle, check if it is existing*/
                                    SELECT COUNT (*)
                                      INTO v_rowcount
                                      FROM line_item li
                                     WHERE quote_header_id = in_quoteheaderid
                                       AND (   site_id = in_siteid
                                            OR (    site_id IS NULL
                                                AND NVL (in_siteid, 0) = 0
                                               )
                                           )
                                       AND product_name = v_prodname
                                       AND active =
                                              pkg_constants.con_activeflag_yes
                                       AND UPPER (fallback_type) =
                                                            UPPER (v_fallback)
                                       AND created_date < v_curdate
                                       AND product_id <> v_prodid
                                       AND modified_date IS NULL;

                                    IF (v_rowcount > 0)
                                    THEN
                                       BEGIN
                                          /*--A bundle exists with different product id, so soft delete and*/
                                          /*--then insert a new line item*/
                                          UPDATE line_item li
                                             SET active =
                                                    pkg_constants.con_activeflag_no,
                                                 modified_date = v_curdate
                                           WHERE UPPER (part_type) = 'BUNDLE'
                                             AND quote_header_id =
                                                              in_quoteheaderid
                                             AND (   site_id = in_siteid
                                                  OR (    site_id IS NULL
                                                      AND NVL (in_siteid, 0) =
                                                                             0
                                                     )
                                                 )
                                             AND product_name = v_prodname
                                             AND created_date < v_curdate
                                             AND UPPER (fallback_type) =
                                                            UPPER (v_fallback)
                                             AND product_id <> v_prodid
                                             AND modified_date IS NULL;

                                          /*--previous bundle with different product id*/
                                          /*-- has been to inactive. for same product id, check*/
                                          /*--if bundle is present*/
                                          SELECT COUNT (*)
                                            INTO v_rowcount
                                            FROM line_item li
                                           WHERE quote_header_id =
                                                              in_quoteheaderid
                                             AND (   site_id = in_siteid
                                                  OR (    site_id IS NULL
                                                      AND NVL (in_siteid, 0) =
                                                                             0
                                                     )
                                                 )
                                             AND product_name = v_prodname
                                             AND active =
                                                    pkg_constants.con_activeflag_yes
                                             AND UPPER (fallback_type) =
                                                            UPPER (v_fallback)
                                             AND UPPER (part_type) =
                                                            UPPER (v_parttype)
                                             AND modified_date IS NULL;

                                          /*--if not present, insert new record*/
                                          /*--else select existing line item*/
                                          IF (v_rowcount = 0)
                                          THEN
                                             INSERT INTO line_item
                                                         (line_item_id,
                                                          quote_header_id,
                                                          site_id,
                                                          product_id,
                                                          product_name,
                                                          fallback_type,
                                                          part_type,
                                                          quantity,
                                                          active,
                                                          created_by,
                                                          created_date,
                                                          quote_site_service_id,
                                                          scode
                                                         )
                                                  VALUES (line_item_id.NEXTVAL,
                                                          in_quoteheaderid,
                                                          in_siteid,
                                                          v_prodid,
                                                          v_prodname,
                                                          v_fallback,
                                                          v_parttype,
                                                          DEFAULT,
                                                          pkg_constants.con_activeflag_yes,
                                                          in_createdby,
                                                          v_curdate,
                                                          quote_site_service_id.NEXTVAL,
                                                          v_scode_bom
                                                         )
                                               RETURNING line_item_id
                                                    INTO v_lineitemid;
                                          ELSE
                                             SELECT line_item_id
                                               INTO v_lineitemid
                                               FROM line_item li
                                              WHERE quote_header_id =
                                                              in_quoteheaderid
                                                AND (   site_id = in_siteid
                                                     OR (    site_id IS NULL
                                                         AND NVL (in_siteid,
                                                                  0) = 0
                                                        )
                                                    )
                                                AND product_name = v_prodname
                                                AND active =
                                                       pkg_constants.con_activeflag_yes
                                                AND UPPER (fallback_type) =
                                                            UPPER (v_fallback)
                                                AND UPPER (part_type) =
                                                            UPPER (v_parttype)
                                                AND modified_date IS NULL;
                                          END IF;
                                       END;
                                    ELSE
                                       /*--previous bundle saved also has same product id*/
                                       SELECT line_item_id
                                         INTO v_lineitemid
                                         FROM line_item li
                                        WHERE quote_header_id =
                                                              in_quoteheaderid
                                          AND site_id = in_siteid
                                          AND UPPER (product_name) =
                                                            UPPER (v_prodname)
                                          AND UPPER (fallback_type) =
                                                            UPPER (v_fallback)
                                          AND active =
                                                 pkg_constants.con_activeflag_yes
                                          AND product_id = v_prodid;
                                    END IF;
                                 END;
                              END IF;
                           END;
                        ELSE
                           BEGIN
                              /*--for non - BT CPE products*/
                              SELECT line_item_id
                                INTO v_lineitemid
                                FROM line_item li
                               WHERE quote_header_id = in_quoteheaderid
                                 AND (   site_id = in_siteid
                                      OR (    site_id IS NULL
                                          AND NVL (in_siteid, 0) = 0
                                         )
                                     )
                                 AND UPPER (product_name) = UPPER (v_prodname)
                                 AND UPPER (fallback_type) =
                                                            UPPER (v_fallback)
                                 AND active = pkg_constants.con_activeflag_yes
                                 AND product_id = v_prodid;
                           END;
                        END IF;

                        /*----May be a performance bottleneck!*/
                        /*--collect line_item_ids to update line_item_detail*/
                        SELECT pkg_common.to_string
                                  (CAST
                                      (COLLECT (TO_CHAR (line_item_id)) AS varchar2_ntt
                                      )
                                  )
                          INTO v_lineitemids
                          FROM line_item li
                         WHERE quote_header_id = in_quoteheaderid
                           AND (   site_id = in_siteid
                                OR (site_id IS NULL AND NVL (in_siteid, 0) = 0
                                   )
                               )
                           AND UPPER (product_name) = UPPER (v_prodname)
                           AND UPPER (fallback_type) = UPPER (v_fallback)
                           AND active =
                                  CASE
                                     /*--added case condition for when line_item*/
                                     /*--is not updated for part type bundle*/
                                  WHEN (   (    v_parttype IS NULL
                                            AND modified_date IS NULL
                                           )
                                        OR (    v_parttype = ''
                                            AND modified_date IS NULL
                                           )
                                        OR (    UPPER (v_parttype) = 'BUNDLE'
                                            AND product_id = v_prodid
                                            AND modified_date IS NULL
                                           )
                                       )
                                        THEN pkg_constants.con_activeflag_yes
                                     ELSE pkg_constants.con_activeflag_no
                                  END;

                        IF (INSTR (v_lineitemids, ',', 1) = 0)
                        THEN
                           v_lineitemids := v_lineitemids || ',';
                        END IF;
                     END;
                  END IF;

            v_tattrid.delete;
            v_tconfiglevel.delete;
            v_tattrval.delete;
            v_qty.delete;
            v_rowid.delete;
            v_bfg_inventry_id.delete;
            v_no_voice_channel.delete; --Added by Khader for GHUCS R15
            v_max_qty.delete; --Added by Nagendra for GHUCS R16 Billing
            /*--get the individual parameters from the input string*/
                  FOR k IN
                     in_line_item (j).o_line_item_detail_tbl.FIRST .. in_line_item
                                                                           (j).o_line_item_detail_tbl.LAST
                  LOOP

                     v_tattrid (k) :=
                            in_line_item (j).o_line_item_detail_tbl (k).o_aid;
                     v_tconfiglevel (k) :=
                        in_line_item (j).o_line_item_detail_tbl (k).o_config_level;
                     v_tattrval (k) :=
                          in_line_item (j).o_line_item_detail_tbl (k).o_value;
                     v_qty (k) :=
                            in_line_item (j).o_line_item_detail_tbl (k).o_qty;
                     v_rowid (k) :=
                          in_line_item (j).o_line_item_detail_tbl (k).o_rowid;
                     v_description (k) :=
                        in_line_item (j).o_line_item_detail_tbl (k).o_description;
                     /*Start: Added by Amit for GHUCS R7 MODIFY */
                     v_Actioncode(k)  :=
                        IN_LINE_ITEM (J).O_LINE_ITEM_DETAIL_TBL (K).o_action_code;
                     v_bfg_inventry_id (k) :=
                          in_line_item (j).o_line_item_detail_tbl (k).o_bfg_inventory_id;
                     /*End: Added by Amit for GHUCS R7 MODIFY */
                        /*Start: Added by Khader for GHUCS R15  */
                     v_no_voice_channel(k)  :=
                        IN_LINE_ITEM (J).O_LINE_ITEM_DETAIL_TBL (K).o_no_voice_channel;
                         /*End: Added by Khader for GHUCS R15  */
                     /*Start: Added by Nagendra for GHUCS R16 Billing  */
                     v_max_qty(k)  :=
                        IN_LINE_ITEM (J).O_LINE_ITEM_DETAIL_TBL (K).o_max_qty;
                         /*End: Added by Nagndra for GHUCS R16 Billing  */
                    END LOOP;

                  /*--update active status for all attributes in line_item_detail*/
                  /*--for the given product and given config level and attribute level*/
                  FORALL i IN v_tconfiglevel.FIRST .. v_tconfiglevel.LAST
                     -- FOR i IN  v_tconfiglevel.FIRST .. v_tconfiglevel.LAST loop
                     UPDATE line_item_detail
                        SET active = pkg_constants.con_activeflag_no,
                            modified_date = v_curdate,
                            modified_by = in_createdby
                      WHERE line_item_id IN
                     (
                               SELECT TO_NUMBER (COLUMN_VALUE)
                                 FROM TABLE
                                         (CAST
                                             (pkg_common.fn_splitdata
                                                               (v_lineitemids,
                                                                ','
                                                               ) AS varchar2_ntt
                                             )
                                         ))
                        AND attribute_mapping_id IN (
                               SELECT attribute_mapping_id
                                 FROM attribute_mapping
                                WHERE UPPER (config_level) =
                                                    UPPER (v_tconfiglevel (i))
                                  AND TRIM (UPPER (attribute_level)) =
                                              TRIM (UPPER (in_attributelevel)))
                        AND created_date < v_curdate
                        AND modified_date IS NULL;

                  UPDATE line_item
                     SET priced = pkg_constants.con_activeflag_no
                   WHERE line_item_id IN (
                            SELECT TO_NUMBER (COLUMN_VALUE)
                              FROM TABLE
                                      (CAST
                                          (pkg_common.fn_splitdata
                                                               (v_lineitemids,
                                                                ','
                                                               ) AS varchar2_ntt
                                          )
                                      ))
                     AND created_date < v_curdate
                     AND modified_date IS NULL;

                  UPDATE price_line_item_detail
                     SET active = pkg_constants.con_activeflag_no,
                         modified_date = v_curdate,
                         modified_by = in_createdby
                   WHERE line_item_id IN (
                            SELECT TO_NUMBER (COLUMN_VALUE)
                              FROM TABLE
                                      (CAST
                                          (pkg_common.fn_splitdata
                                                               (v_lineitemids,
                                                                ','
                                                               ) AS varchar2_ntt
                                          )
                                      ))
                     AND created_date < v_curdate
                     AND modified_date IS NULL;

                    /*--insert into line-item_detail all the attributes after making*/
                  /*--existing attributes as inactive*/
                  FORALL i IN 1 .. in_line_item (j).o_line_item_detail_tbl.COUNT
                     INSERT INTO line_item_detail
                                 (line_item_detail_id, line_item_id,
                                  attribute_mapping_id, VALUE,
                                  active,
                                  created_by, created_date, quantity,
                                  row_id, non_std_flag,
                                  line_item_description,
                                   ACTION_CODE ,bfg_inventory_id,
                                   no_voice_channel,           --Added by Khader for GHUCS R15
                                   max_qty --Added by Nagendra for GHUCS R16
                                   )
                          VALUES (line_item_detail_id.NEXTVAL, v_lineitemid,
                                  v_tattrid (i), v_tattrval (i),
                                  pkg_constants.con_activeflag_yes,
                                  in_createdby, v_curdate, v_qty (i),
                                  v_rowid (i), v_non_std_flag,
                                  v_description (i),
                                  v_Actioncode(I),v_bfg_inventry_id (i),
                                  V_No_voice_channel(i),     --Added by Khader for GHUCS R15
                                  v_max_qty(i)     --Added by Nagendra for GHUCS R16 Billing
                                  );
                  out_status := pkg_constants.con_status_success;
               /*--  COMMIT;*/
               END;
            END IF;
         ELSE
            BEGIN
               out_status := pkg_constants.con_status_failure;
               out_errmsg := 'Invalid Product-Attribute List';
            END;
         END IF;
      END LOOP;
   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         OUT_ERRMSG := SQLERRM;
   END;

--Start: New Sp added to Delete Quote configuration for GHUCS on 26/08/2010
   PROCEDURE spd_quote_config (
      in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
      in_siteid          IN       VARCHAR2,
      in_modifiedby      IN       quote_site.modified_by%TYPE,
      out_status         OUT      NUMBER,
      out_errmsg         OUT      VARCHAR2
   )
   AS
      CURSOR c_siteid
      IS
         SELECT *
           FROM TABLE
                     (CAST (pkg_common.fn_splitdata (in_siteid, '~') AS varchar2_ntt
                           )
                     );

      v_cntqoutesite   NUMBER;
      v_cntaccqref     NUMBER;
      v_cntlineitem    NUMBER;
      v_cntcpeqref     NUMBER;
      v_siteid         site.site_id%TYPE;
      v_quotesiteid    quote_site.quote_site_id%TYPE;
      v_productid      line_item.product_id%TYPE;
      v_count          NUMBER;
   BEGIN
      OPEN c_siteid;

      LOOP
         FETCH c_siteid
          INTO v_siteid;

         EXIT WHEN c_siteid%NOTFOUND;

         SELECT COUNT (*)
           INTO v_cntqoutesite
           FROM quote_site
          WHERE quote_header_id = in_quoteheaderid
            AND site_id = v_siteid
            AND active = pkg_constants.con_activeflag_yes;

         SELECT COUNT (*)
           INTO v_cntlineitem
           FROM line_item
          WHERE quote_header_id = in_quoteheaderid
            AND site_id = v_siteid
            AND active = pkg_constants.con_activeflag_yes;

         IF (v_cntqoutesite != 0)
         THEN
            BEGIN
               SELECT quote_site_id
                 INTO v_quotesiteid
                 FROM quote_site
                WHERE quote_header_id = in_quoteheaderid
                  AND site_id = v_siteid
                  AND active = pkg_constants.con_activeflag_yes;

               SELECT COUNT (*)
                 INTO v_cntaccqref
                 FROM access_qref
                WHERE quote_site_id = v_quotesiteid;

               SELECT COUNT (*)
                 INTO v_cntcpeqref
                 FROM cpe_qref
                WHERE quote_site_id = v_quotesiteid;

               IF (v_cntaccqref != 0)
               THEN
                  BEGIN
                     --delete access_caveat and access_qref
                     DELETE FROM access_caveat
                           WHERE access_qref_id IN (
                                          SELECT access_qref_id
                                            FROM access_qref
                                           WHERE quote_site_id =
                                                                v_quotesiteid);

                     DELETE FROM access_qref
                           WHERE quote_site_id = v_quotesiteid;
                  END;
               END IF;

               IF (v_cntcpeqref != 0)
               THEN
                  BEGIN
                     --delete cpe_caveat and cpe_qref
                     DELETE FROM cpe_caveat
                           WHERE cpe_qref_id IN (
                                          SELECT cpe_qref_id
                                            FROM cpe_qref
                                           WHERE quote_site_id =
                                                                v_quotesiteid);

                     DELETE FROM cpe_qref
                           WHERE quote_site_id = v_quotesiteid;
                  END;
               END IF;
            END;
         END IF;

         IF (v_cntlineitem != 0)
         THEN
            BEGIN
               --update line_item_detail and price_line_item_detail
               DELETE      line_item_detail
                     WHERE line_item_id IN (
                              SELECT line_item_id
                                FROM line_item
                               WHERE quote_header_id = in_quoteheaderid
                                 AND site_id = v_siteid
                                                       --AND active = pkg_constants.con_activeflag_yes
                           );

               DELETE      price_line_item_detail
                     WHERE line_item_id IN (
                              SELECT line_item_id
                                FROM line_item
                               WHERE quote_header_id = in_quoteheaderid
                                 AND site_id = v_siteid
                                                       --AND active = pkg_constants.con_activeflag_yes
                           );
            END;
         END IF;

         -- Delete line_item , quote_site and product_selection for the corrsponding site and quote
         DELETE      line_item
               WHERE quote_header_id = in_quoteheaderid
                 AND site_id = v_siteid
                 AND active = pkg_constants.con_activeflag_yes;

         DELETE      product_selection
               WHERE quote_header_id = in_quoteheaderid
                 AND site_id = v_siteid
                 AND active = pkg_constants.con_activeflag_yes;
      END LOOP;

      out_status := pkg_constants.con_status_success;
      --COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         out_errmsg := SQLERRM;
         ROLLBACK;
   END;

   --End: New Sp added to Delete Quote configuration for GHUCS on 26/08/2010


------------------Start MX SP
PROCEDURE spu_configure_obj
  (
    in_quoteheaderid IN quote_header.quote_header_id%TYPE,
    in_siteid        IN line_item.site_id%TYPE,
    in_product_id    IN line_item.product_id%TYPE,
    in_attributelist IN CLOB, --------------3004~3005&&&&
    in_modifiedby    IN NUMBER,
    out_status out NUMBER,
    out_errmsg out VARCHAR2
  )
AS
      V_COUNT                   NUMBER;
      v_line_item_id            NUMBER(12);
      v_prodattr                VARCHAR2 (40);
      V_ATTRIBUTE_ID            VARCHAR2 (40);
      V_PRODUCT_NAME            ATTRIBUTE_MAPPING.SQE_DISPLAY_TEXT%TYPE;
      V_ORDER_ID                ORDER_HEADER.ORDER_HEADER_ID%TYPE;
      V_ORBER_LINE_ITEM_ID      ORDER_LINE_ITEM.ORDER_LINE_ITEM_ID%TYPE;
      V_SQL_CODE                NUMBER;
      V_SQL_ERRM                VARCHAR2(150);

    CURSOR c_attributelist
    IS
      SELECT *
      FROM TABLE (CAST (pkg_common.fn_splitbulkupload (in_attributelist, '~') AS varchar2_clob ) );
BEGIN
  IF (in_attributelist IS NOT NULL) THEN
    OPEN c_attributelist;
    loop
      fetch c_attributelist INTO v_prodattr;
      exit
        WHEN c_attributelist%notfound;
      v_attribute_id := v_prodattr;

      SELECT to_number (v_attribute_id) INTO v_attribute_id FROM dual;

      SELECT upper(am.sqe_display_text)
      INTO v_product_name
      FROM attribute_mapping am
      WHERE am.attribute_mapping_id = v_attribute_id
      AND AM.ACTIVE                 = 'Y';

    BEGIN
      SELECT order_header_id
      INTO v_order_id
      FROM order_header
      WHERE quote_header_id=in_quoteheaderid;
    exception
     WHEN no_data_found THEN
     v_order_id:=NULL;
     END;

     ---------With out site is chekcing.
      IF V_ATTRIBUTE_ID IN (2862,2863,2864,2865,2866,2867,2868,2885,2886,3006) THEN
        SELECT upper(ppsr_attribute)
        INTO v_product_name
        FROM attribute_mapping
        WHERE attribute_mapping_id IN (v_attribute_id);

        FOR c_line_item            IN
          (SELECT line_item_id
          FROM line_item li
          WHERE li.quote_header_id   = in_quoteheaderid
          AND li.product_id          = in_product_id
          AND li.active              = pkg_constants.con_activeflag_yes
          AND upper(li.product_name) = upper(v_product_name)
          )
          loop
          UPDATE price_line_item_detail plid
            SET plid.active         = pkg_constants.con_activeflag_no,
            modified_by           = in_modifiedby,
            modified_date         = SYSDATE ()
          WHERE plid.line_item_id = c_line_item.line_item_id
          AND active              = pkg_constants.con_activeflag_yes;

          UPDATE line_item_detail lid
          SET lid.active         = pkg_constants.con_activeflag_no,
            lid.modified_by      = in_modifiedby,
            lid.modified_date    = SYSDATE ()
          WHERE lid.line_item_id = c_line_item.line_item_id
          AND lid.active         = pkg_constants.con_activeflag_yes;

          UPDATE line_item li
          SET li.active            = pkg_constants.con_activeflag_no,
            li.modified_by         = in_modifiedby,
            li.modified_date       = SYSDATE ()
          WHERE li.quote_header_id = in_quoteheaderid
          AND li.line_item_id      = c_line_item.line_item_id
          AND LI.ACTIVE            = PKG_CONSTANTS.CON_ACTIVEFLAG_YES;
        ----asis
          UPDATE ORDER_LINE_ITEM_AS_IS OLIAS
          SET OLIAS.TOBE_MODIFIED     = pkg_constants.con_activeflag_no,
            OLIAS.modified_by         = in_modifiedby,
            OLIAS.modified_date       = SYSDATE ()
          WHERE OLIAS.QUOTE_HEADER_ID = IN_QUOTEHEADERID
          AND UPPER(OLIAS.PRODUCT_NAME) = V_PRODUCT_NAME
          AND OLIAS.active            = pkg_constants.con_activeflag_yes;
        END loop;
        /* order data deavicating process */
      ELSIF
      v_order_id   IS NOT NULL  AND v_attribute_id IN (3006,2886,2865,2866,2867,2868,3084,2887,2888,2999,2998,3000) THEN
        FOR c_order_item IN
        (SELECT order_line_item_id
        FROM order_line_item oli
        WHERE oli.order_header_id = v_order_id
        AND oli.product_id           = in_product_id
        AND oli.active               = pkg_constants.con_activeflag_yes
        AND upper(oli.product_name)  = upper(v_product_name)
        )
        loop
          UPDATE order_line_item oli
          SET oli.active               = pkg_constants.con_activeflag_no,
            modified_by                = in_modifiedby,
            modified_date              = SYSDATE ()
          WHERE oli.order_line_item_id = c_order_item.order_line_item_id
          AND OLI.ACTIVE               = PKG_CONSTANTS.CON_ACTIVEFLAG_YES;
        END loop;
      END IF;
      ---------individual product checking site_id
      BEGIN
      IF v_product_name IS NOT NULL AND v_attribute_id NOT IN (3006,2886,2865,2866,2867,2868) THEN

      BEGIN
        SELECT line_item_id
        INTO v_line_item_id
        FROM line_item li
        WHERE li.quote_header_id   = in_quoteheaderid
        AND li.site_id           = in_siteid
        AND li.product_id          = in_product_id
        AND li.active              = pkg_constants.con_activeflag_yes
        AND upper(li.product_name) = upper(v_product_name);
      exception
        WHEN no_data_found THEN
        out_status := pkg_constants.con_status_success;
        WHEN others THEN
            out_status := pkg_constants.con_status_failure;
            out_errmsg := substr(sqlerrm,1,150);
      END;

        UPDATE price_line_item_detail plid
        SET plid.active         = pkg_constants.con_activeflag_no,
          modified_by           = in_modifiedby,
          modified_date         = SYSDATE ()
        WHERE plid.line_item_id = v_line_item_id
        AND ACTIVE              = PKG_CONSTANTS.CON_ACTIVEFLAG_YES;

        UPDATE line_item_detail lid
        SET lid.active         = pkg_constants.con_activeflag_no,
          lid.modified_by      = in_modifiedby,
          lid.modified_date    = SYSDATE ()
        WHERE lid.line_item_id = v_line_item_id
        AND lid.active         = pkg_constants.con_activeflag_yes;

        UPDATE line_item li
        SET li.active            = pkg_constants.con_activeflag_no,
          li.modified_by         = in_modifiedby,
          li.modified_date       = SYSDATE ()
        WHERE li.quote_header_id = in_quoteheaderid
        AND li.line_item_id      = v_line_item_id
        AND LI.ACTIVE            = PKG_CONSTANTS.CON_ACTIVEFLAG_YES;
----asis
        UPDATE ORDER_LINE_ITEM_AS_IS OLIAS
        SET OLIAS.TOBE_MODIFIED     = pkg_constants.con_activeflag_no,
          OLIAS.modified_by         = in_modifiedby,
          OLIAS.modified_date       = SYSDATE ()
        WHERE OLIAS.QUOTE_HEADER_ID = IN_QUOTEHEADERID
        AND UPPER(OLIAS.PRODUCT_NAME) = V_PRODUCT_NAME
        AND OLIAS.ACTIVE            = PKG_CONSTANTS.CON_ACTIVEFLAG_YES
        AND OLIAS.site_id           = in_siteid;

  end if;
     if v_order_id IS NOT NULL AND v_attribute_id NOT IN (3006,2886,2865,2866,2867,2868)  THEN
        SELECT order_line_item_id
        INTO v_orber_line_item_id
        FROM order_line_item oli
        WHERE oli.order_header_id = v_order_id
        AND  oli.site_id            = in_siteid
        AND oli.product_id           = in_product_id
        AND oli.active               = pkg_constants.con_activeflag_yes
        AND upper(oli.product_name)  = upper(v_product_name);

        UPDATE order_line_item oli
        SET oli.active               = pkg_constants.con_activeflag_no,
          modified_by                = in_modifiedby,
          modified_date              = SYSDATE ()
        WHERE OLI.ORDER_LINE_ITEM_ID = V_ORBER_LINE_ITEM_ID
        AND oli.active               = pkg_constants.con_activeflag_yes;

        UPDATE ORDER_LINE_ITEM_DETAIL OLID
        SET olid.active               = pkg_constants.con_activeflag_no,
          modified_by                 = in_modifiedby,
          modified_date               = SYSDATE ()
        WHERE olid.order_line_item_id = v_orber_line_item_id
        AND olid.active               = pkg_constants.con_activeflag_yes;
      END IF;
      END;
    END loop;
  END IF;


  out_status := pkg_constants.con_status_success;
exception
  WHEN no_data_found THEN
        out_status := pkg_constants.con_status_success;
   WHEN others THEN
            out_status := pkg_constants.con_status_failure;
            out_errmsg := substr(sqlerrm,1,150);
            v_sql_code := sqlcode;
            pkg_common.spi_error_log(
                                  NULL,
                                  in_quoteheaderid,
                                  NULL,
                                  NULL,
                                  NULL,
                                  'spu_configure_obj',
                                  v_sql_code,
                                  out_errmsg
                                 );
 END;
------------------END MX SP

/***** SQE added for update bfg inventory id  at product level BT IVPN2 R9/R11 Modify ******/

PROCEDURE spi_bfg_inventory_id (
   in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
   in_siteid          IN       line_item.site_id%TYPE,
   in_servicename     IN       quote_site_service.service_name%TYPE,
   in_bfg_tbl         IN       bfg_inventory_detail_tbl,
   in_createdby       IN       price_line_item_detail.created_by%TYPE,
   out_status         OUT      NUMBER,
   out_errmsg         OUT      VARCHAR2
)
AS
   v_quote_site_service_id   quote_site_service.quote_site_service_id%TYPE;
BEGIN
   BEGIN
      SELECT quote_site_service_id
        INTO v_quote_site_service_id
        FROM quote_site_service
       WHERE quote_header_id = in_quoteheaderid
         AND (   site_id = in_siteid
              OR (site_id IS NULL AND NVL (in_siteid, 0) = 0)
             )
         AND UPPER (service_name) = UPPER (in_servicename);
   EXCEPTION
      WHEN NO_DATA_FOUND
      THEN
         out_status := pkg_constants.con_status_failure;
         out_errmsg := 'error while searching for quote_site_service_id';
         RETURN;
   END;

   IF in_bfg_tbl.EXISTS (1)
   THEN
      FOR i IN in_bfg_tbl.FIRST .. in_bfg_tbl.LAST
      LOOP
         DELETE FROM bfg_inventory_detail
               WHERE line_item_id IN (
                        SELECT line_item_id
                          FROM line_item
                         WHERE quote_header_id = in_quoteheaderid
                           AND (   site_id = in_siteid
                                OR (site_id IS NULL AND NVL (in_siteid, 0) = 0
                                   )
                               )               /*904 Order Site to Site SLA */
                           AND quote_site_service_id = v_quote_site_service_id
                           AND UPPER (product_id) =
                                             UPPER (in_bfg_tbl (i).product_id)
                           AND active = pkg_constants.con_activeflag_yes
                           AND NVL (part_type, '-1') =
                                  DECODE (UPPER (product_name),
                                          'BT CPE', 'Bundle',
                                          NVL (part_type, '-1')
                                         )
                           --for BT Cpe only part type called Bundle has to be picked up
                           AND UPPER (fallback_type) =
                                          UPPER (in_bfg_tbl (i).fallback_type));

         INSERT INTO bfg_inventory_detail
                     (bfg_inventory_detail_id, line_item_id, bfg_id_1,
                      bfg_id_2, bfg_id_3, bfg_id_4)
            SELECT bfg_inventory_detail_id.NEXTVAL, line_item_id,
                   in_bfg_tbl (i).bfg_id_1, in_bfg_tbl (i).bfg_id_2,
                   in_bfg_tbl (i).bfg_id_3, in_bfg_tbl (i).bfg_id_4
              FROM line_item
             WHERE quote_header_id = in_quoteheaderid
               AND (   site_id = in_siteid
                    OR (site_id IS NULL AND NVL (in_siteid, 0) = 0)
                   )                           /*904 Order Site to Site SLA */
               AND quote_site_service_id = v_quote_site_service_id
               AND UPPER (product_id) = UPPER (in_bfg_tbl (i).product_id)
               AND active = pkg_constants.con_activeflag_yes
               AND NVL (part_type, '-1') =
                      DECODE (UPPER (product_name),
                              'BT CPE', 'Bundle',
                              NVL (part_type, '-1')
                             )
               --for BT Cpe only part type called Bundle has to be picked up
               AND UPPER (fallback_type) =
                                          UPPER (in_bfg_tbl (i).fallback_type);
      END LOOP;
   END IF;

   out_status := pkg_constants.con_status_success;
EXCEPTION
   WHEN OTHERS
   THEN
      out_status := pkg_constants.con_status_failure;
      out_errmsg :=
                  'pkg_quote.spi_bfg_inventory_id failed, error->' || SQLERRM;
      ROLLBACK;
END;
/****************/

/***Below SP Delete configuration for quote and site. Will not delete quote site.  **/
PROCEDURE spd_configuration (
   in_quoteheaderid   IN       quote_header.quote_header_id%TYPE,
   in_siteid          IN       site.site_id%TYPE,
   out_status         OUT      NUMBER,
   out_errmsg         OUT      VARCHAR2
)
AS
   v_quotesiteid   quote_site.quote_site_id%TYPE;
   v_cntaccqref    NUMBER                          := 0;
   v_cntcpeqref    NUMBER                          := 0;
BEGIN
   ---finding out the quote_site_id for checking access qref and cpe qref
   SELECT quote_site_id
     INTO v_quotesiteid
     FROM quote_site
    WHERE quote_header_id = in_quoteheaderid
      AND site_id = in_siteid
      AND active = 'Y';

   --checking count of access qref
   SELECT COUNT (*)
     INTO v_cntaccqref
     FROM access_qref
    WHERE quote_site_id = v_quotesiteid;

   --checking count of cpe qref
   SELECT COUNT (*)
     INTO v_cntcpeqref
     FROM cpe_qref
    WHERE quote_site_id = v_quotesiteid;

   --if access qref exists, the delete it
   IF (v_cntaccqref != 0)
   THEN
      BEGIN
         --delete access_caveat and access_qref
         DELETE FROM access_caveat
               WHERE access_qref_id IN (SELECT access_qref_id
                                          FROM access_qref
                                         WHERE quote_site_id = v_quotesiteid);

         DELETE FROM access_qref
               WHERE quote_site_id = v_quotesiteid;
      END;
   END IF;

   --if cpe qref exists, the delete it
   IF (v_cntcpeqref != 0)
   THEN
      BEGIN
         --delete cpe_caveat and cpe_qref
         DELETE FROM cpe_caveat
               WHERE cpe_qref_id IN (SELECT cpe_qref_id
                                       FROM cpe_qref
                                      WHERE quote_site_id = v_quotesiteid);

         DELETE FROM cpe_qref
               WHERE quote_site_id = v_quotesiteid;
      END;
   END IF;

   --delete the configuration at attribute level
   DELETE FROM line_item_detail
         WHERE line_item_id IN (
                  SELECT line_item_id
                    FROM line_item
                   WHERE quote_header_id = in_quoteheaderid
                     AND site_id = in_siteid);

   -- Delete from cost details which stores additional pricing info
   DELETE FROM cost_detail
         WHERE price_line_item_detail_id IN (
                  SELECT price_line_item_detail_id
                    FROM price_line_item_detail
                   WHERE line_item_id IN (
                            SELECT line_item_id
                              FROM line_item
                             WHERE quote_header_id = in_quoteheaderid
                               AND site_id = in_siteid
                               AND active = pkg_constants.con_activeflag_yes));

   --delete pricing
   DELETE FROM price_line_item_detail
         WHERE line_item_id IN (
                  SELECT line_item_id
                    FROM line_item
                   WHERE quote_header_id = in_quoteheaderid
                     AND site_id = in_siteid
                     AND active = pkg_constants.con_activeflag_yes)
         AND active = pkg_constants.con_activeflag_yes;


   --deleting access, port and CPE products.
   DELETE FROM line_item
   WHERE quote_header_id = in_quoteheaderid
   AND site_id = in_siteid
   AND active = pkg_constants.con_activeflag_yes;

   /*returning out status as true */
   out_status := pkg_constants.con_status_success;
EXCEPTION
   WHEN OTHERS
   THEN
      out_status := pkg_constants.con_status_failure;
      out_errmsg :=
            'spd_configuration, error->'
         || SQLCODE
         || SQLERRM
         || DBMS_UTILITY.format_error_backtrace;
END;

-------As Data Saving SP for MX---------

 PROCEDURE spi_asset_from_bfg_multisite (
      in_quoteid           IN     quote_header.quote_id%TYPE,
      IN_QUOTEHEADERID     IN     QUOTE_HEADER.QUOTE_HEADER_ID%TYPE,
      in_siteid            IN     site_detials_tab,
      in_line_item_tbl     IN     line_item_tbl,
      in_service_name      IN     VARCHAR2,
      in_attributelevel    IN     VARCHAR2,
      in_bfg_customer_id   IN     customer.bfg_customer_id%TYPE,
      in_createdby         IN     quote_site_service.created_by%TYPE,
      IN_CONTACT_DETILS    in     SITE_DETIALS_TAB_ASIS,
      out_status              OUT NUMBER,
      out_errmsg              OUT VARCHAR2)
   AS
      /******************************************************************************
      NAME:       SQE MX Modified jonery Quote Confi.
      PURPOSE:    This SP is used to save the detils for the Modified Quote Configuration Detials for
      IPSEC and SSL for MX -R9
      REVISIONS:
      Ver        Date        Author           Description
      ---------  ----------  ---------------  ------------------------------------
      1.0        12/12/2010   Suman           1. This sp is used for saving the CONF.
      2.0        24/06/2011   Suman/SRK/Jay   2. Modified the sp add function call to get the distinct values.
      ******************************************************************************/
      v_site_id                NUMBER (15);
      v_site_name              VARCHAR2 (255);
      v_site_country           VARCHAR2 (255);
      v_site_city              VARCHAR2 (22);
      v_count_site_id          NUMBER;
      /*--SITE PARAMTER*/
      in_customerid            NUMBER;
      in_countryid             NUMBER;
      in_county                VARCHAR2 (255);
      in_additionalsite        VARCHAR2 (200);
      in_pricontact            VARCHAR2 (200);
      in_bfgsiteid             NUMBER;
      in_bfgsitename           VARCHAR2 (100);
      in_mainsiteflag          CHAR (1);
      out_siteid               NUMBER;
      in_modifiedby            NUMBER;
      /*contact information vairable*/
      v_local_central_site     site.site_id%TYPE;
      v_sqe_customer_id        customer.customer_id%TYPE;
      v_bfg_site_id            site.bfg_site_id%TYPE;
      v_site_name_sqe          site.NAME%TYPE;
      v_bfg_location_id        site.bfg_subloc_id%TYPE;
      v_bfg_address_id         site.bfg_address_id%TYPE;
      v_address_line1          address.address_line1%TYPE;
      v_address_line2          address.address_line2%TYPE;
      v_floor                  address.FLOOR%TYPE;
      v_room                   address.room%TYPE;
      v_city                   address.city%TYPE;
      v_state                  address.state%TYPE;
      v_country                country.NAME%TYPE;
      v_post                   address.post_zip_code%TYPE;
      v_phone                  contact.phone_number%TYPE;
      v_email                  contact.email%TYPE;
      v_expedio_site_id        site.expedio_site_id%TYPE;
      v_bfg_contact_id         site.bfg_site_contact_id%TYPE;
      v_first_name             contact.first_name%TYPE;
      v_last_name              contact.last_name%TYPE;
      v_phone_number           contact.phone_number%TYPE;
      v_job_title              contact.job_title%TYPE;
      v_fax                    contact.fax%TYPE;
      v_contact_type           contact.contact_type%TYPE;
      v_country_id             country.country_id%TYPE;
      v_mobile_number          contact.mobile_number%TYPE;
      v_primary_contacts       VARCHAR2 (2000) := '';
      v_quote_site_id          quote_site.site_id%TYPE;
      /* Site Updat Variables */
      v_sqe_site_id            site.site_id%TYPE;
      v_line_item              line_item_tbl := line_item_tbl ();
      v_site_type              VARCHAR2 (20);
      j                        NUMBER := 0;
      v_attribute_mapping_id   NUMBER := 0;
      v_product_name           line_item.product_name%TYPE;
      v_line_item_id           line_item.line_item_id%TYPE;
      v_line_item_id1          NUMBER;
      v_line_item_count        NUMBER;
      v_sql_code               NUMBER;
      v_sql_errm               VARCHAR2 (150);
      v_expe_site_id           VARCHAR2 (100);
      v_product_name_cont      VARCHAR2 (500);
      v_bfg_contact_role_id    NUMBER;
      v_count_pn               NUMBER;
      v_existing_account_id    address.address_id%TYPE;
      v_existing_contact_id    contact.contact_id%TYPE;
      v_addressid              address.address_id%TYPE;
      v_contactid              contact.contact_id%TYPE;
      V_ERRORLOGMSG            VARCHAR2 (2000);
      v_sorted_site_tbl       site_detials_tab := site_detials_tab();
      v_quote_site_service_id NUMBER;
   BEGIN
      v_errorlogmsg := '1';

    SELECT DISTINCT quote.customer_id
        INTO in_customerid
        FROM    quote_header
             INNER JOIN
                quote
             ON quote.quote_id = quote_header.quote_id
       WHERE quote_header_id = in_quoteheaderid
             AND quote.quote_id = in_quoteid;


        SELECT site_detials_obj
          ( site_id, site_name , site_country , site_city ,
            first_name , surname , job_title , state_province ,
            post_zip_code , phone_number , address_line_1 ,
            address_line_2 , email , o_billing_id ,
            o_org_name , o_org_id ) BULK COLLECT
        INTO v_sorted_site_tbl
        FROM
          ( SELECT DISTINCT site_id,
            site_name ,site_country ,site_city ,
            first_name ,surname ,job_title ,
            state_province ,post_zip_code ,phone_number ,
            address_line_1 ,address_line_2 ,email ,
            o_billing_id ,o_org_name ,o_org_id
          FROM TABLE (site_details_tbl_to_cur (in_siteid))
          ) A;

--        FOR site_cusr IN v_sorted_site_tbl.FIRST .. v_sorted_site_tbl.LAST
--      LOOP
--         jay_debug (IN_QUOTEHEADERID,
--                    in_siteid (site_cusr).site_id,
--                    'site obj');
--      END LOOP;


/*
      FOR i IN in_line_item_tbl.FIRST .. in_line_item_tbl.LAST
      LOOP
         jay_debug ('spi_asset_from_bfg_multisite',
                    in_line_item_tbl (i).o_site_id,
                    'line_item_obj');
      END LOOP;

      out_status := 1;
      RETURN;
*/


    FOR site_cusr IN v_sorted_site_tbl.FIRST .. v_sorted_site_tbl.LAST
  LOOP
         IF (v_sorted_site_tbl (site_cusr).site_id IS NOT NULL)
         THEN
--            sum_debug (
--               'spi_asset_from_bfg_multisite',
--               '4723',
--                  'in_siteid (site_cusr).site_id'
--               || in_siteid (site_cusr).site_id
--               || 'in_quoteheaderid'
--               || in_quoteheaderid);
            v_site_id := v_sorted_site_tbl (site_cusr).site_id;
            v_site_name := v_sorted_site_tbl (site_cusr).site_name;
            v_site_country := v_sorted_site_tbl (site_cusr).site_country;
            v_site_city := v_sorted_site_tbl (site_cusr).site_city;
            in_countryid := v_sorted_site_tbl (site_cusr).site_country; ---commented above and uncommented below...because the country id was passed in place of country name
            /*validation on count sit is valid or not*/
v_errorlogmsg := '2 Site Search Start';

            SELECT COUNT (1)
              INTO v_sqe_site_id
              FROM site
             WHERE bfg_site_id = v_site_id
                   OR (TO_NUMBER (TO_CHAR (expedio_site_id)) =TO_NUMBER (TRIM (TO_CHAR (v_site_id)))
                       AND REGEXP_LIKE (expedio_site_id, '^[0-9]'));

v_errorlogmsg := 'Site Search End';

            /*validation on local sit is valid or not*/
            IF v_sqe_site_id > 0
            THEN
               BEGIN
                  SELECT DISTINCT site_id
                    INTO v_count_site_id
                    FROM site
                   WHERE bfg_site_id = v_site_id
                         OR (TO_NUMBER (TO_CHAR (expedio_site_id)) =TO_NUMBER (TRIM (TO_CHAR (v_site_id)))
                             AND REGEXP_LIKE (expedio_site_id, '^[0-9]'));
               EXCEPTION
                  WHEN NO_DATA_FOUND
                  THEN
                     v_count_site_id := 0;
                  WHEN OTHERS
                  THEN
                     out_status := pkg_constants.con_status_failure;
                     out_errmsg := SQLERRM || 'Erro Message' || v_errorlogmsg;
               END;
            ELSE
               v_count_site_id := 0;
            END IF;

            BEGIN
v_errorlogmsg := '3 Site BFG Data start';

               SELECT ibes.bfg_site_id,
                      ibes.expedio_site_id,
                      ibes.site_name,
                      ibes.bfg_location_id,
                      ibes.bfg_address_id,
                      ibes.street_name AS "Address_line1",
                      ibes.premise_name AS "Address_line2",
                      IBES.FLOOR,
                      ibes.room,
                      ibes.city,
                      ibes.county AS "State",
                      ibes.country,
                      ibes.post_code,
                      ibes.phone_number,
                      ibec.email,
                      ibes.expedio_site_id,
                      ibec.bfg_contact_id,
                      ibec.first_name,
                      ibec.last_name,
                      ibec.phone_number,
                      ibec.job_title,
                      ibec.fax,
                      ibec.email,
                      ibec.contact_type,
                      ibec.mobile_number,
                      ibes.sit_type
                 INTO v_bfg_site_id,
                      v_expe_site_id,
                      v_site_name,
                      v_bfg_location_id,
                      v_bfg_address_id,
                      V_ADDRESS_LINE1,
                      v_address_line2,
                      v_floor,
                      v_room,
                      v_city,
                      v_state,
                      v_country,
                      v_post,
                      v_phone,
                      v_email,
                      v_expedio_site_id,
                      v_bfg_contact_id,
                      v_first_name,
                      v_last_name,
                      v_phone_number,
                      v_job_title,
                      v_fax,
                      v_email,
                      v_contact_type,
                      v_mobile_number,
                      v_site_type
                 FROM ivpn_bfg_expedio_sites ibes,
                      ivpn_bfg_expedio_contacts ibec
                WHERE (ibes.bfg_site_id = ibec.bfg_site_id
                       OR ibes.expedio_site_id = ibec.expedio_site_id)
                      AND ibes.bfg_customer_id = in_bfg_customer_id
                      AND NVL (ibes.bfg_site_id, ibes.expedio_site_id) =v_site_id
                      AND ibec.ROLE = 'Site Primary Contact';

v_errorlogmsg := '4 Site BFG Data end';
            EXCEPTION
               WHEN OTHERS
               THEN
                  out_status := pkg_constants.con_status_failure;
                  out_errmsg :=SUBSTR (SQLERRM, 1, 150)|| 'Erro Message'|| v_errorlogmsg;
                  v_sql_code := SQLCODE;
                  pkg_common.spi_error_log (in_quoteid,
                                            in_quoteheaderid,
                                            NULL,
                                            NULL,
                                            NULL,
                                            'Stmt BFG',
                                            v_sql_code,
                                            out_errmsg);
                  ROLLBACK;
            END;

            SELECT country_id
              INTO in_countryid
              FROM country
             WHERE UPPER (NAME) = UPPER (v_country);

            SELECT DECODE (v_site_type, 'CENTRAL', 'Y', NULL)
              INTO in_mainsiteflag
              FROM DUAL;

            v_primary_contacts :=
                  v_first_name
               || '|'
               || v_last_name
               || '|'
               || v_job_title
               || '|'
               || v_email
               || '|'
               || v_phone_number
               || '|'
               || v_mobile_number
               || '|'
               || v_fax
               || '||';

            IF v_count_site_id = 0
            THEN
               BEGIN
                  --     SAVEPOINT my_savepoint;
v_errorlogmsg := '5 pkg_site_r5.spi_site start';
                  /*CREATE SIT BY CALLING SPI_SITE*/
                  pkg_site_r5.
                   spi_site (
                     in_customerid                  => in_customerid,
                     in_quoteheaderid               => in_quoteheaderid,
                     in_sitename                    => v_site_name,
                     in_customer_reportsitename     => v_site_name,
                     in_buildingno                  => NULL,
                     in_addressline1                => v_address_line1,
                     in_city                        => v_city,
                     in_state                       => v_state,
                     in_state_code                  => NULL,
                     in_countryid                   => in_countryid,
                     in_postzipcode                 => v_post,
                     in_telephoneareacode           => v_phone_number,
                     in_county                      => in_county,
                     in_local_business_cust_name    => NULL,
                     in_additionalsite              => in_additionalsite,
                     in_pricontact                  => v_primary_contacts,
                     in_seccontact                  => NULL,
                     in_techcontact                 => NULL,
                     in_servassurcontact            => NULL,
                     in_servicedlvcontact           => NULL,
                     in_bfgsiteid                   => v_bfg_site_id,
                     in_bfgsitename                 => v_site_name,
                     in_expedio_site_id             => v_expe_site_id,
                     in_kcidetails                  => NULL,
                     in_lineofsitebilling           => NULL,
                     in_mainsiteflag                => in_mainsiteflag,
                     in_createdby                   => in_createdby,
                     in_place_acc_price_rev_order   => NULL,
                     in_phone_number                => NULL, -- Added on 3/2/2011 as part of R11 iVPN
                     out_siteid                     => out_siteid,
                     out_status                     => out_status,
                     out_errmsg                     => out_errmsg);

                  v_count_site_id := out_siteid;
               EXCEPTION
                  WHEN OTHERS
                  THEN
                     out_status := pkg_constants.con_status_failure;
                     out_errmsg :=
                        (SQLERRM || 'Erro Message' || v_errorlogmsg);
                     v_sql_code := SQLCODE;
                     pkg_common.spi_error_log (in_quoteid,
                                               in_quoteheaderid,
                                               NULL,
                                               NULL,
                                               NULL,
                                               'pkg_site_r5.spi_site',
                                               v_sql_code,
                                               out_errmsg);
               --  ROLLBACK;
               END;

               BEGIN
                  pkg_site_r5.spi_quote_site_r5 (in_quoteheaderid,
                                                 out_siteid,
                                                 NULL,
                                                 NULL,
                                                 in_modifiedby,
                                                 out_status,
                                                 out_errmsg);
               EXCEPTION
                  WHEN OTHERS
                  THEN
                     out_status := pkg_constants.con_status_failure;
                     out_errmsg := (SQLERRM || 'Erro Message' || v_errorlogmsg);
                     v_sql_code := SQLCODE;
                     pkg_common.spi_error_log (in_quoteid,
                                               in_quoteheaderid,
                                               NULL,
                                               NULL,
                                               NULL,
                                               'pkg_site.spu_site',
                                               v_sql_code,
                                               out_errmsg);
               -- ROLLBACK;
               END;
            ELSE
               BEGIN

v_errorlogmsg := '6 pkg_site.spu_site';
--                  pkg_site.
--                   spu_site (
--                     in_customerid                 => in_customerid,
--                     in_siteid                     => v_count_site_id,
--                     in_customer_reportsitename    => NULL,
--                     in_buildingno                 => NULL,
--                     in_addressline1               => v_address_line1,
--                     in_city                       => v_city,
--                     in_state                      => v_state,
--                     in_state_code                 => NULL,
--                     in_countryid                  => in_countryid,
--                     in_postzipcode                => v_phone_number,
--                     in_telephoneareacode          => v_phone_number,
--                     in_county                     => in_county,
--                     in_local_business_cust_name   => NULL,
--                     in_additionalsite             => in_additionalsite,
--                     in_pricontact                 => v_primary_contacts,
--                     in_seccontact                 => NULL,
--                     in_techcontact                => NULL,
--                     in_servassurcontact           => NULL,
--                     in_servicedlvcontact          => NULL,
--                     in_bfgsiteid                  => v_site_id,
--                     in_bfgsitename                => v_site_name,
--                     in_kcidetails                 => NULL,
--                     in_lineofsitebilling          => NULL,
--                     in_modifiedby                 => in_createdby,
--                     out_status                    => out_status,
--                     out_errmsg                    => out_errmsg);

null;
--out_status:=1;
v_errorlogmsg := ' 7 pkg_site.spu_site end';
               EXCEPTION
                  WHEN OTHERS
                  THEN
                     out_status := pkg_constants.con_status_failure;
                     out_errmsg :=(SQLERRM || 'Erro Message' || v_errorlogmsg);
                     v_sql_code := SQLCODE;
                     pkg_common.spi_error_log (in_quoteid,
                                               in_quoteheaderid,
                                               NULL,
                                               NULL,
                                               NULL,
                                               'pkg_site.spu_site',
                                               v_sql_code,
                                               out_errmsg);
               --  ROLLBACK;
               END;

               BEGIN
                  pkg_site_r5.spi_quote_site_r5 (in_quoteheaderid,
                                                 v_count_site_id,
                                                 NULL,
                                                 NULL,
                                                 in_modifiedby,
                                                 out_status,
                                                 out_errmsg);
               EXCEPTION
                  WHEN OTHERS
                  THEN
                     out_status := pkg_constants.con_status_failure;
                     out_errmsg :=
                        (SQLERRM || 'Erro Message' || v_errorlogmsg);
                     v_sql_code := SQLCODE;
                     pkg_common.
                      spi_error_log (in_quoteid,
                                     in_quoteheaderid,
                                     v_count_site_id || 'v_count_site_id',
                                     NULL,
                                     NULL,
                                     'pkg_site_r5.spi_quote_site_r5',
                                     v_sql_code,
                                     out_errmsg);
               -- ROLLBACK;
               END;
            END IF;
      IF out_status = 1
            THEN
               BEGIN
                  v_line_item.DELETE;
                  j := 0;

                  FOR i IN in_line_item_tbl.FIRST .. in_line_item_tbl.LAST
                  LOOP
                     IF in_line_item_tbl (i).o_site_id =v_sorted_site_tbl (site_cusr).site_id
                     --            and in_siteid (site_cusr).site_id=in_contact_detils
                     THEN
                        j := j + 1;
                        v_line_item.EXTEND (1);
                        v_line_item (j) := in_line_item_tbl (i);
                     END IF;
                  END LOOP;

                  /* Creating asset Quote Configuration Process */
                  BEGIN
v_errorlogmsg :='8 pkg_quote.spi_save_asset_from_bfg start';
                     pkg_quote.spi_save_asset_from_bfg (in_quoteheaderid,
                                                        v_count_site_id,
                                                        v_line_item,
                                                        in_attributelevel,
                                                        in_service_name,
                                                        in_createdby,
                                                        out_status,
                                                        out_errmsg);
v_errorlogmsg := '9 pkg_quote.spi_save_asset_from_bfg end';
                  EXCEPTION
                     WHEN OTHERS
                     THEN
                        out_status := pkg_constants.con_status_failure;
                       out_errmsg :=(SQLERRM || 'Erro Message' || v_errorlogmsg);
                        v_sql_code := SQLCODE;
                        pkg_common.spi_error_log (in_quoteid,
                                        in_quoteheaderid,
                                        NULL,
                                        NULL,
                                        NULL,
                                        'pkg_quote.spi_save_asset_from_bfg',
                                        v_sql_code,
                                        out_errmsg);

                 END;

     BEGIN
v_errorlogmsg :='10 pkg_quote_reeng.spi_order_contact_detils_as_is start';

                     IF (in_contact_detils.EXISTS (1) AND out_status = 1)
                     THEN
                        pkg_quote.
                         spi_order_contact_detils_as_is (in_quoteheaderid,
                                                         in_contact_detils,
                                                         in_bfg_customer_id,
                                                         in_createdby,
                                                         out_status,
                                                         out_errmsg);
v_errorlogmsg :='11 pkg_.spi_order_contact_detils_as_is end';

                     END IF;
                  EXCEPTION
                     WHEN OTHERS
                     THEN
                        out_status := pkg_constants.con_status_failure;
                           out_errmsg :=
                              SUBSTR (SQLERRM, 1, 150)
                           || 'Erro Message'
                           || v_errorlogmsg;
                        v_sql_code := SQLCODE;
                        pkg_common.spi_error_log (
                           in_quoteid,
                           in_quoteheaderid,
                           NULL,
                           NULL,
                           NULL,
                           'pkg_reeng.spi_order_contact_detils_as_is',
                           v_sql_code,
                           out_errmsg);
                  END;
               END;
            END IF;
         END IF;
      /*checking the quote_header_id and quote_id condition*/
      END LOOP;
   EXCEPTION
      WHEN OTHERS
      THEN
         out_status := pkg_constants.con_status_failure;
         out_errmsg :='spi_asset_from_bfg_multisite, error->'|| SQLCODE|| SQLERRM;
          pkg_common.spi_error_log (in_quoteid,
                                    in_quoteheaderid,
                                     NULL,
                                     NULL,
                                     null,
                                     'pkg_quote.spi_asset_from_bfg_multisite',
                                     v_sql_code,
                                     out_errmsg);

   END spi_asset_from_bfg_multisite;


   ---------------------Stating for Contact AS IS Data from MX----------
 PROCEDURE spi_order_contact_detils_as_is (
    in_quote_header_id   IN     NUMBER,
    in_contact_detils    IN     site_detials_tab_asis,
    in_bfg_customer_id   IN     NUMBER,
    in_modifiedby        IN     NUMBER,
    out_status              OUT NUMBER,
    out_errmsg              OUT VARCHAR2)
 AS
  /******************************************************************************
    NAME:       SQE MX Modified jonery getting ASIS COntact.
    PURPOSE:    SQE MX Modified jonery getting ASIS COntact.
    REVISIONS:
    Ver        Date        Author           Description
    ---------  ----------  ---------------  ------------------------------------
    1.0        12/12/2010   Suman           1. SQE MX Modified jonery getting ASIS COntact.
  ******************************************************************************/

    v_count_pn                 VARCHAR2 (30);
    v_site_id                  NUMBER (15);
    v_site_bfg_id              NUMBER;
    v_product_name             VARCHAR2 (100);
    v_in_bfg_contact_id        NUMBER (15);
    v_in_contact_type          VARCHAR2 (100);
    v_bfg_site_id              NUMBER;
    v_expe_site_id             NUMBER;
    v_site_name                VARCHAR2 (100);
    v_address_line1            VARCHAR2 (100);
    v_address_line2            VARCHAR2 (100);
    v_floor                    VARCHAR2 (100);
    v_room                     VARCHAR2 (100);
    v_city                     VARCHAR2 (100);
    v_state                    VARCHAR2 (100);
    v_country                  VARCHAR2 (100);
    v_post                     VARCHAR2 (100);
    v_phone                    VARCHAR2 (100);
    v_first_name               VARCHAR2 (100);
    v_last_name                VARCHAR2 (100);
    v_job_title                VARCHAR2 (100);
    v_fax                      VARCHAR2 (100);
    v_email_id                 VARCHAR2 (100);
    v_contact_type             VARCHAR2 (100);
    v_site_type                VARCHAR2 (100);
    v_role_type                VARCHAR2 (100);
    v_bfg_location_id          NUMBER;
    v_bfg_address_id           NUMBER;
    v_phone_number             VARCHAR2 (100);
    v_mobile_number            VARCHAR2 (100);
    v_bfg_contact_id           NUMBER;
    v_name_pn                  VARCHAR2 (100);
    v_existing_address_id      address.address_id%TYPE;
    v_existing_contact_id      contact.contact_id%TYPE;
    v_existing_orderdetailid   NUMBER;
    v_in_bfg_role_id           NUMBER;
    v_existing_account_id      NUMBER;
    v_contactid                NUMBER;
    v_addressid                NUMBER;
    v_sql_code                 NUMBER;
    in_countryid               NUMBER;
    v_bfg_controle_id          NUMBER;
    v_cont_role_name           VARCHAR2 (55);
    LV_ERROR_LOCATION          INTEGER := 0;
    e_contact_role             EXCEPTION;
    v_error_poing              VARCHAR2 (1000);
 BEGIN
    DELETE FROM ORDER_CONTACT_DETAIL_AS_IS
          WHERE quote_header_id = in_quote_header_id;

    FOR contact_cusr IN in_contact_detils.FIRST .. in_contact_detils.LAST
    LOOP
       IF (in_contact_detils (contact_cusr).o_site_id IS NOT NULL)
       THEN

          v_site_bfg_id := in_contact_detils (contact_cusr).o_site_id;
          v_product_name := in_contact_detils (contact_cusr).o_product_name;
          V_IN_BFG_ROLE_ID := IN_CONTACT_DETILS (CONTACT_CUSR).O_IN_BFG_CONTACT_ID;
          V_ERROR_POING := '1 SRH Site,Address';
          V_ERROR_POING :=
             (   v_site_bfg_id
              || 'site_bfg_id'
              || v_product_name
              || 'p_N'
              || V_IN_BFG_ROLE_ID);

                      select site_id,ADDRESS_ID
                     INTO v_site_id,v_addressid
                     FROM site
                    WHERE bfg_site_id = v_site_bfg_id;

          SELECT address_id.NEXTVAL
              INTO v_addressid FROM DUAL;

 v_error_poing := '2 Search Product Name'||v_product_name ||'--'|| in_quote_header_id ||'-'|| v_site_id;
          SELECT DISTINCT UPPER (olias.product_name)
            INTO v_name_pn
            FROM order_line_item_as_is olias
           WHERE     quote_header_id = in_quote_header_id
                 AND olias.product_id = 1012437
                 AND UPPER (olias.product_name) = UPPER (v_product_name)
                 AND olias.active = 'Y'
                 AND olias.site_id = v_site_id;

 v_error_poing := '3 Search Product Name end';

          IF v_name_pn IS NOT NULL
          THEN
             SELECT ibes.bfg_site_id,
                    ibes.expedio_site_id,
                    ibes.site_name,
                    ibes.bfg_location_id,
                    ibes.bfg_address_id,
                    ibes.street_name AS "ADDRESS_LINE1",
                    ibes.premise_name AS "ADDRESS_LINE2",
                    ibes.FLOOR,
                    ibes.room,
                    ibes.city,
                    ibes.county AS "STATE",
                    ibes.country,
                    ibes.post_code,
                    ibes.phone_number,
                    ibec.email,
                    ibec.bfg_contact_id,
                    ibec.first_name,
                    ibec.last_name,
                    ibec.phone_number,
                    ibec.job_title,
                    ibec.fax,
                    ibec.ROLE,
                    ibec.mobile_number,
                    ibes.sit_type,
                    ibec.bfg_contact_id
               INTO v_bfg_site_id,
                    v_expe_site_id,
                    v_site_name,
                    v_bfg_location_id,
                    v_bfg_address_id,
                    v_address_line1,
                    v_address_line2,
                    v_floor,
                    v_room,
                    v_city,
                    v_state,
                    v_country,
                    v_post,
                    v_phone,
                    v_email_id,
                    v_bfg_contact_id,
                    v_first_name,
                    v_last_name,
                    v_phone_number,
                    v_job_title,
                    v_fax,
                    v_contact_type,
                    v_mobile_number,
                    v_site_type,
                    v_bfg_controle_id
               FROM ivpn_bfg_expedio_sites ibes,
                    ivpn_bfg_expedio_contacts ibec
              WHERE (ibes.bfg_site_id = ibec.bfg_site_id
                     OR ibes.expedio_site_id = ibec.expedio_site_id)
                    AND ibes.bfg_customer_id = in_bfg_customer_id
                    AND NVL (ibes.bfg_site_id, ibes.expedio_site_id) =
                           v_site_bfg_id
                    AND ibec.bfg_contact_role_id = v_in_bfg_role_id;

 v_error_poing := '4 Search Bfg contact end';

             BEGIN
                IF V_CONTACT_TYPE NOT IN
                      (PKG_CONSTANTS.CON_CUS_MX_BFG_SERVICE_CONT,
                       PKG_CONSTANTS.CON_CUS_MX_BFG_DELIVERY_CONT,
                       PKG_CONSTANTS.CON_CUS_MX_BFG_BILLING_CONT)
                THEN
                   RAISE E_CONTACT_ROLE;
                END IF;
             EXCEPTION
                WHEN E_CONTACT_ROLE
                THEN
                   OUT_STATUS := PKG_CONSTANTS.CON_STATUS_FAILURE;
                   out_errmsg := 'Countact Role Not found in the BFG';
                   V_SQL_CODE := SQLCODE;
                   PKG_COMMON.
                    SPI_ERROR_LOG (
                      V_CONTACT_TYPE || 'V_CONTACT_TYPE',
                      V_IN_BFG_ROLE_ID || 'V_IN_BFG_ROLE_ID',
                      V_SITE_BFG_ID || 'v_site_bfg_id',
                      in_bfg_customer_id || 'in_bfg_customer_id',
                      NULL,
                      'spi_ORDER_CONTACT_DETILS_AS_IS',
                      v_sql_code,
                      OUT_ERRMSG);
             END;

             SELECT country_id
               INTO in_countryid
               FROM country
              WHERE UPPER (NAME) = UPPER (v_country);


             IF (UPPER (V_PRODUCT_NAME) =
                    pkg_constants.con_prod_bt_mx_mobileid
                 AND V_CONTACT_TYPE =PKG_CONSTANTS.CON_CUS_MX_BFG_SERVICE_CONT)
             THEN
                v_cont_role_name :=pkg_constants.con_cus_mx_mob_id_cust_sec_off;
             ELSIF UPPER (V_PRODUCT_NAME) =pkg_constants.con_prod_bt_mx_mobileid
                   AND v_contact_type =pkg_constants.con_cus_mx_bfg_delivery_cont
             THEN
                v_cont_role_name :=pkg_constants.con_cus_mx_mob_id_deliv_add;
             ELSIF UPPER (V_PRODUCT_NAME) =
                      pkg_constants.con_prod_bt_mx_itw
                   AND v_contact_type =
                          pkg_constants.con_cus_mx_bfg_billing_cont
             THEN
                v_cont_role_name :=
                   pkg_constants.con_cus_mx_itw_billing_cont;
             ELSIF UPPER (V_PRODUCT_NAME) =
                      pkg_constants.con_prod_bt_mx_itw
                   AND v_contact_type =
                          pkg_constants.con_cus_mx_bfg_service_cont
             THEN
                v_cont_role_name :=
                   pkg_constants.con_cus_mx_itw_work_corp_admin;
             ELSIF UPPER (V_PRODUCT_NAME) = pkg_constants.con_prod_bt_mx_3g
                   AND v_contact_type =
                          pkg_constants.con_cus_mx_bfg_service_cont
             THEN
                v_cont_role_name :=
                   pkg_constants.con_cus_mx_3gf_admin_contact;
             ELSIF UPPER (V_PRODUCT_NAME) = pkg_constants.con_prod_bt_mx_3g
                   AND v_contact_type =
                          pkg_constants.con_cus_mx_bfg_delivery_cont
             THEN
                v_cont_role_name :=
                   pkg_constants.con_cus_mx_3gf_billing_cont;
             ELSIF UPPER (V_PRODUCT_NAME) =
                      pkg_constants.con_prod_bt_mx_proxradi
                   AND v_contact_type =
                          pkg_constants.con_cus_mx_bfg_service_cont
             THEN
                v_cont_role_name := pkg_constants.con_cus_mx_radius_cont;
             ELSIF UPPER (V_PRODUCT_NAME) =
                      pkg_constants.con_prod_bt_mx_sslvpn
                   AND v_contact_type =
                          pkg_constants.con_cus_mx_bfg_service_cont
             THEN
                v_cont_role_name := pkg_constants.con_contacttype_primary; --'PRIMARY SITE CONTACT';
             ELSIF UPPER (V_PRODUCT_NAME) =
                      pkg_constants.con_prod_bt_mx_ipsec
                   AND v_contact_type =
                          pkg_constants.con_cus_mx_bfg_service_cont
             THEN
                v_cont_role_name :=pkg_constants.con_ipsec_contact_sitecontact;
             END IF;

             v_error_poing := '5 Search IF condN about product';

             BEGIN
                v_error_poing := '6 Search Local SQE Data';

                SELECT a.contact_id, a.address_id, order_contact_detail_id
                  INTO v_existing_contact_id,
                       v_existing_account_id,
                       v_existing_orderdetailid
                  FROM order_contact_detail_as_is a,
                       contact c,
                       address addr,
                       order_line_item_as_is oai
                 WHERE     a.quote_header_id = in_quote_header_id
                       AND c.contact_id = a.contact_id
                       AND addr.address_id = a.address_id
                       AND oai.quote_header_id = A.quote_header_id
                       AND oai.active = pkg_constants.con_activeflag_yes
                       AND OAI.SITE_ID = V_SITE_ID
                       AND UPPER (product_name) = UPPER (v_product_name)
                       AND TRIM (UPPER (c.contact_type)) =(TRIM (v_cont_role_name));

                v_error_poing := '7 Search Local SQE Data End';
             EXCEPTION
                WHEN NO_DATA_FOUND
                THEN
                   v_existing_contact_id := NULL;
                   v_existing_account_id := NULL;
             END;
          END IF;

          BEGIN
             IF v_existing_contact_id IS NULL
             THEN
                ---new add suman
                INSERT INTO address (ADDRESS_ID,
                                     COUNTRY_ID,
                                     CITY,
                                     post_zip_code,
                                     created_date,
                                     CREATED_BY,
                                     county,
                                     STATE,
                                     address_line1,
                                     address_line2)
                     VALUES (V_ADDRESSID,
                             IN_COUNTRYID,
                             V_CITY,
                             v_post,
                             SYSDATE,
                             in_modifiedby,
                             v_country,
                             v_state,
                             v_address_line1,
                             v_address_line2);

                lv_error_location := 10;

                insert into contact (contact_id,
                                     first_name,last_name,
                                     email,
                                     phone_number,
                                     contact_type,
                                     created_by,
                                     created_date,
                                     job_title,
                                     mobile_number,
                                     fax)
                     VALUES (contact_id.NEXTVAL,
                             v_first_name,v_last_name,
                             v_email_id,
                             v_phone,
                             v_cont_role_name,
                             in_modifiedby,
                             SYSTIMESTAMP,
                             v_job_title,
                             v_mobile_number,
                             v_fax)
                  RETURNING contact_id
                       INTO v_contactid;


                INSERT
                  INTO order_contact_detail_as_is (order_contact_detail_id,
                                                   quote_header_id,
                                                   contact_id,
                                                   created_by,
                                                   created_date,
                                                   address_id,
                                                   bfg_cnt_id,
                                                   bfg_cnr_id,
                                                   site_id)
                VALUES (order_contact_detail_id.NEXTVAL,
                        in_quote_header_id,
                        v_contactid,
                        in_modifiedby,
                        SYSTIMESTAMP,
                        v_addressid,
                        v_bfg_controle_id,
                        v_in_bfg_role_id,
                        v_site_id);

                INSERT INTO site_contact_detail (site_contact_detail_id,
                                                 site_id,
                                                 contact_id,
                                                 created_by,
                                                 created_date)
                     VALUES (site_contact_detail_id.NEXTVAL,
                             v_site_id,
                             v_contactid,
                             in_modifiedby,
                             SYSTIMESTAMP);
             ELSE
                UPDATE contact
                   SET first_name = v_first_name,
                       email = v_email_id,
                       phone_number = v_phone,
                       contact_type = v_cont_role_name,
                       created_by = in_modifiedby,
                       created_date = SYSTIMESTAMP,
                       job_title = v_job_title,
                       mobile_number = v_mobile_number,
                       fax = v_fax
                 WHERE contact_id = V_EXISTING_CONTACT_ID;

                UPDATE address
                   SET country_id = in_countryid,
                       city = v_city,
                       post_zip_code = v_post,
                       created_date = SYSTIMESTAMP,
                       created_by = in_modifiedby,
                       county = v_country,
                       state = v_state,
                       address_line1 = v_address_line1,
                       address_line2 = v_address_line2
                 WHERE address_id = v_existing_account_id;
             END IF;

             out_status := pkg_constants.con_status_success;

             COMMIT;
          EXCEPTION
             WHEN NO_DATA_FOUND
             THEN
                out_status := pkg_constants.con_status_failure;
                  out_errmsg :=  SUBSTR ('ERROR at location :' || v_error_poing, 1, 150);
             WHEN DUP_VAL_ON_INDEX
             THEN
                out_status := pkg_constants.con_status_failure;
                out_errmsg :=SUBSTR ('ERROR at location :' || v_error_poing, 1, 150);
             WHEN OTHERS
             THEN
                out_status := pkg_constants.con_status_failure;
                out_errmsg :=SUBSTR ('ERROR at location :' || v_error_poing, 1, 150);
          END;
       END IF;
    END LOOP;
    out_status := pkg_constants.con_status_success;
 EXCEPTION
    WHEN NO_DATA_FOUND
    THEN
       out_status := pkg_constants.con_status_failure;
       out_errmsg :=
          SUBSTR (
                'ERROR at loc:'
             || lv_error_location
             || '-'
             || SQLERRM
             || 'Poing No-'
             || v_error_poing,
             1,
             150);
    WHEN DUP_VAL_ON_INDEX
    THEN
       out_status := pkg_constants.con_status_failure;
       out_errmsg :=
          SUBSTR ('ERROR at loc:' || lv_error_location || '-' || SQLERRM,
                  1,
                  150);
    WHEN OTHERS
    THEN
       out_status := pkg_constants.con_status_failure;
       out_errmsg :=
          SUBSTR (
                'ERROR at loc:'
             || lv_error_location
             || '-'
             || SQLERRM
             || 'Poing No-'
             || v_error_poing,
             1,
             150);
       v_sql_code := SQLCODE;

       pkg_common.spi_error_log (V_IN_BFG_ROLE_ID,
                                 v_site_bfg_id,
                                 v_error_poing,
                                 NULL,
                                 'PKG_QUOTE_REENG',
                                 'SPU_ORDER_TOBE_TO_ASIS',
                                 v_sql_code,
                                 OUT_ERRMSG);
 END spi_order_contact_detils_as_is;
-------------------End of the MX Contact --------------


PROCEDURE spi_config_tobe_pri_to_sec (in_quote_header_id     IN       quote_header.quote_header_id%TYPE,
                                      in_site_id             IN       site.site_id%TYPE,
                                      out_status             OUT      NUMBER,
                                      out_errmsg             OUT      VARCHAR2,
                                      in_cpeFlag             IN       VARCHAR2 DEFAULT 'N'
                                     )
AS
BEGIN

      DELETE FROM temp_quoteversion;

      COMMIT;

      INSERT INTO temp_quoteversion
                  (column_name, old_value, new_value)
                   (SELECT 'Line_Item', line_item_id, line_item_id.NEXTVAL
                    FROM line_item
                   WHERE quote_header_id = in_quote_header_id
                     AND active          = pkg_constants.con_activeflag_yes
                     AND site_id         = in_site_id
                     -- AND UPPER (product_name) <> 'BT IVPN2 GLOBAL'
                     AND UPPER (product_name) not in ('BT IVPN2 GLOBAL',decode (in_cpeFlag,'Y' ,'BT CPE','N','BT IVPN2 GLOBAL'))
                     AND UPPER (fallback_type) ='PRIMARY'
                   );


      INSERT INTO line_item
                 (line_item_id, quote_header_id, VALUE, currency,
                  aggregate_price, site_id, created_by, created_date,modified_by,modified_date,
                  product_id, product_name, quantity, active,
                  fallback_type, part_type, priced, port_availability_status,non_std_flag, row_id,
                  quote_site_service_id, scode,
                  pkg_instance_id,action_code,product_selection_id,prod_friendly_id,parent_line_item_id,classic_element_id,classic_element_name
                  )
        (SELECT tqv.new_value, quote_header_id, VALUE, currency,
                aggregate_price, site_id, created_by, SYSDATE,modified_by,modified_date,
                product_id, product_name, quantity,
                pkg_constants.con_activeflag_yes, 'Secondary',
                part_type, priced, port_availability_status,non_std_flag, row_id,
                quote_site_service_id,scode,
                pkg_instance_id,action_code,product_selection_id,prod_friendly_id,parent_line_item_id,classic_element_id,classic_element_name
           FROM line_item INNER JOIN temp_quoteversion tqv
                ON line_item_id = tqv.old_value
                AND tqv.column_name = 'Line_Item'
           WHERE quote_header_id    = in_quote_header_id
            AND site_id             = in_site_id
            AND active = pkg_constants.con_activeflag_yes);


      -- copy line_item_details for new line_item_id
      INSERT INTO line_item_detail
                  (line_item_detail_id, line_item_id, VALUE, active,
                   created_by, created_date,modified_by,modified_date, attribute_mapping_id, quantity,
                   line_item_description, non_std_flag, row_id, action_code,
                   priced_flag,bfg_inventory_id,classic_element_id,classic_element_name,no_voice_channel
                   --,max_qty,cease_date
                   )
         (SELECT line_item_detail_id.NEXTVAL, new_value, VALUE,
                 pkg_constants.con_activeflag_yes, created_by, SYSDATE,modified_by,modified_date,
                 attribute_mapping_id, quantity, line_item_description,
                 non_std_flag, row_id, action_code,priced_flag,bfg_inventory_id,classic_element_id,classic_element_name,
                 no_voice_channel
                 --,max_qty,cease_date
            FROM line_item_detail INNER JOIN temp_quoteversion
                 ON line_item_id = old_value
               AND column_name = 'Line_Item'
               AND active = pkg_constants.con_activeflag_yes
                 );
      --Updating old line item detail records to active='N'
      UPDATE LINE_ITEM_DETAIL SET  active=pkg_constants.con_activeflag_no
      WHERE line_item_id in (SELECT old_value from temp_quoteversion
                             WHERE column_name = 'Line_Item');


      --Updating old line item records which is having fall back type 'Primary' to active='N'
      UPDATE LINE_ITEM SET  active=pkg_constants.con_activeflag_no
      WHERE line_item_id in (SELECT old_value from temp_quoteversion
                             WHERE column_name = 'Line_Item');

      out_status := pkg_constants.con_status_success;
EXCEPTION
   WHEN OTHERS
   THEN
      out_status := pkg_constants.con_status_failure;
      OUT_ERRMSG := SQLERRM;
      END;



PROCEDURE SPI_QUOTE_CONF_OBJ_R9 (
   in_quoteid           IN     quote_header.quote_id%TYPE,
   in_quoteheaderid     IN     quote_header.quote_header_id%TYPE,
   in_siteid            IN     site_detials_tab,
   in_line_item         IN     line_item_tbl,
   in_attributelevel    IN     VARCHAR2,
   in_createdby         IN     quote_site_service.created_by%TYPE,
   in_bfg_customer_id   in     customer.bfg_customer_id%type,
   in_modifyflag        in     VARCHAR2,
   out_status           out    NUMBER ,
   out_errmsg           out    VARCHAR2)
AS
/******************************************************************************
   NAME:       SQE MX Quote Confi.
   PURPOSE:    This SP is used to save the detils for the Quote Configuration Detials for
               IPSEC and SSL for MX -R9

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        08/12/2010    Archana        1. part of exception handling
   2.0        13/12/2010    Suman          2. Modification of the SP to save the Expedio site.
   3.0        21/12/2010    Suman          3. Modification of the SP to deactive the data.
   4.0        04/7/2011      Suman          4. Add Addition SP  pkg_quote_reeng.spu_order_tobe_to_asis
   5.0        08/08/2011    Suman         5. Modified the Add1 and Add2 mapping
 ******************************************************************************/

   v_site_id                NUMBER (15);
   v_site_name              VARCHAR2 (255);
   v_site_country           VARCHAR2 (255);
   v_site_city              VARCHAR2 (22);
   v_count_site_id          NUMBER ;
   /*--SITE PARAMTER*/
   in_customerid            NUMBER;
   in_countryid             NUMBER;
   in_county                VARCHAR2 (255);
   in_additionalsite        VARCHAR2 (200);
   in_pricontact            VARCHAR2 (200);
   in_bfgsiteid             NUMBER;
   in_bfgsitename           VARCHAR2 (100);
   in_mainsiteflag          char (1);
   out_siteid               NUMBER;
   in_modifiedby            NUMBER;
   /*contact information vairable*/
   v_local_central_site     site.site_id%TYPE;
   v_sqe_customer_id        customer.customer_id%TYPE;
   v_bfg_site_id            site.bfg_site_id%TYPE;
   v_site_name_sqe          site.NAME%TYPE;
   v_bfg_location_id        site.bfg_subloc_id%TYPE;
   v_bfg_address_id         site.bfg_address_id%TYPE;
   v_address_line1          address.address_line1%TYPE;
   v_address_line2          address.address_line2%TYPE;
   v_floor                  address.floor%TYPE;
   v_room                   address.room%TYPE;
   v_city                   address.city%TYPE;
   v_state                  address.state%TYPE;
   v_country                country.NAME%TYPE;
   v_post                   address.post_zip_code%TYPE;
   v_phone                  contact.phone_number%TYPE;
   v_email                  contact.email%TYPE;
   v_expedio_site_id        site.expedio_site_id%TYPE;
   v_bfg_contact_id         site.bfg_site_contact_id%TYPE;
   v_first_name             contact.first_name%TYPE;
   v_last_name              contact.last_name%TYPE;
   v_phone_number           contact.phone_number%TYPE;
   v_job_title              contact.job_title%TYPE;
   v_fax                    contact.fax%TYPE;
   v_contact_type           contact.contact_type%TYPE;
   v_country_id             country.country_id%TYPE;
   v_mobile_number          contact.mobile_number%TYPE;
   v_primary_contacts       VARCHAR2 (2000) := '';
   v_quote_site_id          quote_site.site_id%TYPE;
   /* Site Updat Variables */
   v_sqe_site_id            site.site_id%TYPE;
   v_line_item              line_item_tbl := line_item_tbl ();
   v_site_type             VARCHAR2(20);
   j                        NUMBER := 0;
   v_attribute_mapping_id   NUMBER := 0;
   v_product_name           line_item.product_name%TYPE;
   v_line_item_id           line_item.line_item_id%TYPE;
   v_line_item_id1          NUMBER;
   v_line_item_count        NUMBER;
   v_sql_code     NUMBER;
   v_sql_errm     VARCHAR2(150);
   V_EXPE_SITE_ID VARCHAR2(100);
   V_MAINSITEFLAG NUMBER;
   V_PRODUCTNAME  NUMBER;
   v_error_location         NUMBER(10) ;

BEGIN
    BEGIN
      FOR j IN in_siteid.FIRST .. in_siteid.LAST
      loop
         FOR lineitem IN in_line_item.FIRST .. in_line_item.LAST
         loop
            FOR checklineitemid
               IN (
                   SELECT DISTINCT line_item_id, li.site_id
                                   FROM line_item li
                                  WHERE     li.quote_header_id = in_quoteheaderid
                                        AND li.product_id = in_line_item (lineitem).o_pid
                                        AND li.active = pkg_constants.con_activeflag_yes
                                        AND upper (li.product_name) = upper (in_line_item (lineitem).o_product_name)
                  )
          loop
               UPDATE price_line_item_detail plid
                  SET plid.active = pkg_constants.con_activeflag_no,
                      modified_by = in_modifiedby,
                      modified_date = SYSDATE ()
                WHERE plid.line_item_id = checklineitemid.line_item_id
                      AND active = pkg_constants.con_activeflag_yes;

               UPDATE line_item_detail lid
                  SET active = pkg_constants.con_activeflag_no,
                      modified_by = in_modifiedby,
                      modified_date = SYSDATE ()
                WHERE lid.line_item_id = checklineitemid.line_item_id
                      AND active = pkg_constants.con_activeflag_yes;

               UPDATE line_item
                  SET active = pkg_constants.con_activeflag_no,
                      modified_by = in_modifiedby,
                      modified_date = SYSDATE ()
                WHERE     quote_header_id = in_quoteheaderid
                      AND line_item_id = checklineitemid.line_item_id
                      AND active = pkg_constants.con_activeflag_yes;

             for checklineitemid2
                     IN (  SELECT distinct li.site_id
                           FROM line_item li
                           WHERE    li.quote_header_id = in_quoteheaderid
                                AND li.product_id = in_line_item (lineitem).o_pid
                                and li.active = pkg_constants.con_activeflag_yes
                        )
                loop
                  IF checklineitemid2.SITE_ID IS NULL THEN
                     update quote_site
                        set      active =  pkg_constants.con_activeflag_no
                        where     site_id = checklineitemid2.site_id
                            AND quote_header_id =in_quoteheaderid
                            AND active = pkg_constants.con_activeflag_yes;
                 END IF;
              end loop;
            END loop;
         END loop;
      END loop;
   exception
      WHEN no_data_found
      THEN
         out_status := pkg_constants.con_status_success;
         out_errmsg := 'no line item';
      WHEN others
      THEN
         out_errmsg := sqlerrm;
   END;
   v_error_location := 10;

   /*getting Customer_id */
   SELECT DISTINCT quote.customer_id
     INTO in_customerid
     FROM    quote_header
    INNER JOIN quote
          ON quote.quote_id = quote_header.quote_id
    WHERE quote_header_id = in_quoteheaderid AND quote.quote_id = in_quoteid;

   /*checking the site object for loop*/
   FOR site_cusr IN in_siteid.FIRST .. in_siteid.LAST
   loop
      IF (in_siteid (site_cusr).site_id IS NOT NULL)
      THEN
         v_site_id := in_siteid (site_cusr).site_id;
         v_site_name := in_siteid (site_cusr).site_name;
         v_site_country := in_siteid (site_cusr).site_country;
         v_site_city := in_siteid (site_cusr).site_city;
         in_countryid := in_siteid (site_cusr).site_country; ---commented above and uncommented below...because the country id was passed in place of country name

    v_error_location := 20;
    SELECT  count(1) INTO v_sqe_site_id
        FROM site  WHERE bfg_site_id = v_site_id
             OR (to_number(to_char(expedio_site_id)) =to_number(trim(to_char(v_site_id)))
              AND REGEXP_LIKE(expedio_site_id,'^[0-9]'));

         /*validation on local sit is valid or not*/
         IF v_sqe_site_id >0 THEN
         BEGIN
         v_error_location := 30;
            SELECT DISTINCT site_id
              INTO v_count_site_id
              FROM site
             WHERE bfg_site_id = v_site_id
             OR (to_number(to_char(expedio_site_id)) =to_number(trim(to_char(v_site_id)))
              AND REGEXP_LIKE(expedio_site_id,'^[0-9]'));

         exception
            WHEN no_data_found
            THEN
               v_count_site_id := 0;
            WHEN others
            THEN
            out_status := pkg_constants.con_status_failure;
            out_errmsg := sqlerrm;
         END;
         ELSE
         v_count_site_id :=0;
         END IF;
         v_error_location := 40;
         SELECT
                ibes.bfg_site_id, ibes.expedio_site_id,
                ibes.site_name,
                ibes.bfg_location_id,ibes.bfg_address_id,
                ibes.street_name AS "Address_line1", ibes.premise_name AS "Address_line2",
                ibes.floor, ibes.room, ibes.city, ibes.county AS "State",
                ibes.country, ibes.post_code, ibes.phone_number,
                ibec.email, ibes.expedio_site_id,
                ibec.bfg_contact_id, ibec.first_name,  ibec.last_name,
                ibec.phone_number, ibec.job_title,
                ibec.fax, ibec.email,
                ibec.contact_type,  ibec.mobile_number,ibes.sit_type
           INTO v_bfg_site_id, v_expe_site_id,
                v_site_name,
                v_bfg_location_id,
                v_bfg_address_id,
                v_address_line1, v_address_line2,
                v_floor, v_room, v_city, v_state, v_country,
                v_post, v_phone, v_email,
                v_expedio_site_id,
                v_bfg_contact_id,
                v_first_name, v_last_name, v_phone_number,
                v_job_title,
                v_fax,
                v_email,
                v_contact_type,
                v_mobile_number,
                v_site_type
           FROM ivpn_bfg_expedio_sites ibes, ivpn_bfg_expedio_contacts ibec
          WHERE     (ibes.bfg_site_id  = ibec.bfg_site_id
                                        OR ibes.expedio_site_id  = ibec.expedio_site_id)
                AND ibes.bfg_customer_id = in_bfg_customer_id
                AND nvl(ibes.bfg_site_id,ibes.expedio_site_id) = v_site_id
                AND ibec.ROLE = 'Site Primary Contact';

         v_primary_contacts :=
               v_first_name  || '|'  ||
               v_last_name || '|'
              || v_job_title
              || '|'
              || v_email
              || '|'
              || v_phone_number
              || '|'
              || v_mobile_number
              || '|'
              || v_fax
              || '||';


        v_error_location := 50;
        SELECT decode(v_site_type,'CENTRAL','Y',NULL) INTO  in_mainsiteflag  FROM dual;

         IF v_count_site_id = 0
         THEN
        begin
            /*CREATE SIT BY CALLING SPI_SITE*/
            v_error_location := 60;
            pkg_site_r5.
             spi_site (in_customerid                 => in_customerid,
                       in_quoteheaderid              => in_quoteheaderid,
                       in_sitename                   => v_site_name,
                       in_customer_reportsitename    => v_site_name,
                       in_buildingno                 => NULL,
                       in_addressline1               => v_address_line1,
                       in_city                       => v_city,
                       in_state                      => v_state,
                       in_state_code                 => NULL,
                       in_countryid                  => in_countryid,
                       in_postzipcode                => v_post,
                       in_telephoneareacode          => v_phone_number,
                       in_county                     => in_county,
                       in_local_business_cust_name   => NULL,
                       in_additionalsite             => in_additionalsite,
                       in_pricontact                 => v_primary_contacts,
                       in_seccontact                 => NULL,
                       in_techcontact                => NULL,
                       in_servassurcontact           => NULL,
                       in_servicedlvcontact          => NULL,
                       in_bfgsiteid                  => v_bfg_site_id,
                       in_bfgsitename                => v_site_name,
                       in_expedio_site_id            => v_expe_site_id,
                       in_kcidetails                 => NULL,
                       in_lineofsitebilling          => NULL,
                       in_mainsiteflag               => in_mainsiteflag,
                       in_createdby                  => in_createdby,
                       IN_PLACE_ACC_PRICE_REV_ORDER  => null,
                       in_phone_number               => null,
                       out_siteid                    => out_siteid,
                       out_status                    => out_status,
                       out_errmsg                    => out_errmsg);
               V_COUNT_SITE_ID := OUT_SITEID;
        IF out_errmsg IS NOT NULL THEN
        v_error_location := 70;
        out_status := pkg_constants.con_status_failure;
        out_errmsg := substr('At '||v_error_location||'-'||sqlerrm,1,150);
        END IF;
        EXCEPTION
        WHEN others THEN
          out_status := pkg_constants.con_status_failure;
          out_errmsg := substr('At '||v_error_location||'-'||sqlerrm,1,150);
          v_sql_code := sqlcode;
          PKG_COMMON.SPI_ERROR_LOG( IN_QUOTEID, IN_QUOTEHEADERID, V_COUNT_SITE_ID, null, null,
                                    'pkg_site_r5.spi_site', v_sql_code, out_errmsg );
        end;
        begin
        v_error_location := 80;
        pkg_site_r5.spi_quote_site_r5  (in_quoteheaderid,
                                  out_siteid,
                                  NULL,
                                  NULL,
                                  in_modifiedby,
                                  out_status,
                                  OUT_ERRMSG);
        IF out_errmsg IS NOT NULL THEN
        out_status := pkg_constants.con_status_failure;
        out_errmsg := substr('At '||v_error_location||'-'||sqlerrm,1,150);
        END IF;
        EXCEPTION
        WHEN others THEN
          out_status := pkg_constants.con_status_failure;
          out_errmsg := substr('At '||v_error_location||'-'||sqlerrm,1,150);
          v_sql_code := sqlcode;
          PKG_COMMON.SPI_ERROR_LOG( IN_QUOTEID, IN_QUOTEHEADERID, null, null, null,
                                    'pkg_site_r5.spi_quote_site_r5', v_sql_code, out_errmsg );
        end;
         else
         BEGIN
         v_error_location := 90;
            pkg_site.spu_site (in_customerid                 => in_customerid,
                       in_siteid                     => v_count_site_id,
                       in_customer_reportsitename    => NULL,
                       in_buildingno                 => NULL,
                       in_addressline1               => v_address_line1,
                       in_city                       => v_city,
                       in_state                      => v_state,
                       in_state_code                 => NULL,
                       in_countryid                  => in_countryid,
                       in_postzipcode                => v_phone_number,
                       in_telephoneareacode          => v_phone_number,
                       in_county                     => in_county,
                       in_local_business_cust_name   => NULL,
                       in_additionalsite             => in_additionalsite,
                       in_pricontact                 => v_primary_contacts,
                       in_seccontact                 => NULL,
                       in_techcontact                => NULL,
                       in_servassurcontact           => NULL,
                       in_servicedlvcontact          => NULL,
                       in_bfgsiteid                  => v_site_id,
                       in_bfgsitename                => v_site_name,
                       in_kcidetails                 => NULL,
                       in_lineofsitebilling          => NULL,
                       in_modifiedby                 => in_createdby,
                       out_status                    => out_status,
                       OUT_ERRMSG                    => OUT_ERRMSG);
        IF out_errmsg IS NOT NULL THEN
        out_status := pkg_constants.con_status_failure;
        out_errmsg := substr('At '||v_error_location||'-'||sqlerrm,1,150);
        END IF;
        EXCEPTION
        WHEN others THEN
          out_status := pkg_constants.con_status_failure;
          out_errmsg := substr('At '||v_error_location||'-'||sqlerrm,1,150);
          v_sql_code := sqlcode;
          PKG_COMMON.SPI_ERROR_LOG( IN_QUOTEID, IN_QUOTEHEADERID, null, null, null,
                                    'pkg_site.spu_site', v_sql_code, out_errmsg );
        end;
        begin
       v_error_location := 100;
       pkg_site_r5.spi_quote_site_r5  (in_quoteheaderid,
                              v_count_site_id,
                              NULL,
                              NULL,
                              in_modifiedby,
                              out_status,
                              OUT_ERRMSG);
        IF out_errmsg IS NOT NULL THEN
        out_status := pkg_constants.con_status_failure;
        out_errmsg := substr('At '||v_error_location||'-'||sqlerrm,1,150);
        END IF;
        EXCEPTION
        WHEN others THEN
          out_status := pkg_constants.con_status_failure;
          out_errmsg := substr('At '||v_error_location||'-'||sqlerrm,1,150);
          v_sql_code := sqlcode;
          PKG_COMMON.SPI_ERROR_LOG( IN_QUOTEID, IN_QUOTEHEADERID, null, null, null,
                                    'pkg_site.spu_site', v_sql_code, out_errmsg );
         end;
       end if;
         IF out_status =2
         THEN
            v_count_site_id := out_siteid;
         END IF;

          IF out_status = 1 OR out_status = 2
         THEN
            BEGIN
               v_line_item.DELETE;
                j := 0;
               FOR i IN in_line_item.FIRST .. in_line_item.LAST
               loop
                  IF in_line_item (i).o_site_id = in_siteid (site_cusr).site_id
                  THEN
                     j := j + 1;
                     v_line_item.EXTEND (1);
                     v_line_item (j) := in_line_item (i);
                  END IF;
               END loop;
     v_error_location := 110;
               /* Creating Quote Configuration Process */
                pkg_quote.spi_quote_config_obj (
                  in_quoteheaderid    => in_quoteheaderid,
                  in_siteid           => v_count_site_id,
                  in_line_item        => v_line_item,
                  in_attributelevel   => in_attributelevel,
                  in_createdby        => in_createdby,
                  out_status          => out_status,
                  out_errmsg          => out_errmsg);
        IF out_errmsg IS NOT NULL THEN
        out_status := pkg_constants.con_status_failure;
        out_errmsg := substr('At '||v_error_location||'-'||sqlerrm,1,150)||v_error_location;
        END IF;
            END;
         END IF;
      end if;
 begin
 IF UPPER(in_modifyflag)='Y' AND  out_status=1  THEN
      pkg_quote_reeng.spu_order_tobe_to_asis(
                          IN_QUOTEID => in_quoteid,
                          IN_QUOTEHEADERID => in_quoteheaderid,
                          IN_SITEID => v_count_site_id,
                          IN_CREATEDBY => in_createdby,
                          OUT_STATUS => OUT_STATUS,
                          OUT_ERRMSG => OUT_ERRMSG
                        );
END IF;
exception
      WHEN others THEN
            out_status := pkg_constants.con_status_failure;
            out_errmsg := substr('At '||v_error_location||'-'||sqlerrm,1,150);
            v_sql_code := sqlcode;
            pkg_common.spi_error_log(
                                  in_quoteid,
                                  in_quoteheaderid,
                                  v_count_site_id||'v_count_site_id',
                                  NULL,
                                  NULL,
                                  'spu_order_tobe_to_asis',
                                  v_sql_code,
                                  out_errmsg
                                 );

 END;

   END loop;
 exception
      WHEN others THEN
            out_status := pkg_constants.con_status_failure;
            out_errmsg := substr('At '||v_error_location||'-'||sqlerrm,1,150)||v_error_location;
            v_sql_code := sqlcode;
            pkg_common.spi_error_log(
                                  in_quoteid,
                                  in_quoteheaderid,
                                  NULL,
                                  NULL,
                                  NULL,
                                  'SPI_QUOTE_CONF_OBJ_R9',
                                  v_sql_code,
                                  out_errmsg
                                 );
END spi_quote_conf_obj_r9;
-------------------End of the MX Contact --------------

END PKG_QUOTE;
/

---------------------------------------------------------------------------------
  -- END: DDL for Packages
---------------------------------------------------------------------------------





