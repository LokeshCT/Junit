package com.bt.rsqe.ape.repository;

import com.bt.rsqe.ape.dto.ApeQref;
import com.bt.rsqe.ape.dto.ApeQrefIdentifier;
import com.bt.rsqe.ape.dto.SiteAvailabilityStatus;
import com.bt.rsqe.ape.dto.sac.SacApeStatus;
import com.bt.rsqe.ape.dto.sac.SacBulkInputDTO;
import com.bt.rsqe.ape.dto.sac.SacSiteDTO;
import com.bt.rsqe.ape.dto.sac.SacSupplierProdAvailDTO;
import com.bt.rsqe.ape.repository.entities.AccessStaffCommentEntity;
import com.bt.rsqe.ape.repository.entities.AccessUserCommentsEntity;
import com.bt.rsqe.ape.repository.entities.ApeQrefDetailEntity;
import com.bt.rsqe.ape.repository.entities.ApeQrefErrorEntity;
import com.bt.rsqe.ape.repository.entities.ApeRequestEntity;
import com.bt.rsqe.ape.repository.entities.AvailabilityParamEntity;
import com.bt.rsqe.ape.repository.entities.AvailabilityRequestQueue;
import com.bt.rsqe.ape.repository.entities.AvailabilitySetEntity;
import com.bt.rsqe.ape.repository.entities.DslEfmSupportedCountriesEntity;
import com.bt.rsqe.ape.repository.entities.OnnetAvailabilityEntity;
import com.bt.rsqe.ape.repository.entities.OnnetBuildingEntity;
import com.bt.rsqe.ape.repository.entities.OnnetBuildingsWithEFMEntity;
import com.bt.rsqe.ape.repository.entities.SacBulkUploadEntity;
import com.bt.rsqe.ape.repository.entities.SacRequestEntity;
import com.bt.rsqe.ape.repository.entities.SacSupplierProdAvailEntity;
import com.bt.rsqe.ape.repository.entities.SacSupplierProdMasterEntity;
import com.bt.rsqe.ape.repository.entities.SacSupplierProdMasterPK;
import com.bt.rsqe.ape.repository.entities.SupplierCheckApeRequestEntity;
import com.bt.rsqe.ape.repository.entities.SupplierCheckClientRequestEntity;
import com.bt.rsqe.ape.repository.entities.SupplierCheckLogEntity;
import com.bt.rsqe.ape.repository.entities.SupplierProductEntity;
import com.bt.rsqe.ape.repository.entities.SupplierRequestSiteEntity;
import com.bt.rsqe.ape.repository.entities.SupplierSiteEntity;
import com.bt.rsqe.dto.SearchCriteria;

import java.util.Date;
import java.util.List;

public interface APEQrefRepository {
    String MARKET_BASED_PRICE = "MarketBasedPrice";
    String ACCESS_PRICE = "AccessPrice";
    String RENEWAL_PRICE = "RenewalPrice";
    ApeRequestEntity getAPERequestByUniqueId(String uniqueId);
    void  createApeRequest(SupplierCheckApeRequestEntity supplierCheckApeRequestEntity);
    ApeRequestEntity getAPERequestByRequestId(String requestId);
    List<ApeQrefDetailEntity> getAPEQrefsByUniqueId(String uniqueId);
    ApeQref getApeQref(String qrefId);
    List<ApeQrefErrorEntity> getApeQrefErrors(String qrefId);
    List<AccessStaffCommentEntity> getStaffComments(String qrefId);
    void deleteApeQref(String qrefId);
    List<String> getApeQrefId(String requiredId);
    void save(ApeQrefDetailEntity apeQrefDetailEntity);
    void save(ApeRequestEntity apeRequestEntity);
    void save(AccessUserCommentsEntity accessUserCommentsEntity);
    void save(ApeQrefErrorEntity apeQrefErrorEntity);
    void save(AccessStaffCommentEntity accessStaffCommentEntity);
    List<AccessUserCommentsEntity> getUserCommentsForQrefId(String qrefId);
    List<ApeQrefIdentifier> getQrefIdentifiers(String uniqueId, SearchCriteria searchCriteria);
    void save(List<DslEfmSupportedCountriesEntity> entities);
    void saveAvailabilityRequestList(List<AvailabilityRequestQueue> requests);
    void saveClientRequestList(List<SupplierCheckClientRequestEntity> requests);
    void save(SupplierCheckLogEntity entity);
    void save(SupplierCheckClientRequestEntity entity);
    void save(SupplierSiteEntity entity);
    void removeSiteEntity(SupplierSiteEntity entity);
    void save(SupplierProductEntity entity);
    void save(AvailabilitySetEntity entity);
    void save(AvailabilityParamEntity entity);
    void save(Object entity);
    void saveAlone(Object entity);
    Long getNextValOfSupplierCheckApeRequestId() throws  Exception;
    Long getNextValOfSupplierCheckClientRequestId() throws  Exception;
    List<SupplierSiteEntity> getSupplierSitesByCustomerId(Long customerId) throws  Exception;
    List<SiteAvailabilityStatus> getSiteAvailabilityStatus(Long customerId) throws Exception;
    List<SupplierSiteEntity> getSupplierSitesBySiteId(List<Long> siteIds) throws  Exception;
    SupplierProductEntity getSupplierProductBySiteIdAndSpacId(Long siteId, String spacid) throws Exception;
    SacSupplierProdMasterEntity getSacSupplierProdMasterEntity(Long siteId,Long supplierId, String spacid) throws Exception ;
    List<SacSupplierProdAvailEntity> getAllAvaliableForProcessingSacSuppliers(String fileName, String countryIso, String telephoneNo) throws Exception ;
    List<SupplierProductEntity> getSupplierProductBySiteIdAndSpacIds(Long siteId, List<String> spacIds) throws Exception;
    List<SupplierProductEntity> getSupplierProducts(Long siteId) throws Exception;
    void updateStatusForSupplierProduct(Long siteId, String spacId, String supplierId, String status, String description, String productAvailableStatus) throws Exception;
    List<String> getDslEfmSupportedCountries() throws Exception;
    List<Long> getExistingSites(Long siteId) throws Exception;
    List<DslEfmSupportedCountriesEntity> getDslSupportedCountries() throws Exception;
    List<Long> getExistingSitesAfterExcludingFailedSites(Long customerId) throws Exception;
    boolean isRequestValid(String requestId) throws  Exception;
    SupplierCheckClientRequestEntity getClientRequest(String clientRequestId) throws Exception;
    <T> List<T> getAll(Class<T> t);
    String getAvailabilityTelephone(String siteId) throws Exception;
    Long getCustomerId(String requestId) throws Exception;
    boolean getAutoTriggerValue(String requestId) throws Exception;
    Long getSupplierProductId(String spacId, Long siteId) throws Exception;
    SupplierSiteEntity getSupplierSiteEntity(Long siteId) throws Exception;
    SupplierRequestSiteEntity getSupplierRequestSite(Long siteId, String requestId) throws Exception;
    SacRequestEntity getSACSiteRequest(String fileName,Long siteId) throws Exception;
    SupplierCheckClientRequestEntity getSupplierCheckClientRequest(String id) throws Exception;
    SupplierCheckApeRequestEntity getSupplierCheckApeRequest(String id) throws Exception;
    void updateSupplierSiteStatusExpired() throws Exception;
    void updateSupplierSiteStatusFailedIfTimedOut() throws Exception;
    void updateSupplierProductStatus(Long suppProdId, String status, String errorDescription) throws Exception;
    void updateClientRequestStatus(String clientRequestId, String status) throws Exception;
    void updateSupplierSiteStatus(Long siteId, int availabilityTypeId, String description) throws Exception;
    void updateSupplierSiteStatusLatest(Long siteId, int availabilityTypeId, String description) throws Exception;
    void updateAvailabilityTelephoneNumber(Long siteId, String telephoneNumber) throws Exception;
    void updateSupplierProduct(Long siteId, String spacId, String productAvailability, String checkReference) throws Exception;
    List<SacRequestEntity> getAllAvailableForProcessingSacRequests(String fileName);
    List<SacRequestEntity> getAllAvailableSacRequestsForAvailCheck(String fileName);
    String createSacBulkUpload(SacBulkInputDTO bulkInputDTO);
    public void createSacSiteRequest(SacBulkInputDTO bulkInputDTO);
    void deleteSacBulkUpload(String fileName);
    void deleteRequestFromAvailabilityQueue(AvailabilityRequestQueue request);
    void updateQueuedRequestStatus(AvailabilityRequestQueue request);
    List<SacBulkUploadEntity> getInProgressUploads(String userId);
    List<SacBulkUploadEntity> getAllProcessingReports(Date tillDate);
    void updateSacBulkUpload(SacBulkInputDTO bulkInputDTO);
    List<SacSupplierProdAvailEntity> getUpdatedProductListInLast24Hrs(String countryIsoCode);
    boolean hasUpdatedProductListInLast24Hrs(String countryIsoCode);
    void updateSacRequestStatus(Long[] siteIds, String status,String ape2ReqId,String ape3ReqId);
    void updateSacRequestStatus(String fileName, String status, String ape2ReqId, String ape3ReqId);
    void updateSacSiteErrorDesc(SacSiteDTO sacSiteDTO);
    void updateSacSiteErrorDesc(String fileName,String errorDescription,String status);
    void updateSacSiteAvailStatus(SacSupplierProdMasterPK[] spacs, String status);
    List<SacSupplierProdAvailEntity> getAllSacSuppAvailEntityForSite(Long siteId);
    SacSupplierProdAvailEntity getSacSuppAvailEntityForSite(Long siteId,String spacId);
    SacRequestEntity getSacSiteRequests(String ape2ndReId, String ape3rdReqId);
    SacRequestEntity getSacSiteRequestBySiteId(Long siteId);
    SacSupplierProdMasterEntity getSuppProdMaster(String spacId);
    List<Long> getSiteIdsByClientRequestId(String id);
    List<SacRequestEntity> getAllApe2ndReqInitiatedSites(String fileName);
    List<SacRequestEntity> getAllSacRequestEntity(String fileName);
    List<SacRequestEntity> getAllSacSitesWithStatus(String fileName,SacApeStatus apeStatus);
    public SacBulkUploadEntity getSacBulkUploadEntity(String fileName);
    void saveSacSupProducts(List<SacSupplierProdAvailEntity> sacSupplierProdAvailEntities);
    void saveSacSupplierProdAvailEntities(List<SacSupplierProdAvailEntity> sacSupplierProdAvailEntities);
    void saveSacSupplierProdAvailEntity(SacSupplierProdAvailEntity sacSupplierProdAvailEntity);
    void updateSacSupplierProdToSite(Long siteId, List<SacSupplierProdAvailDTO> sacSupplierProdAvailDTOs);
    String getCountryIsoCode(String country);
    SupplierSiteEntity getSupplierSiteBySiteName(Long customerId, String siteName);
    boolean isAnyReportGenInProgress(String userId);
    boolean isAllAvailabilityCheckCompleted(String fileName);
    List<SacBulkUploadEntity> getAllInProcessingSacUploadsBeyond24Hrs();
    void updateSupplierSiteAsGreenIfAnyProductIsAvailable();
    void updateSupplierProductTimeout();
    List<String> getProductsBySiteAndSupplier(Long siteId, List<String> spacIds);
    void updateSupplierProduct(List<String> productList, Date requestedTime, Date requestTimeout, String status, String mandatory, String description, Integer retryCount);
    List<Long> getExistingSitesAfterExcludingFailedSitesForOnNet(Long customerId) throws Exception;
    void updateOnNetAvailability(long siteId, String onnetAvailable);
    OnnetAvailabilityEntity getOnNetAvailabilityEntity(long siteID);
    public List<Long> getExistingOnNetSites(Long customerId) throws Exception;
    void saveSelectedOnnetDetails(List<OnnetBuildingEntity> onnetBuildingEntityList);
    OnnetBuildingsWithEFMEntity getOnnetBuildingsWithEFMEntity(long siteID);
}
