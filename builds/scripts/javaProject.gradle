// Module-specific settings

apply from: "$rootDir/builds/scripts/aspectJ.gradle"
apply from: "$rootDir/builds/scripts/tattletale.gradle"
apply from: "$rootDir/builds/scripts/teststats.gradle"
apply from: "$rootDir/builds/scripts/generate-version-class.gradle"

if (hasProperty("lintAll")) {
    //include this on a build by including -PlintUnchecked
    tasks.withType(Compile) {
        options.compilerArgs << "-Xlint:all"
    }
}


if (hasProperty("lintUnchecked")) {
    //include this on a build by including -PlintUnchecked
    tasks.withType(Compile) {
        options.compilerArgs << "-Xlint:unchecked"
    }
}

if (hasProperty("lintDeprecation")) {
        //include this on a build by including -PlintDeprecation

    tasks.withType(Compile) {
        options.compilerArgs << "-Xlint:deprecated"
    }
}


dependencies {
    compile(['joda-time:joda-time:1.6.2',
                    'com.google.guava:guava:12.0',
                    'commons-lang:commons-lang:2.6',
                    'org.slf4j:slf4j-api:1.6.1',
                    'ch.qos.logback:logback-classic:1.0.0',
                    'commons-collections:commons-collections:3.2.1',
                    'com.bt.commons:configuration:1.3',
                    'org.perf4j:perf4j:0.9.16:logbackonly',
                    'org.slf4j:log4j-over-slf4j:1.6.6',
                    'com.sun.jersey.contribs:jersey-apache-client4:1.8'
            ])
    runtime(['org.aspectj:aspectjrt:1.6.10',
             'org.aspectj:aspectjweaver:1.6.10',
            ])
    runtime('commons-jexl:commons-jexl:1.1') {
        exclude module: 'junit'
    }


    testCompile(['junit:junit:4.8.2',
                        'org.jmock:jmock-junit4:2.5.1',
                        'org.hamcrest:hamcrest-all:1.1',
                        'org.jmock:jmock-legacy:2.5.1',
                        'commons-httpclient:commons-httpclient:3.1',
                        'org.mockito:mockito-all:1.9.0',
                        'org.junit.extensions.cpsuite:cpsuite:1.2.5',
                        'org.seleniumhq.selenium:selenium-server:2.44.0',
                        'org.json:json:20140107',
                        'pl.pragmatists:JUnitParams:0.5.0'
                ])
    testRuntime(['de.huxhorn.lilith:de.huxhorn.lilith.logback.appender.multiplex-classic:0.9.41'])
}
configurations {
    // Filter out log4j in favour of the log4j-over-slf4j drop-in replacement
    runtime.exclude group: 'log4j', module: 'log4j'

    compile.exclude group: 'org.springframework'

/*    compile.exclude group: 'org.apache.ws.security', module: 'wss4j'*/
    compile.exclude group: 'org.opensaml', module: 'opensaml'
    compile.exclude group: 'org.opensaml', module: 'openws'

    compile.exclude group: 'axis', module: 'axis-wsdl4j'

    testCompile.exclude group: 'net.jcip', module: 'jcip-annotations'
}

def (svnWcRev, svnWcUrl) = getSvnInfo()
jar {
    manifest {
        attributes("build-version": project.version,
                   "vcs-revision": "${svnWcRev ?: 'UNKNOWN'}",
                   "vcs-url": "${svnWcUrl ?: 'UNKNOWN'}"
        )
    }
}

// Ensure that any non-Java files in the source packages are copied across at compile time
sourceSets.main.resources.srcDir 'src/main/java'
sourceSets.test.resources.srcDir 'src/test/java'
task copyMainResources(type: Copy) {
    from('src/main/java') {
        exclude '**/*.java'
    }
    into 'build/classes/main'
}
processResources.dependsOn copyMainResources

task copyTestResources(type: Copy) {
    from('src/test/java') {
        exclude '**/*.java'
    }
    into 'build/classes/test'
}
processTestResources.dependsOn copyTestResources

// Make sure no 'Suite' classes are included in test runs - they result in duplicated tests
test {
    exclude "**/*Suite*.class"
    exclude "**/integration/*IntegrationTest.class"
    jvmArgs "-XX:MaxPermSize=256m"
    if (System.properties['rsqe.test.env']) {
        systemProperty "rsqe.test.env", System.properties['rsqe.test.env']
    }
}

// Specific test goals (for convenience)
task unitTests(type: Test) {
    description = "Run Unit tests only"
    include "**/*Test.class"
    exclude "**/*Suite*.class"
    exclude "**/*Acceptance*.class"
    exclude "**/acceptance/*.class"
    exclude "**/*Integration*.class"
    exclude "**/integration/*.class"
    exclude "**/integration/read/*.class"
    exclude "**/*Functional*.class"
    exclude "**/functional/*.class"
    exclude "**/ConcurrencyTestSuite.class"
}

task integrationTests(type: Test) {
    description = "Run Integration tests only"
    include "**/integration/*IntegrationTest.class"
    include "**/Integration/*IntegrationTest.class"
}

task r18AcceptanceTests(type: Test) {
    description = "Run Acceptance tests only"
    include "**/*Acceptance*.class"
    include "**/acceptance/*.class"
}

task functionalTests(type: Test) {
    description = "Run Functional tests only"
    include "**/*Functional*.class"
    include "**/functional/*.class"
}

task performanceTests(type: Test) {
    description = "Run Load tests only"
    include "**/ConcurrencyTestSuite.class"
}

task longRunningTests(type: Test) {
    description = "Run tests with the @Category(value=SlowTest.class) annotation"
    include "**/SlowTestSuite.class"
}
task quickTests(type: Test) {
    description = "Run tests without the @Category(value=SlowTest.class) annotation"
    include "**/FastTestSuite.class"
}


task bfgPpsrIntegrationTests(type: Test) {
    description = "Run Integration tests only"
    include "**/integration/BfgRepositoryIntegrationTest.class"
    include "**/integration/BfgWriteAssetRelationIntegrationTest.class"
    include "**/integration/PPSRRuleInvokerIntegrationTest.class"
    include "**/integration/BfgAssetReadIntegrationTest.class"
}


// Order is important here - the Clover plugin wraps only /existing/ tasks of type Test
apply from: "$rootDir/builds/scripts/clover.gradle"

// Define and Register extra JARs to be produced from the compiled tests
task testJar(type: Jar) {
    classifier = 'tests'
    from sourceSets.test.output
}

// .. and for the source code
task sourcesJar(type: Jar) {
    classifier = 'source'
    from sourceSets.main.allSource
}

artifacts {
    archives testJar
    archives sourcesJar
}
